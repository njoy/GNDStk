
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDStk/v2.0/transport/Distribution.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_transport {

// Distribution wrapper
void wrapDistribution(python::module &module)
{
   using namespace njoy::GNDStk;
   using namespace njoy::GNDStk::v2_0;

   // type aliases
   using Component = transport::Distribution;
   using _t = std::variant<
      cpTransport::CoulombPlusNuclearElastic,
      transport::KalbachMann,
      transport::AngularEnergy,
      processed::AngularEnergyMC,
      transport::AngularTwoBody,
      transport::Branching3d,
      atomic::CoherentPhotonScattering,
      transport::EnergyAngular,
      processed::EnergyAngularMC,
      atomic::IncoherentPhotonScattering,
      processed::MultiGroup3d,
      transport::Reference,
      tsl::ThermalNeutronScatteringLaw,
      transport::Uncorrelated,
      transport::Unspecified
   >;

   // create the component
   python::class_<Component> component(
      module,
      "Distribution",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const _t &
         >(),
         python::arg("_coulomb_plus_nuclear_elastic_kalbach_mannangular_energyangular_energy_mcangular_two_bodybranching3dcoherent_photon_scatteringenergy_angularenergy_angular_mcincoherent_photon_scatteringmulti_group3dreferencethermal_neutron_scattering_lawuncorrelatedunspecified"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "coulomb_plus_nuclear_elastic",
         python::overload_cast<>(&Component::CoulombPlusNuclearElastic),
         Component::documentation("coulomb_plus_nuclear_elastic").data()
      )
      .def_property_readonly(
         "kalbach_mann",
         python::overload_cast<>(&Component::KalbachMann),
         Component::documentation("kalbach_mann").data()
      )
      .def_property_readonly(
         "angular_energy",
         python::overload_cast<>(&Component::angularEnergy),
         Component::documentation("angular_energy").data()
      )
      .def_property_readonly(
         "angular_energy_mc",
         python::overload_cast<>(&Component::angularEnergyMC),
         Component::documentation("angular_energy_mc").data()
      )
      .def_property_readonly(
         "angular_two_body",
         python::overload_cast<>(&Component::angularTwoBody),
         Component::documentation("angular_two_body").data()
      )
      .def_property_readonly(
         "branching3d",
         python::overload_cast<>(&Component::branching3d),
         Component::documentation("branching3d").data()
      )
      .def_property_readonly(
         "coherent_photon_scattering",
         python::overload_cast<>(&Component::coherentPhotonScattering),
         Component::documentation("coherent_photon_scattering").data()
      )
      .def_property_readonly(
         "energy_angular",
         python::overload_cast<>(&Component::energyAngular),
         Component::documentation("energy_angular").data()
      )
      .def_property_readonly(
         "energy_angular_mc",
         python::overload_cast<>(&Component::energyAngularMC),
         Component::documentation("energy_angular_mc").data()
      )
      .def_property_readonly(
         "incoherent_photon_scattering",
         python::overload_cast<>(&Component::incoherentPhotonScattering),
         Component::documentation("incoherent_photon_scattering").data()
      )
      .def_property_readonly(
         "multi_group3d",
         python::overload_cast<>(&Component::multiGroup3d),
         Component::documentation("multi_group3d").data()
      )
      .def_property_readonly(
         "reference",
         python::overload_cast<>(&Component::reference),
         Component::documentation("reference").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law",
         python::overload_cast<>(&Component::thermalNeutronScatteringLaw),
         Component::documentation("thermal_neutron_scattering_law").data()
      )
      .def_property_readonly(
         "uncorrelated",
         python::overload_cast<>(&Component::uncorrelated),
         Component::documentation("uncorrelated").data()
      )
      .def_property_readonly(
         "unspecified",
         python::overload_cast<>(&Component::unspecified),
         Component::documentation("unspecified").data()
      )
      .def_property_readonly(
         "_coulomb_plus_nuclear_elastic_kalbach_mannangular_energyangular_energy_mcangular_two_bodybranching3dcoherent_photon_scatteringenergy_angularenergy_angular_mcincoherent_photon_scatteringmulti_group3dreferencethermal_neutron_scattering_lawuncorrelatedunspecified",
         python::overload_cast<>(&Component::_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified),
         Component::documentation("_coulomb_plus_nuclear_elastic_kalbach_mannangular_energyangular_energy_mcangular_two_bodybranching3dcoherent_photon_scatteringenergy_angularenergy_angular_mcincoherent_photon_scatteringmulti_group3dreferencethermal_neutron_scattering_lawuncorrelatedunspecified").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_transport
} // namespace python_v2_0
