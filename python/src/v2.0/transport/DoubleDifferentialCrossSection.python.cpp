
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDStk/v2.0/transport/DoubleDifferentialCrossSection.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_transport {

// DoubleDifferentialCrossSection wrapper
void wrapDoubleDifferentialCrossSection(python::module &module)
{
   using namespace njoy::GNDStk;
   using namespace njoy::GNDStk::v2_0;

   // type aliases
   using Component = transport::DoubleDifferentialCrossSection;

   // create the component
   python::class_<Component> component(
      module,
      "DoubleDifferentialCrossSection",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<cpTransport::CoulombPlusNuclearElastic> &,
            const std::optional<containers::XYs3d> &,
            const std::optional<atomic::CoherentPhotonScattering> &,
            const std::optional<atomic::IncoherentPhotonScattering> &,
            const std::optional<transport::Reference> &,
            const std::optional<containers::Regions3d> &,
            const std::optional<tsl::ThermalNeutronScatteringLaw_coherentElastic> &,
            const std::optional<tsl::ThermalNeutronScatteringLaw_incoherentElastic> &,
            const std::optional<tsl::ThermalNeutronScatteringLaw_incoherentInelastic> &
         >(),
         python::arg("coulomb_plus_nuclear_elastic") = std::nullopt,
         python::arg("xys3d") = std::nullopt,
         python::arg("coherent_photon_scattering") = std::nullopt,
         python::arg("incoherent_photon_scattering") = std::nullopt,
         python::arg("reference") = std::nullopt,
         python::arg("regions3d") = std::nullopt,
         python::arg("thermal_neutron_scattering_law_coherent_elastic") = std::nullopt,
         python::arg("thermal_neutron_scattering_law_incoherent_elastic") = std::nullopt,
         python::arg("thermal_neutron_scattering_law_incoherent_inelastic") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "coulomb_plus_nuclear_elastic",
         python::overload_cast<>(&Component::CoulombPlusNuclearElastic),
         Component::documentation("coulomb_plus_nuclear_elastic").data()
      )
      .def_property_readonly(
         "xys3d",
         python::overload_cast<>(&Component::XYs3d),
         Component::documentation("xys3d").data()
      )
      .def_property_readonly(
         "coherent_photon_scattering",
         python::overload_cast<>(&Component::coherentPhotonScattering),
         Component::documentation("coherent_photon_scattering").data()
      )
      .def_property_readonly(
         "incoherent_photon_scattering",
         python::overload_cast<>(&Component::incoherentPhotonScattering),
         Component::documentation("incoherent_photon_scattering").data()
      )
      .def_property_readonly(
         "reference",
         python::overload_cast<>(&Component::reference),
         Component::documentation("reference").data()
      )
      .def_property_readonly(
         "regions3d",
         python::overload_cast<>(&Component::regions3d),
         Component::documentation("regions3d").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law_coherent_elastic",
         python::overload_cast<>(&Component::thermalNeutronScatteringLaw_coherentElastic),
         Component::documentation("thermal_neutron_scattering_law_coherent_elastic").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law_incoherent_elastic",
         python::overload_cast<>(&Component::thermalNeutronScatteringLaw_incoherentElastic),
         Component::documentation("thermal_neutron_scattering_law_incoherent_elastic").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law_incoherent_inelastic",
         python::overload_cast<>(&Component::thermalNeutronScatteringLaw_incoherentInelastic),
         Component::documentation("thermal_neutron_scattering_law_incoherent_inelastic").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_transport
} // namespace python_v2_0
