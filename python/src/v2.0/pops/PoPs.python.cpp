
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDStk/v2.0/pops/PoPs.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_pops {

// PoPs wrapper
void wrapPoPs(python::module &module)
{
   using namespace njoy::GNDStk;
   using namespace njoy::GNDStk::v2_0;

   // type aliases
   using Component = pops::PoPs;

   // create the component
   python::class_<Component> component(
      module,
      "PoPs",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const XMLName &,
            const XMLName &,
            const XMLName &,
            const std::optional<pops::Aliases> &,
            const std::optional<pops::Baryons> &,
            const std::optional<pops::ChemicalElements> &,
            const std::optional<documentation::Documentation> &,
            const std::optional<pops::GaugeBosons> &,
            const std::optional<pops::Leptons> &,
            const std::optional<styles::Styles> &,
            const std::optional<pops::Unorthodoxes> &
         >(),
         python::arg("format"),
         python::arg("name"),
         python::arg("version"),
         python::arg("aliases") = std::nullopt,
         python::arg("baryons") = std::nullopt,
         python::arg("chemical_elements") = std::nullopt,
         python::arg("documentation") = std::nullopt,
         python::arg("gauge_bosons") = std::nullopt,
         python::arg("leptons") = std::nullopt,
         python::arg("styles") = std::nullopt,
         python::arg("unorthodoxes") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "format",
         &Component::format,
         Component::documentation("format").data()
      )
      .def_property_readonly(
         "name",
         &Component::name,
         Component::documentation("name").data()
      )
      .def_property_readonly(
         "version",
         &Component::version,
         Component::documentation("version").data()
      )
      .def_property_readonly(
         "aliases",
         python::overload_cast<>(&Component::aliases),
         Component::documentation("aliases").data()
      )
      .def_property_readonly(
         "baryons",
         python::overload_cast<>(&Component::baryons),
         Component::documentation("baryons").data()
      )
      .def_property_readonly(
         "chemical_elements",
         python::overload_cast<>(&Component::chemicalElements),
         Component::documentation("chemical_elements").data()
      )
      .def_property_readonly(
         "documentation",
         python::overload_cast<>(&Component::doc),
         Component::documentation("documentation").data()
      )
      .def_property_readonly(
         "gauge_bosons",
         python::overload_cast<>(&Component::gaugeBosons),
         Component::documentation("gauge_bosons").data()
      )
      .def_property_readonly(
         "leptons",
         python::overload_cast<>(&Component::leptons),
         Component::documentation("leptons").data()
      )
      .def_property_readonly(
         "styles",
         python::overload_cast<>(&Component::styles),
         Component::documentation("styles").data()
      )
      .def_property_readonly(
         "unorthodoxes",
         python::overload_cast<>(&Component::unorthodoxes),
         Component::documentation("unorthodoxes").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_pops
} // namespace python_v2_0
