
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDStk/v2.0/resonances/Resolved.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_resonances {

// Resolved wrapper
void wrapResolved(python::module &module)
{
   using namespace njoy::GNDStk;
   using namespace njoy::GNDStk::v2_0;

   // type aliases
   using Component = resonances::Resolved;
   using _t = std::variant<
      resonances::BreitWigner,
      resonances::RMatrix,
      resonances::EnergyIntervals
   >;

   // create the component
   python::class_<Component> component(
      module,
      "Resolved",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const Float64 &,
            const Float64 &,
            const XMLName &,
            const _t &
         >(),
         python::arg("domain_max"),
         python::arg("domain_min"),
         python::arg("domain_unit"),
         python::arg("_breit_wigner_rmatrixenergy_intervals"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "domain_max",
         &Component::domainMax,
         Component::documentation("domain_max").data()
      )
      .def_property_readonly(
         "domain_min",
         &Component::domainMin,
         Component::documentation("domain_min").data()
      )
      .def_property_readonly(
         "domain_unit",
         &Component::domainUnit,
         Component::documentation("domain_unit").data()
      )
      .def_property_readonly(
         "breit_wigner",
         python::overload_cast<>(&Component::BreitWigner),
         Component::documentation("breit_wigner").data()
      )
      .def_property_readonly(
         "rmatrix",
         python::overload_cast<>(&Component::RMatrix),
         Component::documentation("rmatrix").data()
      )
      .def_property_readonly(
         "energy_intervals",
         python::overload_cast<>(&Component::energyIntervals),
         Component::documentation("energy_intervals").data()
      )
      .def_property_readonly(
         "_breit_wigner_rmatrixenergy_intervals",
         python::overload_cast<>(&Component::_BreitWignerRMatrixenergyIntervals),
         Component::documentation("_breit_wigner_rmatrixenergy_intervals").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_resonances
} // namespace python_v2_0
