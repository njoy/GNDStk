
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDStk/v2.0/resonances/Resonances.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_resonances {

// Resonances wrapper
void wrapResonances(python::module &module)
{
   using namespace njoy::GNDStk;
   using namespace njoy::GNDStk::v2_0;

   // type aliases
   using Component = resonances::Resonances;

   // create the component
   python::class_<Component> component(
      module,
      "Resonances",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<XMLName> &,
            const std::optional<resonances::HardSphereRadius> &,
            const std::optional<std::vector<resonances::Resolved>> &,
            const resonances::ScatteringRadius &,
            const std::optional<std::vector<resonances::Unresolved>> &
         >(),
         python::arg("href") = std::nullopt,
         python::arg("hard_sphere_radius") = std::nullopt,
         python::arg("resolved") = std::nullopt,
         python::arg("scattering_radius"),
         python::arg("unresolved") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "href",
         &Component::href,
         Component::documentation("href").data()
      )
      .def_property_readonly(
         "hard_sphere_radius",
         python::overload_cast<>(&Component::hardSphereRadius),
         Component::documentation("hard_sphere_radius").data()
      )
      .def_property_readonly(
         "resolved",
         python::overload_cast<>(&Component::resolved),
         Component::documentation("resolved").data()
      )
      .def_property_readonly(
         "scattering_radius",
         python::overload_cast<>(&Component::scatteringRadius),
         Component::documentation("scattering_radius").data()
      )
      .def_property_readonly(
         "unresolved",
         python::overload_cast<>(&Component::unresolved),
         Component::documentation("unresolved").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_resonances
} // namespace python_v2_0
