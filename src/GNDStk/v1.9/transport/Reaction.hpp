
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_TRANSPORT_REACTION
#define GNDSTK_V1_9_TRANSPORT_REACTION

#include "GNDStk/v1.9/transport/CrossSection.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Reaction
// -----------------------------------------------------------------------------

class Reaction : public Component<transport::Reaction> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Reaction"; }
   static auto FIELD() { return "reaction"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         int{}
            / Meta<>("ENDF_MT") |
         std::optional<std::string>{}
            / Meta<>("fissionGenre") |
         std::string{}
            / Meta<>("label") |
         // children
         transport::CrossSection{}
            / --Child<>("crossSection")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<int> ENDF_MT{this};
   Field<std::optional<std::string>> fissionGenre{this};
   Field<std::string> label{this};

   // children
   Field<transport::CrossSection> crossSection{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->ENDF_MT, \
      this->fissionGenre, \
      this->label, \
      this->crossSection)

   // default, and from fields
   explicit Reaction(
      const wrapper<int> &ENDF_MT = {},
      const wrapper<std::optional<std::string>> &fissionGenre = {},
      const wrapper<std::string> &label = {},
      const wrapper<transport::CrossSection> &crossSection = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MT(this,ENDF_MT),
      fissionGenre(this,fissionGenre),
      label(this,label),
      crossSection(this,crossSection)
   {
      Component::finish();
   }

   // from node
   Reaction(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Reaction(const Reaction &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Reaction(Reaction &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Reaction &operator=(const Reaction &) = default;
   Reaction &operator=(Reaction &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/transport/Reaction/src/custom.hpp"
   #undef GNDSTK_COMPONENT

}; // class Reaction

} // namespace transport
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
