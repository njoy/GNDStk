
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_TRANSPORT_REACTIONSUITE
#define GNDSTK_V1_9_TRANSPORT_REACTIONSUITE

#include "GNDStk/v1.9/transport/Reactions.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class ReactionSuite
// -----------------------------------------------------------------------------

class ReactionSuite : public Component<transport::ReactionSuite> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "ReactionSuite"; }
   static auto FIELD() { return "reactionSuite"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::string{}
            / Meta<>("evaluation") |
         std::string{}
            / Meta<>("format") |
         std::string{}
            / Meta<>("projectile") |
         enums::Frame{}
            / Meta<>("projectileFrame") |
         std::string{}
            / Meta<>("target") |
         std::optional<enums::Interaction>{}
            / Meta<>("interaction") |
         // children
         std::optional<transport::Reactions>{}
            / --Child<>("reactions")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::string> evaluation{this};
   Field<std::string> format{this};
   Field<std::string> projectile{this};
   Field<enums::Frame> projectileFrame{this};
   Field<std::string> target{this};
   Field<std::optional<enums::Interaction>> interaction{this};

   // children
   Field<std::optional<transport::Reactions>> reactions{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->evaluation, \
      this->format, \
      this->projectile, \
      this->projectileFrame, \
      this->target, \
      this->interaction, \
      this->reactions)

   // default, and from fields
   explicit ReactionSuite(
      const wrapper<std::string> &evaluation = {},
      const wrapper<std::string> &format = {},
      const wrapper<std::string> &projectile = {},
      const wrapper<enums::Frame> &projectileFrame = {},
      const wrapper<std::string> &target = {},
      const wrapper<std::optional<enums::Interaction>> &interaction = {},
      const wrapper<std::optional<transport::Reactions>> &reactions = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      evaluation(this,evaluation),
      format(this,format),
      projectile(this,projectile),
      projectileFrame(this,projectileFrame),
      target(this,target),
      interaction(this,interaction),
      reactions(this,reactions)
   {
      Component::finish();
   }

   // from node
   explicit ReactionSuite(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ReactionSuite(const ReactionSuite &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ReactionSuite(ReactionSuite &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ReactionSuite &operator=(const ReactionSuite &) = default;
   ReactionSuite &operator=(ReactionSuite &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/transport/ReactionSuite/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ReactionSuite

} // namespace transport
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
