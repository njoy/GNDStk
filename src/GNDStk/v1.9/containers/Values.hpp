
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_CONTAINERS_VALUES
#define GNDSTK_V1_9_CONTAINERS_VALUES

#include "GNDStk/v1.9/key.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {


// -----------------------------------------------------------------------------
// containers::
// class Values
// -----------------------------------------------------------------------------

namespace containers {

class Values : public Component<containers::Values,true> {

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Names: this namespace, this class, a field / node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Values"; }
   static auto FIELD() { return "values"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Defaulted<std::string>{"double"}
            / Meta<>("valueType") |
         Defaulted<int>{0}
            / Meta<>("start") |
         std::optional<int>{}
            / Meta<>("length")
      ;
   }

public:

   using Component::construct;
   using BlockData::operator=;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const std::string valueType = "double";
      static inline const int start = 0;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      mutable Defaulted<std::string> valueType{"double"};
      mutable Defaulted<int> start{0};
      mutable std::optional<int> length;
   } Content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // valueType
   const Defaulted<std::string> &valueType() const
      { return Content.valueType; }
   Defaulted<std::string> &valueType()
      { return Content.valueType; }

   // start
   const Defaulted<int> &start() const
      { return Content.start; }
   Defaulted<int> &start()
      { return Content.start; }

   // length
   const std::optional<int> &length() const
      { return Content.length; }
   std::optional<int> &length()
      { return Content.length; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // valueType(value)
   Values &valueType(const Defaulted<std::string> &obj)
      { BlockData::valueType(valueType() = obj); return *this; }
   Values &valueType(const std::optional<std::string> &obj)
      { BlockData::valueType(valueType() = obj); return *this; }

   // start(value)
   Values &start(const Defaulted<int> &obj)
      { BlockData::start(start() = obj); return *this; }
   Values &start(const std::optional<int> &obj)
      { BlockData::start(start() = obj); return *this; }

   // length(value)
   Values &length(const std::optional<int> &obj)
      { BlockData::length(length() = obj); return *this; }

   // ------------------------
   // Constructors
   // ------------------------

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Values(
      const std::optional<std::string> &valueType =
         std::optional<std::string>{},
      const std::optional<int> &start =
         std::optional<int>{},
      const std::optional<int> &length =
         std::optional<int>{}
   ) :
      Component{
         BlockData{},
         this->valueType(),
         this->start(),
         this->length()
      },
      Content{
         Defaulted<std::string>(defaults.valueType,valueType),
         Defaulted<int>(defaults.start,start),
         length
      }
   {
      Component::finish();
   }

   // copy
   Values(const Values &other) :
      Component{
         other.baseBlockData(),
         this->valueType(),
         this->start(),
         this->length()
      },
      Content{other.Content}
   {
      Component::finish(other);
   }

   // move
   Values(Values &&other) :
      Component{
         other.baseBlockData(),
         this->valueType(),
         this->start(),
         this->length()
      },
      Content{std::move(other.Content)}
   {
      Component::finish(other);
   }

   // from node
   Values(const Node &node) :
      Component{
         BlockData{},
         this->valueType(),
         this->start(),
         this->length()
      }
   {
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   Values(const std::vector<T> &vector) :
      Component{
         BlockData{},
         this->valueType(),
         this->start(),
         this->length()
      }
   {
      Component::finish(vector);
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Values &operator=(const Values &) = default;

   // move
   Values &operator=(Values &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/containers/Values/src/custom.hpp"

}; // class Values

} // namespace containers
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
