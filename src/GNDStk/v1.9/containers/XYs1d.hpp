
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_CONTAINERS_XYS1D
#define GNDSTK_V1_9_CONTAINERS_XYS1D

#include "GNDStk/v1.9/key.hpp"
#include "GNDStk/v1.9/containers/Axes.hpp"
#include "GNDStk/v1.9/containers/Values.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {


// -----------------------------------------------------------------------------
// containers::
// class XYs1d
// -----------------------------------------------------------------------------

namespace containers {

class XYs1d : public Component<containers::XYs1d> {

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Names: this namespace, this class, a field / node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "XYs1d"; }
   static auto FIELD() { return "XYs1d"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<int>{}
            / Meta<>("index") |
         Defaulted<enums::Interpolation>{enums::Interpolation::linlin}
            / Meta<>("interpolation") |
         std::optional<std::string>{}
            / Meta<>("label") |
         std::optional<double>{}
            / Meta<>("outerDomainValue") |
         // children
         std::optional<containers::Axes>{}
            / --Child<>("axes") |
         containers::Values{}
            / --Child<>("values")
      ;
   }

public:

   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const enums::Interpolation interpolation = enums::Interpolation::linlin;
   } defaults;

   // metadata
   Field<XYs1d,std::optional<int>> index;
   Field<XYs1d,Defaulted<enums::Interpolation>> interpolation;
   Field<XYs1d,std::optional<std::string>> label;
   Field<XYs1d,std::optional<double>> outerDomainValue;
   // children
   Field<XYs1d,std::optional<containers::Axes>> axes;
   Field<XYs1d,containers::Values> values;

   // ------------------------
   // Constructors
   // ------------------------

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit XYs1d(
      const std::optional<int> &index = {},
      const std::optional<enums::Interpolation> &interpolation = {},
      const std::optional<std::string> &label = {},
      const std::optional<double> &outerDomainValue = {},
      const std::optional<containers::Axes> &axes = {},
      const containers::Values &values = containers::Values{}
   ) :
      Component{
         BlockData{},
         this->index,
         this->interpolation,
         this->label,
         this->outerDomainValue,
         this->axes,
         this->values
      },
      index(this,index,"index"),
      interpolation(this,defaults.interpolation,interpolation,"interpolation"),
      label(this,label,"label"),
      outerDomainValue(this,outerDomainValue,"outerDomainValue"),
      axes(this,axes,"axes"),
      values(this,values,"values")
   {
      Component::finish();
   }

   // copy
   XYs1d(const XYs1d &other) :
      Component{
         other.baseBlockData(),
         this->index,
         this->interpolation,
         this->label,
         this->outerDomainValue,
         this->axes,
         this->values
      },
      index(this,other.index),
      interpolation(this,other.interpolation),
      label(this,other.label),
      outerDomainValue(this,other.outerDomainValue),
      axes(this,other.axes),
      values(this,other.values)
   {
      Component::finish(other);
   }

   // move
   XYs1d(XYs1d &&other) :
      Component{
         other.baseBlockData(),
         this->index,
         this->interpolation,
         this->label,
         this->outerDomainValue,
         this->axes,
         this->values
      },
      index(this,std::move(other.index)),
      interpolation(this,std::move(other.interpolation)),
      label(this,std::move(other.label)),
      outerDomainValue(this,std::move(other.outerDomainValue)),
      axes(this,std::move(other.axes)),
      values(this,std::move(other.values))
   {
      Component::finish(other);
   }

   // from node
   XYs1d(const Node &node) :
      Component{
         BlockData{},
         this->index,
         this->interpolation,
         this->label,
         this->outerDomainValue,
         this->axes,
         this->values
      },
      index(this,{},"index"),
      interpolation(this,defaults.interpolation,{},"interpolation"),
      label(this,{},"label"),
      outerDomainValue(this,{},"outerDomainValue"),
      axes(this,{},"axes"),
      values(this,containers::Values{},"values")
   {
      Component::finish(node);
   }

   // ------------------------
   // Assignment
   // ------------------------

   XYs1d &operator=(const XYs1d &) = default;
   XYs1d &operator=(XYs1d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/containers/XYs1d/src/custom.hpp"

}; // class XYs1d

} // namespace containers
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
