
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_CONTAINERS_GRID
#define GNDSTK_V1_9_CONTAINERS_GRID

#include "GNDStk/v1.9/containers/Values.hpp"
#include "GNDStk/v1.9/containers/Link.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {


// -----------------------------------------------------------------------------
// containers::
// class Grid
// -----------------------------------------------------------------------------

namespace containers {

class Grid : public Component<containers::Grid> {
   friend class Component;

   using link_values_t = std::variant<
      containers::Values,
      containers::Link
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field / node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Grid"; }
   static auto FIELD() { return "grid"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<int>{}
            / Meta<>("index") |
         Defaulted<enums::Interpolation>{enums::Interpolation::linlin}
            / Meta<>("interpolation") |
         std::optional<std::string>{}
            / Meta<>("label") |
         std::optional<enums::GridStyle>{}
            / Meta<>("style") |
         std::optional<std::string>{}
            / Meta<>("unit") |
         // children
         link_values_t{}
            / --(Child<>("values") || Child<>("link"))
      ;
   }

public:

   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const enums::Interpolation interpolation = enums::Interpolation::linlin;
   } defaults;

   // metadata
   Field<Grid,std::optional<int>> index{this};
   Field<Grid,Defaulted<enums::Interpolation>> interpolation{this,Defaults::interpolation};
   Field<Grid,std::optional<std::string>> label{this};
   Field<Grid,std::optional<enums::GridStyle>> style{this};
   Field<Grid,std::optional<std::string>> unit{this};
   // children - variant
   Field<Grid,link_values_t> link_values{this};
   FieldPart<decltype(link_values),containers::Values> values{link_values};
   FieldPart<decltype(link_values),containers::Link> link{link_values};

   // ------------------------
   // Constructors
   // ------------------------

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Grid(
      const wrapper<std::optional<int>> &index = {},
      const wrapper<std::optional<enums::Interpolation>> &interpolation = {},
      const wrapper<std::optional<std::string>> &label = {},
      const wrapper<std::optional<enums::GridStyle>> &style = {},
      const wrapper<std::optional<std::string>> &unit = {},
      const wrapper<link_values_t> &link_values = {}
   ) :
      Component{
         BlockData{},
         this->index,
         this->interpolation,
         this->label,
         this->style,
         this->unit,
         this->link_values
      },
      index(this,index,"index"),
      interpolation(this,defaults.interpolation,interpolation,"interpolation"),
      label(this,label,"label"),
      style(this,style,"style"),
      unit(this,unit,"unit"),
      link_values(this,link_values,"link_values"),
      values(this->link_values,"values"),
      link(this->link_values,"link")
   {
      Component::finish();
   }

   // from node
   Grid(const Node &node) :
      Component{
         BlockData{},
         index,
         interpolation,
         label,
         style,
         unit,
         link_values
      },
      index(this,{},"index"),
      interpolation(this,defaults.interpolation,{},"interpolation"),
      label(this,{},"label"),
      style(this,{},"style"),
      unit(this,{},"unit"),
      link_values(this,{},"link_values"),
      values(link_values,"values"),
      link(link_values,"link")
   {
      Component::finish(node);
   }

   // copy
   Grid(const Grid &other) :
      Component{
         other.baseBlockData(),
         index,
         interpolation,
         label,
         style,
         unit,
         link_values
      }
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Grid(Grid &&other) :
      Component{
         other.baseBlockData(),
         index,
         interpolation,
         label,
         style,
         unit,
         link_values
      }
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment
   // ------------------------

   Grid &operator=(const Grid &) = default;
   Grid &operator=(Grid &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/containers/Grid/src/custom.hpp"

}; // class Grid

} // namespace containers
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
