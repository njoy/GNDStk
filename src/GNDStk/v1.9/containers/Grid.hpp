
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_CONTAINERS_GRID
#define GNDSTK_V1_9_CONTAINERS_GRID

// GNDStk Core Interface
#include "GNDStk.hpp"

// Dependencies
#include "GNDStk/v1.9/containers/Link.hpp"
#include "GNDStk/v1.9/containers/Values.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Grid
// -----------------------------------------------------------------------------

namespace containers {

class Grid : public Component<Grid> {

   using link_values_t = std::variant<
      containers::Link,
      containers::Values
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Grid"; }
   static auto GNDSName() { return "grid"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<int>{}
            / Meta<>("index") |
         Defaulted<enums::Interpolation>{enums::Interpolation::linlin}
            / Meta<>("interpolation") |
         std::optional<std::string>{}
            / Meta<>("label") |
         std::optional<enums::GridStyle>{}
            / Meta<>("style") |
         std::optional<std::string>{}
            / Meta<>("unit") |
         // children
         link_values_t{}
            / --(Child<>("link") || Child<>("values"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const enums::Interpolation interpolation = enums::Interpolation::linlin;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<int> index;
      Defaulted<enums::Interpolation> interpolation{enums::Interpolation::linlin};
      std::optional<std::string> label;
      std::optional<enums::GridStyle> style;
      std::optional<std::string> unit;
      // children - variant
      link_values_t link_values;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // index
   const std::optional<int> &index() const
      { return content.index; }
   std::optional<int> &index()
      { return content.index; }

   // interpolation
   const Defaulted<enums::Interpolation> &interpolation() const
      { return content.interpolation; }
   Defaulted<enums::Interpolation> &interpolation()
      { return content.interpolation; }

   // label
   const std::optional<std::string> &label() const
      { return content.label; }
   std::optional<std::string> &label()
      { return content.label; }

   // style
   const std::optional<enums::GridStyle> &style() const
      { return content.style; }
   std::optional<enums::GridStyle> &style()
      { return content.style; }

   // unit
   const std::optional<std::string> &unit() const
      { return content.unit; }
   std::optional<std::string> &unit()
      { return content.unit; }

   // link_values
   const link_values_t &link_values() const
      { return content.link_values; }
   link_values_t &link_values()
      { return content.link_values; }

   // link
   const containers::Link *link() const
      { return getter<containers::Link>(link_values(), "link"); }
   containers::Link *link()
      { return getter<containers::Link>(link_values(), "link"); }

   // values
   const containers::Values *values() const
      { return getter<containers::Values>(link_values(), "values"); }
   containers::Values *values()
      { return getter<containers::Values>(link_values(), "values"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // index(value)
   Grid &index(const std::optional<int> &obj)
      { index() = obj; return *this; }

   // interpolation(value)
   Grid &interpolation(const Defaulted<enums::Interpolation> &obj)
      { content.interpolation = obj; return *this; }
   Grid &interpolation(const std::optional<enums::Interpolation> &obj)
      { content.interpolation = obj; return *this; }

   // label(value)
   Grid &label(const std::optional<std::string> &obj)
      { label() = obj; return *this; }

   // style(value)
   Grid &style(const std::optional<enums::GridStyle> &obj)
      { style() = obj; return *this; }

   // unit(value)
   Grid &unit(const std::optional<std::string> &obj)
      { unit() = obj; return *this; }

   // link_values(value)
   Grid &link_values(const link_values_t &obj)
      { link_values() = obj; return *this; }

   // link(value)
   Grid &link(const std::optional<containers::Link> &obj)
      { if (obj) link_values(obj.value()); return *this; }

   // values(value)
   Grid &values(const std::optional<containers::Values> &obj)
      { if (obj) link_values(obj.value()); return *this; }

   // ------------------------
   // Constructors
   // ------------------------

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Grid(
      const std::optional<int> &index =
         std::optional<int>{},
      const std::optional<enums::Interpolation> &interpolation =
         std::optional<enums::Interpolation>{},
      const std::optional<std::string> &label =
         std::optional<std::string>{},
      const std::optional<enums::GridStyle> &style =
         std::optional<enums::GridStyle>{},
      const std::optional<std::string> &unit =
         std::optional<std::string>{},
      const link_values_t &link_values =
         link_values_t{}
   ) :
      Component{
         BodyText{},
         content.index,
         content.interpolation,
         content.label,
         content.style,
         content.unit,
         content.link_values
      },
      content{
         index,
         Defaulted<enums::Interpolation>(defaults.interpolation,interpolation),
         label,
         style,
         unit,
         link_values
      }
   {
      Component::finish();
   }

   // copy
   Grid(const Grid &other) :
      Component{
         other.baseBodyText(),
         content.index,
         content.interpolation,
         content.label,
         content.style,
         content.unit,
         content.link_values
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Grid(Grid &&other) :
      Component{
         other.baseBodyText(),
         content.index,
         content.interpolation,
         content.label,
         content.style,
         content.unit,
         content.link_values
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Grid(const Node &node) :
      Component{
         BodyText{},
         content.index,
         content.interpolation,
         content.label,
         content.style,
         content.unit,
         content.link_values
      }
   {
      Component::finish(node);
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Grid &operator=(const Grid &) = default;

   // move
   Grid &operator=(Grid &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/containers/Grid/src/custom.hpp"

}; // class Grid

} // namespace containers
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
