
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDSTK_V1_9_CONTAINERS_REGIONS1D
#define GNDSTK_V1_9_CONTAINERS_REGIONS1D

#include "GNDStk/v1.9/containers/Axes.hpp"
#include "GNDStk/v1.9/containers/XYs1d.hpp"

namespace njoy {
namespace GNDStk {
namespace v1_9 {


// -----------------------------------------------------------------------------
// containers::
// class Regions1d
// -----------------------------------------------------------------------------

namespace containers {

class Regions1d : public Component<containers::Regions1d> {

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Names: this namespace, this class, a field / node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Regions1d"; }
   static auto FIELD() { return "regions1d"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<std::string>{}
            / Meta<>("label") |
         std::optional<double>{}
            / Meta<>("outerDomainValue") |
         // children
         std::optional<containers::Axes>{}
            / --Child<>("axes") |
         containers::XYs1d{}
            / ++Child<>("XYs1d")
      ;
   }

public:

   using Component::construct;

   // metadata
   Field<Regions1d,std::optional<std::string>> label;
   Field<Regions1d,std::optional<double>> outerDomainValue;
   // children
   Field<Regions1d,std::optional<containers::Axes>> axes;
   Field<Regions1d,std::vector<containers::XYs1d>> XYs1d;

   // ------------------------
   // Constructors
   // ------------------------

   // default, and from fields
   explicit Regions1d(
      const std::optional<std::string> &label = {},
      const std::optional<double> &outerDomainValue = {},
      const std::optional<containers::Axes> &axes = {},
      const std::vector<containers::XYs1d> &XYs1d = {}
   ) :
      Component{
         BlockData{},
         this->label,
         this->outerDomainValue,
         this->axes,
         this->XYs1d
      },
      label(this,label,"label"),
      outerDomainValue(this,outerDomainValue,"outerDomainValue"),
      axes(this,axes,"axes"),
      XYs1d(this,XYs1d,"XYs1d")
   {
      Component::finish();
   }

   // from node
   Regions1d(const Node &node) :
      Component{
         BlockData{},
         this->label,
         this->outerDomainValue,
         this->axes,
         this->XYs1d
      },
      label(this,{},"label"),
      outerDomainValue(this,{},"outerDomainValue"),
      axes(this,{},"axes"),
      XYs1d(this,{},"XYs1d")
   {
      Component::finish(node);
   }

   // copy
   Regions1d(const Regions1d &other) :
      Component{
         other.baseBlockData(),
         this->label,
         this->outerDomainValue,
         this->axes,
         this->XYs1d
      },
      label(this,other.label),
      outerDomainValue(this,other.outerDomainValue),
      axes(this,other.axes),
      XYs1d(this,other.XYs1d)
   {
      Component::finish(other);
   }

   // move
   Regions1d(Regions1d &&other) :
      Component{
         other.baseBlockData(),
         this->label,
         this->outerDomainValue,
         this->axes,
         this->XYs1d
      },
      label(this,std::move(other.label)),
      outerDomainValue(this,std::move(other.outerDomainValue)),
      axes(this,std::move(other.axes)),
      XYs1d(this,std::move(other.XYs1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment
   // ------------------------

   Regions1d &operator=(const Regions1d &) = default;
   Regions1d &operator=(Regions1d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v1.9/containers/Regions1d/src/custom.hpp"

}; // class Regions1d

} // namespace containers
} // namespace v1_9
} // namespace GNDStk
} // namespace njoy

#endif
