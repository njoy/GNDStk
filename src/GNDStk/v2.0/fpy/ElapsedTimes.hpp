
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FPY_ELAPSEDTIMES
#define NJOY_GNDSTK_V2_0_FPY_ELAPSEDTIMES

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fpy/ElapsedTime.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fpy::
// class ElapsedTimes
// -----------------------------------------------------------------------------

namespace fpy {

class ElapsedTimes : public Component<ElapsedTimes> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fpy"; }
   static auto className() { return "ElapsedTimes"; }
   static auto GNDSName() { return "elapsedTimes"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         fpy::ElapsedTime{}
            / ++Child<>("elapsedTime")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::vector<fpy::ElapsedTime> elapsedTime;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // elapsedTime
   const std::vector<fpy::ElapsedTime> &elapsedTime() const
      { return content.elapsedTime; }
   std::vector<fpy::ElapsedTime> &elapsedTime()
      { return content.elapsedTime; }

   // elapsedTime(index)
   const fpy::ElapsedTime &elapsedTime(const std::size_t index) const
      { return getter(elapsedTime(), index, "elapsedTime"); }
   fpy::ElapsedTime &elapsedTime(const std::size_t index)
      { return getter(elapsedTime(), index, "elapsedTime"); }

   // elapsedTime(label)
   const fpy::ElapsedTime &elapsedTime(const std::string &label) const
      { return getter(elapsedTime(), label, "elapsedTime"); }
   fpy::ElapsedTime &elapsedTime(const std::string &label)
      { return getter(elapsedTime(), label, "elapsedTime"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // elapsedTime(value)
   ElapsedTimes &elapsedTime(const std::vector<fpy::ElapsedTime> &obj)
      { elapsedTime() = obj; return *this; }

   // elapsedTime(index,value)
   ElapsedTimes &elapsedTime(
      const std::size_t index,
      const fpy::ElapsedTime &obj
   ) {
      elapsedTime(index) = obj; return *this;
   }

   // elapsedTime(label,value)
   ElapsedTimes &elapsedTime(
      const std::string &label,
      const fpy::ElapsedTime &obj
   ) {
      elapsedTime(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ElapsedTimes() :
      Component{
         BodyText{},
         content.elapsedTime
      }
   {
      Component::finish();
   }

   // copy
   ElapsedTimes(const ElapsedTimes &other) :
      Component{
         other,
         content.elapsedTime
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ElapsedTimes(ElapsedTimes &&other) :
      Component{
         other,
         content.elapsedTime
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ElapsedTimes(const Node &node) :
      Component{
         BodyText{},
         content.elapsedTime
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ElapsedTimes(
      const std::vector<fpy::ElapsedTime> &elapsedTime
   ) :
      Component{
         BodyText{},
         content.elapsedTime
      },
      content{
         elapsedTime
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ElapsedTimes &operator=(const ElapsedTimes &) = default;

   // move
   ElapsedTimes &operator=(ElapsedTimes &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fpy/ElapsedTimes/src/custom.hpp"

}; // class ElapsedTimes

} // namespace fpy
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
