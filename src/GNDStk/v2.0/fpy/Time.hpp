
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FPY_TIME
#define NJOY_GNDSTK_V2_0_FPY_TIME

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Double.hpp"
#include "GNDStk/v2.0/containers/String.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fpy::
// class Time
// -----------------------------------------------------------------------------

namespace fpy {

class Time : public Component<Time> {

   using _t = std::variant<
      containers::Double,
      containers::String
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fpy"; }
   static auto className() { return "Time"; }
   static auto GNDSName() { return "time"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         _t{}
            / --(Child<>("Double") || Child<>("string"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children - variant
      _t _Doublestring;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // _Doublestring
   const _t &_Doublestring() const
      { return content._Doublestring; }
   _t &_Doublestring()
      { return content._Doublestring; }

   // Double
   const containers::Double *Double() const
      { return getter<containers::Double>(_Doublestring(), "Double"); }
   containers::Double *Double()
      { return getter<containers::Double>(_Doublestring(), "Double"); }

   // string
   const containers::String *string() const
      { return getter<containers::String>(_Doublestring(), "string"); }
   containers::String *string()
      { return getter<containers::String>(_Doublestring(), "string"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // _Doublestring(value)
   Time &_Doublestring(const _t &obj)
      { _Doublestring() = obj; return *this; }

   // Double(value)
   Time &Double(const std::optional<containers::Double> &obj)
      { if (obj) _Doublestring(obj.value()); return *this; }

   // string(value)
   Time &string(const std::optional<containers::String> &obj)
      { if (obj) _Doublestring(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Time() :
      Component{
         BodyText{},
         content._Doublestring
      }
   {
      Component::finish();
   }

   // copy
   Time(const Time &other) :
      Component{
         other,
         content._Doublestring
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Time(Time &&other) :
      Component{
         other,
         content._Doublestring
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Time(const Node &node) :
      Component{
         BodyText{},
         content._Doublestring
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Time(
      const _t &_Doublestring
   ) :
      Component{
         BodyText{},
         content._Doublestring
      },
      content{
         _Doublestring
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Time &operator=(const Time &) = default;

   // move
   Time &operator=(Time &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fpy/Time/src/custom.hpp"

}; // class Time

} // namespace fpy
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
