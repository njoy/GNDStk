
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FPY_INCIDENTENERGIES
#define NJOY_GNDSTK_V2_0_FPY_INCIDENTENERGIES

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fpy/IncidentEnergy.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fpy::
// class IncidentEnergies
// -----------------------------------------------------------------------------

namespace fpy {

class IncidentEnergies : public Component<IncidentEnergies> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fpy"; }
   static auto className() { return "IncidentEnergies"; }
   static auto GNDSName() { return "incidentEnergies"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         fpy::IncidentEnergy{}
            / ++Child<>("incidentEnergy")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::vector<fpy::IncidentEnergy> incidentEnergy;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // incidentEnergy
   const std::vector<fpy::IncidentEnergy> &incidentEnergy() const
      { return content.incidentEnergy; }
   std::vector<fpy::IncidentEnergy> &incidentEnergy()
      { return content.incidentEnergy; }

   // incidentEnergy(index)
   const fpy::IncidentEnergy &incidentEnergy(const std::size_t index) const
      { return getter(incidentEnergy(), index, "incidentEnergy"); }
   fpy::IncidentEnergy &incidentEnergy(const std::size_t index)
      { return getter(incidentEnergy(), index, "incidentEnergy"); }

   // incidentEnergy(label)
   const fpy::IncidentEnergy &incidentEnergy(const std::string &label) const
      { return getter(incidentEnergy(), label, "incidentEnergy"); }
   fpy::IncidentEnergy &incidentEnergy(const std::string &label)
      { return getter(incidentEnergy(), label, "incidentEnergy"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // incidentEnergy(value)
   IncidentEnergies &incidentEnergy(const std::vector<fpy::IncidentEnergy> &obj)
      { incidentEnergy() = obj; return *this; }

   // incidentEnergy(index,value)
   IncidentEnergies &incidentEnergy(
      const std::size_t index,
      const fpy::IncidentEnergy &obj
   ) {
      incidentEnergy(index) = obj; return *this;
   }

   // incidentEnergy(label,value)
   IncidentEnergies &incidentEnergy(
      const std::string &label,
      const fpy::IncidentEnergy &obj
   ) {
      incidentEnergy(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   IncidentEnergies() :
      Component{
         BodyText{},
         content.incidentEnergy
      }
   {
      Component::finish();
   }

   // copy
   IncidentEnergies(const IncidentEnergies &other) :
      Component{
         other,
         content.incidentEnergy
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   IncidentEnergies(IncidentEnergies &&other) :
      Component{
         other,
         content.incidentEnergy
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   IncidentEnergies(const Node &node) :
      Component{
         BodyText{},
         content.incidentEnergy
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit IncidentEnergies(
      const std::vector<fpy::IncidentEnergy> &incidentEnergy
   ) :
      Component{
         BodyText{},
         content.incidentEnergy
      },
      content{
         incidentEnergy
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   IncidentEnergies &operator=(const IncidentEnergies &) = default;

   // move
   IncidentEnergies &operator=(IncidentEnergies &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fpy/IncidentEnergies/src/custom.hpp"

}; // class IncidentEnergies

} // namespace fpy
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
