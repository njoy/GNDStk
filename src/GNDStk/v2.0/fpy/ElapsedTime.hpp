
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FPY_ELAPSEDTIME
#define NJOY_GNDSTK_V2_0_FPY_ELAPSEDTIME

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fpy/Time.hpp"
#include "GNDStk/v2.0/fpy/IncidentEnergies.hpp"
#include "GNDStk/v2.0/fpy/Yields.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fpy::
// class ElapsedTime
// -----------------------------------------------------------------------------

namespace fpy {

class ElapsedTime : public Component<ElapsedTime> {

   using _t = std::variant<
      fpy::IncidentEnergies,
      fpy::Yields
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fpy"; }
   static auto className() { return "ElapsedTime"; }
   static auto GNDSName() { return "elapsedTime"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         fpy::Time{}
            / --Child<>("time") |
         _t{}
            / --(Child<>("incidentEnergies") || Child<>("yields"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      // children
      fpy::Time time;
      // children - variant
      _t _incidentEnergiesyields;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // time
   const fpy::Time &time() const
      { return content.time; }
   fpy::Time &time()
      { return content.time; }

   // _incidentEnergiesyields
   const _t &_incidentEnergiesyields() const
      { return content._incidentEnergiesyields; }
   _t &_incidentEnergiesyields()
      { return content._incidentEnergiesyields; }

   // incidentEnergies
   const fpy::IncidentEnergies *incidentEnergies() const
      { return getter<fpy::IncidentEnergies>(_incidentEnergiesyields(), "incidentEnergies"); }
   fpy::IncidentEnergies *incidentEnergies()
      { return getter<fpy::IncidentEnergies>(_incidentEnergiesyields(), "incidentEnergies"); }

   // yields
   const fpy::Yields *yields() const
      { return getter<fpy::Yields>(_incidentEnergiesyields(), "yields"); }
   fpy::Yields *yields()
      { return getter<fpy::Yields>(_incidentEnergiesyields(), "yields"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   ElapsedTime &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // time(value)
   ElapsedTime &time(const fpy::Time &obj)
      { time() = obj; return *this; }

   // _incidentEnergiesyields(value)
   ElapsedTime &_incidentEnergiesyields(const _t &obj)
      { _incidentEnergiesyields() = obj; return *this; }

   // incidentEnergies(value)
   ElapsedTime &incidentEnergies(const std::optional<fpy::IncidentEnergies> &obj)
      { if (obj) _incidentEnergiesyields(obj.value()); return *this; }

   // yields(value)
   ElapsedTime &yields(const std::optional<fpy::Yields> &obj)
      { if (obj) _incidentEnergiesyields(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ElapsedTime() :
      Component{
         BodyText{},
         content.label,
         content.time,
         content._incidentEnergiesyields
      }
   {
      Component::finish();
   }

   // copy
   ElapsedTime(const ElapsedTime &other) :
      Component{
         other,
         content.label,
         content.time,
         content._incidentEnergiesyields
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ElapsedTime(ElapsedTime &&other) :
      Component{
         other,
         content.label,
         content.time,
         content._incidentEnergiesyields
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ElapsedTime(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.time,
         content._incidentEnergiesyields
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ElapsedTime(
      const std::optional<XMLName> &label,
      const fpy::Time &time,
      const _t &_incidentEnergiesyields
   ) :
      Component{
         BodyText{},
         content.label,
         content.time,
         content._incidentEnergiesyields
      },
      content{
         label,
         time,
         _incidentEnergiesyields
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ElapsedTime &operator=(const ElapsedTime &) = default;

   // move
   ElapsedTime &operator=(ElapsedTime &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fpy/ElapsedTime/src/custom.hpp"

}; // class ElapsedTime

} // namespace fpy
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
