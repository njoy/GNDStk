
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FPY_NUCLIDES
#define NJOY_GNDSTK_V2_0_FPY_NUCLIDES

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fpy::
// class Nuclides
// -----------------------------------------------------------------------------

namespace fpy {

class Nuclides : public Component<Nuclides,true> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fpy"; }
   static auto className() { return "Nuclides"; }
   static auto GNDSName() { return "nuclides"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<std::string>{}
            / Meta<>("href")
      ;
   }

public:

   using Component::construct;
   using BodyText::operator=;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<std::string> href;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // href
   const std::optional<std::string> &href() const
      { return content.href; }
   std::optional<std::string> &href()
      { return content.href; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // href(value)
   Nuclides &href(const std::optional<std::string> &obj)
      { href() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Nuclides() :
      Component{
         BodyText{},
         content.href
      }
   {
      Component::finish();
   }

   // copy
   Nuclides(const Nuclides &other) :
      Component{
         other,
         content.href
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Nuclides(Nuclides &&other) :
      Component{
         other,
         content.href
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Nuclides(const Node &node) :
      Component{
         BodyText{},
         content.href
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Nuclides(
      const std::optional<std::string> &href
   ) :
      Component{
         BodyText{},
         content.href
      },
      content{
         href
      }
   {
      Component::finish();
   }

   // from vector
   template<class T, class = std::enable_if_t<body::template supported<T>>>
   Nuclides(const std::vector<T> &vector) :
      Component{
         BodyText{},
         content.href
      }
   {
      Component::finish(vector);
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Nuclides &operator=(const Nuclides &) = default;

   // move
   Nuclides &operator=(Nuclides &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fpy/Nuclides/src/custom.hpp"

}; // class Nuclides

} // namespace fpy
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
