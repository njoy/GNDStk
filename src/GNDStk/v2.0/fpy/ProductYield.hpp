
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FPY_PRODUCTYIELD
#define NJOY_GNDSTK_V2_0_FPY_PRODUCTYIELD

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fpy/ElapsedTimes.hpp"
#include "GNDStk/v2.0/fpy/Nuclides.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fpy::
// class ProductYield
// -----------------------------------------------------------------------------

namespace fpy {

class ProductYield : public Component<ProductYield> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fpy"; }
   static auto className() { return "ProductYield"; }
   static auto GNDSName() { return "productYield"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         fpy::ElapsedTimes{}
            / --Child<>("elapsedTimes") |
         std::optional<fpy::Nuclides>{}
            / --Child<>("nuclides")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      // children
      fpy::ElapsedTimes elapsedTimes;
      std::optional<fpy::Nuclides> nuclides;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // elapsedTimes
   const fpy::ElapsedTimes &elapsedTimes() const
      { return content.elapsedTimes; }
   fpy::ElapsedTimes &elapsedTimes()
      { return content.elapsedTimes; }

   // nuclides
   const std::optional<fpy::Nuclides> &nuclides() const
      { return content.nuclides; }
   std::optional<fpy::Nuclides> &nuclides()
      { return content.nuclides; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   ProductYield &label(const XMLName &obj)
      { label() = obj; return *this; }

   // elapsedTimes(value)
   ProductYield &elapsedTimes(const fpy::ElapsedTimes &obj)
      { elapsedTimes() = obj; return *this; }

   // nuclides(value)
   ProductYield &nuclides(const std::optional<fpy::Nuclides> &obj)
      { nuclides() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ProductYield() :
      Component{
         BodyText{},
         content.label,
         content.elapsedTimes,
         content.nuclides
      }
   {
      Component::finish();
   }

   // copy
   ProductYield(const ProductYield &other) :
      Component{
         other,
         content.label,
         content.elapsedTimes,
         content.nuclides
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ProductYield(ProductYield &&other) :
      Component{
         other,
         content.label,
         content.elapsedTimes,
         content.nuclides
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ProductYield(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.elapsedTimes,
         content.nuclides
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ProductYield(
      const XMLName &label,
      const fpy::ElapsedTimes &elapsedTimes,
      const std::optional<fpy::Nuclides> &nuclides
   ) :
      Component{
         BodyText{},
         content.label,
         content.elapsedTimes,
         content.nuclides
      },
      content{
         label,
         elapsedTimes,
         nuclides
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ProductYield &operator=(const ProductYield &) = default;

   // move
   ProductYield &operator=(ProductYield &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fpy/ProductYield/src/custom.hpp"

}; // class ProductYield

} // namespace fpy
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
