
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_APPDATA_CONVERSION
#define NJOY_GNDSTK_V2_0_APPDATA_CONVERSION

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// appData::
// class Conversion
// -----------------------------------------------------------------------------

namespace appData {

class Conversion : public Component<Conversion> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "appData"; }
   static auto className() { return "Conversion"; }
   static auto GNDSName() { return "conversion"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("flags") |
         std::optional<std::string>{}
            / Meta<>("href")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> flags;
      std::optional<std::string> href;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // flags
   const std::optional<XMLName> &flags() const
      { return content.flags; }
   std::optional<XMLName> &flags()
      { return content.flags; }

   // href
   const std::optional<std::string> &href() const
      { return content.href; }
   std::optional<std::string> &href()
      { return content.href; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // flags(value)
   Conversion &flags(const std::optional<XMLName> &obj)
      { flags() = obj; return *this; }

   // href(value)
   Conversion &href(const std::optional<std::string> &obj)
      { href() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Conversion() :
      Component{
         BodyText{},
         content.flags,
         content.href
      }
   {
      Component::finish();
   }

   // copy
   Conversion(const Conversion &other) :
      Component{
         other,
         content.flags,
         content.href
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Conversion(Conversion &&other) :
      Component{
         other,
         content.flags,
         content.href
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Conversion(const Node &node) :
      Component{
         BodyText{},
         content.flags,
         content.href
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Conversion(
      const std::optional<XMLName> &flags,
      const std::optional<std::string> &href
   ) :
      Component{
         BodyText{},
         content.flags,
         content.href
      },
      content{
         flags,
         href
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Conversion &operator=(const Conversion &) = default;

   // move
   Conversion &operator=(Conversion &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/appData/Conversion/src/custom.hpp"

}; // class Conversion

} // namespace appData
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
