
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_APPDATA_INSTITUTION
#define NJOY_GNDSTK_V2_0_APPDATA_INSTITUTION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/appData/ENDFconversionFlags.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// appData::
// class Institution
// -----------------------------------------------------------------------------

namespace appData {

class Institution : public Component<Institution> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "appData"; }
   static auto className() { return "Institution"; }
   static auto GNDSName() { return "institution"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         std::optional<appData::ENDFconversionFlags>{}
            / --Child<>("ENDFconversionFlags")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      // children
      std::optional<appData::ENDFconversionFlags> ENDFconversionFlags;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // ENDFconversionFlags
   const std::optional<appData::ENDFconversionFlags> &ENDFconversionFlags() const
      { return content.ENDFconversionFlags; }
   std::optional<appData::ENDFconversionFlags> &ENDFconversionFlags()
      { return content.ENDFconversionFlags; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   Institution &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // ENDFconversionFlags(value)
   Institution &ENDFconversionFlags(const std::optional<appData::ENDFconversionFlags> &obj)
      { ENDFconversionFlags() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Institution() :
      Component{
         BodyText{},
         content.label,
         content.ENDFconversionFlags
      }
   {
      Component::finish();
   }

   // copy
   Institution(const Institution &other) :
      Component{
         other,
         content.label,
         content.ENDFconversionFlags
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Institution(Institution &&other) :
      Component{
         other,
         content.label,
         content.ENDFconversionFlags
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Institution(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.ENDFconversionFlags
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Institution(
      const std::optional<XMLName> &label,
      const std::optional<appData::ENDFconversionFlags> &ENDFconversionFlags
   ) :
      Component{
         BodyText{},
         content.label,
         content.ENDFconversionFlags
      },
      content{
         label,
         ENDFconversionFlags
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Institution &operator=(const Institution &) = default;

   // move
   Institution &operator=(Institution &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/appData/Institution/src/custom.hpp"

}; // class Institution

} // namespace appData
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
