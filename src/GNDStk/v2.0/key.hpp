
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

/*
This file contains Meta and Child objects for metadata and child nodes in the
current GNDS version. These may prove to be useful if you wish to use the Core
Interface in conjunction with the autogenerated classes for this GNDS version.

Within the outer njoy::GNDStk::version namespace below, the remaining namespace
arrangement was chosen to make the use of these objects smooth and logical.

Meta and Child objects are collectively called "keys." Meta keys are placed
into key::meta. Child keys correspond to autogenerated classes, each of which
is already in some namespace; we thus use theNamespace::key::child::. That way,
an autogenerated class [ns::Foo] has [ns::key::foo] as its Child object, and
a "using namespace ns" allows the class and the Child object to be [Foo] and
[key::foo], respectively. (If we reordered ns:: and key::, that wouldn't work.)

Within key::, we use meta:: and child:: around Meta and Child objects, just in
case there exist any identical GNDS metadata names and child-node names. (That
can, in fact, happen). The "using namespace meta" and "using namespace child"
directives then make the Meta<> and Child<> objects appear directly in key::,
so that "meta::" and "child::" are needed only to disambiguate identical names.
*/

#ifndef NJOY_GNDSTK_V2_0_KEY
#define NJOY_GNDSTK_V2_0_KEY

namespace njoy {
namespace GNDStk {
namespace v2_0 {


// -----------------------------------------------------------------------------
// key::meta::
// -----------------------------------------------------------------------------

namespace key {
namespace meta {

inline const Meta<> A("A");
inline const Meta<> ENDF_MFMT("ENDF_MFMT");
inline const Meta<> ENDF_MT("ENDF_MT");
inline const Meta<> L("L");
inline const Meta<> Z("Z");
inline const Meta<> algorithm("algorithm");
inline const Meta<> approximation("approximation");
inline const Meta<> boundaryCondition("boundaryCondition");
inline const Meta<> boundaryConditionValue("boundaryConditionValue");
inline const Meta<> calculateChannelRadius("calculateChannelRadius");
inline const Meta<> calculatePenetrability("calculatePenetrability");
inline const Meta<> channelSpin("channelSpin");
inline const Meta<> checksum("checksum");
inline const Meta<> coefficient("coefficient");
inline const Meta<> columnIndex("columnIndex");
inline const Meta<> columns("columns");
inline const Meta<> complete("complete");
inline const Meta<> compression("compression");
inline const Meta<> conserve("conserve");
inline const Meta<> contributorType("contributorType");
inline const Meta<> count("count");
inline const Meta<> crossTerm("crossTerm");
inline const Meta<> date("date");
inline const Meta<> dateType("dateType");
inline const Meta<> degreesOfFreedom("degreesOfFreedom");
inline const Meta<> dependenceOnProcessedGroupWidth("dependenceOnProcessedGroupWidth");
inline const Meta<> derivedFrom("derivedFrom");
inline const Meta<> dimension("dimension");
inline const Meta<> doi("doi");
inline const Meta<> domainMax("domainMax");
inline const Meta<> domainMin("domainMin");
inline const Meta<> domainUnit("domainUnit");
inline const Meta<> domainValue("domainValue");
inline const Meta<> ejectile("ejectile");
inline const Meta<> electronNumber("electronNumber");
inline const Meta<> eliminated("eliminated");
inline const Meta<> email("email");
inline const Meta<> encoding("encoding");
inline const Meta<> evaluation("evaluation");
inline const Meta<> filename("filename");
inline const Meta<> finalState("finalState");
inline const Meta<> fissionGenre("fissionGenre");
inline const Meta<> flags("flags");
inline const Meta<> format("format");
inline const Meta<> generation("generation");
inline const Meta<> genre("genre");
inline const Meta<> href("href");
inline const Meta<> id("id");
inline const Meta<> identicalParticles("identicalParticles");
inline const Meta<> incoherentApproximation("incoherentApproximation");
inline const Meta<> index("index");
inline const Meta<> interaction("interaction");
inline const Meta<> interpolation("interpolation");
inline const Meta<> interpolationQualifier("interpolationQualifier");
inline const Meta<> label("label");
inline const Meta<> length("length");
inline const Meta<> library("library");
inline const Meta<> lowerIndex("lowerIndex");
inline const Meta<> markup("markup");
inline const Meta<> matrixStartIndex("matrixStartIndex");
inline const Meta<> max("max");
inline const Meta<> metaStableIndex("metaStableIndex");
inline const Meta<> min("min");
inline const Meta<> mode("mode");
inline const Meta<> muCutoff("muCutoff");
inline const Meta<> nParameters("nParameters");
inline const Meta<> name("name");
inline const Meta<> numberOfBands("numberOfBands");
inline const Meta<> numberOfBins("numberOfBins");
inline const Meta<> numberOfProducts("numberOfProducts");
inline const Meta<> numberPerMolecule("numberPerMolecule");
inline const Meta<> offset("offset");
inline const Meta<> orcid_id("orcid_id");
inline const Meta<> outerDomainValue("outerDomainValue");
inline const Meta<> parity("parity");
inline const Meta<> path("path");
inline const Meta<> permutation("permutation");
inline const Meta<> pid("pid");
inline const Meta<> primaryScatterer("primaryScatterer");
inline const Meta<> process("process");
inline const Meta<> productFrame("productFrame");
inline const Meta<> projectile("projectile");
inline const Meta<> projectileFrame("projectileFrame");
inline const Meta<> publicationDate("publicationDate");
inline const Meta<> relationType("relationType");
inline const Meta<> resonanceReaction("resonanceReaction");
inline const Meta<> retrievalDate("retrievalDate");
inline const Meta<> revisionID("revisionID");
inline const Meta<> revisionSystem("revisionSystem");
inline const Meta<> rows("rows");
inline const Meta<> sep("sep");
inline const Meta<> shape("shape");
inline const Meta<> spin("spin");
inline const Meta<> start("start");
inline const Meta<> startIndex("startIndex");
inline const Meta<> storageOrder("storageOrder");
inline const Meta<> style("style");
inline const Meta<> subentry("subentry");
inline const Meta<> subshell("subshell");
inline const Meta<> supportsAngularReconstruction("supportsAngularReconstruction");
inline const Meta<> symbol("symbol");
inline const Meta<> symmetric("symmetric");
inline const Meta<> symmetry("symmetry");
inline const Meta<> target("target");
inline const Meta<> type("type");
inline const Meta<> types("types");
inline const Meta<> unit("unit");
inline const Meta<> upperCalculatedGroup("upperCalculatedGroup");
inline const Meta<> useForSelfShieldingOnly("useForSelfShieldingOnly");
inline const Meta<> value("value");
inline const Meta<> valueType("valueType");
inline const Meta<> version("version");
inline const Meta<> xref("xref");

} // namespace meta
using namespace meta;
} // namespace key


// -----------------------------------------------------------------------------
// abstract::key::child::
// -----------------------------------------------------------------------------

namespace abstract {
namespace key {
namespace child {

inline const Child<> functional("functional");
inline const Child<> label("label");
inline const Child<> physicalQuantity("physicalQuantity");
inline const Child<> text("text");

} // namespace child
using namespace child;
} // namespace key
} // namespace abstract


// -----------------------------------------------------------------------------
// appData::key::child::
// -----------------------------------------------------------------------------

namespace appData {
namespace key {
namespace child {

inline const Child<> ENDFconversionFlags("ENDFconversionFlags");
inline const Child<> applicationData("applicationData");
inline const Child<> conversion("conversion");
inline const Child<> institution("institution");

} // namespace child
using namespace child;
} // namespace key
} // namespace appData


// -----------------------------------------------------------------------------
// atomic::key::child::
// -----------------------------------------------------------------------------

namespace atomic {
namespace key {
namespace child {

inline const Child<> coherentPhotonScattering("coherentPhotonScattering");
inline const Child<> formFactor("formFactor");
inline const Child<> imaginaryAnomalousFactor("imaginaryAnomalousFactor");
inline const Child<> incoherentPhotonScattering("incoherentPhotonScattering");
inline const Child<> realAnomalousFactor("realAnomalousFactor");
inline const Child<> scatteringFactor("scatteringFactor");

} // namespace child
using namespace child;
} // namespace key
} // namespace atomic


// -----------------------------------------------------------------------------
// common::key::child::
// -----------------------------------------------------------------------------

namespace common {
namespace key {
namespace child {

inline const Child<> Q("Q");
inline const Child<> energy("energy");
inline const Child<> externalFile("externalFile");
inline const Child<> externalFiles("externalFiles");
inline const Child<> mass("mass");
inline const Child<> probability("probability");
inline const Child<> product("product");
inline const Child<> products("products");
inline const Child<> temperature("temperature");

} // namespace child
using namespace child;
} // namespace key
} // namespace common


// -----------------------------------------------------------------------------
// containers::key::child::
// -----------------------------------------------------------------------------

namespace containers {
namespace key {
namespace child {

inline const Child<> Double("double");
inline const Child<> Legendre("Legendre");
inline const Child<> XYs1d("XYs1d");
inline const Child<> XYs2d("XYs2d");
inline const Child<> XYs3d("XYs3d");
inline const Child<> Ys1d("Ys1d");
inline const Child<> array("array");
inline const Child<> axes("axes");
inline const Child<> axis("axis");
inline const Child<> column("column");
inline const Child<> columnHeaders("columnHeaders");
inline const Child<> constant1d("constant1d");
inline const Child<> data("data");
inline const Child<> fraction("fraction");
inline const Child<> function1ds("function1ds");
inline const Child<> function2ds("function2ds");
inline const Child<> function3ds("function3ds");
inline const Child<> grid("grid");
inline const Child<> gridded1d("gridded1d");
inline const Child<> gridded2d("gridded2d");
inline const Child<> gridded3d("gridded3d");
inline const Child<> integer("integer");
inline const Child<> link("link");
inline const Child<> polynomial1d("polynomial1d");
inline const Child<> regions1d("regions1d");
inline const Child<> regions2d("regions2d");
inline const Child<> regions3d("regions3d");
inline const Child<> string("string");
inline const Child<> table("table");
inline const Child<> values("values");

} // namespace child
using namespace child;
} // namespace key
} // namespace containers


// -----------------------------------------------------------------------------
// covariance::key::child::
// -----------------------------------------------------------------------------

namespace covariance {
namespace key {
namespace child {

inline const Child<> averageParameterCovariance("averageParameterCovariance");
inline const Child<> columnData("columnData");
inline const Child<> columnSensitivity("columnSensitivity");
inline const Child<> covariance("covariance");
inline const Child<> covarianceMatrix("covarianceMatrix");
inline const Child<> covarianceSection("covarianceSection");
inline const Child<> covarianceSections("covarianceSections");
inline const Child<> covarianceSuite("covarianceSuite");
inline const Child<> mixed("mixed");
inline const Child<> parameterCovariancMatrix("parameterCovariancMatrix");
inline const Child<> parameterCovariance("parameterCovariance");
inline const Child<> parameterCovariances("parameterCovariances");
inline const Child<> parameterLink("parameterLink");
inline const Child<> parameters("parameters");
inline const Child<> rowData("rowData");
inline const Child<> rowSensitivity("rowSensitivity");
inline const Child<> sandwichProduct("sandwichProduct");
inline const Child<> shortRangeSelfScalingVariance("shortRangeSelfScalingVariance");
inline const Child<> slice("slice");
inline const Child<> slices("slices");
inline const Child<> sum("sum");
inline const Child<> summand("summand");

} // namespace child
using namespace child;
} // namespace key
} // namespace covariance


// -----------------------------------------------------------------------------
// cpTransport::key::child::
// -----------------------------------------------------------------------------

namespace cpTransport {
namespace key {
namespace child {

inline const Child<> CoulombPlusNuclearElastic("CoulombPlusNuclearElastic");
inline const Child<> RutherfordScattering("RutherfordScattering");
inline const Child<> imaginaryInterferenceTerm("imaginaryInterferenceTerm");
inline const Child<> nuclearAmplitudeExpansion("nuclearAmplitudeExpansion");
inline const Child<> nuclearPlusInterference("nuclearPlusInterference");
inline const Child<> nuclearTerm("nuclearTerm");
inline const Child<> realInterferenceTerm("realInterferenceTerm");

} // namespace child
using namespace child;
} // namespace key
} // namespace cpTransport


// -----------------------------------------------------------------------------
// documentation::key::child::
// -----------------------------------------------------------------------------

namespace documentation {
namespace key {
namespace child {

inline const Child<> acknowledgement("acknowledgement");
inline const Child<> acknowledgements("acknowledgements");
inline const Child<> affiliation("affiliation");
inline const Child<> affiliations("affiliations");
inline const Child<> author("author");
inline const Child<> authors("authors");
inline const Child<> bibitem("bibitem");
inline const Child<> bibliography("bibliography");
inline const Child<> codeRepo("codeRepo");
inline const Child<> collaboration("collaboration");
inline const Child<> collaborations("collaborations");
inline const Child<> computerCode("computerCode");
inline const Child<> computerCodes("computerCodes");
inline const Child<> contributor("contributor");
inline const Child<> contributors("contributors");
inline const Child<> copyright("copyright");
inline const Child<> date("date");
inline const Child<> dates("dates");
inline const Child<> documentation("documentation");
inline const Child<> exforDataSet("exforDataSet");
inline const Child<> exforDataSets("exforDataSets");
inline const Child<> experimentalDataSets("experimentalDataSets");
inline const Child<> inputDeck("inputDeck");
inline const Child<> inputDecks("inputDecks");
inline const Child<> keyword("keyword");
inline const Child<> keywords("keywords");
inline const Child<> outputDeck("outputDeck");
inline const Child<> outputDecks("outputDecks");
inline const Child<> relatedItem("relatedItem");
inline const Child<> relatedItems("relatedItems");

} // namespace child
using namespace child;
} // namespace key
} // namespace documentation


// -----------------------------------------------------------------------------
// fissionFragmentData::key::child::
// -----------------------------------------------------------------------------

namespace fissionFragmentData {
namespace key {
namespace child {

inline const Child<> delayedNeutron("delayedNeutron");
inline const Child<> delayedNeutrons("delayedNeutrons");
inline const Child<> fissionFragmentData("fissionFragmentData");
inline const Child<> rate("rate");

} // namespace child
using namespace child;
} // namespace key
} // namespace fissionFragmentData


// -----------------------------------------------------------------------------
// fissionTransport::key::child::
// -----------------------------------------------------------------------------

namespace fissionTransport {
namespace key {
namespace child {

inline const Child<> EFH("EFH");
inline const Child<> EFL("EFL");
inline const Child<> MadlandNix("MadlandNix");
inline const Child<> T_M("T_M");
inline const Child<> Watt("Watt");
inline const Child<> b("b");
inline const Child<> delayedBetaEnergy("delayedBetaEnergy");
inline const Child<> delayedGammaEnergy("delayedGammaEnergy");
inline const Child<> delayedNeutronKE("delayedNeutronKE");
inline const Child<> fissionComponent("fissionComponent");
inline const Child<> fissionComponents("fissionComponents");
inline const Child<> fissionEnergyReleased("fissionEnergyReleased");
inline const Child<> neutrinoEnergy("neutrinoEnergy");
inline const Child<> nonNeutrinoEnergy("nonNeutrinoEnergy");
inline const Child<> promptGammaEnergy("promptGammaEnergy");
inline const Child<> promptNeutronKE("promptNeutronKE");
inline const Child<> promptProductKE("promptProductKE");
inline const Child<> simpleMaxwellianFission("simpleMaxwellianFission");
inline const Child<> totalEnergy("totalEnergy");

} // namespace child
using namespace child;
} // namespace key
} // namespace fissionTransport


// -----------------------------------------------------------------------------
// fpy::key::child::
// -----------------------------------------------------------------------------

namespace fpy {
namespace key {
namespace child {

inline const Child<> elapsedTime("elapsedTime");
inline const Child<> elapsedTimes("elapsedTimes");
inline const Child<> energy("energy");
inline const Child<> incidentEnergies("incidentEnergies");
inline const Child<> incidentEnergy("incidentEnergy");
inline const Child<> nuclides("nuclides");
inline const Child<> productYield("productYield");
inline const Child<> productYields("productYields");
inline const Child<> time("time");
inline const Child<> yields("yields");

} // namespace child
using namespace child;
} // namespace key
} // namespace fpy


// -----------------------------------------------------------------------------
// pops::key::child::
// -----------------------------------------------------------------------------

namespace pops {
namespace key {
namespace child {

inline const Child<> PoPs("PoPs");
inline const Child<> Q("Q");
inline const Child<> alias("alias");
inline const Child<> aliases("aliases");
inline const Child<> atomic("atomic");
inline const Child<> averageEnergies("averageEnergies");
inline const Child<> averageEnergy("averageEnergy");
inline const Child<> baryon("baryon");
inline const Child<> baryons("baryons");
inline const Child<> bindingEnergy("bindingEnergy");
inline const Child<> charge("charge");
inline const Child<> chemicalElement("chemicalElement");
inline const Child<> chemicalElements("chemicalElements");
inline const Child<> configuration("configuration");
inline const Child<> configurations("configurations");
inline const Child<> continuum("continuum");
inline const Child<> decay("decay");
inline const Child<> decayData("decayData");
inline const Child<> decayMode("decayMode");
inline const Child<> decayModes("decayModes");
inline const Child<> decayPath("decayPath");
inline const Child<> discrete("discrete");
inline const Child<> energy("energy");
inline const Child<> gaugeBoson("gaugeBoson");
inline const Child<> gaugeBosons("gaugeBosons");
inline const Child<> halflife("halflife");
inline const Child<> intensity("intensity");
inline const Child<> internalConversionCoefficients("internalConversionCoefficients");
inline const Child<> internalPairFormationCoefficient("internalPairFormationCoefficient");
inline const Child<> isotope("isotope");
inline const Child<> isotopes("isotopes");
inline const Child<> lepton("lepton");
inline const Child<> leptons("leptons");
inline const Child<> mass("mass");
inline const Child<> metaStable("metaStable");
inline const Child<> nucleus("nucleus");
inline const Child<> nuclide("nuclide");
inline const Child<> nuclides("nuclides");
inline const Child<> parity("parity");
inline const Child<> photonEmissionProbabilities("photonEmissionProbabilities");
inline const Child<> probability("probability");
inline const Child<> product("product");
inline const Child<> products("products");
inline const Child<> shell("shell");
inline const Child<> spectra("spectra");
inline const Child<> spectrum("spectrum");
inline const Child<> spin("spin");
inline const Child<> unorthodox("unorthodox");
inline const Child<> unorthodoxes("unorthodoxes");

} // namespace child
using namespace child;
} // namespace key
} // namespace pops


// -----------------------------------------------------------------------------
// processed::key::child::
// -----------------------------------------------------------------------------

namespace processed {
namespace key {
namespace child {

inline const Child<> angularEnergyMC("angularEnergyMC");
inline const Child<> availableEnergy("availableEnergy");
inline const Child<> availableMomentum("availableMomentum");
inline const Child<> averageProductEnergy("averageProductEnergy");
inline const Child<> averageProductMomentum("averageProductMomentum");
inline const Child<> energyAngularMC("energyAngularMC");
inline const Child<> multiGroup3d("multiGroup3d");

} // namespace child
using namespace child;
} // namespace key
} // namespace processed


// -----------------------------------------------------------------------------
// resonances::key::child::
// -----------------------------------------------------------------------------

namespace resonances {
namespace key {
namespace child {

inline const Child<> BreitWigner("BreitWigner");
inline const Child<> J("J");
inline const Child<> Js("Js");
inline const Child<> L("L");
inline const Child<> Ls("Ls");
inline const Child<> RMatrix("RMatrix");
inline const Child<> channel("channel");
inline const Child<> channels("channels");
inline const Child<> energyInterval("energyInterval");
inline const Child<> energyIntervals("energyIntervals");
inline const Child<> externalRMatrix("externalRMatrix");
inline const Child<> hardSphereRadius("hardSphereRadius");
inline const Child<> levelSpacing("levelSpacing");
inline const Child<> resolved("resolved");
inline const Child<> resonanceParameters("resonanceParameters");
inline const Child<> resonanceReaction("resonanceReaction");
inline const Child<> resonanceReactions("resonanceReactions");
inline const Child<> resonances("resonances");
inline const Child<> scatteringRadius("scatteringRadius");
inline const Child<> spinGroup("spinGroup");
inline const Child<> spinGroups("spinGroups");
inline const Child<> tabulatedWidths("tabulatedWidths");
inline const Child<> unresolved("unresolved");
inline const Child<> width("width");
inline const Child<> widths("widths");

} // namespace child
using namespace child;
} // namespace key
} // namespace resonances


// -----------------------------------------------------------------------------
// styles::key::child::
// -----------------------------------------------------------------------------

namespace styles {
namespace key {
namespace child {

inline const Child<> Bondarenko("Bondarenko");
inline const Child<> CoulombPlusNuclearElasticMuCutoff("CoulombPlusNuclearElasticMuCutoff");
inline const Child<> MonteCarlo_cdf("MonteCarlo_cdf");
inline const Child<> SnElasticUpScatter("SnElasticUpScatter");
inline const Child<> URR_probabilityTables("URR_probabilityTables");
inline const Child<> angularDistributionReconstructed("angularDistributionReconstructed");
inline const Child<> averageProductData("averageProductData");
inline const Child<> crossSectionReconstructed("crossSectionReconstructed");
inline const Child<> equalProbableBins("equalProbableBins");
inline const Child<> evaluated("evaluated");
inline const Child<> flux("flux");
inline const Child<> griddedCrossSection("griddedCrossSection");
inline const Child<> heated("heated");
inline const Child<> heatedMultiGroup("heatedMultiGroup");
inline const Child<> inverseSpeed("inverseSpeed");
inline const Child<> multiBand("multiBand");
inline const Child<> multiGroup("multiGroup");
inline const Child<> projectileEnergyDomain("projectileEnergyDomain");
inline const Child<> realization("realization");
inline const Child<> sigmaZeros("sigmaZeros");
inline const Child<> styles("styles");
inline const Child<> temperature("temperature");
inline const Child<> transportable("transportable");
inline const Child<> transportables("transportables");

} // namespace child
using namespace child;
} // namespace key
} // namespace styles


// -----------------------------------------------------------------------------
// transport::key::child::
// -----------------------------------------------------------------------------

namespace transport {
namespace key {
namespace child {

inline const Child<> KalbachMann("KalbachMann");
inline const Child<> NBodyPhaseSpace("NBodyPhaseSpace");
inline const Child<> U("U");
inline const Child<> URR_probabilityTables1d("URR_probabilityTables1d");
inline const Child<> a("a");
inline const Child<> add("add");
inline const Child<> angular("angular");
inline const Child<> angularEnergy("angularEnergy");
inline const Child<> angularTwoBody("angularTwoBody");
inline const Child<> background("background");
inline const Child<> branching1d("branching1d");
inline const Child<> branching3d("branching3d");
inline const Child<> coherentPhoton("coherentPhoton");
inline const Child<> crossSection("crossSection");
inline const Child<> crossSectionSum("crossSectionSum");
inline const Child<> crossSectionSums("crossSectionSums");
inline const Child<> discreteGamma("discreteGamma");
inline const Child<> distribution("distribution");
inline const Child<> doubleDifferentialCrossSection("doubleDifferentialCrossSection");
inline const Child<> energy("energy");
inline const Child<> energyAngular("energyAngular");
inline const Child<> evaporation("evaporation");
inline const Child<> f("f");
inline const Child<> fastRegion("fastRegion");
inline const Child<> forward("forward");
inline const Child<> g("g");
inline const Child<> generalEvaporation("generalEvaporation");
inline const Child<> incoherentPhoton("incoherentPhoton");
inline const Child<> incompleteReactions("incompleteReactions");
inline const Child<> isotropic2d("isotropic2d");
inline const Child<> multiplicity("multiplicity");
inline const Child<> multiplicitySum("multiplicitySum");
inline const Child<> multiplicitySums("multiplicitySums");
inline const Child<> orphanProduct("orphanProduct");
inline const Child<> orphanProducts("orphanProducts");
inline const Child<> outputChannel("outputChannel");
inline const Child<> photonEmissionProbabilities("photonEmissionProbabilities");
inline const Child<> primaryGamma("primaryGamma");
inline const Child<> production("production");
inline const Child<> productions("productions");
inline const Child<> r("r");
inline const Child<> reaction("reaction");
inline const Child<> reactionSuite("reactionSuite");
inline const Child<> reactions("reactions");
inline const Child<> recoil("recoil");
inline const Child<> reference("reference");
inline const Child<> resolvedRegion("resolvedRegion");
inline const Child<> resonances("resonances");
inline const Child<> resonancesWithBackground("resonancesWithBackground");
inline const Child<> scatteringMatrix("scatteringMatrix");
inline const Child<> summands("summands");
inline const Child<> sums("sums");
inline const Child<> theta("theta");
inline const Child<> uncorrelated("uncorrelated");
inline const Child<> unresolvedRegion("unresolvedRegion");
inline const Child<> unspecified("unspecified");
inline const Child<> weighted("weighted");
inline const Child<> weightedFunctionals("weightedFunctionals");

} // namespace child
using namespace child;
} // namespace key
} // namespace transport


// -----------------------------------------------------------------------------
// tsl::key::child::
// -----------------------------------------------------------------------------

namespace tsl {
namespace key {
namespace child {

inline const Child<> BraggEdge("BraggEdge");
inline const Child<> BraggEdges("BraggEdges");
inline const Child<> BraggEnergy("BraggEnergy");
inline const Child<> DebyeWallerIntegral("DebyeWallerIntegral");
inline const Child<> S_table("S_table");
inline const Child<> T_effective("T_effective");
inline const Child<> boundAtomCrossSection("boundAtomCrossSection");
inline const Child<> coherentAtomCrossSection("coherentAtomCrossSection");
inline const Child<> distinctScatteringKernel("distinctScatteringKernel");
inline const Child<> e_critical("e_critical");
inline const Child<> e_max("e_max");
inline const Child<> phononSpectrum("phononSpectrum");
inline const Child<> scatteringAtom("scatteringAtom");
inline const Child<> scatteringAtoms("scatteringAtoms");
inline const Child<> selfScatteringKernel("selfScatteringKernel");
inline const Child<> selfScatteringKernelGaussianApproximation("selfScatteringKernelGaussianApproximation");
inline const Child<> selfScatteringKernelSCTApproximation("selfScatteringKernelSCTApproximation");
inline const Child<> structureFactor("structureFactor");
inline const Child<> thermalNeutronScatteringLaw("thermalNeutronScatteringLaw");
inline const Child<> thermalNeutronScatteringLaw1d("thermalNeutronScatteringLaw1d");
inline const Child<> thermalNeutronScatteringLaw_coherentElastic("thermalNeutronScatteringLaw_coherentElastic");
inline const Child<> thermalNeutronScatteringLaw_incoherentElastic("thermalNeutronScatteringLaw_incoherentElastic");
inline const Child<> thermalNeutronScatteringLaw_incoherentInelastic("thermalNeutronScatteringLaw_incoherentInelastic");

} // namespace child
using namespace child;
} // namespace key
} // namespace tsl


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
