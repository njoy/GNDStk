
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_ATOMIC_INCOHERENTPHOTONSCATTERING
#define NJOY_GNDSTK_V2_0_ATOMIC_INCOHERENTPHOTONSCATTERING

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/atomic/ScatteringFactor.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// atomic::
// class IncoherentPhotonScattering
// -----------------------------------------------------------------------------

namespace atomic {

class IncoherentPhotonScattering : public Component<IncoherentPhotonScattering> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "atomic"; }
   static auto className() { return "IncoherentPhotonScattering"; }
   static auto GNDSName() { return "incoherentPhotonScattering"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<std::string>{}
            / Meta<>("href") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("pid") |
         enums::Frame{}
            / Meta<>("productFrame") |
         // children
         std::optional<atomic::ScatteringFactor>{}
            / --Child<>("scatteringFactor")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<std::string> href;
      std::optional<XMLName> label;
      std::optional<XMLName> pid;
      enums::Frame productFrame;
      // children
      std::optional<atomic::ScatteringFactor> scatteringFactor;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // href
   const std::optional<std::string> &href() const
      { return content.href; }
   std::optional<std::string> &href()
      { return content.href; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // pid
   const std::optional<XMLName> &pid() const
      { return content.pid; }
   std::optional<XMLName> &pid()
      { return content.pid; }

   // productFrame
   const enums::Frame &productFrame() const
      { return content.productFrame; }
   enums::Frame &productFrame()
      { return content.productFrame; }

   // scatteringFactor
   const std::optional<atomic::ScatteringFactor> &scatteringFactor() const
      { return content.scatteringFactor; }
   std::optional<atomic::ScatteringFactor> &scatteringFactor()
      { return content.scatteringFactor; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // href(value)
   IncoherentPhotonScattering &href(const std::optional<std::string> &obj)
      { href() = obj; return *this; }

   // label(value)
   IncoherentPhotonScattering &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // pid(value)
   IncoherentPhotonScattering &pid(const std::optional<XMLName> &obj)
      { pid() = obj; return *this; }

   // productFrame(value)
   IncoherentPhotonScattering &productFrame(const enums::Frame &obj)
      { productFrame() = obj; return *this; }

   // scatteringFactor(value)
   IncoherentPhotonScattering &scatteringFactor(const std::optional<atomic::ScatteringFactor> &obj)
      { scatteringFactor() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   IncoherentPhotonScattering() :
      Component{
         BodyText{},
         content.href,
         content.label,
         content.pid,
         content.productFrame,
         content.scatteringFactor
      }
   {
      Component::finish();
   }

   // copy
   IncoherentPhotonScattering(const IncoherentPhotonScattering &other) :
      Component{
         other,
         content.href,
         content.label,
         content.pid,
         content.productFrame,
         content.scatteringFactor
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   IncoherentPhotonScattering(IncoherentPhotonScattering &&other) :
      Component{
         other,
         content.href,
         content.label,
         content.pid,
         content.productFrame,
         content.scatteringFactor
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   IncoherentPhotonScattering(const Node &node) :
      Component{
         BodyText{},
         content.href,
         content.label,
         content.pid,
         content.productFrame,
         content.scatteringFactor
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit IncoherentPhotonScattering(
      const std::optional<std::string> &href,
      const std::optional<XMLName> &label,
      const std::optional<XMLName> &pid,
      const enums::Frame &productFrame,
      const std::optional<atomic::ScatteringFactor> &scatteringFactor
   ) :
      Component{
         BodyText{},
         content.href,
         content.label,
         content.pid,
         content.productFrame,
         content.scatteringFactor
      },
      content{
         href,
         label,
         pid,
         productFrame,
         scatteringFactor
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   IncoherentPhotonScattering &operator=(const IncoherentPhotonScattering &) = default;

   // move
   IncoherentPhotonScattering &operator=(IncoherentPhotonScattering &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/atomic/IncoherentPhotonScattering/src/custom.hpp"

}; // class IncoherentPhotonScattering

} // namespace atomic
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
