
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COMMON_MASS
#define NJOY_GNDSTK_V2_0_COMMON_MASS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Double.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// common::
// class Mass
// -----------------------------------------------------------------------------

namespace common {

class Mass : public Component<Mass> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "common"; }
   static auto className() { return "Mass"; }
   static auto GNDSName() { return "mass"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         containers::Double{}
            / ++Child<>("Double")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::vector<containers::Double> Double;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // Double
   const std::vector<containers::Double> &Double() const
      { return content.Double; }
   std::vector<containers::Double> &Double()
      { return content.Double; }

   // Double(index)
   const containers::Double &Double(const std::size_t index) const
      { return getter(Double(), index, "Double"); }
   containers::Double &Double(const std::size_t index)
      { return getter(Double(), index, "Double"); }

   // Double(label)
   const containers::Double &Double(const std::string &label) const
      { return getter(Double(), label, "Double"); }
   containers::Double &Double(const std::string &label)
      { return getter(Double(), label, "Double"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // Double(value)
   Mass &Double(const std::vector<containers::Double> &obj)
      { Double() = obj; return *this; }

   // Double(index,value)
   Mass &Double(
      const std::size_t index,
      const containers::Double &obj
   ) {
      Double(index) = obj; return *this;
   }

   // Double(label,value)
   Mass &Double(
      const std::string &label,
      const containers::Double &obj
   ) {
      Double(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Mass() :
      Component{
         BodyText{},
         content.Double
      }
   {
      Component::finish();
   }

   // copy
   Mass(const Mass &other) :
      Component{
         other,
         content.Double
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Mass(Mass &&other) :
      Component{
         other,
         content.Double
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Mass(const Node &node) :
      Component{
         BodyText{},
         content.Double
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Mass(
      const std::vector<containers::Double> &Double
   ) :
      Component{
         BodyText{},
         content.Double
      },
      content{
         Double
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Mass &operator=(const Mass &) = default;

   // move
   Mass &operator=(Mass &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/common/Mass/src/custom.hpp"

}; // class Mass

} // namespace common
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
