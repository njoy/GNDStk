
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COMMON_PRODUCT
#define NJOY_GNDSTK_V2_0_COMMON_PRODUCT

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/Distribution.hpp"
#include "GNDStk/v2.0/transport/Multiplicity.hpp"
#include "GNDStk/v2.0/transport/OutputChannel.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// common::
// class Product
// -----------------------------------------------------------------------------

namespace common {

class Product : public Component<Product> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "common"; }
   static auto className() { return "Product"; }
   static auto GNDSName() { return "product"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("pid") |
         // children
         transport::Distribution{}
            / --Child<>("distribution") |
         transport::Multiplicity{}
            / --Child<>("multiplicity") |
         std::optional<transport::OutputChannel>{}
            / --Child<>("outputChannel")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      XMLName pid;
      // children
      transport::Distribution distribution;
      transport::Multiplicity multiplicity;
      std::optional<transport::OutputChannel> outputChannel;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // pid
   const XMLName &pid() const
      { return content.pid; }
   XMLName &pid()
      { return content.pid; }

   // distribution
   const transport::Distribution &distribution() const
      { return content.distribution; }
   transport::Distribution &distribution()
      { return content.distribution; }

   // multiplicity
   const transport::Multiplicity &multiplicity() const
      { return content.multiplicity; }
   transport::Multiplicity &multiplicity()
      { return content.multiplicity; }

   // outputChannel
   const std::optional<transport::OutputChannel> &outputChannel() const
      { return content.outputChannel; }
   std::optional<transport::OutputChannel> &outputChannel()
      { return content.outputChannel; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   Product &label(const XMLName &obj)
      { label() = obj; return *this; }

   // pid(value)
   Product &pid(const XMLName &obj)
      { pid() = obj; return *this; }

   // distribution(value)
   Product &distribution(const transport::Distribution &obj)
      { distribution() = obj; return *this; }

   // multiplicity(value)
   Product &multiplicity(const transport::Multiplicity &obj)
      { multiplicity() = obj; return *this; }

   // outputChannel(value)
   Product &outputChannel(const std::optional<transport::OutputChannel> &obj)
      { outputChannel() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Product() :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.distribution,
         content.multiplicity,
         content.outputChannel
      }
   {
      Component::finish();
   }

   // copy
   Product(const Product &other) :
      Component{
         other,
         content.label,
         content.pid,
         content.distribution,
         content.multiplicity,
         content.outputChannel
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Product(Product &&other) :
      Component{
         other,
         content.label,
         content.pid,
         content.distribution,
         content.multiplicity,
         content.outputChannel
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Product(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.distribution,
         content.multiplicity,
         content.outputChannel
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Product(
      const XMLName &label,
      const XMLName &pid,
      const transport::Distribution &distribution,
      const transport::Multiplicity &multiplicity,
      const std::optional<transport::OutputChannel> &outputChannel
   ) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.distribution,
         content.multiplicity,
         content.outputChannel
      },
      content{
         label,
         pid,
         distribution,
         multiplicity,
         outputChannel
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Product &operator=(const Product &) = default;

   // move
   Product &operator=(Product &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/common/Product/src/custom.hpp"

}; // class Product

} // namespace common
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
