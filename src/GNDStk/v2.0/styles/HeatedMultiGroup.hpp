
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_STYLES_HEATEDMULTIGROUP
#define NJOY_GNDSTK_V2_0_STYLES_HEATEDMULTIGROUP

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/styles/Flux.hpp"
#include "GNDStk/v2.0/styles/InverseSpeed.hpp"
#include "GNDStk/v2.0/styles/Transportables.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// styles::
// class HeatedMultiGroup
// -----------------------------------------------------------------------------

namespace styles {

class HeatedMultiGroup : public Component<HeatedMultiGroup> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "styles"; }
   static auto className() { return "HeatedMultiGroup"; }
   static auto GNDSName() { return "heatedMultiGroup"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::string{}
            / Meta<>("date") |
         XMLName{}
            / Meta<>("derivedFrom") |
         XMLName{}
            / Meta<>("label") |
         // children
         styles::Flux{}
            / --Child<>("flux") |
         styles::InverseSpeed{}
            / --Child<>("inverseSpeed") |
         styles::Transportables{}
            / --Child<>("transportables")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::string date;
      XMLName derivedFrom;
      XMLName label;
      // children
      styles::Flux flux;
      styles::InverseSpeed inverseSpeed;
      styles::Transportables transportables;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // date
   const std::string &date() const
      { return content.date; }
   std::string &date()
      { return content.date; }

   // derivedFrom
   const XMLName &derivedFrom() const
      { return content.derivedFrom; }
   XMLName &derivedFrom()
      { return content.derivedFrom; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // flux
   const styles::Flux &flux() const
      { return content.flux; }
   styles::Flux &flux()
      { return content.flux; }

   // inverseSpeed
   const styles::InverseSpeed &inverseSpeed() const
      { return content.inverseSpeed; }
   styles::InverseSpeed &inverseSpeed()
      { return content.inverseSpeed; }

   // transportables
   const styles::Transportables &transportables() const
      { return content.transportables; }
   styles::Transportables &transportables()
      { return content.transportables; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // date(value)
   HeatedMultiGroup &date(const std::string &obj)
      { date() = obj; return *this; }

   // derivedFrom(value)
   HeatedMultiGroup &derivedFrom(const XMLName &obj)
      { derivedFrom() = obj; return *this; }

   // label(value)
   HeatedMultiGroup &label(const XMLName &obj)
      { label() = obj; return *this; }

   // flux(value)
   HeatedMultiGroup &flux(const styles::Flux &obj)
      { flux() = obj; return *this; }

   // inverseSpeed(value)
   HeatedMultiGroup &inverseSpeed(const styles::InverseSpeed &obj)
      { inverseSpeed() = obj; return *this; }

   // transportables(value)
   HeatedMultiGroup &transportables(const styles::Transportables &obj)
      { transportables() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   HeatedMultiGroup() :
      Component{
         BodyText{},
         content.date,
         content.derivedFrom,
         content.label,
         content.flux,
         content.inverseSpeed,
         content.transportables
      }
   {
      Component::finish();
   }

   // copy
   HeatedMultiGroup(const HeatedMultiGroup &other) :
      Component{
         other,
         content.date,
         content.derivedFrom,
         content.label,
         content.flux,
         content.inverseSpeed,
         content.transportables
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   HeatedMultiGroup(HeatedMultiGroup &&other) :
      Component{
         other,
         content.date,
         content.derivedFrom,
         content.label,
         content.flux,
         content.inverseSpeed,
         content.transportables
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   HeatedMultiGroup(const Node &node) :
      Component{
         BodyText{},
         content.date,
         content.derivedFrom,
         content.label,
         content.flux,
         content.inverseSpeed,
         content.transportables
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit HeatedMultiGroup(
      const std::string &date,
      const XMLName &derivedFrom,
      const XMLName &label,
      const styles::Flux &flux,
      const styles::InverseSpeed &inverseSpeed,
      const styles::Transportables &transportables
   ) :
      Component{
         BodyText{},
         content.date,
         content.derivedFrom,
         content.label,
         content.flux,
         content.inverseSpeed,
         content.transportables
      },
      content{
         date,
         derivedFrom,
         label,
         flux,
         inverseSpeed,
         transportables
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   HeatedMultiGroup &operator=(const HeatedMultiGroup &) = default;

   // move
   HeatedMultiGroup &operator=(HeatedMultiGroup &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/styles/HeatedMultiGroup/src/custom.hpp"

}; // class HeatedMultiGroup

} // namespace styles
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
