
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_STYLES_PROJECTILEENERGYDOMAIN
#define NJOY_GNDSTK_V2_0_STYLES_PROJECTILEENERGYDOMAIN

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// styles::
// class ProjectileEnergyDomain
// -----------------------------------------------------------------------------

namespace styles {

class ProjectileEnergyDomain : public Component<ProjectileEnergyDomain> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "styles"; }
   static auto className() { return "ProjectileEnergyDomain"; }
   static auto GNDSName() { return "projectileEnergyDomain"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Float64{}
            / Meta<>("max") |
         Float64{}
            / Meta<>("min") |
         XMLName{}
            / Meta<>("unit")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Float64 max;
      Float64 min;
      XMLName unit;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // max
   const Float64 &max() const
      { return content.max; }
   Float64 &max()
      { return content.max; }

   // min
   const Float64 &min() const
      { return content.min; }
   Float64 &min()
      { return content.min; }

   // unit
   const XMLName &unit() const
      { return content.unit; }
   XMLName &unit()
      { return content.unit; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // max(value)
   ProjectileEnergyDomain &max(const Float64 &obj)
      { max() = obj; return *this; }

   // min(value)
   ProjectileEnergyDomain &min(const Float64 &obj)
      { min() = obj; return *this; }

   // unit(value)
   ProjectileEnergyDomain &unit(const XMLName &obj)
      { unit() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ProjectileEnergyDomain() :
      Component{
         BodyText{},
         content.max,
         content.min,
         content.unit
      }
   {
      Component::finish();
   }

   // copy
   ProjectileEnergyDomain(const ProjectileEnergyDomain &other) :
      Component{
         other,
         content.max,
         content.min,
         content.unit
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ProjectileEnergyDomain(ProjectileEnergyDomain &&other) :
      Component{
         other,
         content.max,
         content.min,
         content.unit
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ProjectileEnergyDomain(const Node &node) :
      Component{
         BodyText{},
         content.max,
         content.min,
         content.unit
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ProjectileEnergyDomain(
      const Float64 &max,
      const Float64 &min,
      const XMLName &unit
   ) :
      Component{
         BodyText{},
         content.max,
         content.min,
         content.unit
      },
      content{
         max,
         min,
         unit
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ProjectileEnergyDomain &operator=(const ProjectileEnergyDomain &) = default;

   // move
   ProjectileEnergyDomain &operator=(ProjectileEnergyDomain &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/styles/ProjectileEnergyDomain/src/custom.hpp"

}; // class ProjectileEnergyDomain

} // namespace styles
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
