
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_STYLES_TRANSPORTABLE
#define NJOY_GNDSTK_V2_0_STYLES_TRANSPORTABLE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/styles/MultiGroup.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// styles::
// class Transportable
// -----------------------------------------------------------------------------

namespace styles {

class Transportable : public Component<Transportable> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "styles"; }
   static auto className() { return "Transportable"; }
   static auto GNDSName() { return "transportable"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Defaulted<XMLName>{"number"}
            / Meta<>("conserve") |
         XMLName{}
            / Meta<>("label") |
         // children
         styles::MultiGroup{}
            / --Child<>("multiGroup")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const XMLName conserve = "number";
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Defaulted<XMLName> conserve{"number"};
      XMLName label;
      // children
      styles::MultiGroup multiGroup;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // conserve
   const Defaulted<XMLName> &conserve() const
      { return content.conserve; }
   Defaulted<XMLName> &conserve()
      { return content.conserve; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // multiGroup
   const styles::MultiGroup &multiGroup() const
      { return content.multiGroup; }
   styles::MultiGroup &multiGroup()
      { return content.multiGroup; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // conserve(value)
   Transportable &conserve(const Defaulted<XMLName> &obj)
      { content.conserve = obj; return *this; }
   Transportable &conserve(const std::optional<XMLName> &obj)
      { content.conserve = obj; return *this; }

   // label(value)
   Transportable &label(const XMLName &obj)
      { label() = obj; return *this; }

   // multiGroup(value)
   Transportable &multiGroup(const styles::MultiGroup &obj)
      { multiGroup() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Transportable() :
      Component{
         BodyText{},
         content.conserve,
         content.label,
         content.multiGroup
      }
   {
      Component::finish();
   }

   // copy
   Transportable(const Transportable &other) :
      Component{
         other,
         content.conserve,
         content.label,
         content.multiGroup
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Transportable(Transportable &&other) :
      Component{
         other,
         content.conserve,
         content.label,
         content.multiGroup
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Transportable(const Node &node) :
      Component{
         BodyText{},
         content.conserve,
         content.label,
         content.multiGroup
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Transportable(
      const std::optional<XMLName> &conserve,
      const XMLName &label,
      const styles::MultiGroup &multiGroup
   ) :
      Component{
         BodyText{},
         content.conserve,
         content.label,
         content.multiGroup
      },
      content{
         Defaulted<XMLName>(defaults.conserve,conserve),
         label,
         multiGroup
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Transportable &operator=(const Transportable &) = default;

   // move
   Transportable &operator=(Transportable &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/styles/Transportable/src/custom.hpp"

}; // class Transportable

} // namespace styles
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
