
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_STYLES_EVALUATED
#define NJOY_GNDSTK_V2_0_STYLES_EVALUATED

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/documentation/Documentation.hpp"
#include "GNDStk/v2.0/styles/ProjectileEnergyDomain.hpp"
#include "GNDStk/v2.0/styles/Temperature.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// styles::
// class Evaluated
// -----------------------------------------------------------------------------

namespace styles {

class Evaluated : public Component<Evaluated> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "styles"; }
   static auto className() { return "Evaluated"; }
   static auto GNDSName() { return "evaluated"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::string{}
            / Meta<>("date") |
         std::optional<XMLName>{}
            / Meta<>("derivedFrom") |
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("library") |
         XMLName{}
            / Meta<>("version") |
         // children
         documentation::Documentation{}
            / --Child<>("documentation") |
         styles::ProjectileEnergyDomain{}
            / --Child<>("projectileEnergyDomain") |
         styles::Temperature{}
            / --Child<>("temperature")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::string date;
      std::optional<XMLName> derivedFrom;
      XMLName label;
      XMLName library;
      XMLName version;
      // children
      documentation::Documentation documentation;
      styles::ProjectileEnergyDomain projectileEnergyDomain;
      styles::Temperature temperature;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // date
   const std::string &date() const
      { return content.date; }
   std::string &date()
      { return content.date; }

   // derivedFrom
   const std::optional<XMLName> &derivedFrom() const
      { return content.derivedFrom; }
   std::optional<XMLName> &derivedFrom()
      { return content.derivedFrom; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // library
   const XMLName &library() const
      { return content.library; }
   XMLName &library()
      { return content.library; }

   // version
   const XMLName &version() const
      { return content.version; }
   XMLName &version()
      { return content.version; }

   // documentation
   const documentation::Documentation &documentation() const
      { return content.documentation; }
   documentation::Documentation &documentation()
      { return content.documentation; }

   // projectileEnergyDomain
   const styles::ProjectileEnergyDomain &projectileEnergyDomain() const
      { return content.projectileEnergyDomain; }
   styles::ProjectileEnergyDomain &projectileEnergyDomain()
      { return content.projectileEnergyDomain; }

   // temperature
   const styles::Temperature &temperature() const
      { return content.temperature; }
   styles::Temperature &temperature()
      { return content.temperature; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // date(value)
   Evaluated &date(const std::string &obj)
      { date() = obj; return *this; }

   // derivedFrom(value)
   Evaluated &derivedFrom(const std::optional<XMLName> &obj)
      { derivedFrom() = obj; return *this; }

   // label(value)
   Evaluated &label(const XMLName &obj)
      { label() = obj; return *this; }

   // library(value)
   Evaluated &library(const XMLName &obj)
      { library() = obj; return *this; }

   // version(value)
   Evaluated &version(const XMLName &obj)
      { version() = obj; return *this; }

   // documentation(value)
   Evaluated &documentation(const documentation::Documentation &obj)
      { documentation() = obj; return *this; }

   // projectileEnergyDomain(value)
   Evaluated &projectileEnergyDomain(const styles::ProjectileEnergyDomain &obj)
      { projectileEnergyDomain() = obj; return *this; }

   // temperature(value)
   Evaluated &temperature(const styles::Temperature &obj)
      { temperature() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Evaluated() :
      Component{
         BodyText{},
         content.date,
         content.derivedFrom,
         content.label,
         content.library,
         content.version,
         content.documentation,
         content.projectileEnergyDomain,
         content.temperature
      }
   {
      Component::finish();
   }

   // copy
   Evaluated(const Evaluated &other) :
      Component{
         other,
         content.date,
         content.derivedFrom,
         content.label,
         content.library,
         content.version,
         content.documentation,
         content.projectileEnergyDomain,
         content.temperature
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Evaluated(Evaluated &&other) :
      Component{
         other,
         content.date,
         content.derivedFrom,
         content.label,
         content.library,
         content.version,
         content.documentation,
         content.projectileEnergyDomain,
         content.temperature
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Evaluated(const Node &node) :
      Component{
         BodyText{},
         content.date,
         content.derivedFrom,
         content.label,
         content.library,
         content.version,
         content.documentation,
         content.projectileEnergyDomain,
         content.temperature
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Evaluated(
      const std::string &date,
      const std::optional<XMLName> &derivedFrom,
      const XMLName &label,
      const XMLName &library,
      const XMLName &version,
      const documentation::Documentation &documentation,
      const styles::ProjectileEnergyDomain &projectileEnergyDomain,
      const styles::Temperature &temperature
   ) :
      Component{
         BodyText{},
         content.date,
         content.derivedFrom,
         content.label,
         content.library,
         content.version,
         content.documentation,
         content.projectileEnergyDomain,
         content.temperature
      },
      content{
         date,
         derivedFrom,
         label,
         library,
         version,
         documentation,
         projectileEnergyDomain,
         temperature
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Evaluated &operator=(const Evaluated &) = default;

   // move
   Evaluated &operator=(Evaluated &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/styles/Evaluated/src/custom.hpp"

}; // class Evaluated

} // namespace styles
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
