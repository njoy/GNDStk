
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_STYLES_STYLES
#define NJOY_GNDSTK_V2_0_STYLES_STYLES

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/styles/MonteCarlo_cdf.hpp"
#include "GNDStk/v2.0/styles/SnElasticUpScatter.hpp"
#include "GNDStk/v2.0/styles/URR_probabilityTables.hpp"
#include "GNDStk/v2.0/styles/AngularDistributionReconstructed.hpp"
#include "GNDStk/v2.0/styles/AverageProductData.hpp"
#include "GNDStk/v2.0/styles/CrossSectionReconstructed.hpp"
#include "GNDStk/v2.0/styles/Evaluated.hpp"
#include "GNDStk/v2.0/styles/GriddedCrossSection.hpp"
#include "GNDStk/v2.0/styles/Heated.hpp"
#include "GNDStk/v2.0/styles/HeatedMultiGroup.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// styles::
// class Styles
// -----------------------------------------------------------------------------

namespace styles {

class Styles : public Component<Styles> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "styles"; }
   static auto className() { return "Styles"; }
   static auto GNDSName() { return "styles"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<styles::MonteCarlo_cdf>{}
            / ++Child<>("MonteCarlo_cdf") |
         std::optional<styles::SnElasticUpScatter>{}
            / ++Child<>("SnElasticUpScatter") |
         std::optional<styles::URR_probabilityTables>{}
            / ++Child<>("URR_probabilityTables") |
         std::optional<styles::AngularDistributionReconstructed>{}
            / ++Child<>("angularDistributionReconstructed") |
         std::optional<styles::AverageProductData>{}
            / ++Child<>("averageProductData") |
         std::optional<styles::CrossSectionReconstructed>{}
            / ++Child<>("crossSectionReconstructed") |
         std::optional<styles::Evaluated>{}
            / ++Child<>("evaluated") |
         std::optional<styles::GriddedCrossSection>{}
            / ++Child<>("griddedCrossSection") |
         std::optional<styles::Heated>{}
            / ++Child<>("heated") |
         std::optional<styles::HeatedMultiGroup>{}
            / ++Child<>("heatedMultiGroup")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<std::vector<styles::MonteCarlo_cdf>> MonteCarlo_cdf;
      std::optional<std::vector<styles::SnElasticUpScatter>> SnElasticUpScatter;
      std::optional<std::vector<styles::URR_probabilityTables>> URR_probabilityTables;
      std::optional<std::vector<styles::AngularDistributionReconstructed>> angularDistributionReconstructed;
      std::optional<std::vector<styles::AverageProductData>> averageProductData;
      std::optional<std::vector<styles::CrossSectionReconstructed>> crossSectionReconstructed;
      std::optional<std::vector<styles::Evaluated>> evaluated;
      std::optional<std::vector<styles::GriddedCrossSection>> griddedCrossSection;
      std::optional<std::vector<styles::Heated>> heated;
      std::optional<std::vector<styles::HeatedMultiGroup>> heatedMultiGroup;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // MonteCarlo_cdf
   const std::optional<std::vector<styles::MonteCarlo_cdf>> &MonteCarlo_cdf() const
      { return content.MonteCarlo_cdf; }
   std::optional<std::vector<styles::MonteCarlo_cdf>> &MonteCarlo_cdf()
      { return content.MonteCarlo_cdf; }

   // MonteCarlo_cdf(index)
   const styles::MonteCarlo_cdf &MonteCarlo_cdf(const std::size_t index) const
      { return getter(MonteCarlo_cdf(), index, "MonteCarlo_cdf"); }
   styles::MonteCarlo_cdf &MonteCarlo_cdf(const std::size_t index)
      { return getter(MonteCarlo_cdf(), index, "MonteCarlo_cdf"); }

   // MonteCarlo_cdf(label)
   const styles::MonteCarlo_cdf &MonteCarlo_cdf(const std::string &label) const
      { return getter(MonteCarlo_cdf(), label, "MonteCarlo_cdf"); }
   styles::MonteCarlo_cdf &MonteCarlo_cdf(const std::string &label)
      { return getter(MonteCarlo_cdf(), label, "MonteCarlo_cdf"); }

   // SnElasticUpScatter
   const std::optional<std::vector<styles::SnElasticUpScatter>> &SnElasticUpScatter() const
      { return content.SnElasticUpScatter; }
   std::optional<std::vector<styles::SnElasticUpScatter>> &SnElasticUpScatter()
      { return content.SnElasticUpScatter; }

   // SnElasticUpScatter(index)
   const styles::SnElasticUpScatter &SnElasticUpScatter(const std::size_t index) const
      { return getter(SnElasticUpScatter(), index, "SnElasticUpScatter"); }
   styles::SnElasticUpScatter &SnElasticUpScatter(const std::size_t index)
      { return getter(SnElasticUpScatter(), index, "SnElasticUpScatter"); }

   // SnElasticUpScatter(label)
   const styles::SnElasticUpScatter &SnElasticUpScatter(const std::string &label) const
      { return getter(SnElasticUpScatter(), label, "SnElasticUpScatter"); }
   styles::SnElasticUpScatter &SnElasticUpScatter(const std::string &label)
      { return getter(SnElasticUpScatter(), label, "SnElasticUpScatter"); }

   // URR_probabilityTables
   const std::optional<std::vector<styles::URR_probabilityTables>> &URR_probabilityTables() const
      { return content.URR_probabilityTables; }
   std::optional<std::vector<styles::URR_probabilityTables>> &URR_probabilityTables()
      { return content.URR_probabilityTables; }

   // URR_probabilityTables(index)
   const styles::URR_probabilityTables &URR_probabilityTables(const std::size_t index) const
      { return getter(URR_probabilityTables(), index, "URR_probabilityTables"); }
   styles::URR_probabilityTables &URR_probabilityTables(const std::size_t index)
      { return getter(URR_probabilityTables(), index, "URR_probabilityTables"); }

   // URR_probabilityTables(label)
   const styles::URR_probabilityTables &URR_probabilityTables(const std::string &label) const
      { return getter(URR_probabilityTables(), label, "URR_probabilityTables"); }
   styles::URR_probabilityTables &URR_probabilityTables(const std::string &label)
      { return getter(URR_probabilityTables(), label, "URR_probabilityTables"); }

   // angularDistributionReconstructed
   const std::optional<std::vector<styles::AngularDistributionReconstructed>> &angularDistributionReconstructed() const
      { return content.angularDistributionReconstructed; }
   std::optional<std::vector<styles::AngularDistributionReconstructed>> &angularDistributionReconstructed()
      { return content.angularDistributionReconstructed; }

   // angularDistributionReconstructed(index)
   const styles::AngularDistributionReconstructed &angularDistributionReconstructed(const std::size_t index) const
      { return getter(angularDistributionReconstructed(), index, "angularDistributionReconstructed"); }
   styles::AngularDistributionReconstructed &angularDistributionReconstructed(const std::size_t index)
      { return getter(angularDistributionReconstructed(), index, "angularDistributionReconstructed"); }

   // angularDistributionReconstructed(label)
   const styles::AngularDistributionReconstructed &angularDistributionReconstructed(const std::string &label) const
      { return getter(angularDistributionReconstructed(), label, "angularDistributionReconstructed"); }
   styles::AngularDistributionReconstructed &angularDistributionReconstructed(const std::string &label)
      { return getter(angularDistributionReconstructed(), label, "angularDistributionReconstructed"); }

   // averageProductData
   const std::optional<std::vector<styles::AverageProductData>> &averageProductData() const
      { return content.averageProductData; }
   std::optional<std::vector<styles::AverageProductData>> &averageProductData()
      { return content.averageProductData; }

   // averageProductData(index)
   const styles::AverageProductData &averageProductData(const std::size_t index) const
      { return getter(averageProductData(), index, "averageProductData"); }
   styles::AverageProductData &averageProductData(const std::size_t index)
      { return getter(averageProductData(), index, "averageProductData"); }

   // averageProductData(label)
   const styles::AverageProductData &averageProductData(const std::string &label) const
      { return getter(averageProductData(), label, "averageProductData"); }
   styles::AverageProductData &averageProductData(const std::string &label)
      { return getter(averageProductData(), label, "averageProductData"); }

   // crossSectionReconstructed
   const std::optional<std::vector<styles::CrossSectionReconstructed>> &crossSectionReconstructed() const
      { return content.crossSectionReconstructed; }
   std::optional<std::vector<styles::CrossSectionReconstructed>> &crossSectionReconstructed()
      { return content.crossSectionReconstructed; }

   // crossSectionReconstructed(index)
   const styles::CrossSectionReconstructed &crossSectionReconstructed(const std::size_t index) const
      { return getter(crossSectionReconstructed(), index, "crossSectionReconstructed"); }
   styles::CrossSectionReconstructed &crossSectionReconstructed(const std::size_t index)
      { return getter(crossSectionReconstructed(), index, "crossSectionReconstructed"); }

   // crossSectionReconstructed(label)
   const styles::CrossSectionReconstructed &crossSectionReconstructed(const std::string &label) const
      { return getter(crossSectionReconstructed(), label, "crossSectionReconstructed"); }
   styles::CrossSectionReconstructed &crossSectionReconstructed(const std::string &label)
      { return getter(crossSectionReconstructed(), label, "crossSectionReconstructed"); }

   // evaluated
   const std::optional<std::vector<styles::Evaluated>> &evaluated() const
      { return content.evaluated; }
   std::optional<std::vector<styles::Evaluated>> &evaluated()
      { return content.evaluated; }

   // evaluated(index)
   const styles::Evaluated &evaluated(const std::size_t index) const
      { return getter(evaluated(), index, "evaluated"); }
   styles::Evaluated &evaluated(const std::size_t index)
      { return getter(evaluated(), index, "evaluated"); }

   // evaluated(label)
   const styles::Evaluated &evaluated(const std::string &label) const
      { return getter(evaluated(), label, "evaluated"); }
   styles::Evaluated &evaluated(const std::string &label)
      { return getter(evaluated(), label, "evaluated"); }

   // griddedCrossSection
   const std::optional<std::vector<styles::GriddedCrossSection>> &griddedCrossSection() const
      { return content.griddedCrossSection; }
   std::optional<std::vector<styles::GriddedCrossSection>> &griddedCrossSection()
      { return content.griddedCrossSection; }

   // griddedCrossSection(index)
   const styles::GriddedCrossSection &griddedCrossSection(const std::size_t index) const
      { return getter(griddedCrossSection(), index, "griddedCrossSection"); }
   styles::GriddedCrossSection &griddedCrossSection(const std::size_t index)
      { return getter(griddedCrossSection(), index, "griddedCrossSection"); }

   // griddedCrossSection(label)
   const styles::GriddedCrossSection &griddedCrossSection(const std::string &label) const
      { return getter(griddedCrossSection(), label, "griddedCrossSection"); }
   styles::GriddedCrossSection &griddedCrossSection(const std::string &label)
      { return getter(griddedCrossSection(), label, "griddedCrossSection"); }

   // heated
   const std::optional<std::vector<styles::Heated>> &heated() const
      { return content.heated; }
   std::optional<std::vector<styles::Heated>> &heated()
      { return content.heated; }

   // heated(index)
   const styles::Heated &heated(const std::size_t index) const
      { return getter(heated(), index, "heated"); }
   styles::Heated &heated(const std::size_t index)
      { return getter(heated(), index, "heated"); }

   // heated(label)
   const styles::Heated &heated(const std::string &label) const
      { return getter(heated(), label, "heated"); }
   styles::Heated &heated(const std::string &label)
      { return getter(heated(), label, "heated"); }

   // heatedMultiGroup
   const std::optional<std::vector<styles::HeatedMultiGroup>> &heatedMultiGroup() const
      { return content.heatedMultiGroup; }
   std::optional<std::vector<styles::HeatedMultiGroup>> &heatedMultiGroup()
      { return content.heatedMultiGroup; }

   // heatedMultiGroup(index)
   const styles::HeatedMultiGroup &heatedMultiGroup(const std::size_t index) const
      { return getter(heatedMultiGroup(), index, "heatedMultiGroup"); }
   styles::HeatedMultiGroup &heatedMultiGroup(const std::size_t index)
      { return getter(heatedMultiGroup(), index, "heatedMultiGroup"); }

   // heatedMultiGroup(label)
   const styles::HeatedMultiGroup &heatedMultiGroup(const std::string &label) const
      { return getter(heatedMultiGroup(), label, "heatedMultiGroup"); }
   styles::HeatedMultiGroup &heatedMultiGroup(const std::string &label)
      { return getter(heatedMultiGroup(), label, "heatedMultiGroup"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // MonteCarlo_cdf(value)
   Styles &MonteCarlo_cdf(const std::optional<std::vector<styles::MonteCarlo_cdf>> &obj)
      { MonteCarlo_cdf() = obj; return *this; }

   // MonteCarlo_cdf(index,value)
   Styles &MonteCarlo_cdf(
      const std::size_t index,
      const styles::MonteCarlo_cdf &obj
   ) {
      MonteCarlo_cdf(index) = obj; return *this;
   }

   // MonteCarlo_cdf(label,value)
   Styles &MonteCarlo_cdf(
      const std::string &label,
      const styles::MonteCarlo_cdf &obj
   ) {
      MonteCarlo_cdf(label) = obj; return *this;
   }

   // SnElasticUpScatter(value)
   Styles &SnElasticUpScatter(const std::optional<std::vector<styles::SnElasticUpScatter>> &obj)
      { SnElasticUpScatter() = obj; return *this; }

   // SnElasticUpScatter(index,value)
   Styles &SnElasticUpScatter(
      const std::size_t index,
      const styles::SnElasticUpScatter &obj
   ) {
      SnElasticUpScatter(index) = obj; return *this;
   }

   // SnElasticUpScatter(label,value)
   Styles &SnElasticUpScatter(
      const std::string &label,
      const styles::SnElasticUpScatter &obj
   ) {
      SnElasticUpScatter(label) = obj; return *this;
   }

   // URR_probabilityTables(value)
   Styles &URR_probabilityTables(const std::optional<std::vector<styles::URR_probabilityTables>> &obj)
      { URR_probabilityTables() = obj; return *this; }

   // URR_probabilityTables(index,value)
   Styles &URR_probabilityTables(
      const std::size_t index,
      const styles::URR_probabilityTables &obj
   ) {
      URR_probabilityTables(index) = obj; return *this;
   }

   // URR_probabilityTables(label,value)
   Styles &URR_probabilityTables(
      const std::string &label,
      const styles::URR_probabilityTables &obj
   ) {
      URR_probabilityTables(label) = obj; return *this;
   }

   // angularDistributionReconstructed(value)
   Styles &angularDistributionReconstructed(const std::optional<std::vector<styles::AngularDistributionReconstructed>> &obj)
      { angularDistributionReconstructed() = obj; return *this; }

   // angularDistributionReconstructed(index,value)
   Styles &angularDistributionReconstructed(
      const std::size_t index,
      const styles::AngularDistributionReconstructed &obj
   ) {
      angularDistributionReconstructed(index) = obj; return *this;
   }

   // angularDistributionReconstructed(label,value)
   Styles &angularDistributionReconstructed(
      const std::string &label,
      const styles::AngularDistributionReconstructed &obj
   ) {
      angularDistributionReconstructed(label) = obj; return *this;
   }

   // averageProductData(value)
   Styles &averageProductData(const std::optional<std::vector<styles::AverageProductData>> &obj)
      { averageProductData() = obj; return *this; }

   // averageProductData(index,value)
   Styles &averageProductData(
      const std::size_t index,
      const styles::AverageProductData &obj
   ) {
      averageProductData(index) = obj; return *this;
   }

   // averageProductData(label,value)
   Styles &averageProductData(
      const std::string &label,
      const styles::AverageProductData &obj
   ) {
      averageProductData(label) = obj; return *this;
   }

   // crossSectionReconstructed(value)
   Styles &crossSectionReconstructed(const std::optional<std::vector<styles::CrossSectionReconstructed>> &obj)
      { crossSectionReconstructed() = obj; return *this; }

   // crossSectionReconstructed(index,value)
   Styles &crossSectionReconstructed(
      const std::size_t index,
      const styles::CrossSectionReconstructed &obj
   ) {
      crossSectionReconstructed(index) = obj; return *this;
   }

   // crossSectionReconstructed(label,value)
   Styles &crossSectionReconstructed(
      const std::string &label,
      const styles::CrossSectionReconstructed &obj
   ) {
      crossSectionReconstructed(label) = obj; return *this;
   }

   // evaluated(value)
   Styles &evaluated(const std::optional<std::vector<styles::Evaluated>> &obj)
      { evaluated() = obj; return *this; }

   // evaluated(index,value)
   Styles &evaluated(
      const std::size_t index,
      const styles::Evaluated &obj
   ) {
      evaluated(index) = obj; return *this;
   }

   // evaluated(label,value)
   Styles &evaluated(
      const std::string &label,
      const styles::Evaluated &obj
   ) {
      evaluated(label) = obj; return *this;
   }

   // griddedCrossSection(value)
   Styles &griddedCrossSection(const std::optional<std::vector<styles::GriddedCrossSection>> &obj)
      { griddedCrossSection() = obj; return *this; }

   // griddedCrossSection(index,value)
   Styles &griddedCrossSection(
      const std::size_t index,
      const styles::GriddedCrossSection &obj
   ) {
      griddedCrossSection(index) = obj; return *this;
   }

   // griddedCrossSection(label,value)
   Styles &griddedCrossSection(
      const std::string &label,
      const styles::GriddedCrossSection &obj
   ) {
      griddedCrossSection(label) = obj; return *this;
   }

   // heated(value)
   Styles &heated(const std::optional<std::vector<styles::Heated>> &obj)
      { heated() = obj; return *this; }

   // heated(index,value)
   Styles &heated(
      const std::size_t index,
      const styles::Heated &obj
   ) {
      heated(index) = obj; return *this;
   }

   // heated(label,value)
   Styles &heated(
      const std::string &label,
      const styles::Heated &obj
   ) {
      heated(label) = obj; return *this;
   }

   // heatedMultiGroup(value)
   Styles &heatedMultiGroup(const std::optional<std::vector<styles::HeatedMultiGroup>> &obj)
      { heatedMultiGroup() = obj; return *this; }

   // heatedMultiGroup(index,value)
   Styles &heatedMultiGroup(
      const std::size_t index,
      const styles::HeatedMultiGroup &obj
   ) {
      heatedMultiGroup(index) = obj; return *this;
   }

   // heatedMultiGroup(label,value)
   Styles &heatedMultiGroup(
      const std::string &label,
      const styles::HeatedMultiGroup &obj
   ) {
      heatedMultiGroup(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Styles() :
      Component{
         BodyText{},
         content.MonteCarlo_cdf,
         content.SnElasticUpScatter,
         content.URR_probabilityTables,
         content.angularDistributionReconstructed,
         content.averageProductData,
         content.crossSectionReconstructed,
         content.evaluated,
         content.griddedCrossSection,
         content.heated,
         content.heatedMultiGroup
      }
   {
      Component::finish();
   }

   // copy
   Styles(const Styles &other) :
      Component{
         other,
         content.MonteCarlo_cdf,
         content.SnElasticUpScatter,
         content.URR_probabilityTables,
         content.angularDistributionReconstructed,
         content.averageProductData,
         content.crossSectionReconstructed,
         content.evaluated,
         content.griddedCrossSection,
         content.heated,
         content.heatedMultiGroup
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Styles(Styles &&other) :
      Component{
         other,
         content.MonteCarlo_cdf,
         content.SnElasticUpScatter,
         content.URR_probabilityTables,
         content.angularDistributionReconstructed,
         content.averageProductData,
         content.crossSectionReconstructed,
         content.evaluated,
         content.griddedCrossSection,
         content.heated,
         content.heatedMultiGroup
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Styles(const Node &node) :
      Component{
         BodyText{},
         content.MonteCarlo_cdf,
         content.SnElasticUpScatter,
         content.URR_probabilityTables,
         content.angularDistributionReconstructed,
         content.averageProductData,
         content.crossSectionReconstructed,
         content.evaluated,
         content.griddedCrossSection,
         content.heated,
         content.heatedMultiGroup
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Styles(
      const std::optional<std::vector<styles::MonteCarlo_cdf>> &MonteCarlo_cdf,
      const std::optional<std::vector<styles::SnElasticUpScatter>> &SnElasticUpScatter,
      const std::optional<std::vector<styles::URR_probabilityTables>> &URR_probabilityTables,
      const std::optional<std::vector<styles::AngularDistributionReconstructed>> &angularDistributionReconstructed,
      const std::optional<std::vector<styles::AverageProductData>> &averageProductData,
      const std::optional<std::vector<styles::CrossSectionReconstructed>> &crossSectionReconstructed,
      const std::optional<std::vector<styles::Evaluated>> &evaluated,
      const std::optional<std::vector<styles::GriddedCrossSection>> &griddedCrossSection,
      const std::optional<std::vector<styles::Heated>> &heated,
      const std::optional<std::vector<styles::HeatedMultiGroup>> &heatedMultiGroup
   ) :
      Component{
         BodyText{},
         content.MonteCarlo_cdf,
         content.SnElasticUpScatter,
         content.URR_probabilityTables,
         content.angularDistributionReconstructed,
         content.averageProductData,
         content.crossSectionReconstructed,
         content.evaluated,
         content.griddedCrossSection,
         content.heated,
         content.heatedMultiGroup
      },
      content{
         MonteCarlo_cdf,
         SnElasticUpScatter,
         URR_probabilityTables,
         angularDistributionReconstructed,
         averageProductData,
         crossSectionReconstructed,
         evaluated,
         griddedCrossSection,
         heated,
         heatedMultiGroup
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Styles &operator=(const Styles &) = default;

   // move
   Styles &operator=(Styles &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/styles/Styles/src/custom.hpp"

}; // class Styles

} // namespace styles
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
