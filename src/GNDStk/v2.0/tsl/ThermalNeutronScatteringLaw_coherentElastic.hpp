
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_COHERENTELASTIC
#define NJOY_GNDSTK_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_COHERENTELASTIC

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/tsl/BraggEdges.hpp"
#include "GNDStk/v2.0/tsl/S_table.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// tsl::
// class ThermalNeutronScatteringLaw_coherentElastic
// -----------------------------------------------------------------------------

namespace tsl {

class ThermalNeutronScatteringLaw_coherentElastic : public Component<ThermalNeutronScatteringLaw_coherentElastic> {

   using _t = std::variant<
      tsl::BraggEdges,
      tsl::S_table
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "tsl"; }
   static auto className() { return "ThermalNeutronScatteringLaw_coherentElastic"; }
   static auto GNDSName() { return "thermalNeutronScatteringLaw_coherentElastic"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{"enums::DecayType::Neutron"}
            / Meta<>("pid") |
         enums::Frame{enums::Frame::lab}
            / Meta<>("productFrame") |
         // children
         _t{}
            / --(Child<>("BraggEdges") || Child<>("S_table"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      XMLName pid{"enums::DecayType::Neutron"};
      enums::Frame productFrame{enums::Frame::lab};
      // children - variant
      _t _BraggEdgesS_table;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // pid
   const XMLName &pid() const
      { return content.pid; }
   XMLName &pid()
      { return content.pid; }

   // productFrame
   const enums::Frame &productFrame() const
      { return content.productFrame; }
   enums::Frame &productFrame()
      { return content.productFrame; }

   // _BraggEdgesS_table
   const _t &_BraggEdgesS_table() const
      { return content._BraggEdgesS_table; }
   _t &_BraggEdgesS_table()
      { return content._BraggEdgesS_table; }

   // BraggEdges
   const tsl::BraggEdges *BraggEdges() const
      { return getter<tsl::BraggEdges>(_BraggEdgesS_table(), "BraggEdges"); }
   tsl::BraggEdges *BraggEdges()
      { return getter<tsl::BraggEdges>(_BraggEdgesS_table(), "BraggEdges"); }

   // S_table
   const tsl::S_table *S_table() const
      { return getter<tsl::S_table>(_BraggEdgesS_table(), "S_table"); }
   tsl::S_table *S_table()
      { return getter<tsl::S_table>(_BraggEdgesS_table(), "S_table"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   ThermalNeutronScatteringLaw_coherentElastic &label(const XMLName &obj)
      { label() = obj; return *this; }

   // pid(value)
   ThermalNeutronScatteringLaw_coherentElastic &pid(const XMLName &obj)
      { pid() = obj; return *this; }

   // productFrame(value)
   ThermalNeutronScatteringLaw_coherentElastic &productFrame(const enums::Frame &obj)
      { productFrame() = obj; return *this; }

   // _BraggEdgesS_table(value)
   ThermalNeutronScatteringLaw_coherentElastic &_BraggEdgesS_table(const _t &obj)
      { _BraggEdgesS_table() = obj; return *this; }

   // BraggEdges(value)
   ThermalNeutronScatteringLaw_coherentElastic &BraggEdges(const std::optional<tsl::BraggEdges> &obj)
      { if (obj) _BraggEdgesS_table(obj.value()); return *this; }

   // S_table(value)
   ThermalNeutronScatteringLaw_coherentElastic &S_table(const std::optional<tsl::S_table> &obj)
      { if (obj) _BraggEdgesS_table(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ThermalNeutronScatteringLaw_coherentElastic() :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.productFrame,
         content._BraggEdgesS_table
      }
   {
      Component::finish();
   }

   // copy
   ThermalNeutronScatteringLaw_coherentElastic(const ThermalNeutronScatteringLaw_coherentElastic &other) :
      Component{
         other,
         content.label,
         content.pid,
         content.productFrame,
         content._BraggEdgesS_table
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ThermalNeutronScatteringLaw_coherentElastic(ThermalNeutronScatteringLaw_coherentElastic &&other) :
      Component{
         other,
         content.label,
         content.pid,
         content.productFrame,
         content._BraggEdgesS_table
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ThermalNeutronScatteringLaw_coherentElastic(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.productFrame,
         content._BraggEdgesS_table
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ThermalNeutronScatteringLaw_coherentElastic(
      const XMLName &label,
      const XMLName &pid,
      const enums::Frame &productFrame,
      const _t &_BraggEdgesS_table
   ) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.productFrame,
         content._BraggEdgesS_table
      },
      content{
         label,
         pid,
         productFrame,
         _BraggEdgesS_table
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ThermalNeutronScatteringLaw_coherentElastic &operator=(const ThermalNeutronScatteringLaw_coherentElastic &) = default;

   // move
   ThermalNeutronScatteringLaw_coherentElastic &operator=(ThermalNeutronScatteringLaw_coherentElastic &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/tsl/ThermalNeutronScatteringLaw_coherentElastic/src/custom.hpp"

}; // class ThermalNeutronScatteringLaw_coherentElastic

} // namespace tsl
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
