
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TSL_SELFSCATTERINGKERNEL
#define NJOY_GNDSTK_V2_0_TSL_SELFSCATTERINGKERNEL

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/tsl/SelfScatteringKernelSCTApproximation.hpp"
#include "GNDStk/v2.0/containers/Gridded3d.hpp"
#include "GNDStk/v2.0/tsl/SelfScatteringKernelGaussianApproximation.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// tsl::
// class SelfScatteringKernel
// -----------------------------------------------------------------------------

namespace tsl {

class SelfScatteringKernel : public Component<SelfScatteringKernel> {

   using _t = std::variant<
      containers::Gridded3d,
      tsl::SelfScatteringKernelGaussianApproximation
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "tsl"; }
   static auto className() { return "SelfScatteringKernel"; }
   static auto GNDSName() { return "selfScatteringKernel"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<bool>{}
            / Meta<>("symmetric") |
         // children
         std::optional<tsl::SelfScatteringKernelSCTApproximation>{}
            / --Child<>("selfScatteringKernelSCTApproximation") |
         _t{}
            / --(Child<>("gridded3d") || Child<>("selfScatteringKernelGaussianApproximation"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<bool> symmetric;
      // children
      std::optional<tsl::SelfScatteringKernelSCTApproximation> selfScatteringKernelSCTApproximation;
      // children - variant
      _t _gridded3dselfScatteringKernelGaussianApproximation;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // symmetric
   const std::optional<bool> &symmetric() const
      { return content.symmetric; }
   std::optional<bool> &symmetric()
      { return content.symmetric; }

   // selfScatteringKernelSCTApproximation
   const std::optional<tsl::SelfScatteringKernelSCTApproximation> &selfScatteringKernelSCTApproximation() const
      { return content.selfScatteringKernelSCTApproximation; }
   std::optional<tsl::SelfScatteringKernelSCTApproximation> &selfScatteringKernelSCTApproximation()
      { return content.selfScatteringKernelSCTApproximation; }

   // _gridded3dselfScatteringKernelGaussianApproximation
   const _t &_gridded3dselfScatteringKernelGaussianApproximation() const
      { return content._gridded3dselfScatteringKernelGaussianApproximation; }
   _t &_gridded3dselfScatteringKernelGaussianApproximation()
      { return content._gridded3dselfScatteringKernelGaussianApproximation; }

   // gridded3d
   const containers::Gridded3d *gridded3d() const
      { return getter<containers::Gridded3d>(_gridded3dselfScatteringKernelGaussianApproximation(), "gridded3d"); }
   containers::Gridded3d *gridded3d()
      { return getter<containers::Gridded3d>(_gridded3dselfScatteringKernelGaussianApproximation(), "gridded3d"); }

   // selfScatteringKernelGaussianApproximation
   const tsl::SelfScatteringKernelGaussianApproximation *selfScatteringKernelGaussianApproximation() const
      { return getter<tsl::SelfScatteringKernelGaussianApproximation>(_gridded3dselfScatteringKernelGaussianApproximation(), "selfScatteringKernelGaussianApproximation"); }
   tsl::SelfScatteringKernelGaussianApproximation *selfScatteringKernelGaussianApproximation()
      { return getter<tsl::SelfScatteringKernelGaussianApproximation>(_gridded3dselfScatteringKernelGaussianApproximation(), "selfScatteringKernelGaussianApproximation"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // symmetric(value)
   SelfScatteringKernel &symmetric(const std::optional<bool> &obj)
      { symmetric() = obj; return *this; }

   // selfScatteringKernelSCTApproximation(value)
   SelfScatteringKernel &selfScatteringKernelSCTApproximation(const std::optional<tsl::SelfScatteringKernelSCTApproximation> &obj)
      { selfScatteringKernelSCTApproximation() = obj; return *this; }

   // _gridded3dselfScatteringKernelGaussianApproximation(value)
   SelfScatteringKernel &_gridded3dselfScatteringKernelGaussianApproximation(const _t &obj)
      { _gridded3dselfScatteringKernelGaussianApproximation() = obj; return *this; }

   // gridded3d(value)
   SelfScatteringKernel &gridded3d(const std::optional<containers::Gridded3d> &obj)
      { if (obj) _gridded3dselfScatteringKernelGaussianApproximation(obj.value()); return *this; }

   // selfScatteringKernelGaussianApproximation(value)
   SelfScatteringKernel &selfScatteringKernelGaussianApproximation(const std::optional<tsl::SelfScatteringKernelGaussianApproximation> &obj)
      { if (obj) _gridded3dselfScatteringKernelGaussianApproximation(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   SelfScatteringKernel() :
      Component{
         BodyText{},
         content.symmetric,
         content.selfScatteringKernelSCTApproximation,
         content._gridded3dselfScatteringKernelGaussianApproximation
      }
   {
      Component::finish();
   }

   // copy
   SelfScatteringKernel(const SelfScatteringKernel &other) :
      Component{
         other,
         content.symmetric,
         content.selfScatteringKernelSCTApproximation,
         content._gridded3dselfScatteringKernelGaussianApproximation
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   SelfScatteringKernel(SelfScatteringKernel &&other) :
      Component{
         other,
         content.symmetric,
         content.selfScatteringKernelSCTApproximation,
         content._gridded3dselfScatteringKernelGaussianApproximation
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   SelfScatteringKernel(const Node &node) :
      Component{
         BodyText{},
         content.symmetric,
         content.selfScatteringKernelSCTApproximation,
         content._gridded3dselfScatteringKernelGaussianApproximation
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit SelfScatteringKernel(
      const std::optional<bool> &symmetric,
      const std::optional<tsl::SelfScatteringKernelSCTApproximation> &selfScatteringKernelSCTApproximation,
      const _t &_gridded3dselfScatteringKernelGaussianApproximation
   ) :
      Component{
         BodyText{},
         content.symmetric,
         content.selfScatteringKernelSCTApproximation,
         content._gridded3dselfScatteringKernelGaussianApproximation
      },
      content{
         symmetric,
         selfScatteringKernelSCTApproximation,
         _gridded3dselfScatteringKernelGaussianApproximation
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   SelfScatteringKernel &operator=(const SelfScatteringKernel &) = default;

   // move
   SelfScatteringKernel &operator=(SelfScatteringKernel &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/tsl/SelfScatteringKernel/src/custom.hpp"

}; // class SelfScatteringKernel

} // namespace tsl
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
