
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TSL_COHERENTATOMCROSSSECTION
#define NJOY_GNDSTK_V2_0_TSL_COHERENTATOMCROSSSECTION

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// tsl::
// class CoherentAtomCrossSection
// -----------------------------------------------------------------------------

namespace tsl {

class CoherentAtomCrossSection : public Component<CoherentAtomCrossSection> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "tsl"; }
   static auto className() { return "CoherentAtomCrossSection"; }
   static auto GNDSName() { return "coherentAtomCrossSection"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("unit") |
         Float64{}
            / Meta<>("value")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName unit;
      Float64 value;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // unit
   const XMLName &unit() const
      { return content.unit; }
   XMLName &unit()
      { return content.unit; }

   // value
   const Float64 &value() const
      { return content.value; }
   Float64 &value()
      { return content.value; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // unit(value)
   CoherentAtomCrossSection &unit(const XMLName &obj)
      { unit() = obj; return *this; }

   // value(value)
   CoherentAtomCrossSection &value(const Float64 &obj)
      { value() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CoherentAtomCrossSection() :
      Component{
         BodyText{},
         content.unit,
         content.value
      }
   {
      Component::finish();
   }

   // copy
   CoherentAtomCrossSection(const CoherentAtomCrossSection &other) :
      Component{
         other,
         content.unit,
         content.value
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CoherentAtomCrossSection(CoherentAtomCrossSection &&other) :
      Component{
         other,
         content.unit,
         content.value
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CoherentAtomCrossSection(const Node &node) :
      Component{
         BodyText{},
         content.unit,
         content.value
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit CoherentAtomCrossSection(
      const XMLName &unit,
      const Float64 &value
   ) :
      Component{
         BodyText{},
         content.unit,
         content.value
      },
      content{
         unit,
         value
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CoherentAtomCrossSection &operator=(const CoherentAtomCrossSection &) = default;

   // move
   CoherentAtomCrossSection &operator=(CoherentAtomCrossSection &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/tsl/CoherentAtomCrossSection/src/custom.hpp"

}; // class CoherentAtomCrossSection

} // namespace tsl
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
