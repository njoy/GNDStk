
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTELASTIC
#define NJOY_GNDSTK_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTELASTIC

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/tsl/DebyeWallerIntegral.hpp"
#include "GNDStk/v2.0/tsl/BoundAtomCrossSection.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// tsl::
// class ThermalNeutronScatteringLaw_incoherentElastic
// -----------------------------------------------------------------------------

namespace tsl {

class ThermalNeutronScatteringLaw_incoherentElastic : public Component<ThermalNeutronScatteringLaw_incoherentElastic> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "tsl"; }
   static auto className() { return "ThermalNeutronScatteringLaw_incoherentElastic"; }
   static auto GNDSName() { return "thermalNeutronScatteringLaw_incoherentElastic"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("pid") |
         enums::Frame{}
            / Meta<>("productFrame") |
         // children
         tsl::DebyeWallerIntegral{}
            / --Child<>("DebyeWallerIntegral") |
         tsl::BoundAtomCrossSection{}
            / --Child<>("boundAtomCrossSection")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      XMLName pid;
      enums::Frame productFrame;
      // children
      tsl::DebyeWallerIntegral DebyeWallerIntegral;
      tsl::BoundAtomCrossSection boundAtomCrossSection;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // pid
   const XMLName &pid() const
      { return content.pid; }
   XMLName &pid()
      { return content.pid; }

   // productFrame
   const enums::Frame &productFrame() const
      { return content.productFrame; }
   enums::Frame &productFrame()
      { return content.productFrame; }

   // DebyeWallerIntegral
   const tsl::DebyeWallerIntegral &DebyeWallerIntegral() const
      { return content.DebyeWallerIntegral; }
   tsl::DebyeWallerIntegral &DebyeWallerIntegral()
      { return content.DebyeWallerIntegral; }

   // boundAtomCrossSection
   const tsl::BoundAtomCrossSection &boundAtomCrossSection() const
      { return content.boundAtomCrossSection; }
   tsl::BoundAtomCrossSection &boundAtomCrossSection()
      { return content.boundAtomCrossSection; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   ThermalNeutronScatteringLaw_incoherentElastic &label(const XMLName &obj)
      { label() = obj; return *this; }

   // pid(value)
   ThermalNeutronScatteringLaw_incoherentElastic &pid(const XMLName &obj)
      { pid() = obj; return *this; }

   // productFrame(value)
   ThermalNeutronScatteringLaw_incoherentElastic &productFrame(const enums::Frame &obj)
      { productFrame() = obj; return *this; }

   // DebyeWallerIntegral(value)
   ThermalNeutronScatteringLaw_incoherentElastic &DebyeWallerIntegral(const tsl::DebyeWallerIntegral &obj)
      { DebyeWallerIntegral() = obj; return *this; }

   // boundAtomCrossSection(value)
   ThermalNeutronScatteringLaw_incoherentElastic &boundAtomCrossSection(const tsl::BoundAtomCrossSection &obj)
      { boundAtomCrossSection() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ThermalNeutronScatteringLaw_incoherentElastic() :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.productFrame,
         content.DebyeWallerIntegral,
         content.boundAtomCrossSection
      }
   {
      Component::finish();
   }

   // copy
   ThermalNeutronScatteringLaw_incoherentElastic(const ThermalNeutronScatteringLaw_incoherentElastic &other) :
      Component{
         other,
         content.label,
         content.pid,
         content.productFrame,
         content.DebyeWallerIntegral,
         content.boundAtomCrossSection
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ThermalNeutronScatteringLaw_incoherentElastic(ThermalNeutronScatteringLaw_incoherentElastic &&other) :
      Component{
         other,
         content.label,
         content.pid,
         content.productFrame,
         content.DebyeWallerIntegral,
         content.boundAtomCrossSection
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ThermalNeutronScatteringLaw_incoherentElastic(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.productFrame,
         content.DebyeWallerIntegral,
         content.boundAtomCrossSection
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ThermalNeutronScatteringLaw_incoherentElastic(
      const XMLName &label,
      const XMLName &pid,
      const enums::Frame &productFrame,
      const tsl::DebyeWallerIntegral &DebyeWallerIntegral,
      const tsl::BoundAtomCrossSection &boundAtomCrossSection
   ) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.productFrame,
         content.DebyeWallerIntegral,
         content.boundAtomCrossSection
      },
      content{
         label,
         pid,
         productFrame,
         DebyeWallerIntegral,
         boundAtomCrossSection
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ThermalNeutronScatteringLaw_incoherentElastic &operator=(const ThermalNeutronScatteringLaw_incoherentElastic &) = default;

   // move
   ThermalNeutronScatteringLaw_incoherentElastic &operator=(ThermalNeutronScatteringLaw_incoherentElastic &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/tsl/ThermalNeutronScatteringLaw_incoherentElastic/src/custom.hpp"

}; // class ThermalNeutronScatteringLaw_incoherentElastic

} // namespace tsl
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
