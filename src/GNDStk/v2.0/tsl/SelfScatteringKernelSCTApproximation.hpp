
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TSL_SELFSCATTERINGKERNELSCTAPPROXIMATION
#define NJOY_GNDSTK_V2_0_TSL_SELFSCATTERINGKERNELSCTAPPROXIMATION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/tsl/T_effective.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// tsl::
// class SelfScatteringKernelSCTApproximation
// -----------------------------------------------------------------------------

namespace tsl {

class SelfScatteringKernelSCTApproximation : public Component<SelfScatteringKernelSCTApproximation> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "tsl"; }
   static auto className() { return "SelfScatteringKernelSCTApproximation"; }
   static auto GNDSName() { return "selfScatteringKernelSCTApproximation"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<tsl::T_effective>{}
            / --Child<>("T_effective")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<tsl::T_effective> T_effective;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // T_effective
   const std::optional<tsl::T_effective> &T_effective() const
      { return content.T_effective; }
   std::optional<tsl::T_effective> &T_effective()
      { return content.T_effective; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // T_effective(value)
   SelfScatteringKernelSCTApproximation &T_effective(const std::optional<tsl::T_effective> &obj)
      { T_effective() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   SelfScatteringKernelSCTApproximation() :
      Component{
         BodyText{},
         content.T_effective
      }
   {
      Component::finish();
   }

   // copy
   SelfScatteringKernelSCTApproximation(const SelfScatteringKernelSCTApproximation &other) :
      Component{
         other,
         content.T_effective
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   SelfScatteringKernelSCTApproximation(SelfScatteringKernelSCTApproximation &&other) :
      Component{
         other,
         content.T_effective
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   SelfScatteringKernelSCTApproximation(const Node &node) :
      Component{
         BodyText{},
         content.T_effective
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit SelfScatteringKernelSCTApproximation(
      const std::optional<tsl::T_effective> &T_effective
   ) :
      Component{
         BodyText{},
         content.T_effective
      },
      content{
         T_effective
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   SelfScatteringKernelSCTApproximation &operator=(const SelfScatteringKernelSCTApproximation &) = default;

   // move
   SelfScatteringKernelSCTApproximation &operator=(SelfScatteringKernelSCTApproximation &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/tsl/SelfScatteringKernelSCTApproximation/src/custom.hpp"

}; // class SelfScatteringKernelSCTApproximation

} // namespace tsl
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
