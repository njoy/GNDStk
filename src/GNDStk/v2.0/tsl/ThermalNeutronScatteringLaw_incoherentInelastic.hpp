
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTINELASTIC
#define NJOY_GNDSTK_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTINELASTIC

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/tsl/ScatteringAtoms.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// tsl::
// class ThermalNeutronScatteringLaw_incoherentInelastic
// -----------------------------------------------------------------------------

namespace tsl {

class ThermalNeutronScatteringLaw_incoherentInelastic : public Component<ThermalNeutronScatteringLaw_incoherentInelastic> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "tsl"; }
   static auto className() { return "ThermalNeutronScatteringLaw_incoherentInelastic"; }
   static auto GNDSName() { return "thermalNeutronScatteringLaw_incoherentInelastic"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Defaulted<bool>{true}
            / Meta<>("incoherentApproximation") |
         XMLName{}
            / Meta<>("label") |
         XMLName{"enums::DecayType::Neutron"}
            / Meta<>("pid") |
         XMLName{}
            / Meta<>("primaryScatterer") |
         enums::Frame{enums::Frame::lab}
            / Meta<>("productFrame") |
         // children
         tsl::ScatteringAtoms{}
            / --Child<>("scatteringAtoms")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const bool incoherentApproximation = true;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Defaulted<bool> incoherentApproximation{true};
      XMLName label;
      XMLName pid{"enums::DecayType::Neutron"};
      XMLName primaryScatterer;
      enums::Frame productFrame{enums::Frame::lab};
      // children
      tsl::ScatteringAtoms scatteringAtoms;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // incoherentApproximation
   const Defaulted<bool> &incoherentApproximation() const
      { return content.incoherentApproximation; }
   Defaulted<bool> &incoherentApproximation()
      { return content.incoherentApproximation; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // pid
   const XMLName &pid() const
      { return content.pid; }
   XMLName &pid()
      { return content.pid; }

   // primaryScatterer
   const XMLName &primaryScatterer() const
      { return content.primaryScatterer; }
   XMLName &primaryScatterer()
      { return content.primaryScatterer; }

   // productFrame
   const enums::Frame &productFrame() const
      { return content.productFrame; }
   enums::Frame &productFrame()
      { return content.productFrame; }

   // scatteringAtoms
   const tsl::ScatteringAtoms &scatteringAtoms() const
      { return content.scatteringAtoms; }
   tsl::ScatteringAtoms &scatteringAtoms()
      { return content.scatteringAtoms; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // incoherentApproximation(value)
   ThermalNeutronScatteringLaw_incoherentInelastic &incoherentApproximation(const Defaulted<bool> &obj)
      { content.incoherentApproximation = obj; return *this; }
   ThermalNeutronScatteringLaw_incoherentInelastic &incoherentApproximation(const std::optional<bool> &obj)
      { content.incoherentApproximation = obj; return *this; }

   // label(value)
   ThermalNeutronScatteringLaw_incoherentInelastic &label(const XMLName &obj)
      { label() = obj; return *this; }

   // pid(value)
   ThermalNeutronScatteringLaw_incoherentInelastic &pid(const XMLName &obj)
      { pid() = obj; return *this; }

   // primaryScatterer(value)
   ThermalNeutronScatteringLaw_incoherentInelastic &primaryScatterer(const XMLName &obj)
      { primaryScatterer() = obj; return *this; }

   // productFrame(value)
   ThermalNeutronScatteringLaw_incoherentInelastic &productFrame(const enums::Frame &obj)
      { productFrame() = obj; return *this; }

   // scatteringAtoms(value)
   ThermalNeutronScatteringLaw_incoherentInelastic &scatteringAtoms(const tsl::ScatteringAtoms &obj)
      { scatteringAtoms() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ThermalNeutronScatteringLaw_incoherentInelastic() :
      Component{
         BodyText{},
         content.incoherentApproximation,
         content.label,
         content.pid,
         content.primaryScatterer,
         content.productFrame,
         content.scatteringAtoms
      }
   {
      Component::finish();
   }

   // copy
   ThermalNeutronScatteringLaw_incoherentInelastic(const ThermalNeutronScatteringLaw_incoherentInelastic &other) :
      Component{
         other,
         content.incoherentApproximation,
         content.label,
         content.pid,
         content.primaryScatterer,
         content.productFrame,
         content.scatteringAtoms
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ThermalNeutronScatteringLaw_incoherentInelastic(ThermalNeutronScatteringLaw_incoherentInelastic &&other) :
      Component{
         other,
         content.incoherentApproximation,
         content.label,
         content.pid,
         content.primaryScatterer,
         content.productFrame,
         content.scatteringAtoms
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ThermalNeutronScatteringLaw_incoherentInelastic(const Node &node) :
      Component{
         BodyText{},
         content.incoherentApproximation,
         content.label,
         content.pid,
         content.primaryScatterer,
         content.productFrame,
         content.scatteringAtoms
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit ThermalNeutronScatteringLaw_incoherentInelastic(
      const std::optional<bool> &incoherentApproximation,
      const XMLName &label,
      const XMLName &pid,
      const XMLName &primaryScatterer,
      const enums::Frame &productFrame,
      const tsl::ScatteringAtoms &scatteringAtoms
   ) :
      Component{
         BodyText{},
         content.incoherentApproximation,
         content.label,
         content.pid,
         content.primaryScatterer,
         content.productFrame,
         content.scatteringAtoms
      },
      content{
         Defaulted<bool>(defaults.incoherentApproximation,incoherentApproximation),
         label,
         pid,
         primaryScatterer,
         productFrame,
         scatteringAtoms
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ThermalNeutronScatteringLaw_incoherentInelastic &operator=(const ThermalNeutronScatteringLaw_incoherentInelastic &) = default;

   // move
   ThermalNeutronScatteringLaw_incoherentInelastic &operator=(ThermalNeutronScatteringLaw_incoherentInelastic &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/tsl/ThermalNeutronScatteringLaw_incoherentInelastic/src/custom.hpp"

}; // class ThermalNeutronScatteringLaw_incoherentInelastic

} // namespace tsl
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
