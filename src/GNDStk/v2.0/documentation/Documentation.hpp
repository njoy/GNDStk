
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_DOCUMENTATION_DOCUMENTATION
#define NJOY_GNDSTK_V2_0_DOCUMENTATION_DOCUMENTATION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/documentation/Acknowledgements.hpp"
#include "GNDStk/v2.0/documentation/Authors.hpp"
#include "GNDStk/v2.0/documentation/Bibliography.hpp"
#include "GNDStk/v2.0/documentation/Collaborations.hpp"
#include "GNDStk/v2.0/documentation/ComputerCodes.hpp"
#include "GNDStk/v2.0/documentation/Contributors.hpp"
#include "GNDStk/v2.0/documentation/Copyright.hpp"
#include "GNDStk/v2.0/documentation/Dates.hpp"
#include "GNDStk/v2.0/documentation/ExperimentalDataSets.hpp"
#include "GNDStk/v2.0/documentation/Keywords.hpp"
#include "GNDStk/v2.0/documentation/RelatedItems.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// documentation::
// class Documentation
// -----------------------------------------------------------------------------

namespace documentation {

class Documentation : public Component<Documentation> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "documentation"; }
   static auto className() { return "Documentation"; }
   static auto GNDSName() { return "documentation"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<UTF8Text>{}
            / Meta<>("doi") |
         std::optional<std::string>{}
            / Meta<>("publicationDate") |
         std::optional<UTF8Text>{}
            / Meta<>("version") |
         // children
         std::optional<documentation::Acknowledgements>{}
            / --Child<>("acknowledgements") |
         documentation::Authors{}
            / --Child<>("authors") |
         std::optional<documentation::Bibliography>{}
            / --Child<>("bibliography") |
         std::optional<documentation::Collaborations>{}
            / --Child<>("collaborations") |
         std::optional<documentation::ComputerCodes>{}
            / --Child<>("computerCodes") |
         std::optional<documentation::Contributors>{}
            / --Child<>("contributors") |
         std::optional<documentation::Copyright>{}
            / --Child<>("copyright") |
         documentation::Dates{}
            / --Child<>("dates") |
         std::optional<documentation::ExperimentalDataSets>{}
            / --Child<>("experimentalDataSets") |
         std::optional<documentation::Keywords>{}
            / --Child<>("keywords") |
         std::optional<documentation::RelatedItems>{}
            / --Child<>("relatedItems")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<UTF8Text> doi;
      std::optional<std::string> publicationDate;
      std::optional<UTF8Text> version;
      // children
      std::optional<documentation::Acknowledgements> acknowledgements;
      documentation::Authors authors;
      std::optional<documentation::Bibliography> bibliography;
      std::optional<documentation::Collaborations> collaborations;
      std::optional<documentation::ComputerCodes> computerCodes;
      std::optional<documentation::Contributors> contributors;
      std::optional<documentation::Copyright> copyright;
      documentation::Dates dates;
      std::optional<documentation::ExperimentalDataSets> experimentalDataSets;
      std::optional<documentation::Keywords> keywords;
      std::optional<documentation::RelatedItems> relatedItems;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // doi
   const std::optional<UTF8Text> &doi() const
      { return content.doi; }
   std::optional<UTF8Text> &doi()
      { return content.doi; }

   // publicationDate
   const std::optional<std::string> &publicationDate() const
      { return content.publicationDate; }
   std::optional<std::string> &publicationDate()
      { return content.publicationDate; }

   // version
   const std::optional<UTF8Text> &version() const
      { return content.version; }
   std::optional<UTF8Text> &version()
      { return content.version; }

   // acknowledgements
   const std::optional<documentation::Acknowledgements> &acknowledgements() const
      { return content.acknowledgements; }
   std::optional<documentation::Acknowledgements> &acknowledgements()
      { return content.acknowledgements; }

   // authors
   const documentation::Authors &authors() const
      { return content.authors; }
   documentation::Authors &authors()
      { return content.authors; }

   // bibliography
   const std::optional<documentation::Bibliography> &bibliography() const
      { return content.bibliography; }
   std::optional<documentation::Bibliography> &bibliography()
      { return content.bibliography; }

   // collaborations
   const std::optional<documentation::Collaborations> &collaborations() const
      { return content.collaborations; }
   std::optional<documentation::Collaborations> &collaborations()
      { return content.collaborations; }

   // computerCodes
   const std::optional<documentation::ComputerCodes> &computerCodes() const
      { return content.computerCodes; }
   std::optional<documentation::ComputerCodes> &computerCodes()
      { return content.computerCodes; }

   // contributors
   const std::optional<documentation::Contributors> &contributors() const
      { return content.contributors; }
   std::optional<documentation::Contributors> &contributors()
      { return content.contributors; }

   // copyright
   const std::optional<documentation::Copyright> &copyright() const
      { return content.copyright; }
   std::optional<documentation::Copyright> &copyright()
      { return content.copyright; }

   // dates
   const documentation::Dates &dates() const
      { return content.dates; }
   documentation::Dates &dates()
      { return content.dates; }

   // experimentalDataSets
   const std::optional<documentation::ExperimentalDataSets> &experimentalDataSets() const
      { return content.experimentalDataSets; }
   std::optional<documentation::ExperimentalDataSets> &experimentalDataSets()
      { return content.experimentalDataSets; }

   // keywords
   const std::optional<documentation::Keywords> &keywords() const
      { return content.keywords; }
   std::optional<documentation::Keywords> &keywords()
      { return content.keywords; }

   // relatedItems
   const std::optional<documentation::RelatedItems> &relatedItems() const
      { return content.relatedItems; }
   std::optional<documentation::RelatedItems> &relatedItems()
      { return content.relatedItems; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // doi(value)
   Documentation &doi(const std::optional<UTF8Text> &obj)
      { doi() = obj; return *this; }

   // publicationDate(value)
   Documentation &publicationDate(const std::optional<std::string> &obj)
      { publicationDate() = obj; return *this; }

   // version(value)
   Documentation &version(const std::optional<UTF8Text> &obj)
      { version() = obj; return *this; }

   // acknowledgements(value)
   Documentation &acknowledgements(const std::optional<documentation::Acknowledgements> &obj)
      { acknowledgements() = obj; return *this; }

   // authors(value)
   Documentation &authors(const documentation::Authors &obj)
      { authors() = obj; return *this; }

   // bibliography(value)
   Documentation &bibliography(const std::optional<documentation::Bibliography> &obj)
      { bibliography() = obj; return *this; }

   // collaborations(value)
   Documentation &collaborations(const std::optional<documentation::Collaborations> &obj)
      { collaborations() = obj; return *this; }

   // computerCodes(value)
   Documentation &computerCodes(const std::optional<documentation::ComputerCodes> &obj)
      { computerCodes() = obj; return *this; }

   // contributors(value)
   Documentation &contributors(const std::optional<documentation::Contributors> &obj)
      { contributors() = obj; return *this; }

   // copyright(value)
   Documentation &copyright(const std::optional<documentation::Copyright> &obj)
      { copyright() = obj; return *this; }

   // dates(value)
   Documentation &dates(const documentation::Dates &obj)
      { dates() = obj; return *this; }

   // experimentalDataSets(value)
   Documentation &experimentalDataSets(const std::optional<documentation::ExperimentalDataSets> &obj)
      { experimentalDataSets() = obj; return *this; }

   // keywords(value)
   Documentation &keywords(const std::optional<documentation::Keywords> &obj)
      { keywords() = obj; return *this; }

   // relatedItems(value)
   Documentation &relatedItems(const std::optional<documentation::RelatedItems> &obj)
      { relatedItems() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Documentation() :
      Component{
         BodyText{},
         content.doi,
         content.publicationDate,
         content.version,
         content.acknowledgements,
         content.authors,
         content.bibliography,
         content.collaborations,
         content.computerCodes,
         content.contributors,
         content.copyright,
         content.dates,
         content.experimentalDataSets,
         content.keywords,
         content.relatedItems
      }
   {
      Component::finish();
   }

   // copy
   Documentation(const Documentation &other) :
      Component{
         other,
         content.doi,
         content.publicationDate,
         content.version,
         content.acknowledgements,
         content.authors,
         content.bibliography,
         content.collaborations,
         content.computerCodes,
         content.contributors,
         content.copyright,
         content.dates,
         content.experimentalDataSets,
         content.keywords,
         content.relatedItems
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Documentation(Documentation &&other) :
      Component{
         other,
         content.doi,
         content.publicationDate,
         content.version,
         content.acknowledgements,
         content.authors,
         content.bibliography,
         content.collaborations,
         content.computerCodes,
         content.contributors,
         content.copyright,
         content.dates,
         content.experimentalDataSets,
         content.keywords,
         content.relatedItems
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Documentation(const Node &node) :
      Component{
         BodyText{},
         content.doi,
         content.publicationDate,
         content.version,
         content.acknowledgements,
         content.authors,
         content.bibliography,
         content.collaborations,
         content.computerCodes,
         content.contributors,
         content.copyright,
         content.dates,
         content.experimentalDataSets,
         content.keywords,
         content.relatedItems
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Documentation(
      const std::optional<UTF8Text> &doi,
      const std::optional<std::string> &publicationDate,
      const std::optional<UTF8Text> &version,
      const std::optional<documentation::Acknowledgements> &acknowledgements,
      const documentation::Authors &authors,
      const std::optional<documentation::Bibliography> &bibliography,
      const std::optional<documentation::Collaborations> &collaborations,
      const std::optional<documentation::ComputerCodes> &computerCodes,
      const std::optional<documentation::Contributors> &contributors,
      const std::optional<documentation::Copyright> &copyright,
      const documentation::Dates &dates,
      const std::optional<documentation::ExperimentalDataSets> &experimentalDataSets,
      const std::optional<documentation::Keywords> &keywords,
      const std::optional<documentation::RelatedItems> &relatedItems
   ) :
      Component{
         BodyText{},
         content.doi,
         content.publicationDate,
         content.version,
         content.acknowledgements,
         content.authors,
         content.bibliography,
         content.collaborations,
         content.computerCodes,
         content.contributors,
         content.copyright,
         content.dates,
         content.experimentalDataSets,
         content.keywords,
         content.relatedItems
      },
      content{
         doi,
         publicationDate,
         version,
         acknowledgements,
         authors,
         bibliography,
         collaborations,
         computerCodes,
         contributors,
         copyright,
         dates,
         experimentalDataSets,
         keywords,
         relatedItems
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Documentation &operator=(const Documentation &) = default;

   // move
   Documentation &operator=(Documentation &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/documentation/Documentation/src/custom.hpp"

}; // class Documentation

} // namespace documentation
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
