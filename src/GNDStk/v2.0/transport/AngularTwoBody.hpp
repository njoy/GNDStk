
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_ANGULARTWOBODY
#define NJOY_GNDSTK_V2_0_TRANSPORT_ANGULARTWOBODY

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/XYs2d.hpp"
#include "GNDStk/v2.0/transport/Isotropic2d.hpp"
#include "GNDStk/v2.0/transport/Recoil.hpp"
#include "GNDStk/v2.0/containers/Regions2d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class AngularTwoBody
// -----------------------------------------------------------------------------

namespace transport {

class AngularTwoBody : public Component<AngularTwoBody> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "AngularTwoBody"; }
   static auto GNDSName() { return "angularTwoBody"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("productFrame") |
         // children
         std::optional<containers::XYs2d>{}
            / --Child<>("XYs2d") |
         std::optional<transport::Isotropic2d>{}
            / --Child<>("isotropic2d") |
         std::optional<transport::Recoil>{}
            / --Child<>("recoil") |
         std::optional<containers::Regions2d>{}
            / --Child<>("regions2d")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      XMLName productFrame;
      // children
      std::optional<containers::XYs2d> XYs2d;
      std::optional<transport::Isotropic2d> isotropic2d;
      std::optional<transport::Recoil> recoil;
      std::optional<containers::Regions2d> regions2d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // productFrame
   const XMLName &productFrame() const
      { return content.productFrame; }
   XMLName &productFrame()
      { return content.productFrame; }

   // XYs2d
   const std::optional<containers::XYs2d> &XYs2d() const
      { return content.XYs2d; }
   std::optional<containers::XYs2d> &XYs2d()
      { return content.XYs2d; }

   // isotropic2d
   const std::optional<transport::Isotropic2d> &isotropic2d() const
      { return content.isotropic2d; }
   std::optional<transport::Isotropic2d> &isotropic2d()
      { return content.isotropic2d; }

   // recoil
   const std::optional<transport::Recoil> &recoil() const
      { return content.recoil; }
   std::optional<transport::Recoil> &recoil()
      { return content.recoil; }

   // regions2d
   const std::optional<containers::Regions2d> &regions2d() const
      { return content.regions2d; }
   std::optional<containers::Regions2d> &regions2d()
      { return content.regions2d; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   AngularTwoBody &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // productFrame(value)
   AngularTwoBody &productFrame(const XMLName &obj)
      { productFrame() = obj; return *this; }

   // XYs2d(value)
   AngularTwoBody &XYs2d(const std::optional<containers::XYs2d> &obj)
      { XYs2d() = obj; return *this; }

   // isotropic2d(value)
   AngularTwoBody &isotropic2d(const std::optional<transport::Isotropic2d> &obj)
      { isotropic2d() = obj; return *this; }

   // recoil(value)
   AngularTwoBody &recoil(const std::optional<transport::Recoil> &obj)
      { recoil() = obj; return *this; }

   // regions2d(value)
   AngularTwoBody &regions2d(const std::optional<containers::Regions2d> &obj)
      { regions2d() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   AngularTwoBody() :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.XYs2d,
         content.isotropic2d,
         content.recoil,
         content.regions2d
      }
   {
      Component::finish();
   }

   // copy
   AngularTwoBody(const AngularTwoBody &other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.XYs2d,
         content.isotropic2d,
         content.recoil,
         content.regions2d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   AngularTwoBody(AngularTwoBody &&other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.XYs2d,
         content.isotropic2d,
         content.recoil,
         content.regions2d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   AngularTwoBody(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.XYs2d,
         content.isotropic2d,
         content.recoil,
         content.regions2d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit AngularTwoBody(
      const std::optional<XMLName> &label,
      const XMLName &productFrame,
      const std::optional<containers::XYs2d> &XYs2d,
      const std::optional<transport::Isotropic2d> &isotropic2d,
      const std::optional<transport::Recoil> &recoil,
      const std::optional<containers::Regions2d> &regions2d
   ) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.XYs2d,
         content.isotropic2d,
         content.recoil,
         content.regions2d
      },
      content{
         label,
         productFrame,
         XYs2d,
         isotropic2d,
         recoil,
         regions2d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   AngularTwoBody &operator=(const AngularTwoBody &) = default;

   // move
   AngularTwoBody &operator=(AngularTwoBody &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/AngularTwoBody/src/custom.hpp"

}; // class AngularTwoBody

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
