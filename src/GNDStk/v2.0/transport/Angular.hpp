
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_ANGULAR
#define NJOY_GNDSTK_V2_0_TRANSPORT_ANGULAR

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/XYs2d.hpp"
#include "GNDStk/v2.0/transport/Forward.hpp"
#include "GNDStk/v2.0/transport/Isotropic2d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class Angular
// -----------------------------------------------------------------------------

namespace transport {

class Angular : public Component<Angular> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "Angular"; }
   static auto GNDSName() { return "angular"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<containers::XYs2d>{}
            / --Child<>("XYs2d") |
         std::optional<transport::Forward>{}
            / --Child<>("forward") |
         std::optional<transport::Isotropic2d>{}
            / --Child<>("isotropic2d")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<containers::XYs2d> XYs2d;
      std::optional<transport::Forward> forward;
      std::optional<transport::Isotropic2d> isotropic2d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // XYs2d
   const std::optional<containers::XYs2d> &XYs2d() const
      { return content.XYs2d; }
   std::optional<containers::XYs2d> &XYs2d()
      { return content.XYs2d; }

   // forward
   const std::optional<transport::Forward> &forward() const
      { return content.forward; }
   std::optional<transport::Forward> &forward()
      { return content.forward; }

   // isotropic2d
   const std::optional<transport::Isotropic2d> &isotropic2d() const
      { return content.isotropic2d; }
   std::optional<transport::Isotropic2d> &isotropic2d()
      { return content.isotropic2d; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // XYs2d(value)
   Angular &XYs2d(const std::optional<containers::XYs2d> &obj)
      { XYs2d() = obj; return *this; }

   // forward(value)
   Angular &forward(const std::optional<transport::Forward> &obj)
      { forward() = obj; return *this; }

   // isotropic2d(value)
   Angular &isotropic2d(const std::optional<transport::Isotropic2d> &obj)
      { isotropic2d() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Angular() :
      Component{
         BodyText{},
         content.XYs2d,
         content.forward,
         content.isotropic2d
      }
   {
      Component::finish();
   }

   // copy
   Angular(const Angular &other) :
      Component{
         other,
         content.XYs2d,
         content.forward,
         content.isotropic2d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Angular(Angular &&other) :
      Component{
         other,
         content.XYs2d,
         content.forward,
         content.isotropic2d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Angular(const Node &node) :
      Component{
         BodyText{},
         content.XYs2d,
         content.forward,
         content.isotropic2d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Angular(
      const std::optional<containers::XYs2d> &XYs2d,
      const std::optional<transport::Forward> &forward,
      const std::optional<transport::Isotropic2d> &isotropic2d
   ) :
      Component{
         BodyText{},
         content.XYs2d,
         content.forward,
         content.isotropic2d
      },
      content{
         XYs2d,
         forward,
         isotropic2d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Angular &operator=(const Angular &) = default;

   // move
   Angular &operator=(Angular &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/Angular/src/custom.hpp"

}; // class Angular

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
