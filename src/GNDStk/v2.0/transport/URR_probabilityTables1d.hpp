
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_URR_PROBABILITYTABLES1D
#define NJOY_GNDSTK_V2_0_TRANSPORT_URR_PROBABILITYTABLES1D

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/XYs2d.hpp"
#include "GNDStk/v2.0/containers/Regions2d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class URR_probabilityTables1d
// -----------------------------------------------------------------------------

namespace transport {

class URR_probabilityTables1d : public Component<URR_probabilityTables1d> {

   using _t = std::variant<
      containers::XYs2d,
      containers::Regions2d
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "URR_probabilityTables1d"; }
   static auto GNDSName() { return "URR_probabilityTables1d"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         _t{}
            / --(Child<>("XYs2d") || Child<>("regions2d"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      // children - variant
      _t _XYs2dregions2d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // _XYs2dregions2d
   const _t &_XYs2dregions2d() const
      { return content._XYs2dregions2d; }
   _t &_XYs2dregions2d()
      { return content._XYs2dregions2d; }

   // XYs2d
   const containers::XYs2d *XYs2d() const
      { return getter<containers::XYs2d>(_XYs2dregions2d(), "XYs2d"); }
   containers::XYs2d *XYs2d()
      { return getter<containers::XYs2d>(_XYs2dregions2d(), "XYs2d"); }

   // regions2d
   const containers::Regions2d *regions2d() const
      { return getter<containers::Regions2d>(_XYs2dregions2d(), "regions2d"); }
   containers::Regions2d *regions2d()
      { return getter<containers::Regions2d>(_XYs2dregions2d(), "regions2d"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   URR_probabilityTables1d &label(const XMLName &obj)
      { label() = obj; return *this; }

   // _XYs2dregions2d(value)
   URR_probabilityTables1d &_XYs2dregions2d(const _t &obj)
      { _XYs2dregions2d() = obj; return *this; }

   // XYs2d(value)
   URR_probabilityTables1d &XYs2d(const std::optional<containers::XYs2d> &obj)
      { if (obj) _XYs2dregions2d(obj.value()); return *this; }

   // regions2d(value)
   URR_probabilityTables1d &regions2d(const std::optional<containers::Regions2d> &obj)
      { if (obj) _XYs2dregions2d(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   URR_probabilityTables1d() :
      Component{
         BodyText{},
         content.label,
         content._XYs2dregions2d
      }
   {
      Component::finish();
   }

   // copy
   URR_probabilityTables1d(const URR_probabilityTables1d &other) :
      Component{
         other,
         content.label,
         content._XYs2dregions2d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   URR_probabilityTables1d(URR_probabilityTables1d &&other) :
      Component{
         other,
         content.label,
         content._XYs2dregions2d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   URR_probabilityTables1d(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content._XYs2dregions2d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit URR_probabilityTables1d(
      const XMLName &label,
      const _t &_XYs2dregions2d
   ) :
      Component{
         BodyText{},
         content.label,
         content._XYs2dregions2d
      },
      content{
         label,
         _XYs2dregions2d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   URR_probabilityTables1d &operator=(const URR_probabilityTables1d &) = default;

   // move
   URR_probabilityTables1d &operator=(URR_probabilityTables1d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/URR_probabilityTables1d/src/custom.hpp"

}; // class URR_probabilityTables1d

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
