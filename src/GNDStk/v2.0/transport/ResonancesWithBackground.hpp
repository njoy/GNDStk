
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_RESONANCESWITHBACKGROUND
#define NJOY_GNDSTK_V2_0_TRANSPORT_RESONANCESWITHBACKGROUND

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/Background.hpp"
#include "GNDStk/v2.0/transport/Resonances.hpp"
#include "GNDStk/v2.0/unknownNamespace/Uncertainty.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class ResonancesWithBackground
// -----------------------------------------------------------------------------

namespace transport {

class ResonancesWithBackground : public Component<ResonancesWithBackground> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "ResonancesWithBackground"; }
   static auto GNDSName() { return "resonancesWithBackground"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         transport::Background{}
            / --Child<>("background") |
         transport::Resonances{}
            / --Child<>("resonances") |
         std::optional<unknownNamespace::Uncertainty>{}
            / --Child<>("uncertainty")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      // children
      transport::Background background;
      transport::Resonances resonances;
      std::optional<unknownNamespace::Uncertainty> uncertainty;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // background
   const transport::Background &background() const
      { return content.background; }
   transport::Background &background()
      { return content.background; }

   // resonances
   const transport::Resonances &resonances() const
      { return content.resonances; }
   transport::Resonances &resonances()
      { return content.resonances; }

   // uncertainty
   const std::optional<unknownNamespace::Uncertainty> &uncertainty() const
      { return content.uncertainty; }
   std::optional<unknownNamespace::Uncertainty> &uncertainty()
      { return content.uncertainty; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   ResonancesWithBackground &label(const XMLName &obj)
      { label() = obj; return *this; }

   // background(value)
   ResonancesWithBackground &background(const transport::Background &obj)
      { background() = obj; return *this; }

   // resonances(value)
   ResonancesWithBackground &resonances(const transport::Resonances &obj)
      { resonances() = obj; return *this; }

   // uncertainty(value)
   ResonancesWithBackground &uncertainty(const std::optional<unknownNamespace::Uncertainty> &obj)
      { uncertainty() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ResonancesWithBackground() :
      Component{
         BodyText{},
         content.label,
         content.background,
         content.resonances,
         content.uncertainty
      }
   {
      Component::finish();
   }

   // copy
   ResonancesWithBackground(const ResonancesWithBackground &other) :
      Component{
         other,
         content.label,
         content.background,
         content.resonances,
         content.uncertainty
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ResonancesWithBackground(ResonancesWithBackground &&other) :
      Component{
         other,
         content.label,
         content.background,
         content.resonances,
         content.uncertainty
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ResonancesWithBackground(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.background,
         content.resonances,
         content.uncertainty
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ResonancesWithBackground(
      const XMLName &label,
      const transport::Background &background,
      const transport::Resonances &resonances,
      const std::optional<unknownNamespace::Uncertainty> &uncertainty
   ) :
      Component{
         BodyText{},
         content.label,
         content.background,
         content.resonances,
         content.uncertainty
      },
      content{
         label,
         background,
         resonances,
         uncertainty
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ResonancesWithBackground &operator=(const ResonancesWithBackground &) = default;

   // move
   ResonancesWithBackground &operator=(ResonancesWithBackground &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/ResonancesWithBackground/src/custom.hpp"

}; // class ResonancesWithBackground

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
