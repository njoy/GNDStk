
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_MULTIPLICITYSUM
#define NJOY_GNDSTK_V2_0_TRANSPORT_MULTIPLICITYSUM

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/Multiplicity.hpp"
#include "GNDStk/v2.0/transport/Summands.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class MultiplicitySum
// -----------------------------------------------------------------------------

namespace transport {

class MultiplicitySum : public Component<MultiplicitySum> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "MultiplicitySum"; }
   static auto GNDSName() { return "multiplicitySum"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<Integer32>{}
            / Meta<>("ENDF_MT") |
         XMLName{}
            / Meta<>("label") |
         // children
         transport::Multiplicity{}
            / --Child<>("multiplicity") |
         transport::Summands{}
            / --Child<>("summands")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<Integer32> ENDF_MT;
      XMLName label;
      // children
      transport::Multiplicity multiplicity;
      transport::Summands summands;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // ENDF_MT
   const std::optional<Integer32> &ENDF_MT() const
      { return content.ENDF_MT; }
   std::optional<Integer32> &ENDF_MT()
      { return content.ENDF_MT; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // multiplicity
   const transport::Multiplicity &multiplicity() const
      { return content.multiplicity; }
   transport::Multiplicity &multiplicity()
      { return content.multiplicity; }

   // summands
   const transport::Summands &summands() const
      { return content.summands; }
   transport::Summands &summands()
      { return content.summands; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // ENDF_MT(value)
   MultiplicitySum &ENDF_MT(const std::optional<Integer32> &obj)
      { ENDF_MT() = obj; return *this; }

   // label(value)
   MultiplicitySum &label(const XMLName &obj)
      { label() = obj; return *this; }

   // multiplicity(value)
   MultiplicitySum &multiplicity(const transport::Multiplicity &obj)
      { multiplicity() = obj; return *this; }

   // summands(value)
   MultiplicitySum &summands(const transport::Summands &obj)
      { summands() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   MultiplicitySum() :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.label,
         content.multiplicity,
         content.summands
      }
   {
      Component::finish();
   }

   // copy
   MultiplicitySum(const MultiplicitySum &other) :
      Component{
         other,
         content.ENDF_MT,
         content.label,
         content.multiplicity,
         content.summands
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   MultiplicitySum(MultiplicitySum &&other) :
      Component{
         other,
         content.ENDF_MT,
         content.label,
         content.multiplicity,
         content.summands
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   MultiplicitySum(const Node &node) :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.label,
         content.multiplicity,
         content.summands
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit MultiplicitySum(
      const std::optional<Integer32> &ENDF_MT,
      const XMLName &label,
      const transport::Multiplicity &multiplicity,
      const transport::Summands &summands
   ) :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.label,
         content.multiplicity,
         content.summands
      },
      content{
         ENDF_MT,
         label,
         multiplicity,
         summands
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   MultiplicitySum &operator=(const MultiplicitySum &) = default;

   // move
   MultiplicitySum &operator=(MultiplicitySum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/MultiplicitySum/src/custom.hpp"

}; // class MultiplicitySum

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
