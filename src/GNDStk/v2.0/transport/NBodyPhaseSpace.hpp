
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_NBODYPHASESPACE
#define NJOY_GNDSTK_V2_0_TRANSPORT_NBODYPHASESPACE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/ambiguousNamespace/Mass.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class NBodyPhaseSpace
// -----------------------------------------------------------------------------

namespace transport {

class NBodyPhaseSpace : public Component<NBodyPhaseSpace> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "NBodyPhaseSpace"; }
   static auto GNDSName() { return "NBodyPhaseSpace"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<Integer32>{}
            / Meta<>("numberOfProducts") |
         // children
         std::optional<ambiguousNamespace::Mass>{}
            / --Child<>("mass")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<Integer32> numberOfProducts;
      // children
      std::optional<ambiguousNamespace::Mass> mass;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // numberOfProducts
   const std::optional<Integer32> &numberOfProducts() const
      { return content.numberOfProducts; }
   std::optional<Integer32> &numberOfProducts()
      { return content.numberOfProducts; }

   // mass
   const std::optional<ambiguousNamespace::Mass> &mass() const
      { return content.mass; }
   std::optional<ambiguousNamespace::Mass> &mass()
      { return content.mass; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // numberOfProducts(value)
   NBodyPhaseSpace &numberOfProducts(const std::optional<Integer32> &obj)
      { numberOfProducts() = obj; return *this; }

   // mass(value)
   NBodyPhaseSpace &mass(const std::optional<ambiguousNamespace::Mass> &obj)
      { mass() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   NBodyPhaseSpace() :
      Component{
         BodyText{},
         content.numberOfProducts,
         content.mass
      }
   {
      Component::finish();
   }

   // copy
   NBodyPhaseSpace(const NBodyPhaseSpace &other) :
      Component{
         other,
         content.numberOfProducts,
         content.mass
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   NBodyPhaseSpace(NBodyPhaseSpace &&other) :
      Component{
         other,
         content.numberOfProducts,
         content.mass
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   NBodyPhaseSpace(const Node &node) :
      Component{
         BodyText{},
         content.numberOfProducts,
         content.mass
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit NBodyPhaseSpace(
      const std::optional<Integer32> &numberOfProducts,
      const std::optional<ambiguousNamespace::Mass> &mass
   ) :
      Component{
         BodyText{},
         content.numberOfProducts,
         content.mass
      },
      content{
         numberOfProducts,
         mass
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   NBodyPhaseSpace &operator=(const NBodyPhaseSpace &) = default;

   // move
   NBodyPhaseSpace &operator=(NBodyPhaseSpace &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/NBodyPhaseSpace/src/custom.hpp"

}; // class NBodyPhaseSpace

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
