
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_REACTIONSUITE
#define NJOY_GNDSTK_V2_0_TRANSPORT_REACTIONSUITE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/PoPs.hpp"
#include "GNDStk/v2.0/appData/ApplicationData.hpp"
#include "GNDStk/v2.0/common/ExternalFiles.hpp"
#include "GNDStk/v2.0/fissionTransport/FissionComponents.hpp"
#include "GNDStk/v2.0/transport/IncompleteReactions.hpp"
#include "GNDStk/v2.0/transport/OrphanProducts.hpp"
#include "GNDStk/v2.0/transport/Productions.hpp"
#include "GNDStk/v2.0/transport/Reactions.hpp"
#include "GNDStk/v2.0/transport/Resonances.hpp"
#include "GNDStk/v2.0/styles/Styles.hpp"
#include "GNDStk/v2.0/transport/Sums.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class ReactionSuite
// -----------------------------------------------------------------------------

namespace transport {

class ReactionSuite : public Component<ReactionSuite> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "ReactionSuite"; }
   static auto GNDSName() { return "reactionSuite"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("evaluation") |
         XMLName{}
            / Meta<>("format") |
         enums::Interaction{}
            / Meta<>("interaction") |
         XMLName{}
            / Meta<>("projectile") |
         enums::Frame{}
            / Meta<>("projectileFrame") |
         XMLName{}
            / Meta<>("target") |
         // children
         pops::PoPs{}
            / --Child<>("PoPs") |
         std::optional<appData::ApplicationData>{}
            / --Child<>("applicationData") |
         std::optional<common::ExternalFiles>{}
            / --Child<>("externalFiles") |
         std::optional<fissionTransport::FissionComponents>{}
            / --Child<>("fissionComponents") |
         std::optional<transport::IncompleteReactions>{}
            / --Child<>("incompleteReactions") |
         std::optional<transport::OrphanProducts>{}
            / --Child<>("orphanProducts") |
         std::optional<transport::Productions>{}
            / --Child<>("productions") |
         std::optional<transport::Reactions>{}
            / --Child<>("reactions") |
         std::optional<transport::Resonances>{}
            / --Child<>("resonances") |
         styles::Styles{}
            / --Child<>("styles") |
         std::optional<transport::Sums>{}
            / --Child<>("sums")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName evaluation;
      XMLName format;
      enums::Interaction interaction;
      XMLName projectile;
      enums::Frame projectileFrame;
      XMLName target;
      // children
      pops::PoPs PoPs;
      std::optional<appData::ApplicationData> applicationData;
      std::optional<common::ExternalFiles> externalFiles;
      std::optional<fissionTransport::FissionComponents> fissionComponents;
      std::optional<transport::IncompleteReactions> incompleteReactions;
      std::optional<transport::OrphanProducts> orphanProducts;
      std::optional<transport::Productions> productions;
      std::optional<transport::Reactions> reactions;
      std::optional<transport::Resonances> resonances;
      styles::Styles styles;
      std::optional<transport::Sums> sums;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // evaluation
   const XMLName &evaluation() const
      { return content.evaluation; }
   XMLName &evaluation()
      { return content.evaluation; }

   // format
   const XMLName &format() const
      { return content.format; }
   XMLName &format()
      { return content.format; }

   // interaction
   const enums::Interaction &interaction() const
      { return content.interaction; }
   enums::Interaction &interaction()
      { return content.interaction; }

   // projectile
   const XMLName &projectile() const
      { return content.projectile; }
   XMLName &projectile()
      { return content.projectile; }

   // projectileFrame
   const enums::Frame &projectileFrame() const
      { return content.projectileFrame; }
   enums::Frame &projectileFrame()
      { return content.projectileFrame; }

   // target
   const XMLName &target() const
      { return content.target; }
   XMLName &target()
      { return content.target; }

   // PoPs
   const pops::PoPs &PoPs() const
      { return content.PoPs; }
   pops::PoPs &PoPs()
      { return content.PoPs; }

   // applicationData
   const std::optional<appData::ApplicationData> &applicationData() const
      { return content.applicationData; }
   std::optional<appData::ApplicationData> &applicationData()
      { return content.applicationData; }

   // externalFiles
   const std::optional<common::ExternalFiles> &externalFiles() const
      { return content.externalFiles; }
   std::optional<common::ExternalFiles> &externalFiles()
      { return content.externalFiles; }

   // fissionComponents
   const std::optional<fissionTransport::FissionComponents> &fissionComponents() const
      { return content.fissionComponents; }
   std::optional<fissionTransport::FissionComponents> &fissionComponents()
      { return content.fissionComponents; }

   // incompleteReactions
   const std::optional<transport::IncompleteReactions> &incompleteReactions() const
      { return content.incompleteReactions; }
   std::optional<transport::IncompleteReactions> &incompleteReactions()
      { return content.incompleteReactions; }

   // orphanProducts
   const std::optional<transport::OrphanProducts> &orphanProducts() const
      { return content.orphanProducts; }
   std::optional<transport::OrphanProducts> &orphanProducts()
      { return content.orphanProducts; }

   // productions
   const std::optional<transport::Productions> &productions() const
      { return content.productions; }
   std::optional<transport::Productions> &productions()
      { return content.productions; }

   // reactions
   const std::optional<transport::Reactions> &reactions() const
      { return content.reactions; }
   std::optional<transport::Reactions> &reactions()
      { return content.reactions; }

   // resonances
   const std::optional<transport::Resonances> &resonances() const
      { return content.resonances; }
   std::optional<transport::Resonances> &resonances()
      { return content.resonances; }

   // styles
   const styles::Styles &styles() const
      { return content.styles; }
   styles::Styles &styles()
      { return content.styles; }

   // sums
   const std::optional<transport::Sums> &sums() const
      { return content.sums; }
   std::optional<transport::Sums> &sums()
      { return content.sums; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // evaluation(value)
   ReactionSuite &evaluation(const XMLName &obj)
      { evaluation() = obj; return *this; }

   // format(value)
   ReactionSuite &format(const XMLName &obj)
      { format() = obj; return *this; }

   // interaction(value)
   ReactionSuite &interaction(const enums::Interaction &obj)
      { interaction() = obj; return *this; }

   // projectile(value)
   ReactionSuite &projectile(const XMLName &obj)
      { projectile() = obj; return *this; }

   // projectileFrame(value)
   ReactionSuite &projectileFrame(const enums::Frame &obj)
      { projectileFrame() = obj; return *this; }

   // target(value)
   ReactionSuite &target(const XMLName &obj)
      { target() = obj; return *this; }

   // PoPs(value)
   ReactionSuite &PoPs(const pops::PoPs &obj)
      { PoPs() = obj; return *this; }

   // applicationData(value)
   ReactionSuite &applicationData(const std::optional<appData::ApplicationData> &obj)
      { applicationData() = obj; return *this; }

   // externalFiles(value)
   ReactionSuite &externalFiles(const std::optional<common::ExternalFiles> &obj)
      { externalFiles() = obj; return *this; }

   // fissionComponents(value)
   ReactionSuite &fissionComponents(const std::optional<fissionTransport::FissionComponents> &obj)
      { fissionComponents() = obj; return *this; }

   // incompleteReactions(value)
   ReactionSuite &incompleteReactions(const std::optional<transport::IncompleteReactions> &obj)
      { incompleteReactions() = obj; return *this; }

   // orphanProducts(value)
   ReactionSuite &orphanProducts(const std::optional<transport::OrphanProducts> &obj)
      { orphanProducts() = obj; return *this; }

   // productions(value)
   ReactionSuite &productions(const std::optional<transport::Productions> &obj)
      { productions() = obj; return *this; }

   // reactions(value)
   ReactionSuite &reactions(const std::optional<transport::Reactions> &obj)
      { reactions() = obj; return *this; }

   // resonances(value)
   ReactionSuite &resonances(const std::optional<transport::Resonances> &obj)
      { resonances() = obj; return *this; }

   // styles(value)
   ReactionSuite &styles(const styles::Styles &obj)
      { styles() = obj; return *this; }

   // sums(value)
   ReactionSuite &sums(const std::optional<transport::Sums> &obj)
      { sums() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ReactionSuite() :
      Component{
         BodyText{},
         content.evaluation,
         content.format,
         content.interaction,
         content.projectile,
         content.projectileFrame,
         content.target,
         content.PoPs,
         content.applicationData,
         content.externalFiles,
         content.fissionComponents,
         content.incompleteReactions,
         content.orphanProducts,
         content.productions,
         content.reactions,
         content.resonances,
         content.styles,
         content.sums
      }
   {
      Component::finish();
   }

   // copy
   ReactionSuite(const ReactionSuite &other) :
      Component{
         other,
         content.evaluation,
         content.format,
         content.interaction,
         content.projectile,
         content.projectileFrame,
         content.target,
         content.PoPs,
         content.applicationData,
         content.externalFiles,
         content.fissionComponents,
         content.incompleteReactions,
         content.orphanProducts,
         content.productions,
         content.reactions,
         content.resonances,
         content.styles,
         content.sums
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ReactionSuite(ReactionSuite &&other) :
      Component{
         other,
         content.evaluation,
         content.format,
         content.interaction,
         content.projectile,
         content.projectileFrame,
         content.target,
         content.PoPs,
         content.applicationData,
         content.externalFiles,
         content.fissionComponents,
         content.incompleteReactions,
         content.orphanProducts,
         content.productions,
         content.reactions,
         content.resonances,
         content.styles,
         content.sums
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ReactionSuite(const Node &node) :
      Component{
         BodyText{},
         content.evaluation,
         content.format,
         content.interaction,
         content.projectile,
         content.projectileFrame,
         content.target,
         content.PoPs,
         content.applicationData,
         content.externalFiles,
         content.fissionComponents,
         content.incompleteReactions,
         content.orphanProducts,
         content.productions,
         content.reactions,
         content.resonances,
         content.styles,
         content.sums
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ReactionSuite(
      const XMLName &evaluation,
      const XMLName &format,
      const enums::Interaction &interaction,
      const XMLName &projectile,
      const enums::Frame &projectileFrame,
      const XMLName &target,
      const pops::PoPs &PoPs,
      const std::optional<appData::ApplicationData> &applicationData,
      const std::optional<common::ExternalFiles> &externalFiles,
      const std::optional<fissionTransport::FissionComponents> &fissionComponents,
      const std::optional<transport::IncompleteReactions> &incompleteReactions,
      const std::optional<transport::OrphanProducts> &orphanProducts,
      const std::optional<transport::Productions> &productions,
      const std::optional<transport::Reactions> &reactions,
      const std::optional<transport::Resonances> &resonances,
      const styles::Styles &styles,
      const std::optional<transport::Sums> &sums
   ) :
      Component{
         BodyText{},
         content.evaluation,
         content.format,
         content.interaction,
         content.projectile,
         content.projectileFrame,
         content.target,
         content.PoPs,
         content.applicationData,
         content.externalFiles,
         content.fissionComponents,
         content.incompleteReactions,
         content.orphanProducts,
         content.productions,
         content.reactions,
         content.resonances,
         content.styles,
         content.sums
      },
      content{
         evaluation,
         format,
         interaction,
         projectile,
         projectileFrame,
         target,
         PoPs,
         applicationData,
         externalFiles,
         fissionComponents,
         incompleteReactions,
         orphanProducts,
         productions,
         reactions,
         resonances,
         styles,
         sums
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ReactionSuite &operator=(const ReactionSuite &) = default;

   // move
   ReactionSuite &operator=(ReactionSuite &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/ReactionSuite/src/custom.hpp"

}; // class ReactionSuite

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
