
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_CROSSSECTIONSUMS
#define NJOY_GNDSTK_V2_0_TRANSPORT_CROSSSECTIONSUMS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/CrossSectionSum.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class CrossSectionSums
// -----------------------------------------------------------------------------

namespace transport {

class CrossSectionSums : public Component<CrossSectionSums> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "CrossSectionSums"; }
   static auto GNDSName() { return "crossSectionSums"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<transport::CrossSectionSum>{}
            / ++Child<>("crossSectionSum")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<std::vector<transport::CrossSectionSum>> crossSectionSum;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // crossSectionSum
   const std::optional<std::vector<transport::CrossSectionSum>> &crossSectionSum() const
      { return content.crossSectionSum; }
   std::optional<std::vector<transport::CrossSectionSum>> &crossSectionSum()
      { return content.crossSectionSum; }

   // crossSectionSum(index)
   const transport::CrossSectionSum &crossSectionSum(const std::size_t index) const
      { return getter(crossSectionSum(), index, "crossSectionSum"); }
   transport::CrossSectionSum &crossSectionSum(const std::size_t index)
      { return getter(crossSectionSum(), index, "crossSectionSum"); }

   // crossSectionSum(label)
   const transport::CrossSectionSum &crossSectionSum(const std::string &label) const
      { return getter(crossSectionSum(), label, "crossSectionSum"); }
   transport::CrossSectionSum &crossSectionSum(const std::string &label)
      { return getter(crossSectionSum(), label, "crossSectionSum"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // crossSectionSum(value)
   CrossSectionSums &crossSectionSum(const std::optional<std::vector<transport::CrossSectionSum>> &obj)
      { crossSectionSum() = obj; return *this; }

   // crossSectionSum(index,value)
   CrossSectionSums &crossSectionSum(
      const std::size_t index,
      const transport::CrossSectionSum &obj
   ) {
      crossSectionSum(index) = obj; return *this;
   }

   // crossSectionSum(label,value)
   CrossSectionSums &crossSectionSum(
      const std::string &label,
      const transport::CrossSectionSum &obj
   ) {
      crossSectionSum(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CrossSectionSums() :
      Component{
         BodyText{},
         content.crossSectionSum
      }
   {
      Component::finish();
   }

   // copy
   CrossSectionSums(const CrossSectionSums &other) :
      Component{
         other,
         content.crossSectionSum
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CrossSectionSums(CrossSectionSums &&other) :
      Component{
         other,
         content.crossSectionSum
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CrossSectionSums(const Node &node) :
      Component{
         BodyText{},
         content.crossSectionSum
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit CrossSectionSums(
      const std::optional<std::vector<transport::CrossSectionSum>> &crossSectionSum
   ) :
      Component{
         BodyText{},
         content.crossSectionSum
      },
      content{
         crossSectionSum
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CrossSectionSums &operator=(const CrossSectionSums &) = default;

   // move
   CrossSectionSums &operator=(CrossSectionSums &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/CrossSectionSums/src/custom.hpp"

}; // class CrossSectionSums

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
