
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_DISTRIBUTION
#define NJOY_GNDSTK_V2_0_TRANSPORT_DISTRIBUTION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/cpTransport/CoulombPlusNuclearElastic.hpp"
#include "GNDStk/v2.0/transport/KalbachMann.hpp"
#include "GNDStk/v2.0/transport/AngularEnergy.hpp"
#include "GNDStk/v2.0/processed/AngularEnergyMC.hpp"
#include "GNDStk/v2.0/transport/AngularTwoBody.hpp"
#include "GNDStk/v2.0/transport/Branching3d.hpp"
#include "GNDStk/v2.0/atomic/CoherentPhotonScattering.hpp"
#include "GNDStk/v2.0/transport/EnergyAngular.hpp"
#include "GNDStk/v2.0/processed/EnergyAngularMC.hpp"
#include "GNDStk/v2.0/atomic/IncoherentPhotonScattering.hpp"
#include "GNDStk/v2.0/processed/MultiGroup3d.hpp"
#include "GNDStk/v2.0/transport/Reference.hpp"
#include "GNDStk/v2.0/tsl/ThermalNeutronScatteringLaw.hpp"
#include "GNDStk/v2.0/transport/Uncorrelated.hpp"
#include "GNDStk/v2.0/transport/Unspecified.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class Distribution
// -----------------------------------------------------------------------------

namespace transport {

class Distribution : public Component<Distribution> {

   using _t = std::variant<
      cpTransport::CoulombPlusNuclearElastic,
      transport::KalbachMann,
      transport::AngularEnergy,
      processed::AngularEnergyMC,
      transport::AngularTwoBody,
      transport::Branching3d,
      atomic::CoherentPhotonScattering,
      transport::EnergyAngular,
      processed::EnergyAngularMC,
      atomic::IncoherentPhotonScattering,
      processed::MultiGroup3d,
      transport::Reference,
      tsl::ThermalNeutronScatteringLaw,
      transport::Uncorrelated,
      transport::Unspecified
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "Distribution"; }
   static auto GNDSName() { return "distribution"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         _t{}
            / --(Child<>("CoulombPlusNuclearElastic") || Child<>("KalbachMann") || Child<>("angularEnergy") || Child<>("angularEnergyMC") || Child<>("angularTwoBody") || Child<>("branching3d") || Child<>("coherentPhotonScattering") || Child<>("energyAngular") || Child<>("energyAngularMC") || Child<>("incoherentPhotonScattering") || Child<>("multiGroup3d") || Child<>("reference") || Child<>("thermalNeutronScatteringLaw") || Child<>("uncorrelated") || Child<>("unspecified"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children - variant
      _t _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
   const _t &_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified() const
      { return content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified; }
   _t &_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified()
      { return content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified; }

   // CoulombPlusNuclearElastic
   const cpTransport::CoulombPlusNuclearElastic *CoulombPlusNuclearElastic() const
      { return getter<cpTransport::CoulombPlusNuclearElastic>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "CoulombPlusNuclearElastic"); }
   cpTransport::CoulombPlusNuclearElastic *CoulombPlusNuclearElastic()
      { return getter<cpTransport::CoulombPlusNuclearElastic>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "CoulombPlusNuclearElastic"); }

   // KalbachMann
   const transport::KalbachMann *KalbachMann() const
      { return getter<transport::KalbachMann>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "KalbachMann"); }
   transport::KalbachMann *KalbachMann()
      { return getter<transport::KalbachMann>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "KalbachMann"); }

   // angularEnergy
   const transport::AngularEnergy *angularEnergy() const
      { return getter<transport::AngularEnergy>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "angularEnergy"); }
   transport::AngularEnergy *angularEnergy()
      { return getter<transport::AngularEnergy>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "angularEnergy"); }

   // angularEnergyMC
   const processed::AngularEnergyMC *angularEnergyMC() const
      { return getter<processed::AngularEnergyMC>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "angularEnergyMC"); }
   processed::AngularEnergyMC *angularEnergyMC()
      { return getter<processed::AngularEnergyMC>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "angularEnergyMC"); }

   // angularTwoBody
   const transport::AngularTwoBody *angularTwoBody() const
      { return getter<transport::AngularTwoBody>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "angularTwoBody"); }
   transport::AngularTwoBody *angularTwoBody()
      { return getter<transport::AngularTwoBody>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "angularTwoBody"); }

   // branching3d
   const transport::Branching3d *branching3d() const
      { return getter<transport::Branching3d>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "branching3d"); }
   transport::Branching3d *branching3d()
      { return getter<transport::Branching3d>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "branching3d"); }

   // coherentPhotonScattering
   const atomic::CoherentPhotonScattering *coherentPhotonScattering() const
      { return getter<atomic::CoherentPhotonScattering>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "coherentPhotonScattering"); }
   atomic::CoherentPhotonScattering *coherentPhotonScattering()
      { return getter<atomic::CoherentPhotonScattering>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "coherentPhotonScattering"); }

   // energyAngular
   const transport::EnergyAngular *energyAngular() const
      { return getter<transport::EnergyAngular>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "energyAngular"); }
   transport::EnergyAngular *energyAngular()
      { return getter<transport::EnergyAngular>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "energyAngular"); }

   // energyAngularMC
   const processed::EnergyAngularMC *energyAngularMC() const
      { return getter<processed::EnergyAngularMC>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "energyAngularMC"); }
   processed::EnergyAngularMC *energyAngularMC()
      { return getter<processed::EnergyAngularMC>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "energyAngularMC"); }

   // incoherentPhotonScattering
   const atomic::IncoherentPhotonScattering *incoherentPhotonScattering() const
      { return getter<atomic::IncoherentPhotonScattering>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "incoherentPhotonScattering"); }
   atomic::IncoherentPhotonScattering *incoherentPhotonScattering()
      { return getter<atomic::IncoherentPhotonScattering>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "incoherentPhotonScattering"); }

   // multiGroup3d
   const processed::MultiGroup3d *multiGroup3d() const
      { return getter<processed::MultiGroup3d>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "multiGroup3d"); }
   processed::MultiGroup3d *multiGroup3d()
      { return getter<processed::MultiGroup3d>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "multiGroup3d"); }

   // reference
   const transport::Reference *reference() const
      { return getter<transport::Reference>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "reference"); }
   transport::Reference *reference()
      { return getter<transport::Reference>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "reference"); }

   // thermalNeutronScatteringLaw
   const tsl::ThermalNeutronScatteringLaw *thermalNeutronScatteringLaw() const
      { return getter<tsl::ThermalNeutronScatteringLaw>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "thermalNeutronScatteringLaw"); }
   tsl::ThermalNeutronScatteringLaw *thermalNeutronScatteringLaw()
      { return getter<tsl::ThermalNeutronScatteringLaw>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "thermalNeutronScatteringLaw"); }

   // uncorrelated
   const transport::Uncorrelated *uncorrelated() const
      { return getter<transport::Uncorrelated>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "uncorrelated"); }
   transport::Uncorrelated *uncorrelated()
      { return getter<transport::Uncorrelated>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "uncorrelated"); }

   // unspecified
   const transport::Unspecified *unspecified() const
      { return getter<transport::Unspecified>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "unspecified"); }
   transport::Unspecified *unspecified()
      { return getter<transport::Unspecified>(_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(), "unspecified"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(value)
   Distribution &_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(const _t &obj)
      { _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified() = obj; return *this; }

   // CoulombPlusNuclearElastic(value)
   Distribution &CoulombPlusNuclearElastic(const std::optional<cpTransport::CoulombPlusNuclearElastic> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // KalbachMann(value)
   Distribution &KalbachMann(const std::optional<transport::KalbachMann> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // angularEnergy(value)
   Distribution &angularEnergy(const std::optional<transport::AngularEnergy> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // angularEnergyMC(value)
   Distribution &angularEnergyMC(const std::optional<processed::AngularEnergyMC> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // angularTwoBody(value)
   Distribution &angularTwoBody(const std::optional<transport::AngularTwoBody> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // branching3d(value)
   Distribution &branching3d(const std::optional<transport::Branching3d> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // coherentPhotonScattering(value)
   Distribution &coherentPhotonScattering(const std::optional<atomic::CoherentPhotonScattering> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // energyAngular(value)
   Distribution &energyAngular(const std::optional<transport::EnergyAngular> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // energyAngularMC(value)
   Distribution &energyAngularMC(const std::optional<processed::EnergyAngularMC> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // incoherentPhotonScattering(value)
   Distribution &incoherentPhotonScattering(const std::optional<atomic::IncoherentPhotonScattering> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // multiGroup3d(value)
   Distribution &multiGroup3d(const std::optional<processed::MultiGroup3d> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // reference(value)
   Distribution &reference(const std::optional<transport::Reference> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // thermalNeutronScatteringLaw(value)
   Distribution &thermalNeutronScatteringLaw(const std::optional<tsl::ThermalNeutronScatteringLaw> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // uncorrelated(value)
   Distribution &uncorrelated(const std::optional<transport::Uncorrelated> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // unspecified(value)
   Distribution &unspecified(const std::optional<transport::Unspecified> &obj)
      { if (obj) _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Distribution() :
      Component{
         BodyText{},
         content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
      }
   {
      Component::finish();
   }

   // copy
   Distribution(const Distribution &other) :
      Component{
         other,
         content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Distribution(Distribution &&other) :
      Component{
         other,
         content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Distribution(const Node &node) :
      Component{
         BodyText{},
         content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Distribution(
      const _t &_CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
   ) :
      Component{
         BodyText{},
         content._CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
      },
      content{
         _CoulombPlusNuclearElasticKalbachMannangularEnergyangularEnergyMCangularTwoBodybranching3dcoherentPhotonScatteringenergyAngularenergyAngularMCincoherentPhotonScatteringmultiGroup3dreferencethermalNeutronScatteringLawuncorrelatedunspecified
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Distribution &operator=(const Distribution &) = default;

   // move
   Distribution &operator=(Distribution &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/Distribution/src/custom.hpp"

}; // class Distribution

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
