
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_PRIMARYGAMMA
#define NJOY_GNDSTK_V2_0_TRANSPORT_PRIMARYGAMMA

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Axes.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class PrimaryGamma
// -----------------------------------------------------------------------------

namespace transport {

class PrimaryGamma : public Component<PrimaryGamma> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "PrimaryGamma"; }
   static auto GNDSName() { return "primaryGamma"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<Float64>{}
            / Meta<>("domainMax") |
         std::optional<Float64>{}
            / Meta<>("domainMin") |
         std::optional<XMLName>{}
            / Meta<>("finalState") |
         std::optional<Float64>{}
            / Meta<>("value") |
         // children
         std::optional<containers::Axes>{}
            / --Child<>("axes")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<Float64> domainMax;
      std::optional<Float64> domainMin;
      std::optional<XMLName> finalState;
      std::optional<Float64> value;
      // children
      std::optional<containers::Axes> axes;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // domainMax
   const std::optional<Float64> &domainMax() const
      { return content.domainMax; }
   std::optional<Float64> &domainMax()
      { return content.domainMax; }

   // domainMin
   const std::optional<Float64> &domainMin() const
      { return content.domainMin; }
   std::optional<Float64> &domainMin()
      { return content.domainMin; }

   // finalState
   const std::optional<XMLName> &finalState() const
      { return content.finalState; }
   std::optional<XMLName> &finalState()
      { return content.finalState; }

   // value
   const std::optional<Float64> &value() const
      { return content.value; }
   std::optional<Float64> &value()
      { return content.value; }

   // axes
   const std::optional<containers::Axes> &axes() const
      { return content.axes; }
   std::optional<containers::Axes> &axes()
      { return content.axes; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // domainMax(value)
   PrimaryGamma &domainMax(const std::optional<Float64> &obj)
      { domainMax() = obj; return *this; }

   // domainMin(value)
   PrimaryGamma &domainMin(const std::optional<Float64> &obj)
      { domainMin() = obj; return *this; }

   // finalState(value)
   PrimaryGamma &finalState(const std::optional<XMLName> &obj)
      { finalState() = obj; return *this; }

   // value(value)
   PrimaryGamma &value(const std::optional<Float64> &obj)
      { value() = obj; return *this; }

   // axes(value)
   PrimaryGamma &axes(const std::optional<containers::Axes> &obj)
      { axes() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   PrimaryGamma() :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.finalState,
         content.value,
         content.axes
      }
   {
      Component::finish();
   }

   // copy
   PrimaryGamma(const PrimaryGamma &other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.finalState,
         content.value,
         content.axes
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   PrimaryGamma(PrimaryGamma &&other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.finalState,
         content.value,
         content.axes
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   PrimaryGamma(const Node &node) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.finalState,
         content.value,
         content.axes
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit PrimaryGamma(
      const std::optional<Float64> &domainMax,
      const std::optional<Float64> &domainMin,
      const std::optional<XMLName> &finalState,
      const std::optional<Float64> &value,
      const std::optional<containers::Axes> &axes
   ) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.finalState,
         content.value,
         content.axes
      },
      content{
         domainMax,
         domainMin,
         finalState,
         value,
         axes
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   PrimaryGamma &operator=(const PrimaryGamma &) = default;

   // move
   PrimaryGamma &operator=(PrimaryGamma &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/PrimaryGamma/src/custom.hpp"

}; // class PrimaryGamma

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
