
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_ENERGY
#define NJOY_GNDSTK_V2_0_TRANSPORT_ENERGY

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fissionTransport/MadlandNix.hpp"
#include "GNDStk/v2.0/transport/NBodyPhaseSpace.hpp"
#include "GNDStk/v2.0/fissionTransport/Watt.hpp"
#include "GNDStk/v2.0/containers/XYs2d.hpp"
#include "GNDStk/v2.0/transport/DiscreteGamma.hpp"
#include "GNDStk/v2.0/transport/Evaporation.hpp"
#include "GNDStk/v2.0/transport/GeneralEvaporation.hpp"
#include "GNDStk/v2.0/transport/PrimaryGamma.hpp"
#include "GNDStk/v2.0/containers/Regions2d.hpp"
#include "GNDStk/v2.0/fissionTransport/SimpleMaxwellianFission.hpp"
#include "GNDStk/v2.0/transport/WeightedFunctionals.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class Energy
// -----------------------------------------------------------------------------

namespace transport {

class Energy : public Component<Energy> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "Energy"; }
   static auto GNDSName() { return "energy"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<fissionTransport::MadlandNix>{}
            / --Child<>("MadlandNix") |
         std::optional<transport::NBodyPhaseSpace>{}
            / --Child<>("NBodyPhaseSpace") |
         std::optional<fissionTransport::Watt>{}
            / --Child<>("Watt") |
         std::optional<containers::XYs2d>{}
            / --Child<>("XYs2d") |
         std::optional<transport::DiscreteGamma>{}
            / --Child<>("discreteGamma") |
         std::optional<transport::Evaporation>{}
            / --Child<>("evaporation") |
         std::optional<transport::GeneralEvaporation>{}
            / --Child<>("generalEvaporation") |
         std::optional<transport::PrimaryGamma>{}
            / --Child<>("primaryGamma") |
         std::optional<containers::Regions2d>{}
            / --Child<>("regions2d") |
         std::optional<fissionTransport::SimpleMaxwellianFission>{}
            / --Child<>("simpleMaxwellianFission") |
         std::optional<transport::WeightedFunctionals>{}
            / --Child<>("weightedFunctionals")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<fissionTransport::MadlandNix> MadlandNix;
      std::optional<transport::NBodyPhaseSpace> NBodyPhaseSpace;
      std::optional<fissionTransport::Watt> Watt;
      std::optional<containers::XYs2d> XYs2d;
      std::optional<transport::DiscreteGamma> discreteGamma;
      std::optional<transport::Evaporation> evaporation;
      std::optional<transport::GeneralEvaporation> generalEvaporation;
      std::optional<transport::PrimaryGamma> primaryGamma;
      std::optional<containers::Regions2d> regions2d;
      std::optional<fissionTransport::SimpleMaxwellianFission> simpleMaxwellianFission;
      std::optional<transport::WeightedFunctionals> weightedFunctionals;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // MadlandNix
   const std::optional<fissionTransport::MadlandNix> &MadlandNix() const
      { return content.MadlandNix; }
   std::optional<fissionTransport::MadlandNix> &MadlandNix()
      { return content.MadlandNix; }

   // NBodyPhaseSpace
   const std::optional<transport::NBodyPhaseSpace> &NBodyPhaseSpace() const
      { return content.NBodyPhaseSpace; }
   std::optional<transport::NBodyPhaseSpace> &NBodyPhaseSpace()
      { return content.NBodyPhaseSpace; }

   // Watt
   const std::optional<fissionTransport::Watt> &Watt() const
      { return content.Watt; }
   std::optional<fissionTransport::Watt> &Watt()
      { return content.Watt; }

   // XYs2d
   const std::optional<containers::XYs2d> &XYs2d() const
      { return content.XYs2d; }
   std::optional<containers::XYs2d> &XYs2d()
      { return content.XYs2d; }

   // discreteGamma
   const std::optional<transport::DiscreteGamma> &discreteGamma() const
      { return content.discreteGamma; }
   std::optional<transport::DiscreteGamma> &discreteGamma()
      { return content.discreteGamma; }

   // evaporation
   const std::optional<transport::Evaporation> &evaporation() const
      { return content.evaporation; }
   std::optional<transport::Evaporation> &evaporation()
      { return content.evaporation; }

   // generalEvaporation
   const std::optional<transport::GeneralEvaporation> &generalEvaporation() const
      { return content.generalEvaporation; }
   std::optional<transport::GeneralEvaporation> &generalEvaporation()
      { return content.generalEvaporation; }

   // primaryGamma
   const std::optional<transport::PrimaryGamma> &primaryGamma() const
      { return content.primaryGamma; }
   std::optional<transport::PrimaryGamma> &primaryGamma()
      { return content.primaryGamma; }

   // regions2d
   const std::optional<containers::Regions2d> &regions2d() const
      { return content.regions2d; }
   std::optional<containers::Regions2d> &regions2d()
      { return content.regions2d; }

   // simpleMaxwellianFission
   const std::optional<fissionTransport::SimpleMaxwellianFission> &simpleMaxwellianFission() const
      { return content.simpleMaxwellianFission; }
   std::optional<fissionTransport::SimpleMaxwellianFission> &simpleMaxwellianFission()
      { return content.simpleMaxwellianFission; }

   // weightedFunctionals
   const std::optional<transport::WeightedFunctionals> &weightedFunctionals() const
      { return content.weightedFunctionals; }
   std::optional<transport::WeightedFunctionals> &weightedFunctionals()
      { return content.weightedFunctionals; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // MadlandNix(value)
   Energy &MadlandNix(const std::optional<fissionTransport::MadlandNix> &obj)
      { MadlandNix() = obj; return *this; }

   // NBodyPhaseSpace(value)
   Energy &NBodyPhaseSpace(const std::optional<transport::NBodyPhaseSpace> &obj)
      { NBodyPhaseSpace() = obj; return *this; }

   // Watt(value)
   Energy &Watt(const std::optional<fissionTransport::Watt> &obj)
      { Watt() = obj; return *this; }

   // XYs2d(value)
   Energy &XYs2d(const std::optional<containers::XYs2d> &obj)
      { XYs2d() = obj; return *this; }

   // discreteGamma(value)
   Energy &discreteGamma(const std::optional<transport::DiscreteGamma> &obj)
      { discreteGamma() = obj; return *this; }

   // evaporation(value)
   Energy &evaporation(const std::optional<transport::Evaporation> &obj)
      { evaporation() = obj; return *this; }

   // generalEvaporation(value)
   Energy &generalEvaporation(const std::optional<transport::GeneralEvaporation> &obj)
      { generalEvaporation() = obj; return *this; }

   // primaryGamma(value)
   Energy &primaryGamma(const std::optional<transport::PrimaryGamma> &obj)
      { primaryGamma() = obj; return *this; }

   // regions2d(value)
   Energy &regions2d(const std::optional<containers::Regions2d> &obj)
      { regions2d() = obj; return *this; }

   // simpleMaxwellianFission(value)
   Energy &simpleMaxwellianFission(const std::optional<fissionTransport::SimpleMaxwellianFission> &obj)
      { simpleMaxwellianFission() = obj; return *this; }

   // weightedFunctionals(value)
   Energy &weightedFunctionals(const std::optional<transport::WeightedFunctionals> &obj)
      { weightedFunctionals() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Energy() :
      Component{
         BodyText{},
         content.MadlandNix,
         content.NBodyPhaseSpace,
         content.Watt,
         content.XYs2d,
         content.discreteGamma,
         content.evaporation,
         content.generalEvaporation,
         content.primaryGamma,
         content.regions2d,
         content.simpleMaxwellianFission,
         content.weightedFunctionals
      }
   {
      Component::finish();
   }

   // copy
   Energy(const Energy &other) :
      Component{
         other,
         content.MadlandNix,
         content.NBodyPhaseSpace,
         content.Watt,
         content.XYs2d,
         content.discreteGamma,
         content.evaporation,
         content.generalEvaporation,
         content.primaryGamma,
         content.regions2d,
         content.simpleMaxwellianFission,
         content.weightedFunctionals
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Energy(Energy &&other) :
      Component{
         other,
         content.MadlandNix,
         content.NBodyPhaseSpace,
         content.Watt,
         content.XYs2d,
         content.discreteGamma,
         content.evaporation,
         content.generalEvaporation,
         content.primaryGamma,
         content.regions2d,
         content.simpleMaxwellianFission,
         content.weightedFunctionals
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Energy(const Node &node) :
      Component{
         BodyText{},
         content.MadlandNix,
         content.NBodyPhaseSpace,
         content.Watt,
         content.XYs2d,
         content.discreteGamma,
         content.evaporation,
         content.generalEvaporation,
         content.primaryGamma,
         content.regions2d,
         content.simpleMaxwellianFission,
         content.weightedFunctionals
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Energy(
      const std::optional<fissionTransport::MadlandNix> &MadlandNix,
      const std::optional<transport::NBodyPhaseSpace> &NBodyPhaseSpace,
      const std::optional<fissionTransport::Watt> &Watt,
      const std::optional<containers::XYs2d> &XYs2d,
      const std::optional<transport::DiscreteGamma> &discreteGamma,
      const std::optional<transport::Evaporation> &evaporation,
      const std::optional<transport::GeneralEvaporation> &generalEvaporation,
      const std::optional<transport::PrimaryGamma> &primaryGamma,
      const std::optional<containers::Regions2d> &regions2d,
      const std::optional<fissionTransport::SimpleMaxwellianFission> &simpleMaxwellianFission,
      const std::optional<transport::WeightedFunctionals> &weightedFunctionals
   ) :
      Component{
         BodyText{},
         content.MadlandNix,
         content.NBodyPhaseSpace,
         content.Watt,
         content.XYs2d,
         content.discreteGamma,
         content.evaporation,
         content.generalEvaporation,
         content.primaryGamma,
         content.regions2d,
         content.simpleMaxwellianFission,
         content.weightedFunctionals
      },
      content{
         MadlandNix,
         NBodyPhaseSpace,
         Watt,
         XYs2d,
         discreteGamma,
         evaporation,
         generalEvaporation,
         primaryGamma,
         regions2d,
         simpleMaxwellianFission,
         weightedFunctionals
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Energy &operator=(const Energy &) = default;

   // move
   Energy &operator=(Energy &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/Energy/src/custom.hpp"

}; // class Energy

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
