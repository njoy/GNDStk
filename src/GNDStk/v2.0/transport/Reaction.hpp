
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_REACTION
#define NJOY_GNDSTK_V2_0_TRANSPORT_REACTION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/CrossSection.hpp"
#include "GNDStk/v2.0/transport/DoubleDifferentialCrossSection.hpp"
#include "GNDStk/v2.0/transport/OutputChannel.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class Reaction
// -----------------------------------------------------------------------------

namespace transport {

class Reaction : public Component<Reaction> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "Reaction"; }
   static auto GNDSName() { return "reaction"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("ENDF_MT") |
         std::optional<XMLName>{}
            / Meta<>("fissionGenre") |
         XMLName{}
            / Meta<>("label") |
         // children
         transport::CrossSection{}
            / --Child<>("crossSection") |
         std::optional<transport::DoubleDifferentialCrossSection>{}
            / --Child<>("doubleDifferentialCrossSection") |
         transport::OutputChannel{}
            / --Child<>("outputChannel")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Integer32 ENDF_MT;
      std::optional<XMLName> fissionGenre;
      XMLName label;
      // children
      transport::CrossSection crossSection;
      std::optional<transport::DoubleDifferentialCrossSection> doubleDifferentialCrossSection;
      transport::OutputChannel outputChannel;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // ENDF_MT
   const Integer32 &ENDF_MT() const
      { return content.ENDF_MT; }
   Integer32 &ENDF_MT()
      { return content.ENDF_MT; }

   // fissionGenre
   const std::optional<XMLName> &fissionGenre() const
      { return content.fissionGenre; }
   std::optional<XMLName> &fissionGenre()
      { return content.fissionGenre; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // crossSection
   const transport::CrossSection &crossSection() const
      { return content.crossSection; }
   transport::CrossSection &crossSection()
      { return content.crossSection; }

   // doubleDifferentialCrossSection
   const std::optional<transport::DoubleDifferentialCrossSection> &doubleDifferentialCrossSection() const
      { return content.doubleDifferentialCrossSection; }
   std::optional<transport::DoubleDifferentialCrossSection> &doubleDifferentialCrossSection()
      { return content.doubleDifferentialCrossSection; }

   // outputChannel
   const transport::OutputChannel &outputChannel() const
      { return content.outputChannel; }
   transport::OutputChannel &outputChannel()
      { return content.outputChannel; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // ENDF_MT(value)
   Reaction &ENDF_MT(const Integer32 &obj)
      { ENDF_MT() = obj; return *this; }

   // fissionGenre(value)
   Reaction &fissionGenre(const std::optional<XMLName> &obj)
      { fissionGenre() = obj; return *this; }

   // label(value)
   Reaction &label(const XMLName &obj)
      { label() = obj; return *this; }

   // crossSection(value)
   Reaction &crossSection(const transport::CrossSection &obj)
      { crossSection() = obj; return *this; }

   // doubleDifferentialCrossSection(value)
   Reaction &doubleDifferentialCrossSection(const std::optional<transport::DoubleDifferentialCrossSection> &obj)
      { doubleDifferentialCrossSection() = obj; return *this; }

   // outputChannel(value)
   Reaction &outputChannel(const transport::OutputChannel &obj)
      { outputChannel() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Reaction() :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.doubleDifferentialCrossSection,
         content.outputChannel
      }
   {
      Component::finish();
   }

   // copy
   Reaction(const Reaction &other) :
      Component{
         other,
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.doubleDifferentialCrossSection,
         content.outputChannel
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Reaction(Reaction &&other) :
      Component{
         other,
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.doubleDifferentialCrossSection,
         content.outputChannel
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Reaction(const Node &node) :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.doubleDifferentialCrossSection,
         content.outputChannel
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Reaction(
      const Integer32 &ENDF_MT,
      const std::optional<XMLName> &fissionGenre,
      const XMLName &label,
      const transport::CrossSection &crossSection,
      const std::optional<transport::DoubleDifferentialCrossSection> &doubleDifferentialCrossSection,
      const transport::OutputChannel &outputChannel
   ) :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.doubleDifferentialCrossSection,
         content.outputChannel
      },
      content{
         ENDF_MT,
         fissionGenre,
         label,
         crossSection,
         doubleDifferentialCrossSection,
         outputChannel
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Reaction &operator=(const Reaction &) = default;

   // move
   Reaction &operator=(Reaction &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/Reaction/src/custom.hpp"

}; // class Reaction

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
