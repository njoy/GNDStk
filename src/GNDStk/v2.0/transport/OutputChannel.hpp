
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_OUTPUTCHANNEL
#define NJOY_GNDSTK_V2_0_TRANSPORT_OUTPUTCHANNEL

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/ambiguousNamespace/Q.hpp"
#include "GNDStk/v2.0/fissionFragmentData/FissionFragmentData.hpp"
#include "GNDStk/v2.0/ambiguousNamespace/Products.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class OutputChannel
// -----------------------------------------------------------------------------

namespace transport {

class OutputChannel : public Component<OutputChannel> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "OutputChannel"; }
   static auto GNDSName() { return "outputChannel"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("genre") |
         std::optional<XMLName>{}
            / Meta<>("process") |
         // children
         std::optional<ambiguousNamespace::Q>{}
            / --Child<>("Q") |
         std::optional<fissionFragmentData::FissionFragmentData>{}
            / --Child<>("fissionFragmentData") |
         std::optional<ambiguousNamespace::Products>{}
            / --Child<>("products")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> genre;
      std::optional<XMLName> process;
      // children
      std::optional<ambiguousNamespace::Q> Q;
      std::optional<fissionFragmentData::FissionFragmentData> fissionFragmentData;
      std::optional<ambiguousNamespace::Products> products;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // genre
   const std::optional<XMLName> &genre() const
      { return content.genre; }
   std::optional<XMLName> &genre()
      { return content.genre; }

   // process
   const std::optional<XMLName> &process() const
      { return content.process; }
   std::optional<XMLName> &process()
      { return content.process; }

   // Q
   const std::optional<ambiguousNamespace::Q> &Q() const
      { return content.Q; }
   std::optional<ambiguousNamespace::Q> &Q()
      { return content.Q; }

   // fissionFragmentData
   const std::optional<fissionFragmentData::FissionFragmentData> &fissionFragmentData() const
      { return content.fissionFragmentData; }
   std::optional<fissionFragmentData::FissionFragmentData> &fissionFragmentData()
      { return content.fissionFragmentData; }

   // products
   const std::optional<ambiguousNamespace::Products> &products() const
      { return content.products; }
   std::optional<ambiguousNamespace::Products> &products()
      { return content.products; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // genre(value)
   OutputChannel &genre(const std::optional<XMLName> &obj)
      { genre() = obj; return *this; }

   // process(value)
   OutputChannel &process(const std::optional<XMLName> &obj)
      { process() = obj; return *this; }

   // Q(value)
   OutputChannel &Q(const std::optional<ambiguousNamespace::Q> &obj)
      { Q() = obj; return *this; }

   // fissionFragmentData(value)
   OutputChannel &fissionFragmentData(const std::optional<fissionFragmentData::FissionFragmentData> &obj)
      { fissionFragmentData() = obj; return *this; }

   // products(value)
   OutputChannel &products(const std::optional<ambiguousNamespace::Products> &obj)
      { products() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   OutputChannel() :
      Component{
         BodyText{},
         content.genre,
         content.process,
         content.Q,
         content.fissionFragmentData,
         content.products
      }
   {
      Component::finish();
   }

   // copy
   OutputChannel(const OutputChannel &other) :
      Component{
         other,
         content.genre,
         content.process,
         content.Q,
         content.fissionFragmentData,
         content.products
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   OutputChannel(OutputChannel &&other) :
      Component{
         other,
         content.genre,
         content.process,
         content.Q,
         content.fissionFragmentData,
         content.products
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   OutputChannel(const Node &node) :
      Component{
         BodyText{},
         content.genre,
         content.process,
         content.Q,
         content.fissionFragmentData,
         content.products
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit OutputChannel(
      const std::optional<XMLName> &genre,
      const std::optional<XMLName> &process,
      const std::optional<ambiguousNamespace::Q> &Q,
      const std::optional<fissionFragmentData::FissionFragmentData> &fissionFragmentData,
      const std::optional<ambiguousNamespace::Products> &products
   ) :
      Component{
         BodyText{},
         content.genre,
         content.process,
         content.Q,
         content.fissionFragmentData,
         content.products
      },
      content{
         genre,
         process,
         Q,
         fissionFragmentData,
         products
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   OutputChannel &operator=(const OutputChannel &) = default;

   // move
   OutputChannel &operator=(OutputChannel &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/OutputChannel/src/custom.hpp"

}; // class OutputChannel

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
