
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_CROSSSECTION
#define NJOY_GNDSTK_V2_0_TRANSPORT_CROSSSECTION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/cpTransport/CoulombPlusNuclearElastic.hpp"
#include "GNDStk/v2.0/transport/URR_probabilityTables1d.hpp"
#include "GNDStk/v2.0/containers/XYs1d.hpp"
#include "GNDStk/v2.0/containers/Ys1d.hpp"
#include "GNDStk/v2.0/containers/Gridded1d.hpp"
#include "GNDStk/v2.0/transport/Reference.hpp"
#include "GNDStk/v2.0/containers/Regions1d.hpp"
#include "GNDStk/v2.0/transport/ResonancesWithBackground.hpp"
#include "GNDStk/v2.0/tsl/ThermalNeutronScatteringLaw1d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class CrossSection
// -----------------------------------------------------------------------------

namespace transport {

class CrossSection : public Component<CrossSection> {

   using _t = std::variant<
      cpTransport::CoulombPlusNuclearElastic,
      transport::URR_probabilityTables1d,
      containers::XYs1d,
      containers::Ys1d,
      containers::Gridded1d,
      transport::Reference,
      containers::Regions1d,
      transport::ResonancesWithBackground,
      tsl::ThermalNeutronScatteringLaw1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "CrossSection"; }
   static auto GNDSName() { return "crossSection"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         _t{}
            / --(Child<>("CoulombPlusNuclearElastic") || Child<>("URR_probabilityTables1d") || Child<>("XYs1d") || Child<>("Ys1d") || Child<>("gridded1d") || Child<>("reference") || Child<>("regions1d") || Child<>("resonancesWithBackground") || Child<>("thermalNeutronScatteringLaw1d"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children - variant
      _t _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
   const _t &_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d() const
      { return content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d; }
   _t &_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d()
      { return content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d; }

   // CoulombPlusNuclearElastic
   const cpTransport::CoulombPlusNuclearElastic *CoulombPlusNuclearElastic() const
      { return getter<cpTransport::CoulombPlusNuclearElastic>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "CoulombPlusNuclearElastic"); }
   cpTransport::CoulombPlusNuclearElastic *CoulombPlusNuclearElastic()
      { return getter<cpTransport::CoulombPlusNuclearElastic>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "CoulombPlusNuclearElastic"); }

   // URR_probabilityTables1d
   const transport::URR_probabilityTables1d *URR_probabilityTables1d() const
      { return getter<transport::URR_probabilityTables1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "URR_probabilityTables1d"); }
   transport::URR_probabilityTables1d *URR_probabilityTables1d()
      { return getter<transport::URR_probabilityTables1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "URR_probabilityTables1d"); }

   // XYs1d
   const containers::XYs1d *XYs1d() const
      { return getter<containers::XYs1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "XYs1d"); }
   containers::XYs1d *XYs1d()
      { return getter<containers::XYs1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "XYs1d"); }

   // Ys1d
   const containers::Ys1d *Ys1d() const
      { return getter<containers::Ys1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "Ys1d"); }
   containers::Ys1d *Ys1d()
      { return getter<containers::Ys1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "Ys1d"); }

   // gridded1d
   const containers::Gridded1d *gridded1d() const
      { return getter<containers::Gridded1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "gridded1d"); }
   containers::Gridded1d *gridded1d()
      { return getter<containers::Gridded1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "gridded1d"); }

   // reference
   const transport::Reference *reference() const
      { return getter<transport::Reference>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "reference"); }
   transport::Reference *reference()
      { return getter<transport::Reference>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "reference"); }

   // regions1d
   const containers::Regions1d *regions1d() const
      { return getter<containers::Regions1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "regions1d"); }
   containers::Regions1d *regions1d()
      { return getter<containers::Regions1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "regions1d"); }

   // resonancesWithBackground
   const transport::ResonancesWithBackground *resonancesWithBackground() const
      { return getter<transport::ResonancesWithBackground>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "resonancesWithBackground"); }
   transport::ResonancesWithBackground *resonancesWithBackground()
      { return getter<transport::ResonancesWithBackground>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "resonancesWithBackground"); }

   // thermalNeutronScatteringLaw1d
   const tsl::ThermalNeutronScatteringLaw1d *thermalNeutronScatteringLaw1d() const
      { return getter<tsl::ThermalNeutronScatteringLaw1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "thermalNeutronScatteringLaw1d"); }
   tsl::ThermalNeutronScatteringLaw1d *thermalNeutronScatteringLaw1d()
      { return getter<tsl::ThermalNeutronScatteringLaw1d>(_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(), "thermalNeutronScatteringLaw1d"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(value)
   CrossSection &_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(const _t &obj)
      { _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d() = obj; return *this; }

   // CoulombPlusNuclearElastic(value)
   CrossSection &CoulombPlusNuclearElastic(const std::optional<cpTransport::CoulombPlusNuclearElastic> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // URR_probabilityTables1d(value)
   CrossSection &URR_probabilityTables1d(const std::optional<transport::URR_probabilityTables1d> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // XYs1d(value)
   CrossSection &XYs1d(const std::optional<containers::XYs1d> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // Ys1d(value)
   CrossSection &Ys1d(const std::optional<containers::Ys1d> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // gridded1d(value)
   CrossSection &gridded1d(const std::optional<containers::Gridded1d> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // reference(value)
   CrossSection &reference(const std::optional<transport::Reference> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // regions1d(value)
   CrossSection &regions1d(const std::optional<containers::Regions1d> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // resonancesWithBackground(value)
   CrossSection &resonancesWithBackground(const std::optional<transport::ResonancesWithBackground> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // thermalNeutronScatteringLaw1d(value)
   CrossSection &thermalNeutronScatteringLaw1d(const std::optional<tsl::ThermalNeutronScatteringLaw1d> &obj)
      { if (obj) _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CrossSection() :
      Component{
         BodyText{},
         content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
      }
   {
      Component::finish();
   }

   // copy
   CrossSection(const CrossSection &other) :
      Component{
         other,
         content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CrossSection(CrossSection &&other) :
      Component{
         other,
         content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CrossSection(const Node &node) :
      Component{
         BodyText{},
         content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit CrossSection(
      const _t &_CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
   ) :
      Component{
         BodyText{},
         content._CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
      },
      content{
         _CoulombPlusNuclearElasticURR_probabilityTables1dXYs1dYs1dgridded1dreferenceregions1dresonancesWithBackgroundthermalNeutronScatteringLaw1d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CrossSection &operator=(const CrossSection &) = default;

   // move
   CrossSection &operator=(CrossSection &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/CrossSection/src/custom.hpp"

}; // class CrossSection

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
