
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_RECOIL
#define NJOY_GNDSTK_V2_0_TRANSPORT_RECOIL

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class Recoil
// -----------------------------------------------------------------------------

namespace transport {

class Recoil : public Component<Recoil> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "Recoil"; }
   static auto GNDSName() { return "recoil"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::string{}
            / Meta<>("href")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::string href;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // href
   const std::string &href() const
      { return content.href; }
   std::string &href()
      { return content.href; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // href(value)
   Recoil &href(const std::string &obj)
      { href() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Recoil() :
      Component{
         BodyText{},
         content.href
      }
   {
      Component::finish();
   }

   // copy
   Recoil(const Recoil &other) :
      Component{
         other,
         content.href
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Recoil(Recoil &&other) :
      Component{
         other,
         content.href
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Recoil(const Node &node) :
      Component{
         BodyText{},
         content.href
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Recoil(
      const std::string &href
   ) :
      Component{
         BodyText{},
         content.href
      },
      content{
         href
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Recoil &operator=(const Recoil &) = default;

   // move
   Recoil &operator=(Recoil &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/Recoil/src/custom.hpp"

}; // class Recoil

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
