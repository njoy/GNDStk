
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_SUMS
#define NJOY_GNDSTK_V2_0_TRANSPORT_SUMS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/CrossSectionSums.hpp"
#include "GNDStk/v2.0/transport/MultiplicitySums.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class Sums
// -----------------------------------------------------------------------------

namespace transport {

class Sums : public Component<Sums> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "Sums"; }
   static auto GNDSName() { return "sums"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         transport::CrossSectionSums{}
            / --Child<>("crossSectionSums") |
         std::optional<transport::MultiplicitySums>{}
            / --Child<>("multiplicitySums")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      transport::CrossSectionSums crossSectionSums;
      std::optional<transport::MultiplicitySums> multiplicitySums;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // crossSectionSums
   const transport::CrossSectionSums &crossSectionSums() const
      { return content.crossSectionSums; }
   transport::CrossSectionSums &crossSectionSums()
      { return content.crossSectionSums; }

   // multiplicitySums
   const std::optional<transport::MultiplicitySums> &multiplicitySums() const
      { return content.multiplicitySums; }
   std::optional<transport::MultiplicitySums> &multiplicitySums()
      { return content.multiplicitySums; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // crossSectionSums(value)
   Sums &crossSectionSums(const transport::CrossSectionSums &obj)
      { crossSectionSums() = obj; return *this; }

   // multiplicitySums(value)
   Sums &multiplicitySums(const std::optional<transport::MultiplicitySums> &obj)
      { multiplicitySums() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Sums() :
      Component{
         BodyText{},
         content.crossSectionSums,
         content.multiplicitySums
      }
   {
      Component::finish();
   }

   // copy
   Sums(const Sums &other) :
      Component{
         other,
         content.crossSectionSums,
         content.multiplicitySums
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Sums(Sums &&other) :
      Component{
         other,
         content.crossSectionSums,
         content.multiplicitySums
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Sums(const Node &node) :
      Component{
         BodyText{},
         content.crossSectionSums,
         content.multiplicitySums
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Sums(
      const transport::CrossSectionSums &crossSectionSums,
      const std::optional<transport::MultiplicitySums> &multiplicitySums
   ) :
      Component{
         BodyText{},
         content.crossSectionSums,
         content.multiplicitySums
      },
      content{
         crossSectionSums,
         multiplicitySums
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Sums &operator=(const Sums &) = default;

   // move
   Sums &operator=(Sums &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/Sums/src/custom.hpp"

}; // class Sums

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
