
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_TRANSPORT_KALBACHMANN
#define NJOY_GNDSTK_V2_0_TRANSPORT_KALBACHMANN

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/A.hpp"
#include "GNDStk/v2.0/transport/F.hpp"
#include "GNDStk/v2.0/transport/R.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// transport::
// class KalbachMann
// -----------------------------------------------------------------------------

namespace transport {

class KalbachMann : public Component<KalbachMann> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "transport"; }
   static auto className() { return "KalbachMann"; }
   static auto GNDSName() { return "KalbachMann"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("productFrame") |
         // children
         std::optional<transport::A>{}
            / --Child<>("a") |
         transport::F{}
            / --Child<>("f") |
         transport::R{}
            / --Child<>("r")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      XMLName productFrame;
      // children
      std::optional<transport::A> a;
      transport::F f;
      transport::R r;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // productFrame
   const XMLName &productFrame() const
      { return content.productFrame; }
   XMLName &productFrame()
      { return content.productFrame; }

   // a
   const std::optional<transport::A> &a() const
      { return content.a; }
   std::optional<transport::A> &a()
      { return content.a; }

   // f
   const transport::F &f() const
      { return content.f; }
   transport::F &f()
      { return content.f; }

   // r
   const transport::R &r() const
      { return content.r; }
   transport::R &r()
      { return content.r; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   KalbachMann &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // productFrame(value)
   KalbachMann &productFrame(const XMLName &obj)
      { productFrame() = obj; return *this; }

   // a(value)
   KalbachMann &a(const std::optional<transport::A> &obj)
      { a() = obj; return *this; }

   // f(value)
   KalbachMann &f(const transport::F &obj)
      { f() = obj; return *this; }

   // r(value)
   KalbachMann &r(const transport::R &obj)
      { r() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   KalbachMann() :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.a,
         content.f,
         content.r
      }
   {
      Component::finish();
   }

   // copy
   KalbachMann(const KalbachMann &other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.a,
         content.f,
         content.r
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   KalbachMann(KalbachMann &&other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.a,
         content.f,
         content.r
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   KalbachMann(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.a,
         content.f,
         content.r
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit KalbachMann(
      const std::optional<XMLName> &label,
      const XMLName &productFrame,
      const std::optional<transport::A> &a,
      const transport::F &f,
      const transport::R &r
   ) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.a,
         content.f,
         content.r
      },
      content{
         label,
         productFrame,
         a,
         f,
         r
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   KalbachMann &operator=(const KalbachMann &) = default;

   // move
   KalbachMann &operator=(KalbachMann &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/transport/KalbachMann/src/custom.hpp"

}; // class KalbachMann

} // namespace transport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
