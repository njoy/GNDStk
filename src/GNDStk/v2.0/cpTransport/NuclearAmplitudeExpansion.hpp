
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CPTRANSPORT_NUCLEARAMPLITUDEEXPANSION
#define NJOY_GNDSTK_V2_0_CPTRANSPORT_NUCLEARAMPLITUDEEXPANSION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/cpTransport/ImaginaryInterferenceTerm.hpp"
#include "GNDStk/v2.0/cpTransport/NuclearTerm.hpp"
#include "GNDStk/v2.0/cpTransport/RealInterferenceTerm.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// cpTransport::
// class NuclearAmplitudeExpansion
// -----------------------------------------------------------------------------

namespace cpTransport {

class NuclearAmplitudeExpansion : public Component<NuclearAmplitudeExpansion> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "cpTransport"; }
   static auto className() { return "NuclearAmplitudeExpansion"; }
   static auto GNDSName() { return "nuclearAmplitudeExpansion"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         cpTransport::ImaginaryInterferenceTerm{}
            / --Child<>("imaginaryInterferenceTerm") |
         cpTransport::NuclearTerm{}
            / --Child<>("nuclearTerm") |
         cpTransport::RealInterferenceTerm{}
            / --Child<>("realInterferenceTerm")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      cpTransport::ImaginaryInterferenceTerm imaginaryInterferenceTerm;
      cpTransport::NuclearTerm nuclearTerm;
      cpTransport::RealInterferenceTerm realInterferenceTerm;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // imaginaryInterferenceTerm
   const cpTransport::ImaginaryInterferenceTerm &imaginaryInterferenceTerm() const
      { return content.imaginaryInterferenceTerm; }
   cpTransport::ImaginaryInterferenceTerm &imaginaryInterferenceTerm()
      { return content.imaginaryInterferenceTerm; }

   // nuclearTerm
   const cpTransport::NuclearTerm &nuclearTerm() const
      { return content.nuclearTerm; }
   cpTransport::NuclearTerm &nuclearTerm()
      { return content.nuclearTerm; }

   // realInterferenceTerm
   const cpTransport::RealInterferenceTerm &realInterferenceTerm() const
      { return content.realInterferenceTerm; }
   cpTransport::RealInterferenceTerm &realInterferenceTerm()
      { return content.realInterferenceTerm; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // imaginaryInterferenceTerm(value)
   NuclearAmplitudeExpansion &imaginaryInterferenceTerm(const cpTransport::ImaginaryInterferenceTerm &obj)
      { imaginaryInterferenceTerm() = obj; return *this; }

   // nuclearTerm(value)
   NuclearAmplitudeExpansion &nuclearTerm(const cpTransport::NuclearTerm &obj)
      { nuclearTerm() = obj; return *this; }

   // realInterferenceTerm(value)
   NuclearAmplitudeExpansion &realInterferenceTerm(const cpTransport::RealInterferenceTerm &obj)
      { realInterferenceTerm() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   NuclearAmplitudeExpansion() :
      Component{
         BodyText{},
         content.imaginaryInterferenceTerm,
         content.nuclearTerm,
         content.realInterferenceTerm
      }
   {
      Component::finish();
   }

   // copy
   NuclearAmplitudeExpansion(const NuclearAmplitudeExpansion &other) :
      Component{
         other,
         content.imaginaryInterferenceTerm,
         content.nuclearTerm,
         content.realInterferenceTerm
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   NuclearAmplitudeExpansion(NuclearAmplitudeExpansion &&other) :
      Component{
         other,
         content.imaginaryInterferenceTerm,
         content.nuclearTerm,
         content.realInterferenceTerm
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   NuclearAmplitudeExpansion(const Node &node) :
      Component{
         BodyText{},
         content.imaginaryInterferenceTerm,
         content.nuclearTerm,
         content.realInterferenceTerm
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit NuclearAmplitudeExpansion(
      const cpTransport::ImaginaryInterferenceTerm &imaginaryInterferenceTerm,
      const cpTransport::NuclearTerm &nuclearTerm,
      const cpTransport::RealInterferenceTerm &realInterferenceTerm
   ) :
      Component{
         BodyText{},
         content.imaginaryInterferenceTerm,
         content.nuclearTerm,
         content.realInterferenceTerm
      },
      content{
         imaginaryInterferenceTerm,
         nuclearTerm,
         realInterferenceTerm
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   NuclearAmplitudeExpansion &operator=(const NuclearAmplitudeExpansion &) = default;

   // move
   NuclearAmplitudeExpansion &operator=(NuclearAmplitudeExpansion &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/cpTransport/NuclearAmplitudeExpansion/src/custom.hpp"

}; // class NuclearAmplitudeExpansion

} // namespace cpTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
