
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE
#define NJOY_GNDSTK_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/CrossSection.hpp"
#include "GNDStk/v2.0/transport/Distribution.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// cpTransport::
// class NuclearPlusInterference
// -----------------------------------------------------------------------------

namespace cpTransport {

class NuclearPlusInterference : public Component<NuclearPlusInterference> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "cpTransport"; }
   static auto className() { return "NuclearPlusInterference"; }
   static auto GNDSName() { return "nuclearPlusInterference"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Float64{}
            / Meta<>("muCutoff") |
         // children
         transport::CrossSection{}
            / --Child<>("crossSection") |
         transport::Distribution{}
            / --Child<>("distribution")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Float64 muCutoff;
      // children
      transport::CrossSection crossSection;
      transport::Distribution distribution;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // muCutoff
   const Float64 &muCutoff() const
      { return content.muCutoff; }
   Float64 &muCutoff()
      { return content.muCutoff; }

   // crossSection
   const transport::CrossSection &crossSection() const
      { return content.crossSection; }
   transport::CrossSection &crossSection()
      { return content.crossSection; }

   // distribution
   const transport::Distribution &distribution() const
      { return content.distribution; }
   transport::Distribution &distribution()
      { return content.distribution; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // muCutoff(value)
   NuclearPlusInterference &muCutoff(const Float64 &obj)
      { muCutoff() = obj; return *this; }

   // crossSection(value)
   NuclearPlusInterference &crossSection(const transport::CrossSection &obj)
      { crossSection() = obj; return *this; }

   // distribution(value)
   NuclearPlusInterference &distribution(const transport::Distribution &obj)
      { distribution() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   NuclearPlusInterference() :
      Component{
         BodyText{},
         content.muCutoff,
         content.crossSection,
         content.distribution
      }
   {
      Component::finish();
   }

   // copy
   NuclearPlusInterference(const NuclearPlusInterference &other) :
      Component{
         other,
         content.muCutoff,
         content.crossSection,
         content.distribution
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   NuclearPlusInterference(NuclearPlusInterference &&other) :
      Component{
         other,
         content.muCutoff,
         content.crossSection,
         content.distribution
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   NuclearPlusInterference(const Node &node) :
      Component{
         BodyText{},
         content.muCutoff,
         content.crossSection,
         content.distribution
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit NuclearPlusInterference(
      const Float64 &muCutoff,
      const transport::CrossSection &crossSection,
      const transport::Distribution &distribution
   ) :
      Component{
         BodyText{},
         content.muCutoff,
         content.crossSection,
         content.distribution
      },
      content{
         muCutoff,
         crossSection,
         distribution
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   NuclearPlusInterference &operator=(const NuclearPlusInterference &) = default;

   // move
   NuclearPlusInterference &operator=(NuclearPlusInterference &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/cpTransport/NuclearPlusInterference/src/custom.hpp"

}; // class NuclearPlusInterference

} // namespace cpTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
