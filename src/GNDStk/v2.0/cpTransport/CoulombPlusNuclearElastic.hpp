
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CPTRANSPORT_COULOMBPLUSNUCLEARELASTIC
#define NJOY_GNDSTK_V2_0_CPTRANSPORT_COULOMBPLUSNUCLEARELASTIC

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/cpTransport/RutherfordScattering.hpp"
#include "GNDStk/v2.0/cpTransport/NuclearAmplitudeExpansion.hpp"
#include "GNDStk/v2.0/cpTransport/NuclearPlusInterference.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// cpTransport::
// class CoulombPlusNuclearElastic
// -----------------------------------------------------------------------------

namespace cpTransport {

class CoulombPlusNuclearElastic : public Component<CoulombPlusNuclearElastic> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "cpTransport"; }
   static auto className() { return "CoulombPlusNuclearElastic"; }
   static auto GNDSName() { return "CoulombPlusNuclearElastic"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("href") |
         Defaulted<bool>{false}
            / Meta<>("identicalParticles") |
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("pid") |
         enums::Frame{}
            / Meta<>("productFrame") |
         // children
         std::optional<cpTransport::RutherfordScattering>{}
            / --Child<>("RutherfordScattering") |
         std::optional<cpTransport::NuclearAmplitudeExpansion>{}
            / --Child<>("nuclearAmplitudeExpansion") |
         std::optional<cpTransport::NuclearPlusInterference>{}
            / --Child<>("nuclearPlusInterference")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const bool identicalParticles = false;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> href;
      Defaulted<bool> identicalParticles{false};
      XMLName label;
      XMLName pid;
      enums::Frame productFrame;
      // children
      std::optional<cpTransport::RutherfordScattering> RutherfordScattering;
      std::optional<cpTransport::NuclearAmplitudeExpansion> nuclearAmplitudeExpansion;
      std::optional<cpTransport::NuclearPlusInterference> nuclearPlusInterference;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // href
   const std::optional<XMLName> &href() const
      { return content.href; }
   std::optional<XMLName> &href()
      { return content.href; }

   // identicalParticles
   const Defaulted<bool> &identicalParticles() const
      { return content.identicalParticles; }
   Defaulted<bool> &identicalParticles()
      { return content.identicalParticles; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // pid
   const XMLName &pid() const
      { return content.pid; }
   XMLName &pid()
      { return content.pid; }

   // productFrame
   const enums::Frame &productFrame() const
      { return content.productFrame; }
   enums::Frame &productFrame()
      { return content.productFrame; }

   // RutherfordScattering
   const std::optional<cpTransport::RutherfordScattering> &RutherfordScattering() const
      { return content.RutherfordScattering; }
   std::optional<cpTransport::RutherfordScattering> &RutherfordScattering()
      { return content.RutherfordScattering; }

   // nuclearAmplitudeExpansion
   const std::optional<cpTransport::NuclearAmplitudeExpansion> &nuclearAmplitudeExpansion() const
      { return content.nuclearAmplitudeExpansion; }
   std::optional<cpTransport::NuclearAmplitudeExpansion> &nuclearAmplitudeExpansion()
      { return content.nuclearAmplitudeExpansion; }

   // nuclearPlusInterference
   const std::optional<cpTransport::NuclearPlusInterference> &nuclearPlusInterference() const
      { return content.nuclearPlusInterference; }
   std::optional<cpTransport::NuclearPlusInterference> &nuclearPlusInterference()
      { return content.nuclearPlusInterference; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // href(value)
   CoulombPlusNuclearElastic &href(const std::optional<XMLName> &obj)
      { href() = obj; return *this; }

   // identicalParticles(value)
   CoulombPlusNuclearElastic &identicalParticles(const Defaulted<bool> &obj)
      { content.identicalParticles = obj; return *this; }
   CoulombPlusNuclearElastic &identicalParticles(const std::optional<bool> &obj)
      { content.identicalParticles = obj; return *this; }

   // label(value)
   CoulombPlusNuclearElastic &label(const XMLName &obj)
      { label() = obj; return *this; }

   // pid(value)
   CoulombPlusNuclearElastic &pid(const XMLName &obj)
      { pid() = obj; return *this; }

   // productFrame(value)
   CoulombPlusNuclearElastic &productFrame(const enums::Frame &obj)
      { productFrame() = obj; return *this; }

   // RutherfordScattering(value)
   CoulombPlusNuclearElastic &RutherfordScattering(const std::optional<cpTransport::RutherfordScattering> &obj)
      { RutherfordScattering() = obj; return *this; }

   // nuclearAmplitudeExpansion(value)
   CoulombPlusNuclearElastic &nuclearAmplitudeExpansion(const std::optional<cpTransport::NuclearAmplitudeExpansion> &obj)
      { nuclearAmplitudeExpansion() = obj; return *this; }

   // nuclearPlusInterference(value)
   CoulombPlusNuclearElastic &nuclearPlusInterference(const std::optional<cpTransport::NuclearPlusInterference> &obj)
      { nuclearPlusInterference() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CoulombPlusNuclearElastic() :
      Component{
         BodyText{},
         content.href,
         content.identicalParticles,
         content.label,
         content.pid,
         content.productFrame,
         content.RutherfordScattering,
         content.nuclearAmplitudeExpansion,
         content.nuclearPlusInterference
      }
   {
      Component::finish();
   }

   // copy
   CoulombPlusNuclearElastic(const CoulombPlusNuclearElastic &other) :
      Component{
         other,
         content.href,
         content.identicalParticles,
         content.label,
         content.pid,
         content.productFrame,
         content.RutherfordScattering,
         content.nuclearAmplitudeExpansion,
         content.nuclearPlusInterference
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CoulombPlusNuclearElastic(CoulombPlusNuclearElastic &&other) :
      Component{
         other,
         content.href,
         content.identicalParticles,
         content.label,
         content.pid,
         content.productFrame,
         content.RutherfordScattering,
         content.nuclearAmplitudeExpansion,
         content.nuclearPlusInterference
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CoulombPlusNuclearElastic(const Node &node) :
      Component{
         BodyText{},
         content.href,
         content.identicalParticles,
         content.label,
         content.pid,
         content.productFrame,
         content.RutherfordScattering,
         content.nuclearAmplitudeExpansion,
         content.nuclearPlusInterference
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit CoulombPlusNuclearElastic(
      const std::optional<XMLName> &href,
      const std::optional<bool> &identicalParticles,
      const XMLName &label,
      const XMLName &pid,
      const enums::Frame &productFrame,
      const std::optional<cpTransport::RutherfordScattering> &RutherfordScattering,
      const std::optional<cpTransport::NuclearAmplitudeExpansion> &nuclearAmplitudeExpansion,
      const std::optional<cpTransport::NuclearPlusInterference> &nuclearPlusInterference
   ) :
      Component{
         BodyText{},
         content.href,
         content.identicalParticles,
         content.label,
         content.pid,
         content.productFrame,
         content.RutherfordScattering,
         content.nuclearAmplitudeExpansion,
         content.nuclearPlusInterference
      },
      content{
         href,
         Defaulted<bool>(defaults.identicalParticles,identicalParticles),
         label,
         pid,
         productFrame,
         RutherfordScattering,
         nuclearAmplitudeExpansion,
         nuclearPlusInterference
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CoulombPlusNuclearElastic &operator=(const CoulombPlusNuclearElastic &) = default;

   // move
   CoulombPlusNuclearElastic &operator=(CoulombPlusNuclearElastic &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/cpTransport/CoulombPlusNuclearElastic/src/custom.hpp"

}; // class CoulombPlusNuclearElastic

} // namespace cpTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
