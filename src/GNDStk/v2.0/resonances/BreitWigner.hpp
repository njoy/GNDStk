
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_BREITWIGNER
#define NJOY_GNDSTK_V2_0_RESONANCES_BREITWIGNER

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/PoPs.hpp"
#include "GNDStk/v2.0/resonances/HardSphereRadius.hpp"
#include "GNDStk/v2.0/resonances/ResonanceParameters.hpp"
#include "GNDStk/v2.0/resonances/ScatteringRadius.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class BreitWigner
// -----------------------------------------------------------------------------

namespace resonances {

class BreitWigner : public Component<BreitWigner> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "BreitWigner"; }
   static auto GNDSName() { return "BreitWigner"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("approximation") |
         Defaulted<bool>{false}
            / Meta<>("calculateChannelRadius") |
         XMLName{}
            / Meta<>("label") |
         Defaulted<bool>{false}
            / Meta<>("useForSelfShieldingOnly") |
         // children
         std::optional<pops::PoPs>{}
            / --Child<>("PoPs") |
         std::optional<resonances::HardSphereRadius>{}
            / --Child<>("hardSphereRadius") |
         std::optional<resonances::ResonanceParameters>{}
            / --Child<>("resonanceParameters") |
         std::optional<resonances::ScatteringRadius>{}
            / --Child<>("scatteringRadius")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const bool calculateChannelRadius = false;
      static inline const bool useForSelfShieldingOnly = false;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName approximation;
      Defaulted<bool> calculateChannelRadius{false};
      XMLName label;
      Defaulted<bool> useForSelfShieldingOnly{false};
      // children
      std::optional<pops::PoPs> PoPs;
      std::optional<resonances::HardSphereRadius> hardSphereRadius;
      std::optional<resonances::ResonanceParameters> resonanceParameters;
      std::optional<resonances::ScatteringRadius> scatteringRadius;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // approximation
   const XMLName &approximation() const
      { return content.approximation; }
   XMLName &approximation()
      { return content.approximation; }

   // calculateChannelRadius
   const Defaulted<bool> &calculateChannelRadius() const
      { return content.calculateChannelRadius; }
   Defaulted<bool> &calculateChannelRadius()
      { return content.calculateChannelRadius; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // useForSelfShieldingOnly
   const Defaulted<bool> &useForSelfShieldingOnly() const
      { return content.useForSelfShieldingOnly; }
   Defaulted<bool> &useForSelfShieldingOnly()
      { return content.useForSelfShieldingOnly; }

   // PoPs
   const std::optional<pops::PoPs> &PoPs() const
      { return content.PoPs; }
   std::optional<pops::PoPs> &PoPs()
      { return content.PoPs; }

   // hardSphereRadius
   const std::optional<resonances::HardSphereRadius> &hardSphereRadius() const
      { return content.hardSphereRadius; }
   std::optional<resonances::HardSphereRadius> &hardSphereRadius()
      { return content.hardSphereRadius; }

   // resonanceParameters
   const std::optional<resonances::ResonanceParameters> &resonanceParameters() const
      { return content.resonanceParameters; }
   std::optional<resonances::ResonanceParameters> &resonanceParameters()
      { return content.resonanceParameters; }

   // scatteringRadius
   const std::optional<resonances::ScatteringRadius> &scatteringRadius() const
      { return content.scatteringRadius; }
   std::optional<resonances::ScatteringRadius> &scatteringRadius()
      { return content.scatteringRadius; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // approximation(value)
   BreitWigner &approximation(const XMLName &obj)
      { approximation() = obj; return *this; }

   // calculateChannelRadius(value)
   BreitWigner &calculateChannelRadius(const Defaulted<bool> &obj)
      { content.calculateChannelRadius = obj; return *this; }
   BreitWigner &calculateChannelRadius(const std::optional<bool> &obj)
      { content.calculateChannelRadius = obj; return *this; }

   // label(value)
   BreitWigner &label(const XMLName &obj)
      { label() = obj; return *this; }

   // useForSelfShieldingOnly(value)
   BreitWigner &useForSelfShieldingOnly(const Defaulted<bool> &obj)
      { content.useForSelfShieldingOnly = obj; return *this; }
   BreitWigner &useForSelfShieldingOnly(const std::optional<bool> &obj)
      { content.useForSelfShieldingOnly = obj; return *this; }

   // PoPs(value)
   BreitWigner &PoPs(const std::optional<pops::PoPs> &obj)
      { PoPs() = obj; return *this; }

   // hardSphereRadius(value)
   BreitWigner &hardSphereRadius(const std::optional<resonances::HardSphereRadius> &obj)
      { hardSphereRadius() = obj; return *this; }

   // resonanceParameters(value)
   BreitWigner &resonanceParameters(const std::optional<resonances::ResonanceParameters> &obj)
      { resonanceParameters() = obj; return *this; }

   // scatteringRadius(value)
   BreitWigner &scatteringRadius(const std::optional<resonances::ScatteringRadius> &obj)
      { scatteringRadius() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   BreitWigner() :
      Component{
         BodyText{},
         content.approximation,
         content.calculateChannelRadius,
         content.label,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.hardSphereRadius,
         content.resonanceParameters,
         content.scatteringRadius
      }
   {
      Component::finish();
   }

   // copy
   BreitWigner(const BreitWigner &other) :
      Component{
         other,
         content.approximation,
         content.calculateChannelRadius,
         content.label,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.hardSphereRadius,
         content.resonanceParameters,
         content.scatteringRadius
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   BreitWigner(BreitWigner &&other) :
      Component{
         other,
         content.approximation,
         content.calculateChannelRadius,
         content.label,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.hardSphereRadius,
         content.resonanceParameters,
         content.scatteringRadius
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   BreitWigner(const Node &node) :
      Component{
         BodyText{},
         content.approximation,
         content.calculateChannelRadius,
         content.label,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.hardSphereRadius,
         content.resonanceParameters,
         content.scatteringRadius
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit BreitWigner(
      const XMLName &approximation,
      const std::optional<bool> &calculateChannelRadius,
      const XMLName &label,
      const std::optional<bool> &useForSelfShieldingOnly,
      const std::optional<pops::PoPs> &PoPs,
      const std::optional<resonances::HardSphereRadius> &hardSphereRadius,
      const std::optional<resonances::ResonanceParameters> &resonanceParameters,
      const std::optional<resonances::ScatteringRadius> &scatteringRadius
   ) :
      Component{
         BodyText{},
         content.approximation,
         content.calculateChannelRadius,
         content.label,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.hardSphereRadius,
         content.resonanceParameters,
         content.scatteringRadius
      },
      content{
         approximation,
         Defaulted<bool>(defaults.calculateChannelRadius,calculateChannelRadius),
         label,
         Defaulted<bool>(defaults.useForSelfShieldingOnly,useForSelfShieldingOnly),
         PoPs,
         hardSphereRadius,
         resonanceParameters,
         scatteringRadius
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   BreitWigner &operator=(const BreitWigner &) = default;

   // move
   BreitWigner &operator=(BreitWigner &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/BreitWigner/src/custom.hpp"

}; // class BreitWigner

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
