
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_CHANNEL
#define NJOY_GNDSTK_V2_0_RESONANCES_CHANNEL

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/resonances/ExternalRMatrix.hpp"
#include "GNDStk/v2.0/resonances/HardSphereRadius.hpp"
#include "GNDStk/v2.0/resonances/ScatteringRadius.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class Channel
// -----------------------------------------------------------------------------

namespace resonances {

class Channel : public Component<Channel> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "Channel"; }
   static auto GNDSName() { return "channel"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("L") |
         std::optional<Float64>{}
            / Meta<>("boundaryConditionValue") |
         Fraction32{}
            / Meta<>("channelSpin") |
         Integer32{}
            / Meta<>("columnIndex") |
         XMLName{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("resonanceReaction") |
         // children
         std::optional<resonances::ExternalRMatrix>{}
            / --Child<>("externalRMatrix") |
         std::optional<resonances::HardSphereRadius>{}
            / --Child<>("hardSphereRadius") |
         std::optional<resonances::ScatteringRadius>{}
            / --Child<>("scatteringRadius")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Integer32 L;
      std::optional<Float64> boundaryConditionValue;
      Fraction32 channelSpin;
      Integer32 columnIndex;
      XMLName label;
      std::string resonanceReaction;
      // children
      std::optional<resonances::ExternalRMatrix> externalRMatrix;
      std::optional<resonances::HardSphereRadius> hardSphereRadius;
      std::optional<resonances::ScatteringRadius> scatteringRadius;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // L
   const Integer32 &L() const
      { return content.L; }
   Integer32 &L()
      { return content.L; }

   // boundaryConditionValue
   const std::optional<Float64> &boundaryConditionValue() const
      { return content.boundaryConditionValue; }
   std::optional<Float64> &boundaryConditionValue()
      { return content.boundaryConditionValue; }

   // channelSpin
   const Fraction32 &channelSpin() const
      { return content.channelSpin; }
   Fraction32 &channelSpin()
      { return content.channelSpin; }

   // columnIndex
   const Integer32 &columnIndex() const
      { return content.columnIndex; }
   Integer32 &columnIndex()
      { return content.columnIndex; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // resonanceReaction
   const std::string &resonanceReaction() const
      { return content.resonanceReaction; }
   std::string &resonanceReaction()
      { return content.resonanceReaction; }

   // externalRMatrix
   const std::optional<resonances::ExternalRMatrix> &externalRMatrix() const
      { return content.externalRMatrix; }
   std::optional<resonances::ExternalRMatrix> &externalRMatrix()
      { return content.externalRMatrix; }

   // hardSphereRadius
   const std::optional<resonances::HardSphereRadius> &hardSphereRadius() const
      { return content.hardSphereRadius; }
   std::optional<resonances::HardSphereRadius> &hardSphereRadius()
      { return content.hardSphereRadius; }

   // scatteringRadius
   const std::optional<resonances::ScatteringRadius> &scatteringRadius() const
      { return content.scatteringRadius; }
   std::optional<resonances::ScatteringRadius> &scatteringRadius()
      { return content.scatteringRadius; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // L(value)
   Channel &L(const Integer32 &obj)
      { L() = obj; return *this; }

   // boundaryConditionValue(value)
   Channel &boundaryConditionValue(const std::optional<Float64> &obj)
      { boundaryConditionValue() = obj; return *this; }

   // channelSpin(value)
   Channel &channelSpin(const Fraction32 &obj)
      { channelSpin() = obj; return *this; }

   // columnIndex(value)
   Channel &columnIndex(const Integer32 &obj)
      { columnIndex() = obj; return *this; }

   // label(value)
   Channel &label(const XMLName &obj)
      { label() = obj; return *this; }

   // resonanceReaction(value)
   Channel &resonanceReaction(const std::string &obj)
      { resonanceReaction() = obj; return *this; }

   // externalRMatrix(value)
   Channel &externalRMatrix(const std::optional<resonances::ExternalRMatrix> &obj)
      { externalRMatrix() = obj; return *this; }

   // hardSphereRadius(value)
   Channel &hardSphereRadius(const std::optional<resonances::HardSphereRadius> &obj)
      { hardSphereRadius() = obj; return *this; }

   // scatteringRadius(value)
   Channel &scatteringRadius(const std::optional<resonances::ScatteringRadius> &obj)
      { scatteringRadius() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Channel() :
      Component{
         BodyText{},
         content.L,
         content.boundaryConditionValue,
         content.channelSpin,
         content.columnIndex,
         content.label,
         content.resonanceReaction,
         content.externalRMatrix,
         content.hardSphereRadius,
         content.scatteringRadius
      }
   {
      Component::finish();
   }

   // copy
   Channel(const Channel &other) :
      Component{
         other,
         content.L,
         content.boundaryConditionValue,
         content.channelSpin,
         content.columnIndex,
         content.label,
         content.resonanceReaction,
         content.externalRMatrix,
         content.hardSphereRadius,
         content.scatteringRadius
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Channel(Channel &&other) :
      Component{
         other,
         content.L,
         content.boundaryConditionValue,
         content.channelSpin,
         content.columnIndex,
         content.label,
         content.resonanceReaction,
         content.externalRMatrix,
         content.hardSphereRadius,
         content.scatteringRadius
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Channel(const Node &node) :
      Component{
         BodyText{},
         content.L,
         content.boundaryConditionValue,
         content.channelSpin,
         content.columnIndex,
         content.label,
         content.resonanceReaction,
         content.externalRMatrix,
         content.hardSphereRadius,
         content.scatteringRadius
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Channel(
      const Integer32 &L,
      const std::optional<Float64> &boundaryConditionValue,
      const Fraction32 &channelSpin,
      const Integer32 &columnIndex,
      const XMLName &label,
      const std::string &resonanceReaction,
      const std::optional<resonances::ExternalRMatrix> &externalRMatrix,
      const std::optional<resonances::HardSphereRadius> &hardSphereRadius,
      const std::optional<resonances::ScatteringRadius> &scatteringRadius
   ) :
      Component{
         BodyText{},
         content.L,
         content.boundaryConditionValue,
         content.channelSpin,
         content.columnIndex,
         content.label,
         content.resonanceReaction,
         content.externalRMatrix,
         content.hardSphereRadius,
         content.scatteringRadius
      },
      content{
         L,
         boundaryConditionValue,
         channelSpin,
         columnIndex,
         label,
         resonanceReaction,
         externalRMatrix,
         hardSphereRadius,
         scatteringRadius
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Channel &operator=(const Channel &) = default;

   // move
   Channel &operator=(Channel &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/Channel/src/custom.hpp"

}; // class Channel

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
