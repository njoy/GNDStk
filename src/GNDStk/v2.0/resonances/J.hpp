
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_J
#define NJOY_GNDSTK_V2_0_RESONANCES_J

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/resonances/LevelSpacing.hpp"
#include "GNDStk/v2.0/resonances/Widths.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class J
// -----------------------------------------------------------------------------

namespace resonances {

class J : public Component<J> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "J"; }
   static auto GNDSName() { return "J"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         Fraction32{}
            / Meta<>("value") |
         // children
         resonances::LevelSpacing{}
            / --Child<>("levelSpacing") |
         resonances::Widths{}
            / --Child<>("widths")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      Fraction32 value;
      // children
      resonances::LevelSpacing levelSpacing;
      resonances::Widths widths;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // value
   const Fraction32 &value() const
      { return content.value; }
   Fraction32 &value()
      { return content.value; }

   // levelSpacing
   const resonances::LevelSpacing &levelSpacing() const
      { return content.levelSpacing; }
   resonances::LevelSpacing &levelSpacing()
      { return content.levelSpacing; }

   // widths
   const resonances::Widths &widths() const
      { return content.widths; }
   resonances::Widths &widths()
      { return content.widths; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   J &label(const XMLName &obj)
      { label() = obj; return *this; }

   // value(value)
   J &value(const Fraction32 &obj)
      { value() = obj; return *this; }

   // levelSpacing(value)
   J &levelSpacing(const resonances::LevelSpacing &obj)
      { levelSpacing() = obj; return *this; }

   // widths(value)
   J &widths(const resonances::Widths &obj)
      { widths() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   J() :
      Component{
         BodyText{},
         content.label,
         content.value,
         content.levelSpacing,
         content.widths
      }
   {
      Component::finish();
   }

   // copy
   J(const J &other) :
      Component{
         other,
         content.label,
         content.value,
         content.levelSpacing,
         content.widths
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   J(J &&other) :
      Component{
         other,
         content.label,
         content.value,
         content.levelSpacing,
         content.widths
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   J(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.value,
         content.levelSpacing,
         content.widths
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit J(
      const XMLName &label,
      const Fraction32 &value,
      const resonances::LevelSpacing &levelSpacing,
      const resonances::Widths &widths
   ) :
      Component{
         BodyText{},
         content.label,
         content.value,
         content.levelSpacing,
         content.widths
      },
      content{
         label,
         value,
         levelSpacing,
         widths
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   J &operator=(const J &) = default;

   // move
   J &operator=(J &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/J/src/custom.hpp"

}; // class J

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
