
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_RESOLVED
#define NJOY_GNDSTK_V2_0_RESONANCES_RESOLVED

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/resonances/BreitWigner.hpp"
#include "GNDStk/v2.0/resonances/RMatrix.hpp"
#include "GNDStk/v2.0/resonances/EnergyIntervals.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class Resolved
// -----------------------------------------------------------------------------

namespace resonances {

class Resolved : public Component<Resolved> {

   using _t = std::variant<
      resonances::BreitWigner,
      resonances::RMatrix,
      resonances::EnergyIntervals
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "Resolved"; }
   static auto GNDSName() { return "resolved"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Float64{}
            / Meta<>("domainMax") |
         Float64{}
            / Meta<>("domainMin") |
         XMLName{}
            / Meta<>("domainUnit") |
         // children
         _t{}
            / --(Child<>("BreitWigner") || Child<>("RMatrix") || Child<>("energyIntervals"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Float64 domainMax;
      Float64 domainMin;
      XMLName domainUnit;
      // children - variant
      _t _BreitWignerRMatrixenergyIntervals;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // domainMax
   const Float64 &domainMax() const
      { return content.domainMax; }
   Float64 &domainMax()
      { return content.domainMax; }

   // domainMin
   const Float64 &domainMin() const
      { return content.domainMin; }
   Float64 &domainMin()
      { return content.domainMin; }

   // domainUnit
   const XMLName &domainUnit() const
      { return content.domainUnit; }
   XMLName &domainUnit()
      { return content.domainUnit; }

   // _BreitWignerRMatrixenergyIntervals
   const _t &_BreitWignerRMatrixenergyIntervals() const
      { return content._BreitWignerRMatrixenergyIntervals; }
   _t &_BreitWignerRMatrixenergyIntervals()
      { return content._BreitWignerRMatrixenergyIntervals; }

   // BreitWigner
   const resonances::BreitWigner *BreitWigner() const
      { return getter<resonances::BreitWigner>(_BreitWignerRMatrixenergyIntervals(), "BreitWigner"); }
   resonances::BreitWigner *BreitWigner()
      { return getter<resonances::BreitWigner>(_BreitWignerRMatrixenergyIntervals(), "BreitWigner"); }

   // RMatrix
   const resonances::RMatrix *RMatrix() const
      { return getter<resonances::RMatrix>(_BreitWignerRMatrixenergyIntervals(), "RMatrix"); }
   resonances::RMatrix *RMatrix()
      { return getter<resonances::RMatrix>(_BreitWignerRMatrixenergyIntervals(), "RMatrix"); }

   // energyIntervals
   const resonances::EnergyIntervals *energyIntervals() const
      { return getter<resonances::EnergyIntervals>(_BreitWignerRMatrixenergyIntervals(), "energyIntervals"); }
   resonances::EnergyIntervals *energyIntervals()
      { return getter<resonances::EnergyIntervals>(_BreitWignerRMatrixenergyIntervals(), "energyIntervals"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // domainMax(value)
   Resolved &domainMax(const Float64 &obj)
      { domainMax() = obj; return *this; }

   // domainMin(value)
   Resolved &domainMin(const Float64 &obj)
      { domainMin() = obj; return *this; }

   // domainUnit(value)
   Resolved &domainUnit(const XMLName &obj)
      { domainUnit() = obj; return *this; }

   // _BreitWignerRMatrixenergyIntervals(value)
   Resolved &_BreitWignerRMatrixenergyIntervals(const _t &obj)
      { _BreitWignerRMatrixenergyIntervals() = obj; return *this; }

   // BreitWigner(value)
   Resolved &BreitWigner(const std::optional<resonances::BreitWigner> &obj)
      { if (obj) _BreitWignerRMatrixenergyIntervals(obj.value()); return *this; }

   // RMatrix(value)
   Resolved &RMatrix(const std::optional<resonances::RMatrix> &obj)
      { if (obj) _BreitWignerRMatrixenergyIntervals(obj.value()); return *this; }

   // energyIntervals(value)
   Resolved &energyIntervals(const std::optional<resonances::EnergyIntervals> &obj)
      { if (obj) _BreitWignerRMatrixenergyIntervals(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Resolved() :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content._BreitWignerRMatrixenergyIntervals
      }
   {
      Component::finish();
   }

   // copy
   Resolved(const Resolved &other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content._BreitWignerRMatrixenergyIntervals
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Resolved(Resolved &&other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content._BreitWignerRMatrixenergyIntervals
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Resolved(const Node &node) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content._BreitWignerRMatrixenergyIntervals
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Resolved(
      const Float64 &domainMax,
      const Float64 &domainMin,
      const XMLName &domainUnit,
      const _t &_BreitWignerRMatrixenergyIntervals
   ) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content._BreitWignerRMatrixenergyIntervals
      },
      content{
         domainMax,
         domainMin,
         domainUnit,
         _BreitWignerRMatrixenergyIntervals
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Resolved &operator=(const Resolved &) = default;

   // move
   Resolved &operator=(Resolved &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/Resolved/src/custom.hpp"

}; // class Resolved

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
