
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_HARDSPHERERADIUS
#define NJOY_GNDSTK_V2_0_RESONANCES_HARDSPHERERADIUS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Constant1d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class HardSphereRadius
// -----------------------------------------------------------------------------

namespace resonances {

class HardSphereRadius : public Component<HardSphereRadius> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "HardSphereRadius"; }
   static auto GNDSName() { return "hardSphereRadius"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         containers::Constant1d{}
            / --Child<>("constant1d")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      containers::Constant1d constant1d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // constant1d
   const containers::Constant1d &constant1d() const
      { return content.constant1d; }
   containers::Constant1d &constant1d()
      { return content.constant1d; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // constant1d(value)
   HardSphereRadius &constant1d(const containers::Constant1d &obj)
      { constant1d() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   HardSphereRadius() :
      Component{
         BodyText{},
         content.constant1d
      }
   {
      Component::finish();
   }

   // copy
   HardSphereRadius(const HardSphereRadius &other) :
      Component{
         other,
         content.constant1d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   HardSphereRadius(HardSphereRadius &&other) :
      Component{
         other,
         content.constant1d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   HardSphereRadius(const Node &node) :
      Component{
         BodyText{},
         content.constant1d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit HardSphereRadius(
      const containers::Constant1d &constant1d
   ) :
      Component{
         BodyText{},
         content.constant1d
      },
      content{
         constant1d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   HardSphereRadius &operator=(const HardSphereRadius &) = default;

   // move
   HardSphereRadius &operator=(HardSphereRadius &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/HardSphereRadius/src/custom.hpp"

}; // class HardSphereRadius

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
