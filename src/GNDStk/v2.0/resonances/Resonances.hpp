
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_RESONANCES
#define NJOY_GNDSTK_V2_0_RESONANCES_RESONANCES

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/resonances/HardSphereRadius.hpp"
#include "GNDStk/v2.0/resonances/Resolved.hpp"
#include "GNDStk/v2.0/resonances/ScatteringRadius.hpp"
#include "GNDStk/v2.0/resonances/Unresolved.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class Resonances
// -----------------------------------------------------------------------------

namespace resonances {

class Resonances : public Component<Resonances> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "Resonances"; }
   static auto GNDSName() { return "resonances"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("href") |
         // children
         std::optional<resonances::HardSphereRadius>{}
            / --Child<>("hardSphereRadius") |
         std::optional<resonances::Resolved>{}
            / ++Child<>("resolved") |
         resonances::ScatteringRadius{}
            / --Child<>("scatteringRadius") |
         std::optional<resonances::Unresolved>{}
            / ++Child<>("unresolved")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> href;
      // children
      std::optional<resonances::HardSphereRadius> hardSphereRadius;
      std::optional<std::vector<resonances::Resolved>> resolved;
      resonances::ScatteringRadius scatteringRadius;
      std::optional<std::vector<resonances::Unresolved>> unresolved;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // href
   const std::optional<XMLName> &href() const
      { return content.href; }
   std::optional<XMLName> &href()
      { return content.href; }

   // hardSphereRadius
   const std::optional<resonances::HardSphereRadius> &hardSphereRadius() const
      { return content.hardSphereRadius; }
   std::optional<resonances::HardSphereRadius> &hardSphereRadius()
      { return content.hardSphereRadius; }

   // resolved
   const std::optional<std::vector<resonances::Resolved>> &resolved() const
      { return content.resolved; }
   std::optional<std::vector<resonances::Resolved>> &resolved()
      { return content.resolved; }

   // resolved(index)
   const resonances::Resolved &resolved(const std::size_t index) const
      { return getter(resolved(), index, "resolved"); }
   resonances::Resolved &resolved(const std::size_t index)
      { return getter(resolved(), index, "resolved"); }

   // resolved(label)
   const resonances::Resolved &resolved(const std::string &label) const
      { return getter(resolved(), label, "resolved"); }
   resonances::Resolved &resolved(const std::string &label)
      { return getter(resolved(), label, "resolved"); }

   // scatteringRadius
   const resonances::ScatteringRadius &scatteringRadius() const
      { return content.scatteringRadius; }
   resonances::ScatteringRadius &scatteringRadius()
      { return content.scatteringRadius; }

   // unresolved
   const std::optional<std::vector<resonances::Unresolved>> &unresolved() const
      { return content.unresolved; }
   std::optional<std::vector<resonances::Unresolved>> &unresolved()
      { return content.unresolved; }

   // unresolved(index)
   const resonances::Unresolved &unresolved(const std::size_t index) const
      { return getter(unresolved(), index, "unresolved"); }
   resonances::Unresolved &unresolved(const std::size_t index)
      { return getter(unresolved(), index, "unresolved"); }

   // unresolved(label)
   const resonances::Unresolved &unresolved(const std::string &label) const
      { return getter(unresolved(), label, "unresolved"); }
   resonances::Unresolved &unresolved(const std::string &label)
      { return getter(unresolved(), label, "unresolved"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // href(value)
   Resonances &href(const std::optional<XMLName> &obj)
      { href() = obj; return *this; }

   // hardSphereRadius(value)
   Resonances &hardSphereRadius(const std::optional<resonances::HardSphereRadius> &obj)
      { hardSphereRadius() = obj; return *this; }

   // resolved(value)
   Resonances &resolved(const std::optional<std::vector<resonances::Resolved>> &obj)
      { resolved() = obj; return *this; }

   // resolved(index,value)
   Resonances &resolved(
      const std::size_t index,
      const resonances::Resolved &obj
   ) {
      resolved(index) = obj; return *this;
   }

   // resolved(label,value)
   Resonances &resolved(
      const std::string &label,
      const resonances::Resolved &obj
   ) {
      resolved(label) = obj; return *this;
   }

   // scatteringRadius(value)
   Resonances &scatteringRadius(const resonances::ScatteringRadius &obj)
      { scatteringRadius() = obj; return *this; }

   // unresolved(value)
   Resonances &unresolved(const std::optional<std::vector<resonances::Unresolved>> &obj)
      { unresolved() = obj; return *this; }

   // unresolved(index,value)
   Resonances &unresolved(
      const std::size_t index,
      const resonances::Unresolved &obj
   ) {
      unresolved(index) = obj; return *this;
   }

   // unresolved(label,value)
   Resonances &unresolved(
      const std::string &label,
      const resonances::Unresolved &obj
   ) {
      unresolved(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Resonances() :
      Component{
         BodyText{},
         content.href,
         content.hardSphereRadius,
         content.resolved,
         content.scatteringRadius,
         content.unresolved
      }
   {
      Component::finish();
   }

   // copy
   Resonances(const Resonances &other) :
      Component{
         other,
         content.href,
         content.hardSphereRadius,
         content.resolved,
         content.scatteringRadius,
         content.unresolved
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Resonances(Resonances &&other) :
      Component{
         other,
         content.href,
         content.hardSphereRadius,
         content.resolved,
         content.scatteringRadius,
         content.unresolved
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Resonances(const Node &node) :
      Component{
         BodyText{},
         content.href,
         content.hardSphereRadius,
         content.resolved,
         content.scatteringRadius,
         content.unresolved
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Resonances(
      const std::optional<XMLName> &href,
      const std::optional<resonances::HardSphereRadius> &hardSphereRadius,
      const std::optional<std::vector<resonances::Resolved>> &resolved,
      const resonances::ScatteringRadius &scatteringRadius,
      const std::optional<std::vector<resonances::Unresolved>> &unresolved
   ) :
      Component{
         BodyText{},
         content.href,
         content.hardSphereRadius,
         content.resolved,
         content.scatteringRadius,
         content.unresolved
      },
      content{
         href,
         hardSphereRadius,
         resolved,
         scatteringRadius,
         unresolved
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Resonances &operator=(const Resonances &) = default;

   // move
   Resonances &operator=(Resonances &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/Resonances/src/custom.hpp"

}; // class Resonances

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
