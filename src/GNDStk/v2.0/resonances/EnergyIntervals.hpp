
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_ENERGYINTERVALS
#define NJOY_GNDSTK_V2_0_RESONANCES_ENERGYINTERVALS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/resonances/EnergyInterval.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class EnergyIntervals
// -----------------------------------------------------------------------------

namespace resonances {

class EnergyIntervals : public Component<EnergyIntervals> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "EnergyIntervals"; }
   static auto GNDSName() { return "energyIntervals"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         resonances::EnergyInterval{}
            / ++Child<>("energyInterval")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      // children
      std::vector<resonances::EnergyInterval> energyInterval;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // energyInterval
   const std::vector<resonances::EnergyInterval> &energyInterval() const
      { return content.energyInterval; }
   std::vector<resonances::EnergyInterval> &energyInterval()
      { return content.energyInterval; }

   // energyInterval(index)
   const resonances::EnergyInterval &energyInterval(const std::size_t index) const
      { return getter(energyInterval(), index, "energyInterval"); }
   resonances::EnergyInterval &energyInterval(const std::size_t index)
      { return getter(energyInterval(), index, "energyInterval"); }

   // energyInterval(label)
   const resonances::EnergyInterval &energyInterval(const std::string &label) const
      { return getter(energyInterval(), label, "energyInterval"); }
   resonances::EnergyInterval &energyInterval(const std::string &label)
      { return getter(energyInterval(), label, "energyInterval"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   EnergyIntervals &label(const XMLName &obj)
      { label() = obj; return *this; }

   // energyInterval(value)
   EnergyIntervals &energyInterval(const std::vector<resonances::EnergyInterval> &obj)
      { energyInterval() = obj; return *this; }

   // energyInterval(index,value)
   EnergyIntervals &energyInterval(
      const std::size_t index,
      const resonances::EnergyInterval &obj
   ) {
      energyInterval(index) = obj; return *this;
   }

   // energyInterval(label,value)
   EnergyIntervals &energyInterval(
      const std::string &label,
      const resonances::EnergyInterval &obj
   ) {
      energyInterval(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   EnergyIntervals() :
      Component{
         BodyText{},
         content.label,
         content.energyInterval
      }
   {
      Component::finish();
   }

   // copy
   EnergyIntervals(const EnergyIntervals &other) :
      Component{
         other,
         content.label,
         content.energyInterval
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   EnergyIntervals(EnergyIntervals &&other) :
      Component{
         other,
         content.label,
         content.energyInterval
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   EnergyIntervals(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.energyInterval
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit EnergyIntervals(
      const XMLName &label,
      const std::vector<resonances::EnergyInterval> &energyInterval
   ) :
      Component{
         BodyText{},
         content.label,
         content.energyInterval
      },
      content{
         label,
         energyInterval
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   EnergyIntervals &operator=(const EnergyIntervals &) = default;

   // move
   EnergyIntervals &operator=(EnergyIntervals &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/EnergyIntervals/src/custom.hpp"

}; // class EnergyIntervals

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
