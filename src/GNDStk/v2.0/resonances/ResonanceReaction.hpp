
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_RESONANCEREACTION
#define NJOY_GNDSTK_V2_0_RESONANCES_RESONANCEREACTION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/common/Q.hpp"
#include "GNDStk/v2.0/resonances/HardSphereRadius.hpp"
#include "GNDStk/v2.0/containers/Link.hpp"
#include "GNDStk/v2.0/resonances/ScatteringRadius.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class ResonanceReaction
// -----------------------------------------------------------------------------

namespace resonances {

class ResonanceReaction : public Component<ResonanceReaction> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "ResonanceReaction"; }
   static auto GNDSName() { return "resonanceReaction"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<Float64>{}
            / Meta<>("boundaryConditionValue") |
         XMLName{}
            / Meta<>("ejectile") |
         Defaulted<bool>{false}
            / Meta<>("eliminated") |
         XMLName{}
            / Meta<>("label") |
         // children
         std::optional<v2_0::common::Q>{}
            / --Child<>("Q") |
         std::optional<resonances::HardSphereRadius>{}
            / --Child<>("hardSphereRadius") |
         containers::Link{}
            / --Child<>("link") |
         std::optional<resonances::ScatteringRadius>{}
            / --Child<>("scatteringRadius")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const bool eliminated = false;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<Float64> boundaryConditionValue;
      XMLName ejectile;
      Defaulted<bool> eliminated{false};
      XMLName label;
      // children
      std::optional<common::Q> Q;
      std::optional<resonances::HardSphereRadius> hardSphereRadius;
      containers::Link link;
      std::optional<resonances::ScatteringRadius> scatteringRadius;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // boundaryConditionValue
   const std::optional<Float64> &boundaryConditionValue() const
      { return content.boundaryConditionValue; }
   std::optional<Float64> &boundaryConditionValue()
      { return content.boundaryConditionValue; }

   // ejectile
   const XMLName &ejectile() const
      { return content.ejectile; }
   XMLName &ejectile()
      { return content.ejectile; }

   // eliminated
   const Defaulted<bool> &eliminated() const
      { return content.eliminated; }
   Defaulted<bool> &eliminated()
      { return content.eliminated; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // Q
   const std::optional<common::Q> &Q() const
      { return content.Q; }
   std::optional<common::Q> &Q()
      { return content.Q; }

   // hardSphereRadius
   const std::optional<resonances::HardSphereRadius> &hardSphereRadius() const
      { return content.hardSphereRadius; }
   std::optional<resonances::HardSphereRadius> &hardSphereRadius()
      { return content.hardSphereRadius; }

   // link
   const containers::Link &link() const
      { return content.link; }
   containers::Link &link()
      { return content.link; }

   // scatteringRadius
   const std::optional<resonances::ScatteringRadius> &scatteringRadius() const
      { return content.scatteringRadius; }
   std::optional<resonances::ScatteringRadius> &scatteringRadius()
      { return content.scatteringRadius; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // boundaryConditionValue(value)
   ResonanceReaction &boundaryConditionValue(const std::optional<Float64> &obj)
      { boundaryConditionValue() = obj; return *this; }

   // ejectile(value)
   ResonanceReaction &ejectile(const XMLName &obj)
      { ejectile() = obj; return *this; }

   // eliminated(value)
   ResonanceReaction &eliminated(const Defaulted<bool> &obj)
      { content.eliminated = obj; return *this; }
   ResonanceReaction &eliminated(const std::optional<bool> &obj)
      { content.eliminated = obj; return *this; }

   // label(value)
   ResonanceReaction &label(const XMLName &obj)
      { label() = obj; return *this; }

   // Q(value)
   ResonanceReaction &Q(const std::optional<common::Q> &obj)
      { Q() = obj; return *this; }

   // hardSphereRadius(value)
   ResonanceReaction &hardSphereRadius(const std::optional<resonances::HardSphereRadius> &obj)
      { hardSphereRadius() = obj; return *this; }

   // link(value)
   ResonanceReaction &link(const containers::Link &obj)
      { link() = obj; return *this; }

   // scatteringRadius(value)
   ResonanceReaction &scatteringRadius(const std::optional<resonances::ScatteringRadius> &obj)
      { scatteringRadius() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ResonanceReaction() :
      Component{
         BodyText{},
         content.boundaryConditionValue,
         content.ejectile,
         content.eliminated,
         content.label,
         content.Q,
         content.hardSphereRadius,
         content.link,
         content.scatteringRadius
      }
   {
      Component::finish();
   }

   // copy
   ResonanceReaction(const ResonanceReaction &other) :
      Component{
         other,
         content.boundaryConditionValue,
         content.ejectile,
         content.eliminated,
         content.label,
         content.Q,
         content.hardSphereRadius,
         content.link,
         content.scatteringRadius
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ResonanceReaction(ResonanceReaction &&other) :
      Component{
         other,
         content.boundaryConditionValue,
         content.ejectile,
         content.eliminated,
         content.label,
         content.Q,
         content.hardSphereRadius,
         content.link,
         content.scatteringRadius
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ResonanceReaction(const Node &node) :
      Component{
         BodyText{},
         content.boundaryConditionValue,
         content.ejectile,
         content.eliminated,
         content.label,
         content.Q,
         content.hardSphereRadius,
         content.link,
         content.scatteringRadius
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit ResonanceReaction(
      const std::optional<Float64> &boundaryConditionValue,
      const XMLName &ejectile,
      const std::optional<bool> &eliminated,
      const XMLName &label,
      const std::optional<common::Q> &Q,
      const std::optional<resonances::HardSphereRadius> &hardSphereRadius,
      const containers::Link &link,
      const std::optional<resonances::ScatteringRadius> &scatteringRadius
   ) :
      Component{
         BodyText{},
         content.boundaryConditionValue,
         content.ejectile,
         content.eliminated,
         content.label,
         content.Q,
         content.hardSphereRadius,
         content.link,
         content.scatteringRadius
      },
      content{
         boundaryConditionValue,
         ejectile,
         Defaulted<bool>(defaults.eliminated,eliminated),
         label,
         Q,
         hardSphereRadius,
         link,
         scatteringRadius
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ResonanceReaction &operator=(const ResonanceReaction &) = default;

   // move
   ResonanceReaction &operator=(ResonanceReaction &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/ResonanceReaction/src/custom.hpp"

}; // class ResonanceReaction

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
