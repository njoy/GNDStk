
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_RESONANCES_RMATRIX
#define NJOY_GNDSTK_V2_0_RESONANCES_RMATRIX

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/PoPs.hpp"
#include "GNDStk/v2.0/resonances/ResonanceReactions.hpp"
#include "GNDStk/v2.0/resonances/SpinGroups.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// resonances::
// class RMatrix
// -----------------------------------------------------------------------------

namespace resonances {

class RMatrix : public Component<RMatrix> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "resonances"; }
   static auto className() { return "RMatrix"; }
   static auto GNDSName() { return "RMatrix"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("approximation") |
         Defaulted<enums::BoundaryCondition>{enums::BoundaryCondition::EliminateShiftFunction}
            / Meta<>("boundaryCondition") |
         std::optional<Float64>{}
            / Meta<>("boundaryConditionValue") |
         Defaulted<bool>{false}
            / Meta<>("calculateChannelRadius") |
         Defaulted<bool>{true}
            / Meta<>("calculatePenetrability") |
         XMLName{}
            / Meta<>("label") |
         Defaulted<bool>{false}
            / Meta<>("supportsAngularReconstruction") |
         Defaulted<bool>{false}
            / Meta<>("useForSelfShieldingOnly") |
         // children
         std::optional<pops::PoPs>{}
            / --Child<>("PoPs") |
         resonances::ResonanceReactions{}
            / --Child<>("resonanceReactions") |
         resonances::SpinGroups{}
            / --Child<>("spinGroups")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const enums::BoundaryCondition boundaryCondition = enums::BoundaryCondition::EliminateShiftFunction;
      static inline const bool calculateChannelRadius = false;
      static inline const bool calculatePenetrability = true;
      static inline const bool supportsAngularReconstruction = false;
      static inline const bool useForSelfShieldingOnly = false;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName approximation;
      Defaulted<enums::BoundaryCondition> boundaryCondition{enums::BoundaryCondition::EliminateShiftFunction};
      std::optional<Float64> boundaryConditionValue;
      Defaulted<bool> calculateChannelRadius{false};
      Defaulted<bool> calculatePenetrability{true};
      XMLName label;
      Defaulted<bool> supportsAngularReconstruction{false};
      Defaulted<bool> useForSelfShieldingOnly{false};
      // children
      std::optional<pops::PoPs> PoPs;
      resonances::ResonanceReactions resonanceReactions;
      resonances::SpinGroups spinGroups;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // approximation
   const XMLName &approximation() const
      { return content.approximation; }
   XMLName &approximation()
      { return content.approximation; }

   // boundaryCondition
   const Defaulted<enums::BoundaryCondition> &boundaryCondition() const
      { return content.boundaryCondition; }
   Defaulted<enums::BoundaryCondition> &boundaryCondition()
      { return content.boundaryCondition; }

   // boundaryConditionValue
   const std::optional<Float64> &boundaryConditionValue() const
      { return content.boundaryConditionValue; }
   std::optional<Float64> &boundaryConditionValue()
      { return content.boundaryConditionValue; }

   // calculateChannelRadius
   const Defaulted<bool> &calculateChannelRadius() const
      { return content.calculateChannelRadius; }
   Defaulted<bool> &calculateChannelRadius()
      { return content.calculateChannelRadius; }

   // calculatePenetrability
   const Defaulted<bool> &calculatePenetrability() const
      { return content.calculatePenetrability; }
   Defaulted<bool> &calculatePenetrability()
      { return content.calculatePenetrability; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // supportsAngularReconstruction
   const Defaulted<bool> &supportsAngularReconstruction() const
      { return content.supportsAngularReconstruction; }
   Defaulted<bool> &supportsAngularReconstruction()
      { return content.supportsAngularReconstruction; }

   // useForSelfShieldingOnly
   const Defaulted<bool> &useForSelfShieldingOnly() const
      { return content.useForSelfShieldingOnly; }
   Defaulted<bool> &useForSelfShieldingOnly()
      { return content.useForSelfShieldingOnly; }

   // PoPs
   const std::optional<pops::PoPs> &PoPs() const
      { return content.PoPs; }
   std::optional<pops::PoPs> &PoPs()
      { return content.PoPs; }

   // resonanceReactions
   const resonances::ResonanceReactions &resonanceReactions() const
      { return content.resonanceReactions; }
   resonances::ResonanceReactions &resonanceReactions()
      { return content.resonanceReactions; }

   // spinGroups
   const resonances::SpinGroups &spinGroups() const
      { return content.spinGroups; }
   resonances::SpinGroups &spinGroups()
      { return content.spinGroups; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // approximation(value)
   RMatrix &approximation(const XMLName &obj)
      { approximation() = obj; return *this; }

   // boundaryCondition(value)
   RMatrix &boundaryCondition(const Defaulted<enums::BoundaryCondition> &obj)
      { content.boundaryCondition = obj; return *this; }
   RMatrix &boundaryCondition(const std::optional<enums::BoundaryCondition> &obj)
      { content.boundaryCondition = obj; return *this; }

   // boundaryConditionValue(value)
   RMatrix &boundaryConditionValue(const std::optional<Float64> &obj)
      { boundaryConditionValue() = obj; return *this; }

   // calculateChannelRadius(value)
   RMatrix &calculateChannelRadius(const Defaulted<bool> &obj)
      { content.calculateChannelRadius = obj; return *this; }
   RMatrix &calculateChannelRadius(const std::optional<bool> &obj)
      { content.calculateChannelRadius = obj; return *this; }

   // calculatePenetrability(value)
   RMatrix &calculatePenetrability(const Defaulted<bool> &obj)
      { content.calculatePenetrability = obj; return *this; }
   RMatrix &calculatePenetrability(const std::optional<bool> &obj)
      { content.calculatePenetrability = obj; return *this; }

   // label(value)
   RMatrix &label(const XMLName &obj)
      { label() = obj; return *this; }

   // supportsAngularReconstruction(value)
   RMatrix &supportsAngularReconstruction(const Defaulted<bool> &obj)
      { content.supportsAngularReconstruction = obj; return *this; }
   RMatrix &supportsAngularReconstruction(const std::optional<bool> &obj)
      { content.supportsAngularReconstruction = obj; return *this; }

   // useForSelfShieldingOnly(value)
   RMatrix &useForSelfShieldingOnly(const Defaulted<bool> &obj)
      { content.useForSelfShieldingOnly = obj; return *this; }
   RMatrix &useForSelfShieldingOnly(const std::optional<bool> &obj)
      { content.useForSelfShieldingOnly = obj; return *this; }

   // PoPs(value)
   RMatrix &PoPs(const std::optional<pops::PoPs> &obj)
      { PoPs() = obj; return *this; }

   // resonanceReactions(value)
   RMatrix &resonanceReactions(const resonances::ResonanceReactions &obj)
      { resonanceReactions() = obj; return *this; }

   // spinGroups(value)
   RMatrix &spinGroups(const resonances::SpinGroups &obj)
      { spinGroups() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   RMatrix() :
      Component{
         BodyText{},
         content.approximation,
         content.boundaryCondition,
         content.boundaryConditionValue,
         content.calculateChannelRadius,
         content.calculatePenetrability,
         content.label,
         content.supportsAngularReconstruction,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.resonanceReactions,
         content.spinGroups
      }
   {
      Component::finish();
   }

   // copy
   RMatrix(const RMatrix &other) :
      Component{
         other,
         content.approximation,
         content.boundaryCondition,
         content.boundaryConditionValue,
         content.calculateChannelRadius,
         content.calculatePenetrability,
         content.label,
         content.supportsAngularReconstruction,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.resonanceReactions,
         content.spinGroups
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   RMatrix(RMatrix &&other) :
      Component{
         other,
         content.approximation,
         content.boundaryCondition,
         content.boundaryConditionValue,
         content.calculateChannelRadius,
         content.calculatePenetrability,
         content.label,
         content.supportsAngularReconstruction,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.resonanceReactions,
         content.spinGroups
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   RMatrix(const Node &node) :
      Component{
         BodyText{},
         content.approximation,
         content.boundaryCondition,
         content.boundaryConditionValue,
         content.calculateChannelRadius,
         content.calculatePenetrability,
         content.label,
         content.supportsAngularReconstruction,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.resonanceReactions,
         content.spinGroups
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit RMatrix(
      const XMLName &approximation,
      const std::optional<enums::BoundaryCondition> &boundaryCondition,
      const std::optional<Float64> &boundaryConditionValue,
      const std::optional<bool> &calculateChannelRadius,
      const std::optional<bool> &calculatePenetrability,
      const XMLName &label,
      const std::optional<bool> &supportsAngularReconstruction,
      const std::optional<bool> &useForSelfShieldingOnly,
      const std::optional<pops::PoPs> &PoPs,
      const resonances::ResonanceReactions &resonanceReactions,
      const resonances::SpinGroups &spinGroups
   ) :
      Component{
         BodyText{},
         content.approximation,
         content.boundaryCondition,
         content.boundaryConditionValue,
         content.calculateChannelRadius,
         content.calculatePenetrability,
         content.label,
         content.supportsAngularReconstruction,
         content.useForSelfShieldingOnly,
         content.PoPs,
         content.resonanceReactions,
         content.spinGroups
      },
      content{
         approximation,
         Defaulted<enums::BoundaryCondition>(defaults.boundaryCondition,boundaryCondition),
         boundaryConditionValue,
         Defaulted<bool>(defaults.calculateChannelRadius,calculateChannelRadius),
         Defaulted<bool>(defaults.calculatePenetrability,calculatePenetrability),
         label,
         Defaulted<bool>(defaults.supportsAngularReconstruction,supportsAngularReconstruction),
         Defaulted<bool>(defaults.useForSelfShieldingOnly,useForSelfShieldingOnly),
         PoPs,
         resonanceReactions,
         spinGroups
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   RMatrix &operator=(const RMatrix &) = default;

   // move
   RMatrix &operator=(RMatrix &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/resonances/RMatrix/src/custom.hpp"

}; // class RMatrix

} // namespace resonances
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
