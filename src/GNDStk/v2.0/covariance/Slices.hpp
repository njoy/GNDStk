
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_SLICES
#define NJOY_GNDSTK_V2_0_COVARIANCE_SLICES

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/covariance/Slice.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class Slices
// -----------------------------------------------------------------------------

namespace covariance {

class Slices : public Component<Slices> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "Slices"; }
   static auto GNDSName() { return "slices"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         covariance::Slice{}
            / ++Child<>("slice")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::vector<covariance::Slice> slice;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // slice
   const std::vector<covariance::Slice> &slice() const
      { return content.slice; }
   std::vector<covariance::Slice> &slice()
      { return content.slice; }

   // slice(index)
   const covariance::Slice &slice(const std::size_t index) const
      { return getter(slice(), index, "slice"); }
   covariance::Slice &slice(const std::size_t index)
      { return getter(slice(), index, "slice"); }

   // slice(label)
   const covariance::Slice &slice(const std::string &label) const
      { return getter(slice(), label, "slice"); }
   covariance::Slice &slice(const std::string &label)
      { return getter(slice(), label, "slice"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // slice(value)
   Slices &slice(const std::vector<covariance::Slice> &obj)
      { slice() = obj; return *this; }

   // slice(index,value)
   Slices &slice(
      const std::size_t index,
      const covariance::Slice &obj
   ) {
      slice(index) = obj; return *this;
   }

   // slice(label,value)
   Slices &slice(
      const std::string &label,
      const covariance::Slice &obj
   ) {
      slice(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Slices() :
      Component{
         BodyText{},
         content.slice
      }
   {
      Component::finish();
   }

   // copy
   Slices(const Slices &other) :
      Component{
         other,
         content.slice
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Slices(Slices &&other) :
      Component{
         other,
         content.slice
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Slices(const Node &node) :
      Component{
         BodyText{},
         content.slice
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Slices(
      const std::vector<covariance::Slice> &slice
   ) :
      Component{
         BodyText{},
         content.slice
      },
      content{
         slice
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Slices &operator=(const Slices &) = default;

   // move
   Slices &operator=(Slices &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/Slices/src/custom.hpp"

}; // class Slices

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
