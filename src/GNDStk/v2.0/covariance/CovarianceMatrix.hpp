
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_COVARIANCEMATRIX
#define NJOY_GNDSTK_V2_0_COVARIANCE_COVARIANCEMATRIX

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Gridded2d.hpp"
#include "GNDStk/v2.0/covariance/SandwichProduct.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class CovarianceMatrix
// -----------------------------------------------------------------------------

namespace covariance {

class CovarianceMatrix : public Component<CovarianceMatrix> {

   using _t = std::variant<
      containers::Gridded2d,
      covariance::SandwichProduct
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "CovarianceMatrix"; }
   static auto GNDSName() { return "covarianceMatrix"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<enums::Frame>{}
            / Meta<>("productFrame") |
         XMLName{}
            / Meta<>("type") |
         // children
         _t{}
            / --(Child<>("gridded2d") || Child<>("sandwichProduct"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      std::optional<enums::Frame> productFrame;
      XMLName type;
      // children - variant
      _t _gridded2dsandwichProduct;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // productFrame
   const std::optional<enums::Frame> &productFrame() const
      { return content.productFrame; }
   std::optional<enums::Frame> &productFrame()
      { return content.productFrame; }

   // type
   const XMLName &type() const
      { return content.type; }
   XMLName &type()
      { return content.type; }

   // _gridded2dsandwichProduct
   const _t &_gridded2dsandwichProduct() const
      { return content._gridded2dsandwichProduct; }
   _t &_gridded2dsandwichProduct()
      { return content._gridded2dsandwichProduct; }

   // gridded2d
   const containers::Gridded2d *gridded2d() const
      { return getter<containers::Gridded2d>(_gridded2dsandwichProduct(), "gridded2d"); }
   containers::Gridded2d *gridded2d()
      { return getter<containers::Gridded2d>(_gridded2dsandwichProduct(), "gridded2d"); }

   // sandwichProduct
   const covariance::SandwichProduct *sandwichProduct() const
      { return getter<covariance::SandwichProduct>(_gridded2dsandwichProduct(), "sandwichProduct"); }
   covariance::SandwichProduct *sandwichProduct()
      { return getter<covariance::SandwichProduct>(_gridded2dsandwichProduct(), "sandwichProduct"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   CovarianceMatrix &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // productFrame(value)
   CovarianceMatrix &productFrame(const std::optional<enums::Frame> &obj)
      { productFrame() = obj; return *this; }

   // type(value)
   CovarianceMatrix &type(const XMLName &obj)
      { type() = obj; return *this; }

   // _gridded2dsandwichProduct(value)
   CovarianceMatrix &_gridded2dsandwichProduct(const _t &obj)
      { _gridded2dsandwichProduct() = obj; return *this; }

   // gridded2d(value)
   CovarianceMatrix &gridded2d(const std::optional<containers::Gridded2d> &obj)
      { if (obj) _gridded2dsandwichProduct(obj.value()); return *this; }

   // sandwichProduct(value)
   CovarianceMatrix &sandwichProduct(const std::optional<covariance::SandwichProduct> &obj)
      { if (obj) _gridded2dsandwichProduct(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CovarianceMatrix() :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.type,
         content._gridded2dsandwichProduct
      }
   {
      Component::finish();
   }

   // copy
   CovarianceMatrix(const CovarianceMatrix &other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.type,
         content._gridded2dsandwichProduct
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CovarianceMatrix(CovarianceMatrix &&other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.type,
         content._gridded2dsandwichProduct
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CovarianceMatrix(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.type,
         content._gridded2dsandwichProduct
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit CovarianceMatrix(
      const std::optional<XMLName> &label,
      const std::optional<enums::Frame> &productFrame,
      const XMLName &type,
      const _t &_gridded2dsandwichProduct
   ) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.type,
         content._gridded2dsandwichProduct
      },
      content{
         label,
         productFrame,
         type,
         _gridded2dsandwichProduct
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CovarianceMatrix &operator=(const CovarianceMatrix &) = default;

   // move
   CovarianceMatrix &operator=(CovarianceMatrix &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/CovarianceMatrix/src/custom.hpp"

}; // class CovarianceMatrix

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
