
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERLINK
#define NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERLINK

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class ParameterLink
// -----------------------------------------------------------------------------

namespace covariance {

class ParameterLink : public Component<ParameterLink> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "ParameterLink"; }
   static auto GNDSName() { return "parameterLink"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("href") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         Defaulted<Integer32>{0}
            / Meta<>("matrixStartIndex") |
         Defaulted<Integer32>{1}
            / Meta<>("nParameters")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const Integer32 matrixStartIndex = 0;
      static inline const Integer32 nParameters = 1;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> href;
      std::optional<XMLName> label;
      Defaulted<Integer32> matrixStartIndex{0};
      Defaulted<Integer32> nParameters{1};
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // href
   const std::optional<XMLName> &href() const
      { return content.href; }
   std::optional<XMLName> &href()
      { return content.href; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // matrixStartIndex
   const Defaulted<Integer32> &matrixStartIndex() const
      { return content.matrixStartIndex; }
   Defaulted<Integer32> &matrixStartIndex()
      { return content.matrixStartIndex; }

   // nParameters
   const Defaulted<Integer32> &nParameters() const
      { return content.nParameters; }
   Defaulted<Integer32> &nParameters()
      { return content.nParameters; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // href(value)
   ParameterLink &href(const std::optional<XMLName> &obj)
      { href() = obj; return *this; }

   // label(value)
   ParameterLink &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // matrixStartIndex(value)
   ParameterLink &matrixStartIndex(const Defaulted<Integer32> &obj)
      { content.matrixStartIndex = obj; return *this; }
   ParameterLink &matrixStartIndex(const std::optional<Integer32> &obj)
      { content.matrixStartIndex = obj; return *this; }

   // nParameters(value)
   ParameterLink &nParameters(const Defaulted<Integer32> &obj)
      { content.nParameters = obj; return *this; }
   ParameterLink &nParameters(const std::optional<Integer32> &obj)
      { content.nParameters = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ParameterLink() :
      Component{
         BodyText{},
         content.href,
         content.label,
         content.matrixStartIndex,
         content.nParameters
      }
   {
      Component::finish();
   }

   // copy
   ParameterLink(const ParameterLink &other) :
      Component{
         other,
         content.href,
         content.label,
         content.matrixStartIndex,
         content.nParameters
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ParameterLink(ParameterLink &&other) :
      Component{
         other,
         content.href,
         content.label,
         content.matrixStartIndex,
         content.nParameters
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ParameterLink(const Node &node) :
      Component{
         BodyText{},
         content.href,
         content.label,
         content.matrixStartIndex,
         content.nParameters
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit ParameterLink(
      const std::optional<XMLName> &href,
      const std::optional<XMLName> &label,
      const std::optional<Integer32> &matrixStartIndex,
      const std::optional<Integer32> &nParameters
   ) :
      Component{
         BodyText{},
         content.href,
         content.label,
         content.matrixStartIndex,
         content.nParameters
      },
      content{
         href,
         label,
         Defaulted<Integer32>(defaults.matrixStartIndex,matrixStartIndex),
         Defaulted<Integer32>(defaults.nParameters,nParameters)
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ParameterLink &operator=(const ParameterLink &) = default;

   // move
   ParameterLink &operator=(ParameterLink &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/ParameterLink/src/custom.hpp"

}; // class ParameterLink

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
