
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_COVARIANCESECTION
#define NJOY_GNDSTK_V2_0_COVARIANCE_COVARIANCESECTION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/covariance/ColumnData.hpp"
#include "GNDStk/v2.0/covariance/RowData.hpp"
#include "GNDStk/v2.0/covariance/CovarianceMatrix.hpp"
#include "GNDStk/v2.0/covariance/Mixed.hpp"
#include "GNDStk/v2.0/covariance/Sum.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class CovarianceSection
// -----------------------------------------------------------------------------

namespace covariance {

class CovarianceSection : public Component<CovarianceSection> {

   using _t = std::variant<
      covariance::CovarianceMatrix,
      covariance::Mixed,
      covariance::Sum
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "CovarianceSection"; }
   static auto GNDSName() { return "covarianceSection"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Defaulted<bool>{false}
            / Meta<>("crossTerm") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         std::optional<covariance::ColumnData>{}
            / --Child<>("columnData") |
         covariance::RowData{}
            / --Child<>("rowData") |
         _t{}
            / --(Child<>("covarianceMatrix") || Child<>("mixed") || Child<>("sum"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const bool crossTerm = false;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Defaulted<bool> crossTerm{false};
      std::optional<XMLName> label;
      // children
      std::optional<covariance::ColumnData> columnData;
      covariance::RowData rowData;
      // children - variant
      _t _covarianceMatrixmixedsum;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // crossTerm
   const Defaulted<bool> &crossTerm() const
      { return content.crossTerm; }
   Defaulted<bool> &crossTerm()
      { return content.crossTerm; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // columnData
   const std::optional<covariance::ColumnData> &columnData() const
      { return content.columnData; }
   std::optional<covariance::ColumnData> &columnData()
      { return content.columnData; }

   // rowData
   const covariance::RowData &rowData() const
      { return content.rowData; }
   covariance::RowData &rowData()
      { return content.rowData; }

   // _covarianceMatrixmixedsum
   const _t &_covarianceMatrixmixedsum() const
      { return content._covarianceMatrixmixedsum; }
   _t &_covarianceMatrixmixedsum()
      { return content._covarianceMatrixmixedsum; }

   // covarianceMatrix
   const covariance::CovarianceMatrix *covarianceMatrix() const
      { return getter<covariance::CovarianceMatrix>(_covarianceMatrixmixedsum(), "covarianceMatrix"); }
   covariance::CovarianceMatrix *covarianceMatrix()
      { return getter<covariance::CovarianceMatrix>(_covarianceMatrixmixedsum(), "covarianceMatrix"); }

   // mixed
   const covariance::Mixed *mixed() const
      { return getter<covariance::Mixed>(_covarianceMatrixmixedsum(), "mixed"); }
   covariance::Mixed *mixed()
      { return getter<covariance::Mixed>(_covarianceMatrixmixedsum(), "mixed"); }

   // sum
   const covariance::Sum *sum() const
      { return getter<covariance::Sum>(_covarianceMatrixmixedsum(), "sum"); }
   covariance::Sum *sum()
      { return getter<covariance::Sum>(_covarianceMatrixmixedsum(), "sum"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // crossTerm(value)
   CovarianceSection &crossTerm(const Defaulted<bool> &obj)
      { content.crossTerm = obj; return *this; }
   CovarianceSection &crossTerm(const std::optional<bool> &obj)
      { content.crossTerm = obj; return *this; }

   // label(value)
   CovarianceSection &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // columnData(value)
   CovarianceSection &columnData(const std::optional<covariance::ColumnData> &obj)
      { columnData() = obj; return *this; }

   // rowData(value)
   CovarianceSection &rowData(const covariance::RowData &obj)
      { rowData() = obj; return *this; }

   // _covarianceMatrixmixedsum(value)
   CovarianceSection &_covarianceMatrixmixedsum(const _t &obj)
      { _covarianceMatrixmixedsum() = obj; return *this; }

   // covarianceMatrix(value)
   CovarianceSection &covarianceMatrix(const std::optional<covariance::CovarianceMatrix> &obj)
      { if (obj) _covarianceMatrixmixedsum(obj.value()); return *this; }

   // mixed(value)
   CovarianceSection &mixed(const std::optional<covariance::Mixed> &obj)
      { if (obj) _covarianceMatrixmixedsum(obj.value()); return *this; }

   // sum(value)
   CovarianceSection &sum(const std::optional<covariance::Sum> &obj)
      { if (obj) _covarianceMatrixmixedsum(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CovarianceSection() :
      Component{
         BodyText{},
         content.crossTerm,
         content.label,
         content.columnData,
         content.rowData,
         content._covarianceMatrixmixedsum
      }
   {
      Component::finish();
   }

   // copy
   CovarianceSection(const CovarianceSection &other) :
      Component{
         other,
         content.crossTerm,
         content.label,
         content.columnData,
         content.rowData,
         content._covarianceMatrixmixedsum
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CovarianceSection(CovarianceSection &&other) :
      Component{
         other,
         content.crossTerm,
         content.label,
         content.columnData,
         content.rowData,
         content._covarianceMatrixmixedsum
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CovarianceSection(const Node &node) :
      Component{
         BodyText{},
         content.crossTerm,
         content.label,
         content.columnData,
         content.rowData,
         content._covarianceMatrixmixedsum
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit CovarianceSection(
      const std::optional<bool> &crossTerm,
      const std::optional<XMLName> &label,
      const std::optional<covariance::ColumnData> &columnData,
      const covariance::RowData &rowData,
      const _t &_covarianceMatrixmixedsum
   ) :
      Component{
         BodyText{},
         content.crossTerm,
         content.label,
         content.columnData,
         content.rowData,
         content._covarianceMatrixmixedsum
      },
      content{
         Defaulted<bool>(defaults.crossTerm,crossTerm),
         label,
         columnData,
         rowData,
         _covarianceMatrixmixedsum
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CovarianceSection &operator=(const CovarianceSection &) = default;

   // move
   CovarianceSection &operator=(CovarianceSection &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/CovarianceSection/src/custom.hpp"

}; // class CovarianceSection

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
