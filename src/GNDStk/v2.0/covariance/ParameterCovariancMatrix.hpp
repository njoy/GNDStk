
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERCOVARIANCMATRIX
#define NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERCOVARIANCMATRIX

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Array.hpp"
#include "GNDStk/v2.0/covariance/Parameters.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class ParameterCovariancMatrix
// -----------------------------------------------------------------------------

namespace covariance {

class ParameterCovariancMatrix : public Component<ParameterCovariancMatrix> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "ParameterCovariancMatrix"; }
   static auto GNDSName() { return "parameterCovariancMatrix"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("type") |
         // children
         containers::Array{}
            / --Child<>("array") |
         covariance::Parameters{}
            / --Child<>("parameters")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      std::optional<XMLName> type;
      // children
      containers::Array array;
      covariance::Parameters parameters;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // type
   const std::optional<XMLName> &type() const
      { return content.type; }
   std::optional<XMLName> &type()
      { return content.type; }

   // array
   const containers::Array &array() const
      { return content.array; }
   containers::Array &array()
      { return content.array; }

   // parameters
   const covariance::Parameters &parameters() const
      { return content.parameters; }
   covariance::Parameters &parameters()
      { return content.parameters; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   ParameterCovariancMatrix &label(const XMLName &obj)
      { label() = obj; return *this; }

   // type(value)
   ParameterCovariancMatrix &type(const std::optional<XMLName> &obj)
      { type() = obj; return *this; }

   // array(value)
   ParameterCovariancMatrix &array(const containers::Array &obj)
      { array() = obj; return *this; }

   // parameters(value)
   ParameterCovariancMatrix &parameters(const covariance::Parameters &obj)
      { parameters() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ParameterCovariancMatrix() :
      Component{
         BodyText{},
         content.label,
         content.type,
         content.array,
         content.parameters
      }
   {
      Component::finish();
   }

   // copy
   ParameterCovariancMatrix(const ParameterCovariancMatrix &other) :
      Component{
         other,
         content.label,
         content.type,
         content.array,
         content.parameters
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ParameterCovariancMatrix(ParameterCovariancMatrix &&other) :
      Component{
         other,
         content.label,
         content.type,
         content.array,
         content.parameters
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ParameterCovariancMatrix(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.type,
         content.array,
         content.parameters
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ParameterCovariancMatrix(
      const XMLName &label,
      const std::optional<XMLName> &type,
      const containers::Array &array,
      const covariance::Parameters &parameters
   ) :
      Component{
         BodyText{},
         content.label,
         content.type,
         content.array,
         content.parameters
      },
      content{
         label,
         type,
         array,
         parameters
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ParameterCovariancMatrix &operator=(const ParameterCovariancMatrix &) = default;

   // move
   ParameterCovariancMatrix &operator=(ParameterCovariancMatrix &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/ParameterCovariancMatrix/src/custom.hpp"

}; // class ParameterCovariancMatrix

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
