
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_SHORTRANGESELFSCALINGVARIANCE
#define NJOY_GNDSTK_V2_0_COVARIANCE_SHORTRANGESELFSCALINGVARIANCE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Gridded2d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class ShortRangeSelfScalingVariance
// -----------------------------------------------------------------------------

namespace covariance {

class ShortRangeSelfScalingVariance : public Component<ShortRangeSelfScalingVariance> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "ShortRangeSelfScalingVariance"; }
   static auto GNDSName() { return "shortRangeSelfScalingVariance"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("dependenceOnProcessedGroupWidth") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("type") |
         // children
         std::optional<containers::Gridded2d>{}
            / --Child<>("gridded2d")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> dependenceOnProcessedGroupWidth;
      std::optional<XMLName> label;
      std::optional<XMLName> type;
      // children
      std::optional<containers::Gridded2d> gridded2d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // dependenceOnProcessedGroupWidth
   const std::optional<XMLName> &dependenceOnProcessedGroupWidth() const
      { return content.dependenceOnProcessedGroupWidth; }
   std::optional<XMLName> &dependenceOnProcessedGroupWidth()
      { return content.dependenceOnProcessedGroupWidth; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // type
   const std::optional<XMLName> &type() const
      { return content.type; }
   std::optional<XMLName> &type()
      { return content.type; }

   // gridded2d
   const std::optional<containers::Gridded2d> &gridded2d() const
      { return content.gridded2d; }
   std::optional<containers::Gridded2d> &gridded2d()
      { return content.gridded2d; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // dependenceOnProcessedGroupWidth(value)
   ShortRangeSelfScalingVariance &dependenceOnProcessedGroupWidth(const std::optional<XMLName> &obj)
      { dependenceOnProcessedGroupWidth() = obj; return *this; }

   // label(value)
   ShortRangeSelfScalingVariance &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // type(value)
   ShortRangeSelfScalingVariance &type(const std::optional<XMLName> &obj)
      { type() = obj; return *this; }

   // gridded2d(value)
   ShortRangeSelfScalingVariance &gridded2d(const std::optional<containers::Gridded2d> &obj)
      { gridded2d() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ShortRangeSelfScalingVariance() :
      Component{
         BodyText{},
         content.dependenceOnProcessedGroupWidth,
         content.label,
         content.type,
         content.gridded2d
      }
   {
      Component::finish();
   }

   // copy
   ShortRangeSelfScalingVariance(const ShortRangeSelfScalingVariance &other) :
      Component{
         other,
         content.dependenceOnProcessedGroupWidth,
         content.label,
         content.type,
         content.gridded2d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ShortRangeSelfScalingVariance(ShortRangeSelfScalingVariance &&other) :
      Component{
         other,
         content.dependenceOnProcessedGroupWidth,
         content.label,
         content.type,
         content.gridded2d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ShortRangeSelfScalingVariance(const Node &node) :
      Component{
         BodyText{},
         content.dependenceOnProcessedGroupWidth,
         content.label,
         content.type,
         content.gridded2d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ShortRangeSelfScalingVariance(
      const std::optional<XMLName> &dependenceOnProcessedGroupWidth,
      const std::optional<XMLName> &label,
      const std::optional<XMLName> &type,
      const std::optional<containers::Gridded2d> &gridded2d
   ) :
      Component{
         BodyText{},
         content.dependenceOnProcessedGroupWidth,
         content.label,
         content.type,
         content.gridded2d
      },
      content{
         dependenceOnProcessedGroupWidth,
         label,
         type,
         gridded2d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ShortRangeSelfScalingVariance &operator=(const ShortRangeSelfScalingVariance &) = default;

   // move
   ShortRangeSelfScalingVariance &operator=(ShortRangeSelfScalingVariance &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/ShortRangeSelfScalingVariance/src/custom.hpp"

}; // class ShortRangeSelfScalingVariance

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
