
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERCOVARIANCES
#define NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERCOVARIANCES

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/covariance/AverageParameterCovariance.hpp"
#include "GNDStk/v2.0/covariance/ParameterCovariance.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class ParameterCovariances
// -----------------------------------------------------------------------------

namespace covariance {

class ParameterCovariances : public Component<ParameterCovariances> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "ParameterCovariances"; }
   static auto GNDSName() { return "parameterCovariances"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<covariance::AverageParameterCovariance>{}
            / ++Child<>("averageParameterCovariance") |
         std::optional<covariance::ParameterCovariance>{}
            / ++Child<>("parameterCovariance")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<std::vector<covariance::AverageParameterCovariance>> averageParameterCovariance;
      std::optional<std::vector<covariance::ParameterCovariance>> parameterCovariance;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // averageParameterCovariance
   const std::optional<std::vector<covariance::AverageParameterCovariance>> &averageParameterCovariance() const
      { return content.averageParameterCovariance; }
   std::optional<std::vector<covariance::AverageParameterCovariance>> &averageParameterCovariance()
      { return content.averageParameterCovariance; }

   // averageParameterCovariance(index)
   const covariance::AverageParameterCovariance &averageParameterCovariance(const std::size_t index) const
      { return getter(averageParameterCovariance(), index, "averageParameterCovariance"); }
   covariance::AverageParameterCovariance &averageParameterCovariance(const std::size_t index)
      { return getter(averageParameterCovariance(), index, "averageParameterCovariance"); }

   // averageParameterCovariance(label)
   const covariance::AverageParameterCovariance &averageParameterCovariance(const std::string &label) const
      { return getter(averageParameterCovariance(), label, "averageParameterCovariance"); }
   covariance::AverageParameterCovariance &averageParameterCovariance(const std::string &label)
      { return getter(averageParameterCovariance(), label, "averageParameterCovariance"); }

   // parameterCovariance
   const std::optional<std::vector<covariance::ParameterCovariance>> &parameterCovariance() const
      { return content.parameterCovariance; }
   std::optional<std::vector<covariance::ParameterCovariance>> &parameterCovariance()
      { return content.parameterCovariance; }

   // parameterCovariance(index)
   const covariance::ParameterCovariance &parameterCovariance(const std::size_t index) const
      { return getter(parameterCovariance(), index, "parameterCovariance"); }
   covariance::ParameterCovariance &parameterCovariance(const std::size_t index)
      { return getter(parameterCovariance(), index, "parameterCovariance"); }

   // parameterCovariance(label)
   const covariance::ParameterCovariance &parameterCovariance(const std::string &label) const
      { return getter(parameterCovariance(), label, "parameterCovariance"); }
   covariance::ParameterCovariance &parameterCovariance(const std::string &label)
      { return getter(parameterCovariance(), label, "parameterCovariance"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // averageParameterCovariance(value)
   ParameterCovariances &averageParameterCovariance(const std::optional<std::vector<covariance::AverageParameterCovariance>> &obj)
      { averageParameterCovariance() = obj; return *this; }

   // averageParameterCovariance(index,value)
   ParameterCovariances &averageParameterCovariance(
      const std::size_t index,
      const covariance::AverageParameterCovariance &obj
   ) {
      averageParameterCovariance(index) = obj; return *this;
   }

   // averageParameterCovariance(label,value)
   ParameterCovariances &averageParameterCovariance(
      const std::string &label,
      const covariance::AverageParameterCovariance &obj
   ) {
      averageParameterCovariance(label) = obj; return *this;
   }

   // parameterCovariance(value)
   ParameterCovariances &parameterCovariance(const std::optional<std::vector<covariance::ParameterCovariance>> &obj)
      { parameterCovariance() = obj; return *this; }

   // parameterCovariance(index,value)
   ParameterCovariances &parameterCovariance(
      const std::size_t index,
      const covariance::ParameterCovariance &obj
   ) {
      parameterCovariance(index) = obj; return *this;
   }

   // parameterCovariance(label,value)
   ParameterCovariances &parameterCovariance(
      const std::string &label,
      const covariance::ParameterCovariance &obj
   ) {
      parameterCovariance(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ParameterCovariances() :
      Component{
         BodyText{},
         content.averageParameterCovariance,
         content.parameterCovariance
      }
   {
      Component::finish();
   }

   // copy
   ParameterCovariances(const ParameterCovariances &other) :
      Component{
         other,
         content.averageParameterCovariance,
         content.parameterCovariance
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ParameterCovariances(ParameterCovariances &&other) :
      Component{
         other,
         content.averageParameterCovariance,
         content.parameterCovariance
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ParameterCovariances(const Node &node) :
      Component{
         BodyText{},
         content.averageParameterCovariance,
         content.parameterCovariance
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ParameterCovariances(
      const std::optional<std::vector<covariance::AverageParameterCovariance>> &averageParameterCovariance,
      const std::optional<std::vector<covariance::ParameterCovariance>> &parameterCovariance
   ) :
      Component{
         BodyText{},
         content.averageParameterCovariance,
         content.parameterCovariance
      },
      content{
         averageParameterCovariance,
         parameterCovariance
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ParameterCovariances &operator=(const ParameterCovariances &) = default;

   // move
   ParameterCovariances &operator=(ParameterCovariances &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/ParameterCovariances/src/custom.hpp"

}; // class ParameterCovariances

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
