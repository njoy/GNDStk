
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_SUM
#define NJOY_GNDSTK_V2_0_COVARIANCE_SUM

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/covariance/Summand.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class Sum
// -----------------------------------------------------------------------------

namespace covariance {

class Sum : public Component<Sum> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "Sum"; }
   static auto GNDSName() { return "sum"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Float64{}
            / Meta<>("domainMax") |
         Float64{}
            / Meta<>("domainMin") |
         XMLName{}
            / Meta<>("domainUnit") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         std::optional<covariance::Summand>{}
            / ++Child<>("summand")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Float64 domainMax;
      Float64 domainMin;
      XMLName domainUnit;
      std::optional<XMLName> label;
      // children
      std::optional<std::vector<covariance::Summand>> summand;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // domainMax
   const Float64 &domainMax() const
      { return content.domainMax; }
   Float64 &domainMax()
      { return content.domainMax; }

   // domainMin
   const Float64 &domainMin() const
      { return content.domainMin; }
   Float64 &domainMin()
      { return content.domainMin; }

   // domainUnit
   const XMLName &domainUnit() const
      { return content.domainUnit; }
   XMLName &domainUnit()
      { return content.domainUnit; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // summand
   const std::optional<std::vector<covariance::Summand>> &summand() const
      { return content.summand; }
   std::optional<std::vector<covariance::Summand>> &summand()
      { return content.summand; }

   // summand(index)
   const covariance::Summand &summand(const std::size_t index) const
      { return getter(summand(), index, "summand"); }
   covariance::Summand &summand(const std::size_t index)
      { return getter(summand(), index, "summand"); }

   // summand(label)
   const covariance::Summand &summand(const std::string &label) const
      { return getter(summand(), label, "summand"); }
   covariance::Summand &summand(const std::string &label)
      { return getter(summand(), label, "summand"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // domainMax(value)
   Sum &domainMax(const Float64 &obj)
      { domainMax() = obj; return *this; }

   // domainMin(value)
   Sum &domainMin(const Float64 &obj)
      { domainMin() = obj; return *this; }

   // domainUnit(value)
   Sum &domainUnit(const XMLName &obj)
      { domainUnit() = obj; return *this; }

   // label(value)
   Sum &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // summand(value)
   Sum &summand(const std::optional<std::vector<covariance::Summand>> &obj)
      { summand() = obj; return *this; }

   // summand(index,value)
   Sum &summand(
      const std::size_t index,
      const covariance::Summand &obj
   ) {
      summand(index) = obj; return *this;
   }

   // summand(label,value)
   Sum &summand(
      const std::string &label,
      const covariance::Summand &obj
   ) {
      summand(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Sum() :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content.label,
         content.summand
      }
   {
      Component::finish();
   }

   // copy
   Sum(const Sum &other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content.label,
         content.summand
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Sum(Sum &&other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content.label,
         content.summand
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Sum(const Node &node) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content.label,
         content.summand
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Sum(
      const Float64 &domainMax,
      const Float64 &domainMin,
      const XMLName &domainUnit,
      const std::optional<XMLName> &label,
      const std::optional<std::vector<covariance::Summand>> &summand
   ) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.domainUnit,
         content.label,
         content.summand
      },
      content{
         domainMax,
         domainMin,
         domainUnit,
         label,
         summand
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Sum &operator=(const Sum &) = default;

   // move
   Sum &operator=(Sum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/Sum/src/custom.hpp"

}; // class Sum

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
