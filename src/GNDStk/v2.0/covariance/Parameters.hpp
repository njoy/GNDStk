
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERS
#define NJOY_GNDSTK_V2_0_COVARIANCE_PARAMETERS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/covariance/ParameterLink.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class Parameters
// -----------------------------------------------------------------------------

namespace covariance {

class Parameters : public Component<Parameters> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "Parameters"; }
   static auto GNDSName() { return "parameters"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<covariance::ParameterLink>{}
            / ++Child<>("parameterLink")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<std::vector<covariance::ParameterLink>> parameterLink;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // parameterLink
   const std::optional<std::vector<covariance::ParameterLink>> &parameterLink() const
      { return content.parameterLink; }
   std::optional<std::vector<covariance::ParameterLink>> &parameterLink()
      { return content.parameterLink; }

   // parameterLink(index)
   const covariance::ParameterLink &parameterLink(const std::size_t index) const
      { return getter(parameterLink(), index, "parameterLink"); }
   covariance::ParameterLink &parameterLink(const std::size_t index)
      { return getter(parameterLink(), index, "parameterLink"); }

   // parameterLink(label)
   const covariance::ParameterLink &parameterLink(const std::string &label) const
      { return getter(parameterLink(), label, "parameterLink"); }
   covariance::ParameterLink &parameterLink(const std::string &label)
      { return getter(parameterLink(), label, "parameterLink"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // parameterLink(value)
   Parameters &parameterLink(const std::optional<std::vector<covariance::ParameterLink>> &obj)
      { parameterLink() = obj; return *this; }

   // parameterLink(index,value)
   Parameters &parameterLink(
      const std::size_t index,
      const covariance::ParameterLink &obj
   ) {
      parameterLink(index) = obj; return *this;
   }

   // parameterLink(label,value)
   Parameters &parameterLink(
      const std::string &label,
      const covariance::ParameterLink &obj
   ) {
      parameterLink(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Parameters() :
      Component{
         BodyText{},
         content.parameterLink
      }
   {
      Component::finish();
   }

   // copy
   Parameters(const Parameters &other) :
      Component{
         other,
         content.parameterLink
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Parameters(Parameters &&other) :
      Component{
         other,
         content.parameterLink
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Parameters(const Node &node) :
      Component{
         BodyText{},
         content.parameterLink
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Parameters(
      const std::optional<std::vector<covariance::ParameterLink>> &parameterLink
   ) :
      Component{
         BodyText{},
         content.parameterLink
      },
      content{
         parameterLink
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Parameters &operator=(const Parameters &) = default;

   // move
   Parameters &operator=(Parameters &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/Parameters/src/custom.hpp"

}; // class Parameters

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
