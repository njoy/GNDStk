
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_COVARIANCESUITE
#define NJOY_GNDSTK_V2_0_COVARIANCE_COVARIANCESUITE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/covariance/CovarianceSections.hpp"
#include "GNDStk/v2.0/common/ExternalFiles.hpp"
#include "GNDStk/v2.0/covariance/ParameterCovariances.hpp"
#include "GNDStk/v2.0/styles/Styles.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class CovarianceSuite
// -----------------------------------------------------------------------------

namespace covariance {

class CovarianceSuite : public Component<CovarianceSuite> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "CovarianceSuite"; }
   static auto GNDSName() { return "covarianceSuite"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("evaluation") |
         std::optional<Float64>{}
            / Meta<>("version") |
         enums::Interaction{}
            / Meta<>("interaction") |
         std::optional<XMLName>{}
            / Meta<>("projectile") |
         std::optional<XMLName>{}
            / Meta<>("target") |
         // children
         std::optional<covariance::CovarianceSections>{}
            / --Child<>("covarianceSections") |
         std::optional<common::ExternalFiles>{}
            / --Child<>("externalFiles") |
         std::optional<covariance::ParameterCovariances>{}
            / --Child<>("parameterCovariances") |
         std::optional<styles::Styles>{}
            / --Child<>("styles")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> evaluation;
      std::optional<Float64> version;
      enums::Interaction interaction;
      std::optional<XMLName> projectile;
      std::optional<XMLName> target;
      // children
      std::optional<covariance::CovarianceSections> covarianceSections;
      std::optional<common::ExternalFiles> externalFiles;
      std::optional<covariance::ParameterCovariances> parameterCovariances;
      std::optional<styles::Styles> styles;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // evaluation
   const std::optional<XMLName> &evaluation() const
      { return content.evaluation; }
   std::optional<XMLName> &evaluation()
      { return content.evaluation; }

   // version
   const std::optional<Float64> &version() const
      { return content.version; }
   std::optional<Float64> &version()
      { return content.version; }

   // interaction
   const enums::Interaction &interaction() const
      { return content.interaction; }
   enums::Interaction &interaction()
      { return content.interaction; }

   // projectile
   const std::optional<XMLName> &projectile() const
      { return content.projectile; }
   std::optional<XMLName> &projectile()
      { return content.projectile; }

   // target
   const std::optional<XMLName> &target() const
      { return content.target; }
   std::optional<XMLName> &target()
      { return content.target; }

   // covarianceSections
   const std::optional<covariance::CovarianceSections> &covarianceSections() const
      { return content.covarianceSections; }
   std::optional<covariance::CovarianceSections> &covarianceSections()
      { return content.covarianceSections; }

   // externalFiles
   const std::optional<common::ExternalFiles> &externalFiles() const
      { return content.externalFiles; }
   std::optional<common::ExternalFiles> &externalFiles()
      { return content.externalFiles; }

   // parameterCovariances
   const std::optional<covariance::ParameterCovariances> &parameterCovariances() const
      { return content.parameterCovariances; }
   std::optional<covariance::ParameterCovariances> &parameterCovariances()
      { return content.parameterCovariances; }

   // styles
   const std::optional<styles::Styles> &styles() const
      { return content.styles; }
   std::optional<styles::Styles> &styles()
      { return content.styles; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // evaluation(value)
   CovarianceSuite &evaluation(const std::optional<XMLName> &obj)
      { evaluation() = obj; return *this; }

   // version(value)
   CovarianceSuite &version(const std::optional<Float64> &obj)
      { version() = obj; return *this; }

   // interaction(value)
   CovarianceSuite &interaction(const enums::Interaction &obj)
      { interaction() = obj; return *this; }

   // projectile(value)
   CovarianceSuite &projectile(const std::optional<XMLName> &obj)
      { projectile() = obj; return *this; }

   // target(value)
   CovarianceSuite &target(const std::optional<XMLName> &obj)
      { target() = obj; return *this; }

   // covarianceSections(value)
   CovarianceSuite &covarianceSections(const std::optional<covariance::CovarianceSections> &obj)
      { covarianceSections() = obj; return *this; }

   // externalFiles(value)
   CovarianceSuite &externalFiles(const std::optional<common::ExternalFiles> &obj)
      { externalFiles() = obj; return *this; }

   // parameterCovariances(value)
   CovarianceSuite &parameterCovariances(const std::optional<covariance::ParameterCovariances> &obj)
      { parameterCovariances() = obj; return *this; }

   // styles(value)
   CovarianceSuite &styles(const std::optional<styles::Styles> &obj)
      { styles() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   CovarianceSuite() :
      Component{
         BodyText{},
         content.evaluation,
         content.version,
         content.interaction,
         content.projectile,
         content.target,
         content.covarianceSections,
         content.externalFiles,
         content.parameterCovariances,
         content.styles
      }
   {
      Component::finish();
   }

   // copy
   CovarianceSuite(const CovarianceSuite &other) :
      Component{
         other,
         content.evaluation,
         content.version,
         content.interaction,
         content.projectile,
         content.target,
         content.covarianceSections,
         content.externalFiles,
         content.parameterCovariances,
         content.styles
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   CovarianceSuite(CovarianceSuite &&other) :
      Component{
         other,
         content.evaluation,
         content.version,
         content.interaction,
         content.projectile,
         content.target,
         content.covarianceSections,
         content.externalFiles,
         content.parameterCovariances,
         content.styles
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   CovarianceSuite(const Node &node) :
      Component{
         BodyText{},
         content.evaluation,
         content.version,
         content.interaction,
         content.projectile,
         content.target,
         content.covarianceSections,
         content.externalFiles,
         content.parameterCovariances,
         content.styles
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit CovarianceSuite(
      const std::optional<XMLName> &evaluation,
      const std::optional<Float64> &version,
      const enums::Interaction &interaction,
      const std::optional<XMLName> &projectile,
      const std::optional<XMLName> &target,
      const std::optional<covariance::CovarianceSections> &covarianceSections,
      const std::optional<common::ExternalFiles> &externalFiles,
      const std::optional<covariance::ParameterCovariances> &parameterCovariances,
      const std::optional<styles::Styles> &styles
   ) :
      Component{
         BodyText{},
         content.evaluation,
         content.version,
         content.interaction,
         content.projectile,
         content.target,
         content.covarianceSections,
         content.externalFiles,
         content.parameterCovariances,
         content.styles
      },
      content{
         evaluation,
         version,
         interaction,
         projectile,
         target,
         covarianceSections,
         externalFiles,
         parameterCovariances,
         styles
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   CovarianceSuite &operator=(const CovarianceSuite &) = default;

   // move
   CovarianceSuite &operator=(CovarianceSuite &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/CovarianceSuite/src/custom.hpp"

}; // class CovarianceSuite

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
