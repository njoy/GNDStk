
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_COVARIANCE_SANDWICHPRODUCT
#define NJOY_GNDSTK_V2_0_COVARIANCE_SANDWICHPRODUCT

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Axes.hpp"
#include "GNDStk/v2.0/covariance/ColumnSensitivity.hpp"
#include "GNDStk/v2.0/covariance/Covariance.hpp"
#include "GNDStk/v2.0/covariance/RowSensitivity.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// covariance::
// class SandwichProduct
// -----------------------------------------------------------------------------

namespace covariance {

class SandwichProduct : public Component<SandwichProduct> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "covariance"; }
   static auto className() { return "SandwichProduct"; }
   static auto GNDSName() { return "sandwichProduct"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         containers::Axes{}
            / --Child<>("axes") |
         std::optional<covariance::ColumnSensitivity>{}
            / --Child<>("columnSensitivity") |
         covariance::Covariance{}
            / --Child<>("covariance") |
         covariance::RowSensitivity{}
            / --Child<>("rowSensitivity")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      containers::Axes axes;
      std::optional<covariance::ColumnSensitivity> columnSensitivity;
      covariance::Covariance covariance;
      covariance::RowSensitivity rowSensitivity;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // axes
   const containers::Axes &axes() const
      { return content.axes; }
   containers::Axes &axes()
      { return content.axes; }

   // columnSensitivity
   const std::optional<covariance::ColumnSensitivity> &columnSensitivity() const
      { return content.columnSensitivity; }
   std::optional<covariance::ColumnSensitivity> &columnSensitivity()
      { return content.columnSensitivity; }

   // covariance
   const covariance::Covariance &covariance() const
      { return content.covariance; }
   covariance::Covariance &covariance()
      { return content.covariance; }

   // rowSensitivity
   const covariance::RowSensitivity &rowSensitivity() const
      { return content.rowSensitivity; }
   covariance::RowSensitivity &rowSensitivity()
      { return content.rowSensitivity; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // axes(value)
   SandwichProduct &axes(const containers::Axes &obj)
      { axes() = obj; return *this; }

   // columnSensitivity(value)
   SandwichProduct &columnSensitivity(const std::optional<covariance::ColumnSensitivity> &obj)
      { columnSensitivity() = obj; return *this; }

   // covariance(value)
   SandwichProduct &covariance(const covariance::Covariance &obj)
      { covariance() = obj; return *this; }

   // rowSensitivity(value)
   SandwichProduct &rowSensitivity(const covariance::RowSensitivity &obj)
      { rowSensitivity() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   SandwichProduct() :
      Component{
         BodyText{},
         content.axes,
         content.columnSensitivity,
         content.covariance,
         content.rowSensitivity
      }
   {
      Component::finish();
   }

   // copy
   SandwichProduct(const SandwichProduct &other) :
      Component{
         other,
         content.axes,
         content.columnSensitivity,
         content.covariance,
         content.rowSensitivity
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   SandwichProduct(SandwichProduct &&other) :
      Component{
         other,
         content.axes,
         content.columnSensitivity,
         content.covariance,
         content.rowSensitivity
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   SandwichProduct(const Node &node) :
      Component{
         BodyText{},
         content.axes,
         content.columnSensitivity,
         content.covariance,
         content.rowSensitivity
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit SandwichProduct(
      const containers::Axes &axes,
      const std::optional<covariance::ColumnSensitivity> &columnSensitivity,
      const covariance::Covariance &covariance,
      const covariance::RowSensitivity &rowSensitivity
   ) :
      Component{
         BodyText{},
         content.axes,
         content.columnSensitivity,
         content.covariance,
         content.rowSensitivity
      },
      content{
         axes,
         columnSensitivity,
         covariance,
         rowSensitivity
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   SandwichProduct &operator=(const SandwichProduct &) = default;

   // move
   SandwichProduct &operator=(SandwichProduct &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/covariance/SandwichProduct/src/custom.hpp"

}; // class SandwichProduct

} // namespace covariance
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
