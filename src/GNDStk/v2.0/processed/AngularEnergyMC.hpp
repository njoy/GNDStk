
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_PROCESSED_ANGULARENERGYMC
#define NJOY_GNDSTK_V2_0_PROCESSED_ANGULARENERGYMC

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/Angular.hpp"
#include "GNDStk/v2.0/transport/AngularEnergy.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// processed::
// class AngularEnergyMC
// -----------------------------------------------------------------------------

namespace processed {

class AngularEnergyMC : public Component<AngularEnergyMC> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "processed"; }
   static auto className() { return "AngularEnergyMC"; }
   static auto GNDSName() { return "angularEnergyMC"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("productFrame") |
         // children
         transport::Angular{}
            / --Child<>("angular") |
         transport::AngularEnergy{}
            / --Child<>("angularEnergy")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      XMLName productFrame;
      // children
      transport::Angular angular;
      transport::AngularEnergy angularEnergy;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // productFrame
   const XMLName &productFrame() const
      { return content.productFrame; }
   XMLName &productFrame()
      { return content.productFrame; }

   // angular
   const transport::Angular &angular() const
      { return content.angular; }
   transport::Angular &angular()
      { return content.angular; }

   // angularEnergy
   const transport::AngularEnergy &angularEnergy() const
      { return content.angularEnergy; }
   transport::AngularEnergy &angularEnergy()
      { return content.angularEnergy; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   AngularEnergyMC &label(const XMLName &obj)
      { label() = obj; return *this; }

   // productFrame(value)
   AngularEnergyMC &productFrame(const XMLName &obj)
      { productFrame() = obj; return *this; }

   // angular(value)
   AngularEnergyMC &angular(const transport::Angular &obj)
      { angular() = obj; return *this; }

   // angularEnergy(value)
   AngularEnergyMC &angularEnergy(const transport::AngularEnergy &obj)
      { angularEnergy() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   AngularEnergyMC() :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.angular,
         content.angularEnergy
      }
   {
      Component::finish();
   }

   // copy
   AngularEnergyMC(const AngularEnergyMC &other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.angular,
         content.angularEnergy
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   AngularEnergyMC(AngularEnergyMC &&other) :
      Component{
         other,
         content.label,
         content.productFrame,
         content.angular,
         content.angularEnergy
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   AngularEnergyMC(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.angular,
         content.angularEnergy
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit AngularEnergyMC(
      const XMLName &label,
      const XMLName &productFrame,
      const transport::Angular &angular,
      const transport::AngularEnergy &angularEnergy
   ) :
      Component{
         BodyText{},
         content.label,
         content.productFrame,
         content.angular,
         content.angularEnergy
      },
      content{
         label,
         productFrame,
         angular,
         angularEnergy
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   AngularEnergyMC &operator=(const AngularEnergyMC &) = default;

   // move
   AngularEnergyMC &operator=(AngularEnergyMC &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/processed/AngularEnergyMC/src/custom.hpp"

}; // class AngularEnergyMC

} // namespace processed
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
