
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_FISSIONCOMPONENT
#define NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_FISSIONCOMPONENT

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/CrossSection.hpp"
#include "GNDStk/v2.0/transport/OutputChannel.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionTransport::
// class FissionComponent
// -----------------------------------------------------------------------------

namespace fissionTransport {

class FissionComponent : public Component<FissionComponent> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionTransport"; }
   static auto className() { return "FissionComponent"; }
   static auto GNDSName() { return "fissionComponent"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<Integer32>{}
            / Meta<>("ENDF_MT") |
         XMLName{}
            / Meta<>("fissionGenre") |
         XMLName{}
            / Meta<>("label") |
         // children
         std::optional<transport::CrossSection>{}
            / --Child<>("crossSection") |
         std::optional<transport::OutputChannel>{}
            / --Child<>("outputChannel")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<Integer32> ENDF_MT;
      XMLName fissionGenre;
      XMLName label;
      // children
      std::optional<transport::CrossSection> crossSection;
      std::optional<transport::OutputChannel> outputChannel;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // ENDF_MT
   const std::optional<Integer32> &ENDF_MT() const
      { return content.ENDF_MT; }
   std::optional<Integer32> &ENDF_MT()
      { return content.ENDF_MT; }

   // fissionGenre
   const XMLName &fissionGenre() const
      { return content.fissionGenre; }
   XMLName &fissionGenre()
      { return content.fissionGenre; }

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // crossSection
   const std::optional<transport::CrossSection> &crossSection() const
      { return content.crossSection; }
   std::optional<transport::CrossSection> &crossSection()
      { return content.crossSection; }

   // outputChannel
   const std::optional<transport::OutputChannel> &outputChannel() const
      { return content.outputChannel; }
   std::optional<transport::OutputChannel> &outputChannel()
      { return content.outputChannel; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // ENDF_MT(value)
   FissionComponent &ENDF_MT(const std::optional<Integer32> &obj)
      { ENDF_MT() = obj; return *this; }

   // fissionGenre(value)
   FissionComponent &fissionGenre(const XMLName &obj)
      { fissionGenre() = obj; return *this; }

   // label(value)
   FissionComponent &label(const XMLName &obj)
      { label() = obj; return *this; }

   // crossSection(value)
   FissionComponent &crossSection(const std::optional<transport::CrossSection> &obj)
      { crossSection() = obj; return *this; }

   // outputChannel(value)
   FissionComponent &outputChannel(const std::optional<transport::OutputChannel> &obj)
      { outputChannel() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   FissionComponent() :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.outputChannel
      }
   {
      Component::finish();
   }

   // copy
   FissionComponent(const FissionComponent &other) :
      Component{
         other,
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.outputChannel
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   FissionComponent(FissionComponent &&other) :
      Component{
         other,
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.outputChannel
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   FissionComponent(const Node &node) :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.outputChannel
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit FissionComponent(
      const std::optional<Integer32> &ENDF_MT,
      const XMLName &fissionGenre,
      const XMLName &label,
      const std::optional<transport::CrossSection> &crossSection,
      const std::optional<transport::OutputChannel> &outputChannel
   ) :
      Component{
         BodyText{},
         content.ENDF_MT,
         content.fissionGenre,
         content.label,
         content.crossSection,
         content.outputChannel
      },
      content{
         ENDF_MT,
         fissionGenre,
         label,
         crossSection,
         outputChannel
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   FissionComponent &operator=(const FissionComponent &) = default;

   // move
   FissionComponent &operator=(FissionComponent &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionTransport/FissionComponent/src/custom.hpp"

}; // class FissionComponent

} // namespace fissionTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
