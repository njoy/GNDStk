
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_FISSIONCOMPONENTS
#define NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_FISSIONCOMPONENTS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fissionTransport/FissionComponent.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionTransport::
// class FissionComponents
// -----------------------------------------------------------------------------

namespace fissionTransport {

class FissionComponents : public Component<FissionComponents> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionTransport"; }
   static auto className() { return "FissionComponents"; }
   static auto GNDSName() { return "fissionComponents"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<fissionTransport::FissionComponent>{}
            / ++Child<>("fissionComponent")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<std::vector<fissionTransport::FissionComponent>> fissionComponent;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // fissionComponent
   const std::optional<std::vector<fissionTransport::FissionComponent>> &fissionComponent() const
      { return content.fissionComponent; }
   std::optional<std::vector<fissionTransport::FissionComponent>> &fissionComponent()
      { return content.fissionComponent; }

   // fissionComponent(index)
   const fissionTransport::FissionComponent &fissionComponent(const std::size_t index) const
      { return getter(fissionComponent(), index, "fissionComponent"); }
   fissionTransport::FissionComponent &fissionComponent(const std::size_t index)
      { return getter(fissionComponent(), index, "fissionComponent"); }

   // fissionComponent(label)
   const fissionTransport::FissionComponent &fissionComponent(const std::string &label) const
      { return getter(fissionComponent(), label, "fissionComponent"); }
   fissionTransport::FissionComponent &fissionComponent(const std::string &label)
      { return getter(fissionComponent(), label, "fissionComponent"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // fissionComponent(value)
   FissionComponents &fissionComponent(const std::optional<std::vector<fissionTransport::FissionComponent>> &obj)
      { fissionComponent() = obj; return *this; }

   // fissionComponent(index,value)
   FissionComponents &fissionComponent(
      const std::size_t index,
      const fissionTransport::FissionComponent &obj
   ) {
      fissionComponent(index) = obj; return *this;
   }

   // fissionComponent(label,value)
   FissionComponents &fissionComponent(
      const std::string &label,
      const fissionTransport::FissionComponent &obj
   ) {
      fissionComponent(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   FissionComponents() :
      Component{
         BodyText{},
         content.fissionComponent
      }
   {
      Component::finish();
   }

   // copy
   FissionComponents(const FissionComponents &other) :
      Component{
         other,
         content.fissionComponent
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   FissionComponents(FissionComponents &&other) :
      Component{
         other,
         content.fissionComponent
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   FissionComponents(const Node &node) :
      Component{
         BodyText{},
         content.fissionComponent
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit FissionComponents(
      const std::optional<std::vector<fissionTransport::FissionComponent>> &fissionComponent
   ) :
      Component{
         BodyText{},
         content.fissionComponent
      },
      content{
         fissionComponent
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   FissionComponents &operator=(const FissionComponents &) = default;

   // move
   FissionComponents &operator=(FissionComponents &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionTransport/FissionComponents/src/custom.hpp"

}; // class FissionComponents

} // namespace fissionTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
