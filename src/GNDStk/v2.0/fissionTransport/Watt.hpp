
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_WATT
#define NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_WATT

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/U.hpp"
#include "GNDStk/v2.0/transport/A.hpp"
#include "GNDStk/v2.0/fissionTransport/B.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionTransport::
// class Watt
// -----------------------------------------------------------------------------

namespace fissionTransport {

class Watt : public Component<Watt> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionTransport"; }
   static auto className() { return "Watt"; }
   static auto GNDSName() { return "Watt"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         transport::U{}
            / --Child<>("U") |
         transport::A{}
            / --Child<>("a") |
         fissionTransport::B{}
            / --Child<>("b")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      transport::U U;
      transport::A a;
      fissionTransport::B b;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // U
   const transport::U &U() const
      { return content.U; }
   transport::U &U()
      { return content.U; }

   // a
   const transport::A &a() const
      { return content.a; }
   transport::A &a()
      { return content.a; }

   // b
   const fissionTransport::B &b() const
      { return content.b; }
   fissionTransport::B &b()
      { return content.b; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // U(value)
   Watt &U(const transport::U &obj)
      { U() = obj; return *this; }

   // a(value)
   Watt &a(const transport::A &obj)
      { a() = obj; return *this; }

   // b(value)
   Watt &b(const fissionTransport::B &obj)
      { b() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Watt() :
      Component{
         BodyText{},
         content.U,
         content.a,
         content.b
      }
   {
      Component::finish();
   }

   // copy
   Watt(const Watt &other) :
      Component{
         other,
         content.U,
         content.a,
         content.b
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Watt(Watt &&other) :
      Component{
         other,
         content.U,
         content.a,
         content.b
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Watt(const Node &node) :
      Component{
         BodyText{},
         content.U,
         content.a,
         content.b
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Watt(
      const transport::U &U,
      const transport::A &a,
      const fissionTransport::B &b
   ) :
      Component{
         BodyText{},
         content.U,
         content.a,
         content.b
      },
      content{
         U,
         a,
         b
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Watt &operator=(const Watt &) = default;

   // move
   Watt &operator=(Watt &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionTransport/Watt/src/custom.hpp"

}; // class Watt

} // namespace fissionTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
