
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_MADLANDNIX
#define NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_MADLANDNIX

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fissionTransport/EFH.hpp"
#include "GNDStk/v2.0/fissionTransport/EFL.hpp"
#include "GNDStk/v2.0/fissionTransport/T_M.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionTransport::
// class MadlandNix
// -----------------------------------------------------------------------------

namespace fissionTransport {

class MadlandNix : public Component<MadlandNix> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionTransport"; }
   static auto className() { return "MadlandNix"; }
   static auto GNDSName() { return "MadlandNix"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         fissionTransport::EFH{}
            / --Child<>("EFH") |
         fissionTransport::EFL{}
            / --Child<>("EFL") |
         fissionTransport::T_M{}
            / --Child<>("T_M")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      fissionTransport::EFH EFH;
      fissionTransport::EFL EFL;
      fissionTransport::T_M T_M;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // EFH
   const fissionTransport::EFH &EFH() const
      { return content.EFH; }
   fissionTransport::EFH &EFH()
      { return content.EFH; }

   // EFL
   const fissionTransport::EFL &EFL() const
      { return content.EFL; }
   fissionTransport::EFL &EFL()
      { return content.EFL; }

   // T_M
   const fissionTransport::T_M &T_M() const
      { return content.T_M; }
   fissionTransport::T_M &T_M()
      { return content.T_M; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // EFH(value)
   MadlandNix &EFH(const fissionTransport::EFH &obj)
      { EFH() = obj; return *this; }

   // EFL(value)
   MadlandNix &EFL(const fissionTransport::EFL &obj)
      { EFL() = obj; return *this; }

   // T_M(value)
   MadlandNix &T_M(const fissionTransport::T_M &obj)
      { T_M() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   MadlandNix() :
      Component{
         BodyText{},
         content.EFH,
         content.EFL,
         content.T_M
      }
   {
      Component::finish();
   }

   // copy
   MadlandNix(const MadlandNix &other) :
      Component{
         other,
         content.EFH,
         content.EFL,
         content.T_M
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   MadlandNix(MadlandNix &&other) :
      Component{
         other,
         content.EFH,
         content.EFL,
         content.T_M
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   MadlandNix(const Node &node) :
      Component{
         BodyText{},
         content.EFH,
         content.EFL,
         content.T_M
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit MadlandNix(
      const fissionTransport::EFH &EFH,
      const fissionTransport::EFL &EFL,
      const fissionTransport::T_M &T_M
   ) :
      Component{
         BodyText{},
         content.EFH,
         content.EFL,
         content.T_M
      },
      content{
         EFH,
         EFL,
         T_M
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   MadlandNix &operator=(const MadlandNix &) = default;

   // move
   MadlandNix &operator=(MadlandNix &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionTransport/MadlandNix/src/custom.hpp"

}; // class MadlandNix

} // namespace fissionTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
