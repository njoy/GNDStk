
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_NONNEUTRINOENERGY
#define NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_NONNEUTRINOENERGY

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Polynomial1d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionTransport::
// class NonNeutrinoEnergy
// -----------------------------------------------------------------------------

namespace fissionTransport {

class NonNeutrinoEnergy : public Component<NonNeutrinoEnergy> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionTransport"; }
   static auto className() { return "NonNeutrinoEnergy"; }
   static auto GNDSName() { return "nonNeutrinoEnergy"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<containers::Polynomial1d>{}
            / --Child<>("polynomial1d")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<containers::Polynomial1d> polynomial1d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // polynomial1d
   const std::optional<containers::Polynomial1d> &polynomial1d() const
      { return content.polynomial1d; }
   std::optional<containers::Polynomial1d> &polynomial1d()
      { return content.polynomial1d; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // polynomial1d(value)
   NonNeutrinoEnergy &polynomial1d(const std::optional<containers::Polynomial1d> &obj)
      { polynomial1d() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   NonNeutrinoEnergy() :
      Component{
         BodyText{},
         content.polynomial1d
      }
   {
      Component::finish();
   }

   // copy
   NonNeutrinoEnergy(const NonNeutrinoEnergy &other) :
      Component{
         other,
         content.polynomial1d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   NonNeutrinoEnergy(NonNeutrinoEnergy &&other) :
      Component{
         other,
         content.polynomial1d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   NonNeutrinoEnergy(const Node &node) :
      Component{
         BodyText{},
         content.polynomial1d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit NonNeutrinoEnergy(
      const std::optional<containers::Polynomial1d> &polynomial1d
   ) :
      Component{
         BodyText{},
         content.polynomial1d
      },
      content{
         polynomial1d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   NonNeutrinoEnergy &operator=(const NonNeutrinoEnergy &) = default;

   // move
   NonNeutrinoEnergy &operator=(NonNeutrinoEnergy &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionTransport/NonNeutrinoEnergy/src/custom.hpp"

}; // class NonNeutrinoEnergy

} // namespace fissionTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
