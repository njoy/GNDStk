
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_SIMPLEMAXWELLIANFISSION
#define NJOY_GNDSTK_V2_0_FISSIONTRANSPORT_SIMPLEMAXWELLIANFISSION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/transport/U.hpp"
#include "GNDStk/v2.0/transport/Theta.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionTransport::
// class SimpleMaxwellianFission
// -----------------------------------------------------------------------------

namespace fissionTransport {

class SimpleMaxwellianFission : public Component<SimpleMaxwellianFission> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionTransport"; }
   static auto className() { return "SimpleMaxwellianFission"; }
   static auto GNDSName() { return "simpleMaxwellianFission"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<transport::U>{}
            / --Child<>("U") |
         std::optional<transport::Theta>{}
            / --Child<>("theta")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<transport::U> U;
      std::optional<transport::Theta> theta;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // U
   const std::optional<transport::U> &U() const
      { return content.U; }
   std::optional<transport::U> &U()
      { return content.U; }

   // theta
   const std::optional<transport::Theta> &theta() const
      { return content.theta; }
   std::optional<transport::Theta> &theta()
      { return content.theta; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // U(value)
   SimpleMaxwellianFission &U(const std::optional<transport::U> &obj)
      { U() = obj; return *this; }

   // theta(value)
   SimpleMaxwellianFission &theta(const std::optional<transport::Theta> &obj)
      { theta() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   SimpleMaxwellianFission() :
      Component{
         BodyText{},
         content.U,
         content.theta
      }
   {
      Component::finish();
   }

   // copy
   SimpleMaxwellianFission(const SimpleMaxwellianFission &other) :
      Component{
         other,
         content.U,
         content.theta
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   SimpleMaxwellianFission(SimpleMaxwellianFission &&other) :
      Component{
         other,
         content.U,
         content.theta
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   SimpleMaxwellianFission(const Node &node) :
      Component{
         BodyText{},
         content.U,
         content.theta
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit SimpleMaxwellianFission(
      const std::optional<transport::U> &U,
      const std::optional<transport::Theta> &theta
   ) :
      Component{
         BodyText{},
         content.U,
         content.theta
      },
      content{
         U,
         theta
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   SimpleMaxwellianFission &operator=(const SimpleMaxwellianFission &) = default;

   // move
   SimpleMaxwellianFission &operator=(SimpleMaxwellianFission &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionTransport/SimpleMaxwellianFission/src/custom.hpp"

}; // class SimpleMaxwellianFission

} // namespace fissionTransport
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
