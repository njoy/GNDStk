
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_POPS
#define NJOY_GNDSTK_V2_0_POPS_POPS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Aliases.hpp"
#include "GNDStk/v2.0/pops/Baryons.hpp"
#include "GNDStk/v2.0/pops/ChemicalElements.hpp"
#include "GNDStk/v2.0/documentation/Documentation.hpp"
#include "GNDStk/v2.0/pops/GaugeBosons.hpp"
#include "GNDStk/v2.0/pops/Leptons.hpp"
#include "GNDStk/v2.0/styles/Styles.hpp"
#include "GNDStk/v2.0/pops/Unorthodoxes.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class PoPs
// -----------------------------------------------------------------------------

namespace pops {

class PoPs : public Component<PoPs> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "PoPs"; }
   static auto GNDSName() { return "PoPs"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("format") |
         XMLName{}
            / Meta<>("name") |
         XMLName{}
            / Meta<>("version") |
         // children
         std::optional<pops::Aliases>{}
            / --Child<>("aliases") |
         std::optional<pops::Baryons>{}
            / --Child<>("baryons") |
         std::optional<pops::ChemicalElements>{}
            / --Child<>("chemicalElements") |
         std::optional<documentation::Documentation>{}
            / --Child<>("documentation") |
         std::optional<pops::GaugeBosons>{}
            / --Child<>("gaugeBosons") |
         std::optional<pops::Leptons>{}
            / --Child<>("leptons") |
         std::optional<styles::Styles>{}
            / --Child<>("styles") |
         std::optional<pops::Unorthodoxes>{}
            / --Child<>("unorthodoxes")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName format;
      XMLName name;
      XMLName version;
      // children
      std::optional<pops::Aliases> aliases;
      std::optional<pops::Baryons> baryons;
      std::optional<pops::ChemicalElements> chemicalElements;
      std::optional<documentation::Documentation> documentation;
      std::optional<pops::GaugeBosons> gaugeBosons;
      std::optional<pops::Leptons> leptons;
      std::optional<styles::Styles> styles;
      std::optional<pops::Unorthodoxes> unorthodoxes;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // format
   const XMLName &format() const
      { return content.format; }
   XMLName &format()
      { return content.format; }

   // name
   const XMLName &name() const
      { return content.name; }
   XMLName &name()
      { return content.name; }

   // version
   const XMLName &version() const
      { return content.version; }
   XMLName &version()
      { return content.version; }

   // aliases
   const std::optional<pops::Aliases> &aliases() const
      { return content.aliases; }
   std::optional<pops::Aliases> &aliases()
      { return content.aliases; }

   // baryons
   const std::optional<pops::Baryons> &baryons() const
      { return content.baryons; }
   std::optional<pops::Baryons> &baryons()
      { return content.baryons; }

   // chemicalElements
   const std::optional<pops::ChemicalElements> &chemicalElements() const
      { return content.chemicalElements; }
   std::optional<pops::ChemicalElements> &chemicalElements()
      { return content.chemicalElements; }

   // documentation
   const std::optional<documentation::Documentation> &doc() const
      { return content.documentation; }
   std::optional<documentation::Documentation> &doc()
      { return content.documentation; }

   // gaugeBosons
   const std::optional<pops::GaugeBosons> &gaugeBosons() const
      { return content.gaugeBosons; }
   std::optional<pops::GaugeBosons> &gaugeBosons()
      { return content.gaugeBosons; }

   // leptons
   const std::optional<pops::Leptons> &leptons() const
      { return content.leptons; }
   std::optional<pops::Leptons> &leptons()
      { return content.leptons; }

   // styles
   const std::optional<styles::Styles> &styles() const
      { return content.styles; }
   std::optional<styles::Styles> &styles()
      { return content.styles; }

   // unorthodoxes
   const std::optional<pops::Unorthodoxes> &unorthodoxes() const
      { return content.unorthodoxes; }
   std::optional<pops::Unorthodoxes> &unorthodoxes()
      { return content.unorthodoxes; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // format(value)
   PoPs &format(const XMLName &obj)
      { format() = obj; return *this; }

   // name(value)
   PoPs &name(const XMLName &obj)
      { name() = obj; return *this; }

   // version(value)
   PoPs &version(const XMLName &obj)
      { version() = obj; return *this; }

   // aliases(value)
   PoPs &aliases(const std::optional<pops::Aliases> &obj)
      { aliases() = obj; return *this; }

   // baryons(value)
   PoPs &baryons(const std::optional<pops::Baryons> &obj)
      { baryons() = obj; return *this; }

   // chemicalElements(value)
   PoPs &chemicalElements(const std::optional<pops::ChemicalElements> &obj)
      { chemicalElements() = obj; return *this; }

   // doc(value)
   PoPs &doc(const std::optional<documentation::Documentation> &obj)
      { doc() = obj; return *this; }

   // gaugeBosons(value)
   PoPs &gaugeBosons(const std::optional<pops::GaugeBosons> &obj)
      { gaugeBosons() = obj; return *this; }

   // leptons(value)
   PoPs &leptons(const std::optional<pops::Leptons> &obj)
      { leptons() = obj; return *this; }

   // styles(value)
   PoPs &styles(const std::optional<styles::Styles> &obj)
      { styles() = obj; return *this; }

   // unorthodoxes(value)
   PoPs &unorthodoxes(const std::optional<pops::Unorthodoxes> &obj)
      { unorthodoxes() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   PoPs() :
      Component{
         BodyText{},
         content.format,
         content.name,
         content.version,
         content.aliases,
         content.baryons,
         content.chemicalElements,
         content.documentation,
         content.gaugeBosons,
         content.leptons,
         content.styles,
         content.unorthodoxes
      }
   {
      Component::finish();
   }

   // copy
   PoPs(const PoPs &other) :
      Component{
         other,
         content.format,
         content.name,
         content.version,
         content.aliases,
         content.baryons,
         content.chemicalElements,
         content.documentation,
         content.gaugeBosons,
         content.leptons,
         content.styles,
         content.unorthodoxes
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   PoPs(PoPs &&other) :
      Component{
         other,
         content.format,
         content.name,
         content.version,
         content.aliases,
         content.baryons,
         content.chemicalElements,
         content.documentation,
         content.gaugeBosons,
         content.leptons,
         content.styles,
         content.unorthodoxes
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   PoPs(const Node &node) :
      Component{
         BodyText{},
         content.format,
         content.name,
         content.version,
         content.aliases,
         content.baryons,
         content.chemicalElements,
         content.documentation,
         content.gaugeBosons,
         content.leptons,
         content.styles,
         content.unorthodoxes
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit PoPs(
      const XMLName &format,
      const XMLName &name,
      const XMLName &version,
      const std::optional<pops::Aliases> &aliases,
      const std::optional<pops::Baryons> &baryons,
      const std::optional<pops::ChemicalElements> &chemicalElements,
      const std::optional<documentation::Documentation> &documentation,
      const std::optional<pops::GaugeBosons> &gaugeBosons,
      const std::optional<pops::Leptons> &leptons,
      const std::optional<styles::Styles> &styles,
      const std::optional<pops::Unorthodoxes> &unorthodoxes
   ) :
      Component{
         BodyText{},
         content.format,
         content.name,
         content.version,
         content.aliases,
         content.baryons,
         content.chemicalElements,
         content.documentation,
         content.gaugeBosons,
         content.leptons,
         content.styles,
         content.unorthodoxes
      },
      content{
         format,
         name,
         version,
         aliases,
         baryons,
         chemicalElements,
         documentation,
         gaugeBosons,
         leptons,
         styles,
         unorthodoxes
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   PoPs &operator=(const PoPs &) = default;

   // move
   PoPs &operator=(PoPs &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/PoPs/src/custom.hpp"

}; // class PoPs

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
