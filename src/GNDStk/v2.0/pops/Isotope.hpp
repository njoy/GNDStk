
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_ISOTOPE
#define NJOY_GNDSTK_V2_0_POPS_ISOTOPE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Nuclides.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class Isotope
// -----------------------------------------------------------------------------

namespace pops {

class Isotope : public Component<Isotope> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "Isotope"; }
   static auto GNDSName() { return "isotope"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("A") |
         XMLName{}
            / Meta<>("symbol") |
         // children
         std::optional<pops::Nuclides>{}
            / --Child<>("nuclides")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Integer32 A;
      XMLName symbol;
      // children
      std::optional<pops::Nuclides> nuclides;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // A
   const Integer32 &A() const
      { return content.A; }
   Integer32 &A()
      { return content.A; }

   // symbol
   const XMLName &symbol() const
      { return content.symbol; }
   XMLName &symbol()
      { return content.symbol; }

   // nuclides
   const std::optional<pops::Nuclides> &nuclides() const
      { return content.nuclides; }
   std::optional<pops::Nuclides> &nuclides()
      { return content.nuclides; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // A(value)
   Isotope &A(const Integer32 &obj)
      { A() = obj; return *this; }

   // symbol(value)
   Isotope &symbol(const XMLName &obj)
      { symbol() = obj; return *this; }

   // nuclides(value)
   Isotope &nuclides(const std::optional<pops::Nuclides> &obj)
      { nuclides() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Isotope() :
      Component{
         BodyText{},
         content.A,
         content.symbol,
         content.nuclides
      }
   {
      Component::finish();
   }

   // copy
   Isotope(const Isotope &other) :
      Component{
         other,
         content.A,
         content.symbol,
         content.nuclides
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Isotope(Isotope &&other) :
      Component{
         other,
         content.A,
         content.symbol,
         content.nuclides
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Isotope(const Node &node) :
      Component{
         BodyText{},
         content.A,
         content.symbol,
         content.nuclides
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Isotope(
      const Integer32 &A,
      const XMLName &symbol,
      const std::optional<pops::Nuclides> &nuclides
   ) :
      Component{
         BodyText{},
         content.A,
         content.symbol,
         content.nuclides
      },
      content{
         A,
         symbol,
         nuclides
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Isotope &operator=(const Isotope &) = default;

   // move
   Isotope &operator=(Isotope &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/Isotope/src/custom.hpp"

}; // class Isotope

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
