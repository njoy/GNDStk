
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_DISCRETE
#define NJOY_GNDSTK_V2_0_POPS_DISCRETE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Energy.hpp"
#include "GNDStk/v2.0/pops/Intensity.hpp"
#include "GNDStk/v2.0/pops/InternalConversionCoefficients.hpp"
#include "GNDStk/v2.0/pops/InternalPairFormationCoefficient.hpp"
#include "GNDStk/v2.0/pops/PhotonEmissionProbabilities.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class Discrete
// -----------------------------------------------------------------------------

namespace pops {

class Discrete : public Component<Discrete> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "Discrete"; }
   static auto GNDSName() { return "discrete"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("type") |
         // children
         pops::Energy{}
            / --Child<>("energy") |
         pops::Intensity{}
            / --Child<>("intensity") |
         std::optional<pops::InternalConversionCoefficients>{}
            / --Child<>("internalConversionCoefficients") |
         std::optional<pops::InternalPairFormationCoefficient>{}
            / --Child<>("internalPairFormationCoefficient") |
         std::optional<pops::PhotonEmissionProbabilities>{}
            / --Child<>("photonEmissionProbabilities")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> type;
      // children
      pops::Energy energy;
      pops::Intensity intensity;
      std::optional<pops::InternalConversionCoefficients> internalConversionCoefficients;
      std::optional<pops::InternalPairFormationCoefficient> internalPairFormationCoefficient;
      std::optional<pops::PhotonEmissionProbabilities> photonEmissionProbabilities;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // type
   const std::optional<XMLName> &type() const
      { return content.type; }
   std::optional<XMLName> &type()
      { return content.type; }

   // energy
   const pops::Energy &energy() const
      { return content.energy; }
   pops::Energy &energy()
      { return content.energy; }

   // intensity
   const pops::Intensity &intensity() const
      { return content.intensity; }
   pops::Intensity &intensity()
      { return content.intensity; }

   // internalConversionCoefficients
   const std::optional<pops::InternalConversionCoefficients> &internalConversionCoefficients() const
      { return content.internalConversionCoefficients; }
   std::optional<pops::InternalConversionCoefficients> &internalConversionCoefficients()
      { return content.internalConversionCoefficients; }

   // internalPairFormationCoefficient
   const std::optional<pops::InternalPairFormationCoefficient> &internalPairFormationCoefficient() const
      { return content.internalPairFormationCoefficient; }
   std::optional<pops::InternalPairFormationCoefficient> &internalPairFormationCoefficient()
      { return content.internalPairFormationCoefficient; }

   // photonEmissionProbabilities
   const std::optional<pops::PhotonEmissionProbabilities> &photonEmissionProbabilities() const
      { return content.photonEmissionProbabilities; }
   std::optional<pops::PhotonEmissionProbabilities> &photonEmissionProbabilities()
      { return content.photonEmissionProbabilities; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // type(value)
   Discrete &type(const std::optional<XMLName> &obj)
      { type() = obj; return *this; }

   // energy(value)
   Discrete &energy(const pops::Energy &obj)
      { energy() = obj; return *this; }

   // intensity(value)
   Discrete &intensity(const pops::Intensity &obj)
      { intensity() = obj; return *this; }

   // internalConversionCoefficients(value)
   Discrete &internalConversionCoefficients(const std::optional<pops::InternalConversionCoefficients> &obj)
      { internalConversionCoefficients() = obj; return *this; }

   // internalPairFormationCoefficient(value)
   Discrete &internalPairFormationCoefficient(const std::optional<pops::InternalPairFormationCoefficient> &obj)
      { internalPairFormationCoefficient() = obj; return *this; }

   // photonEmissionProbabilities(value)
   Discrete &photonEmissionProbabilities(const std::optional<pops::PhotonEmissionProbabilities> &obj)
      { photonEmissionProbabilities() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Discrete() :
      Component{
         BodyText{},
         content.type,
         content.energy,
         content.intensity,
         content.internalConversionCoefficients,
         content.internalPairFormationCoefficient,
         content.photonEmissionProbabilities
      }
   {
      Component::finish();
   }

   // copy
   Discrete(const Discrete &other) :
      Component{
         other,
         content.type,
         content.energy,
         content.intensity,
         content.internalConversionCoefficients,
         content.internalPairFormationCoefficient,
         content.photonEmissionProbabilities
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Discrete(Discrete &&other) :
      Component{
         other,
         content.type,
         content.energy,
         content.intensity,
         content.internalConversionCoefficients,
         content.internalPairFormationCoefficient,
         content.photonEmissionProbabilities
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Discrete(const Node &node) :
      Component{
         BodyText{},
         content.type,
         content.energy,
         content.intensity,
         content.internalConversionCoefficients,
         content.internalPairFormationCoefficient,
         content.photonEmissionProbabilities
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Discrete(
      const std::optional<XMLName> &type,
      const pops::Energy &energy,
      const pops::Intensity &intensity,
      const std::optional<pops::InternalConversionCoefficients> &internalConversionCoefficients,
      const std::optional<pops::InternalPairFormationCoefficient> &internalPairFormationCoefficient,
      const std::optional<pops::PhotonEmissionProbabilities> &photonEmissionProbabilities
   ) :
      Component{
         BodyText{},
         content.type,
         content.energy,
         content.intensity,
         content.internalConversionCoefficients,
         content.internalPairFormationCoefficient,
         content.photonEmissionProbabilities
      },
      content{
         type,
         energy,
         intensity,
         internalConversionCoefficients,
         internalPairFormationCoefficient,
         photonEmissionProbabilities
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Discrete &operator=(const Discrete &) = default;

   // move
   Discrete &operator=(Discrete &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/Discrete/src/custom.hpp"

}; // class Discrete

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
