
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_SPECTRUM
#define NJOY_GNDSTK_V2_0_POPS_SPECTRUM

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Continuum.hpp"
#include "GNDStk/v2.0/pops/Discrete.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class Spectrum
// -----------------------------------------------------------------------------

namespace pops {

class Spectrum : public Component<Spectrum> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "Spectrum"; }
   static auto GNDSName() { return "spectrum"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("pid") |
         // children
         std::optional<pops::Continuum>{}
            / --Child<>("continuum") |
         std::optional<pops::Discrete>{}
            / ++Child<>("discrete")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      XMLName pid;
      // children
      std::optional<pops::Continuum> continuum;
      std::optional<std::vector<pops::Discrete>> discrete;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // pid
   const XMLName &pid() const
      { return content.pid; }
   XMLName &pid()
      { return content.pid; }

   // continuum
   const std::optional<pops::Continuum> &continuum() const
      { return content.continuum; }
   std::optional<pops::Continuum> &continuum()
      { return content.continuum; }

   // discrete
   const std::optional<std::vector<pops::Discrete>> &discrete() const
      { return content.discrete; }
   std::optional<std::vector<pops::Discrete>> &discrete()
      { return content.discrete; }

   // discrete(index)
   const pops::Discrete &discrete(const std::size_t index) const
      { return getter(discrete(), index, "discrete"); }
   pops::Discrete &discrete(const std::size_t index)
      { return getter(discrete(), index, "discrete"); }

   // discrete(label)
   const pops::Discrete &discrete(const std::string &label) const
      { return getter(discrete(), label, "discrete"); }
   pops::Discrete &discrete(const std::string &label)
      { return getter(discrete(), label, "discrete"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   Spectrum &label(const XMLName &obj)
      { label() = obj; return *this; }

   // pid(value)
   Spectrum &pid(const XMLName &obj)
      { pid() = obj; return *this; }

   // continuum(value)
   Spectrum &continuum(const std::optional<pops::Continuum> &obj)
      { continuum() = obj; return *this; }

   // discrete(value)
   Spectrum &discrete(const std::optional<std::vector<pops::Discrete>> &obj)
      { discrete() = obj; return *this; }

   // discrete(index,value)
   Spectrum &discrete(
      const std::size_t index,
      const pops::Discrete &obj
   ) {
      discrete(index) = obj; return *this;
   }

   // discrete(label,value)
   Spectrum &discrete(
      const std::string &label,
      const pops::Discrete &obj
   ) {
      discrete(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Spectrum() :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.continuum,
         content.discrete
      }
   {
      Component::finish();
   }

   // copy
   Spectrum(const Spectrum &other) :
      Component{
         other,
         content.label,
         content.pid,
         content.continuum,
         content.discrete
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Spectrum(Spectrum &&other) :
      Component{
         other,
         content.label,
         content.pid,
         content.continuum,
         content.discrete
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Spectrum(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.continuum,
         content.discrete
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Spectrum(
      const XMLName &label,
      const XMLName &pid,
      const std::optional<pops::Continuum> &continuum,
      const std::optional<std::vector<pops::Discrete>> &discrete
   ) :
      Component{
         BodyText{},
         content.label,
         content.pid,
         content.continuum,
         content.discrete
      },
      content{
         label,
         pid,
         continuum,
         discrete
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Spectrum &operator=(const Spectrum &) = default;

   // move
   Spectrum &operator=(Spectrum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/Spectrum/src/custom.hpp"

}; // class Spectrum

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
