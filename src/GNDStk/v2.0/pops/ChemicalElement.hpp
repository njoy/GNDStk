
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_CHEMICALELEMENT
#define NJOY_GNDSTK_V2_0_POPS_CHEMICALELEMENT

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Atomic.hpp"
#include "GNDStk/v2.0/pops/Isotopes.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class ChemicalElement
// -----------------------------------------------------------------------------

namespace pops {

class ChemicalElement : public Component<ChemicalElement> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "ChemicalElement"; }
   static auto GNDSName() { return "chemicalElement"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("Z") |
         std::optional<XMLName>{}
            / Meta<>("name") |
         XMLName{}
            / Meta<>("symbol") |
         // children
         std::optional<pops::Atomic>{}
            / --Child<>("atomic") |
         std::optional<pops::Isotopes>{}
            / --Child<>("isotopes")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Integer32 Z;
      std::optional<XMLName> name;
      XMLName symbol;
      // children
      std::optional<pops::Atomic> atomic;
      std::optional<pops::Isotopes> isotopes;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // Z
   const Integer32 &Z() const
      { return content.Z; }
   Integer32 &Z()
      { return content.Z; }

   // name
   const std::optional<XMLName> &name() const
      { return content.name; }
   std::optional<XMLName> &name()
      { return content.name; }

   // symbol
   const XMLName &symbol() const
      { return content.symbol; }
   XMLName &symbol()
      { return content.symbol; }

   // atomic
   const std::optional<pops::Atomic> &atomic() const
      { return content.atomic; }
   std::optional<pops::Atomic> &atomic()
      { return content.atomic; }

   // isotopes
   const std::optional<pops::Isotopes> &isotopes() const
      { return content.isotopes; }
   std::optional<pops::Isotopes> &isotopes()
      { return content.isotopes; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // Z(value)
   ChemicalElement &Z(const Integer32 &obj)
      { Z() = obj; return *this; }

   // name(value)
   ChemicalElement &name(const std::optional<XMLName> &obj)
      { name() = obj; return *this; }

   // symbol(value)
   ChemicalElement &symbol(const XMLName &obj)
      { symbol() = obj; return *this; }

   // atomic(value)
   ChemicalElement &atomic(const std::optional<pops::Atomic> &obj)
      { atomic() = obj; return *this; }

   // isotopes(value)
   ChemicalElement &isotopes(const std::optional<pops::Isotopes> &obj)
      { isotopes() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ChemicalElement() :
      Component{
         BodyText{},
         content.Z,
         content.name,
         content.symbol,
         content.atomic,
         content.isotopes
      }
   {
      Component::finish();
   }

   // copy
   ChemicalElement(const ChemicalElement &other) :
      Component{
         other,
         content.Z,
         content.name,
         content.symbol,
         content.atomic,
         content.isotopes
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ChemicalElement(ChemicalElement &&other) :
      Component{
         other,
         content.Z,
         content.name,
         content.symbol,
         content.atomic,
         content.isotopes
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ChemicalElement(const Node &node) :
      Component{
         BodyText{},
         content.Z,
         content.name,
         content.symbol,
         content.atomic,
         content.isotopes
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ChemicalElement(
      const Integer32 &Z,
      const std::optional<XMLName> &name,
      const XMLName &symbol,
      const std::optional<pops::Atomic> &atomic,
      const std::optional<pops::Isotopes> &isotopes
   ) :
      Component{
         BodyText{},
         content.Z,
         content.name,
         content.symbol,
         content.atomic,
         content.isotopes
      },
      content{
         Z,
         name,
         symbol,
         atomic,
         isotopes
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ChemicalElement &operator=(const ChemicalElement &) = default;

   // move
   ChemicalElement &operator=(ChemicalElement &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/ChemicalElement/src/custom.hpp"

}; // class ChemicalElement

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
