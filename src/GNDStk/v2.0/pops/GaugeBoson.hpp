
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_GAUGEBOSON
#define NJOY_GNDSTK_V2_0_POPS_GAUGEBOSON

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Charge.hpp"
#include "GNDStk/v2.0/pops/DecayData.hpp"
#include "GNDStk/v2.0/pops/Halflife.hpp"
#include "GNDStk/v2.0/pops/Mass.hpp"
#include "GNDStk/v2.0/pops/Parity.hpp"
#include "GNDStk/v2.0/pops/Spin.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class GaugeBoson
// -----------------------------------------------------------------------------

namespace pops {

class GaugeBoson : public Component<GaugeBoson> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "GaugeBoson"; }
   static auto GNDSName() { return "gaugeBoson"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("id") |
         // children
         std::optional<pops::Charge>{}
            / --Child<>("charge") |
         std::optional<pops::DecayData>{}
            / --Child<>("decayData") |
         std::optional<pops::Halflife>{}
            / --Child<>("halflife") |
         std::optional<pops::Mass>{}
            / --Child<>("mass") |
         std::optional<pops::Parity>{}
            / --Child<>("parity") |
         std::optional<pops::Spin>{}
            / --Child<>("spin")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName id;
      // children
      std::optional<pops::Charge> charge;
      std::optional<pops::DecayData> decayData;
      std::optional<pops::Halflife> halflife;
      std::optional<pops::Mass> mass;
      std::optional<pops::Parity> parity;
      std::optional<pops::Spin> spin;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // id
   const XMLName &id() const
      { return content.id; }
   XMLName &id()
      { return content.id; }

   // charge
   const std::optional<pops::Charge> &charge() const
      { return content.charge; }
   std::optional<pops::Charge> &charge()
      { return content.charge; }

   // decayData
   const std::optional<pops::DecayData> &decayData() const
      { return content.decayData; }
   std::optional<pops::DecayData> &decayData()
      { return content.decayData; }

   // halflife
   const std::optional<pops::Halflife> &halflife() const
      { return content.halflife; }
   std::optional<pops::Halflife> &halflife()
      { return content.halflife; }

   // mass
   const std::optional<pops::Mass> &mass() const
      { return content.mass; }
   std::optional<pops::Mass> &mass()
      { return content.mass; }

   // parity
   const std::optional<pops::Parity> &parity() const
      { return content.parity; }
   std::optional<pops::Parity> &parity()
      { return content.parity; }

   // spin
   const std::optional<pops::Spin> &spin() const
      { return content.spin; }
   std::optional<pops::Spin> &spin()
      { return content.spin; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // id(value)
   GaugeBoson &id(const XMLName &obj)
      { id() = obj; return *this; }

   // charge(value)
   GaugeBoson &charge(const std::optional<pops::Charge> &obj)
      { charge() = obj; return *this; }

   // decayData(value)
   GaugeBoson &decayData(const std::optional<pops::DecayData> &obj)
      { decayData() = obj; return *this; }

   // halflife(value)
   GaugeBoson &halflife(const std::optional<pops::Halflife> &obj)
      { halflife() = obj; return *this; }

   // mass(value)
   GaugeBoson &mass(const std::optional<pops::Mass> &obj)
      { mass() = obj; return *this; }

   // parity(value)
   GaugeBoson &parity(const std::optional<pops::Parity> &obj)
      { parity() = obj; return *this; }

   // spin(value)
   GaugeBoson &spin(const std::optional<pops::Spin> &obj)
      { spin() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   GaugeBoson() :
      Component{
         BodyText{},
         content.id,
         content.charge,
         content.decayData,
         content.halflife,
         content.mass,
         content.parity,
         content.spin
      }
   {
      Component::finish();
   }

   // copy
   GaugeBoson(const GaugeBoson &other) :
      Component{
         other,
         content.id,
         content.charge,
         content.decayData,
         content.halflife,
         content.mass,
         content.parity,
         content.spin
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   GaugeBoson(GaugeBoson &&other) :
      Component{
         other,
         content.id,
         content.charge,
         content.decayData,
         content.halflife,
         content.mass,
         content.parity,
         content.spin
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   GaugeBoson(const Node &node) :
      Component{
         BodyText{},
         content.id,
         content.charge,
         content.decayData,
         content.halflife,
         content.mass,
         content.parity,
         content.spin
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit GaugeBoson(
      const XMLName &id,
      const std::optional<pops::Charge> &charge,
      const std::optional<pops::DecayData> &decayData,
      const std::optional<pops::Halflife> &halflife,
      const std::optional<pops::Mass> &mass,
      const std::optional<pops::Parity> &parity,
      const std::optional<pops::Spin> &spin
   ) :
      Component{
         BodyText{},
         content.id,
         content.charge,
         content.decayData,
         content.halflife,
         content.mass,
         content.parity,
         content.spin
      },
      content{
         id,
         charge,
         decayData,
         halflife,
         mass,
         parity,
         spin
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   GaugeBoson &operator=(const GaugeBoson &) = default;

   // move
   GaugeBoson &operator=(GaugeBoson &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/GaugeBoson/src/custom.hpp"

}; // class GaugeBoson

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
