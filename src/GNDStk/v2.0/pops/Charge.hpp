
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_CHARGE
#define NJOY_GNDSTK_V2_0_POPS_CHARGE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Fraction.hpp"
#include "GNDStk/v2.0/containers/Integer.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class Charge
// -----------------------------------------------------------------------------

namespace pops {

class Charge : public Component<Charge> {

   using _t = std::variant<
      containers::Fraction,
      containers::Integer
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "Charge"; }
   static auto GNDSName() { return "charge"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         _t{}
            / --(Child<>("fraction") || Child<>("integer"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children - variant
      _t _fractioninteger;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // _fractioninteger
   const _t &_fractioninteger() const
      { return content._fractioninteger; }
   _t &_fractioninteger()
      { return content._fractioninteger; }

   // fraction
   const containers::Fraction *fraction() const
      { return getter<containers::Fraction>(_fractioninteger(), "fraction"); }
   containers::Fraction *fraction()
      { return getter<containers::Fraction>(_fractioninteger(), "fraction"); }

   // integer
   const containers::Integer *integer() const
      { return getter<containers::Integer>(_fractioninteger(), "integer"); }
   containers::Integer *integer()
      { return getter<containers::Integer>(_fractioninteger(), "integer"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // _fractioninteger(value)
   Charge &_fractioninteger(const _t &obj)
      { _fractioninteger() = obj; return *this; }

   // fraction(value)
   Charge &fraction(const std::optional<containers::Fraction> &obj)
      { if (obj) _fractioninteger(obj.value()); return *this; }

   // integer(value)
   Charge &integer(const std::optional<containers::Integer> &obj)
      { if (obj) _fractioninteger(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Charge() :
      Component{
         BodyText{},
         content._fractioninteger
      }
   {
      Component::finish();
   }

   // copy
   Charge(const Charge &other) :
      Component{
         other,
         content._fractioninteger
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Charge(Charge &&other) :
      Component{
         other,
         content._fractioninteger
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Charge(const Node &node) :
      Component{
         BodyText{},
         content._fractioninteger
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Charge(
      const _t &_fractioninteger
   ) :
      Component{
         BodyText{},
         content._fractioninteger
      },
      content{
         _fractioninteger
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Charge &operator=(const Charge &) = default;

   // move
   Charge &operator=(Charge &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/Charge/src/custom.hpp"

}; // class Charge

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
