
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_DECAYMODE
#define NJOY_GNDSTK_V2_0_POPS_DECAYMODE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/Q.hpp"
#include "GNDStk/v2.0/pops/DecayPath.hpp"
#include "GNDStk/v2.0/pops/InternalConversionCoefficients.hpp"
#include "GNDStk/v2.0/pops/PhotonEmissionProbabilities.hpp"
#include "GNDStk/v2.0/pops/Probability.hpp"
#include "GNDStk/v2.0/pops/Spectra.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class DecayMode
// -----------------------------------------------------------------------------

namespace pops {

class DecayMode : public Component<DecayMode> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "DecayMode"; }
   static auto GNDSName() { return "decayMode"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         enums::DecayType{}
            / Meta<>("mode") |
         // children
         std::optional<pops::Q>{}
            / --Child<>("Q") |
         std::optional<pops::DecayPath>{}
            / --Child<>("decayPath") |
         std::optional<pops::InternalConversionCoefficients>{}
            / --Child<>("internalConversionCoefficients") |
         std::optional<pops::PhotonEmissionProbabilities>{}
            / --Child<>("photonEmissionProbabilities") |
         pops::Probability{}
            / --Child<>("probability") |
         std::optional<pops::Spectra>{}
            / --Child<>("spectra")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      enums::DecayType mode;
      // children
      std::optional<pops::Q> Q;
      std::optional<pops::DecayPath> decayPath;
      std::optional<pops::InternalConversionCoefficients> internalConversionCoefficients;
      std::optional<pops::PhotonEmissionProbabilities> photonEmissionProbabilities;
      pops::Probability probability;
      std::optional<pops::Spectra> spectra;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // mode
   const enums::DecayType &mode() const
      { return content.mode; }
   enums::DecayType &mode()
      { return content.mode; }

   // Q
   const std::optional<pops::Q> &Q() const
      { return content.Q; }
   std::optional<pops::Q> &Q()
      { return content.Q; }

   // decayPath
   const std::optional<pops::DecayPath> &decayPath() const
      { return content.decayPath; }
   std::optional<pops::DecayPath> &decayPath()
      { return content.decayPath; }

   // internalConversionCoefficients
   const std::optional<pops::InternalConversionCoefficients> &internalConversionCoefficients() const
      { return content.internalConversionCoefficients; }
   std::optional<pops::InternalConversionCoefficients> &internalConversionCoefficients()
      { return content.internalConversionCoefficients; }

   // photonEmissionProbabilities
   const std::optional<pops::PhotonEmissionProbabilities> &photonEmissionProbabilities() const
      { return content.photonEmissionProbabilities; }
   std::optional<pops::PhotonEmissionProbabilities> &photonEmissionProbabilities()
      { return content.photonEmissionProbabilities; }

   // probability
   const pops::Probability &probability() const
      { return content.probability; }
   pops::Probability &probability()
      { return content.probability; }

   // spectra
   const std::optional<pops::Spectra> &spectra() const
      { return content.spectra; }
   std::optional<pops::Spectra> &spectra()
      { return content.spectra; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   DecayMode &label(const XMLName &obj)
      { label() = obj; return *this; }

   // mode(value)
   DecayMode &mode(const enums::DecayType &obj)
      { mode() = obj; return *this; }

   // Q(value)
   DecayMode &Q(const std::optional<pops::Q> &obj)
      { Q() = obj; return *this; }

   // decayPath(value)
   DecayMode &decayPath(const std::optional<pops::DecayPath> &obj)
      { decayPath() = obj; return *this; }

   // internalConversionCoefficients(value)
   DecayMode &internalConversionCoefficients(const std::optional<pops::InternalConversionCoefficients> &obj)
      { internalConversionCoefficients() = obj; return *this; }

   // photonEmissionProbabilities(value)
   DecayMode &photonEmissionProbabilities(const std::optional<pops::PhotonEmissionProbabilities> &obj)
      { photonEmissionProbabilities() = obj; return *this; }

   // probability(value)
   DecayMode &probability(const pops::Probability &obj)
      { probability() = obj; return *this; }

   // spectra(value)
   DecayMode &spectra(const std::optional<pops::Spectra> &obj)
      { spectra() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   DecayMode() :
      Component{
         BodyText{},
         content.label,
         content.mode,
         content.Q,
         content.decayPath,
         content.internalConversionCoefficients,
         content.photonEmissionProbabilities,
         content.probability,
         content.spectra
      }
   {
      Component::finish();
   }

   // copy
   DecayMode(const DecayMode &other) :
      Component{
         other,
         content.label,
         content.mode,
         content.Q,
         content.decayPath,
         content.internalConversionCoefficients,
         content.photonEmissionProbabilities,
         content.probability,
         content.spectra
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   DecayMode(DecayMode &&other) :
      Component{
         other,
         content.label,
         content.mode,
         content.Q,
         content.decayPath,
         content.internalConversionCoefficients,
         content.photonEmissionProbabilities,
         content.probability,
         content.spectra
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   DecayMode(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.mode,
         content.Q,
         content.decayPath,
         content.internalConversionCoefficients,
         content.photonEmissionProbabilities,
         content.probability,
         content.spectra
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit DecayMode(
      const XMLName &label,
      const enums::DecayType &mode,
      const std::optional<pops::Q> &Q,
      const std::optional<pops::DecayPath> &decayPath,
      const std::optional<pops::InternalConversionCoefficients> &internalConversionCoefficients,
      const std::optional<pops::PhotonEmissionProbabilities> &photonEmissionProbabilities,
      const pops::Probability &probability,
      const std::optional<pops::Spectra> &spectra
   ) :
      Component{
         BodyText{},
         content.label,
         content.mode,
         content.Q,
         content.decayPath,
         content.internalConversionCoefficients,
         content.photonEmissionProbabilities,
         content.probability,
         content.spectra
      },
      content{
         label,
         mode,
         Q,
         decayPath,
         internalConversionCoefficients,
         photonEmissionProbabilities,
         probability,
         spectra
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   DecayMode &operator=(const DecayMode &) = default;

   // move
   DecayMode &operator=(DecayMode &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/DecayMode/src/custom.hpp"

}; // class DecayMode

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
