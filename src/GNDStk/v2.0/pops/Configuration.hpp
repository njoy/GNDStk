
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_CONFIGURATION
#define NJOY_GNDSTK_V2_0_POPS_CONFIGURATION

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/BindingEnergy.hpp"
#include "GNDStk/v2.0/pops/DecayData.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class Configuration
// -----------------------------------------------------------------------------

namespace pops {

class Configuration : public Component<Configuration> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "Configuration"; }
   static auto GNDSName() { return "configuration"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Float64{}
            / Meta<>("electronNumber") |
         std::string{}
            / Meta<>("subshell") |
         // children
         pops::BindingEnergy{}
            / --Child<>("bindingEnergy") |
         std::optional<pops::DecayData>{}
            / --Child<>("decayData")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Float64 electronNumber;
      std::string subshell;
      // children
      pops::BindingEnergy bindingEnergy;
      std::optional<pops::DecayData> decayData;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // electronNumber
   const Float64 &electronNumber() const
      { return content.electronNumber; }
   Float64 &electronNumber()
      { return content.electronNumber; }

   // subshell
   const std::string &subshell() const
      { return content.subshell; }
   std::string &subshell()
      { return content.subshell; }

   // bindingEnergy
   const pops::BindingEnergy &bindingEnergy() const
      { return content.bindingEnergy; }
   pops::BindingEnergy &bindingEnergy()
      { return content.bindingEnergy; }

   // decayData
   const std::optional<pops::DecayData> &decayData() const
      { return content.decayData; }
   std::optional<pops::DecayData> &decayData()
      { return content.decayData; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // electronNumber(value)
   Configuration &electronNumber(const Float64 &obj)
      { electronNumber() = obj; return *this; }

   // subshell(value)
   Configuration &subshell(const std::string &obj)
      { subshell() = obj; return *this; }

   // bindingEnergy(value)
   Configuration &bindingEnergy(const pops::BindingEnergy &obj)
      { bindingEnergy() = obj; return *this; }

   // decayData(value)
   Configuration &decayData(const std::optional<pops::DecayData> &obj)
      { decayData() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Configuration() :
      Component{
         BodyText{},
         content.electronNumber,
         content.subshell,
         content.bindingEnergy,
         content.decayData
      }
   {
      Component::finish();
   }

   // copy
   Configuration(const Configuration &other) :
      Component{
         other,
         content.electronNumber,
         content.subshell,
         content.bindingEnergy,
         content.decayData
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Configuration(Configuration &&other) :
      Component{
         other,
         content.electronNumber,
         content.subshell,
         content.bindingEnergy,
         content.decayData
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Configuration(const Node &node) :
      Component{
         BodyText{},
         content.electronNumber,
         content.subshell,
         content.bindingEnergy,
         content.decayData
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Configuration(
      const Float64 &electronNumber,
      const std::string &subshell,
      const pops::BindingEnergy &bindingEnergy,
      const std::optional<pops::DecayData> &decayData
   ) :
      Component{
         BodyText{},
         content.electronNumber,
         content.subshell,
         content.bindingEnergy,
         content.decayData
      },
      content{
         electronNumber,
         subshell,
         bindingEnergy,
         decayData
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Configuration &operator=(const Configuration &) = default;

   // move
   Configuration &operator=(Configuration &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/Configuration/src/custom.hpp"

}; // class Configuration

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
