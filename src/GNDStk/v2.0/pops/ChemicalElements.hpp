
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_POPS_CHEMICALELEMENTS
#define NJOY_GNDSTK_V2_0_POPS_CHEMICALELEMENTS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/pops/ChemicalElement.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// pops::
// class ChemicalElements
// -----------------------------------------------------------------------------

namespace pops {

class ChemicalElements : public Component<ChemicalElements> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "pops"; }
   static auto className() { return "ChemicalElements"; }
   static auto GNDSName() { return "chemicalElements"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<pops::ChemicalElement>{}
            / ++Child<>("chemicalElement")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<std::vector<pops::ChemicalElement>> chemicalElement;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // chemicalElement
   const std::optional<std::vector<pops::ChemicalElement>> &chemicalElement() const
      { return content.chemicalElement; }
   std::optional<std::vector<pops::ChemicalElement>> &chemicalElement()
      { return content.chemicalElement; }

   // chemicalElement(index)
   const pops::ChemicalElement &chemicalElement(const std::size_t index) const
      { return getter(chemicalElement(), index, "chemicalElement"); }
   pops::ChemicalElement &chemicalElement(const std::size_t index)
      { return getter(chemicalElement(), index, "chemicalElement"); }

   // chemicalElement(label)
   const pops::ChemicalElement &chemicalElement(const std::string &label) const
      { return getter(chemicalElement(), label, "chemicalElement"); }
   pops::ChemicalElement &chemicalElement(const std::string &label)
      { return getter(chemicalElement(), label, "chemicalElement"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // chemicalElement(value)
   ChemicalElements &chemicalElement(const std::optional<std::vector<pops::ChemicalElement>> &obj)
      { chemicalElement() = obj; return *this; }

   // chemicalElement(index,value)
   ChemicalElements &chemicalElement(
      const std::size_t index,
      const pops::ChemicalElement &obj
   ) {
      chemicalElement(index) = obj; return *this;
   }

   // chemicalElement(label,value)
   ChemicalElements &chemicalElement(
      const std::string &label,
      const pops::ChemicalElement &obj
   ) {
      chemicalElement(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   ChemicalElements() :
      Component{
         BodyText{},
         content.chemicalElement
      }
   {
      Component::finish();
   }

   // copy
   ChemicalElements(const ChemicalElements &other) :
      Component{
         other,
         content.chemicalElement
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   ChemicalElements(ChemicalElements &&other) :
      Component{
         other,
         content.chemicalElement
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   ChemicalElements(const Node &node) :
      Component{
         BodyText{},
         content.chemicalElement
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit ChemicalElements(
      const std::optional<std::vector<pops::ChemicalElement>> &chemicalElement
   ) :
      Component{
         BodyText{},
         content.chemicalElement
      },
      content{
         chemicalElement
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   ChemicalElements &operator=(const ChemicalElements &) = default;

   // move
   ChemicalElements &operator=(ChemicalElements &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/pops/ChemicalElements/src/custom.hpp"

}; // class ChemicalElements

} // namespace pops
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
