
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_ABSTRACT_PHYSICALQUANTITY
#define NJOY_GNDSTK_V2_0_ABSTRACT_PHYSICALQUANTITY

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/documentation/Documentation.hpp"
#include "GNDStk/v2.0/unknownNamespace/Uncertainty.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// abstract::
// class PhysicalQuantity
// -----------------------------------------------------------------------------

namespace abstract {

class PhysicalQuantity : public Component<PhysicalQuantity> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "abstract"; }
   static auto className() { return "PhysicalQuantity"; }
   static auto GNDSName() { return "physicalQuantity"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("unit") |
         XMLName{}
            / Meta<>("value") |
         // children
         std::optional<documentation::Documentation>{}
            / --Child<>("documentation") |
         std::optional<unknownNamespace::Uncertainty>{}
            / --Child<>("uncertainty")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      XMLName label;
      std::optional<XMLName> unit;
      XMLName value;
      // children
      std::optional<documentation::Documentation> documentation;
      std::optional<unknownNamespace::Uncertainty> uncertainty;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const XMLName &label() const
      { return content.label; }
   XMLName &label()
      { return content.label; }

   // unit
   const std::optional<XMLName> &unit() const
      { return content.unit; }
   std::optional<XMLName> &unit()
      { return content.unit; }

   // value
   const XMLName &value() const
      { return content.value; }
   XMLName &value()
      { return content.value; }

   // documentation
   const std::optional<documentation::Documentation> &documentation() const
      { return content.documentation; }
   std::optional<documentation::Documentation> &documentation()
      { return content.documentation; }

   // uncertainty
   const std::optional<unknownNamespace::Uncertainty> &uncertainty() const
      { return content.uncertainty; }
   std::optional<unknownNamespace::Uncertainty> &uncertainty()
      { return content.uncertainty; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   PhysicalQuantity &label(const XMLName &obj)
      { label() = obj; return *this; }

   // unit(value)
   PhysicalQuantity &unit(const std::optional<XMLName> &obj)
      { unit() = obj; return *this; }

   // value(value)
   PhysicalQuantity &value(const XMLName &obj)
      { value() = obj; return *this; }

   // documentation(value)
   PhysicalQuantity &documentation(const std::optional<documentation::Documentation> &obj)
      { documentation() = obj; return *this; }

   // uncertainty(value)
   PhysicalQuantity &uncertainty(const std::optional<unknownNamespace::Uncertainty> &obj)
      { uncertainty() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   PhysicalQuantity() :
      Component{
         BodyText{},
         content.label,
         content.unit,
         content.value,
         content.documentation,
         content.uncertainty
      }
   {
      Component::finish();
   }

   // copy
   PhysicalQuantity(const PhysicalQuantity &other) :
      Component{
         other,
         content.label,
         content.unit,
         content.value,
         content.documentation,
         content.uncertainty
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   PhysicalQuantity(PhysicalQuantity &&other) :
      Component{
         other,
         content.label,
         content.unit,
         content.value,
         content.documentation,
         content.uncertainty
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   PhysicalQuantity(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.unit,
         content.value,
         content.documentation,
         content.uncertainty
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit PhysicalQuantity(
      const XMLName &label,
      const std::optional<XMLName> &unit,
      const XMLName &value,
      const std::optional<documentation::Documentation> &documentation,
      const std::optional<unknownNamespace::Uncertainty> &uncertainty
   ) :
      Component{
         BodyText{},
         content.label,
         content.unit,
         content.value,
         content.documentation,
         content.uncertainty
      },
      content{
         label,
         unit,
         value,
         documentation,
         uncertainty
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   PhysicalQuantity &operator=(const PhysicalQuantity &) = default;

   // move
   PhysicalQuantity &operator=(PhysicalQuantity &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/abstract/PhysicalQuantity/src/custom.hpp"

}; // class PhysicalQuantity

} // namespace abstract
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
