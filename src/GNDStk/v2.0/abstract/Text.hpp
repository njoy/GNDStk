
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_ABSTRACT_TEXT
#define NJOY_GNDSTK_V2_0_ABSTRACT_TEXT

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// abstract::
// class Text
// -----------------------------------------------------------------------------

namespace abstract {

class Text : public Component<Text,true> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "abstract"; }
   static auto className() { return "Text"; }
   static auto GNDSName() { return "text"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Defaulted<XMLName>{"ascii"}
            / Meta<>("encoding") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         Defaulted<std::string>{"enums::GridStyle::none"}
            / Meta<>("markup")
      ;
   }

public:

   using Component::construct;
   using BodyText::operator=;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const XMLName encoding = "ascii";
      static inline const std::string markup = "enums::GridStyle::none";
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Defaulted<XMLName> encoding{"ascii"};
      std::optional<XMLName> label;
      Defaulted<std::string> markup{"enums::GridStyle::none"};
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // encoding
   const Defaulted<XMLName> &encoding() const
      { return content.encoding; }
   Defaulted<XMLName> &encoding()
      { return content.encoding; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // markup
   const Defaulted<std::string> &markup() const
      { return content.markup; }
   Defaulted<std::string> &markup()
      { return content.markup; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // encoding(value)
   Text &encoding(const Defaulted<XMLName> &obj)
      { content.encoding = obj; return *this; }
   Text &encoding(const std::optional<XMLName> &obj)
      { content.encoding = obj; return *this; }

   // label(value)
   Text &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // markup(value)
   Text &markup(const Defaulted<std::string> &obj)
      { content.markup = obj; return *this; }
   Text &markup(const std::optional<std::string> &obj)
      { content.markup = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Text() :
      Component{
         BodyText{},
         content.encoding,
         content.label,
         content.markup
      }
   {
      Component::finish();
   }

   // copy
   Text(const Text &other) :
      Component{
         other,
         content.encoding,
         content.label,
         content.markup
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Text(Text &&other) :
      Component{
         other,
         content.encoding,
         content.label,
         content.markup
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Text(const Node &node) :
      Component{
         BodyText{},
         content.encoding,
         content.label,
         content.markup
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Text(
      const std::optional<XMLName> &encoding,
      const std::optional<XMLName> &label,
      const std::optional<std::string> &markup
   ) :
      Component{
         BodyText{},
         content.encoding,
         content.label,
         content.markup
      },
      content{
         Defaulted<XMLName>(defaults.encoding,encoding),
         label,
         Defaulted<std::string>(defaults.markup,markup)
      }
   {
      Component::finish();
   }

   // from vector
   template<class T, class = std::enable_if_t<body::template supported<T>>>
   Text(const std::vector<T> &vector) :
      Component{
         BodyText{},
         content.encoding,
         content.label,
         content.markup
      }
   {
      Component::finish(vector);
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Text &operator=(const Text &) = default;

   // move
   Text &operator=(Text &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/abstract/Text/src/custom.hpp"

}; // class Text

} // namespace abstract
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
