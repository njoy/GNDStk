
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_ABSTRACT_FUNCTIONAL
#define NJOY_GNDSTK_V2_0_ABSTRACT_FUNCTIONAL

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Axes.hpp"
#include "GNDStk/v2.0/unknownNamespace/Uncertainty.hpp"
#include "GNDStk/v2.0/containers/Values.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// abstract::
// class Functional
// -----------------------------------------------------------------------------

namespace abstract {

class Functional : public Component<Functional> {

   using _t = std::variant<
      abstract::Functional,
      containers::Values
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "abstract"; }
   static auto className() { return "Functional"; }
   static auto GNDSName() { return "functional"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<Float64>{}
            / Meta<>("outerDomainValue") |
         // children
         containers::Axes{}
            / --Child<>("axes") |
         std::optional<unknownNamespace::Uncertainty>{}
            / --Child<>("uncertainty") |
         _t{}
            / --(Child<>("functional") || Child<>("values"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      std::optional<Float64> outerDomainValue;
      // children
      containers::Axes axes;
      std::optional<unknownNamespace::Uncertainty> uncertainty;
      // children - variant
      _t _functionalvalues;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // outerDomainValue
   const std::optional<Float64> &outerDomainValue() const
      { return content.outerDomainValue; }
   std::optional<Float64> &outerDomainValue()
      { return content.outerDomainValue; }

   // axes
   const containers::Axes &axes() const
      { return content.axes; }
   containers::Axes &axes()
      { return content.axes; }

   // uncertainty
   const std::optional<unknownNamespace::Uncertainty> &uncertainty() const
      { return content.uncertainty; }
   std::optional<unknownNamespace::Uncertainty> &uncertainty()
      { return content.uncertainty; }

   // _functionalvalues
   const _t &_functionalvalues() const
      { return content._functionalvalues; }
   _t &_functionalvalues()
      { return content._functionalvalues; }

   // functional
   const abstract::Functional *functional() const
      { return getter<abstract::Functional>(_functionalvalues(), "functional"); }
   abstract::Functional *functional()
      { return getter<abstract::Functional>(_functionalvalues(), "functional"); }

   // values
   const containers::Values *values() const
      { return getter<containers::Values>(_functionalvalues(), "values"); }
   containers::Values *values()
      { return getter<containers::Values>(_functionalvalues(), "values"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   Functional &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // outerDomainValue(value)
   Functional &outerDomainValue(const std::optional<Float64> &obj)
      { outerDomainValue() = obj; return *this; }

   // axes(value)
   Functional &axes(const containers::Axes &obj)
      { axes() = obj; return *this; }

   // uncertainty(value)
   Functional &uncertainty(const std::optional<unknownNamespace::Uncertainty> &obj)
      { uncertainty() = obj; return *this; }

   // _functionalvalues(value)
   Functional &_functionalvalues(const _t &obj)
      { _functionalvalues() = obj; return *this; }

   // functional(value)
   Functional &functional(const std::optional<abstract::Functional> &obj)
      { if (obj) _functionalvalues(obj.value()); return *this; }

   // values(value)
   Functional &values(const std::optional<containers::Values> &obj)
      { if (obj) _functionalvalues(obj.value()); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Functional() :
      Component{
         BodyText{},
         content.label,
         content.outerDomainValue,
         content.axes,
         content.uncertainty,
         content._functionalvalues
      }
   {
      Component::finish();
   }

   // copy
   Functional(const Functional &other) :
      Component{
         other,
         content.label,
         content.outerDomainValue,
         content.axes,
         content.uncertainty,
         content._functionalvalues
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Functional(Functional &&other) :
      Component{
         other,
         content.label,
         content.outerDomainValue,
         content.axes,
         content.uncertainty,
         content._functionalvalues
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Functional(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.outerDomainValue,
         content.axes,
         content.uncertainty,
         content._functionalvalues
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Functional(
      const std::optional<XMLName> &label,
      const std::optional<Float64> &outerDomainValue,
      const containers::Axes &axes,
      const std::optional<unknownNamespace::Uncertainty> &uncertainty,
      const _t &_functionalvalues
   ) :
      Component{
         BodyText{},
         content.label,
         content.outerDomainValue,
         content.axes,
         content.uncertainty,
         content._functionalvalues
      },
      content{
         label,
         outerDomainValue,
         axes,
         uncertainty,
         _functionalvalues
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Functional &operator=(const Functional &) = default;

   // move
   Functional &operator=(Functional &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/abstract/Functional/src/custom.hpp"

}; // class Functional

} // namespace abstract
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
