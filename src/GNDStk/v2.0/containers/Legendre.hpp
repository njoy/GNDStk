
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_LEGENDRE
#define NJOY_GNDSTK_V2_0_CONTAINERS_LEGENDRE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Values.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Legendre
// -----------------------------------------------------------------------------

namespace containers {

class Legendre : public Component<Legendre> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Legendre"; }
   static auto GNDSName() { return "Legendre"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Defaulted<Float64>{1.0}
            / Meta<>("domainMax") |
         Defaulted<Float64>{-1.0}
            / Meta<>("domainMin") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         Defaulted<Integer32>{0}
            / Meta<>("lowerIndex") |
         std::optional<Float64>{}
            / Meta<>("outerDomainValue") |
         // children
         containers::Values{}
            / --Child<>("values")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const Float64 domainMax = 1.0;
      static inline const Float64 domainMin = -1.0;
      static inline const Integer32 lowerIndex = 0;
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Defaulted<Float64> domainMax{1.0};
      Defaulted<Float64> domainMin{-1.0};
      std::optional<XMLName> label;
      Defaulted<Integer32> lowerIndex{0};
      std::optional<Float64> outerDomainValue;
      // children
      containers::Values values;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // domainMax
   const Defaulted<Float64> &domainMax() const
      { return content.domainMax; }
   Defaulted<Float64> &domainMax()
      { return content.domainMax; }

   // domainMin
   const Defaulted<Float64> &domainMin() const
      { return content.domainMin; }
   Defaulted<Float64> &domainMin()
      { return content.domainMin; }

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // lowerIndex
   const Defaulted<Integer32> &lowerIndex() const
      { return content.lowerIndex; }
   Defaulted<Integer32> &lowerIndex()
      { return content.lowerIndex; }

   // outerDomainValue
   const std::optional<Float64> &outerDomainValue() const
      { return content.outerDomainValue; }
   std::optional<Float64> &outerDomainValue()
      { return content.outerDomainValue; }

   // values
   const containers::Values &values() const
      { return content.values; }
   containers::Values &values()
      { return content.values; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // domainMax(value)
   Legendre &domainMax(const Defaulted<Float64> &obj)
      { content.domainMax = obj; return *this; }
   Legendre &domainMax(const std::optional<Float64> &obj)
      { content.domainMax = obj; return *this; }

   // domainMin(value)
   Legendre &domainMin(const Defaulted<Float64> &obj)
      { content.domainMin = obj; return *this; }
   Legendre &domainMin(const std::optional<Float64> &obj)
      { content.domainMin = obj; return *this; }

   // label(value)
   Legendre &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // lowerIndex(value)
   Legendre &lowerIndex(const Defaulted<Integer32> &obj)
      { content.lowerIndex = obj; return *this; }
   Legendre &lowerIndex(const std::optional<Integer32> &obj)
      { content.lowerIndex = obj; return *this; }

   // outerDomainValue(value)
   Legendre &outerDomainValue(const std::optional<Float64> &obj)
      { outerDomainValue() = obj; return *this; }

   // values(value)
   Legendre &values(const containers::Values &obj)
      { values() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Legendre() :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.label,
         content.lowerIndex,
         content.outerDomainValue,
         content.values
      }
   {
      Component::finish();
   }

   // copy
   Legendre(const Legendre &other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.label,
         content.lowerIndex,
         content.outerDomainValue,
         content.values
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Legendre(Legendre &&other) :
      Component{
         other,
         content.domainMax,
         content.domainMin,
         content.label,
         content.lowerIndex,
         content.outerDomainValue,
         content.values
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Legendre(const Node &node) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.label,
         content.lowerIndex,
         content.outerDomainValue,
         content.values
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Legendre(
      const std::optional<Float64> &domainMax,
      const std::optional<Float64> &domainMin,
      const std::optional<XMLName> &label,
      const std::optional<Integer32> &lowerIndex,
      const std::optional<Float64> &outerDomainValue,
      const containers::Values &values
   ) :
      Component{
         BodyText{},
         content.domainMax,
         content.domainMin,
         content.label,
         content.lowerIndex,
         content.outerDomainValue,
         content.values
      },
      content{
         Defaulted<Float64>(defaults.domainMax,domainMax),
         Defaulted<Float64>(defaults.domainMin,domainMin),
         label,
         Defaulted<Integer32>(defaults.lowerIndex,lowerIndex),
         outerDomainValue,
         values
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Legendre &operator=(const Legendre &) = default;

   // move
   Legendre &operator=(Legendre &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Legendre/src/custom.hpp"

}; // class Legendre

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
