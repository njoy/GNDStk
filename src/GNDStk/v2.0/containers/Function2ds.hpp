
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_FUNCTION2DS
#define NJOY_GNDSTK_V2_0_CONTAINERS_FUNCTION2DS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/XYs2d.hpp"
#include "GNDStk/v2.0/containers/Gridded2d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Function2ds
// -----------------------------------------------------------------------------

namespace containers {

class Function2ds : public Component<Function2ds> {

   using _t = std::variant<
      containers::XYs2d,
      containers::Gridded2d
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Function2ds"; }
   static auto GNDSName() { return "function2ds"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         _t{}
            / ++(Child<>("XYs2d") || Child<>("gridded2d"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children - variant
      std::vector<_t> _XYs2dgridded2d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // _XYs2dgridded2d
   const std::vector<_t> &_XYs2dgridded2d() const
      { return content._XYs2dgridded2d; }
   std::vector<_t> &_XYs2dgridded2d()
      { return content._XYs2dgridded2d; }

   // _XYs2dgridded2d(index)
   const _t &_XYs2dgridded2d(const std::size_t index) const
      { return getter(_XYs2dgridded2d(), index, "_XYs2dgridded2d"); }
   _t &_XYs2dgridded2d(const std::size_t index)
      { return getter(_XYs2dgridded2d(), index, "_XYs2dgridded2d"); }

   // _XYs2dgridded2d(label)
   const _t &_XYs2dgridded2d(const std::string &label) const
      { return getter(_XYs2dgridded2d(), label, "_XYs2dgridded2d"); }
   _t &_XYs2dgridded2d(const std::string &label)
      { return getter(_XYs2dgridded2d(), label, "_XYs2dgridded2d"); }

   // XYs2d(index)
   const containers::XYs2d *XYs2d(const std::size_t index) const
      { return getter<containers::XYs2d>(_XYs2dgridded2d(), index, "XYs2d"); }
   containers::XYs2d *XYs2d(const std::size_t index)
      { return getter<containers::XYs2d>(_XYs2dgridded2d(), index, "XYs2d"); }

   // XYs2d(label)
   const containers::XYs2d *XYs2d(const std::string &label) const
      { return getter<containers::XYs2d>(_XYs2dgridded2d(), label, "XYs2d"); }
   containers::XYs2d *XYs2d(const std::string &label)
      { return getter<containers::XYs2d>(_XYs2dgridded2d(), label, "XYs2d"); }

   // gridded2d(index)
   const containers::Gridded2d *gridded2d(const std::size_t index) const
      { return getter<containers::Gridded2d>(_XYs2dgridded2d(), index, "gridded2d"); }
   containers::Gridded2d *gridded2d(const std::size_t index)
      { return getter<containers::Gridded2d>(_XYs2dgridded2d(), index, "gridded2d"); }

   // gridded2d(label)
   const containers::Gridded2d *gridded2d(const std::string &label) const
      { return getter<containers::Gridded2d>(_XYs2dgridded2d(), label, "gridded2d"); }
   containers::Gridded2d *gridded2d(const std::string &label)
      { return getter<containers::Gridded2d>(_XYs2dgridded2d(), label, "gridded2d"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // _XYs2dgridded2d(value)
   Function2ds &_XYs2dgridded2d(const std::vector<_t> &obj)
      { _XYs2dgridded2d() = obj; return *this; }

   // _XYs2dgridded2d(index,value)
   Function2ds &_XYs2dgridded2d(
      const std::size_t index,
      const _t &obj
   ) {
      _XYs2dgridded2d(index) = obj; return *this;
   }

   // _XYs2dgridded2d(label,value)
   Function2ds &_XYs2dgridded2d(
      const std::string &label,
      const _t &obj
   ) {
      _XYs2dgridded2d(label) = obj; return *this;
   }

   // XYs2d(index,value)
   Function2ds &XYs2d(
      const std::size_t index,
      const std::optional<containers::XYs2d> &obj
   ) {
      if (obj) _XYs2dgridded2d(index,obj.value());
      return *this;
   }

   // XYs2d(label,value)
   Function2ds &XYs2d(
      const std::string &label,
      const std::optional<containers::XYs2d> &obj
   ) {
      if (obj) _XYs2dgridded2d(label,obj.value());
      return *this;
   }

   // gridded2d(index,value)
   Function2ds &gridded2d(
      const std::size_t index,
      const std::optional<containers::Gridded2d> &obj
   ) {
      if (obj) _XYs2dgridded2d(index,obj.value());
      return *this;
   }

   // gridded2d(label,value)
   Function2ds &gridded2d(
      const std::string &label,
      const std::optional<containers::Gridded2d> &obj
   ) {
      if (obj) _XYs2dgridded2d(label,obj.value());
      return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Function2ds() :
      Component{
         BodyText{},
         content._XYs2dgridded2d
      }
   {
      Component::finish();
   }

   // copy
   Function2ds(const Function2ds &other) :
      Component{
         other,
         content._XYs2dgridded2d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Function2ds(Function2ds &&other) :
      Component{
         other,
         content._XYs2dgridded2d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Function2ds(const Node &node) :
      Component{
         BodyText{},
         content._XYs2dgridded2d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Function2ds(
      const std::vector<_t> &_XYs2dgridded2d
   ) :
      Component{
         BodyText{},
         content._XYs2dgridded2d
      },
      content{
         _XYs2dgridded2d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Function2ds &operator=(const Function2ds &) = default;

   // move
   Function2ds &operator=(Function2ds &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Function2ds/src/custom.hpp"

}; // class Function2ds

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
