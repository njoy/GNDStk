
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_REGIONS3D
#define NJOY_GNDSTK_V2_0_CONTAINERS_REGIONS3D

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Axes.hpp"
#include "GNDStk/v2.0/containers/Function3ds.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Regions3d
// -----------------------------------------------------------------------------

namespace containers {

class Regions3d : public Component<Regions3d> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Regions3d"; }
   static auto GNDSName() { return "regions3d"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<Float64>{}
            / Meta<>("outerDomainValue") |
         // children
         std::optional<containers::Axes>{}
            / --Child<>("axes") |
         containers::Function3ds{}
            / --Child<>("function3ds")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      std::optional<Float64> outerDomainValue;
      // children
      std::optional<containers::Axes> axes;
      containers::Function3ds function3ds;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // outerDomainValue
   const std::optional<Float64> &outerDomainValue() const
      { return content.outerDomainValue; }
   std::optional<Float64> &outerDomainValue()
      { return content.outerDomainValue; }

   // axes
   const std::optional<containers::Axes> &axes() const
      { return content.axes; }
   std::optional<containers::Axes> &axes()
      { return content.axes; }

   // function3ds
   const containers::Function3ds &function3ds() const
      { return content.function3ds; }
   containers::Function3ds &function3ds()
      { return content.function3ds; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   Regions3d &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // outerDomainValue(value)
   Regions3d &outerDomainValue(const std::optional<Float64> &obj)
      { outerDomainValue() = obj; return *this; }

   // axes(value)
   Regions3d &axes(const std::optional<containers::Axes> &obj)
      { axes() = obj; return *this; }

   // function3ds(value)
   Regions3d &function3ds(const containers::Function3ds &obj)
      { function3ds() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Regions3d() :
      Component{
         BodyText{},
         content.label,
         content.outerDomainValue,
         content.axes,
         content.function3ds
      }
   {
      Component::finish();
   }

   // copy
   Regions3d(const Regions3d &other) :
      Component{
         other,
         content.label,
         content.outerDomainValue,
         content.axes,
         content.function3ds
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Regions3d(Regions3d &&other) :
      Component{
         other,
         content.label,
         content.outerDomainValue,
         content.axes,
         content.function3ds
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Regions3d(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.outerDomainValue,
         content.axes,
         content.function3ds
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Regions3d(
      const std::optional<XMLName> &label,
      const std::optional<Float64> &outerDomainValue,
      const std::optional<containers::Axes> &axes,
      const containers::Function3ds &function3ds
   ) :
      Component{
         BodyText{},
         content.label,
         content.outerDomainValue,
         content.axes,
         content.function3ds
      },
      content{
         label,
         outerDomainValue,
         axes,
         function3ds
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Regions3d &operator=(const Regions3d &) = default;

   // move
   Regions3d &operator=(Regions3d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Regions3d/src/custom.hpp"

}; // class Regions3d

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
