
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_FUNCTION1DS
#define NJOY_GNDSTK_V2_0_CONTAINERS_FUNCTION1DS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Legendre.hpp"
#include "GNDStk/v2.0/containers/XYs1d.hpp"
#include "GNDStk/v2.0/containers/Constant1d.hpp"
#include "GNDStk/v2.0/containers/Gridded1d.hpp"
#include "GNDStk/v2.0/containers/Polynomial1d.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Function1ds
// -----------------------------------------------------------------------------

namespace containers {

class Function1ds : public Component<Function1ds> {

   using _t = std::variant<
      containers::Legendre,
      containers::XYs1d,
      containers::Constant1d,
      containers::Gridded1d,
      containers::Polynomial1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Function1ds"; }
   static auto GNDSName() { return "function1ds"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         _t{}
            / ++(Child<>("Legendre") || Child<>("XYs1d") || Child<>("constant1d") || Child<>("gridded1d") || Child<>("polynomial1d"))
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children - variant
      std::vector<_t> _LegendreXYs1dconstant1dgridded1dpolynomial1d;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // _LegendreXYs1dconstant1dgridded1dpolynomial1d
   const std::vector<_t> &_LegendreXYs1dconstant1dgridded1dpolynomial1d() const
      { return content._LegendreXYs1dconstant1dgridded1dpolynomial1d; }
   std::vector<_t> &_LegendreXYs1dconstant1dgridded1dpolynomial1d()
      { return content._LegendreXYs1dconstant1dgridded1dpolynomial1d; }

   // _LegendreXYs1dconstant1dgridded1dpolynomial1d(index)
   const _t &_LegendreXYs1dconstant1dgridded1dpolynomial1d(const std::size_t index) const
      { return getter(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "_LegendreXYs1dconstant1dgridded1dpolynomial1d"); }
   _t &_LegendreXYs1dconstant1dgridded1dpolynomial1d(const std::size_t index)
      { return getter(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "_LegendreXYs1dconstant1dgridded1dpolynomial1d"); }

   // _LegendreXYs1dconstant1dgridded1dpolynomial1d(label)
   const _t &_LegendreXYs1dconstant1dgridded1dpolynomial1d(const std::string &label) const
      { return getter(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "_LegendreXYs1dconstant1dgridded1dpolynomial1d"); }
   _t &_LegendreXYs1dconstant1dgridded1dpolynomial1d(const std::string &label)
      { return getter(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "_LegendreXYs1dconstant1dgridded1dpolynomial1d"); }

   // Legendre(index)
   const containers::Legendre *Legendre(const std::size_t index) const
      { return getter<containers::Legendre>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "Legendre"); }
   containers::Legendre *Legendre(const std::size_t index)
      { return getter<containers::Legendre>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "Legendre"); }

   // Legendre(label)
   const containers::Legendre *Legendre(const std::string &label) const
      { return getter<containers::Legendre>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "Legendre"); }
   containers::Legendre *Legendre(const std::string &label)
      { return getter<containers::Legendre>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "Legendre"); }

   // XYs1d(index)
   const containers::XYs1d *XYs1d(const std::size_t index) const
      { return getter<containers::XYs1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "XYs1d"); }
   containers::XYs1d *XYs1d(const std::size_t index)
      { return getter<containers::XYs1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "XYs1d"); }

   // XYs1d(label)
   const containers::XYs1d *XYs1d(const std::string &label) const
      { return getter<containers::XYs1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "XYs1d"); }
   containers::XYs1d *XYs1d(const std::string &label)
      { return getter<containers::XYs1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "XYs1d"); }

   // constant1d(index)
   const containers::Constant1d *constant1d(const std::size_t index) const
      { return getter<containers::Constant1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "constant1d"); }
   containers::Constant1d *constant1d(const std::size_t index)
      { return getter<containers::Constant1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "constant1d"); }

   // constant1d(label)
   const containers::Constant1d *constant1d(const std::string &label) const
      { return getter<containers::Constant1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "constant1d"); }
   containers::Constant1d *constant1d(const std::string &label)
      { return getter<containers::Constant1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "constant1d"); }

   // gridded1d(index)
   const containers::Gridded1d *gridded1d(const std::size_t index) const
      { return getter<containers::Gridded1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "gridded1d"); }
   containers::Gridded1d *gridded1d(const std::size_t index)
      { return getter<containers::Gridded1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "gridded1d"); }

   // gridded1d(label)
   const containers::Gridded1d *gridded1d(const std::string &label) const
      { return getter<containers::Gridded1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "gridded1d"); }
   containers::Gridded1d *gridded1d(const std::string &label)
      { return getter<containers::Gridded1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "gridded1d"); }

   // polynomial1d(index)
   const containers::Polynomial1d *polynomial1d(const std::size_t index) const
      { return getter<containers::Polynomial1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "polynomial1d"); }
   containers::Polynomial1d *polynomial1d(const std::size_t index)
      { return getter<containers::Polynomial1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), index, "polynomial1d"); }

   // polynomial1d(label)
   const containers::Polynomial1d *polynomial1d(const std::string &label) const
      { return getter<containers::Polynomial1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "polynomial1d"); }
   containers::Polynomial1d *polynomial1d(const std::string &label)
      { return getter<containers::Polynomial1d>(_LegendreXYs1dconstant1dgridded1dpolynomial1d(), label, "polynomial1d"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // _LegendreXYs1dconstant1dgridded1dpolynomial1d(value)
   Function1ds &_LegendreXYs1dconstant1dgridded1dpolynomial1d(const std::vector<_t> &obj)
      { _LegendreXYs1dconstant1dgridded1dpolynomial1d() = obj; return *this; }

   // _LegendreXYs1dconstant1dgridded1dpolynomial1d(index,value)
   Function1ds &_LegendreXYs1dconstant1dgridded1dpolynomial1d(
      const std::size_t index,
      const _t &obj
   ) {
      _LegendreXYs1dconstant1dgridded1dpolynomial1d(index) = obj; return *this;
   }

   // _LegendreXYs1dconstant1dgridded1dpolynomial1d(label,value)
   Function1ds &_LegendreXYs1dconstant1dgridded1dpolynomial1d(
      const std::string &label,
      const _t &obj
   ) {
      _LegendreXYs1dconstant1dgridded1dpolynomial1d(label) = obj; return *this;
   }

   // Legendre(index,value)
   Function1ds &Legendre(
      const std::size_t index,
      const std::optional<containers::Legendre> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(index,obj.value());
      return *this;
   }

   // Legendre(label,value)
   Function1ds &Legendre(
      const std::string &label,
      const std::optional<containers::Legendre> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(label,obj.value());
      return *this;
   }

   // XYs1d(index,value)
   Function1ds &XYs1d(
      const std::size_t index,
      const std::optional<containers::XYs1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(index,obj.value());
      return *this;
   }

   // XYs1d(label,value)
   Function1ds &XYs1d(
      const std::string &label,
      const std::optional<containers::XYs1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(label,obj.value());
      return *this;
   }

   // constant1d(index,value)
   Function1ds &constant1d(
      const std::size_t index,
      const std::optional<containers::Constant1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(index,obj.value());
      return *this;
   }

   // constant1d(label,value)
   Function1ds &constant1d(
      const std::string &label,
      const std::optional<containers::Constant1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(label,obj.value());
      return *this;
   }

   // gridded1d(index,value)
   Function1ds &gridded1d(
      const std::size_t index,
      const std::optional<containers::Gridded1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(index,obj.value());
      return *this;
   }

   // gridded1d(label,value)
   Function1ds &gridded1d(
      const std::string &label,
      const std::optional<containers::Gridded1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(label,obj.value());
      return *this;
   }

   // polynomial1d(index,value)
   Function1ds &polynomial1d(
      const std::size_t index,
      const std::optional<containers::Polynomial1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(index,obj.value());
      return *this;
   }

   // polynomial1d(label,value)
   Function1ds &polynomial1d(
      const std::string &label,
      const std::optional<containers::Polynomial1d> &obj
   ) {
      if (obj) _LegendreXYs1dconstant1dgridded1dpolynomial1d(label,obj.value());
      return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Function1ds() :
      Component{
         BodyText{},
         content._LegendreXYs1dconstant1dgridded1dpolynomial1d
      }
   {
      Component::finish();
   }

   // copy
   Function1ds(const Function1ds &other) :
      Component{
         other,
         content._LegendreXYs1dconstant1dgridded1dpolynomial1d
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Function1ds(Function1ds &&other) :
      Component{
         other,
         content._LegendreXYs1dconstant1dgridded1dpolynomial1d
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Function1ds(const Node &node) :
      Component{
         BodyText{},
         content._LegendreXYs1dconstant1dgridded1dpolynomial1d
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Function1ds(
      const std::vector<_t> &_LegendreXYs1dconstant1dgridded1dpolynomial1d
   ) :
      Component{
         BodyText{},
         content._LegendreXYs1dconstant1dgridded1dpolynomial1d
      },
      content{
         _LegendreXYs1dconstant1dgridded1dpolynomial1d
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Function1ds &operator=(const Function1ds &) = default;

   // move
   Function1ds &operator=(Function1ds &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Function1ds/src/custom.hpp"

}; // class Function1ds

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
