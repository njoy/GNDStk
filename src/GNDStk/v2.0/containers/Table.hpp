
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_TABLE
#define NJOY_GNDSTK_V2_0_CONTAINERS_TABLE

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/ColumnHeaders.hpp"
#include "GNDStk/v2.0/containers/Data.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Table
// -----------------------------------------------------------------------------

namespace containers {

class Table : public Component<Table> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Table"; }
   static auto GNDSName() { return "table"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("columns") |
         Integer32{}
            / Meta<>("rows") |
         Defaulted<XMLName>{"row-major"}
            / Meta<>("storageOrder") |
         // children
         containers::ColumnHeaders{}
            / --Child<>("columnHeaders") |
         containers::Data{}
            / --Child<>("data")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const XMLName storageOrder = "row-major";
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Integer32 columns;
      Integer32 rows;
      Defaulted<XMLName> storageOrder{"row-major"};
      // children
      containers::ColumnHeaders columnHeaders;
      containers::Data data;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // columns
   const Integer32 &columns() const
      { return content.columns; }
   Integer32 &columns()
      { return content.columns; }

   // rows
   const Integer32 &rows() const
      { return content.rows; }
   Integer32 &rows()
      { return content.rows; }

   // storageOrder
   const Defaulted<XMLName> &storageOrder() const
      { return content.storageOrder; }
   Defaulted<XMLName> &storageOrder()
      { return content.storageOrder; }

   // columnHeaders
   const containers::ColumnHeaders &columnHeaders() const
      { return content.columnHeaders; }
   containers::ColumnHeaders &columnHeaders()
      { return content.columnHeaders; }

   // data
   const containers::Data &data() const
      { return content.data; }
   containers::Data &data()
      { return content.data; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // columns(value)
   Table &columns(const Integer32 &obj)
      { columns() = obj; return *this; }

   // rows(value)
   Table &rows(const Integer32 &obj)
      { rows() = obj; return *this; }

   // storageOrder(value)
   Table &storageOrder(const Defaulted<XMLName> &obj)
      { content.storageOrder = obj; return *this; }
   Table &storageOrder(const std::optional<XMLName> &obj)
      { content.storageOrder = obj; return *this; }

   // columnHeaders(value)
   Table &columnHeaders(const containers::ColumnHeaders &obj)
      { columnHeaders() = obj; return *this; }

   // data(value)
   Table &data(const containers::Data &obj)
      { data() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Table() :
      Component{
         BodyText{},
         content.columns,
         content.rows,
         content.storageOrder,
         content.columnHeaders,
         content.data
      }
   {
      Component::finish();
   }

   // copy
   Table(const Table &other) :
      Component{
         other,
         content.columns,
         content.rows,
         content.storageOrder,
         content.columnHeaders,
         content.data
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Table(Table &&other) :
      Component{
         other,
         content.columns,
         content.rows,
         content.storageOrder,
         content.columnHeaders,
         content.data
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Table(const Node &node) :
      Component{
         BodyText{},
         content.columns,
         content.rows,
         content.storageOrder,
         content.columnHeaders,
         content.data
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Table(
      const Integer32 &columns,
      const Integer32 &rows,
      const std::optional<XMLName> &storageOrder,
      const containers::ColumnHeaders &columnHeaders,
      const containers::Data &data
   ) :
      Component{
         BodyText{},
         content.columns,
         content.rows,
         content.storageOrder,
         content.columnHeaders,
         content.data
      },
      content{
         columns,
         rows,
         Defaulted<XMLName>(defaults.storageOrder,storageOrder),
         columnHeaders,
         data
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Table &operator=(const Table &) = default;

   // move
   Table &operator=(Table &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Table/src/custom.hpp"

}; // class Table

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
