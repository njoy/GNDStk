
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_INTEGER
#define NJOY_GNDSTK_V2_0_CONTAINERS_INTEGER

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Integer
// -----------------------------------------------------------------------------

namespace containers {

class Integer : public Component<Integer> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Integer"; }
   static auto GNDSName() { return "integer"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("unit") |
         Integer32{}
            / Meta<>("value")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<XMLName> label;
      std::optional<XMLName> unit;
      Integer32 value;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // label
   const std::optional<XMLName> &label() const
      { return content.label; }
   std::optional<XMLName> &label()
      { return content.label; }

   // unit
   const std::optional<XMLName> &unit() const
      { return content.unit; }
   std::optional<XMLName> &unit()
      { return content.unit; }

   // value
   const Integer32 &value() const
      { return content.value; }
   Integer32 &value()
      { return content.value; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // label(value)
   Integer &label(const std::optional<XMLName> &obj)
      { label() = obj; return *this; }

   // unit(value)
   Integer &unit(const std::optional<XMLName> &obj)
      { unit() = obj; return *this; }

   // value(value)
   Integer &value(const Integer32 &obj)
      { value() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Integer() :
      Component{
         BodyText{},
         content.label,
         content.unit,
         content.value
      }
   {
      Component::finish();
   }

   // copy
   Integer(const Integer &other) :
      Component{
         other,
         content.label,
         content.unit,
         content.value
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Integer(Integer &&other) :
      Component{
         other,
         content.label,
         content.unit,
         content.value
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Integer(const Node &node) :
      Component{
         BodyText{},
         content.label,
         content.unit,
         content.value
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit Integer(
      const std::optional<XMLName> &label,
      const std::optional<XMLName> &unit,
      const Integer32 &value
   ) :
      Component{
         BodyText{},
         content.label,
         content.unit,
         content.value
      },
      content{
         label,
         unit,
         value
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Integer &operator=(const Integer &) = default;

   // move
   Integer &operator=(Integer &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Integer/src/custom.hpp"

}; // class Integer

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
