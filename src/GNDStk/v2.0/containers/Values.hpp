
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_VALUES
#define NJOY_GNDSTK_V2_0_CONTAINERS_VALUES

// core interface
#include "GNDStk.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Values
// -----------------------------------------------------------------------------

namespace containers {

class Values : public Component<Values,true> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Values"; }
   static auto GNDSName() { return "values"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         std::optional<Integer32>{}
            / Meta<>("count") |
         std::optional<UTF8Text>{}
            / Meta<>("href") |
         std::optional<Integer32>{}
            / Meta<>("length") |
         Defaulted<Integer32>{0}
            / Meta<>("start") |
         std::optional<Integer32>{}
            / Meta<>("startIndex") |
         Defaulted<UTF8Text>{"Float64"}
            / Meta<>("valueType")
      ;
   }

public:

   using Component::construct;
   using BodyText::operator=;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const Integer32 start = 0;
      static inline const UTF8Text valueType = "Float64";
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      std::optional<Integer32> count;
      std::optional<UTF8Text> href;
      mutable std::optional<Integer32> length;
      mutable Defaulted<Integer32> start{0};
      std::optional<Integer32> startIndex;
      mutable Defaulted<UTF8Text> valueType{"Float64"};
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // count
   const std::optional<Integer32> &count() const
      { return content.count; }
   std::optional<Integer32> &count()
      { return content.count; }

   // href
   const std::optional<UTF8Text> &href() const
      { return content.href; }
   std::optional<UTF8Text> &href()
      { return content.href; }

   // length
   const std::optional<Integer32> &length() const
      { return content.length; }
   std::optional<Integer32> &length()
      { return content.length; }

   // start
   const Defaulted<Integer32> &start() const
      { return content.start; }
   Defaulted<Integer32> &start()
      { return content.start; }

   // startIndex
   const std::optional<Integer32> &startIndex() const
      { return content.startIndex; }
   std::optional<Integer32> &startIndex()
      { return content.startIndex; }

   // valueType
   const Defaulted<UTF8Text> &valueType() const
      { return content.valueType; }
   Defaulted<UTF8Text> &valueType()
      { return content.valueType; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // count(value)
   Values &count(const std::optional<Integer32> &obj)
      { count() = obj; return *this; }

   // href(value)
   Values &href(const std::optional<UTF8Text> &obj)
      { href() = obj; return *this; }

   // length(value)
   Values &length(const std::optional<Integer32> &obj)
      { BodyText::length(length() = obj); return *this; }

   // start(value)
   Values &start(const Defaulted<Integer32> &obj)
      { BodyText::start(content.start = obj); return *this; }
   Values &start(const std::optional<Integer32> &obj)
      { BodyText::start(content.start = obj); return *this; }

   // startIndex(value)
   Values &startIndex(const std::optional<Integer32> &obj)
      { startIndex() = obj; return *this; }

   // valueType(value)
   Values &valueType(const Defaulted<UTF8Text> &obj)
      { BodyText::valueType(content.valueType = obj); return *this; }
   Values &valueType(const std::optional<UTF8Text> &obj)
      { BodyText::valueType(content.valueType = obj); return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Values() :
      Component{
         BodyText{},
         content.count,
         content.href,
         content.length,
         content.start,
         content.startIndex,
         content.valueType
      }
   {
      Component::finish();
   }

   // copy
   Values(const Values &other) :
      Component{
         other,
         content.count,
         content.href,
         content.length,
         content.start,
         content.startIndex,
         content.valueType
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Values(Values &&other) :
      Component{
         other,
         content.count,
         content.href,
         content.length,
         content.start,
         content.startIndex,
         content.valueType
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Values(const Node &node) :
      Component{
         BodyText{},
         content.count,
         content.href,
         content.length,
         content.start,
         content.startIndex,
         content.valueType
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Values(
      const std::optional<Integer32> &count,
      const std::optional<UTF8Text> &href,
      const std::optional<Integer32> &length,
      const std::optional<Integer32> &start,
      const std::optional<Integer32> &startIndex,
      const std::optional<UTF8Text> &valueType
   ) :
      Component{
         BodyText{},
         content.count,
         content.href,
         content.length,
         content.start,
         content.startIndex,
         content.valueType
      },
      content{
         count,
         href,
         length,
         Defaulted<Integer32>(defaults.start,start),
         startIndex,
         Defaulted<UTF8Text>(defaults.valueType,valueType)
      }
   {
      Component::finish();
   }

   // from vector
   template<class T, class = std::enable_if_t<body::template supported<T>>>
   Values(const std::vector<T> &vector) :
      Component{
         BodyText{},
         content.count,
         content.href,
         content.length,
         content.start,
         content.startIndex,
         content.valueType
      }
   {
      Component::finish(vector);
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Values &operator=(const Values &) = default;

   // move
   Values &operator=(Values &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Values/src/custom.hpp"

}; // class Values

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
