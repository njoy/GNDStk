
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_CONTAINERS_ARRAY
#define NJOY_GNDSTK_V2_0_CONTAINERS_ARRAY

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/containers/Values.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// containers::
// class Array
// -----------------------------------------------------------------------------

namespace containers {

class Array : public Component<Array> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "containers"; }
   static auto className() { return "Array"; }
   static auto GNDSName() { return "array"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // metadata
         Defaulted<UTF8Text>{"`none'"}
            / Meta<>("compression") |
         std::optional<IntegerTuple>{}
            / Meta<>("offset") |
         Defaulted<UTF8Text>{"`none'"}
            / Meta<>("permutation") |
         IntegerTuple{}
            / Meta<>("shape") |
         Defaulted<UTF8Text>{"row-major"}
            / Meta<>("storageOrder") |
         Defaulted<UTF8Text>{"`none'"}
            / Meta<>("symmetry") |
         // children
         std::optional<containers::Array>{}
            / ++Child<>("array") |
         std::optional<containers::Values>{}
            / ++Child<>("values")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
      static inline const UTF8Text compression = "`none'";
      static inline const UTF8Text permutation = "`none'";
      static inline const UTF8Text storageOrder = "row-major";
      static inline const UTF8Text symmetry = "`none'";
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // metadata
      Defaulted<UTF8Text> compression{"`none'"};
      std::optional<IntegerTuple> offset;
      Defaulted<UTF8Text> permutation{"`none'"};
      IntegerTuple shape;
      Defaulted<UTF8Text> storageOrder{"row-major"};
      Defaulted<UTF8Text> symmetry{"`none'"};
      // children
      std::optional<std::vector<containers::Array>> array;
      std::optional<std::vector<containers::Values>> values;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // compression
   const Defaulted<UTF8Text> &compression() const
      { return content.compression; }
   Defaulted<UTF8Text> &compression()
      { return content.compression; }

   // offset
   const std::optional<IntegerTuple> &offset() const
      { return content.offset; }
   std::optional<IntegerTuple> &offset()
      { return content.offset; }

   // permutation
   const Defaulted<UTF8Text> &permutation() const
      { return content.permutation; }
   Defaulted<UTF8Text> &permutation()
      { return content.permutation; }

   // shape
   const IntegerTuple &shape() const
      { return content.shape; }
   IntegerTuple &shape()
      { return content.shape; }

   // storageOrder
   const Defaulted<UTF8Text> &storageOrder() const
      { return content.storageOrder; }
   Defaulted<UTF8Text> &storageOrder()
      { return content.storageOrder; }

   // symmetry
   const Defaulted<UTF8Text> &symmetry() const
      { return content.symmetry; }
   Defaulted<UTF8Text> &symmetry()
      { return content.symmetry; }

   // array
   const std::optional<std::vector<containers::Array>> &array() const
      { return content.array; }
   std::optional<std::vector<containers::Array>> &array()
      { return content.array; }

   // array(index)
   const containers::Array &array(const std::size_t index) const
      { return getter(array(), index, "array"); }
   containers::Array &array(const std::size_t index)
      { return getter(array(), index, "array"); }

   // array(label)
   const containers::Array &array(const std::string &label) const
      { return getter(array(), label, "array"); }
   containers::Array &array(const std::string &label)
      { return getter(array(), label, "array"); }

   // values
   const std::optional<std::vector<containers::Values>> &values() const
      { return content.values; }
   std::optional<std::vector<containers::Values>> &values()
      { return content.values; }

   // values(index)
   const containers::Values &values(const std::size_t index) const
      { return getter(values(), index, "values"); }
   containers::Values &values(const std::size_t index)
      { return getter(values(), index, "values"); }

   // values(label)
   const containers::Values &values(const std::string &label) const
      { return getter(values(), label, "values"); }
   containers::Values &values(const std::string &label)
      { return getter(values(), label, "values"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // compression(value)
   Array &compression(const Defaulted<UTF8Text> &obj)
      { content.compression = obj; return *this; }
   Array &compression(const std::optional<UTF8Text> &obj)
      { content.compression = obj; return *this; }

   // offset(value)
   Array &offset(const std::optional<IntegerTuple> &obj)
      { offset() = obj; return *this; }

   // permutation(value)
   Array &permutation(const Defaulted<UTF8Text> &obj)
      { content.permutation = obj; return *this; }
   Array &permutation(const std::optional<UTF8Text> &obj)
      { content.permutation = obj; return *this; }

   // shape(value)
   Array &shape(const IntegerTuple &obj)
      { shape() = obj; return *this; }

   // storageOrder(value)
   Array &storageOrder(const Defaulted<UTF8Text> &obj)
      { content.storageOrder = obj; return *this; }
   Array &storageOrder(const std::optional<UTF8Text> &obj)
      { content.storageOrder = obj; return *this; }

   // symmetry(value)
   Array &symmetry(const Defaulted<UTF8Text> &obj)
      { content.symmetry = obj; return *this; }
   Array &symmetry(const std::optional<UTF8Text> &obj)
      { content.symmetry = obj; return *this; }

   // array(value)
   Array &array(const std::optional<std::vector<containers::Array>> &obj)
      { array() = obj; return *this; }

   // array(index,value)
   Array &array(
      const std::size_t index,
      const containers::Array &obj
   ) {
      array(index) = obj; return *this;
   }

   // array(label,value)
   Array &array(
      const std::string &label,
      const containers::Array &obj
   ) {
      array(label) = obj; return *this;
   }

   // values(value)
   Array &values(const std::optional<std::vector<containers::Values>> &obj)
      { values() = obj; return *this; }

   // values(index,value)
   Array &values(
      const std::size_t index,
      const containers::Values &obj
   ) {
      values(index) = obj; return *this;
   }

   // values(label,value)
   Array &values(
      const std::string &label,
      const containers::Values &obj
   ) {
      values(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   Array() :
      Component{
         BodyText{},
         content.compression,
         content.offset,
         content.permutation,
         content.shape,
         content.storageOrder,
         content.symmetry,
         content.array,
         content.values
      }
   {
      Component::finish();
   }

   // copy
   Array(const Array &other) :
      Component{
         other,
         content.compression,
         content.offset,
         content.permutation,
         content.shape,
         content.storageOrder,
         content.symmetry,
         content.array,
         content.values
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   Array(Array &&other) :
      Component{
         other,
         content.compression,
         content.offset,
         content.permutation,
         content.shape,
         content.storageOrder,
         content.symmetry,
         content.array,
         content.values
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   Array(const Node &node) :
      Component{
         BodyText{},
         content.compression,
         content.offset,
         content.permutation,
         content.shape,
         content.storageOrder,
         content.symmetry,
         content.array,
         content.values
      }
   {
      Component::finish(node);
   }

   // from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Array(
      const std::optional<UTF8Text> &compression,
      const std::optional<IntegerTuple> &offset,
      const std::optional<UTF8Text> &permutation,
      const IntegerTuple &shape,
      const std::optional<UTF8Text> &storageOrder,
      const std::optional<UTF8Text> &symmetry,
      const std::optional<std::vector<containers::Array>> &array,
      const std::optional<std::vector<containers::Values>> &values
   ) :
      Component{
         BodyText{},
         content.compression,
         content.offset,
         content.permutation,
         content.shape,
         content.storageOrder,
         content.symmetry,
         content.array,
         content.values
      },
      content{
         Defaulted<UTF8Text>(defaults.compression,compression),
         offset,
         Defaulted<UTF8Text>(defaults.permutation,permutation),
         shape,
         Defaulted<UTF8Text>(defaults.storageOrder,storageOrder),
         Defaulted<UTF8Text>(defaults.symmetry,symmetry),
         array,
         values
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   Array &operator=(const Array &) = default;

   // move
   Array &operator=(Array &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/containers/Array/src/custom.hpp"

}; // class Array

} // namespace containers
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
