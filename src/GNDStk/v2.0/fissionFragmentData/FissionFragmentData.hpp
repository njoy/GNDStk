
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONFRAGMENTDATA_FISSIONFRAGMENTDATA
#define NJOY_GNDSTK_V2_0_FISSIONFRAGMENTDATA_FISSIONFRAGMENTDATA

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fissionFragmentData/DelayedNeutrons.hpp"
#include "GNDStk/v2.0/fissionTransport/FissionEnergyReleased.hpp"
#include "GNDStk/v2.0/fpy/ProductYields.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionFragmentData::
// class FissionFragmentData
// -----------------------------------------------------------------------------

namespace fissionFragmentData {

class FissionFragmentData : public Component<FissionFragmentData> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionFragmentData"; }
   static auto className() { return "FissionFragmentData"; }
   static auto GNDSName() { return "fissionFragmentData"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         std::optional<fissionFragmentData::DelayedNeutrons>{}
            / --Child<>("delayedNeutrons") |
         std::optional<fissionTransport::FissionEnergyReleased>{}
            / --Child<>("fissionEnergyReleased") |
         std::optional<fpy::ProductYields>{}
            / --Child<>("productYields")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::optional<fissionFragmentData::DelayedNeutrons> delayedNeutrons;
      std::optional<fissionTransport::FissionEnergyReleased> fissionEnergyReleased;
      std::optional<fpy::ProductYields> productYields;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // delayedNeutrons
   const std::optional<fissionFragmentData::DelayedNeutrons> &delayedNeutrons() const
      { return content.delayedNeutrons; }
   std::optional<fissionFragmentData::DelayedNeutrons> &delayedNeutrons()
      { return content.delayedNeutrons; }

   // fissionEnergyReleased
   const std::optional<fissionTransport::FissionEnergyReleased> &fissionEnergyReleased() const
      { return content.fissionEnergyReleased; }
   std::optional<fissionTransport::FissionEnergyReleased> &fissionEnergyReleased()
      { return content.fissionEnergyReleased; }

   // productYields
   const std::optional<fpy::ProductYields> &productYields() const
      { return content.productYields; }
   std::optional<fpy::ProductYields> &productYields()
      { return content.productYields; }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // delayedNeutrons(value)
   FissionFragmentData &delayedNeutrons(const std::optional<fissionFragmentData::DelayedNeutrons> &obj)
      { delayedNeutrons() = obj; return *this; }

   // fissionEnergyReleased(value)
   FissionFragmentData &fissionEnergyReleased(const std::optional<fissionTransport::FissionEnergyReleased> &obj)
      { fissionEnergyReleased() = obj; return *this; }

   // productYields(value)
   FissionFragmentData &productYields(const std::optional<fpy::ProductYields> &obj)
      { productYields() = obj; return *this; }

   // ------------------------
   // Construction
   // ------------------------

   // default
   FissionFragmentData() :
      Component{
         BodyText{},
         content.delayedNeutrons,
         content.fissionEnergyReleased,
         content.productYields
      }
   {
      Component::finish();
   }

   // copy
   FissionFragmentData(const FissionFragmentData &other) :
      Component{
         other,
         content.delayedNeutrons,
         content.fissionEnergyReleased,
         content.productYields
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   FissionFragmentData(FissionFragmentData &&other) :
      Component{
         other,
         content.delayedNeutrons,
         content.fissionEnergyReleased,
         content.productYields
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   FissionFragmentData(const Node &node) :
      Component{
         BodyText{},
         content.delayedNeutrons,
         content.fissionEnergyReleased,
         content.productYields
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit FissionFragmentData(
      const std::optional<fissionFragmentData::DelayedNeutrons> &delayedNeutrons,
      const std::optional<fissionTransport::FissionEnergyReleased> &fissionEnergyReleased,
      const std::optional<fpy::ProductYields> &productYields
   ) :
      Component{
         BodyText{},
         content.delayedNeutrons,
         content.fissionEnergyReleased,
         content.productYields
      },
      content{
         delayedNeutrons,
         fissionEnergyReleased,
         productYields
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   FissionFragmentData &operator=(const FissionFragmentData &) = default;

   // move
   FissionFragmentData &operator=(FissionFragmentData &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionFragmentData/FissionFragmentData/src/custom.hpp"

}; // class FissionFragmentData

} // namespace fissionFragmentData
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
