
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef NJOY_GNDSTK_V2_0_FISSIONFRAGMENTDATA_DELAYEDNEUTRONS
#define NJOY_GNDSTK_V2_0_FISSIONFRAGMENTDATA_DELAYEDNEUTRONS

// core interface
#include "GNDStk.hpp"

// v2.0 dependencies
#include "GNDStk/v2.0/fissionFragmentData/DelayedNeutron.hpp"

namespace njoy {
namespace GNDStk {
namespace v2_0 {

using namespace njoy::GNDStk::core;



// -----------------------------------------------------------------------------
// fissionFragmentData::
// class DelayedNeutrons
// -----------------------------------------------------------------------------

namespace fissionFragmentData {

class DelayedNeutrons : public Component<DelayedNeutrons> {


   // ------------------------
   // For Component
   // ------------------------

   friend class Component;

   // Current namespace, current class, and GNDS node name
   static auto namespaceName() { return "fissionFragmentData"; }
   static auto className() { return "DelayedNeutrons"; }
   static auto GNDSName() { return "delayedNeutrons"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto keys()
   {
      return
         // children
         fissionFragmentData::DelayedNeutron{}
            / ++Child<>("delayedNeutron")
      ;
   }

public:

   using Component::construct;

   // ------------------------
   // Relevant defaults
   // FYI for users
   // ------------------------

   static inline const struct Defaults {
   } defaults;

   // ------------------------
   // Raw GNDS content
   // ------------------------

   struct {
      // children
      std::vector<fissionFragmentData::DelayedNeutron> delayedNeutron;
   } content;

   // ------------------------
   // Getters
   // const and non-const
   // ------------------------

   // delayedNeutron
   const std::vector<fissionFragmentData::DelayedNeutron> &delayedNeutron() const
      { return content.delayedNeutron; }
   std::vector<fissionFragmentData::DelayedNeutron> &delayedNeutron()
      { return content.delayedNeutron; }

   // delayedNeutron(index)
   const fissionFragmentData::DelayedNeutron &delayedNeutron(const std::size_t index) const
      { return getter(delayedNeutron(), index, "delayedNeutron"); }
   fissionFragmentData::DelayedNeutron &delayedNeutron(const std::size_t index)
      { return getter(delayedNeutron(), index, "delayedNeutron"); }

   // delayedNeutron(label)
   const fissionFragmentData::DelayedNeutron &delayedNeutron(const std::string &label) const
      { return getter(delayedNeutron(), label, "delayedNeutron"); }
   fissionFragmentData::DelayedNeutron &delayedNeutron(const std::string &label)
      { return getter(delayedNeutron(), label, "delayedNeutron"); }

   // ------------------------
   // Setters
   // non-const
   // All return *this
   // ------------------------

   // delayedNeutron(value)
   DelayedNeutrons &delayedNeutron(const std::vector<fissionFragmentData::DelayedNeutron> &obj)
      { delayedNeutron() = obj; return *this; }

   // delayedNeutron(index,value)
   DelayedNeutrons &delayedNeutron(
      const std::size_t index,
      const fissionFragmentData::DelayedNeutron &obj
   ) {
      delayedNeutron(index) = obj; return *this;
   }

   // delayedNeutron(label,value)
   DelayedNeutrons &delayedNeutron(
      const std::string &label,
      const fissionFragmentData::DelayedNeutron &obj
   ) {
      delayedNeutron(label) = obj; return *this;
   }

   // ------------------------
   // Construction
   // ------------------------

   // default
   DelayedNeutrons() :
      Component{
         BodyText{},
         content.delayedNeutron
      }
   {
      Component::finish();
   }

   // copy
   DelayedNeutrons(const DelayedNeutrons &other) :
      Component{
         other,
         content.delayedNeutron
      },
      content{other.content}
   {
      Component::finish(other);
   }

   // move
   DelayedNeutrons(DelayedNeutrons &&other) :
      Component{
         other,
         content.delayedNeutron
      },
      content{std::move(other.content)}
   {
      Component::finish(other);
   }

   // from node
   DelayedNeutrons(const Node &node) :
      Component{
         BodyText{},
         content.delayedNeutron
      }
   {
      Component::finish(node);
   }

   // from fields
   explicit DelayedNeutrons(
      const std::vector<fissionFragmentData::DelayedNeutron> &delayedNeutron
   ) :
      Component{
         BodyText{},
         content.delayedNeutron
      },
      content{
         delayedNeutron
      }
   {
      Component::finish();
   }

   // ------------------------
   // Assignment
   // ------------------------

   // copy
   DelayedNeutrons &operator=(const DelayedNeutrons &) = default;

   // move
   DelayedNeutrons &operator=(DelayedNeutrons &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDStk/v2.0/fissionFragmentData/DelayedNeutrons/src/custom.hpp"

}; // class DelayedNeutrons

} // namespace fissionFragmentData
} // namespace v2_0
} // namespace GNDStk
} // namespace njoy

#endif
