
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_GRID
#define GNDS_V2_0_GENERAL_GRID

#include "GNDS/v2.0/general/Link.hpp"
#include "GNDS/v2.0/general/Values.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Grid
// -----------------------------------------------------------------------------

class Grid :
   public Component<general::Grid>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Grid"; }
   static auto NODENAME() { return "grid"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         int{}
            / Meta<>("index") |
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("unit") |
         std::string{}
            / Meta<>("style") |
         std::optional<std::string>{}
            / Meta<>("interpolation") |

         // children
         --Child<std::optional<general::Link>>
            ("link") |
         --Child<std::optional<general::Values>>
            ("values")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "index",
         "label",
         "unit",
         "style",
         "interpolation",
         "link",
         "values"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "index",
         "label",
         "unit",
         "style",
         "interpolation",
         "link",
         "values"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<int>
      index{this};
   Field<std::string>
      label{this};
   Field<std::string>
      unit{this};
   Field<std::string>
      style{this};
   Field<std::optional<std::string>>
      interpolation{this};

   // children
   Field<std::optional<general::Link>>
      link{this};
   Field<std::optional<general::Values>>
      values{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->index, \
      this->label, \
      this->unit, \
      this->style, \
      this->interpolation, \
      this->link, \
      this->values \
   )

   // default
   Grid() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Grid(
      const wrapper<int>
         &index,
      const wrapper<std::string>
         &label = {},
      const wrapper<std::string>
         &unit = {},
      const wrapper<std::string>
         &style = {},
      const wrapper<std::optional<std::string>>
         &interpolation = {},
      const wrapper<std::optional<general::Link>>
         &link = {},
      const wrapper<std::optional<general::Values>>
         &values = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      index(this,index),
      label(this,label),
      unit(this,unit),
      style(this,style),
      interpolation(this,interpolation),
      link(this,link),
      values(this,values)
   {
      Component::finish();
   }

   // from node
   explicit Grid(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Grid(const Grid &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      index(this,other.index),
      label(this,other.label),
      unit(this,other.unit),
      style(this,other.style),
      interpolation(this,other.interpolation),
      link(this,other.link),
      values(this,other.values)
   {
      Component::finish(other);
   }

   // move
   Grid(Grid &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      index(this,std::move(other.index)),
      label(this,std::move(other.label)),
      unit(this,std::move(other.unit)),
      style(this,std::move(other.style)),
      interpolation(this,std::move(other.interpolation)),
      link(this,std::move(other.link)),
      values(this,std::move(other.values))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Grid &operator=(const Grid &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         index = other.index;
         label = other.label;
         unit = other.unit;
         style = other.style;
         interpolation = other.interpolation;
         link = other.link;
         values = other.values;
      }
      return *this;
   }

   // move
   Grid &operator=(Grid &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         index = std::move(other.index);
         label = std::move(other.label);
         unit = std::move(other.unit);
         style = std::move(other.style);
         interpolation = std::move(other.interpolation);
         link = std::move(other.link);
         values = std::move(other.values);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/Grid/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class Grid

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
