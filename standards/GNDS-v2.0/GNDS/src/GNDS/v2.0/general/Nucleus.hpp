
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_NUCLEUS
#define GNDS_V2_0_GENERAL_NUCLEUS

#include "GNDS/v2.0/general/Mass.hpp"
#include "GNDS/v2.0/general/Spin.hpp"
#include "GNDS/v2.0/general/Parity.hpp"
#include "GNDS/v2.0/general/Charge.hpp"
#include "GNDS/v2.0/general/Halflife.hpp"
#include "GNDS/v2.0/general/Energy.hpp"
#include "GNDS/v2.0/general/DecayData.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Nucleus
// -----------------------------------------------------------------------------

class Nucleus :
   public Component<general::Nucleus>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Nucleus"; }
   static auto NODENAME() { return "nucleus"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("id") |
         int{}
            / Meta<>("index") |

         // children
         --Child<std::optional<general::Mass>>
            ("mass") |
         --Child<std::optional<general::Spin>>
            ("spin") |
         --Child<std::optional<general::Parity>>
            ("parity") |
         --Child<general::Charge>
            ("charge") |
         --Child<std::optional<general::Halflife>>
            ("halflife") |
         --Child<general::Energy>
            ("energy") |
         --Child<std::optional<general::DecayData>>
            ("decayData")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "id",
         "index",
         "mass",
         "spin",
         "parity",
         "charge",
         "halflife",
         "energy",
         "decayData"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "id",
         "index",
         "mass",
         "spin",
         "parity",
         "charge",
         "halflife",
         "energy",
         "decay_data"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      id{this};
   Field<int>
      index{this};

   // children
   Field<std::optional<general::Mass>>
      mass{this};
   Field<std::optional<general::Spin>>
      spin{this};
   Field<std::optional<general::Parity>>
      parity{this};
   Field<general::Charge>
      charge{this};
   Field<std::optional<general::Halflife>>
      halflife{this};
   Field<general::Energy>
      energy{this};
   Field<std::optional<general::DecayData>>
      decayData{this};

   // shortcuts
   #define NJOY_GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   NJOY_GNDSTK_SHORTCUT(energy(),MadlandNix);
   NJOY_GNDSTK_SHORTCUT(energy(),NBodyPhaseSpace);
   NJOY_GNDSTK_SHORTCUT(energy(),XYs2d);
   NJOY_GNDSTK_SHORTCUT(energy(),discreteGamma);
   NJOY_GNDSTK_SHORTCUT(energy(),evaporation);
   NJOY_GNDSTK_SHORTCUT(energy(),generalEvaporation);
   NJOY_GNDSTK_SHORTCUT(energy(),primaryGamma);
   NJOY_GNDSTK_SHORTCUT(energy(),simpleMaxwellianFission);
   NJOY_GNDSTK_SHORTCUT(energy(),weightedFunctionals);
   #undef NJOY_GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->id, \
      this->index, \
      this->mass, \
      this->spin, \
      this->parity, \
      this->charge, \
      this->halflife, \
      this->energy, \
      this->decayData \
   )

   // default
   Nucleus() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Nucleus(
      const wrapper<std::string>
         &id,
      const wrapper<int>
         &index = {},
      const wrapper<std::optional<general::Mass>>
         &mass = {},
      const wrapper<std::optional<general::Spin>>
         &spin = {},
      const wrapper<std::optional<general::Parity>>
         &parity = {},
      const wrapper<general::Charge>
         &charge = {},
      const wrapper<std::optional<general::Halflife>>
         &halflife = {},
      const wrapper<general::Energy>
         &energy = {},
      const wrapper<std::optional<general::DecayData>>
         &decayData = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      id(this,id),
      index(this,index),
      mass(this,mass),
      spin(this,spin),
      parity(this,parity),
      charge(this,charge),
      halflife(this,halflife),
      energy(this,energy),
      decayData(this,decayData)
   {
      Component::finish();
   }

   // from node
   explicit Nucleus(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Nucleus(const Nucleus &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      id(this,other.id),
      index(this,other.index),
      mass(this,other.mass),
      spin(this,other.spin),
      parity(this,other.parity),
      charge(this,other.charge),
      halflife(this,other.halflife),
      energy(this,other.energy),
      decayData(this,other.decayData)
   {
      Component::finish(other);
   }

   // move
   Nucleus(Nucleus &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      id(this,std::move(other.id)),
      index(this,std::move(other.index)),
      mass(this,std::move(other.mass)),
      spin(this,std::move(other.spin)),
      parity(this,std::move(other.parity)),
      charge(this,std::move(other.charge)),
      halflife(this,std::move(other.halflife)),
      energy(this,std::move(other.energy)),
      decayData(this,std::move(other.decayData))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Nucleus &operator=(const Nucleus &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         id = other.id;
         index = other.index;
         mass = other.mass;
         spin = other.spin;
         parity = other.parity;
         charge = other.charge;
         halflife = other.halflife;
         energy = other.energy;
         decayData = other.decayData;
      }
      return *this;
   }

   // move
   Nucleus &operator=(Nucleus &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         id = std::move(other.id);
         index = std::move(other.index);
         mass = std::move(other.mass);
         spin = std::move(other.spin);
         parity = std::move(other.parity);
         charge = std::move(other.charge);
         halflife = std::move(other.halflife);
         energy = std::move(other.energy);
         decayData = std::move(other.decayData);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/Nucleus/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class Nucleus

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
