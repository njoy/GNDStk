
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Width is the basic handle type in this file. Example:
//    // Create a default Width object:
//    Width handle = WidthDefault();
// Functions involving Width are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_WIDTH
#define C_INTERFACE_GNDS_V2_0_GENERAL_WIDTH

#include "GNDStk.h"
#include "v2.0/general/XYs1d.h"
#include "v2.0/general/Constant1d.h"
#include "v2.0/general/Regions1d.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct WidthClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Width
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct WidthClass *Width;

// --- Const-aware handles.
typedef const struct WidthClass *const ConstHandle2ConstWidth;
typedef       struct WidthClass *const ConstHandle2Width;
typedef const struct WidthClass *      Handle2ConstWidth;
typedef       struct WidthClass *      Handle2Width;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstWidth
WidthDefaultConst();

// +++ Create, default
extern_c Handle2Width
WidthDefault();

// --- Create, general, const
extern_c Handle2ConstWidth
WidthCreateConst(
   const char *const label,
   const char *const resonanceReaction,
   const int degreesOfFreedom,
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstConstant1d constant1d,
   ConstHandle2ConstRegions1d regions1d
);

// +++ Create, general
extern_c Handle2Width
WidthCreate(
   const char *const label,
   const char *const resonanceReaction,
   const int degreesOfFreedom,
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstConstant1d constant1d,
   ConstHandle2ConstRegions1d regions1d
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
WidthAssign(ConstHandle2Width self, ConstHandle2ConstWidth from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
WidthDelete(ConstHandle2ConstWidth self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
WidthRead(ConstHandle2Width self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
WidthWrite(ConstHandle2ConstWidth self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
WidthPrint(ConstHandle2ConstWidth self);

// +++ Print to standard output, as XML
extern_c int
WidthPrintXML(ConstHandle2ConstWidth self);

// +++ Print to standard output, as JSON
extern_c int
WidthPrintJSON(ConstHandle2ConstWidth self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
WidthLabelHas(ConstHandle2ConstWidth self);

// +++ Get
// +++ Returns by value
extern_c const char *
WidthLabelGet(ConstHandle2ConstWidth self);

// +++ Set
extern_c void
WidthLabelSet(ConstHandle2Width self, const char *const label);


// -----------------------------------------------------------------------------
// Metadatum: resonanceReaction
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
WidthResonanceReactionHas(ConstHandle2ConstWidth self);

// +++ Get
// +++ Returns by value
extern_c const char *
WidthResonanceReactionGet(ConstHandle2ConstWidth self);

// +++ Set
extern_c void
WidthResonanceReactionSet(ConstHandle2Width self, const char *const resonanceReaction);


// -----------------------------------------------------------------------------
// Metadatum: degreesOfFreedom
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
WidthDegreesOfFreedomHas(ConstHandle2ConstWidth self);

// +++ Get
// +++ Returns by value
extern_c int
WidthDegreesOfFreedomGet(ConstHandle2ConstWidth self);

// +++ Set
extern_c void
WidthDegreesOfFreedomSet(ConstHandle2Width self, const int degreesOfFreedom);


// -----------------------------------------------------------------------------
// Child: XYs1d
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
WidthXYs1dHas(ConstHandle2ConstWidth self);

// --- Get, const
extern_c Handle2ConstXYs1d
WidthXYs1dGetConst(ConstHandle2ConstWidth self);

// +++ Get, non-const
extern_c Handle2XYs1d
WidthXYs1dGet(ConstHandle2Width self);

// +++ Set
extern_c void
WidthXYs1dSet(ConstHandle2Width self, ConstHandle2ConstXYs1d XYs1d);


// -----------------------------------------------------------------------------
// Child: constant1d
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
WidthConstant1dHas(ConstHandle2ConstWidth self);

// --- Get, const
extern_c Handle2ConstConstant1d
WidthConstant1dGetConst(ConstHandle2ConstWidth self);

// +++ Get, non-const
extern_c Handle2Constant1d
WidthConstant1dGet(ConstHandle2Width self);

// +++ Set
extern_c void
WidthConstant1dSet(ConstHandle2Width self, ConstHandle2ConstConstant1d constant1d);


// -----------------------------------------------------------------------------
// Child: regions1d
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
WidthRegions1dHas(ConstHandle2ConstWidth self);

// --- Get, const
extern_c Handle2ConstRegions1d
WidthRegions1dGetConst(ConstHandle2ConstWidth self);

// +++ Get, non-const
extern_c Handle2Regions1d
WidthRegions1dGet(ConstHandle2Width self);

// +++ Set
extern_c void
WidthRegions1dSet(ConstHandle2Width self, ConstHandle2ConstRegions1d regions1d);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Width/src/custom.h"

#undef extern_c
#endif
