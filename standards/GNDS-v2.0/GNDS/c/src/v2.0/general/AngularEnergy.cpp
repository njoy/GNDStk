
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/AngularEnergy.hpp"
#include "AngularEnergy.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = AngularEnergyClass;
using CPP = multigroup::AngularEnergy;

static const std::string CLASSNAME = "AngularEnergy";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto XYs3d = [](auto &obj) { return &obj.XYs3d; };
}

using CPPXYs3d = general::XYs3d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstAngularEnergy
AngularEnergyDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2AngularEnergy
AngularEnergyDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstAngularEnergy
AngularEnergyCreateConst(
   const char *const label,
   const char *const productFrame,
   ConstHandle2ConstXYs3d XYs3d
) {
   ConstHandle2AngularEnergy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      productFrame,
      detail::tocpp<CPPXYs3d>(XYs3d)
   );
   return handle;
}

// Create, general
Handle2AngularEnergy
AngularEnergyCreate(
   const char *const label,
   const char *const productFrame,
   ConstHandle2ConstXYs3d XYs3d
) {
   ConstHandle2AngularEnergy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      productFrame,
      detail::tocpp<CPPXYs3d>(XYs3d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
AngularEnergyAssign(ConstHandle2AngularEnergy self, ConstHandle2ConstAngularEnergy from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
AngularEnergyDelete(ConstHandle2ConstAngularEnergy self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
AngularEnergyRead(ConstHandle2AngularEnergy self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
AngularEnergyWrite(ConstHandle2ConstAngularEnergy self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
AngularEnergyPrint(ConstHandle2ConstAngularEnergy self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
AngularEnergyPrintXML(ConstHandle2ConstAngularEnergy self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
AngularEnergyPrintJSON(ConstHandle2ConstAngularEnergy self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
AngularEnergyLabelHas(ConstHandle2ConstAngularEnergy self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
AngularEnergyLabelGet(ConstHandle2ConstAngularEnergy self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
AngularEnergyLabelSet(ConstHandle2AngularEnergy self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
AngularEnergyProductFrameHas(ConstHandle2ConstAngularEnergy self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", self, extract::productFrame);
}

// Get
// Returns by value
const char *
AngularEnergyProductFrameGet(ConstHandle2ConstAngularEnergy self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", self, extract::productFrame);
}

// Set
void
AngularEnergyProductFrameSet(ConstHandle2AngularEnergy self, const char *const productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", self, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: XYs3d
// -----------------------------------------------------------------------------

// Has
int
AngularEnergyXYs3dHas(ConstHandle2ConstAngularEnergy self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs3dHas", self, extract::XYs3d);
}

// Get, const
Handle2ConstXYs3d
AngularEnergyXYs3dGetConst(ConstHandle2ConstAngularEnergy self)
{
   return detail::getField<CPP,Handle2ConstXYs3d>
      (CLASSNAME, CLASSNAME+"XYs3dGetConst", self, extract::XYs3d);
}

// Get, non-const
Handle2XYs3d
AngularEnergyXYs3dGet(ConstHandle2AngularEnergy self)
{
   return detail::getField<CPP,Handle2XYs3d>
      (CLASSNAME, CLASSNAME+"XYs3dGet", self, extract::XYs3d);
}

// Set
void
AngularEnergyXYs3dSet(ConstHandle2AngularEnergy self, ConstHandle2ConstXYs3d XYs3d)
{
   detail::setField<CPP,CPPXYs3d>
      (CLASSNAME, CLASSNAME+"XYs3dSet", self, extract::XYs3d, XYs3d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/AngularEnergy/src/custom.cpp"
