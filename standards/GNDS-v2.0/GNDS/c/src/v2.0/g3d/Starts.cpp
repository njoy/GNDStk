
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/g3d/Starts.hpp"
#include "Starts.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = StartsClass;
using CPP = multigroup::Starts;

static const std::string CLASSNAME = "Starts";

namespace extract {
   static auto valueType = [](auto &obj) { return &obj.valueType; };
   static auto label = [](auto &obj) { return &obj.label; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstStarts
StartsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Starts
StartsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstStarts
StartsCreateConst(
   const char *const valueType,
   const char *const label
) {
   ConstHandle2Starts handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      valueType,
      label
   );
   return handle;
}

// Create, general
Handle2Starts
StartsCreate(
   const char *const valueType,
   const char *const label
) {
   ConstHandle2Starts handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      valueType,
      label
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
StartsAssign(ConstHandle2Starts self, ConstHandle2ConstStarts from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
StartsDelete(ConstHandle2ConstStarts self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
StartsRead(ConstHandle2Starts self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
StartsWrite(ConstHandle2ConstStarts self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
StartsPrint(ConstHandle2ConstStarts self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
StartsPrintXML(ConstHandle2ConstStarts self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
StartsPrintJSON(ConstHandle2ConstStarts self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Data vector
// -----------------------------------------------------------------------------

// Clear
void
StartsIntsClear(ConstHandle2Starts self)
{
   detail::vectorClear<CPP>
      (CLASSNAME, CLASSNAME+"IntsClear", self);
}

// Get size
size_t
StartsIntsSize(ConstHandle2ConstStarts self)
{
   return detail::vectorSize<CPP>
      (CLASSNAME, CLASSNAME+"IntsSize", self);
}

// Get value
// By index \in [0,size)
int
StartsIntsGet(ConstHandle2ConstStarts self, const size_t index)
{
   return detail::vectorGet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsGet", self, index);
}

// Set value
// By index \in [0,size)
void
StartsIntsSet(ConstHandle2Starts self, const size_t index, const int value)
{
   detail::vectorSet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsSet", self, index, value);
}

// Get pointer to existing values, const
const int *
StartsIntsGetArrayConst(ConstHandle2ConstStarts self)
{
   return detail::vectorGet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsGetArrayConst", self);
}

// Get pointer to existing values, non-const
int *
StartsIntsGetArray(ConstHandle2Starts self)
{
   return detail::vectorGet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsGetArray", self);
}

// Set completely new values and size
void
StartsIntsSetArray(ConstHandle2Starts self, const int *const values, const size_t size)
{
   return detail::vectorSet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsSetArray", self, size, values);
}


// -----------------------------------------------------------------------------
// Metadatum: valueType
// -----------------------------------------------------------------------------

// Has
int
StartsValueTypeHas(ConstHandle2ConstStarts self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValueTypeHas", self, extract::valueType);
}

// Get
// Returns by value
const char *
StartsValueTypeGet(ConstHandle2ConstStarts self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ValueTypeGet", self, extract::valueType);
}

// Set
void
StartsValueTypeSet(ConstHandle2Starts self, const char *const valueType)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ValueTypeSet", self, extract::valueType, valueType);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
StartsLabelHas(ConstHandle2ConstStarts self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
StartsLabelGet(ConstHandle2ConstStarts self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
StartsLabelSet(ConstHandle2Starts self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/g3d/Starts/src/custom.cpp"
