
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/ParameterCovarianceMatrix.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::ParameterCovarianceMatrix
void wrapParameterCovarianceMatrix(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::ParameterCovarianceMatrix;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ParameterCovarianceMatrix",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const g3d::Array &,
         const general::Parameters &
      >(),
      py::arg("label"),
      py::arg("type"),
      py::arg("array"),
      py::arg("parameters"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set type
   object.def_property(
      "type",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.type();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.type() = value;
      },
      cppCLASS::component_t::documentation("type").data()
   );

   // get/set array
   object.def_property(
      "array",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.array();
      },
      [](cppCLASS &self, const g3d::Array &value)
      {
         self.array() = value;
      },
      cppCLASS::component_t::documentation("array").data()
   );

   // get/set parameters
   object.def_property(
      "parameters",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.parameters();
      },
      [](cppCLASS &self, const general::Parameters &value)
      {
         self.parameters() = value;
      },
      cppCLASS::component_t::documentation("parameters").data()
   );

   // shortcut: get/set lengths
   object.def_property(
      "lengths",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.lengths();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.lengths())> &value)
      {
         self.lengths() = value;
      },
      cppCLASS::component_t::documentation("lengths").data()
   );

   // shortcut: get/set parameterLink
   object.def_property(
      "parameter_link",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.parameterLink();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.parameterLink())> &value)
      {
         self.parameterLink() = value;
      },
      cppCLASS::component_t::documentation("parameter_link").data()
   );

   // shortcut: get/set starts
   object.def_property(
      "starts",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.starts();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.starts())> &value)
      {
         self.starts() = value;
      },
      cppCLASS::component_t::documentation("starts").data()
   );

   // shortcut: get/set values
   object.def_property(
      "values",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.values();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.values())> &value)
      {
         self.values() = value;
      },
      cppCLASS::component_t::documentation("values").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
