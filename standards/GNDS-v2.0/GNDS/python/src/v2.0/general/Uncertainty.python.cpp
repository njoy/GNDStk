
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Uncertainty.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::Uncertainty
void wrapUncertainty(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Uncertainty;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Uncertainty",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<general::Covariance> &,
         const std::optional<general::Standard> &,
         const std::optional<general::ListOfCovariances> &,
         const std::optional<reduced::Polynomial1d> &
      >(),
      py::arg("covariance") = std::nullopt,
      py::arg("standard") = std::nullopt,
      py::arg("list_of_covariances") = std::nullopt,
      py::arg("polynomial1d") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set covariance
   object.def_property(
      "covariance",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.covariance();
      },
      [](cppCLASS &self, const std::optional<general::Covariance> &value)
      {
         self.covariance() = value;
      },
      cppCLASS::component_t::documentation("covariance").data()
   );

   // get/set standard
   object.def_property(
      "standard",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.standard();
      },
      [](cppCLASS &self, const std::optional<general::Standard> &value)
      {
         self.standard() = value;
      },
      cppCLASS::component_t::documentation("standard").data()
   );

   // get/set listOfCovariances
   object.def_property(
      "list_of_covariances",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.listOfCovariances();
      },
      [](cppCLASS &self, const std::optional<general::ListOfCovariances> &value)
      {
         self.listOfCovariances() = value;
      },
      cppCLASS::component_t::documentation("list_of_covariances").data()
   );

   // get/set polynomial1d
   object.def_property(
      "polynomial1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.polynomial1d();
      },
      [](cppCLASS &self, const std::optional<reduced::Polynomial1d> &value)
      {
         self.polynomial1d() = value;
      },
      cppCLASS::component_t::documentation("polynomial1d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
