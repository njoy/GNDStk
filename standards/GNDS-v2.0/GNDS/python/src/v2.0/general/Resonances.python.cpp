
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Resonances.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::Resonances
void wrapResonances(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Resonances;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Resonances",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<std::string> &,
         const std::optional<general::ScatteringRadius> &,
         const std::optional<general::Resolved> &,
         const std::optional<general::Unresolved> &
      >(),
      py::arg("href") = std::nullopt,
      py::arg("scattering_radius") = std::nullopt,
      py::arg("resolved") = std::nullopt,
      py::arg("unresolved") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set href
   object.def_property(
      "href",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.href();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.href() = value;
      },
      cppCLASS::component_t::documentation("href").data()
   );

   // get/set scatteringRadius
   object.def_property(
      "scattering_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.scatteringRadius();
      },
      [](cppCLASS &self, const std::optional<general::ScatteringRadius> &value)
      {
         self.scatteringRadius() = value;
      },
      cppCLASS::component_t::documentation("scattering_radius").data()
   );

   // get/set resolved
   object.def_property(
      "resolved",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resolved();
      },
      [](cppCLASS &self, const std::optional<general::Resolved> &value)
      {
         self.resolved() = value;
      },
      cppCLASS::component_t::documentation("resolved").data()
   );

   // get/set unresolved
   object.def_property(
      "unresolved",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.unresolved();
      },
      [](cppCLASS &self, const std::optional<general::Unresolved> &value)
      {
         self.unresolved() = value;
      },
      cppCLASS::component_t::documentation("unresolved").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
