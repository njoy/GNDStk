
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/NuclearPlusInterference.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::NuclearPlusInterference
void wrapNuclearPlusInterference(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::NuclearPlusInterference;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "NuclearPlusInterference",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const double &,
         const reduced::CrossSection &,
         const reduced::Distribution &
      >(),
      py::arg("mu_cutoff"),
      py::arg("cross_section"),
      py::arg("distribution"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set muCutoff
   object.def_property(
      "mu_cutoff",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.muCutoff();
      },
      [](cppCLASS &self, const double &value)
      {
         self.muCutoff() = value;
      },
      cppCLASS::component_t::documentation("mu_cutoff").data()
   );

   // get/set crossSection
   object.def_property(
      "cross_section",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.crossSection();
      },
      [](cppCLASS &self, const reduced::CrossSection &value)
      {
         self.crossSection() = value;
      },
      cppCLASS::component_t::documentation("cross_section").data()
   );

   // get/set distribution
   object.def_property(
      "distribution",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.distribution();
      },
      [](cppCLASS &self, const reduced::Distribution &value)
      {
         self.distribution() = value;
      },
      cppCLASS::component_t::documentation("distribution").data()
   );

   // shortcut: get/set XYs1d
   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs1d())> &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   // shortcut: get/set XYs2d
   object.def_property(
      "xys2d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs2d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs2d())> &value)
      {
         self.XYs2d() = value;
      },
      cppCLASS::component_t::documentation("xys2d").data()
   );

   // shortcut: get/set branching3d
   object.def_property(
      "branching3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.branching3d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.branching3d())> &value)
      {
         self.branching3d() = value;
      },
      cppCLASS::component_t::documentation("branching3d").data()
   );

   // shortcut: get/set reference
   object.def_property(
      "reference",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.reference();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.reference())> &value)
      {
         self.reference() = value;
      },
      cppCLASS::component_t::documentation("reference").data()
   );

   // shortcut: get/set regions1d
   object.def_property(
      "regions1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.regions1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.regions1d())> &value)
      {
         self.regions1d() = value;
      },
      cppCLASS::component_t::documentation("regions1d").data()
   );

   // shortcut: get/set thermalNeutronScatteringLaw
   object.def_property(
      "thermal_neutron_scattering_law",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.thermalNeutronScatteringLaw();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.thermalNeutronScatteringLaw())> &value)
      {
         self.thermalNeutronScatteringLaw() = value;
      },
      cppCLASS::component_t::documentation("thermal_neutron_scattering_law").data()
   );

   // shortcut: get/set uncorrelated
   object.def_property(
      "uncorrelated",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.uncorrelated();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.uncorrelated())> &value)
      {
         self.uncorrelated() = value;
      },
      cppCLASS::component_t::documentation("uncorrelated").data()
   );

   // shortcut: get/set unspecified
   object.def_property(
      "unspecified",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.unspecified();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.unspecified())> &value)
      {
         self.unspecified() = value;
      },
      cppCLASS::component_t::documentation("unspecified").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
