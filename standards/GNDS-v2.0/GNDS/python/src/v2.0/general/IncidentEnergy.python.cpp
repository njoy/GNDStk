
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/IncidentEnergy.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::IncidentEnergy
void wrapIncidentEnergy(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::IncidentEnergy;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "IncidentEnergy",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const general::Energy &,
         const general::Yields &
      >(),
      py::arg("label"),
      py::arg("energy"),
      py::arg("yields"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set energy
   object.def_property(
      "energy",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.energy();
      },
      [](cppCLASS &self, const general::Energy &value)
      {
         self.energy() = value;
      },
      cppCLASS::component_t::documentation("energy").data()
   );

   // get/set yields
   object.def_property(
      "yields",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.yields();
      },
      [](cppCLASS &self, const general::Yields &value)
      {
         self.yields() = value;
      },
      cppCLASS::component_t::documentation("yields").data()
   );

   // shortcut: get/set Double
   object.def_property(
      "double",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Double();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.Double())> &value)
      {
         self.Double() = value;
      },
      cppCLASS::component_t::documentation("double").data()
   );

   // shortcut: get/set MadlandNix
   object.def_property(
      "madland_nix",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.MadlandNix();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.MadlandNix())> &value)
      {
         self.MadlandNix() = value;
      },
      cppCLASS::component_t::documentation("madland_nix").data()
   );

   // shortcut: get/set NBodyPhaseSpace
   object.def_property(
      "nbody_phase_space",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.NBodyPhaseSpace();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.NBodyPhaseSpace())> &value)
      {
         self.NBodyPhaseSpace() = value;
      },
      cppCLASS::component_t::documentation("nbody_phase_space").data()
   );

   // shortcut: get/set XYs2d
   object.def_property(
      "xys2d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs2d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs2d())> &value)
      {
         self.XYs2d() = value;
      },
      cppCLASS::component_t::documentation("xys2d").data()
   );

   // shortcut: get/set discreteGamma
   object.def_property(
      "discrete_gamma",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.discreteGamma();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.discreteGamma())> &value)
      {
         self.discreteGamma() = value;
      },
      cppCLASS::component_t::documentation("discrete_gamma").data()
   );

   // shortcut: get/set evaporation
   object.def_property(
      "evaporation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.evaporation();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.evaporation())> &value)
      {
         self.evaporation() = value;
      },
      cppCLASS::component_t::documentation("evaporation").data()
   );

   // shortcut: get/set generalEvaporation
   object.def_property(
      "general_evaporation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.generalEvaporation();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.generalEvaporation())> &value)
      {
         self.generalEvaporation() = value;
      },
      cppCLASS::component_t::documentation("general_evaporation").data()
   );

   // shortcut: get/set nuclides
   object.def_property(
      "nuclides",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.nuclides();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.nuclides())> &value)
      {
         self.nuclides() = value;
      },
      cppCLASS::component_t::documentation("nuclides").data()
   );

   // shortcut: get/set primaryGamma
   object.def_property(
      "primary_gamma",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.primaryGamma();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.primaryGamma())> &value)
      {
         self.primaryGamma() = value;
      },
      cppCLASS::component_t::documentation("primary_gamma").data()
   );

   // shortcut: get/set simpleMaxwellianFission
   object.def_property(
      "simple_maxwellian_fission",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.simpleMaxwellianFission();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.simpleMaxwellianFission())> &value)
      {
         self.simpleMaxwellianFission() = value;
      },
      cppCLASS::component_t::documentation("simple_maxwellian_fission").data()
   );

   // shortcut: get/set values
   object.def_property(
      "values",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.values();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.values())> &value)
      {
         self.values() = value;
      },
      cppCLASS::component_t::documentation("values").data()
   );

   // shortcut: get/set weightedFunctionals
   object.def_property(
      "weighted_functionals",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.weightedFunctionals();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.weightedFunctionals())> &value)
      {
         self.weightedFunctionals() = value;
      },
      cppCLASS::component_t::documentation("weighted_functionals").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
