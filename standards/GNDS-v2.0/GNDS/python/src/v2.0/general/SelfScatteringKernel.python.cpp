
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/SelfScatteringKernel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::SelfScatteringKernel
void wrapSelfScatteringKernel(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::SelfScatteringKernel;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "SelfScatteringKernel",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<bool> &,
         const std::optional<general::Gridded3d> &,
         const std::optional<general::SCTApproximation> &,
         const std::optional<general::FreeGasApproximation> &
      >(),
      py::arg("symmetric") = std::nullopt,
      py::arg("gridded3d") = std::nullopt,
      py::arg("sctapproximation") = std::nullopt,
      py::arg("free_gas_approximation") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set symmetric
   object.def_property(
      "symmetric",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.symmetric();
      },
      [](cppCLASS &self, const std::optional<bool> &value)
      {
         self.symmetric() = value;
      },
      cppCLASS::component_t::documentation("symmetric").data()
   );

   // get/set gridded3d
   object.def_property(
      "gridded3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.gridded3d();
      },
      [](cppCLASS &self, const std::optional<general::Gridded3d> &value)
      {
         self.gridded3d() = value;
      },
      cppCLASS::component_t::documentation("gridded3d").data()
   );

   // get/set SCTApproximation
   object.def_property(
      "sctapproximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.SCTApproximation();
      },
      [](cppCLASS &self, const std::optional<general::SCTApproximation> &value)
      {
         self.SCTApproximation() = value;
      },
      cppCLASS::component_t::documentation("sctapproximation").data()
   );

   // get/set freeGasApproximation
   object.def_property(
      "free_gas_approximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.freeGasApproximation();
      },
      [](cppCLASS &self, const std::optional<general::FreeGasApproximation> &value)
      {
         self.freeGasApproximation() = value;
      },
      cppCLASS::component_t::documentation("free_gas_approximation").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
