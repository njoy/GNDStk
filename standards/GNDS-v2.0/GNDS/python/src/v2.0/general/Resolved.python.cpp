
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Resolved.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::Resolved
void wrapResolved(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Resolved;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Resolved",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const double &,
         const double &,
         const std::string &,
         const std::optional<general::BreitWigner> &,
         const std::optional<general::RMatrix> &
      >(),
      py::arg("domain_min"),
      py::arg("domain_max"),
      py::arg("domain_unit"),
      py::arg("breit_wigner") = std::nullopt,
      py::arg("rmatrix") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set domainMin
   object.def_property(
      "domain_min",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainMin();
      },
      [](cppCLASS &self, const double &value)
      {
         self.domainMin() = value;
      },
      cppCLASS::component_t::documentation("domain_min").data()
   );

   // get/set domainMax
   object.def_property(
      "domain_max",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainMax();
      },
      [](cppCLASS &self, const double &value)
      {
         self.domainMax() = value;
      },
      cppCLASS::component_t::documentation("domain_max").data()
   );

   // get/set domainUnit
   object.def_property(
      "domain_unit",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainUnit();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.domainUnit() = value;
      },
      cppCLASS::component_t::documentation("domain_unit").data()
   );

   // get/set BreitWigner
   object.def_property(
      "breit_wigner",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.BreitWigner();
      },
      [](cppCLASS &self, const std::optional<general::BreitWigner> &value)
      {
         self.BreitWigner() = value;
      },
      cppCLASS::component_t::documentation("breit_wigner").data()
   );

   // get/set RMatrix
   object.def_property(
      "rmatrix",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.RMatrix();
      },
      [](cppCLASS &self, const std::optional<general::RMatrix> &value)
      {
         self.RMatrix() = value;
      },
      cppCLASS::component_t::documentation("rmatrix").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
