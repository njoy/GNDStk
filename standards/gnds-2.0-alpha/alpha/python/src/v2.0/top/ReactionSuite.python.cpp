
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/top/ReactionSuite.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_top {

// ReactionSuite wrapper
void wrapReactionSuite(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = top::ReactionSuite;

   // create the component
   python::class_<Component> component(
      module, "ReactionSuite",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::string &,
            const std::string &,
            const std::string &,
            const std::string &,
            const std::string &,
            const general::Styles &,
            const top::PoPs &,
            const general::Reactions &,
            const std::optional<general::ApplicationData> &,
            const std::optional<general::ExternalFiles> &,
            const std::optional<general::Resonances> &,
            const std::optional<general::Sums> &,
            const std::optional<general::Productions> &,
            const std::optional<general::FissionComponents> &,
            const std::optional<general::OrphanProducts> &,
            const std::optional<general::IncompleteReactions> &
         >(),
         python::arg("projectile"),
         python::arg("target"),
         python::arg("evaluation"),
         python::arg("format"),
         python::arg("projectile_frame"),
         python::arg("interaction"),
         python::arg("styles"),
         python::arg("po_ps"),
         python::arg("reactions"),
         python::arg("application_data") = std::nullopt,
         python::arg("external_files") = std::nullopt,
         python::arg("resonances") = std::nullopt,
         python::arg("sums") = std::nullopt,
         python::arg("productions") = std::nullopt,
         python::arg("fission_components") = std::nullopt,
         python::arg("orphan_products") = std::nullopt,
         python::arg("incomplete_reactions") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "projectile",
         [](const Component &self)
         {
            return self.projectile();
         },
         Component::documentation("projectile").data()
      )
      .def_property_readonly(
         "target",
         [](const Component &self)
         {
            return self.target();
         },
         Component::documentation("target").data()
      )
      .def_property_readonly(
         "evaluation",
         [](const Component &self)
         {
            return self.evaluation();
         },
         Component::documentation("evaluation").data()
      )
      .def_property_readonly(
         "format",
         [](const Component &self)
         {
            return self.format();
         },
         Component::documentation("format").data()
      )
      .def_property_readonly(
         "projectile_frame",
         [](const Component &self)
         {
            return self.projectileFrame();
         },
         Component::documentation("projectile_frame").data()
      )
      .def_property_readonly(
         "interaction",
         [](const Component &self)
         {
            return self.interaction();
         },
         Component::documentation("interaction").data()
      )
      .def_property_readonly(
         "styles",
         [](const Component &self)
         {
            return self.styles();
         },
         Component::documentation("styles").data()
      )
      .def_property_readonly(
         "po_ps",
         [](const Component &self)
         {
            return self.PoPs();
         },
         Component::documentation("po_ps").data()
      )
      .def_property_readonly(
         "reactions",
         [](const Component &self)
         {
            return self.reactions();
         },
         Component::documentation("reactions").data()
      )
      .def_property_readonly(
         "application_data",
         [](const Component &self)
         {
            return self.applicationData();
         },
         Component::documentation("application_data").data()
      )
      .def_property_readonly(
         "external_files",
         [](const Component &self)
         {
            return self.externalFiles();
         },
         Component::documentation("external_files").data()
      )
      .def_property_readonly(
         "resonances",
         [](const Component &self)
         {
            return self.resonances();
         },
         Component::documentation("resonances").data()
      )
      .def_property_readonly(
         "sums",
         [](const Component &self)
         {
            return self.sums();
         },
         Component::documentation("sums").data()
      )
      .def_property_readonly(
         "productions",
         [](const Component &self)
         {
            return self.productions();
         },
         Component::documentation("productions").data()
      )
      .def_property_readonly(
         "fission_components",
         [](const Component &self)
         {
            return self.fissionComponents();
         },
         Component::documentation("fission_components").data()
      )
      .def_property_readonly(
         "orphan_products",
         [](const Component &self)
         {
            return self.orphanProducts();
         },
         Component::documentation("orphan_products").data()
      )
      .def_property_readonly(
         "incomplete_reactions",
         [](const Component &self)
         {
            return self.incompleteReactions();
         },
         Component::documentation("incomplete_reactions").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_top
} // namespace python_v2_0
