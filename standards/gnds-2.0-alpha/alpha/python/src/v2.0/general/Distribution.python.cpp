
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/Distribution.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// Distribution wrapper
void wrapDistribution(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::Distribution;

   // create the component
   python::class_<Component> component(
      module, "Distribution",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<general::ThermalNeutronScatteringLaw> &,
            const std::optional<general::Uncorrelated> &,
            const std::optional<general::Unspecified> &,
            const std::optional<general::Branching3d> &,
            const std::optional<general::AngularTwoBody> &,
            const std::optional<general::EnergyAngular> &,
            const std::optional<general::KalbachMann> &,
            const std::optional<general::AngularEnergy> &,
            const std::optional<general::CoulombPlusNuclearElastic> &,
            const std::optional<general::CoherentPhotonScattering> &,
            const std::optional<general::IncoherentPhotonScattering> &
         >(),
         python::arg("thermal_neutron_scattering_law") = std::nullopt,
         python::arg("uncorrelated") = std::nullopt,
         python::arg("unspecified") = std::nullopt,
         python::arg("branching3d") = std::nullopt,
         python::arg("angular_two_body") = std::nullopt,
         python::arg("energy_angular") = std::nullopt,
         python::arg("kalbach_mann") = std::nullopt,
         python::arg("angular_energy") = std::nullopt,
         python::arg("coulomb_plus_nuclear_elastic") = std::nullopt,
         python::arg("coherent_photon_scattering") = std::nullopt,
         python::arg("incoherent_photon_scattering") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law",
         [](const Component &self)
         {
            return self.thermalNeutronScatteringLaw();
         },
         Component::documentation("thermal_neutron_scattering_law").data()
      )
      .def_property_readonly(
         "uncorrelated",
         [](const Component &self)
         {
            return self.uncorrelated();
         },
         Component::documentation("uncorrelated").data()
      )
      .def_property_readonly(
         "unspecified",
         [](const Component &self)
         {
            return self.unspecified();
         },
         Component::documentation("unspecified").data()
      )
      .def_property_readonly(
         "branching3d",
         [](const Component &self)
         {
            return self.branching3d();
         },
         Component::documentation("branching3d").data()
      )
      .def_property_readonly(
         "angular_two_body",
         [](const Component &self)
         {
            return self.angularTwoBody();
         },
         Component::documentation("angular_two_body").data()
      )
      .def_property_readonly(
         "energy_angular",
         [](const Component &self)
         {
            return self.energyAngular();
         },
         Component::documentation("energy_angular").data()
      )
      .def_property_readonly(
         "kalbach_mann",
         [](const Component &self)
         {
            return self.KalbachMann();
         },
         Component::documentation("kalbach_mann").data()
      )
      .def_property_readonly(
         "angular_energy",
         [](const Component &self)
         {
            return self.angularEnergy();
         },
         Component::documentation("angular_energy").data()
      )
      .def_property_readonly(
         "coulomb_plus_nuclear_elastic",
         [](const Component &self)
         {
            return self.CoulombPlusNuclearElastic();
         },
         Component::documentation("coulomb_plus_nuclear_elastic").data()
      )
      .def_property_readonly(
         "coherent_photon_scattering",
         [](const Component &self)
         {
            return self.coherentPhotonScattering();
         },
         Component::documentation("coherent_photon_scattering").data()
      )
      .def_property_readonly(
         "incoherent_photon_scattering",
         [](const Component &self)
         {
            return self.incoherentPhotonScattering();
         },
         Component::documentation("incoherent_photon_scattering").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
