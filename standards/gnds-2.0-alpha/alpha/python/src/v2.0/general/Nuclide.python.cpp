
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/Nuclide.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// Nuclide wrapper
void wrapNuclide(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::Nuclide;

   // create the component
   python::class_<Component> component(
      module,
      "Nuclide",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::optional<general::Mass> &,
            const general::Charge &,
            const general::Nucleus &,
            const std::optional<general::DecayData> &,
            const std::optional<top::FissionFragmentData> &
         >(),
         python::arg("id"),
         python::arg("mass") = std::nullopt,
         python::arg("charge"),
         python::arg("nucleus"),
         python::arg("decay_data") = std::nullopt,
         python::arg("fission_fragment_data") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "id",
         [](const Component &self) { return self.id(); },
         Component::documentation("id").data()
      )
      .def_property_readonly(
         "mass",
         [](const Component &self) { return self.mass(); },
         Component::documentation("mass").data()
      )
      .def_property_readonly(
         "charge",
         [](const Component &self) { return self.charge(); },
         Component::documentation("charge").data()
      )
      .def_property_readonly(
         "nucleus",
         [](const Component &self) { return self.nucleus(); },
         Component::documentation("nucleus").data()
      )
      .def_property_readonly(
         "decay_data",
         [](const Component &self) { return self.decayData(); },
         Component::documentation("decay_data").data()
      )
      .def_property_readonly(
         "fission_fragment_data",
         [](const Component &self) { return self.fissionFragmentData(); },
         Component::documentation("fission_fragment_data").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_general
} // namespace python_v2_0
