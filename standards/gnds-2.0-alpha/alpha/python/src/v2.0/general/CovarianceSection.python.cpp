
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/CovarianceSection.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// CovarianceSection wrapper
void wrapCovarianceSection(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::CovarianceSection;

   // create the component
   python::class_<Component> component(
      module, "CovarianceSection",
      Component::component_t::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::optional<bool> &,
            const general::RowData &,
            const std::optional<general::ColumnData> &,
            const std::optional<general::CovarianceMatrix> &,
            const std::optional<general::Mixed> &,
            const std::optional<general::Sum> &
         >(),
         python::arg("label"),
         python::arg("cross_term") = std::nullopt,
         python::arg("row_data"),
         python::arg("column_data") = std::nullopt,
         python::arg("covariance_matrix") = std::nullopt,
         python::arg("mixed") = std::nullopt,
         python::arg("sum") = std::nullopt,
         Component::component_t::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self)
         {
            return self.label();
         },
         Component::component_t::documentation("label").data()
      )
      .def_property_readonly(
         "cross_term",
         [](const Component &self)
         {
            return self.crossTerm();
         },
         Component::component_t::documentation("cross_term").data()
      )
      .def_property_readonly(
         "row_data",
         [](const Component &self)
         {
            return self.rowData();
         },
         Component::component_t::documentation("row_data").data()
      )
      .def_property_readonly(
         "column_data",
         [](const Component &self)
         {
            return self.columnData();
         },
         Component::component_t::documentation("column_data").data()
      )
      .def_property_readonly(
         "covariance_matrix",
         [](const Component &self)
         {
            return self.covarianceMatrix();
         },
         Component::component_t::documentation("covariance_matrix").data()
      )
      .def_property_readonly(
         "mixed",
         [](const Component &self)
         {
            return self.mixed();
         },
         Component::component_t::documentation("mixed").data()
      )
      .def_property_readonly(
         "sum",
         [](const Component &self)
         {
            return self.sum();
         },
         Component::component_t::documentation("sum").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
