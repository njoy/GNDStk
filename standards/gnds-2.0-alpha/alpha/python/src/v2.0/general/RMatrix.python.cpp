
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/RMatrix.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::RMatrix
void wrapRMatrix(py::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using cppCLASS = general::RMatrix;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "RMatrix",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const std::string &,
         const std::optional<bool> &,
         const std::optional<bool> &,
         const std::optional<top::PoPs> &,
         const general::ResonanceReactions &,
         const general::SpinGroups &
      >(),
      py::arg("label"),
      py::arg("approximation"),
      py::arg("boundary_condition"),
      py::arg("calculate_channel_radius") = std::nullopt,
      py::arg("supports_angular_reconstruction") = std::nullopt,
      py::arg("po_ps") = std::nullopt,
      py::arg("resonance_reactions"),
      py::arg("spin_groups"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set approximation
   object.def_property(
      "approximation",
      [](const cppCLASS &self)
      {
         return self.approximation();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.approximation() = value;
      },
      cppCLASS::component_t::documentation("approximation").data()
   );

   // get/set boundaryCondition
   object.def_property(
      "boundary_condition",
      [](const cppCLASS &self)
      {
         return self.boundaryCondition();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.boundaryCondition() = value;
      },
      cppCLASS::component_t::documentation("boundary_condition").data()
   );

   // get/set calculateChannelRadius
   object.def_property(
      "calculate_channel_radius",
      [](const cppCLASS &self)
      {
         return self.calculateChannelRadius();
      },
      [](cppCLASS &self, const std::optional<bool> &value)
      {
         self.calculateChannelRadius() = value;
      },
      cppCLASS::component_t::documentation("calculate_channel_radius").data()
   );

   // get/set supportsAngularReconstruction
   object.def_property(
      "supports_angular_reconstruction",
      [](const cppCLASS &self)
      {
         return self.supportsAngularReconstruction();
      },
      [](cppCLASS &self, const std::optional<bool> &value)
      {
         self.supportsAngularReconstruction() = value;
      },
      cppCLASS::component_t::documentation("supports_angular_reconstruction").data()
   );

   // get/set PoPs
   object.def_property(
      "po_ps",
      [](const cppCLASS &self)
      {
         return self.PoPs();
      },
      [](cppCLASS &self, const std::optional<top::PoPs> &value)
      {
         self.PoPs() = value;
      },
      cppCLASS::component_t::documentation("po_ps").data()
   );

   // get/set resonanceReactions
   object.def_property(
      "resonance_reactions",
      [](const cppCLASS &self)
      {
         return self.resonanceReactions();
      },
      [](cppCLASS &self, const general::ResonanceReactions &value)
      {
         self.resonanceReactions() = value;
      },
      cppCLASS::component_t::documentation("resonance_reactions").data()
   );

   // get/set spinGroups
   object.def_property(
      "spin_groups",
      [](const cppCLASS &self)
      {
         return self.spinGroups();
      },
      [](cppCLASS &self, const general::SpinGroups &value)
      {
         self.spinGroups() = value;
      },
      cppCLASS::component_t::documentation("spin_groups").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
