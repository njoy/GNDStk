
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/E_critical.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// E_critical wrapper
void wrapE_critical(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::E_critical;

   // create the component
   python::class_<Component> component(
      module, "E_critical",
      Component::component_t::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const double &,
            const std::string &
         >(),
         python::arg("value"),
         python::arg("unit"),
         Component::component_t::documentation("constructor").data()
      )
      .def_property_readonly(
         "value",
         [](const Component &self)
         {
            return self.value();
         },
         Component::component_t::documentation("value").data()
      )
      .def_property_readonly(
         "unit",
         [](const Component &self)
         {
            return self.unit();
         },
         Component::component_t::documentation("unit").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
