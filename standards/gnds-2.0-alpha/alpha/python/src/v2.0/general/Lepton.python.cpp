
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/Lepton.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// Lepton wrapper
void wrapLepton(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::Lepton;

   // create the component
   python::class_<Component> component(
      module,
      "Lepton",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::string &,
            const general::Mass &,
            const general::Spin &,
            const general::Parity &,
            const general::Charge &,
            const general::Halflife &
         >(),
         python::arg("id"),
         python::arg("generation"),
         python::arg("mass"),
         python::arg("spin"),
         python::arg("parity"),
         python::arg("charge"),
         python::arg("halflife"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "id",
         [](const Component &self) { return self.id(); },
         Component::documentation("id").data()
      )
      .def_property_readonly(
         "generation",
         [](const Component &self) { return self.generation(); },
         Component::documentation("generation").data()
      )
      .def_property_readonly(
         "mass",
         [](const Component &self) { return self.mass(); },
         Component::documentation("mass").data()
      )
      .def_property_readonly(
         "spin",
         [](const Component &self) { return self.spin(); },
         Component::documentation("spin").data()
      )
      .def_property_readonly(
         "parity",
         [](const Component &self) { return self.parity(); },
         Component::documentation("parity").data()
      )
      .def_property_readonly(
         "charge",
         [](const Component &self) { return self.charge(); },
         Component::documentation("charge").data()
      )
      .def_property_readonly(
         "halflife",
         [](const Component &self) { return self.halflife(); },
         Component::documentation("halflife").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_general
} // namespace python_v2_0
