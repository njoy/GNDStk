
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/ElapsedTime.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::ElapsedTime
void wrapElapsedTime(py::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using cppCLASS = general::ElapsedTime;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ElapsedTime",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const general::Time &,
         const std::optional<general::Yields> &,
         const std::optional<general::IncidentEnergies> &
      >(),
      py::arg("label"),
      py::arg("time"),
      py::arg("yields") = std::nullopt,
      py::arg("incident_energies") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set time
   object.def_property(
      "time",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.time();
      },
      [](cppCLASS &self, const general::Time &value)
      {
         self.time() = value;
      },
      cppCLASS::component_t::documentation("time").data()
   );

   // get/set yields
   object.def_property(
      "yields",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.yields();
      },
      [](cppCLASS &self, const std::optional<general::Yields> &value)
      {
         self.yields() = value;
      },
      cppCLASS::component_t::documentation("yields").data()
   );

   // get/set incidentEnergies
   object.def_property(
      "incident_energies",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.incidentEnergies();
      },
      [](cppCLASS &self, const std::optional<general::IncidentEnergies> &value)
      {
         self.incidentEnergies() = value;
      },
      cppCLASS::component_t::documentation("incident_energies").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
