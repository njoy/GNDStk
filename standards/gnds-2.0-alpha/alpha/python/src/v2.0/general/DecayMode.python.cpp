
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/DecayMode.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// DecayMode wrapper
void wrapDecayMode(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::DecayMode;

   // create the component
   python::class_<Component> component(
      module, "DecayMode",
      Component::component_t::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<std::string> &,
            const std::optional<std::string> &,
            const general::Probability &,
            const general::DecayPath &,
            const std::optional<general::PhotonEmissionProbabilities> &,
            const std::optional<general::Q> &,
            const std::optional<general::Spectra> &
         >(),
         python::arg("label") = std::nullopt,
         python::arg("mode") = std::nullopt,
         python::arg("probability"),
         python::arg("decay_path"),
         python::arg("photon_emission_probabilities") = std::nullopt,
         python::arg("q") = std::nullopt,
         python::arg("spectra") = std::nullopt,
         Component::component_t::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self)
         {
            return self.label();
         },
         Component::component_t::documentation("label").data()
      )
      .def_property_readonly(
         "mode",
         [](const Component &self)
         {
            return self.mode();
         },
         Component::component_t::documentation("mode").data()
      )
      .def_property_readonly(
         "probability",
         [](const Component &self)
         {
            return self.probability();
         },
         Component::component_t::documentation("probability").data()
      )
      .def_property_readonly(
         "decay_path",
         [](const Component &self)
         {
            return self.decayPath();
         },
         Component::component_t::documentation("decay_path").data()
      )
      .def_property_readonly(
         "photon_emission_probabilities",
         [](const Component &self)
         {
            return self.photonEmissionProbabilities();
         },
         Component::component_t::documentation("photon_emission_probabilities").data()
      )
      .def_property_readonly(
         "q",
         [](const Component &self)
         {
            return self.Q();
         },
         Component::component_t::documentation("q").data()
      )
      .def_property_readonly(
         "spectra",
         [](const Component &self)
         {
            return self.spectra();
         },
         Component::component_t::documentation("spectra").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
