
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/DecayMode.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::DecayMode
void wrapDecayMode(py::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using cppCLASS = general::DecayMode;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "DecayMode",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<std::string> &,
         const std::optional<std::string> &,
         const general::Probability &,
         const general::DecayPath &,
         const std::optional<general::PhotonEmissionProbabilities> &,
         const std::optional<general::Q> &,
         const std::optional<general::Spectra> &
      >(),
      py::arg("label") = std::nullopt,
      py::arg("mode") = std::nullopt,
      py::arg("probability"),
      py::arg("decay_path"),
      py::arg("photon_emission_probabilities") = std::nullopt,
      py::arg("q") = std::nullopt,
      py::arg("spectra") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set mode
   object.def_property(
      "mode",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.mode();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.mode() = value;
      },
      cppCLASS::component_t::documentation("mode").data()
   );

   // get/set probability
   object.def_property(
      "probability",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.probability();
      },
      [](cppCLASS &self, const general::Probability &value)
      {
         self.probability() = value;
      },
      cppCLASS::component_t::documentation("probability").data()
   );

   // get/set decayPath
   object.def_property(
      "decay_path",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.decayPath();
      },
      [](cppCLASS &self, const general::DecayPath &value)
      {
         self.decayPath() = value;
      },
      cppCLASS::component_t::documentation("decay_path").data()
   );

   // get/set photonEmissionProbabilities
   object.def_property(
      "photon_emission_probabilities",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.photonEmissionProbabilities();
      },
      [](cppCLASS &self, const std::optional<general::PhotonEmissionProbabilities> &value)
      {
         self.photonEmissionProbabilities() = value;
      },
      cppCLASS::component_t::documentation("photon_emission_probabilities").data()
   );

   // get/set Q
   object.def_property(
      "q",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Q();
      },
      [](cppCLASS &self, const std::optional<general::Q> &value)
      {
         self.Q() = value;
      },
      cppCLASS::component_t::documentation("q").data()
   );

   // get/set spectra
   object.def_property(
      "spectra",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.spectra();
      },
      [](cppCLASS &self, const std::optional<general::Spectra> &value)
      {
         self.spectra() = value;
      },
      cppCLASS::component_t::documentation("spectra").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
