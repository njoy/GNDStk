
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/Nucleus.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// Nucleus wrapper
void wrapNucleus(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::Nucleus;

   // create the component
   python::class_<Component> component(
      module, "Nucleus",
      Component::component_t::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const int &,
            const std::optional<general::Mass> &,
            const std::optional<general::Spin> &,
            const std::optional<general::Parity> &,
            const general::Charge &,
            const std::optional<general::Halflife> &,
            const general::Energy &,
            const std::optional<general::DecayData> &
         >(),
         python::arg("id"),
         python::arg("index"),
         python::arg("mass") = std::nullopt,
         python::arg("spin") = std::nullopt,
         python::arg("parity") = std::nullopt,
         python::arg("charge"),
         python::arg("halflife") = std::nullopt,
         python::arg("energy"),
         python::arg("decay_data") = std::nullopt,
         Component::component_t::documentation("constructor").data()
      )
      .def_property_readonly(
         "id",
         [](const Component &self)
         {
            return self.id();
         },
         Component::component_t::documentation("id").data()
      )
      .def_property_readonly(
         "index",
         [](const Component &self)
         {
            return self.index();
         },
         Component::component_t::documentation("index").data()
      )
      .def_property_readonly(
         "mass",
         [](const Component &self)
         {
            return self.mass();
         },
         Component::component_t::documentation("mass").data()
      )
      .def_property_readonly(
         "spin",
         [](const Component &self)
         {
            return self.spin();
         },
         Component::component_t::documentation("spin").data()
      )
      .def_property_readonly(
         "parity",
         [](const Component &self)
         {
            return self.parity();
         },
         Component::component_t::documentation("parity").data()
      )
      .def_property_readonly(
         "charge",
         [](const Component &self)
         {
            return self.charge();
         },
         Component::component_t::documentation("charge").data()
      )
      .def_property_readonly(
         "halflife",
         [](const Component &self)
         {
            return self.halflife();
         },
         Component::component_t::documentation("halflife").data()
      )
      .def_property_readonly(
         "energy",
         [](const Component &self)
         {
            return self.energy();
         },
         Component::component_t::documentation("energy").data()
      )
      .def_property_readonly(
         "decay_data",
         [](const Component &self)
         {
            return self.decayData();
         },
         Component::component_t::documentation("decay_data").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
