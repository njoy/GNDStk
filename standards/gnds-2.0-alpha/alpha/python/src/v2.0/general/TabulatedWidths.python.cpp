
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/TabulatedWidths.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// TabulatedWidths wrapper
void wrapTabulatedWidths(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::TabulatedWidths;

   // create the component
   python::class_<Component> component(
      module, "TabulatedWidths",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::string &,
            const std::optional<bool> &,
            const general::ResonanceReactions &,
            const general::Ls &,
            const std::optional<top::PoPs> &,
            const std::optional<general::ScatteringRadius> &
         >(),
         python::arg("label"),
         python::arg("approximation"),
         python::arg("use_for_self_shielding_only") = std::nullopt,
         python::arg("resonance_reactions"),
         python::arg("ls"),
         python::arg("po_ps") = std::nullopt,
         python::arg("scattering_radius") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self)
         {
            return self.label();
         },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "approximation",
         [](const Component &self)
         {
            return self.approximation();
         },
         Component::documentation("approximation").data()
      )
      .def_property_readonly(
         "use_for_self_shielding_only",
         [](const Component &self)
         {
            return self.useForSelfShieldingOnly();
         },
         Component::documentation("use_for_self_shielding_only").data()
      )
      .def_property_readonly(
         "resonance_reactions",
         [](const Component &self)
         {
            return self.resonanceReactions();
         },
         Component::documentation("resonance_reactions").data()
      )
      .def_property_readonly(
         "ls",
         [](const Component &self)
         {
            return self.Ls();
         },
         Component::documentation("ls").data()
      )
      .def_property_readonly(
         "po_ps",
         [](const Component &self)
         {
            return self.PoPs();
         },
         Component::documentation("po_ps").data()
      )
      .def_property_readonly(
         "scattering_radius",
         [](const Component &self)
         {
            return self.scatteringRadius();
         },
         Component::documentation("scattering_radius").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
