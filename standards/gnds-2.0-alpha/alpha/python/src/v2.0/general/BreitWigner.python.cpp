
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/BreitWigner.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::BreitWigner
void wrapBreitWigner(py::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using cppCLASS = general::BreitWigner;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "BreitWigner",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const std::optional<bool> &,
         const general::ResonanceParameters &,
         const std::optional<top::PoPs> &,
         const std::optional<general::ScatteringRadius> &
      >(),
      py::arg("label"),
      py::arg("approximation"),
      py::arg("calculate_channel_radius") = std::nullopt,
      py::arg("resonance_parameters"),
      py::arg("po_ps") = std::nullopt,
      py::arg("scattering_radius") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set approximation
   object.def_property(
      "approximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.approximation();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.approximation() = value;
      },
      cppCLASS::component_t::documentation("approximation").data()
   );

   // get/set calculateChannelRadius
   object.def_property(
      "calculate_channel_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.calculateChannelRadius();
      },
      [](cppCLASS &self, const std::optional<bool> &value)
      {
         self.calculateChannelRadius() = value;
      },
      cppCLASS::component_t::documentation("calculate_channel_radius").data()
   );

   // get/set resonanceParameters
   object.def_property(
      "resonance_parameters",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resonanceParameters();
      },
      [](cppCLASS &self, const general::ResonanceParameters &value)
      {
         self.resonanceParameters() = value;
      },
      cppCLASS::component_t::documentation("resonance_parameters").data()
   );

   // get/set PoPs
   object.def_property(
      "po_ps",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.PoPs();
      },
      [](cppCLASS &self, const std::optional<top::PoPs> &value)
      {
         self.PoPs() = value;
      },
      cppCLASS::component_t::documentation("po_ps").data()
   );

   // get/set scatteringRadius
   object.def_property(
      "scattering_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.scatteringRadius();
      },
      [](cppCLASS &self, const std::optional<general::ScatteringRadius> &value)
      {
         self.scatteringRadius() = value;
      },
      cppCLASS::component_t::documentation("scattering_radius").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
