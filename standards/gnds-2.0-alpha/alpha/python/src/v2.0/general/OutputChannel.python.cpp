
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/OutputChannel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// OutputChannel wrapper
void wrapOutputChannel(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::OutputChannel;

   // create the component
   python::class_<Component> component(
      module,
      "OutputChannel",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::optional<std::string> &,
            const general::Q &,
            const std::optional<general::Products> &,
            const std::optional<top::FissionFragmentData> &
         >(),
         python::arg("genre"),
         python::arg("process") = std::nullopt,
         python::arg("q"),
         python::arg("products") = std::nullopt,
         python::arg("fission_fragment_data") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "genre",
         [](const Component &self) { return self.genre(); },
         Component::documentation("genre").data()
      )
      .def_property_readonly(
         "process",
         [](const Component &self) { return self.process(); },
         Component::documentation("process").data()
      )
      .def_property_readonly(
         "q",
         [](const Component &self) { return self.Q(); },
         Component::documentation("q").data()
      )
      .def_property_readonly(
         "products",
         [](const Component &self) { return self.products(); },
         Component::documentation("products").data()
      )
      .def_property_readonly(
         "fission_fragment_data",
         [](const Component &self) { return self.fissionFragmentData(); },
         Component::documentation("fission_fragment_data").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_general
} // namespace python_v2_0
