
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/CovarianceMatrix.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::CovarianceMatrix
void wrapCovarianceMatrix(py::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using cppCLASS = general::CovarianceMatrix;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "CovarianceMatrix",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const std::optional<std::string> &,
         const general::Gridded2d &
      >(),
      py::arg("label"),
      py::arg("type"),
      py::arg("product_frame") = std::nullopt,
      py::arg("gridded2d"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set type
   object.def_property(
      "type",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.type();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.type() = value;
      },
      cppCLASS::component_t::documentation("type").data()
   );

   // get/set productFrame
   object.def_property(
      "product_frame",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.productFrame();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.productFrame() = value;
      },
      cppCLASS::component_t::documentation("product_frame").data()
   );

   // get/set gridded2d
   object.def_property(
      "gridded2d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.gridded2d();
      },
      [](cppCLASS &self, const general::Gridded2d &value)
      {
         self.gridded2d() = value;
      },
      cppCLASS::component_t::documentation("gridded2d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
