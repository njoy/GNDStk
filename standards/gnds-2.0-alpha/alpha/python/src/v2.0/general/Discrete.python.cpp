
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/Discrete.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::Discrete
void wrapDiscrete(py::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using cppCLASS = general::Discrete;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Discrete",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<std::string> &,
         const general::Intensity &,
         const general::Energy &,
         const std::optional<general::InternalConversionCoefficients> &,
         const std::optional<general::PositronEmissionIntensity> &
      >(),
      py::arg("type") = std::nullopt,
      py::arg("intensity"),
      py::arg("energy"),
      py::arg("internal_conversion_coefficients") = std::nullopt,
      py::arg("positron_emission_intensity") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set type
   object.def_property(
      "type",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.type();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.type() = value;
      },
      cppCLASS::component_t::documentation("type").data()
   );

   // get/set intensity
   object.def_property(
      "intensity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.intensity();
      },
      [](cppCLASS &self, const general::Intensity &value)
      {
         self.intensity() = value;
      },
      cppCLASS::component_t::documentation("intensity").data()
   );

   // get/set energy
   object.def_property(
      "energy",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.energy();
      },
      [](cppCLASS &self, const general::Energy &value)
      {
         self.energy() = value;
      },
      cppCLASS::component_t::documentation("energy").data()
   );

   // get/set internalConversionCoefficients
   object.def_property(
      "internal_conversion_coefficients",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.internalConversionCoefficients();
      },
      [](cppCLASS &self, const std::optional<general::InternalConversionCoefficients> &value)
      {
         self.internalConversionCoefficients() = value;
      },
      cppCLASS::component_t::documentation("internal_conversion_coefficients").data()
   );

   // get/set positronEmissionIntensity
   object.def_property(
      "positron_emission_intensity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.positronEmissionIntensity();
      },
      [](cppCLASS &self, const std::optional<general::PositronEmissionIntensity> &value)
      {
         self.positronEmissionIntensity() = value;
      },
      cppCLASS::component_t::documentation("positron_emission_intensity").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
