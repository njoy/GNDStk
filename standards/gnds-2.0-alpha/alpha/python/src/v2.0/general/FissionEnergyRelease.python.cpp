
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/general/FissionEnergyRelease.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_general {

// FissionEnergyRelease wrapper
void wrapFissionEnergyRelease(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = general::FissionEnergyRelease;

   // create the component
   python::class_<Component> component(
      module, "FissionEnergyRelease",
      Component::component_t::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const general::PromptProductKE &,
            const general::PromptNeutronKE &,
            const general::DelayedNeutronKE &,
            const general::PromptGammaEnergy &,
            const general::DelayedGammaEnergy &,
            const general::DelayedBetaEnergy &,
            const general::NeutrinoEnergy &,
            const general::NonNeutrinoEnergy &,
            const general::TotalEnergy &
         >(),
         python::arg("label"),
         python::arg("prompt_product_ke"),
         python::arg("prompt_neutron_ke"),
         python::arg("delayed_neutron_ke"),
         python::arg("prompt_gamma_energy"),
         python::arg("delayed_gamma_energy"),
         python::arg("delayed_beta_energy"),
         python::arg("neutrino_energy"),
         python::arg("non_neutrino_energy"),
         python::arg("total_energy"),
         Component::component_t::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self)
         {
            return self.label();
         },
         Component::component_t::documentation("label").data()
      )
      .def_property_readonly(
         "prompt_product_ke",
         [](const Component &self)
         {
            return self.promptProductKE();
         },
         Component::component_t::documentation("prompt_product_ke").data()
      )
      .def_property_readonly(
         "prompt_neutron_ke",
         [](const Component &self)
         {
            return self.promptNeutronKE();
         },
         Component::component_t::documentation("prompt_neutron_ke").data()
      )
      .def_property_readonly(
         "delayed_neutron_ke",
         [](const Component &self)
         {
            return self.delayedNeutronKE();
         },
         Component::component_t::documentation("delayed_neutron_ke").data()
      )
      .def_property_readonly(
         "prompt_gamma_energy",
         [](const Component &self)
         {
            return self.promptGammaEnergy();
         },
         Component::component_t::documentation("prompt_gamma_energy").data()
      )
      .def_property_readonly(
         "delayed_gamma_energy",
         [](const Component &self)
         {
            return self.delayedGammaEnergy();
         },
         Component::component_t::documentation("delayed_gamma_energy").data()
      )
      .def_property_readonly(
         "delayed_beta_energy",
         [](const Component &self)
         {
            return self.delayedBetaEnergy();
         },
         Component::component_t::documentation("delayed_beta_energy").data()
      )
      .def_property_readonly(
         "neutrino_energy",
         [](const Component &self)
         {
            return self.neutrinoEnergy();
         },
         Component::component_t::documentation("neutrino_energy").data()
      )
      .def_property_readonly(
         "non_neutrino_energy",
         [](const Component &self)
         {
            return self.nonNeutrinoEnergy();
         },
         Component::component_t::documentation("non_neutrino_energy").data()
      )
      .def_property_readonly(
         "total_energy",
         [](const Component &self)
         {
            return self.totalEnergy();
         },
         Component::component_t::documentation("total_energy").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions<Component>(component);
}

} // namespace python_general
} // namespace python_v2_0
