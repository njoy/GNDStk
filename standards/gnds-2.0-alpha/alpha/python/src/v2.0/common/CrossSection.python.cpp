
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/common/CrossSection.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_common {

// CrossSection wrapper
void wrapCrossSection(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = common::CrossSection;

   // create the component
   python::class_<Component> component(
      module,
      "CrossSection",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<common::XYs1d> &,
            const std::optional<mean::Regions1d> &,
            const std::optional<mean::Reference> &,
            const std::optional<mean::ResonancesWithBackground> &,
            const std::optional<dfiles::CoulombPlusNuclearElastic> &,
            const std::optional<tsl::ThermalNeutronScatteringLaw1d> &
         >(),
         python::arg("xys1d") = std::nullopt,
         python::arg("regions1d") = std::nullopt,
         python::arg("reference") = std::nullopt,
         python::arg("resonances_with_background") = std::nullopt,
         python::arg("coulomb_plus_nuclear_elastic") = std::nullopt,
         python::arg("thermal_neutron_scattering_law1d") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "xys1d",
         [](const Component &self) { return self.XYs1d(); },
         Component::documentation("xys1d").data()
      )
      .def_property_readonly(
         "regions1d",
         [](const Component &self) { return self.regions1d(); },
         Component::documentation("regions1d").data()
      )
      .def_property_readonly(
         "reference",
         [](const Component &self) { return self.reference(); },
         Component::documentation("reference").data()
      )
      .def_property_readonly(
         "resonances_with_background",
         [](const Component &self) { return self.resonancesWithBackground(); },
         Component::documentation("resonances_with_background").data()
      )
      .def_property_readonly(
         "coulomb_plus_nuclear_elastic",
         [](const Component &self) { return self.CoulombPlusNuclearElastic(); },
         Component::documentation("coulomb_plus_nuclear_elastic").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law1d",
         [](const Component &self) { return self.thermalNeutronScatteringLaw1d(); },
         Component::documentation("thermal_neutron_scattering_law1d").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_common
} // namespace python_v2_0
