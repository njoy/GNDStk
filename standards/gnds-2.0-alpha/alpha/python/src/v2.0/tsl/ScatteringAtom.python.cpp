
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/tsl/ScatteringAtom.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_tsl {

// ScatteringAtom wrapper
void wrapScatteringAtom(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = tsl::ScatteringAtom;

   // create the component
   python::class_<Component> component(
      module,
      "ScatteringAtom",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const int &,
            const std::optional<bool> &,
            const common::Mass &,
            const std::optional<tsl::E_critical> &,
            const tsl::E_max &,
            const tsl::BoundAtomCrossSection &,
            const tsl::SelfScatteringKernel &,
            const std::optional<tsl::T_effective> &
         >(),
         python::arg("pid"),
         python::arg("number_per_molecule"),
         python::arg("primary_scatterer") = std::nullopt,
         python::arg("mass"),
         python::arg("e_critical") = std::nullopt,
         python::arg("e_max"),
         python::arg("bound_atom_cross_section"),
         python::arg("self_scattering_kernel"),
         python::arg("t_effective") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "pid",
         [](const Component &self) { return self.pid(); },
         Component::documentation("pid").data()
      )
      .def_property_readonly(
         "number_per_molecule",
         [](const Component &self) { return self.numberPerMolecule(); },
         Component::documentation("number_per_molecule").data()
      )
      .def_property_readonly(
         "primary_scatterer",
         [](const Component &self) { return self.primaryScatterer(); },
         Component::documentation("primary_scatterer").data()
      )
      .def_property_readonly(
         "mass",
         [](const Component &self) { return self.mass(); },
         Component::documentation("mass").data()
      )
      .def_property_readonly(
         "e_critical",
         [](const Component &self) { return self.e_critical(); },
         Component::documentation("e_critical").data()
      )
      .def_property_readonly(
         "e_max",
         [](const Component &self) { return self.e_max(); },
         Component::documentation("e_max").data()
      )
      .def_property_readonly(
         "bound_atom_cross_section",
         [](const Component &self) { return self.boundAtomCrossSection(); },
         Component::documentation("bound_atom_cross_section").data()
      )
      .def_property_readonly(
         "self_scattering_kernel",
         [](const Component &self) { return self.selfScatteringKernel(); },
         Component::documentation("self_scattering_kernel").data()
      )
      .def_property_readonly(
         "t_effective",
         [](const Component &self) { return self.T_effective(); },
         Component::documentation("t_effective").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_tsl
} // namespace python_v2_0
