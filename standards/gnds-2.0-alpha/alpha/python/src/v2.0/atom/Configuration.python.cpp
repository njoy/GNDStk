
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/atom/Configuration.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_atom {

// Configuration wrapper
void wrapConfiguration(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = atom::Configuration;

   // create the component
   python::class_<Component> component(
      module,
      "Configuration",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const double &,
            const atom::BindingEnergy &,
            const std::vector<common::DecayData> &
         >(),
         python::arg("subshell"),
         python::arg("electron_number"),
         python::arg("binding_energy"),
         python::arg("decay_data"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "subshell",
         [](const Component &self) { return self.subshell(); },
         Component::documentation("subshell").data()
      )
      .def_property_readonly(
         "electron_number",
         [](const Component &self) { return self.electronNumber(); },
         Component::documentation("electron_number").data()
      )
      .def_property_readonly(
         "binding_energy",
         [](const Component &self) { return self.bindingEnergy(); },
         Component::documentation("binding_energy").data()
      )
      .def_property_readonly(
         "decay_data",
         [](const Component &self) { return self.decayData(); },
         Component::documentation("decay_data").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_atom
} // namespace python_v2_0
