
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/g3d/Array.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_g3d {

// Array wrapper
void wrapArray(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = g3d::Array;

   // create the component
   python::class_<Component> component(
      module,
      "Array",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::optional<std::string> &,
            const std::optional<std::string> &,
            const std::optional<g3d::Starts> &,
            const std::optional<g3d::Lengths> &,
            const common::Values &
         >(),
         python::arg("shape"),
         python::arg("compression") = std::nullopt,
         python::arg("symmetry") = std::nullopt,
         python::arg("starts") = std::nullopt,
         python::arg("lengths") = std::nullopt,
         python::arg("values"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "shape",
         [](const Component &self) { return self.shape(); },
         Component::documentation("shape").data()
      )
      .def_property_readonly(
         "compression",
         [](const Component &self) { return self.compression(); },
         Component::documentation("compression").data()
      )
      .def_property_readonly(
         "symmetry",
         [](const Component &self) { return self.symmetry(); },
         Component::documentation("symmetry").data()
      )
      .def_property_readonly(
         "starts",
         [](const Component &self) { return self.starts(); },
         Component::documentation("starts").data()
      )
      .def_property_readonly(
         "lengths",
         [](const Component &self) { return self.lengths(); },
         Component::documentation("lengths").data()
      )
      .def_property_readonly(
         "values",
         [](const Component &self) { return self.values(); },
         Component::documentation("values").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_g3d
} // namespace python_v2_0
