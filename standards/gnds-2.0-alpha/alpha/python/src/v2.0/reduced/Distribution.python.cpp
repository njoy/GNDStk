
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/reduced/Distribution.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_reduced {

// Distribution wrapper
void wrapDistribution(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = reduced::Distribution;

   // create the component
   python::class_<Component> component(
      module,
      "Distribution",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<tsl::ThermalNeutronScatteringLaw> &,
            const std::optional<mean::Uncorrelated> &,
            const std::optional<mean::Unspecified> &,
            const std::optional<mean::Branching3d> &
         >(),
         python::arg("thermal_neutron_scattering_law") = std::nullopt,
         python::arg("uncorrelated") = std::nullopt,
         python::arg("unspecified") = std::nullopt,
         python::arg("branching3d") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law",
         [](const Component &self) { return self.thermalNeutronScatteringLaw(); },
         Component::documentation("thermal_neutron_scattering_law").data()
      )
      .def_property_readonly(
         "uncorrelated",
         [](const Component &self) { return self.uncorrelated(); },
         Component::documentation("uncorrelated").data()
      )
      .def_property_readonly(
         "unspecified",
         [](const Component &self) { return self.unspecified(); },
         Component::documentation("unspecified").data()
      )
      .def_property_readonly(
         "branching3d",
         [](const Component &self) { return self.branching3d(); },
         Component::documentation("branching3d").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_reduced
} // namespace python_v2_0
