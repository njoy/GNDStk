
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "alpha/v2.0/mean/ResonanceReaction.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_mean {

// ResonanceReaction wrapper
void wrapResonanceReaction(python::module &module)
{
   using namespace alpha;
   using namespace alpha::v2_0;

   // type aliases
   using Component = mean::ResonanceReaction;

   // create the component
   python::class_<Component> component(
      module,
      "ResonanceReaction",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::optional<std::string> &,
            const std::optional<bool> &,
            const common::Link &,
            const std::optional<mean::HardSphereRadius> &,
            const std::optional<common::Q> &,
            const std::optional<mean::ScatteringRadius> &
         >(),
         python::arg("label"),
         python::arg("ejectile") = std::nullopt,
         python::arg("eliminated") = std::nullopt,
         python::arg("link"),
         python::arg("hard_sphere_radius") = std::nullopt,
         python::arg("q") = std::nullopt,
         python::arg("scattering_radius") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self) { return self.label(); },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "ejectile",
         [](const Component &self) { return self.ejectile(); },
         Component::documentation("ejectile").data()
      )
      .def_property_readonly(
         "eliminated",
         [](const Component &self) { return self.eliminated(); },
         Component::documentation("eliminated").data()
      )
      .def_property_readonly(
         "link",
         [](const Component &self) { return self.link(); },
         Component::documentation("link").data()
      )
      .def_property_readonly(
         "hard_sphere_radius",
         [](const Component &self) { return self.hardSphereRadius(); },
         Component::documentation("hard_sphere_radius").data()
      )
      .def_property_readonly(
         "q",
         [](const Component &self) { return self.Q(); },
         Component::documentation("q").data()
      )
      .def_property_readonly(
         "scattering_radius",
         [](const Component &self) { return self.scatteringRadius(); },
         Component::documentation("scattering_radius").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_mean
} // namespace python_v2_0
