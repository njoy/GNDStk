
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_ELAPSEDTIME
#define ALPHA_V2_0_GENERAL_ELAPSEDTIME

#include "alpha/v2.0/general/Time.hpp"
#include "alpha/v2.0/general/Yields.hpp"
#include "alpha/v2.0/general/IncidentEnergies.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class ElapsedTime
// -----------------------------------------------------------------------------

class ElapsedTime :
   public Component<general::ElapsedTime>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "ElapsedTime"; }
   static auto FIELD() { return "elapsedTime"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<general::Time>
            ("time") |
         --Child<std::optional<general::Yields>>
            ("yields") |
         --Child<std::optional<general::IncidentEnergies>>
            ("incidentEnergies")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};

   // children
   Field<general::Time>
      time{this};
   Field<std::optional<general::Yields>>
      yields{this};
   Field<std::optional<general::IncidentEnergies>>
      incidentEnergies{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->time, \
      this->yields, \
      this->incidentEnergies \
   )

   // default
   ElapsedTime() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ElapsedTime(
      const wrapper<std::string>
         &label,
      const wrapper<general::Time>
         &time = {},
      const wrapper<std::optional<general::Yields>>
         &yields = {},
      const wrapper<std::optional<general::IncidentEnergies>>
         &incidentEnergies = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      time(this,time),
      yields(this,yields),
      incidentEnergies(this,incidentEnergies)
   {
      Component::finish();
   }

   // from node
   explicit ElapsedTime(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ElapsedTime(const ElapsedTime &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      time(this,other.time),
      yields(this,other.yields),
      incidentEnergies(this,other.incidentEnergies)
   {
      Component::finish(other);
   }

   // move
   ElapsedTime(ElapsedTime &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      time(this,std::move(other.time)),
      yields(this,std::move(other.yields)),
      incidentEnergies(this,std::move(other.incidentEnergies))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ElapsedTime &operator=(const ElapsedTime &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         time = other.time;
         yields = other.yields;
         incidentEnergies = other.incidentEnergies;
      }
      return *this;
   }

   // move
   ElapsedTime &operator=(ElapsedTime &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         time = std::move(other.time);
         yields = std::move(other.yields);
         incidentEnergies = std::move(other.incidentEnergies);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/ElapsedTime/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ElapsedTime

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
