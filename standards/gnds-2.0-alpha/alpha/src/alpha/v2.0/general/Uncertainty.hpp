
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_UNCERTAINTY
#define ALPHA_V2_0_GENERAL_UNCERTAINTY

#include "alpha/v2.0/general/Covariance.hpp"
#include "alpha/v2.0/general/Standard.hpp"
#include "alpha/v2.0/general/ListOfCovariances.hpp"
#include "alpha/v2.0/reduced/Polynomial1d.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Uncertainty
// -----------------------------------------------------------------------------

class Uncertainty :
   public Component<general::Uncertainty>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Uncertainty"; }
   static auto FIELD() { return "uncertainty"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<general::Covariance>>
            ("covariance") |
         --Child<std::optional<general::Standard>>
            ("standard") |
         --Child<std::optional<general::ListOfCovariances>>
            ("listOfCovariances") |
         --Child<std::optional<reduced::Polynomial1d>>
            ("polynomial1d")
      ;
   }

public:
   using component_t = Component;
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<general::Covariance>>
      covariance{this};
   Field<std::optional<general::Standard>>
      standard{this};
   Field<std::optional<general::ListOfCovariances>>
      listOfCovariances{this};
   Field<std::optional<reduced::Polynomial1d>>
      polynomial1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->covariance, \
      this->standard, \
      this->listOfCovariances, \
      this->polynomial1d \
   )

   // default
   Uncertainty() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Uncertainty(
      const wrapper<std::optional<general::Covariance>>
         &covariance,
      const wrapper<std::optional<general::Standard>>
         &standard = {},
      const wrapper<std::optional<general::ListOfCovariances>>
         &listOfCovariances = {},
      const wrapper<std::optional<reduced::Polynomial1d>>
         &polynomial1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      covariance(this,covariance),
      standard(this,standard),
      listOfCovariances(this,listOfCovariances),
      polynomial1d(this,polynomial1d)
   {
      Component::finish();
   }

   // from node
   explicit Uncertainty(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Uncertainty(const Uncertainty &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      covariance(this,other.covariance),
      standard(this,other.standard),
      listOfCovariances(this,other.listOfCovariances),
      polynomial1d(this,other.polynomial1d)
   {
      Component::finish(other);
   }

   // move
   Uncertainty(Uncertainty &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      covariance(this,std::move(other.covariance)),
      standard(this,std::move(other.standard)),
      listOfCovariances(this,std::move(other.listOfCovariances)),
      polynomial1d(this,std::move(other.polynomial1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Uncertainty &operator=(const Uncertainty &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         covariance = other.covariance;
         standard = other.standard;
         listOfCovariances = other.listOfCovariances;
         polynomial1d = other.polynomial1d;
      }
      return *this;
   }

   // move
   Uncertainty &operator=(Uncertainty &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         covariance = std::move(other.covariance);
         standard = std::move(other.standard);
         listOfCovariances = std::move(other.listOfCovariances);
         polynomial1d = std::move(other.polynomial1d);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/Uncertainty/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Uncertainty

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
