
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_UNCORRELATED
#define ALPHA_V2_0_GENERAL_UNCORRELATED

#include "alpha/v2.0/general/Angular.hpp"
#include "alpha/v2.0/general/Energy.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Uncorrelated
// -----------------------------------------------------------------------------

class Uncorrelated :
   public Component<general::Uncorrelated>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Uncorrelated"; }
   static auto FIELD() { return "uncorrelated"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("productFrame") |

         // children
         --Child<general::Angular>
            ("angular") |
         --Child<general::Energy>
            ("energy")
      ;
   }

public:
   using component_t = Component;
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      label{this};
   Field<std::string>
      productFrame{this};

   // children
   Field<general::Angular>
      angular{this};
   Field<general::Energy>
      energy{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->productFrame, \
      this->angular, \
      this->energy \
   )

   // default
   Uncorrelated() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Uncorrelated(
      const wrapper<std::string>
         &label,
      const wrapper<std::string>
         &productFrame = {},
      const wrapper<general::Angular>
         &angular = {},
      const wrapper<general::Energy>
         &energy = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      productFrame(this,productFrame),
      angular(this,angular),
      energy(this,energy)
   {
      Component::finish();
   }

   // from node
   explicit Uncorrelated(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Uncorrelated(const Uncorrelated &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      productFrame(this,other.productFrame),
      angular(this,other.angular),
      energy(this,other.energy)
   {
      Component::finish(other);
   }

   // move
   Uncorrelated(Uncorrelated &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      productFrame(this,std::move(other.productFrame)),
      angular(this,std::move(other.angular)),
      energy(this,std::move(other.energy))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Uncorrelated &operator=(const Uncorrelated &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         productFrame = other.productFrame;
         angular = other.angular;
         energy = other.energy;
      }
      return *this;
   }

   // move
   Uncorrelated &operator=(Uncorrelated &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         productFrame = std::move(other.productFrame);
         angular = std::move(other.angular);
         energy = std::move(other.energy);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/Uncorrelated/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Uncorrelated

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
