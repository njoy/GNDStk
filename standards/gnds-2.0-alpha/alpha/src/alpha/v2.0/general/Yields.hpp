
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_YIELDS
#define ALPHA_V2_0_GENERAL_YIELDS

#include "alpha/v2.0/reduced/Nuclides.hpp"
#include "alpha/v2.0/general/Values.hpp"
#include "alpha/v2.0/general/Uncertainty.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Yields
// -----------------------------------------------------------------------------

class Yields :
   public Component<general::Yields>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Yields"; }
   static auto FIELD() { return "yields"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<reduced::Nuclides>
            ("nuclides") |
         --Child<general::Values>
            ("values") |
         --Child<general::Uncertainty>
            ("uncertainty")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "nuclides",
         "values",
         "uncertainty"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "nuclides",
         "values",
         "uncertainty"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<reduced::Nuclides>
      nuclides{this};
   Field<general::Values>
      values{this};
   Field<general::Uncertainty>
      uncertainty{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->nuclides, \
      this->values, \
      this->uncertainty \
   )

   // default
   Yields() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Yields(
      const wrapper<reduced::Nuclides>
         &nuclides,
      const wrapper<general::Values>
         &values = {},
      const wrapper<general::Uncertainty>
         &uncertainty = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      nuclides(this,nuclides),
      values(this,values),
      uncertainty(this,uncertainty)
   {
      Component::finish();
   }

   // from node
   explicit Yields(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Yields(const Yields &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      nuclides(this,other.nuclides),
      values(this,other.values),
      uncertainty(this,other.uncertainty)
   {
      Component::finish(other);
   }

   // move
   Yields(Yields &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      nuclides(this,std::move(other.nuclides)),
      values(this,std::move(other.values)),
      uncertainty(this,std::move(other.uncertainty))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Yields &operator=(const Yields &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         nuclides = other.nuclides;
         values = other.values;
         uncertainty = other.uncertainty;
      }
      return *this;
   }

   // move
   Yields &operator=(Yields &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         nuclides = std::move(other.nuclides);
         values = std::move(other.values);
         uncertainty = std::move(other.uncertainty);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/Yields/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Yields

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
