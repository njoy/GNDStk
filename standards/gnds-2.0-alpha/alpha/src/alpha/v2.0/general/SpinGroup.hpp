
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_SPINGROUP
#define ALPHA_V2_0_GENERAL_SPINGROUP

#include "alpha/v2.0/general/Channels.hpp"
#include "alpha/v2.0/general/ResonanceParameters.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class SpinGroup
// -----------------------------------------------------------------------------

class SpinGroup :
   public Component<general::SpinGroup>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "SpinGroup"; }
   static auto FIELD() { return "spinGroup"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         int{}
            / Meta<>("spin") |
         int{}
            / Meta<>("parity") |

         // children
         --Child<general::Channels>
            ("channels") |
         --Child<general::ResonanceParameters>
            ("resonanceParameters")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      label{this};
   Field<int>
      spin{this};
   Field<int>
      parity{this};

   // children
   Field<general::Channels>
      channels{this};
   Field<general::ResonanceParameters>
      resonanceParameters{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->spin, \
      this->parity, \
      this->channels, \
      this->resonanceParameters)

   // default
   SpinGroup() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit SpinGroup(
      const wrapper<std::string>
         &label,
      const wrapper<int>
         &spin = {},
      const wrapper<int>
         &parity = {},
      const wrapper<general::Channels>
         &channels = {},
      const wrapper<general::ResonanceParameters>
         &resonanceParameters = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      spin(this,spin),
      parity(this,parity),
      channels(this,channels),
      resonanceParameters(this,resonanceParameters)
   {
      Component::finish();
   }

   // from node
   explicit SpinGroup(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   SpinGroup(const SpinGroup &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      spin(this,other.spin),
      parity(this,other.parity),
      channels(this,other.channels),
      resonanceParameters(this,other.resonanceParameters)
   {
      Component::finish(other);
   }

   // move
   SpinGroup(SpinGroup &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      spin(this,std::move(other.spin)),
      parity(this,std::move(other.parity)),
      channels(this,std::move(other.channels)),
      resonanceParameters(this,std::move(other.resonanceParameters))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   SpinGroup &operator=(const SpinGroup &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         spin = other.spin;
         parity = other.parity;
         channels = other.channels;
         resonanceParameters = other.resonanceParameters;
      }
      return *this;
   }

   // move
   SpinGroup &operator=(SpinGroup &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         spin = std::move(other.spin);
         parity = std::move(other.parity);
         channels = std::move(other.channels);
         resonanceParameters = std::move(other.resonanceParameters);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/SpinGroup/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class SpinGroup

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
