
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_COLUMN
#define ALPHA_V2_0_GENERAL_COLUMN

#include "alpha/v2.0/key.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Column
// -----------------------------------------------------------------------------

class Column :
   public Component<general::Column>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Column"; }
   static auto FIELD() { return "column"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         int{}
            / Meta<>("index") |
         std::string{}
            / Meta<>("name") |
         std::string{}
            / Meta<>("unit")
      ;
   }

public:
   using component_t = Component;
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<int>
      index{this};
   Field<std::string>
      name{this};
   Field<std::string>
      unit{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->index, \
      this->name, \
      this->unit \
   )

   // default
   Column() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Column(
      const wrapper<int>
         &index,
      const wrapper<std::string>
         &name = {},
      const wrapper<std::string>
         &unit = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      index(this,index),
      name(this,name),
      unit(this,unit)
   {
      Component::finish();
   }

   // from node
   explicit Column(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Column(const Column &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      index(this,other.index),
      name(this,other.name),
      unit(this,other.unit)
   {
      Component::finish(other);
   }

   // move
   Column(Column &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      index(this,std::move(other.index)),
      name(this,std::move(other.name)),
      unit(this,std::move(other.unit))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Column &operator=(const Column &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         index = other.index;
         name = other.name;
         unit = other.unit;
      }
      return *this;
   }

   // move
   Column &operator=(Column &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         index = std::move(other.index);
         name = std::move(other.name);
         unit = std::move(other.unit);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/Column/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Column

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
