
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_GENERAL_RESONANCEREACTION
#define ALPHA_V2_0_GENERAL_RESONANCEREACTION

#include "alpha/v2.0/general/Link.hpp"
#include "alpha/v2.0/general/HardSphereRadius.hpp"
#include "alpha/v2.0/general/Q.hpp"
#include "alpha/v2.0/general/ScatteringRadius.hpp"

namespace alpha {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class ResonanceReaction
// -----------------------------------------------------------------------------

class ResonanceReaction :
   public Component<general::ResonanceReaction>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "ResonanceReaction"; }
   static auto FIELD() { return "resonanceReaction"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::optional<std::string>{}
            / Meta<>("ejectile") |
         std::optional<bool>{}
            / Meta<>("eliminated") |

         // children
         --Child<general::Link>
            ("link") |
         --Child<std::optional<general::HardSphereRadius>>
            ("hardSphereRadius") |
         --Child<std::optional<general::Q>>
            ("Q") |
         --Child<std::optional<general::ScatteringRadius>>
            ("scatteringRadius")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "ejectile",
         "eliminated",
         "link",
         "hardSphereRadius",
         "Q",
         "scatteringRadius"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      label{this};
   Field<std::optional<std::string>>
      ejectile{this};
   Field<std::optional<bool>>
      eliminated{this};

   // children
   Field<general::Link>
      link{this};
   Field<std::optional<general::HardSphereRadius>>
      hardSphereRadius{this};
   Field<std::optional<general::Q>>
      Q{this};
   Field<std::optional<general::ScatteringRadius>>
      scatteringRadius{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->ejectile, \
      this->eliminated, \
      this->link, \
      this->hardSphereRadius, \
      this->Q, \
      this->scatteringRadius \
   )

   // default
   ResonanceReaction() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ResonanceReaction(
      const wrapper<std::string>
         &label,
      const wrapper<std::optional<std::string>>
         &ejectile = {},
      const wrapper<std::optional<bool>>
         &eliminated = {},
      const wrapper<general::Link>
         &link = {},
      const wrapper<std::optional<general::HardSphereRadius>>
         &hardSphereRadius = {},
      const wrapper<std::optional<general::Q>>
         &Q = {},
      const wrapper<std::optional<general::ScatteringRadius>>
         &scatteringRadius = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      ejectile(this,ejectile),
      eliminated(this,eliminated),
      link(this,link),
      hardSphereRadius(this,hardSphereRadius),
      Q(this,Q),
      scatteringRadius(this,scatteringRadius)
   {
      Component::finish();
   }

   // from node
   explicit ResonanceReaction(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ResonanceReaction(const ResonanceReaction &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      ejectile(this,other.ejectile),
      eliminated(this,other.eliminated),
      link(this,other.link),
      hardSphereRadius(this,other.hardSphereRadius),
      Q(this,other.Q),
      scatteringRadius(this,other.scatteringRadius)
   {
      Component::finish(other);
   }

   // move
   ResonanceReaction(ResonanceReaction &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      ejectile(this,std::move(other.ejectile)),
      eliminated(this,std::move(other.eliminated)),
      link(this,std::move(other.link)),
      hardSphereRadius(this,std::move(other.hardSphereRadius)),
      Q(this,std::move(other.Q)),
      scatteringRadius(this,std::move(other.scatteringRadius))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ResonanceReaction &operator=(const ResonanceReaction &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         ejectile = other.ejectile;
         eliminated = other.eliminated;
         link = other.link;
         hardSphereRadius = other.hardSphereRadius;
         Q = other.Q;
         scatteringRadius = other.scatteringRadius;
      }
      return *this;
   }

   // move
   ResonanceReaction &operator=(ResonanceReaction &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         ejectile = std::move(other.ejectile);
         eliminated = std::move(other.eliminated);
         link = std::move(other.link);
         hardSphereRadius = std::move(other.hardSphereRadius);
         Q = std::move(other.Q);
         scatteringRadius = std::move(other.scatteringRadius);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/general/ResonanceReaction/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ResonanceReaction

} // namespace general
} // namespace v2_0
} // namespace alpha

#endif
