
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_ENERGY
#define ALPHA_V2_0_COMMON_ENERGY

#include "alpha/v2.0/common/Double.hpp"
#include "alpha/v2.0/common/Uncertainty.hpp"
#include "alpha/v2.0/mean/NBodyPhaseSpace.hpp"
#include "alpha/v2.0/mean/PrimaryGamma.hpp"
#include "alpha/v2.0/mean/DiscreteGamma.hpp"
#include "alpha/v2.0/mean/XYs2d.hpp"
#include "alpha/v2.0/mean/GeneralEvaporation.hpp"
#include "alpha/v2.0/mean/Evaporation.hpp"
#include "alpha/v2.0/mean/WeightedFunctionals.hpp"
#include "alpha/v2.0/mean/SimpleMaxwellianFission.hpp"
#include "alpha/v2.0/gfiles/MadlandNix.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class Energy
// -----------------------------------------------------------------------------

class Energy :
   public Component<common::Energy>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "Energy"; }
   static auto FIELD() { return "energy"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<double>{}
            / Meta<>("value") |
         std::optional<std::string>{}
            / Meta<>("unit") |

         // children
         --Child<std::optional<common::Double>>("double") |
         --Child<std::optional<common::Uncertainty>>("uncertainty") |
         --Child<std::optional<mean::NBodyPhaseSpace>>("NBodyPhaseSpace") |
         --Child<std::optional<mean::PrimaryGamma>>("primaryGamma") |
         --Child<std::optional<mean::DiscreteGamma>>("discreteGamma") |
         --Child<std::optional<mean::XYs2d>>("XYs2d") |
         --Child<std::optional<mean::GeneralEvaporation>>("generalEvaporation") |
         --Child<std::optional<mean::Evaporation>>("evaporation") |
         --Child<std::optional<mean::WeightedFunctionals>>("weightedFunctionals") |
         --Child<std::optional<mean::SimpleMaxwellianFission>>("simpleMaxwellianFission") |
         --Child<std::optional<gfiles::MadlandNix>>("MadlandNix")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<double>> value{this};
   Field<std::optional<std::string>> unit{this};

   // children
   Field<std::optional<common::Double>> Double{this};
   Field<std::optional<common::Uncertainty>> uncertainty{this};
   Field<std::optional<mean::NBodyPhaseSpace>> NBodyPhaseSpace{this};
   Field<std::optional<mean::PrimaryGamma>> primaryGamma{this};
   Field<std::optional<mean::DiscreteGamma>> discreteGamma{this};
   Field<std::optional<mean::XYs2d>> XYs2d{this};
   Field<std::optional<mean::GeneralEvaporation>> generalEvaporation{this};
   Field<std::optional<mean::Evaporation>> evaporation{this};
   Field<std::optional<mean::WeightedFunctionals>> weightedFunctionals{this};
   Field<std::optional<mean::SimpleMaxwellianFission>> simpleMaxwellianFission{this};
   Field<std::optional<gfiles::MadlandNix>> MadlandNix{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->value, \
      this->unit, \
      this->Double, \
      this->uncertainty, \
      this->NBodyPhaseSpace, \
      this->primaryGamma, \
      this->discreteGamma, \
      this->XYs2d, \
      this->generalEvaporation, \
      this->evaporation, \
      this->weightedFunctionals, \
      this->simpleMaxwellianFission, \
      this->MadlandNix)

   // default
   Energy() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Energy(
      const wrapper<std::optional<double>> &value,
      const wrapper<std::optional<std::string>> &unit = {},
      const wrapper<std::optional<common::Double>> &Double = {},
      const wrapper<std::optional<common::Uncertainty>> &uncertainty = {},
      const wrapper<std::optional<mean::NBodyPhaseSpace>> &NBodyPhaseSpace = {},
      const wrapper<std::optional<mean::PrimaryGamma>> &primaryGamma = {},
      const wrapper<std::optional<mean::DiscreteGamma>> &discreteGamma = {},
      const wrapper<std::optional<mean::XYs2d>> &XYs2d = {},
      const wrapper<std::optional<mean::GeneralEvaporation>> &generalEvaporation = {},
      const wrapper<std::optional<mean::Evaporation>> &evaporation = {},
      const wrapper<std::optional<mean::WeightedFunctionals>> &weightedFunctionals = {},
      const wrapper<std::optional<mean::SimpleMaxwellianFission>> &simpleMaxwellianFission = {},
      const wrapper<std::optional<gfiles::MadlandNix>> &MadlandNix = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      value(this,value),
      unit(this,unit),
      Double(this,Double),
      uncertainty(this,uncertainty),
      NBodyPhaseSpace(this,NBodyPhaseSpace),
      primaryGamma(this,primaryGamma),
      discreteGamma(this,discreteGamma),
      XYs2d(this,XYs2d),
      generalEvaporation(this,generalEvaporation),
      evaporation(this,evaporation),
      weightedFunctionals(this,weightedFunctionals),
      simpleMaxwellianFission(this,simpleMaxwellianFission),
      MadlandNix(this,MadlandNix)
   {
      Component::finish();
   }

   // from node
   explicit Energy(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Energy(const Energy &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      value(this,other.value),
      unit(this,other.unit),
      Double(this,other.Double),
      uncertainty(this,other.uncertainty),
      NBodyPhaseSpace(this,other.NBodyPhaseSpace),
      primaryGamma(this,other.primaryGamma),
      discreteGamma(this,other.discreteGamma),
      XYs2d(this,other.XYs2d),
      generalEvaporation(this,other.generalEvaporation),
      evaporation(this,other.evaporation),
      weightedFunctionals(this,other.weightedFunctionals),
      simpleMaxwellianFission(this,other.simpleMaxwellianFission),
      MadlandNix(this,other.MadlandNix)
   {
      Component::finish(other);
   }

   // move
   Energy(Energy &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      value(this,std::move(other.value)),
      unit(this,std::move(other.unit)),
      Double(this,std::move(other.Double)),
      uncertainty(this,std::move(other.uncertainty)),
      NBodyPhaseSpace(this,std::move(other.NBodyPhaseSpace)),
      primaryGamma(this,std::move(other.primaryGamma)),
      discreteGamma(this,std::move(other.discreteGamma)),
      XYs2d(this,std::move(other.XYs2d)),
      generalEvaporation(this,std::move(other.generalEvaporation)),
      evaporation(this,std::move(other.evaporation)),
      weightedFunctionals(this,std::move(other.weightedFunctionals)),
      simpleMaxwellianFission(this,std::move(other.simpleMaxwellianFission)),
      MadlandNix(this,std::move(other.MadlandNix))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Energy &operator=(const Energy &) = default;
   Energy &operator=(Energy &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/Energy/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Energy

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
