
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_GRIDDED3D
#define ALPHA_V2_0_COMMON_GRIDDED3D

#include "alpha/v2.0/common/Axes.hpp"
#include "alpha/v2.0/g3d/Array.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class Gridded3d
// -----------------------------------------------------------------------------

class Gridded3d :
   public Component<common::Gridded3d>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "Gridded3d"; }
   static auto FIELD() { return "gridded3d"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<common::Axes>("axes") |
         --Child<g3d::Array>("array")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<common::Axes> axes{this};
   Field<g3d::Array> array{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->axes, \
      this->array)

   // default
   Gridded3d() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Gridded3d(
      const wrapper<common::Axes> &axes,
      const wrapper<g3d::Array> &array = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      axes(this,axes),
      array(this,array)
   {
      Component::finish();
   }

   // from node
   explicit Gridded3d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Gridded3d(const Gridded3d &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      axes(this,other.axes),
      array(this,other.array)
   {
      Component::finish(other);
   }

   // move
   Gridded3d(Gridded3d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      axes(this,std::move(other.axes)),
      array(this,std::move(other.array))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Gridded3d &operator=(const Gridded3d &) = default;
   Gridded3d &operator=(Gridded3d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/Gridded3d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Gridded3d

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
