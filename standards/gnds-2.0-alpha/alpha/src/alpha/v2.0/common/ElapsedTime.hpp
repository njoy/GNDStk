
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_ELAPSEDTIME
#define ALPHA_V2_0_COMMON_ELAPSEDTIME

#include "alpha/v2.0/common/Time.hpp"
#include "alpha/v2.0/common/Yields.hpp"
#include "alpha/v2.0/nfy/IncidentEnergies.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class ElapsedTime
// -----------------------------------------------------------------------------

class ElapsedTime :
   public Component<common::ElapsedTime>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "ElapsedTime"; }
   static auto FIELD() { return "elapsedTime"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<common::Time>("time") |
         --Child<std::optional<common::Yields>>("yields") |
         --Child<std::optional<nfy::IncidentEnergies>>("incidentEnergies")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};

   // children
   Field<common::Time> time{this};
   Field<std::optional<common::Yields>> yields{this};
   Field<std::optional<nfy::IncidentEnergies>> incidentEnergies{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->time, \
      this->yields, \
      this->incidentEnergies)

   // default
   ElapsedTime() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ElapsedTime(
      const wrapper<std::string> &label,
      const wrapper<common::Time> &time = {},
      const wrapper<std::optional<common::Yields>> &yields = {},
      const wrapper<std::optional<nfy::IncidentEnergies>> &incidentEnergies = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      time(this,time),
      yields(this,yields),
      incidentEnergies(this,incidentEnergies)
   {
      Component::finish();
   }

   // from node
   explicit ElapsedTime(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ElapsedTime(const ElapsedTime &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      time(this,other.time),
      yields(this,other.yields),
      incidentEnergies(this,other.incidentEnergies)
   {
      Component::finish(other);
   }

   // move
   ElapsedTime(ElapsedTime &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      time(this,std::move(other.time)),
      yields(this,std::move(other.yields)),
      incidentEnergies(this,std::move(other.incidentEnergies))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ElapsedTime &operator=(const ElapsedTime &) = default;
   ElapsedTime &operator=(ElapsedTime &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/ElapsedTime/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ElapsedTime

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
