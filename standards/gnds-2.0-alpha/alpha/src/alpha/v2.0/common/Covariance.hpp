
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_COVARIANCE
#define ALPHA_V2_0_COMMON_COVARIANCE

#include "alpha/v2.0/common/Array.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class Covariance
// -----------------------------------------------------------------------------

class Covariance :
   public Component<common::Covariance>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "Covariance"; }
   static auto FIELD() { return "covariance"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<std::string>{}
            / Meta<>("label") |
         std::optional<std::string>{}
            / Meta<>("href") |

         // children
         --Child<std::optional<common::Array>>("array")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<std::string>> label{this};
   Field<std::optional<std::string>> href{this};

   // children
   Field<std::optional<common::Array>> array{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->href, \
      this->array)

   // default
   Covariance() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Covariance(
      const wrapper<std::optional<std::string>> &label,
      const wrapper<std::optional<std::string>> &href = {},
      const wrapper<std::optional<common::Array>> &array = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      href(this,href),
      array(this,array)
   {
      Component::finish();
   }

   // from node
   explicit Covariance(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Covariance(const Covariance &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      href(this,other.href),
      array(this,other.array)
   {
      Component::finish(other);
   }

   // move
   Covariance(Covariance &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      href(this,std::move(other.href)),
      array(this,std::move(other.array))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Covariance &operator=(const Covariance &) = default;
   Covariance &operator=(Covariance &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/Covariance/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Covariance

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
