
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_FUNCTION1DS
#define ALPHA_V2_0_COMMON_FUNCTION1DS

#include "alpha/v2.0/mean/Legendre.hpp"
#include "alpha/v2.0/common/XYs1d.hpp"
#include "alpha/v2.0/mean/Regions1d.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class Function1ds
// -----------------------------------------------------------------------------

class Function1ds :
   public Component<common::Function1ds>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "Function1ds"; }
   static auto FIELD() { return "function1ds"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         ++Child<mean::Legendre>("Legendre") |
         ++Child<std::optional<common::XYs1d>>("XYs1d") |
         ++Child<std::optional<mean::Regions1d>>("regions1d")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::vector<mean::Legendre>> Legendre{this};
   Field<std::optional<std::vector<common::XYs1d>>> XYs1d{this};
   Field<std::optional<std::vector<mean::Regions1d>>> regions1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->Legendre, \
      this->XYs1d, \
      this->regions1d)

   // default
   Function1ds() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Function1ds(
      const wrapper<std::vector<mean::Legendre>> &Legendre,
      const wrapper<std::optional<std::vector<common::XYs1d>>> &XYs1d = {},
      const wrapper<std::optional<std::vector<mean::Regions1d>>> &regions1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      Legendre(this,Legendre),
      XYs1d(this,XYs1d),
      regions1d(this,regions1d)
   {
      Component::finish();
   }

   // from node
   explicit Function1ds(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Function1ds(const Function1ds &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      Legendre(this,other.Legendre),
      XYs1d(this,other.XYs1d),
      regions1d(this,other.regions1d)
   {
      Component::finish(other);
   }

   // move
   Function1ds(Function1ds &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      Legendre(this,std::move(other.Legendre)),
      XYs1d(this,std::move(other.XYs1d)),
      regions1d(this,std::move(other.regions1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Function1ds &operator=(const Function1ds &) = default;
   Function1ds &operator=(Function1ds &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/Function1ds/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Function1ds

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
