
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_DECAYMODE
#define ALPHA_V2_0_COMMON_DECAYMODE

#include "alpha/v2.0/common/Probability.hpp"
#include "alpha/v2.0/common/DecayPath.hpp"
#include "alpha/v2.0/mean/PhotonEmissionProbabilities.hpp"
#include "alpha/v2.0/common/Q.hpp"
#include "alpha/v2.0/sfy/Spectra.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class DecayMode
// -----------------------------------------------------------------------------

class DecayMode :
   public Component<common::DecayMode>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "DecayMode"; }
   static auto FIELD() { return "decayMode"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<std::string>{}
            / Meta<>("label") |
         std::optional<std::string>{}
            / Meta<>("mode") |

         // children
         --Child<common::Probability>("probability") |
         --Child<common::DecayPath>("decayPath") |
         --Child<std::optional<mean::PhotonEmissionProbabilities>>("photonEmissionProbabilities") |
         --Child<std::optional<common::Q>>("Q") |
         --Child<std::optional<sfy::Spectra>>("spectra")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<std::string>> label{this};
   Field<std::optional<std::string>> mode{this};

   // children
   Field<common::Probability> probability{this};
   Field<common::DecayPath> decayPath{this};
   Field<std::optional<mean::PhotonEmissionProbabilities>> photonEmissionProbabilities{this};
   Field<std::optional<common::Q>> Q{this};
   Field<std::optional<sfy::Spectra>> spectra{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->mode, \
      this->probability, \
      this->decayPath, \
      this->photonEmissionProbabilities, \
      this->Q, \
      this->spectra)

   // default
   DecayMode() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit DecayMode(
      const wrapper<std::optional<std::string>> &label,
      const wrapper<std::optional<std::string>> &mode = {},
      const wrapper<common::Probability> &probability = {},
      const wrapper<common::DecayPath> &decayPath = {},
      const wrapper<std::optional<mean::PhotonEmissionProbabilities>> &photonEmissionProbabilities = {},
      const wrapper<std::optional<common::Q>> &Q = {},
      const wrapper<std::optional<sfy::Spectra>> &spectra = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      mode(this,mode),
      probability(this,probability),
      decayPath(this,decayPath),
      photonEmissionProbabilities(this,photonEmissionProbabilities),
      Q(this,Q),
      spectra(this,spectra)
   {
      Component::finish();
   }

   // from node
   explicit DecayMode(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   DecayMode(const DecayMode &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      mode(this,other.mode),
      probability(this,other.probability),
      decayPath(this,other.decayPath),
      photonEmissionProbabilities(this,other.photonEmissionProbabilities),
      Q(this,other.Q),
      spectra(this,other.spectra)
   {
      Component::finish(other);
   }

   // move
   DecayMode(DecayMode &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      mode(this,std::move(other.mode)),
      probability(this,std::move(other.probability)),
      decayPath(this,std::move(other.decayPath)),
      photonEmissionProbabilities(this,std::move(other.photonEmissionProbabilities)),
      Q(this,std::move(other.Q)),
      spectra(this,std::move(other.spectra))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   DecayMode &operator=(const DecayMode &) = default;
   DecayMode &operator=(DecayMode &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/DecayMode/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class DecayMode

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
