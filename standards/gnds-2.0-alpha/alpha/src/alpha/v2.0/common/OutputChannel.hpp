
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_COMMON_OUTPUTCHANNEL
#define ALPHA_V2_0_COMMON_OUTPUTCHANNEL

#include "alpha/v2.0/common/Q.hpp"
#include "alpha/v2.0/common/Products.hpp"
#include "alpha/v2.0/common/FissionFragmentData.hpp"

namespace alpha {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class OutputChannel
// -----------------------------------------------------------------------------

class OutputChannel :
   public Component<common::OutputChannel>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "OutputChannel"; }
   static auto FIELD() { return "outputChannel"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("genre") |
         std::optional<std::string>{}
            / Meta<>("process") |

         // children
         --Child<common::Q>("Q") |
         --Child<std::optional<common::Products>>("products") |
         --Child<std::optional<common::FissionFragmentData>>("fissionFragmentData")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> genre{this};
   Field<std::optional<std::string>> process{this};

   // children
   Field<common::Q> Q{this};
   Field<std::optional<common::Products>> products{this};
   Field<std::optional<common::FissionFragmentData>> fissionFragmentData{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->genre, \
      this->process, \
      this->Q, \
      this->products, \
      this->fissionFragmentData)

   // default
   OutputChannel() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit OutputChannel(
      const wrapper<std::string> &genre,
      const wrapper<std::optional<std::string>> &process = {},
      const wrapper<common::Q> &Q = {},
      const wrapper<std::optional<common::Products>> &products = {},
      const wrapper<std::optional<common::FissionFragmentData>> &fissionFragmentData = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      genre(this,genre),
      process(this,process),
      Q(this,Q),
      products(this,products),
      fissionFragmentData(this,fissionFragmentData)
   {
      Component::finish();
   }

   // from node
   explicit OutputChannel(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   OutputChannel(const OutputChannel &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      genre(this,other.genre),
      process(this,other.process),
      Q(this,other.Q),
      products(this,other.products),
      fissionFragmentData(this,other.fissionFragmentData)
   {
      Component::finish(other);
   }

   // move
   OutputChannel(OutputChannel &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      genre(this,std::move(other.genre)),
      process(this,std::move(other.process)),
      Q(this,std::move(other.Q)),
      products(this,std::move(other.products)),
      fissionFragmentData(this,std::move(other.fissionFragmentData))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   OutputChannel &operator=(const OutputChannel &) = default;
   OutputChannel &operator=(OutputChannel &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/common/OutputChannel/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class OutputChannel

} // namespace common
} // namespace v2_0
} // namespace alpha

#endif
