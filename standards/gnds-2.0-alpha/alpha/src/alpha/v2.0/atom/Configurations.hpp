
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_ATOM_CONFIGURATIONS
#define ALPHA_V2_0_ATOM_CONFIGURATIONS

#include "alpha/v2.0/atom/Configuration.hpp"

namespace alpha {
namespace v2_0 {
namespace atom {

// -----------------------------------------------------------------------------
// atom::
// class Configurations
// -----------------------------------------------------------------------------

class Configurations :
   public Component<atom::Configurations>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "atom"; }
   static auto CLASS() { return "Configurations"; }
   static auto FIELD() { return "configurations"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         ++Child<atom::Configuration>("configuration")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::vector<atom::Configuration>> configuration{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->configuration)

   // default
   Configurations() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Configurations(
      const wrapper<std::vector<atom::Configuration>> &configuration
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      configuration(this,configuration)
   {
      Component::finish();
   }

   // from node
   explicit Configurations(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Configurations(const Configurations &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      configuration(this,other.configuration)
   {
      Component::finish(other);
   }

   // move
   Configurations(Configurations &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      configuration(this,std::move(other.configuration))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Configurations &operator=(const Configurations &) = default;
   Configurations &operator=(Configurations &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/atom/Configurations/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Configurations

} // namespace atom
} // namespace v2_0
} // namespace alpha

#endif
