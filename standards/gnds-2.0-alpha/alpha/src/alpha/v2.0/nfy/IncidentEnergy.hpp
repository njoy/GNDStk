
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_NFY_INCIDENTENERGY
#define ALPHA_V2_0_NFY_INCIDENTENERGY

#include "alpha/v2.0/common/Energy.hpp"
#include "alpha/v2.0/common/Yields.hpp"

namespace alpha {
namespace v2_0 {
namespace nfy {

// -----------------------------------------------------------------------------
// nfy::
// class IncidentEnergy
// -----------------------------------------------------------------------------

class IncidentEnergy :
   public Component<nfy::IncidentEnergy>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "nfy"; }
   static auto CLASS() { return "IncidentEnergy"; }
   static auto FIELD() { return "incidentEnergy"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<common::Energy>("energy") |
         --Child<common::Yields>("yields")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};

   // children
   Field<common::Energy> energy{this};
   Field<common::Yields> yields{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->energy, \
      this->yields)

   // default
   IncidentEnergy() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit IncidentEnergy(
      const wrapper<std::string> &label,
      const wrapper<common::Energy> &energy = {},
      const wrapper<common::Yields> &yields = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      energy(this,energy),
      yields(this,yields)
   {
      Component::finish();
   }

   // from node
   explicit IncidentEnergy(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   IncidentEnergy(const IncidentEnergy &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      energy(this,other.energy),
      yields(this,other.yields)
   {
      Component::finish(other);
   }

   // move
   IncidentEnergy(IncidentEnergy &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      energy(this,std::move(other.energy)),
      yields(this,std::move(other.yields))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   IncidentEnergy &operator=(const IncidentEnergy &) = default;
   IncidentEnergy &operator=(IncidentEnergy &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/nfy/IncidentEnergy/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class IncidentEnergy

} // namespace nfy
} // namespace v2_0
} // namespace alpha

#endif
