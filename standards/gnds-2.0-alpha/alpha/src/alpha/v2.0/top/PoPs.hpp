
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_TOP_POPS
#define ALPHA_V2_0_TOP_POPS

#include "alpha/v2.0/general/Styles.hpp"
#include "alpha/v2.0/general/ChemicalElements.hpp"
#include "alpha/v2.0/general/Aliases.hpp"
#include "alpha/v2.0/general/Baryons.hpp"

namespace alpha {
namespace v2_0 {
namespace top {

// -----------------------------------------------------------------------------
// top::
// class PoPs
// -----------------------------------------------------------------------------

class PoPs :
   public Component<top::PoPs>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "top"; }
   static auto CLASS() { return "PoPs"; }
   static auto FIELD() { return "PoPs"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("name") |
         std::string{}
            / Meta<>("version") |
         std::string{}
            / Meta<>("format") |

         // children
         --Child<general::Styles>
            ("styles") |
         --Child<std::optional<general::ChemicalElements>>
            ("chemicalElements") |
         --Child<std::optional<general::Aliases>>
            ("aliases") |
         --Child<std::optional<general::Baryons>>
            ("baryons")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> name{this};
   Field<std::string> version{this};
   Field<std::string> format{this};

   // children
   Field<general::Styles>
      styles{this};
   Field<std::optional<general::ChemicalElements>>
      chemicalElements{this};
   Field<std::optional<general::Aliases>>
      aliases{this};
   Field<std::optional<general::Baryons>>
      baryons{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->name, \
      this->version, \
      this->format, \
      this->styles, \
      this->chemicalElements, \
      this->aliases, \
      this->baryons)

   // default
   PoPs() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit PoPs(
      const wrapper<std::string>
         &name,
      const wrapper<std::string>
         &version = {},
      const wrapper<std::string>
         &format = {},
      const wrapper<general::Styles>
         &styles = {},
      const wrapper<std::optional<general::ChemicalElements>>
         &chemicalElements = {},
      const wrapper<std::optional<general::Aliases>>
         &aliases = {},
      const wrapper<std::optional<general::Baryons>>
         &baryons = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      name(this,name),
      version(this,version),
      format(this,format),
      styles(this,styles),
      chemicalElements(this,chemicalElements),
      aliases(this,aliases),
      baryons(this,baryons)
   {
      Component::finish();
   }

   // from node
   explicit PoPs(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   PoPs(const PoPs &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      name(this,other.name),
      version(this,other.version),
      format(this,other.format),
      styles(this,other.styles),
      chemicalElements(this,other.chemicalElements),
      aliases(this,other.aliases),
      baryons(this,other.baryons)
   {
      Component::finish(other);
   }

   // move
   PoPs(PoPs &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      name(this,std::move(other.name)),
      version(this,std::move(other.version)),
      format(this,std::move(other.format)),
      styles(this,std::move(other.styles)),
      chemicalElements(this,std::move(other.chemicalElements)),
      aliases(this,std::move(other.aliases)),
      baryons(this,std::move(other.baryons))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   PoPs &operator=(const PoPs &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         name = other.name;
         version = other.version;
         format = other.format;
         styles = other.styles;
         chemicalElements = other.chemicalElements;
         aliases = other.aliases;
         baryons = other.baryons;
      }
      return *this;
   }

   // move
   PoPs &operator=(PoPs &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         name = std::move(other.name);
         version = std::move(other.version);
         format = std::move(other.format);
         styles = std::move(other.styles);
         chemicalElements = std::move(other.chemicalElements);
         aliases = std::move(other.aliases);
         baryons = std::move(other.baryons);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/top/PoPs/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class PoPs

} // namespace top
} // namespace v2_0
} // namespace alpha

#endif
