
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_TOP_FISSIONFRAGMENTDATA
#define ALPHA_V2_0_TOP_FISSIONFRAGMENTDATA

#include "alpha/v2.0/general/ProductYields.hpp"
#include "alpha/v2.0/general/DelayedNeutrons.hpp"
#include "alpha/v2.0/general/FissionEnergyReleases.hpp"

namespace alpha {
namespace v2_0 {
namespace top {

// -----------------------------------------------------------------------------
// top::
// class FissionFragmentData
// -----------------------------------------------------------------------------

class FissionFragmentData :
   public Component<top::FissionFragmentData>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "top"; }
   static auto CLASS() { return "FissionFragmentData"; }
   static auto FIELD() { return "fissionFragmentData"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<general::ProductYields>>
            ("productYields") |
         --Child<std::optional<general::DelayedNeutrons>>
            ("delayedNeutrons") |
         --Child<std::optional<general::FissionEnergyReleases>>
            ("fissionEnergyReleases")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<general::ProductYields>>
      productYields{this};
   Field<std::optional<general::DelayedNeutrons>>
      delayedNeutrons{this};
   Field<std::optional<general::FissionEnergyReleases>>
      fissionEnergyReleases{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->productYields, \
      this->delayedNeutrons, \
      this->fissionEnergyReleases)

   // default
   FissionFragmentData() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit FissionFragmentData(
      const wrapper<std::optional<general::ProductYields>>
         &productYields,
      const wrapper<std::optional<general::DelayedNeutrons>>
         &delayedNeutrons = {},
      const wrapper<std::optional<general::FissionEnergyReleases>>
         &fissionEnergyReleases = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      productYields(this,productYields),
      delayedNeutrons(this,delayedNeutrons),
      fissionEnergyReleases(this,fissionEnergyReleases)
   {
      Component::finish();
   }

   // from node
   explicit FissionFragmentData(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   FissionFragmentData(const FissionFragmentData &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      productYields(this,other.productYields),
      delayedNeutrons(this,other.delayedNeutrons),
      fissionEnergyReleases(this,other.fissionEnergyReleases)
   {
      Component::finish(other);
   }

   // move
   FissionFragmentData(FissionFragmentData &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      productYields(this,std::move(other.productYields)),
      delayedNeutrons(this,std::move(other.delayedNeutrons)),
      fissionEnergyReleases(this,std::move(other.fissionEnergyReleases))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   FissionFragmentData &operator=(const FissionFragmentData &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         productYields = other.productYields;
         delayedNeutrons = other.delayedNeutrons;
         fissionEnergyReleases = other.fissionEnergyReleases;
      }
      return *this;
   }

   // move
   FissionFragmentData &operator=(FissionFragmentData &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         productYields = std::move(other.productYields);
         delayedNeutrons = std::move(other.delayedNeutrons);
         fissionEnergyReleases = std::move(other.fissionEnergyReleases);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/top/FissionFragmentData/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class FissionFragmentData

} // namespace top
} // namespace v2_0
} // namespace alpha

#endif
