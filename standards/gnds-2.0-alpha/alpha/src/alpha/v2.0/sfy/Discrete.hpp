
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_SFY_DISCRETE
#define ALPHA_V2_0_SFY_DISCRETE

#include "alpha/v2.0/sfy/Intensity.hpp"
#include "alpha/v2.0/common/Energy.hpp"
#include "alpha/v2.0/sfy/InternalConversionCoefficients.hpp"
#include "alpha/v2.0/sfy/PositronEmissionIntensity.hpp"

namespace alpha {
namespace v2_0 {
namespace sfy {

// -----------------------------------------------------------------------------
// sfy::
// class Discrete
// -----------------------------------------------------------------------------

class Discrete :
   public Component<sfy::Discrete>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "sfy"; }
   static auto CLASS() { return "Discrete"; }
   static auto FIELD() { return "discrete"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<std::string>{}
            / Meta<>("type") |

         // children
         --Child<sfy::Intensity>("intensity") |
         --Child<common::Energy>("energy") |
         --Child<std::optional<sfy::InternalConversionCoefficients>>("internalConversionCoefficients") |
         --Child<std::optional<sfy::PositronEmissionIntensity>>("positronEmissionIntensity")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<std::string>> type{this};

   // children
   Field<sfy::Intensity> intensity{this};
   Field<common::Energy> energy{this};
   Field<std::optional<sfy::InternalConversionCoefficients>> internalConversionCoefficients{this};
   Field<std::optional<sfy::PositronEmissionIntensity>> positronEmissionIntensity{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->type, \
      this->intensity, \
      this->energy, \
      this->internalConversionCoefficients, \
      this->positronEmissionIntensity)

   // default
   Discrete() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Discrete(
      const wrapper<std::optional<std::string>> &type,
      const wrapper<sfy::Intensity> &intensity = {},
      const wrapper<common::Energy> &energy = {},
      const wrapper<std::optional<sfy::InternalConversionCoefficients>> &internalConversionCoefficients = {},
      const wrapper<std::optional<sfy::PositronEmissionIntensity>> &positronEmissionIntensity = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      type(this,type),
      intensity(this,intensity),
      energy(this,energy),
      internalConversionCoefficients(this,internalConversionCoefficients),
      positronEmissionIntensity(this,positronEmissionIntensity)
   {
      Component::finish();
   }

   // from node
   explicit Discrete(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Discrete(const Discrete &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      type(this,other.type),
      intensity(this,other.intensity),
      energy(this,other.energy),
      internalConversionCoefficients(this,other.internalConversionCoefficients),
      positronEmissionIntensity(this,other.positronEmissionIntensity)
   {
      Component::finish(other);
   }

   // move
   Discrete(Discrete &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      type(this,std::move(other.type)),
      intensity(this,std::move(other.intensity)),
      energy(this,std::move(other.energy)),
      internalConversionCoefficients(this,std::move(other.internalConversionCoefficients)),
      positronEmissionIntensity(this,std::move(other.positronEmissionIntensity))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Discrete &operator=(const Discrete &) = default;
   Discrete &operator=(Discrete &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/sfy/Discrete/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Discrete

} // namespace sfy
} // namespace v2_0
} // namespace alpha

#endif
