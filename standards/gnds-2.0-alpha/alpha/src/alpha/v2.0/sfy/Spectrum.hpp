
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_SFY_SPECTRUM
#define ALPHA_V2_0_SFY_SPECTRUM

#include "alpha/v2.0/sfy/Discrete.hpp"
#include "alpha/v2.0/sfy/Continuum.hpp"

namespace alpha {
namespace v2_0 {
namespace sfy {

// -----------------------------------------------------------------------------
// sfy::
// class Spectrum
// -----------------------------------------------------------------------------

class Spectrum :
   public Component<sfy::Spectrum>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "sfy"; }
   static auto CLASS() { return "Spectrum"; }
   static auto FIELD() { return "spectrum"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("pid") |

         // children
         ++Child<sfy::Discrete>("discrete") |
         --Child<std::optional<sfy::Continuum>>("continuum")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};
   Field<std::string> pid{this};

   // children
   Field<std::vector<sfy::Discrete>> discrete{this};
   Field<std::optional<sfy::Continuum>> continuum{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->pid, \
      this->discrete, \
      this->continuum)

   // default
   Spectrum() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Spectrum(
      const wrapper<std::string> &label,
      const wrapper<std::string> &pid = {},
      const wrapper<std::vector<sfy::Discrete>> &discrete = {},
      const wrapper<std::optional<sfy::Continuum>> &continuum = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      pid(this,pid),
      discrete(this,discrete),
      continuum(this,continuum)
   {
      Component::finish();
   }

   // from node
   explicit Spectrum(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Spectrum(const Spectrum &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      pid(this,other.pid),
      discrete(this,other.discrete),
      continuum(this,other.continuum)
   {
      Component::finish(other);
   }

   // move
   Spectrum(Spectrum &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      pid(this,std::move(other.pid)),
      discrete(this,std::move(other.discrete)),
      continuum(this,std::move(other.continuum))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Spectrum &operator=(const Spectrum &) = default;
   Spectrum &operator=(Spectrum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/sfy/Spectrum/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Spectrum

} // namespace sfy
} // namespace v2_0
} // namespace alpha

#endif
