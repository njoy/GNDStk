
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_ANGULARTWOBODY
#define ALPHA_V2_0_MEAN_ANGULARTWOBODY

#include "alpha/v2.0/mean/XYs2d.hpp"
#include "alpha/v2.0/mean/Regions2d.hpp"
#include "alpha/v2.0/mean/Recoil.hpp"
#include "alpha/v2.0/mean/Isotropic2d.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class AngularTwoBody
// -----------------------------------------------------------------------------

class AngularTwoBody :
   public Component<mean::AngularTwoBody>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "AngularTwoBody"; }
   static auto FIELD() { return "angularTwoBody"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("productFrame") |

         // children
         --Child<std::optional<mean::XYs2d>>("XYs2d") |
         --Child<std::optional<mean::Regions2d>>("regions2d") |
         --Child<std::optional<mean::Recoil>>("recoil") |
         --Child<std::optional<mean::Isotropic2d>>("isotropic2d")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};
   Field<std::string> productFrame{this};

   // children
   Field<std::optional<mean::XYs2d>> XYs2d{this};
   Field<std::optional<mean::Regions2d>> regions2d{this};
   Field<std::optional<mean::Recoil>> recoil{this};
   Field<std::optional<mean::Isotropic2d>> isotropic2d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->productFrame, \
      this->XYs2d, \
      this->regions2d, \
      this->recoil, \
      this->isotropic2d)

   // default
   AngularTwoBody() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit AngularTwoBody(
      const wrapper<std::string> &label,
      const wrapper<std::string> &productFrame = {},
      const wrapper<std::optional<mean::XYs2d>> &XYs2d = {},
      const wrapper<std::optional<mean::Regions2d>> &regions2d = {},
      const wrapper<std::optional<mean::Recoil>> &recoil = {},
      const wrapper<std::optional<mean::Isotropic2d>> &isotropic2d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      productFrame(this,productFrame),
      XYs2d(this,XYs2d),
      regions2d(this,regions2d),
      recoil(this,recoil),
      isotropic2d(this,isotropic2d)
   {
      Component::finish();
   }

   // from node
   explicit AngularTwoBody(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   AngularTwoBody(const AngularTwoBody &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      productFrame(this,other.productFrame),
      XYs2d(this,other.XYs2d),
      regions2d(this,other.regions2d),
      recoil(this,other.recoil),
      isotropic2d(this,other.isotropic2d)
   {
      Component::finish(other);
   }

   // move
   AngularTwoBody(AngularTwoBody &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      productFrame(this,std::move(other.productFrame)),
      XYs2d(this,std::move(other.XYs2d)),
      regions2d(this,std::move(other.regions2d)),
      recoil(this,std::move(other.recoil)),
      isotropic2d(this,std::move(other.isotropic2d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   AngularTwoBody &operator=(const AngularTwoBody &) = default;
   AngularTwoBody &operator=(AngularTwoBody &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/AngularTwoBody/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class AngularTwoBody

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
