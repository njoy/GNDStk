
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_ANGULAR
#define ALPHA_V2_0_MEAN_ANGULAR

#include "alpha/v2.0/mean/Isotropic2d.hpp"
#include "alpha/v2.0/mean/XYs2d.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class Angular
// -----------------------------------------------------------------------------

class Angular :
   public Component<mean::Angular>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "Angular"; }
   static auto FIELD() { return "angular"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<mean::Isotropic2d>>("isotropic2d") |
         --Child<std::optional<mean::XYs2d>>("XYs2d")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<mean::Isotropic2d>> isotropic2d{this};
   Field<std::optional<mean::XYs2d>> XYs2d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->isotropic2d, \
      this->XYs2d)

   // default
   Angular() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Angular(
      const wrapper<std::optional<mean::Isotropic2d>> &isotropic2d,
      const wrapper<std::optional<mean::XYs2d>> &XYs2d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      isotropic2d(this,isotropic2d),
      XYs2d(this,XYs2d)
   {
      Component::finish();
   }

   // from node
   explicit Angular(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Angular(const Angular &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      isotropic2d(this,other.isotropic2d),
      XYs2d(this,other.XYs2d)
   {
      Component::finish(other);
   }

   // move
   Angular(Angular &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      isotropic2d(this,std::move(other.isotropic2d)),
      XYs2d(this,std::move(other.XYs2d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Angular &operator=(const Angular &) = default;
   Angular &operator=(Angular &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/Angular/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Angular

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
