
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_RESONANCESWITHBACKGROUND
#define ALPHA_V2_0_MEAN_RESONANCESWITHBACKGROUND

#include "alpha/v2.0/mean/Resonances.hpp"
#include "alpha/v2.0/mean/Background.hpp"
#include "alpha/v2.0/common/Uncertainty.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class ResonancesWithBackground
// -----------------------------------------------------------------------------

class ResonancesWithBackground :
   public Component<mean::ResonancesWithBackground>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "ResonancesWithBackground"; }
   static auto FIELD() { return "resonancesWithBackground"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<mean::Resonances>("resonances") |
         --Child<mean::Background>("background") |
         --Child<std::optional<common::Uncertainty>>("uncertainty")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};

   // children
   Field<mean::Resonances> resonances{this};
   Field<mean::Background> background{this};
   Field<std::optional<common::Uncertainty>> uncertainty{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->resonances, \
      this->background, \
      this->uncertainty)

   // default
   ResonancesWithBackground() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ResonancesWithBackground(
      const wrapper<std::string> &label,
      const wrapper<mean::Resonances> &resonances = {},
      const wrapper<mean::Background> &background = {},
      const wrapper<std::optional<common::Uncertainty>> &uncertainty = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      resonances(this,resonances),
      background(this,background),
      uncertainty(this,uncertainty)
   {
      Component::finish();
   }

   // from node
   explicit ResonancesWithBackground(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ResonancesWithBackground(const ResonancesWithBackground &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      resonances(this,other.resonances),
      background(this,other.background),
      uncertainty(this,other.uncertainty)
   {
      Component::finish(other);
   }

   // move
   ResonancesWithBackground(ResonancesWithBackground &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      resonances(this,std::move(other.resonances)),
      background(this,std::move(other.background)),
      uncertainty(this,std::move(other.uncertainty))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ResonancesWithBackground &operator=(const ResonancesWithBackground &) = default;
   ResonancesWithBackground &operator=(ResonancesWithBackground &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/ResonancesWithBackground/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ResonancesWithBackground

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
