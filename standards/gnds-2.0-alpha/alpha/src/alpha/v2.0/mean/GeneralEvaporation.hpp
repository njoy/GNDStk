
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_GENERALEVAPORATION
#define ALPHA_V2_0_MEAN_GENERALEVAPORATION

#include "alpha/v2.0/mean/U.hpp"
#include "alpha/v2.0/mean/Theta.hpp"
#include "alpha/v2.0/mean/G.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class GeneralEvaporation
// -----------------------------------------------------------------------------

class GeneralEvaporation :
   public Component<mean::GeneralEvaporation>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "GeneralEvaporation"; }
   static auto FIELD() { return "generalEvaporation"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<mean::U>("U") |
         --Child<mean::Theta>("theta") |
         --Child<mean::G>("g")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<mean::U> U{this};
   Field<mean::Theta> theta{this};
   Field<mean::G> g{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->U, \
      this->theta, \
      this->g)

   // default
   GeneralEvaporation() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit GeneralEvaporation(
      const wrapper<mean::U> &U,
      const wrapper<mean::Theta> &theta = {},
      const wrapper<mean::G> &g = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      U(this,U),
      theta(this,theta),
      g(this,g)
   {
      Component::finish();
   }

   // from node
   explicit GeneralEvaporation(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   GeneralEvaporation(const GeneralEvaporation &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      U(this,other.U),
      theta(this,other.theta),
      g(this,other.g)
   {
      Component::finish(other);
   }

   // move
   GeneralEvaporation(GeneralEvaporation &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      U(this,std::move(other.U)),
      theta(this,std::move(other.theta)),
      g(this,std::move(other.g))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   GeneralEvaporation &operator=(const GeneralEvaporation &) = default;
   GeneralEvaporation &operator=(GeneralEvaporation &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/GeneralEvaporation/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class GeneralEvaporation

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
