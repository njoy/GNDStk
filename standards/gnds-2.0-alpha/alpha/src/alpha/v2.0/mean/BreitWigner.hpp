
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_BREITWIGNER
#define ALPHA_V2_0_MEAN_BREITWIGNER

#include "alpha/v2.0/mean/ResonanceParameters.hpp"
#include "alpha/v2.0/common/PoPs.hpp"
#include "alpha/v2.0/mean/ScatteringRadius.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class BreitWigner
// -----------------------------------------------------------------------------

class BreitWigner :
   public Component<mean::BreitWigner>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "BreitWigner"; }
   static auto FIELD() { return "BreitWigner"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("approximation") |
         std::optional<bool>{}
            / Meta<>("calculateChannelRadius") |

         // children
         --Child<mean::ResonanceParameters>("resonanceParameters") |
         --Child<std::optional<common::PoPs>>("PoPs") |
         --Child<std::optional<mean::ScatteringRadius>>("scatteringRadius")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};
   Field<std::string> approximation{this};
   Field<std::optional<bool>> calculateChannelRadius{this};

   // children
   Field<mean::ResonanceParameters> resonanceParameters{this};
   Field<std::optional<common::PoPs>> PoPs{this};
   Field<std::optional<mean::ScatteringRadius>> scatteringRadius{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->approximation, \
      this->calculateChannelRadius, \
      this->resonanceParameters, \
      this->PoPs, \
      this->scatteringRadius)

   // default
   BreitWigner() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit BreitWigner(
      const wrapper<std::string> &label,
      const wrapper<std::string> &approximation = {},
      const wrapper<std::optional<bool>> &calculateChannelRadius = {},
      const wrapper<mean::ResonanceParameters> &resonanceParameters = {},
      const wrapper<std::optional<common::PoPs>> &PoPs = {},
      const wrapper<std::optional<mean::ScatteringRadius>> &scatteringRadius = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      approximation(this,approximation),
      calculateChannelRadius(this,calculateChannelRadius),
      resonanceParameters(this,resonanceParameters),
      PoPs(this,PoPs),
      scatteringRadius(this,scatteringRadius)
   {
      Component::finish();
   }

   // from node
   explicit BreitWigner(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   BreitWigner(const BreitWigner &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      approximation(this,other.approximation),
      calculateChannelRadius(this,other.calculateChannelRadius),
      resonanceParameters(this,other.resonanceParameters),
      PoPs(this,other.PoPs),
      scatteringRadius(this,other.scatteringRadius)
   {
      Component::finish(other);
   }

   // move
   BreitWigner(BreitWigner &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      approximation(this,std::move(other.approximation)),
      calculateChannelRadius(this,std::move(other.calculateChannelRadius)),
      resonanceParameters(this,std::move(other.resonanceParameters)),
      PoPs(this,std::move(other.PoPs)),
      scatteringRadius(this,std::move(other.scatteringRadius))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   BreitWigner &operator=(const BreitWigner &) = default;
   BreitWigner &operator=(BreitWigner &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/BreitWigner/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class BreitWigner

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
