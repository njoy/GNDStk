
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_XYS3D
#define ALPHA_V2_0_MEAN_XYS3D

#include "alpha/v2.0/common/Axes.hpp"
#include "alpha/v2.0/mean/Function2ds.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class XYs3d
// -----------------------------------------------------------------------------

class XYs3d :
   public Component<mean::XYs3d>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "XYs3d"; }
   static auto FIELD() { return "XYs3d"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<std::string>{}
            / Meta<>("interpolationQualifier") |

         // children
         --Child<std::optional<common::Axes>>
            ("axes") |
         ++Child<mean::Function2ds>
            ("function2ds")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<std::string>> interpolationQualifier{this};

   // children
   Field<std::optional<common::Axes>>
      axes{this};
   Field<std::vector<mean::Function2ds>>
      function2ds{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->interpolationQualifier, \
      this->axes, \
      this->function2ds)

   // default
   XYs3d() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit XYs3d(
      const wrapper<std::optional<std::string>>
         &interpolationQualifier,
      const wrapper<std::optional<common::Axes>>
         &axes = {},
      const wrapper<std::vector<mean::Function2ds>>
         &function2ds = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      interpolationQualifier(this,interpolationQualifier),
      axes(this,axes),
      function2ds(this,function2ds)
   {
      Component::finish();
   }

   // from node
   explicit XYs3d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   XYs3d(const XYs3d &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      interpolationQualifier(this,other.interpolationQualifier),
      axes(this,other.axes),
      function2ds(this,other.function2ds)
   {
      Component::finish(other);
   }

   // move
   XYs3d(XYs3d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      interpolationQualifier(this,std::move(other.interpolationQualifier)),
      axes(this,std::move(other.axes)),
      function2ds(this,std::move(other.function2ds))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   XYs3d &operator=(const XYs3d &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         interpolationQualifier = other.interpolationQualifier;
         axes = other.axes;
         function2ds = other.function2ds;
      }
      return *this;
   }

   // move
   XYs3d &operator=(XYs3d &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         interpolationQualifier = std::move(other.interpolationQualifier);
         axes = std::move(other.axes);
         function2ds = std::move(other.function2ds);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/XYs3d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class XYs3d

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
