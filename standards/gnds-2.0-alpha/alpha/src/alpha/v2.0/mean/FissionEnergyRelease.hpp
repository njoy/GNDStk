
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_FISSIONENERGYRELEASE
#define ALPHA_V2_0_MEAN_FISSIONENERGYRELEASE

#include "alpha/v2.0/mean/PromptProductKE.hpp"
#include "alpha/v2.0/mean/PromptNeutronKE.hpp"
#include "alpha/v2.0/mean/DelayedNeutronKE.hpp"
#include "alpha/v2.0/mean/PromptGammaEnergy.hpp"
#include "alpha/v2.0/mean/DelayedGammaEnergy.hpp"
#include "alpha/v2.0/mean/DelayedBetaEnergy.hpp"
#include "alpha/v2.0/mean/NeutrinoEnergy.hpp"
#include "alpha/v2.0/mean/NonNeutrinoEnergy.hpp"
#include "alpha/v2.0/mean/TotalEnergy.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class FissionEnergyRelease
// -----------------------------------------------------------------------------

class FissionEnergyRelease :
   public Component<mean::FissionEnergyRelease>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "FissionEnergyRelease"; }
   static auto FIELD() { return "fissionEnergyRelease"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<mean::PromptProductKE>("promptProductKE") |
         --Child<mean::PromptNeutronKE>("promptNeutronKE") |
         --Child<mean::DelayedNeutronKE>("delayedNeutronKE") |
         --Child<mean::PromptGammaEnergy>("promptGammaEnergy") |
         --Child<mean::DelayedGammaEnergy>("delayedGammaEnergy") |
         --Child<mean::DelayedBetaEnergy>("delayedBetaEnergy") |
         --Child<mean::NeutrinoEnergy>("neutrinoEnergy") |
         --Child<mean::NonNeutrinoEnergy>("nonNeutrinoEnergy") |
         --Child<mean::TotalEnergy>("totalEnergy")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};

   // children
   Field<mean::PromptProductKE> promptProductKE{this};
   Field<mean::PromptNeutronKE> promptNeutronKE{this};
   Field<mean::DelayedNeutronKE> delayedNeutronKE{this};
   Field<mean::PromptGammaEnergy> promptGammaEnergy{this};
   Field<mean::DelayedGammaEnergy> delayedGammaEnergy{this};
   Field<mean::DelayedBetaEnergy> delayedBetaEnergy{this};
   Field<mean::NeutrinoEnergy> neutrinoEnergy{this};
   Field<mean::NonNeutrinoEnergy> nonNeutrinoEnergy{this};
   Field<mean::TotalEnergy> totalEnergy{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->promptProductKE, \
      this->promptNeutronKE, \
      this->delayedNeutronKE, \
      this->promptGammaEnergy, \
      this->delayedGammaEnergy, \
      this->delayedBetaEnergy, \
      this->neutrinoEnergy, \
      this->nonNeutrinoEnergy, \
      this->totalEnergy)

   // default
   FissionEnergyRelease() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit FissionEnergyRelease(
      const wrapper<std::string> &label,
      const wrapper<mean::PromptProductKE> &promptProductKE = {},
      const wrapper<mean::PromptNeutronKE> &promptNeutronKE = {},
      const wrapper<mean::DelayedNeutronKE> &delayedNeutronKE = {},
      const wrapper<mean::PromptGammaEnergy> &promptGammaEnergy = {},
      const wrapper<mean::DelayedGammaEnergy> &delayedGammaEnergy = {},
      const wrapper<mean::DelayedBetaEnergy> &delayedBetaEnergy = {},
      const wrapper<mean::NeutrinoEnergy> &neutrinoEnergy = {},
      const wrapper<mean::NonNeutrinoEnergy> &nonNeutrinoEnergy = {},
      const wrapper<mean::TotalEnergy> &totalEnergy = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      promptProductKE(this,promptProductKE),
      promptNeutronKE(this,promptNeutronKE),
      delayedNeutronKE(this,delayedNeutronKE),
      promptGammaEnergy(this,promptGammaEnergy),
      delayedGammaEnergy(this,delayedGammaEnergy),
      delayedBetaEnergy(this,delayedBetaEnergy),
      neutrinoEnergy(this,neutrinoEnergy),
      nonNeutrinoEnergy(this,nonNeutrinoEnergy),
      totalEnergy(this,totalEnergy)
   {
      Component::finish();
   }

   // from node
   explicit FissionEnergyRelease(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   FissionEnergyRelease(const FissionEnergyRelease &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      promptProductKE(this,other.promptProductKE),
      promptNeutronKE(this,other.promptNeutronKE),
      delayedNeutronKE(this,other.delayedNeutronKE),
      promptGammaEnergy(this,other.promptGammaEnergy),
      delayedGammaEnergy(this,other.delayedGammaEnergy),
      delayedBetaEnergy(this,other.delayedBetaEnergy),
      neutrinoEnergy(this,other.neutrinoEnergy),
      nonNeutrinoEnergy(this,other.nonNeutrinoEnergy),
      totalEnergy(this,other.totalEnergy)
   {
      Component::finish(other);
   }

   // move
   FissionEnergyRelease(FissionEnergyRelease &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      promptProductKE(this,std::move(other.promptProductKE)),
      promptNeutronKE(this,std::move(other.promptNeutronKE)),
      delayedNeutronKE(this,std::move(other.delayedNeutronKE)),
      promptGammaEnergy(this,std::move(other.promptGammaEnergy)),
      delayedGammaEnergy(this,std::move(other.delayedGammaEnergy)),
      delayedBetaEnergy(this,std::move(other.delayedBetaEnergy)),
      neutrinoEnergy(this,std::move(other.neutrinoEnergy)),
      nonNeutrinoEnergy(this,std::move(other.nonNeutrinoEnergy)),
      totalEnergy(this,std::move(other.totalEnergy))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   FissionEnergyRelease &operator=(const FissionEnergyRelease &) = default;
   FissionEnergyRelease &operator=(FissionEnergyRelease &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/FissionEnergyRelease/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class FissionEnergyRelease

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
