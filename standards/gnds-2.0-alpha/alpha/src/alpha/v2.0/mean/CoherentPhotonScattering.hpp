
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_COHERENTPHOTONSCATTERING
#define ALPHA_V2_0_MEAN_COHERENTPHOTONSCATTERING

#include "alpha/v2.0/mean/FormFactor.hpp"
#include "alpha/v2.0/mean/RealAnomalousFactor.hpp"
#include "alpha/v2.0/mean/ImaginaryAnomalousFactor.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class CoherentPhotonScattering
// -----------------------------------------------------------------------------

class CoherentPhotonScattering :
   public Component<mean::CoherentPhotonScattering>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "CoherentPhotonScattering"; }
   static auto FIELD() { return "coherentPhotonScattering"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::optional<std::string>{}
            / Meta<>("href") |
         std::optional<std::string>{}
            / Meta<>("pid") |
         std::optional<std::string>{}
            / Meta<>("productFrame") |

         // children
         --Child<std::optional<mean::FormFactor>>("formFactor") |
         --Child<std::optional<mean::RealAnomalousFactor>>("realAnomalousFactor") |
         --Child<std::optional<mean::ImaginaryAnomalousFactor>>("imaginaryAnomalousFactor")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};
   Field<std::optional<std::string>> href{this};
   Field<std::optional<std::string>> pid{this};
   Field<std::optional<std::string>> productFrame{this};

   // children
   Field<std::optional<mean::FormFactor>> formFactor{this};
   Field<std::optional<mean::RealAnomalousFactor>> realAnomalousFactor{this};
   Field<std::optional<mean::ImaginaryAnomalousFactor>> imaginaryAnomalousFactor{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->href, \
      this->pid, \
      this->productFrame, \
      this->formFactor, \
      this->realAnomalousFactor, \
      this->imaginaryAnomalousFactor)

   // default
   CoherentPhotonScattering() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit CoherentPhotonScattering(
      const wrapper<std::string> &label,
      const wrapper<std::optional<std::string>> &href = {},
      const wrapper<std::optional<std::string>> &pid = {},
      const wrapper<std::optional<std::string>> &productFrame = {},
      const wrapper<std::optional<mean::FormFactor>> &formFactor = {},
      const wrapper<std::optional<mean::RealAnomalousFactor>> &realAnomalousFactor = {},
      const wrapper<std::optional<mean::ImaginaryAnomalousFactor>> &imaginaryAnomalousFactor = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      href(this,href),
      pid(this,pid),
      productFrame(this,productFrame),
      formFactor(this,formFactor),
      realAnomalousFactor(this,realAnomalousFactor),
      imaginaryAnomalousFactor(this,imaginaryAnomalousFactor)
   {
      Component::finish();
   }

   // from node
   explicit CoherentPhotonScattering(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   CoherentPhotonScattering(const CoherentPhotonScattering &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      href(this,other.href),
      pid(this,other.pid),
      productFrame(this,other.productFrame),
      formFactor(this,other.formFactor),
      realAnomalousFactor(this,other.realAnomalousFactor),
      imaginaryAnomalousFactor(this,other.imaginaryAnomalousFactor)
   {
      Component::finish(other);
   }

   // move
   CoherentPhotonScattering(CoherentPhotonScattering &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      href(this,std::move(other.href)),
      pid(this,std::move(other.pid)),
      productFrame(this,std::move(other.productFrame)),
      formFactor(this,std::move(other.formFactor)),
      realAnomalousFactor(this,std::move(other.realAnomalousFactor)),
      imaginaryAnomalousFactor(this,std::move(other.imaginaryAnomalousFactor))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   CoherentPhotonScattering &operator=(const CoherentPhotonScattering &) = default;
   CoherentPhotonScattering &operator=(CoherentPhotonScattering &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/CoherentPhotonScattering/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class CoherentPhotonScattering

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
