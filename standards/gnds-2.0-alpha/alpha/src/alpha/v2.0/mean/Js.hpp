
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_JS
#define ALPHA_V2_0_MEAN_JS

#include "alpha/v2.0/mean/J.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class Js
// -----------------------------------------------------------------------------

class Js :
   public Component<mean::Js>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "Js"; }
   static auto FIELD() { return "Js"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         ++Child<mean::J>("J")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::vector<mean::J>> J{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->J)

   // default
   Js() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Js(
      const wrapper<std::vector<mean::J>> &J
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      J(this,J)
   {
      Component::finish();
   }

   // from node
   explicit Js(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Js(const Js &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      J(this,other.J)
   {
      Component::finish(other);
   }

   // move
   Js(Js &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      J(this,std::move(other.J))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Js &operator=(const Js &) = default;
   Js &operator=(Js &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/Js/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Js

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
