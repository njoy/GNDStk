
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_SUMS
#define ALPHA_V2_0_MEAN_SUMS

#include "alpha/v2.0/mean/CrossSectionSums.hpp"
#include "alpha/v2.0/mean/MultiplicitySums.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class Sums
// -----------------------------------------------------------------------------

class Sums :
   public Component<mean::Sums>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "Sums"; }
   static auto FIELD() { return "sums"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<mean::CrossSectionSums>>("crossSectionSums") |
         --Child<std::optional<mean::MultiplicitySums>>("multiplicitySums")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<mean::CrossSectionSums>> crossSectionSums{this};
   Field<std::optional<mean::MultiplicitySums>> multiplicitySums{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->crossSectionSums, \
      this->multiplicitySums)

   // default
   Sums() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Sums(
      const wrapper<std::optional<mean::CrossSectionSums>> &crossSectionSums,
      const wrapper<std::optional<mean::MultiplicitySums>> &multiplicitySums = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      crossSectionSums(this,crossSectionSums),
      multiplicitySums(this,multiplicitySums)
   {
      Component::finish();
   }

   // from node
   explicit Sums(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Sums(const Sums &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      crossSectionSums(this,other.crossSectionSums),
      multiplicitySums(this,other.multiplicitySums)
   {
      Component::finish(other);
   }

   // move
   Sums(Sums &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      crossSectionSums(this,std::move(other.crossSectionSums)),
      multiplicitySums(this,std::move(other.multiplicitySums))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Sums &operator=(const Sums &) = default;
   Sums &operator=(Sums &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/Sums/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Sums

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
