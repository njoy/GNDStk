
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_MEAN_NEUTRINOENERGY
#define ALPHA_V2_0_MEAN_NEUTRINOENERGY

#include "alpha/v2.0/common/Polynomial1d.hpp"

namespace alpha {
namespace v2_0 {
namespace mean {

// -----------------------------------------------------------------------------
// mean::
// class NeutrinoEnergy
// -----------------------------------------------------------------------------

class NeutrinoEnergy :
   public Component<mean::NeutrinoEnergy>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "mean"; }
   static auto CLASS() { return "NeutrinoEnergy"; }
   static auto FIELD() { return "neutrinoEnergy"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<common::Polynomial1d>("polynomial1d")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<common::Polynomial1d> polynomial1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->polynomial1d)

   // default
   NeutrinoEnergy() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit NeutrinoEnergy(
      const wrapper<common::Polynomial1d> &polynomial1d
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      polynomial1d(this,polynomial1d)
   {
      Component::finish();
   }

   // from node
   explicit NeutrinoEnergy(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   NeutrinoEnergy(const NeutrinoEnergy &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      polynomial1d(this,other.polynomial1d)
   {
      Component::finish(other);
   }

   // move
   NeutrinoEnergy(NeutrinoEnergy &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      polynomial1d(this,std::move(other.polynomial1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   NeutrinoEnergy &operator=(const NeutrinoEnergy &) = default;
   NeutrinoEnergy &operator=(NeutrinoEnergy &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/mean/NeutrinoEnergy/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class NeutrinoEnergy

} // namespace mean
} // namespace v2_0
} // namespace alpha

#endif
