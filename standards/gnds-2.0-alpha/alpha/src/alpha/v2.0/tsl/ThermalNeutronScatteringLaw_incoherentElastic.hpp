
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTELASTIC
#define ALPHA_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTELASTIC

#include "alpha/v2.0/tsl/BoundAtomCrossSection.hpp"
#include "alpha/v2.0/tsl/DebyeWallerIntegral.hpp"

namespace alpha {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class ThermalNeutronScatteringLaw_incoherentElastic
// -----------------------------------------------------------------------------

class ThermalNeutronScatteringLaw_incoherentElastic :
   public Component<tsl::ThermalNeutronScatteringLaw_incoherentElastic>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "ThermalNeutronScatteringLaw_incoherentElastic"; }
   static auto FIELD() { return "thermalNeutronScatteringLaw_incoherentElastic"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("pid") |
         std::string{}
            / Meta<>("productFrame") |

         // children
         --Child<tsl::BoundAtomCrossSection>("boundAtomCrossSection") |
         --Child<tsl::DebyeWallerIntegral>("DebyeWallerIntegral")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> label{this};
   Field<std::string> pid{this};
   Field<std::string> productFrame{this};

   // children
   Field<tsl::BoundAtomCrossSection> boundAtomCrossSection{this};
   Field<tsl::DebyeWallerIntegral> DebyeWallerIntegral{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->pid, \
      this->productFrame, \
      this->boundAtomCrossSection, \
      this->DebyeWallerIntegral)

   // default
   ThermalNeutronScatteringLaw_incoherentElastic() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ThermalNeutronScatteringLaw_incoherentElastic(
      const wrapper<std::string> &label,
      const wrapper<std::string> &pid = {},
      const wrapper<std::string> &productFrame = {},
      const wrapper<tsl::BoundAtomCrossSection> &boundAtomCrossSection = {},
      const wrapper<tsl::DebyeWallerIntegral> &DebyeWallerIntegral = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      pid(this,pid),
      productFrame(this,productFrame),
      boundAtomCrossSection(this,boundAtomCrossSection),
      DebyeWallerIntegral(this,DebyeWallerIntegral)
   {
      Component::finish();
   }

   // from node
   explicit ThermalNeutronScatteringLaw_incoherentElastic(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ThermalNeutronScatteringLaw_incoherentElastic(const ThermalNeutronScatteringLaw_incoherentElastic &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      pid(this,other.pid),
      productFrame(this,other.productFrame),
      boundAtomCrossSection(this,other.boundAtomCrossSection),
      DebyeWallerIntegral(this,other.DebyeWallerIntegral)
   {
      Component::finish(other);
   }

   // move
   ThermalNeutronScatteringLaw_incoherentElastic(ThermalNeutronScatteringLaw_incoherentElastic &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      pid(this,std::move(other.pid)),
      productFrame(this,std::move(other.productFrame)),
      boundAtomCrossSection(this,std::move(other.boundAtomCrossSection)),
      DebyeWallerIntegral(this,std::move(other.DebyeWallerIntegral))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ThermalNeutronScatteringLaw_incoherentElastic &operator=(const ThermalNeutronScatteringLaw_incoherentElastic &) = default;
   ThermalNeutronScatteringLaw_incoherentElastic &operator=(ThermalNeutronScatteringLaw_incoherentElastic &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/tsl/ThermalNeutronScatteringLaw_incoherentElastic/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ThermalNeutronScatteringLaw_incoherentElastic

} // namespace tsl
} // namespace v2_0
} // namespace alpha

#endif
