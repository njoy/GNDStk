
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_TSL_SELFSCATTERINGKERNEL
#define ALPHA_V2_0_TSL_SELFSCATTERINGKERNEL

#include "alpha/v2.0/common/Gridded3d.hpp"
#include "alpha/v2.0/tsl/SCTApproximation.hpp"
#include "alpha/v2.0/tsl/FreeGasApproximation.hpp"

namespace alpha {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class SelfScatteringKernel
// -----------------------------------------------------------------------------

class SelfScatteringKernel :
   public Component<tsl::SelfScatteringKernel>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "SelfScatteringKernel"; }
   static auto FIELD() { return "selfScatteringKernel"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<bool>{}
            / Meta<>("symmetric") |

         // children
         --Child<std::optional<common::Gridded3d>>("gridded3d") |
         --Child<std::optional<tsl::SCTApproximation>>("SCTApproximation") |
         --Child<std::optional<tsl::FreeGasApproximation>>("freeGasApproximation")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<bool>> symmetric{this};

   // children
   Field<std::optional<common::Gridded3d>> gridded3d{this};
   Field<std::optional<tsl::SCTApproximation>> SCTApproximation{this};
   Field<std::optional<tsl::FreeGasApproximation>> freeGasApproximation{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->symmetric, \
      this->gridded3d, \
      this->SCTApproximation, \
      this->freeGasApproximation)

   // default
   SelfScatteringKernel() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit SelfScatteringKernel(
      const wrapper<std::optional<bool>> &symmetric,
      const wrapper<std::optional<common::Gridded3d>> &gridded3d = {},
      const wrapper<std::optional<tsl::SCTApproximation>> &SCTApproximation = {},
      const wrapper<std::optional<tsl::FreeGasApproximation>> &freeGasApproximation = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      symmetric(this,symmetric),
      gridded3d(this,gridded3d),
      SCTApproximation(this,SCTApproximation),
      freeGasApproximation(this,freeGasApproximation)
   {
      Component::finish();
   }

   // from node
   explicit SelfScatteringKernel(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   SelfScatteringKernel(const SelfScatteringKernel &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      symmetric(this,other.symmetric),
      gridded3d(this,other.gridded3d),
      SCTApproximation(this,other.SCTApproximation),
      freeGasApproximation(this,other.freeGasApproximation)
   {
      Component::finish(other);
   }

   // move
   SelfScatteringKernel(SelfScatteringKernel &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      symmetric(this,std::move(other.symmetric)),
      gridded3d(this,std::move(other.gridded3d)),
      SCTApproximation(this,std::move(other.SCTApproximation)),
      freeGasApproximation(this,std::move(other.freeGasApproximation))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   SelfScatteringKernel &operator=(const SelfScatteringKernel &) = default;
   SelfScatteringKernel &operator=(SelfScatteringKernel &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/tsl/SelfScatteringKernel/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class SelfScatteringKernel

} // namespace tsl
} // namespace v2_0
} // namespace alpha

#endif
