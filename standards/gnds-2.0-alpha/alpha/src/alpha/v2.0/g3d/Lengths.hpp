
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_G3D_LENGTHS
#define ALPHA_V2_0_G3D_LENGTHS

#include "alpha/v2.0/key.hpp"

namespace alpha {
namespace v2_0 {
namespace g3d {

// -----------------------------------------------------------------------------
// g3d::
// class Lengths
// -----------------------------------------------------------------------------

class Lengths :
   public Component<g3d::Lengths>,
   public DataNode<std::vector<int>,false>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "g3d"; }
   static auto CLASS() { return "Lengths"; }
   static auto FIELD() { return "values"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("valueType") |
         std::string{}
            / Meta<>("label") |

         // data
         --Child<DataNode>(special::self) / DataConverter{}
      ;
   }

public:
   using Component::construct;
   using DataNode::operator=;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> valueType{this};
   Field<std::string> label{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->valueType, \
      this->label, \
      static_cast<DataNode &>(*this))

   // default
   Lengths() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Lengths(
      const wrapper<std::string> &valueType,
      const wrapper<std::string> &label = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      valueType(this,valueType),
      label(this,label)
   {
      Component::finish();
   }

   // from node
   explicit Lengths(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector<int>
   Lengths(const std::vector<int> &vector) :
      GNDSTK_COMPONENT(BlockData{}),
      DataNode(vector)
   {
      Component::finish(vector);
   }

   // copy
   Lengths(const Lengths &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      DataNode(other),
      comment(this,other.comment),
      valueType(this,other.valueType),
      label(this,other.label)
   {
      Component::finish(other);
   }

   // move
   Lengths(Lengths &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      DataNode(std::move(other)),
      comment(this,std::move(other.comment)),
      valueType(this,std::move(other.valueType)),
      label(this,std::move(other.label))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Lengths &operator=(const Lengths &) = default;
   Lengths &operator=(Lengths &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/g3d/Lengths/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Lengths

} // namespace g3d
} // namespace v2_0
} // namespace alpha

#endif
