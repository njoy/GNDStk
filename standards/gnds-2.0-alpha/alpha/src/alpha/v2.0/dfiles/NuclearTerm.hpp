
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_DFILES_NUCLEARTERM
#define ALPHA_V2_0_DFILES_NUCLEARTERM

#include "alpha/v2.0/mean/Regions2d.hpp"
#include "alpha/v2.0/mean/XYs2d.hpp"

namespace alpha {
namespace v2_0 {
namespace dfiles {

// -----------------------------------------------------------------------------
// dfiles::
// class NuclearTerm
// -----------------------------------------------------------------------------

class NuclearTerm :
   public Component<dfiles::NuclearTerm>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "dfiles"; }
   static auto CLASS() { return "NuclearTerm"; }
   static auto FIELD() { return "nuclearTerm"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<mean::Regions2d>>("regions2d") |
         --Child<std::optional<mean::XYs2d>>("XYs2d")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<mean::Regions2d>> regions2d{this};
   Field<std::optional<mean::XYs2d>> XYs2d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->regions2d, \
      this->XYs2d)

   // default
   NuclearTerm() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit NuclearTerm(
      const wrapper<std::optional<mean::Regions2d>> &regions2d,
      const wrapper<std::optional<mean::XYs2d>> &XYs2d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      regions2d(this,regions2d),
      XYs2d(this,XYs2d)
   {
      Component::finish();
   }

   // from node
   explicit NuclearTerm(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   NuclearTerm(const NuclearTerm &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      regions2d(this,other.regions2d),
      XYs2d(this,other.XYs2d)
   {
      Component::finish(other);
   }

   // move
   NuclearTerm(NuclearTerm &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      regions2d(this,std::move(other.regions2d)),
      XYs2d(this,std::move(other.XYs2d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   NuclearTerm &operator=(const NuclearTerm &) = default;
   NuclearTerm &operator=(NuclearTerm &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/dfiles/NuclearTerm/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class NuclearTerm

} // namespace dfiles
} // namespace v2_0
} // namespace alpha

#endif
