
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef ALPHA_V2_0_REDUCED_DISTRIBUTION
#define ALPHA_V2_0_REDUCED_DISTRIBUTION

#include "alpha/v2.0/general/ThermalNeutronScatteringLaw.hpp"
#include "alpha/v2.0/general/Uncorrelated.hpp"
#include "alpha/v2.0/general/Unspecified.hpp"
#include "alpha/v2.0/general/XYs2d.hpp"
#include "alpha/v2.0/general/Branching3d.hpp"

namespace alpha {
namespace v2_0 {
namespace reduced {

// -----------------------------------------------------------------------------
// reduced::
// class Distribution
// -----------------------------------------------------------------------------

class Distribution :
   public Component<reduced::Distribution>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "reduced"; }
   static auto CLASS() { return "Distribution"; }
   static auto FIELD() { return "distribution"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<general::ThermalNeutronScatteringLaw>>
            ("thermalNeutronScatteringLaw") |
         --Child<std::optional<general::Uncorrelated>>
            ("uncorrelated") |
         --Child<std::optional<general::Unspecified>>
            ("unspecified") |
         --Child<std::optional<general::XYs2d>>
            ("XYs2d") |
         --Child<std::optional<general::Branching3d>>
            ("branching3d")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "thermalNeutronScatteringLaw",
         "uncorrelated",
         "unspecified",
         "XYs2d",
         "branching3d"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "thermal_neutron_scattering_law",
         "uncorrelated",
         "unspecified",
         "xys2d",
         "branching3d"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<general::ThermalNeutronScatteringLaw>>
      thermalNeutronScatteringLaw{this};
   Field<std::optional<general::Uncorrelated>>
      uncorrelated{this};
   Field<std::optional<general::Unspecified>>
      unspecified{this};
   Field<std::optional<general::XYs2d>>
      XYs2d{this};
   Field<std::optional<general::Branching3d>>
      branching3d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->thermalNeutronScatteringLaw, \
      this->uncorrelated, \
      this->unspecified, \
      this->XYs2d, \
      this->branching3d \
   )

   // default
   Distribution() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Distribution(
      const wrapper<std::optional<general::ThermalNeutronScatteringLaw>>
         &thermalNeutronScatteringLaw,
      const wrapper<std::optional<general::Uncorrelated>>
         &uncorrelated = {},
      const wrapper<std::optional<general::Unspecified>>
         &unspecified = {},
      const wrapper<std::optional<general::XYs2d>>
         &XYs2d = {},
      const wrapper<std::optional<general::Branching3d>>
         &branching3d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      thermalNeutronScatteringLaw(this,thermalNeutronScatteringLaw),
      uncorrelated(this,uncorrelated),
      unspecified(this,unspecified),
      XYs2d(this,XYs2d),
      branching3d(this,branching3d)
   {
      Component::finish();
   }

   // from node
   explicit Distribution(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Distribution(const Distribution &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      thermalNeutronScatteringLaw(this,other.thermalNeutronScatteringLaw),
      uncorrelated(this,other.uncorrelated),
      unspecified(this,other.unspecified),
      XYs2d(this,other.XYs2d),
      branching3d(this,other.branching3d)
   {
      Component::finish(other);
   }

   // move
   Distribution(Distribution &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      thermalNeutronScatteringLaw(this,std::move(other.thermalNeutronScatteringLaw)),
      uncorrelated(this,std::move(other.uncorrelated)),
      unspecified(this,std::move(other.unspecified)),
      XYs2d(this,std::move(other.XYs2d)),
      branching3d(this,std::move(other.branching3d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Distribution &operator=(const Distribution &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         thermalNeutronScatteringLaw = other.thermalNeutronScatteringLaw;
         uncorrelated = other.uncorrelated;
         unspecified = other.unspecified;
         XYs2d = other.XYs2d;
         branching3d = other.branching3d;
      }
      return *this;
   }

   // move
   Distribution &operator=(Distribution &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         thermalNeutronScatteringLaw = std::move(other.thermalNeutronScatteringLaw);
         uncorrelated = std::move(other.uncorrelated);
         unspecified = std::move(other.unspecified);
         XYs2d = std::move(other.XYs2d);
         branching3d = std::move(other.branching3d);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "alpha/v2.0/reduced/Distribution/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Distribution

} // namespace reduced
} // namespace v2_0
} // namespace alpha

#endif
