
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/tsl/SelfScatteringKernel.hpp"
#include "SelfScatteringKernel.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = SelfScatteringKernelClass;
using CPP = multigroup::SelfScatteringKernel;

static const std::string CLASSNAME = "SelfScatteringKernel";

namespace extract {
   static auto symmetric = [](auto &obj) { return &obj.symmetric; };
   static auto gridded3d = [](auto &obj) { return &obj.gridded3d; };
   static auto SCTApproximation = [](auto &obj) { return &obj.SCTApproximation; };
   static auto freeGasApproximation = [](auto &obj) { return &obj.freeGasApproximation; };
}

using CPPGridded3d = common::Gridded3d;
using CPPSCTApproximation = tsl::SCTApproximation;
using CPPFreeGasApproximation = tsl::FreeGasApproximation;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstSelfScatteringKernel
SelfScatteringKernelDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2SelfScatteringKernel
SelfScatteringKernelDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstSelfScatteringKernel
SelfScatteringKernelCreateConst(
   const bool symmetric,
   ConstHandle2ConstGridded3d gridded3d,
   ConstHandle2ConstSCTApproximation SCTApproximation,
   ConstHandle2ConstFreeGasApproximation freeGasApproximation
) {
   ConstHandle2SelfScatteringKernel handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      symmetric,
      detail::tocpp<CPPGridded3d>(gridded3d),
      detail::tocpp<CPPSCTApproximation>(SCTApproximation),
      detail::tocpp<CPPFreeGasApproximation>(freeGasApproximation)
   );
   return handle;
}

// Create, general
Handle2SelfScatteringKernel
SelfScatteringKernelCreate(
   const bool symmetric,
   ConstHandle2ConstGridded3d gridded3d,
   ConstHandle2ConstSCTApproximation SCTApproximation,
   ConstHandle2ConstFreeGasApproximation freeGasApproximation
) {
   ConstHandle2SelfScatteringKernel handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      symmetric,
      detail::tocpp<CPPGridded3d>(gridded3d),
      detail::tocpp<CPPSCTApproximation>(SCTApproximation),
      detail::tocpp<CPPFreeGasApproximation>(freeGasApproximation)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
SelfScatteringKernelAssign(ConstHandle2SelfScatteringKernel This, ConstHandle2ConstSelfScatteringKernel from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
SelfScatteringKernelDelete(ConstHandle2ConstSelfScatteringKernel This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
SelfScatteringKernelRead(ConstHandle2SelfScatteringKernel This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
SelfScatteringKernelWrite(ConstHandle2ConstSelfScatteringKernel This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
SelfScatteringKernelPrint(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
SelfScatteringKernelPrintXML(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
SelfScatteringKernelPrintJSON(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: symmetric
// -----------------------------------------------------------------------------

// Has
int
SelfScatteringKernelSymmetricHas(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SymmetricHas", This, extract::symmetric);
}

// Get
// Returns by value
bool
SelfScatteringKernelSymmetricGet(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"SymmetricGet", This, extract::symmetric);
}

// Set
void
SelfScatteringKernelSymmetricSet(ConstHandle2SelfScatteringKernel This, const bool symmetric)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"SymmetricSet", This, extract::symmetric, symmetric);
}


// -----------------------------------------------------------------------------
// Child: gridded3d
// -----------------------------------------------------------------------------

// Has
int
SelfScatteringKernelGridded3dHas(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Gridded3dHas", This, extract::gridded3d);
}

// Get, const
Handle2ConstGridded3d
SelfScatteringKernelGridded3dGetConst(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::getField<CPP,Handle2ConstGridded3d>
      (CLASSNAME, CLASSNAME+"Gridded3dGetConst", This, extract::gridded3d);
}

// Get, non-const
Handle2Gridded3d
SelfScatteringKernelGridded3dGet(ConstHandle2SelfScatteringKernel This)
{
   return detail::getField<CPP,Handle2Gridded3d>
      (CLASSNAME, CLASSNAME+"Gridded3dGet", This, extract::gridded3d);
}

// Set
void
SelfScatteringKernelGridded3dSet(ConstHandle2SelfScatteringKernel This, ConstHandle2ConstGridded3d gridded3d)
{
   detail::setField<CPP,CPPGridded3d>
      (CLASSNAME, CLASSNAME+"Gridded3dSet", This, extract::gridded3d, gridded3d);
}


// -----------------------------------------------------------------------------
// Child: SCTApproximation
// -----------------------------------------------------------------------------

// Has
int
SelfScatteringKernelSCTApproximationHas(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SCTApproximationHas", This, extract::SCTApproximation);
}

// Get, const
Handle2ConstSCTApproximation
SelfScatteringKernelSCTApproximationGetConst(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::getField<CPP,Handle2ConstSCTApproximation>
      (CLASSNAME, CLASSNAME+"SCTApproximationGetConst", This, extract::SCTApproximation);
}

// Get, non-const
Handle2SCTApproximation
SelfScatteringKernelSCTApproximationGet(ConstHandle2SelfScatteringKernel This)
{
   return detail::getField<CPP,Handle2SCTApproximation>
      (CLASSNAME, CLASSNAME+"SCTApproximationGet", This, extract::SCTApproximation);
}

// Set
void
SelfScatteringKernelSCTApproximationSet(ConstHandle2SelfScatteringKernel This, ConstHandle2ConstSCTApproximation SCTApproximation)
{
   detail::setField<CPP,CPPSCTApproximation>
      (CLASSNAME, CLASSNAME+"SCTApproximationSet", This, extract::SCTApproximation, SCTApproximation);
}


// -----------------------------------------------------------------------------
// Child: freeGasApproximation
// -----------------------------------------------------------------------------

// Has
int
SelfScatteringKernelFreeGasApproximationHas(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FreeGasApproximationHas", This, extract::freeGasApproximation);
}

// Get, const
Handle2ConstFreeGasApproximation
SelfScatteringKernelFreeGasApproximationGetConst(ConstHandle2ConstSelfScatteringKernel This)
{
   return detail::getField<CPP,Handle2ConstFreeGasApproximation>
      (CLASSNAME, CLASSNAME+"FreeGasApproximationGetConst", This, extract::freeGasApproximation);
}

// Get, non-const
Handle2FreeGasApproximation
SelfScatteringKernelFreeGasApproximationGet(ConstHandle2SelfScatteringKernel This)
{
   return detail::getField<CPP,Handle2FreeGasApproximation>
      (CLASSNAME, CLASSNAME+"FreeGasApproximationGet", This, extract::freeGasApproximation);
}

// Set
void
SelfScatteringKernelFreeGasApproximationSet(ConstHandle2SelfScatteringKernel This, ConstHandle2ConstFreeGasApproximation freeGasApproximation)
{
   detail::setField<CPP,CPPFreeGasApproximation>
      (CLASSNAME, CLASSNAME+"FreeGasApproximationSet", This, extract::freeGasApproximation, freeGasApproximation);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/SelfScatteringKernel/src/custom.cpp"
