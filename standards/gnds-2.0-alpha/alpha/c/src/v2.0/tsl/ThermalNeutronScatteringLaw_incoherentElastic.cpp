
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/tsl/ThermalNeutronScatteringLaw_incoherentElastic.hpp"
#include "ThermalNeutronScatteringLaw_incoherentElastic.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ThermalNeutronScatteringLaw_incoherentElasticClass;
using CPP = multigroup::ThermalNeutronScatteringLaw_incoherentElastic;

static const std::string CLASSNAME = "ThermalNeutronScatteringLaw_incoherentElastic";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto pid = [](auto &obj) { return &obj.pid; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto boundAtomCrossSection = [](auto &obj) { return &obj.boundAtomCrossSection; };
   static auto DebyeWallerIntegral = [](auto &obj) { return &obj.DebyeWallerIntegral; };
}

using CPPBoundAtomCrossSection = tsl::BoundAtomCrossSection;
using CPPDebyeWallerIntegral = tsl::DebyeWallerIntegral;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstThermalNeutronScatteringLaw_incoherentElastic
ThermalNeutronScatteringLaw_incoherentElasticDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ThermalNeutronScatteringLaw_incoherentElastic
ThermalNeutronScatteringLaw_incoherentElasticDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstThermalNeutronScatteringLaw_incoherentElastic
ThermalNeutronScatteringLaw_incoherentElasticCreateConst(
   const char *const label,
   const char *const pid,
   const char *const productFrame,
   ConstHandle2ConstBoundAtomCrossSection boundAtomCrossSection,
   ConstHandle2ConstDebyeWallerIntegral DebyeWallerIntegral
) {
   ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      pid,
      productFrame,
      detail::tocpp<CPPBoundAtomCrossSection>(boundAtomCrossSection),
      detail::tocpp<CPPDebyeWallerIntegral>(DebyeWallerIntegral)
   );
   return handle;
}

// Create, general
Handle2ThermalNeutronScatteringLaw_incoherentElastic
ThermalNeutronScatteringLaw_incoherentElasticCreate(
   const char *const label,
   const char *const pid,
   const char *const productFrame,
   ConstHandle2ConstBoundAtomCrossSection boundAtomCrossSection,
   ConstHandle2ConstDebyeWallerIntegral DebyeWallerIntegral
) {
   ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      pid,
      productFrame,
      detail::tocpp<CPPBoundAtomCrossSection>(boundAtomCrossSection),
      detail::tocpp<CPPDebyeWallerIntegral>(DebyeWallerIntegral)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ThermalNeutronScatteringLaw_incoherentElasticAssign(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ThermalNeutronScatteringLaw_incoherentElasticDelete(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ThermalNeutronScatteringLaw_incoherentElasticRead(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ThermalNeutronScatteringLaw_incoherentElasticWrite(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ThermalNeutronScatteringLaw_incoherentElasticPrint(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ThermalNeutronScatteringLaw_incoherentElasticPrintXML(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ThermalNeutronScatteringLaw_incoherentElasticPrintJSON(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentElasticLabelHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
const char *
ThermalNeutronScatteringLaw_incoherentElasticLabelGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentElasticLabelSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentElasticPidHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PidHas", This, extract::pid);
}

// Get
// Returns by value
const char *
ThermalNeutronScatteringLaw_incoherentElasticPidGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PidGet", This, extract::pid);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentElasticPidSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, const char *const pid)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PidSet", This, extract::pid, pid);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentElasticProductFrameHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", This, extract::productFrame);
}

// Get
// Returns by value
const char *
ThermalNeutronScatteringLaw_incoherentElasticProductFrameGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", This, extract::productFrame);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentElasticProductFrameSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, const char *const productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", This, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: boundAtomCrossSection
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentElasticBoundAtomCrossSectionHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionHas", This, extract::boundAtomCrossSection);
}

// Get, const
Handle2ConstBoundAtomCrossSection
ThermalNeutronScatteringLaw_incoherentElasticBoundAtomCrossSectionGetConst(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP,Handle2ConstBoundAtomCrossSection>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionGetConst", This, extract::boundAtomCrossSection);
}

// Get, non-const
Handle2BoundAtomCrossSection
ThermalNeutronScatteringLaw_incoherentElasticBoundAtomCrossSectionGet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP,Handle2BoundAtomCrossSection>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionGet", This, extract::boundAtomCrossSection);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentElasticBoundAtomCrossSectionSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, ConstHandle2ConstBoundAtomCrossSection boundAtomCrossSection)
{
   detail::setField<CPP,CPPBoundAtomCrossSection>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionSet", This, extract::boundAtomCrossSection, boundAtomCrossSection);
}


// -----------------------------------------------------------------------------
// Child: DebyeWallerIntegral
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentElasticDebyeWallerIntegralHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DebyeWallerIntegralHas", This, extract::DebyeWallerIntegral);
}

// Get, const
Handle2ConstDebyeWallerIntegral
ThermalNeutronScatteringLaw_incoherentElasticDebyeWallerIntegralGetConst(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP,Handle2ConstDebyeWallerIntegral>
      (CLASSNAME, CLASSNAME+"DebyeWallerIntegralGetConst", This, extract::DebyeWallerIntegral);
}

// Get, non-const
Handle2DebyeWallerIntegral
ThermalNeutronScatteringLaw_incoherentElasticDebyeWallerIntegralGet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This)
{
   return detail::getField<CPP,Handle2DebyeWallerIntegral>
      (CLASSNAME, CLASSNAME+"DebyeWallerIntegralGet", This, extract::DebyeWallerIntegral);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentElasticDebyeWallerIntegralSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentElastic This, ConstHandle2ConstDebyeWallerIntegral DebyeWallerIntegral)
{
   detail::setField<CPP,CPPDebyeWallerIntegral>
      (CLASSNAME, CLASSNAME+"DebyeWallerIntegralSet", This, extract::DebyeWallerIntegral, DebyeWallerIntegral);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/ThermalNeutronScatteringLaw_incoherentElastic/src/custom.cpp"
