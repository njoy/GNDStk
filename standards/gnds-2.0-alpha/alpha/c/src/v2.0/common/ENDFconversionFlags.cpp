
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/common/ENDFconversionFlags.hpp"
#include "ENDFconversionFlags.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ENDFconversionFlagsClass;
using CPP = multigroup::ENDFconversionFlags;

static const std::string CLASSNAME = "ENDFconversionFlags";

namespace extract {
   static auto flags = [](auto &obj) { return &obj.flags; };
   static auto href = [](auto &obj) { return &obj.href; };
   static auto conversion = [](auto &obj) { return &obj.conversion; };
}

using CPPConversion = common::Conversion;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstENDFconversionFlags
ENDFconversionFlagsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ENDFconversionFlags
ENDFconversionFlagsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstENDFconversionFlags
ENDFconversionFlagsCreateConst(
   const char *const flags,
   const char *const href,
   ConstHandle2Conversion *const conversion, const size_t conversionSize
) {
   ConstHandle2ENDFconversionFlags handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      flags,
      href,
      std::vector<CPPConversion>{}
   );
   for (size_t ConversionN = 0; ConversionN < conversionSize; ++ConversionN)
      ENDFconversionFlagsConversionAdd(handle, conversion[ConversionN]);
   return handle;
}

// Create, general
Handle2ENDFconversionFlags
ENDFconversionFlagsCreate(
   const char *const flags,
   const char *const href,
   ConstHandle2Conversion *const conversion, const size_t conversionSize
) {
   ConstHandle2ENDFconversionFlags handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      flags,
      href,
      std::vector<CPPConversion>{}
   );
   for (size_t ConversionN = 0; ConversionN < conversionSize; ++ConversionN)
      ENDFconversionFlagsConversionAdd(handle, conversion[ConversionN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ENDFconversionFlagsAssign(ConstHandle2ENDFconversionFlags This, ConstHandle2ConstENDFconversionFlags from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ENDFconversionFlagsDelete(ConstHandle2ConstENDFconversionFlags This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ENDFconversionFlagsRead(ConstHandle2ENDFconversionFlags This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ENDFconversionFlagsWrite(ConstHandle2ConstENDFconversionFlags This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ENDFconversionFlagsPrint(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ENDFconversionFlagsPrintXML(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ENDFconversionFlagsPrintJSON(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: flags
// -----------------------------------------------------------------------------

// Has
int
ENDFconversionFlagsFlagsHas(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FlagsHas", This, extract::flags);
}

// Get
// Returns by value
const char *
ENDFconversionFlagsFlagsGet(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FlagsGet", This, extract::flags);
}

// Set
void
ENDFconversionFlagsFlagsSet(ConstHandle2ENDFconversionFlags This, const char *const flags)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FlagsSet", This, extract::flags, flags);
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
ENDFconversionFlagsHrefHas(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
const char *
ENDFconversionFlagsHrefGet(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
ENDFconversionFlagsHrefSet(ConstHandle2ENDFconversionFlags This, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}


// -----------------------------------------------------------------------------
// Child: conversion
// -----------------------------------------------------------------------------

// Has
int
ENDFconversionFlagsConversionHas(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ConversionHas", This, extract::conversion);
}

// Clear
void
ENDFconversionFlagsConversionClear(ConstHandle2ENDFconversionFlags This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ConversionClear", This, extract::conversion);
}

// Size
size_t
ENDFconversionFlagsConversionSize(ConstHandle2ConstENDFconversionFlags This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ConversionSize", This, extract::conversion);
}

// Add
void
ENDFconversionFlagsConversionAdd(ConstHandle2ENDFconversionFlags This, ConstHandle2ConstConversion conversion)
{
   detail::addToContainer<CPP,CPPConversion>
      (CLASSNAME, CLASSNAME+"ConversionAdd", This, extract::conversion, conversion);
}

// Get, by index \in [0,size), const
Handle2ConstConversion
ENDFconversionFlagsConversionGetConst(ConstHandle2ConstENDFconversionFlags This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstConversion>
      (CLASSNAME, CLASSNAME+"ConversionGetConst", This, extract::conversion, index_);
}

// Get, by index \in [0,size), non-const
Handle2Conversion
ENDFconversionFlagsConversionGet(ConstHandle2ENDFconversionFlags This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Conversion>
      (CLASSNAME, CLASSNAME+"ConversionGet", This, extract::conversion, index_);
}

// Set, by index \in [0,size)
void
ENDFconversionFlagsConversionSet(
   ConstHandle2ENDFconversionFlags This,
   const size_t index_,
   ConstHandle2ConstConversion conversion
) {
   detail::setByIndex<CPP,CPPConversion>
      (CLASSNAME, CLASSNAME+"ConversionSet", This, extract::conversion, index_, conversion);
}

// Has, by flags
int
ENDFconversionFlagsConversionHasByFlags(
   ConstHandle2ConstENDFconversionFlags This,
   const char *const flags
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ConversionHasByFlags",
       This, extract::conversion, meta::flags, flags);
}

// Get, by flags, const
Handle2ConstConversion
ENDFconversionFlagsConversionGetByFlagsConst(
   ConstHandle2ConstENDFconversionFlags This,
   const char *const flags
) {
   return detail::getByMetadatum<CPP,Handle2ConstConversion>
      (CLASSNAME, CLASSNAME+"ConversionGetByFlagsConst",
       This, extract::conversion, meta::flags, flags);
}

// Get, by flags, non-const
Handle2Conversion
ENDFconversionFlagsConversionGetByFlags(
   ConstHandle2ENDFconversionFlags This,
   const char *const flags
) {
   return detail::getByMetadatum<CPP,Handle2Conversion>
      (CLASSNAME, CLASSNAME+"ConversionGetByFlags",
       This, extract::conversion, meta::flags, flags);
}

// Set, by flags
void
ENDFconversionFlagsConversionSetByFlags(
   ConstHandle2ENDFconversionFlags This,
   const char *const flags,
   ConstHandle2ConstConversion conversion
) {
   detail::setByMetadatum<CPP,CPPConversion>
      (CLASSNAME, CLASSNAME+"ConversionSetByFlags",
       This, extract::conversion, meta::flags, flags, conversion);
}

// Has, by href
int
ENDFconversionFlagsConversionHasByHref(
   ConstHandle2ConstENDFconversionFlags This,
   const char *const href
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ConversionHasByHref",
       This, extract::conversion, meta::href, href);
}

// Get, by href, const
Handle2ConstConversion
ENDFconversionFlagsConversionGetByHrefConst(
   ConstHandle2ConstENDFconversionFlags This,
   const char *const href
) {
   return detail::getByMetadatum<CPP,Handle2ConstConversion>
      (CLASSNAME, CLASSNAME+"ConversionGetByHrefConst",
       This, extract::conversion, meta::href, href);
}

// Get, by href, non-const
Handle2Conversion
ENDFconversionFlagsConversionGetByHref(
   ConstHandle2ENDFconversionFlags This,
   const char *const href
) {
   return detail::getByMetadatum<CPP,Handle2Conversion>
      (CLASSNAME, CLASSNAME+"ConversionGetByHref",
       This, extract::conversion, meta::href, href);
}

// Set, by href
void
ENDFconversionFlagsConversionSetByHref(
   ConstHandle2ENDFconversionFlags This,
   const char *const href,
   ConstHandle2ConstConversion conversion
) {
   detail::setByMetadatum<CPP,CPPConversion>
      (CLASSNAME, CLASSNAME+"ConversionSetByHref",
       This, extract::conversion, meta::href, href, conversion);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/common/ENDFconversionFlags/src/custom.cpp"
