
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/common/Nuclide.hpp"
#include "Nuclide.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = NuclideClass;
using CPP = multigroup::Nuclide;

static const std::string CLASSNAME = "Nuclide";

namespace extract {
   static auto id = [](auto &obj) { return &obj.id; };
   static auto mass = [](auto &obj) { return &obj.mass; };
   static auto charge = [](auto &obj) { return &obj.charge; };
   static auto nucleus = [](auto &obj) { return &obj.nucleus; };
   static auto decayData = [](auto &obj) { return &obj.decayData; };
   static auto fissionFragmentData = [](auto &obj) { return &obj.fissionFragmentData; };
}

using CPPMass = common::Mass;
using CPPCharge = common::Charge;
using CPPNucleus = common::Nucleus;
using CPPDecayData = common::DecayData;
using CPPFissionFragmentData = common::FissionFragmentData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstNuclide
NuclideDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Nuclide
NuclideDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstNuclide
NuclideCreateConst(
   const char *const id,
   ConstHandle2ConstMass mass,
   ConstHandle2ConstCharge charge,
   ConstHandle2ConstNucleus nucleus,
   ConstHandle2ConstDecayData decayData,
   ConstHandle2ConstFissionFragmentData fissionFragmentData
) {
   ConstHandle2Nuclide handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      id,
      detail::tocpp<CPPMass>(mass),
      detail::tocpp<CPPCharge>(charge),
      detail::tocpp<CPPNucleus>(nucleus),
      detail::tocpp<CPPDecayData>(decayData),
      detail::tocpp<CPPFissionFragmentData>(fissionFragmentData)
   );
   return handle;
}

// Create, general
Handle2Nuclide
NuclideCreate(
   const char *const id,
   ConstHandle2ConstMass mass,
   ConstHandle2ConstCharge charge,
   ConstHandle2ConstNucleus nucleus,
   ConstHandle2ConstDecayData decayData,
   ConstHandle2ConstFissionFragmentData fissionFragmentData
) {
   ConstHandle2Nuclide handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      id,
      detail::tocpp<CPPMass>(mass),
      detail::tocpp<CPPCharge>(charge),
      detail::tocpp<CPPNucleus>(nucleus),
      detail::tocpp<CPPDecayData>(decayData),
      detail::tocpp<CPPFissionFragmentData>(fissionFragmentData)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
NuclideAssign(ConstHandle2Nuclide This, ConstHandle2ConstNuclide from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
NuclideDelete(ConstHandle2ConstNuclide This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
NuclideRead(ConstHandle2Nuclide This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
NuclideWrite(ConstHandle2ConstNuclide This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
NuclidePrint(ConstHandle2ConstNuclide This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
NuclidePrintXML(ConstHandle2ConstNuclide This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
NuclidePrintJSON(ConstHandle2ConstNuclide This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: id
// -----------------------------------------------------------------------------

// Has
int
NuclideIdHas(ConstHandle2ConstNuclide This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IdHas", This, extract::id);
}

// Get
// Returns by value
const char *
NuclideIdGet(ConstHandle2ConstNuclide This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"IdGet", This, extract::id);
}

// Set
void
NuclideIdSet(ConstHandle2Nuclide This, const char *const id)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"IdSet", This, extract::id, id);
}


// -----------------------------------------------------------------------------
// Child: mass
// -----------------------------------------------------------------------------

// Has
int
NuclideMassHas(ConstHandle2ConstNuclide This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MassHas", This, extract::mass);
}

// Get, const
Handle2ConstMass
NuclideMassGetConst(ConstHandle2ConstNuclide This)
{
   return detail::getField<CPP,Handle2ConstMass>
      (CLASSNAME, CLASSNAME+"MassGetConst", This, extract::mass);
}

// Get, non-const
Handle2Mass
NuclideMassGet(ConstHandle2Nuclide This)
{
   return detail::getField<CPP,Handle2Mass>
      (CLASSNAME, CLASSNAME+"MassGet", This, extract::mass);
}

// Set
void
NuclideMassSet(ConstHandle2Nuclide This, ConstHandle2ConstMass mass)
{
   detail::setField<CPP,CPPMass>
      (CLASSNAME, CLASSNAME+"MassSet", This, extract::mass, mass);
}


// -----------------------------------------------------------------------------
// Child: charge
// -----------------------------------------------------------------------------

// Has
int
NuclideChargeHas(ConstHandle2ConstNuclide This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChargeHas", This, extract::charge);
}

// Get, const
Handle2ConstCharge
NuclideChargeGetConst(ConstHandle2ConstNuclide This)
{
   return detail::getField<CPP,Handle2ConstCharge>
      (CLASSNAME, CLASSNAME+"ChargeGetConst", This, extract::charge);
}

// Get, non-const
Handle2Charge
NuclideChargeGet(ConstHandle2Nuclide This)
{
   return detail::getField<CPP,Handle2Charge>
      (CLASSNAME, CLASSNAME+"ChargeGet", This, extract::charge);
}

// Set
void
NuclideChargeSet(ConstHandle2Nuclide This, ConstHandle2ConstCharge charge)
{
   detail::setField<CPP,CPPCharge>
      (CLASSNAME, CLASSNAME+"ChargeSet", This, extract::charge, charge);
}


// -----------------------------------------------------------------------------
// Child: nucleus
// -----------------------------------------------------------------------------

// Has
int
NuclideNucleusHas(ConstHandle2ConstNuclide This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NucleusHas", This, extract::nucleus);
}

// Get, const
Handle2ConstNucleus
NuclideNucleusGetConst(ConstHandle2ConstNuclide This)
{
   return detail::getField<CPP,Handle2ConstNucleus>
      (CLASSNAME, CLASSNAME+"NucleusGetConst", This, extract::nucleus);
}

// Get, non-const
Handle2Nucleus
NuclideNucleusGet(ConstHandle2Nuclide This)
{
   return detail::getField<CPP,Handle2Nucleus>
      (CLASSNAME, CLASSNAME+"NucleusGet", This, extract::nucleus);
}

// Set
void
NuclideNucleusSet(ConstHandle2Nuclide This, ConstHandle2ConstNucleus nucleus)
{
   detail::setField<CPP,CPPNucleus>
      (CLASSNAME, CLASSNAME+"NucleusSet", This, extract::nucleus, nucleus);
}


// -----------------------------------------------------------------------------
// Child: decayData
// -----------------------------------------------------------------------------

// Has
int
NuclideDecayDataHas(ConstHandle2ConstNuclide This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DecayDataHas", This, extract::decayData);
}

// Get, const
Handle2ConstDecayData
NuclideDecayDataGetConst(ConstHandle2ConstNuclide This)
{
   return detail::getField<CPP,Handle2ConstDecayData>
      (CLASSNAME, CLASSNAME+"DecayDataGetConst", This, extract::decayData);
}

// Get, non-const
Handle2DecayData
NuclideDecayDataGet(ConstHandle2Nuclide This)
{
   return detail::getField<CPP,Handle2DecayData>
      (CLASSNAME, CLASSNAME+"DecayDataGet", This, extract::decayData);
}

// Set
void
NuclideDecayDataSet(ConstHandle2Nuclide This, ConstHandle2ConstDecayData decayData)
{
   detail::setField<CPP,CPPDecayData>
      (CLASSNAME, CLASSNAME+"DecayDataSet", This, extract::decayData, decayData);
}


// -----------------------------------------------------------------------------
// Child: fissionFragmentData
// -----------------------------------------------------------------------------

// Has
int
NuclideFissionFragmentDataHas(ConstHandle2ConstNuclide This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataHas", This, extract::fissionFragmentData);
}

// Get, const
Handle2ConstFissionFragmentData
NuclideFissionFragmentDataGetConst(ConstHandle2ConstNuclide This)
{
   return detail::getField<CPP,Handle2ConstFissionFragmentData>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataGetConst", This, extract::fissionFragmentData);
}

// Get, non-const
Handle2FissionFragmentData
NuclideFissionFragmentDataGet(ConstHandle2Nuclide This)
{
   return detail::getField<CPP,Handle2FissionFragmentData>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataGet", This, extract::fissionFragmentData);
}

// Set
void
NuclideFissionFragmentDataSet(ConstHandle2Nuclide This, ConstHandle2ConstFissionFragmentData fissionFragmentData)
{
   detail::setField<CPP,CPPFissionFragmentData>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataSet", This, extract::fissionFragmentData, fissionFragmentData);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/common/Nuclide/src/custom.cpp"
