
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Unresolved is the basic handle type in this file. Example:
//    // Create a default Unresolved object:
//    Unresolved handle = UnresolvedDefault();
// Functions involving Unresolved are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_ALPHA_V2_0_GENERAL_UNRESOLVED
#define C_INTERFACE_ALPHA_V2_0_GENERAL_UNRESOLVED

#include "GNDStk.h"
#include "v2.0/general/TabulatedWidths.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct UnresolvedClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Unresolved
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct UnresolvedClass *Unresolved;

// --- Const-aware handles.
typedef const struct UnresolvedClass *const ConstHandle2ConstUnresolved;
typedef       struct UnresolvedClass *const ConstHandle2Unresolved;
typedef const struct UnresolvedClass *      Handle2ConstUnresolved;
typedef       struct UnresolvedClass *      Handle2Unresolved;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstUnresolved
UnresolvedDefaultConst();

// +++ Create, default
extern_c Handle2Unresolved
UnresolvedDefault();

// --- Create, general, const
extern_c Handle2ConstUnresolved
UnresolvedCreateConst(
   const double domainMin,
   const double domainMax,
   const char *const domainUnit,
   ConstHandle2ConstTabulatedWidths tabulatedWidths
);

// +++ Create, general
extern_c Handle2Unresolved
UnresolvedCreate(
   const double domainMin,
   const double domainMax,
   const char *const domainUnit,
   ConstHandle2ConstTabulatedWidths tabulatedWidths
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
UnresolvedAssign(ConstHandle2Unresolved self, ConstHandle2ConstUnresolved from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
UnresolvedDelete(ConstHandle2ConstUnresolved self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
UnresolvedRead(ConstHandle2Unresolved self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
UnresolvedWrite(ConstHandle2ConstUnresolved self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
UnresolvedPrint(ConstHandle2ConstUnresolved self);

// +++ Print to standard output, as XML
extern_c int
UnresolvedPrintXML(ConstHandle2ConstUnresolved self);

// +++ Print to standard output, as JSON
extern_c int
UnresolvedPrintJSON(ConstHandle2ConstUnresolved self);


// -----------------------------------------------------------------------------
// Metadatum: domainMin
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UnresolvedDomainMinHas(ConstHandle2ConstUnresolved self);

// +++ Get
// +++ Returns by value
extern_c double
UnresolvedDomainMinGet(ConstHandle2ConstUnresolved self);

// +++ Set
extern_c void
UnresolvedDomainMinSet(ConstHandle2Unresolved self, const double domainMin);


// -----------------------------------------------------------------------------
// Metadatum: domainMax
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UnresolvedDomainMaxHas(ConstHandle2ConstUnresolved self);

// +++ Get
// +++ Returns by value
extern_c double
UnresolvedDomainMaxGet(ConstHandle2ConstUnresolved self);

// +++ Set
extern_c void
UnresolvedDomainMaxSet(ConstHandle2Unresolved self, const double domainMax);


// -----------------------------------------------------------------------------
// Metadatum: domainUnit
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UnresolvedDomainUnitHas(ConstHandle2ConstUnresolved self);

// +++ Get
// +++ Returns by value
extern_c const char *
UnresolvedDomainUnitGet(ConstHandle2ConstUnresolved self);

// +++ Set
extern_c void
UnresolvedDomainUnitSet(ConstHandle2Unresolved self, const char *const domainUnit);


// -----------------------------------------------------------------------------
// Child: tabulatedWidths
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UnresolvedTabulatedWidthsHas(ConstHandle2ConstUnresolved self);

// --- Get, const
extern_c Handle2ConstTabulatedWidths
UnresolvedTabulatedWidthsGetConst(ConstHandle2ConstUnresolved self);

// +++ Get, non-const
extern_c Handle2TabulatedWidths
UnresolvedTabulatedWidthsGet(ConstHandle2Unresolved self);

// +++ Set
extern_c void
UnresolvedTabulatedWidthsSet(ConstHandle2Unresolved self, ConstHandle2ConstTabulatedWidths tabulatedWidths);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Unresolved/src/custom.h"

#undef extern_c
#endif
