
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/Array.hpp"
#include "Array.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ArrayClass;
using CPP = multigroup::Array;

static const std::string CLASSNAME = "Array";

namespace extract {
   static auto shape = [](auto &obj) { return &obj.shape; };
   static auto compression = [](auto &obj) { return &obj.compression; };
   static auto values = [](auto &obj) { return &obj.values; };
}

using CPPValues = general::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstArray
ArrayDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Array
ArrayDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstArray
ArrayCreateConst(
   const char *const shape,
   const char *const compression,
   ConstHandle2ConstValues values
) {
   ConstHandle2Array handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      shape,
      compression,
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Create, general
Handle2Array
ArrayCreate(
   const char *const shape,
   const char *const compression,
   ConstHandle2ConstValues values
) {
   ConstHandle2Array handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      shape,
      compression,
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ArrayAssign(ConstHandle2Array This, ConstHandle2ConstArray from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ArrayDelete(ConstHandle2ConstArray This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ArrayRead(ConstHandle2Array This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ArrayWrite(ConstHandle2ConstArray This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ArrayPrint(ConstHandle2ConstArray This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ArrayPrintXML(ConstHandle2ConstArray This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ArrayPrintJSON(ConstHandle2ConstArray This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: shape
// -----------------------------------------------------------------------------

// Has
int
ArrayShapeHas(ConstHandle2ConstArray This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ShapeHas", This, extract::shape);
}

// Get
// Returns by value
const char *
ArrayShapeGet(ConstHandle2ConstArray This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ShapeGet", This, extract::shape);
}

// Set
void
ArrayShapeSet(ConstHandle2Array This, const char *const shape)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ShapeSet", This, extract::shape, shape);
}


// -----------------------------------------------------------------------------
// Metadatum: compression
// -----------------------------------------------------------------------------

// Has
int
ArrayCompressionHas(ConstHandle2ConstArray This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CompressionHas", This, extract::compression);
}

// Get
// Returns by value
const char *
ArrayCompressionGet(ConstHandle2ConstArray This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CompressionGet", This, extract::compression);
}

// Set
void
ArrayCompressionSet(ConstHandle2Array This, const char *const compression)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CompressionSet", This, extract::compression, compression);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
ArrayValuesHas(ConstHandle2ConstArray This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", This, extract::values);
}

// Get, const
Handle2ConstValues
ArrayValuesGetConst(ConstHandle2ConstArray This)
{
   return detail::getField<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", This, extract::values);
}

// Get, non-const
Handle2Values
ArrayValuesGet(ConstHandle2Array This)
{
   return detail::getField<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", This, extract::values);
}

// Set
void
ArrayValuesSet(ConstHandle2Array This, ConstHandle2ConstValues values)
{
   detail::setField<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", This, extract::values, values);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Array/src/custom.cpp"
