
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/ImaginaryInterferenceTerm.hpp"
#include "ImaginaryInterferenceTerm.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ImaginaryInterferenceTermClass;
using CPP = multigroup::ImaginaryInterferenceTerm;

static const std::string CLASSNAME = "ImaginaryInterferenceTerm";

namespace extract {
   static auto regions2d = [](auto &obj) { return &obj.regions2d; };
   static auto XYs2d = [](auto &obj) { return &obj.XYs2d; };
}

using CPPRegions2d = general::Regions2d;
using CPPXYs2d = general::XYs2d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstImaginaryInterferenceTerm
ImaginaryInterferenceTermDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ImaginaryInterferenceTerm
ImaginaryInterferenceTermDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstImaginaryInterferenceTerm
ImaginaryInterferenceTermCreateConst(
   ConstHandle2ConstRegions2d regions2d,
   ConstHandle2ConstXYs2d XYs2d
) {
   ConstHandle2ImaginaryInterferenceTerm handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPRegions2d>(regions2d),
      detail::tocpp<CPPXYs2d>(XYs2d)
   );
   return handle;
}

// Create, general
Handle2ImaginaryInterferenceTerm
ImaginaryInterferenceTermCreate(
   ConstHandle2ConstRegions2d regions2d,
   ConstHandle2ConstXYs2d XYs2d
) {
   ConstHandle2ImaginaryInterferenceTerm handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPRegions2d>(regions2d),
      detail::tocpp<CPPXYs2d>(XYs2d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ImaginaryInterferenceTermAssign(ConstHandle2ImaginaryInterferenceTerm This, ConstHandle2ConstImaginaryInterferenceTerm from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ImaginaryInterferenceTermDelete(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ImaginaryInterferenceTermRead(ConstHandle2ImaginaryInterferenceTerm This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ImaginaryInterferenceTermWrite(ConstHandle2ConstImaginaryInterferenceTerm This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ImaginaryInterferenceTermPrint(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ImaginaryInterferenceTermPrintXML(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ImaginaryInterferenceTermPrintJSON(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: regions2d
// -----------------------------------------------------------------------------

// Has
int
ImaginaryInterferenceTermRegions2dHas(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Regions2dHas", This, extract::regions2d);
}

// Get, const
Handle2ConstRegions2d
ImaginaryInterferenceTermRegions2dGetConst(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::getField<CPP,Handle2ConstRegions2d>
      (CLASSNAME, CLASSNAME+"Regions2dGetConst", This, extract::regions2d);
}

// Get, non-const
Handle2Regions2d
ImaginaryInterferenceTermRegions2dGet(ConstHandle2ImaginaryInterferenceTerm This)
{
   return detail::getField<CPP,Handle2Regions2d>
      (CLASSNAME, CLASSNAME+"Regions2dGet", This, extract::regions2d);
}

// Set
void
ImaginaryInterferenceTermRegions2dSet(ConstHandle2ImaginaryInterferenceTerm This, ConstHandle2ConstRegions2d regions2d)
{
   detail::setField<CPP,CPPRegions2d>
      (CLASSNAME, CLASSNAME+"Regions2dSet", This, extract::regions2d, regions2d);
}


// -----------------------------------------------------------------------------
// Child: XYs2d
// -----------------------------------------------------------------------------

// Has
int
ImaginaryInterferenceTermXYs2dHas(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHas", This, extract::XYs2d);
}

// Get, const
Handle2ConstXYs2d
ImaginaryInterferenceTermXYs2dGetConst(ConstHandle2ConstImaginaryInterferenceTerm This)
{
   return detail::getField<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetConst", This, extract::XYs2d);
}

// Get, non-const
Handle2XYs2d
ImaginaryInterferenceTermXYs2dGet(ConstHandle2ImaginaryInterferenceTerm This)
{
   return detail::getField<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGet", This, extract::XYs2d);
}

// Set
void
ImaginaryInterferenceTermXYs2dSet(ConstHandle2ImaginaryInterferenceTerm This, ConstHandle2ConstXYs2d XYs2d)
{
   detail::setField<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSet", This, extract::XYs2d, XYs2d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ImaginaryInterferenceTerm/src/custom.cpp"
