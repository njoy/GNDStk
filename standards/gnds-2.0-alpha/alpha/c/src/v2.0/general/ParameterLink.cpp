
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/ParameterLink.hpp"
#include "ParameterLink.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ParameterLinkClass;
using CPP = multigroup::ParameterLink;

static const std::string CLASSNAME = "ParameterLink";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto href = [](auto &obj) { return &obj.href; };
   static auto nParameters = [](auto &obj) { return &obj.nParameters; };
   static auto matrixStartIndex = [](auto &obj) { return &obj.matrixStartIndex; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstParameterLink
ParameterLinkDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ParameterLink
ParameterLinkDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstParameterLink
ParameterLinkCreateConst(
   const char *const label,
   const char *const href,
   const int nParameters,
   const int matrixStartIndex
) {
   ConstHandle2ParameterLink handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      href,
      nParameters,
      matrixStartIndex
   );
   return handle;
}

// Create, general
Handle2ParameterLink
ParameterLinkCreate(
   const char *const label,
   const char *const href,
   const int nParameters,
   const int matrixStartIndex
) {
   ConstHandle2ParameterLink handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      href,
      nParameters,
      matrixStartIndex
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ParameterLinkAssign(ConstHandle2ParameterLink This, ConstHandle2ConstParameterLink from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ParameterLinkDelete(ConstHandle2ConstParameterLink This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ParameterLinkRead(ConstHandle2ParameterLink This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ParameterLinkWrite(ConstHandle2ConstParameterLink This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ParameterLinkPrint(ConstHandle2ConstParameterLink This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ParameterLinkPrintXML(ConstHandle2ConstParameterLink This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ParameterLinkPrintJSON(ConstHandle2ConstParameterLink This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ParameterLinkLabelHas(ConstHandle2ConstParameterLink This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
const char *
ParameterLinkLabelGet(ConstHandle2ConstParameterLink This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
ParameterLinkLabelSet(ConstHandle2ParameterLink This, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
ParameterLinkHrefHas(ConstHandle2ConstParameterLink This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
const char *
ParameterLinkHrefGet(ConstHandle2ConstParameterLink This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
ParameterLinkHrefSet(ConstHandle2ParameterLink This, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}


// -----------------------------------------------------------------------------
// Metadatum: nParameters
// -----------------------------------------------------------------------------

// Has
int
ParameterLinkNParametersHas(ConstHandle2ConstParameterLink This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NParametersHas", This, extract::nParameters);
}

// Get
// Returns by value
int
ParameterLinkNParametersGet(ConstHandle2ConstParameterLink This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NParametersGet", This, extract::nParameters);
}

// Set
void
ParameterLinkNParametersSet(ConstHandle2ParameterLink This, const int nParameters)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NParametersSet", This, extract::nParameters, nParameters);
}


// -----------------------------------------------------------------------------
// Metadatum: matrixStartIndex
// -----------------------------------------------------------------------------

// Has
int
ParameterLinkMatrixStartIndexHas(ConstHandle2ConstParameterLink This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MatrixStartIndexHas", This, extract::matrixStartIndex);
}

// Get
// Returns by value
int
ParameterLinkMatrixStartIndexGet(ConstHandle2ConstParameterLink This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"MatrixStartIndexGet", This, extract::matrixStartIndex);
}

// Set
void
ParameterLinkMatrixStartIndexSet(ConstHandle2ParameterLink This, const int matrixStartIndex)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"MatrixStartIndexSet", This, extract::matrixStartIndex, matrixStartIndex);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ParameterLink/src/custom.cpp"
