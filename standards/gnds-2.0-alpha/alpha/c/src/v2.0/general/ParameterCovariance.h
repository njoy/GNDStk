
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// ParameterCovariance is the basic handle type in this file. Example:
//    // Create a default ParameterCovariance object:
//    ParameterCovariance handle = ParameterCovarianceDefault();
// Functions involving ParameterCovariance are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_ALPHA_V2_0_GENERAL_PARAMETERCOVARIANCE
#define C_INTERFACE_ALPHA_V2_0_GENERAL_PARAMETERCOVARIANCE

#include "GNDStk.h"
#include "v2.0/general/RowData.h"
#include "v2.0/general/ParameterCovarianceMatrix.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ParameterCovarianceClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ParameterCovariance
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ParameterCovarianceClass *ParameterCovariance;

// --- Const-aware handles.
typedef const struct ParameterCovarianceClass *const ConstHandle2ConstParameterCovariance;
typedef       struct ParameterCovarianceClass *const ConstHandle2ParameterCovariance;
typedef const struct ParameterCovarianceClass *      Handle2ConstParameterCovariance;
typedef       struct ParameterCovarianceClass *      Handle2ParameterCovariance;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstParameterCovariance
ParameterCovarianceDefaultConst();

// +++ Create, default
extern_c Handle2ParameterCovariance
ParameterCovarianceDefault();

// --- Create, general, const
extern_c Handle2ConstParameterCovariance
ParameterCovarianceCreateConst(
   const char *const label,
   ConstHandle2ConstRowData rowData,
   ConstHandle2ConstParameterCovarianceMatrix parameterCovarianceMatrix
);

// +++ Create, general
extern_c Handle2ParameterCovariance
ParameterCovarianceCreate(
   const char *const label,
   ConstHandle2ConstRowData rowData,
   ConstHandle2ConstParameterCovarianceMatrix parameterCovarianceMatrix
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ParameterCovarianceAssign(ConstHandle2ParameterCovariance This, ConstHandle2ConstParameterCovariance from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ParameterCovarianceDelete(ConstHandle2ConstParameterCovariance This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ParameterCovarianceRead(ConstHandle2ParameterCovariance This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ParameterCovarianceWrite(ConstHandle2ConstParameterCovariance This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ParameterCovariancePrint(ConstHandle2ConstParameterCovariance This);

// +++ Print to standard output, as XML
extern_c int
ParameterCovariancePrintXML(ConstHandle2ConstParameterCovariance This);

// +++ Print to standard output, as JSON
extern_c int
ParameterCovariancePrintJSON(ConstHandle2ConstParameterCovariance This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ParameterCovarianceLabelHas(ConstHandle2ConstParameterCovariance This);

// +++ Get
// +++ Returns by value
extern_c const char *
ParameterCovarianceLabelGet(ConstHandle2ConstParameterCovariance This);

// +++ Set
extern_c void
ParameterCovarianceLabelSet(ConstHandle2ParameterCovariance This, const char *const label);


// -----------------------------------------------------------------------------
// Child: rowData
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ParameterCovarianceRowDataHas(ConstHandle2ConstParameterCovariance This);

// --- Get, const
extern_c Handle2ConstRowData
ParameterCovarianceRowDataGetConst(ConstHandle2ConstParameterCovariance This);

// +++ Get, non-const
extern_c Handle2RowData
ParameterCovarianceRowDataGet(ConstHandle2ParameterCovariance This);

// +++ Set
extern_c void
ParameterCovarianceRowDataSet(ConstHandle2ParameterCovariance This, ConstHandle2ConstRowData rowData);


// -----------------------------------------------------------------------------
// Child: parameterCovarianceMatrix
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ParameterCovarianceParameterCovarianceMatrixHas(ConstHandle2ConstParameterCovariance This);

// --- Get, const
extern_c Handle2ConstParameterCovarianceMatrix
ParameterCovarianceParameterCovarianceMatrixGetConst(ConstHandle2ConstParameterCovariance This);

// +++ Get, non-const
extern_c Handle2ParameterCovarianceMatrix
ParameterCovarianceParameterCovarianceMatrixGet(ConstHandle2ParameterCovariance This);

// +++ Set
extern_c void
ParameterCovarianceParameterCovarianceMatrixSet(ConstHandle2ParameterCovariance This, ConstHandle2ConstParameterCovarianceMatrix parameterCovarianceMatrix);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ParameterCovariance/src/custom.h"

#undef extern_c
#endif
