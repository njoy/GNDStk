
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/Energy.hpp"
#include "Energy.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = EnergyClass;
using CPP = multigroup::Energy;

static const std::string CLASSNAME = "Energy";

namespace extract {
   static auto value = [](auto &obj) { return &obj.value; };
   static auto unit = [](auto &obj) { return &obj.unit; };
   static auto Double = [](auto &obj) { return &obj.Double; };
   static auto uncertainty = [](auto &obj) { return &obj.uncertainty; };
   static auto NBodyPhaseSpace = [](auto &obj) { return &obj.NBodyPhaseSpace; };
   static auto primaryGamma = [](auto &obj) { return &obj.primaryGamma; };
   static auto discreteGamma = [](auto &obj) { return &obj.discreteGamma; };
   static auto XYs2d = [](auto &obj) { return &obj.XYs2d; };
   static auto generalEvaporation = [](auto &obj) { return &obj.generalEvaporation; };
   static auto evaporation = [](auto &obj) { return &obj.evaporation; };
   static auto weightedFunctionals = [](auto &obj) { return &obj.weightedFunctionals; };
   static auto simpleMaxwellianFission = [](auto &obj) { return &obj.simpleMaxwellianFission; };
   static auto MadlandNix = [](auto &obj) { return &obj.MadlandNix; };
}

using CPPDouble = general::Double;
using CPPUncertainty = general::Uncertainty;
using CPPNBodyPhaseSpace = general::NBodyPhaseSpace;
using CPPPrimaryGamma = general::PrimaryGamma;
using CPPDiscreteGamma = general::DiscreteGamma;
using CPPXYs2d = general::XYs2d;
using CPPGeneralEvaporation = general::GeneralEvaporation;
using CPPEvaporation = general::Evaporation;
using CPPWeightedFunctionals = general::WeightedFunctionals;
using CPPSimpleMaxwellianFission = general::SimpleMaxwellianFission;
using CPPMadlandNix = general::MadlandNix;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstEnergy
EnergyDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Energy
EnergyDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstEnergy
EnergyCreateConst(
   const double value,
   const char *const unit,
   ConstHandle2ConstDouble Double,
   ConstHandle2ConstUncertainty uncertainty,
   ConstHandle2ConstNBodyPhaseSpace NBodyPhaseSpace,
   ConstHandle2ConstPrimaryGamma primaryGamma,
   ConstHandle2ConstDiscreteGamma discreteGamma,
   ConstHandle2ConstXYs2d XYs2d,
   ConstHandle2ConstGeneralEvaporation generalEvaporation,
   ConstHandle2ConstEvaporation evaporation,
   ConstHandle2ConstWeightedFunctionals weightedFunctionals,
   ConstHandle2ConstSimpleMaxwellianFission simpleMaxwellianFission,
   ConstHandle2ConstMadlandNix MadlandNix
) {
   ConstHandle2Energy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      value,
      unit,
      detail::tocpp<CPPDouble>(Double),
      detail::tocpp<CPPUncertainty>(uncertainty),
      detail::tocpp<CPPNBodyPhaseSpace>(NBodyPhaseSpace),
      detail::tocpp<CPPPrimaryGamma>(primaryGamma),
      detail::tocpp<CPPDiscreteGamma>(discreteGamma),
      detail::tocpp<CPPXYs2d>(XYs2d),
      detail::tocpp<CPPGeneralEvaporation>(generalEvaporation),
      detail::tocpp<CPPEvaporation>(evaporation),
      detail::tocpp<CPPWeightedFunctionals>(weightedFunctionals),
      detail::tocpp<CPPSimpleMaxwellianFission>(simpleMaxwellianFission),
      detail::tocpp<CPPMadlandNix>(MadlandNix)
   );
   return handle;
}

// Create, general
Handle2Energy
EnergyCreate(
   const double value,
   const char *const unit,
   ConstHandle2ConstDouble Double,
   ConstHandle2ConstUncertainty uncertainty,
   ConstHandle2ConstNBodyPhaseSpace NBodyPhaseSpace,
   ConstHandle2ConstPrimaryGamma primaryGamma,
   ConstHandle2ConstDiscreteGamma discreteGamma,
   ConstHandle2ConstXYs2d XYs2d,
   ConstHandle2ConstGeneralEvaporation generalEvaporation,
   ConstHandle2ConstEvaporation evaporation,
   ConstHandle2ConstWeightedFunctionals weightedFunctionals,
   ConstHandle2ConstSimpleMaxwellianFission simpleMaxwellianFission,
   ConstHandle2ConstMadlandNix MadlandNix
) {
   ConstHandle2Energy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      value,
      unit,
      detail::tocpp<CPPDouble>(Double),
      detail::tocpp<CPPUncertainty>(uncertainty),
      detail::tocpp<CPPNBodyPhaseSpace>(NBodyPhaseSpace),
      detail::tocpp<CPPPrimaryGamma>(primaryGamma),
      detail::tocpp<CPPDiscreteGamma>(discreteGamma),
      detail::tocpp<CPPXYs2d>(XYs2d),
      detail::tocpp<CPPGeneralEvaporation>(generalEvaporation),
      detail::tocpp<CPPEvaporation>(evaporation),
      detail::tocpp<CPPWeightedFunctionals>(weightedFunctionals),
      detail::tocpp<CPPSimpleMaxwellianFission>(simpleMaxwellianFission),
      detail::tocpp<CPPMadlandNix>(MadlandNix)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
EnergyAssign(ConstHandle2Energy This, ConstHandle2ConstEnergy from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
EnergyDelete(ConstHandle2ConstEnergy This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
EnergyRead(ConstHandle2Energy This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
EnergyWrite(ConstHandle2ConstEnergy This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
EnergyPrint(ConstHandle2ConstEnergy This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
EnergyPrintXML(ConstHandle2ConstEnergy This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
EnergyPrintJSON(ConstHandle2ConstEnergy This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// Has
int
EnergyValueHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValueHas", This, extract::value);
}

// Get
// Returns by value
double
EnergyValueGet(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ValueGet", This, extract::value);
}

// Set
void
EnergyValueSet(ConstHandle2Energy This, const double value)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ValueSet", This, extract::value, value);
}


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// Has
int
EnergyUnitHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnitHas", This, extract::unit);
}

// Get
// Returns by value
const char *
EnergyUnitGet(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"UnitGet", This, extract::unit);
}

// Set
void
EnergyUnitSet(ConstHandle2Energy This, const char *const unit)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"UnitSet", This, extract::unit, unit);
}


// -----------------------------------------------------------------------------
// Child: Double
// -----------------------------------------------------------------------------

// Has
int
EnergyDoubleHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DoubleHas", This, extract::Double);
}

// Get, const
Handle2ConstDouble
EnergyDoubleGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstDouble>
      (CLASSNAME, CLASSNAME+"DoubleGetConst", This, extract::Double);
}

// Get, non-const
Handle2Double
EnergyDoubleGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2Double>
      (CLASSNAME, CLASSNAME+"DoubleGet", This, extract::Double);
}

// Set
void
EnergyDoubleSet(ConstHandle2Energy This, ConstHandle2ConstDouble Double)
{
   detail::setField<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleSet", This, extract::Double, Double);
}


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// Has
int
EnergyUncertaintyHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UncertaintyHas", This, extract::uncertainty);
}

// Get, const
Handle2ConstUncertainty
EnergyUncertaintyGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGetConst", This, extract::uncertainty);
}

// Get, non-const
Handle2Uncertainty
EnergyUncertaintyGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2Uncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGet", This, extract::uncertainty);
}

// Set
void
EnergyUncertaintySet(ConstHandle2Energy This, ConstHandle2ConstUncertainty uncertainty)
{
   detail::setField<CPP,CPPUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintySet", This, extract::uncertainty, uncertainty);
}


// -----------------------------------------------------------------------------
// Child: NBodyPhaseSpace
// -----------------------------------------------------------------------------

// Has
int
EnergyNBodyPhaseSpaceHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NBodyPhaseSpaceHas", This, extract::NBodyPhaseSpace);
}

// Get, const
Handle2ConstNBodyPhaseSpace
EnergyNBodyPhaseSpaceGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstNBodyPhaseSpace>
      (CLASSNAME, CLASSNAME+"NBodyPhaseSpaceGetConst", This, extract::NBodyPhaseSpace);
}

// Get, non-const
Handle2NBodyPhaseSpace
EnergyNBodyPhaseSpaceGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2NBodyPhaseSpace>
      (CLASSNAME, CLASSNAME+"NBodyPhaseSpaceGet", This, extract::NBodyPhaseSpace);
}

// Set
void
EnergyNBodyPhaseSpaceSet(ConstHandle2Energy This, ConstHandle2ConstNBodyPhaseSpace NBodyPhaseSpace)
{
   detail::setField<CPP,CPPNBodyPhaseSpace>
      (CLASSNAME, CLASSNAME+"NBodyPhaseSpaceSet", This, extract::NBodyPhaseSpace, NBodyPhaseSpace);
}


// -----------------------------------------------------------------------------
// Child: primaryGamma
// -----------------------------------------------------------------------------

// Has
int
EnergyPrimaryGammaHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryGammaHas", This, extract::primaryGamma);
}

// Get, const
Handle2ConstPrimaryGamma
EnergyPrimaryGammaGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstPrimaryGamma>
      (CLASSNAME, CLASSNAME+"PrimaryGammaGetConst", This, extract::primaryGamma);
}

// Get, non-const
Handle2PrimaryGamma
EnergyPrimaryGammaGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2PrimaryGamma>
      (CLASSNAME, CLASSNAME+"PrimaryGammaGet", This, extract::primaryGamma);
}

// Set
void
EnergyPrimaryGammaSet(ConstHandle2Energy This, ConstHandle2ConstPrimaryGamma primaryGamma)
{
   detail::setField<CPP,CPPPrimaryGamma>
      (CLASSNAME, CLASSNAME+"PrimaryGammaSet", This, extract::primaryGamma, primaryGamma);
}


// -----------------------------------------------------------------------------
// Child: discreteGamma
// -----------------------------------------------------------------------------

// Has
int
EnergyDiscreteGammaHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DiscreteGammaHas", This, extract::discreteGamma);
}

// Get, const
Handle2ConstDiscreteGamma
EnergyDiscreteGammaGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstDiscreteGamma>
      (CLASSNAME, CLASSNAME+"DiscreteGammaGetConst", This, extract::discreteGamma);
}

// Get, non-const
Handle2DiscreteGamma
EnergyDiscreteGammaGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2DiscreteGamma>
      (CLASSNAME, CLASSNAME+"DiscreteGammaGet", This, extract::discreteGamma);
}

// Set
void
EnergyDiscreteGammaSet(ConstHandle2Energy This, ConstHandle2ConstDiscreteGamma discreteGamma)
{
   detail::setField<CPP,CPPDiscreteGamma>
      (CLASSNAME, CLASSNAME+"DiscreteGammaSet", This, extract::discreteGamma, discreteGamma);
}


// -----------------------------------------------------------------------------
// Child: XYs2d
// -----------------------------------------------------------------------------

// Has
int
EnergyXYs2dHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHas", This, extract::XYs2d);
}

// Get, const
Handle2ConstXYs2d
EnergyXYs2dGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetConst", This, extract::XYs2d);
}

// Get, non-const
Handle2XYs2d
EnergyXYs2dGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGet", This, extract::XYs2d);
}

// Set
void
EnergyXYs2dSet(ConstHandle2Energy This, ConstHandle2ConstXYs2d XYs2d)
{
   detail::setField<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSet", This, extract::XYs2d, XYs2d);
}


// -----------------------------------------------------------------------------
// Child: generalEvaporation
// -----------------------------------------------------------------------------

// Has
int
EnergyGeneralEvaporationHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"GeneralEvaporationHas", This, extract::generalEvaporation);
}

// Get, const
Handle2ConstGeneralEvaporation
EnergyGeneralEvaporationGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstGeneralEvaporation>
      (CLASSNAME, CLASSNAME+"GeneralEvaporationGetConst", This, extract::generalEvaporation);
}

// Get, non-const
Handle2GeneralEvaporation
EnergyGeneralEvaporationGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2GeneralEvaporation>
      (CLASSNAME, CLASSNAME+"GeneralEvaporationGet", This, extract::generalEvaporation);
}

// Set
void
EnergyGeneralEvaporationSet(ConstHandle2Energy This, ConstHandle2ConstGeneralEvaporation generalEvaporation)
{
   detail::setField<CPP,CPPGeneralEvaporation>
      (CLASSNAME, CLASSNAME+"GeneralEvaporationSet", This, extract::generalEvaporation, generalEvaporation);
}


// -----------------------------------------------------------------------------
// Child: evaporation
// -----------------------------------------------------------------------------

// Has
int
EnergyEvaporationHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EvaporationHas", This, extract::evaporation);
}

// Get, const
Handle2ConstEvaporation
EnergyEvaporationGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstEvaporation>
      (CLASSNAME, CLASSNAME+"EvaporationGetConst", This, extract::evaporation);
}

// Get, non-const
Handle2Evaporation
EnergyEvaporationGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2Evaporation>
      (CLASSNAME, CLASSNAME+"EvaporationGet", This, extract::evaporation);
}

// Set
void
EnergyEvaporationSet(ConstHandle2Energy This, ConstHandle2ConstEvaporation evaporation)
{
   detail::setField<CPP,CPPEvaporation>
      (CLASSNAME, CLASSNAME+"EvaporationSet", This, extract::evaporation, evaporation);
}


// -----------------------------------------------------------------------------
// Child: weightedFunctionals
// -----------------------------------------------------------------------------

// Has
int
EnergyWeightedFunctionalsHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"WeightedFunctionalsHas", This, extract::weightedFunctionals);
}

// Get, const
Handle2ConstWeightedFunctionals
EnergyWeightedFunctionalsGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstWeightedFunctionals>
      (CLASSNAME, CLASSNAME+"WeightedFunctionalsGetConst", This, extract::weightedFunctionals);
}

// Get, non-const
Handle2WeightedFunctionals
EnergyWeightedFunctionalsGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2WeightedFunctionals>
      (CLASSNAME, CLASSNAME+"WeightedFunctionalsGet", This, extract::weightedFunctionals);
}

// Set
void
EnergyWeightedFunctionalsSet(ConstHandle2Energy This, ConstHandle2ConstWeightedFunctionals weightedFunctionals)
{
   detail::setField<CPP,CPPWeightedFunctionals>
      (CLASSNAME, CLASSNAME+"WeightedFunctionalsSet", This, extract::weightedFunctionals, weightedFunctionals);
}


// -----------------------------------------------------------------------------
// Child: simpleMaxwellianFission
// -----------------------------------------------------------------------------

// Has
int
EnergySimpleMaxwellianFissionHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SimpleMaxwellianFissionHas", This, extract::simpleMaxwellianFission);
}

// Get, const
Handle2ConstSimpleMaxwellianFission
EnergySimpleMaxwellianFissionGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstSimpleMaxwellianFission>
      (CLASSNAME, CLASSNAME+"SimpleMaxwellianFissionGetConst", This, extract::simpleMaxwellianFission);
}

// Get, non-const
Handle2SimpleMaxwellianFission
EnergySimpleMaxwellianFissionGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2SimpleMaxwellianFission>
      (CLASSNAME, CLASSNAME+"SimpleMaxwellianFissionGet", This, extract::simpleMaxwellianFission);
}

// Set
void
EnergySimpleMaxwellianFissionSet(ConstHandle2Energy This, ConstHandle2ConstSimpleMaxwellianFission simpleMaxwellianFission)
{
   detail::setField<CPP,CPPSimpleMaxwellianFission>
      (CLASSNAME, CLASSNAME+"SimpleMaxwellianFissionSet", This, extract::simpleMaxwellianFission, simpleMaxwellianFission);
}


// -----------------------------------------------------------------------------
// Child: MadlandNix
// -----------------------------------------------------------------------------

// Has
int
EnergyMadlandNixHas(ConstHandle2ConstEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MadlandNixHas", This, extract::MadlandNix);
}

// Get, const
Handle2ConstMadlandNix
EnergyMadlandNixGetConst(ConstHandle2ConstEnergy This)
{
   return detail::getField<CPP,Handle2ConstMadlandNix>
      (CLASSNAME, CLASSNAME+"MadlandNixGetConst", This, extract::MadlandNix);
}

// Get, non-const
Handle2MadlandNix
EnergyMadlandNixGet(ConstHandle2Energy This)
{
   return detail::getField<CPP,Handle2MadlandNix>
      (CLASSNAME, CLASSNAME+"MadlandNixGet", This, extract::MadlandNix);
}

// Set
void
EnergyMadlandNixSet(ConstHandle2Energy This, ConstHandle2ConstMadlandNix MadlandNix)
{
   detail::setField<CPP,CPPMadlandNix>
      (CLASSNAME, CLASSNAME+"MadlandNixSet", This, extract::MadlandNix, MadlandNix);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Energy/src/custom.cpp"
