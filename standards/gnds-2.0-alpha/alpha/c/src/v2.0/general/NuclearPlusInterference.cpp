
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/NuclearPlusInterference.hpp"
#include "NuclearPlusInterference.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = NuclearPlusInterferenceClass;
using CPP = multigroup::NuclearPlusInterference;

static const std::string CLASSNAME = "NuclearPlusInterference";

namespace extract {
   static auto muCutoff = [](auto &obj) { return &obj.muCutoff; };
   static auto crossSection = [](auto &obj) { return &obj.crossSection; };
   static auto distribution = [](auto &obj) { return &obj.distribution; };
}

using CPPCrossSection = reduced::CrossSection;
using CPPDistribution = reduced::Distribution;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstNuclearPlusInterference
NuclearPlusInterferenceDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2NuclearPlusInterference
NuclearPlusInterferenceDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstNuclearPlusInterference
NuclearPlusInterferenceCreateConst(
   const double muCutoff,
   ConstHandle2ConstCrossSection crossSection,
   ConstHandle2ConstDistribution distribution
) {
   ConstHandle2NuclearPlusInterference handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      muCutoff,
      detail::tocpp<CPPCrossSection>(crossSection),
      detail::tocpp<CPPDistribution>(distribution)
   );
   return handle;
}

// Create, general
Handle2NuclearPlusInterference
NuclearPlusInterferenceCreate(
   const double muCutoff,
   ConstHandle2ConstCrossSection crossSection,
   ConstHandle2ConstDistribution distribution
) {
   ConstHandle2NuclearPlusInterference handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      muCutoff,
      detail::tocpp<CPPCrossSection>(crossSection),
      detail::tocpp<CPPDistribution>(distribution)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
NuclearPlusInterferenceAssign(ConstHandle2NuclearPlusInterference self, ConstHandle2ConstNuclearPlusInterference from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
NuclearPlusInterferenceDelete(ConstHandle2ConstNuclearPlusInterference self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
NuclearPlusInterferenceRead(ConstHandle2NuclearPlusInterference self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
NuclearPlusInterferenceWrite(ConstHandle2ConstNuclearPlusInterference self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
NuclearPlusInterferencePrint(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
NuclearPlusInterferencePrintXML(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
NuclearPlusInterferencePrintJSON(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: muCutoff
// -----------------------------------------------------------------------------

// Has
int
NuclearPlusInterferenceMuCutoffHas(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MuCutoffHas", self, extract::muCutoff);
}

// Get
// Returns by value
double
NuclearPlusInterferenceMuCutoffGet(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"MuCutoffGet", self, extract::muCutoff);
}

// Set
void
NuclearPlusInterferenceMuCutoffSet(ConstHandle2NuclearPlusInterference self, const double muCutoff)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"MuCutoffSet", self, extract::muCutoff, muCutoff);
}


// -----------------------------------------------------------------------------
// Child: crossSection
// -----------------------------------------------------------------------------

// Has
int
NuclearPlusInterferenceCrossSectionHas(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionHas", self, extract::crossSection);
}

// Get, const
Handle2ConstCrossSection
NuclearPlusInterferenceCrossSectionGetConst(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::getField<CPP,Handle2ConstCrossSection>
      (CLASSNAME, CLASSNAME+"CrossSectionGetConst", self, extract::crossSection);
}

// Get, non-const
Handle2CrossSection
NuclearPlusInterferenceCrossSectionGet(ConstHandle2NuclearPlusInterference self)
{
   return detail::getField<CPP,Handle2CrossSection>
      (CLASSNAME, CLASSNAME+"CrossSectionGet", self, extract::crossSection);
}

// Set
void
NuclearPlusInterferenceCrossSectionSet(ConstHandle2NuclearPlusInterference self, ConstHandle2ConstCrossSection crossSection)
{
   detail::setField<CPP,CPPCrossSection>
      (CLASSNAME, CLASSNAME+"CrossSectionSet", self, extract::crossSection, crossSection);
}


// -----------------------------------------------------------------------------
// Child: distribution
// -----------------------------------------------------------------------------

// Has
int
NuclearPlusInterferenceDistributionHas(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DistributionHas", self, extract::distribution);
}

// Get, const
Handle2ConstDistribution
NuclearPlusInterferenceDistributionGetConst(ConstHandle2ConstNuclearPlusInterference self)
{
   return detail::getField<CPP,Handle2ConstDistribution>
      (CLASSNAME, CLASSNAME+"DistributionGetConst", self, extract::distribution);
}

// Get, non-const
Handle2Distribution
NuclearPlusInterferenceDistributionGet(ConstHandle2NuclearPlusInterference self)
{
   return detail::getField<CPP,Handle2Distribution>
      (CLASSNAME, CLASSNAME+"DistributionGet", self, extract::distribution);
}

// Set
void
NuclearPlusInterferenceDistributionSet(ConstHandle2NuclearPlusInterference self, ConstHandle2ConstDistribution distribution)
{
   detail::setField<CPP,CPPDistribution>
      (CLASSNAME, CLASSNAME+"DistributionSet", self, extract::distribution, distribution);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/NuclearPlusInterference/src/custom.cpp"
