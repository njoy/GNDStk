
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/Function2ds.hpp"
#include "Function2ds.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = Function2dsClass;
using CPP = multigroup::Function2ds;

static const std::string CLASSNAME = "Function2ds";

namespace extract {
   static auto XYs2d = [](auto &obj) { return &obj.XYs2d; };
}

using CPPXYs2d = general::XYs2d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstFunction2ds
Function2dsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Function2ds
Function2dsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstFunction2ds
Function2dsCreateConst(
   ConstHandle2XYs2d *const XYs2d, const size_t XYs2dSize
) {
   ConstHandle2Function2ds handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPXYs2d>{}
   );
   for (size_t XYs2dN = 0; XYs2dN < XYs2dSize; ++XYs2dN)
      Function2dsXYs2dAdd(handle, XYs2d[XYs2dN]);
   return handle;
}

// Create, general
Handle2Function2ds
Function2dsCreate(
   ConstHandle2XYs2d *const XYs2d, const size_t XYs2dSize
) {
   ConstHandle2Function2ds handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPXYs2d>{}
   );
   for (size_t XYs2dN = 0; XYs2dN < XYs2dSize; ++XYs2dN)
      Function2dsXYs2dAdd(handle, XYs2d[XYs2dN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
Function2dsAssign(ConstHandle2Function2ds This, ConstHandle2ConstFunction2ds from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
Function2dsDelete(ConstHandle2ConstFunction2ds This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
Function2dsRead(ConstHandle2Function2ds This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
Function2dsWrite(ConstHandle2ConstFunction2ds This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
Function2dsPrint(ConstHandle2ConstFunction2ds This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
Function2dsPrintXML(ConstHandle2ConstFunction2ds This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
Function2dsPrintJSON(ConstHandle2ConstFunction2ds This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: XYs2d
// -----------------------------------------------------------------------------

// Has
int
Function2dsXYs2dHas(ConstHandle2ConstFunction2ds This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHas", This, extract::XYs2d);
}

// Clear
void
Function2dsXYs2dClear(ConstHandle2Function2ds This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dClear", This, extract::XYs2d);
}

// Size
size_t
Function2dsXYs2dSize(ConstHandle2ConstFunction2ds This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dSize", This, extract::XYs2d);
}

// Add
void
Function2dsXYs2dAdd(ConstHandle2Function2ds This, ConstHandle2ConstXYs2d XYs2d)
{
   detail::addToContainer<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dAdd", This, extract::XYs2d, XYs2d);
}

// Get, by index \in [0,size), const
Handle2ConstXYs2d
Function2dsXYs2dGetConst(ConstHandle2ConstFunction2ds This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetConst", This, extract::XYs2d, index_);
}

// Get, by index \in [0,size), non-const
Handle2XYs2d
Function2dsXYs2dGet(ConstHandle2Function2ds This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGet", This, extract::XYs2d, index_);
}

// Set, by index \in [0,size)
void
Function2dsXYs2dSet(
   ConstHandle2Function2ds This,
   const size_t index_,
   ConstHandle2ConstXYs2d XYs2d
) {
   detail::setByIndex<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSet", This, extract::XYs2d, index_, XYs2d);
}

// Has, by index
int
Function2dsXYs2dHasByIndex(
   ConstHandle2ConstFunction2ds This,
   const int index
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHasByIndex",
       This, extract::XYs2d, meta::index, index);
}

// Get, by index, const
Handle2ConstXYs2d
Function2dsXYs2dGetByIndexConst(
   ConstHandle2ConstFunction2ds This,
   const int index
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByIndexConst",
       This, extract::XYs2d, meta::index, index);
}

// Get, by index, non-const
Handle2XYs2d
Function2dsXYs2dGetByIndex(
   ConstHandle2Function2ds This,
   const int index
) {
   return detail::getByMetadatum<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByIndex",
       This, extract::XYs2d, meta::index, index);
}

// Set, by index
void
Function2dsXYs2dSetByIndex(
   ConstHandle2Function2ds This,
   const int index,
   ConstHandle2ConstXYs2d XYs2d
) {
   detail::setByMetadatum<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSetByIndex",
       This, extract::XYs2d, meta::index, index, XYs2d);
}

// Has, by interpolation
int
Function2dsXYs2dHasByInterpolation(
   ConstHandle2ConstFunction2ds This,
   const char *const interpolation
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHasByInterpolation",
       This, extract::XYs2d, meta::interpolation, interpolation);
}

// Get, by interpolation, const
Handle2ConstXYs2d
Function2dsXYs2dGetByInterpolationConst(
   ConstHandle2ConstFunction2ds This,
   const char *const interpolation
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByInterpolationConst",
       This, extract::XYs2d, meta::interpolation, interpolation);
}

// Get, by interpolation, non-const
Handle2XYs2d
Function2dsXYs2dGetByInterpolation(
   ConstHandle2Function2ds This,
   const char *const interpolation
) {
   return detail::getByMetadatum<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByInterpolation",
       This, extract::XYs2d, meta::interpolation, interpolation);
}

// Set, by interpolation
void
Function2dsXYs2dSetByInterpolation(
   ConstHandle2Function2ds This,
   const char *const interpolation,
   ConstHandle2ConstXYs2d XYs2d
) {
   detail::setByMetadatum<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSetByInterpolation",
       This, extract::XYs2d, meta::interpolation, interpolation, XYs2d);
}

// Has, by interpolationQualifier
int
Function2dsXYs2dHasByInterpolationQualifier(
   ConstHandle2ConstFunction2ds This,
   const char *const interpolationQualifier
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHasByInterpolationQualifier",
       This, extract::XYs2d, meta::interpolationQualifier, interpolationQualifier);
}

// Get, by interpolationQualifier, const
Handle2ConstXYs2d
Function2dsXYs2dGetByInterpolationQualifierConst(
   ConstHandle2ConstFunction2ds This,
   const char *const interpolationQualifier
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByInterpolationQualifierConst",
       This, extract::XYs2d, meta::interpolationQualifier, interpolationQualifier);
}

// Get, by interpolationQualifier, non-const
Handle2XYs2d
Function2dsXYs2dGetByInterpolationQualifier(
   ConstHandle2Function2ds This,
   const char *const interpolationQualifier
) {
   return detail::getByMetadatum<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByInterpolationQualifier",
       This, extract::XYs2d, meta::interpolationQualifier, interpolationQualifier);
}

// Set, by interpolationQualifier
void
Function2dsXYs2dSetByInterpolationQualifier(
   ConstHandle2Function2ds This,
   const char *const interpolationQualifier,
   ConstHandle2ConstXYs2d XYs2d
) {
   detail::setByMetadatum<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSetByInterpolationQualifier",
       This, extract::XYs2d, meta::interpolationQualifier, interpolationQualifier, XYs2d);
}

// Has, by outerDomainValue
int
Function2dsXYs2dHasByOuterDomainValue(
   ConstHandle2ConstFunction2ds This,
   const double outerDomainValue
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs2dHasByOuterDomainValue",
       This, extract::XYs2d, meta::outerDomainValue, outerDomainValue);
}

// Get, by outerDomainValue, const
Handle2ConstXYs2d
Function2dsXYs2dGetByOuterDomainValueConst(
   ConstHandle2ConstFunction2ds This,
   const double outerDomainValue
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByOuterDomainValueConst",
       This, extract::XYs2d, meta::outerDomainValue, outerDomainValue);
}

// Get, by outerDomainValue, non-const
Handle2XYs2d
Function2dsXYs2dGetByOuterDomainValue(
   ConstHandle2Function2ds This,
   const double outerDomainValue
) {
   return detail::getByMetadatum<CPP,Handle2XYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dGetByOuterDomainValue",
       This, extract::XYs2d, meta::outerDomainValue, outerDomainValue);
}

// Set, by outerDomainValue
void
Function2dsXYs2dSetByOuterDomainValue(
   ConstHandle2Function2ds This,
   const double outerDomainValue,
   ConstHandle2ConstXYs2d XYs2d
) {
   detail::setByMetadatum<CPP,CPPXYs2d>
      (CLASSNAME, CLASSNAME+"XYs2dSetByOuterDomainValue",
       This, extract::XYs2d, meta::outerDomainValue, outerDomainValue, XYs2d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Function2ds/src/custom.cpp"
