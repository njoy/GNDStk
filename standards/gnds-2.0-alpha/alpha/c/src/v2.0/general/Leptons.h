
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Leptons is the basic handle type in this file. Example:
//    // Create a default Leptons object:
//    Leptons handle = LeptonsDefault();
// Functions involving Leptons are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_ALPHA_V2_0_GENERAL_LEPTONS
#define C_INTERFACE_ALPHA_V2_0_GENERAL_LEPTONS

#include "GNDStk.h"
#include "v2.0/general/Lepton.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct LeptonsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Leptons
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct LeptonsClass *Leptons;

// --- Const-aware handles.
typedef const struct LeptonsClass *const ConstHandle2ConstLeptons;
typedef       struct LeptonsClass *const ConstHandle2Leptons;
typedef const struct LeptonsClass *      Handle2ConstLeptons;
typedef       struct LeptonsClass *      Handle2Leptons;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstLeptons
LeptonsDefaultConst();

// +++ Create, default
extern_c Handle2Leptons
LeptonsDefault();

// --- Create, general, const
extern_c Handle2ConstLeptons
LeptonsCreateConst(
   ConstHandle2Lepton *const lepton, const size_t leptonSize
);

// +++ Create, general
extern_c Handle2Leptons
LeptonsCreate(
   ConstHandle2Lepton *const lepton, const size_t leptonSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
LeptonsAssign(ConstHandle2Leptons This, ConstHandle2ConstLeptons from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
LeptonsDelete(ConstHandle2ConstLeptons This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
LeptonsRead(ConstHandle2Leptons This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
LeptonsWrite(ConstHandle2ConstLeptons This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
LeptonsPrint(ConstHandle2ConstLeptons This);

// +++ Print to standard output, as XML
extern_c int
LeptonsPrintXML(ConstHandle2ConstLeptons This);

// +++ Print to standard output, as JSON
extern_c int
LeptonsPrintJSON(ConstHandle2ConstLeptons This);


// -----------------------------------------------------------------------------
// Child: lepton
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
LeptonsLeptonHas(ConstHandle2ConstLeptons This);

// +++ Clear
extern_c void
LeptonsLeptonClear(ConstHandle2Leptons This);

// +++ Size
extern_c size_t
LeptonsLeptonSize(ConstHandle2ConstLeptons This);

// +++ Add
extern_c void
LeptonsLeptonAdd(ConstHandle2Leptons This, ConstHandle2ConstLepton lepton);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstLepton
LeptonsLeptonGetConst(ConstHandle2ConstLeptons This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Lepton
LeptonsLeptonGet(ConstHandle2Leptons This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
LeptonsLeptonSet(
   ConstHandle2Leptons This,
   const size_t index_,
   ConstHandle2ConstLepton lepton
);

// +++ Has, by id
extern_c int
LeptonsLeptonHasById(
   ConstHandle2ConstLeptons This,
   const char *const id
);

// --- Get, by id, const
extern_c Handle2ConstLepton
LeptonsLeptonGetByIdConst(
   ConstHandle2ConstLeptons This,
   const char *const id
);

// +++ Get, by id, non-const
extern_c Handle2Lepton
LeptonsLeptonGetById(
   ConstHandle2Leptons This,
   const char *const id
);

// +++ Set, by id
extern_c void
LeptonsLeptonSetById(
   ConstHandle2Leptons This,
   const char *const id,
   ConstHandle2ConstLepton lepton
);

// +++ Has, by generation
extern_c int
LeptonsLeptonHasByGeneration(
   ConstHandle2ConstLeptons This,
   const char *const generation
);

// --- Get, by generation, const
extern_c Handle2ConstLepton
LeptonsLeptonGetByGenerationConst(
   ConstHandle2ConstLeptons This,
   const char *const generation
);

// +++ Get, by generation, non-const
extern_c Handle2Lepton
LeptonsLeptonGetByGeneration(
   ConstHandle2Leptons This,
   const char *const generation
);

// +++ Set, by generation
extern_c void
LeptonsLeptonSetByGeneration(
   ConstHandle2Leptons This,
   const char *const generation,
   ConstHandle2ConstLepton lepton
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Leptons/src/custom.h"

#undef extern_c
#endif
