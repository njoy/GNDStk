
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/general/Products.hpp"
#include "Products.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ProductsClass;
using CPP = multigroup::Products;

static const std::string CLASSNAME = "Products";

namespace extract {
   static auto product = [](auto &obj) { return &obj.product; };
}

using CPPProduct = general::Product;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstProducts
ProductsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Products
ProductsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstProducts
ProductsCreateConst(
   ConstHandle2Product *const product, const size_t productSize
) {
   ConstHandle2Products handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPProduct>{}
   );
   for (size_t ProductN = 0; ProductN < productSize; ++ProductN)
      ProductsProductAdd(handle, product[ProductN]);
   return handle;
}

// Create, general
Handle2Products
ProductsCreate(
   ConstHandle2Product *const product, const size_t productSize
) {
   ConstHandle2Products handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPProduct>{}
   );
   for (size_t ProductN = 0; ProductN < productSize; ++ProductN)
      ProductsProductAdd(handle, product[ProductN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ProductsAssign(ConstHandle2Products self, ConstHandle2ConstProducts from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ProductsDelete(ConstHandle2ConstProducts self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ProductsRead(ConstHandle2Products self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ProductsWrite(ConstHandle2ConstProducts self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ProductsPrint(ConstHandle2ConstProducts self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ProductsPrintXML(ConstHandle2ConstProducts self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ProductsPrintJSON(ConstHandle2ConstProducts self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: product
// -----------------------------------------------------------------------------

// Has
int
ProductsProductHas(ConstHandle2ConstProducts self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductHas", self, extract::product);
}

// Clear
void
ProductsProductClear(ConstHandle2Products self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ProductClear", self, extract::product);
}

// Size
size_t
ProductsProductSize(ConstHandle2ConstProducts self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ProductSize", self, extract::product);
}

// Add
void
ProductsProductAdd(ConstHandle2Products self, ConstHandle2ConstProduct product)
{
   detail::addToContainer<CPP,CPPProduct>
      (CLASSNAME, CLASSNAME+"ProductAdd", self, extract::product, product);
}

// Get, by index \in [0,size), const
Handle2ConstProduct
ProductsProductGetConst(ConstHandle2ConstProducts self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstProduct>
      (CLASSNAME, CLASSNAME+"ProductGetConst", self, extract::product, index_);
}

// Get, by index \in [0,size), non-const
Handle2Product
ProductsProductGet(ConstHandle2Products self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Product>
      (CLASSNAME, CLASSNAME+"ProductGet", self, extract::product, index_);
}

// Set, by index \in [0,size)
void
ProductsProductSet(
   ConstHandle2Products self,
   const size_t index_,
   ConstHandle2ConstProduct product
) {
   detail::setByIndex<CPP,CPPProduct>
      (CLASSNAME, CLASSNAME+"ProductSet", self, extract::product, index_, product);
}

// Has, by label
int
ProductsProductHasByLabel(
   ConstHandle2ConstProducts self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProductHasByLabel",
       self, extract::product, meta::label, label);
}

// Get, by label, const
Handle2ConstProduct
ProductsProductGetByLabelConst(
   ConstHandle2ConstProducts self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstProduct>
      (CLASSNAME, CLASSNAME+"ProductGetByLabelConst",
       self, extract::product, meta::label, label);
}

// Get, by label, non-const
Handle2Product
ProductsProductGetByLabel(
   ConstHandle2Products self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2Product>
      (CLASSNAME, CLASSNAME+"ProductGetByLabel",
       self, extract::product, meta::label, label);
}

// Set, by label
void
ProductsProductSetByLabel(
   ConstHandle2Products self,
   const char *const label,
   ConstHandle2ConstProduct product
) {
   detail::setByMetadatum<CPP,CPPProduct>
      (CLASSNAME, CLASSNAME+"ProductSetByLabel",
       self, extract::product, meta::label, label, product);
}

// Has, by pid
int
ProductsProductHasByPid(
   ConstHandle2ConstProducts self,
   const char *const pid
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProductHasByPid",
       self, extract::product, meta::pid, pid);
}

// Get, by pid, const
Handle2ConstProduct
ProductsProductGetByPidConst(
   ConstHandle2ConstProducts self,
   const char *const pid
) {
   return detail::getByMetadatum<CPP,Handle2ConstProduct>
      (CLASSNAME, CLASSNAME+"ProductGetByPidConst",
       self, extract::product, meta::pid, pid);
}

// Get, by pid, non-const
Handle2Product
ProductsProductGetByPid(
   ConstHandle2Products self,
   const char *const pid
) {
   return detail::getByMetadatum<CPP,Handle2Product>
      (CLASSNAME, CLASSNAME+"ProductGetByPid",
       self, extract::product, meta::pid, pid);
}

// Set, by pid
void
ProductsProductSetByPid(
   ConstHandle2Products self,
   const char *const pid,
   ConstHandle2ConstProduct product
) {
   detail::setByMetadatum<CPP,CPPProduct>
      (CLASSNAME, CLASSNAME+"ProductSetByPid",
       self, extract::product, meta::pid, pid, product);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Products/src/custom.cpp"
