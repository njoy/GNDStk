
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/sfy/Discrete.hpp"
#include "Discrete.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = DiscreteClass;
using CPP = multigroup::Discrete;

static const std::string CLASSNAME = "Discrete";

namespace extract {
   static auto type = [](auto &obj) { return &obj.type; };
   static auto intensity = [](auto &obj) { return &obj.intensity; };
   static auto energy = [](auto &obj) { return &obj.energy; };
   static auto internalConversionCoefficients = [](auto &obj) { return &obj.internalConversionCoefficients; };
   static auto positronEmissionIntensity = [](auto &obj) { return &obj.positronEmissionIntensity; };
}

using CPPIntensity = sfy::Intensity;
using CPPEnergy = common::Energy;
using CPPInternalConversionCoefficients = sfy::InternalConversionCoefficients;
using CPPPositronEmissionIntensity = sfy::PositronEmissionIntensity;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDiscrete
DiscreteDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Discrete
DiscreteDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDiscrete
DiscreteCreateConst(
   const char *const type,
   ConstHandle2ConstIntensity intensity,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstInternalConversionCoefficients internalConversionCoefficients,
   ConstHandle2ConstPositronEmissionIntensity positronEmissionIntensity
) {
   ConstHandle2Discrete handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      type,
      detail::tocpp<CPPIntensity>(intensity),
      detail::tocpp<CPPEnergy>(energy),
      detail::tocpp<CPPInternalConversionCoefficients>(internalConversionCoefficients),
      detail::tocpp<CPPPositronEmissionIntensity>(positronEmissionIntensity)
   );
   return handle;
}

// Create, general
Handle2Discrete
DiscreteCreate(
   const char *const type,
   ConstHandle2ConstIntensity intensity,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstInternalConversionCoefficients internalConversionCoefficients,
   ConstHandle2ConstPositronEmissionIntensity positronEmissionIntensity
) {
   ConstHandle2Discrete handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      type,
      detail::tocpp<CPPIntensity>(intensity),
      detail::tocpp<CPPEnergy>(energy),
      detail::tocpp<CPPInternalConversionCoefficients>(internalConversionCoefficients),
      detail::tocpp<CPPPositronEmissionIntensity>(positronEmissionIntensity)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DiscreteAssign(ConstHandle2Discrete This, ConstHandle2ConstDiscrete from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DiscreteDelete(ConstHandle2ConstDiscrete This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DiscreteRead(ConstHandle2Discrete This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DiscreteWrite(ConstHandle2ConstDiscrete This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
DiscretePrint(ConstHandle2ConstDiscrete This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
DiscretePrintXML(ConstHandle2ConstDiscrete This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
DiscretePrintJSON(ConstHandle2ConstDiscrete This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: type
// -----------------------------------------------------------------------------

// Has
int
DiscreteTypeHas(ConstHandle2ConstDiscrete This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TypeHas", This, extract::type);
}

// Get
// Returns by value
const char *
DiscreteTypeGet(ConstHandle2ConstDiscrete This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"TypeGet", This, extract::type);
}

// Set
void
DiscreteTypeSet(ConstHandle2Discrete This, const char *const type)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"TypeSet", This, extract::type, type);
}


// -----------------------------------------------------------------------------
// Child: intensity
// -----------------------------------------------------------------------------

// Has
int
DiscreteIntensityHas(ConstHandle2ConstDiscrete This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IntensityHas", This, extract::intensity);
}

// Get, const
Handle2ConstIntensity
DiscreteIntensityGetConst(ConstHandle2ConstDiscrete This)
{
   return detail::getField<CPP,Handle2ConstIntensity>
      (CLASSNAME, CLASSNAME+"IntensityGetConst", This, extract::intensity);
}

// Get, non-const
Handle2Intensity
DiscreteIntensityGet(ConstHandle2Discrete This)
{
   return detail::getField<CPP,Handle2Intensity>
      (CLASSNAME, CLASSNAME+"IntensityGet", This, extract::intensity);
}

// Set
void
DiscreteIntensitySet(ConstHandle2Discrete This, ConstHandle2ConstIntensity intensity)
{
   detail::setField<CPP,CPPIntensity>
      (CLASSNAME, CLASSNAME+"IntensitySet", This, extract::intensity, intensity);
}


// -----------------------------------------------------------------------------
// Child: energy
// -----------------------------------------------------------------------------

// Has
int
DiscreteEnergyHas(ConstHandle2ConstDiscrete This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EnergyHas", This, extract::energy);
}

// Get, const
Handle2ConstEnergy
DiscreteEnergyGetConst(ConstHandle2ConstDiscrete This)
{
   return detail::getField<CPP,Handle2ConstEnergy>
      (CLASSNAME, CLASSNAME+"EnergyGetConst", This, extract::energy);
}

// Get, non-const
Handle2Energy
DiscreteEnergyGet(ConstHandle2Discrete This)
{
   return detail::getField<CPP,Handle2Energy>
      (CLASSNAME, CLASSNAME+"EnergyGet", This, extract::energy);
}

// Set
void
DiscreteEnergySet(ConstHandle2Discrete This, ConstHandle2ConstEnergy energy)
{
   detail::setField<CPP,CPPEnergy>
      (CLASSNAME, CLASSNAME+"EnergySet", This, extract::energy, energy);
}


// -----------------------------------------------------------------------------
// Child: internalConversionCoefficients
// -----------------------------------------------------------------------------

// Has
int
DiscreteInternalConversionCoefficientsHas(ConstHandle2ConstDiscrete This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InternalConversionCoefficientsHas", This, extract::internalConversionCoefficients);
}

// Get, const
Handle2ConstInternalConversionCoefficients
DiscreteInternalConversionCoefficientsGetConst(ConstHandle2ConstDiscrete This)
{
   return detail::getField<CPP,Handle2ConstInternalConversionCoefficients>
      (CLASSNAME, CLASSNAME+"InternalConversionCoefficientsGetConst", This, extract::internalConversionCoefficients);
}

// Get, non-const
Handle2InternalConversionCoefficients
DiscreteInternalConversionCoefficientsGet(ConstHandle2Discrete This)
{
   return detail::getField<CPP,Handle2InternalConversionCoefficients>
      (CLASSNAME, CLASSNAME+"InternalConversionCoefficientsGet", This, extract::internalConversionCoefficients);
}

// Set
void
DiscreteInternalConversionCoefficientsSet(ConstHandle2Discrete This, ConstHandle2ConstInternalConversionCoefficients internalConversionCoefficients)
{
   detail::setField<CPP,CPPInternalConversionCoefficients>
      (CLASSNAME, CLASSNAME+"InternalConversionCoefficientsSet", This, extract::internalConversionCoefficients, internalConversionCoefficients);
}


// -----------------------------------------------------------------------------
// Child: positronEmissionIntensity
// -----------------------------------------------------------------------------

// Has
int
DiscretePositronEmissionIntensityHas(ConstHandle2ConstDiscrete This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PositronEmissionIntensityHas", This, extract::positronEmissionIntensity);
}

// Get, const
Handle2ConstPositronEmissionIntensity
DiscretePositronEmissionIntensityGetConst(ConstHandle2ConstDiscrete This)
{
   return detail::getField<CPP,Handle2ConstPositronEmissionIntensity>
      (CLASSNAME, CLASSNAME+"PositronEmissionIntensityGetConst", This, extract::positronEmissionIntensity);
}

// Get, non-const
Handle2PositronEmissionIntensity
DiscretePositronEmissionIntensityGet(ConstHandle2Discrete This)
{
   return detail::getField<CPP,Handle2PositronEmissionIntensity>
      (CLASSNAME, CLASSNAME+"PositronEmissionIntensityGet", This, extract::positronEmissionIntensity);
}

// Set
void
DiscretePositronEmissionIntensitySet(ConstHandle2Discrete This, ConstHandle2ConstPositronEmissionIntensity positronEmissionIntensity)
{
   detail::setField<CPP,CPPPositronEmissionIntensity>
      (CLASSNAME, CLASSNAME+"PositronEmissionIntensitySet", This, extract::positronEmissionIntensity, positronEmissionIntensity);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/sfy/Discrete/src/custom.cpp"
