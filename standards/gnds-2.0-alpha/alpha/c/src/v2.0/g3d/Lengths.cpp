
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/g3d/Lengths.hpp"
#include "Lengths.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = LengthsClass;
using CPP = multigroup::Lengths;

static const std::string CLASSNAME = "Lengths";

namespace extract {
   static auto valueType = [](auto &obj) { return &obj.valueType; };
   static auto label = [](auto &obj) { return &obj.label; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstLengths
LengthsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Lengths
LengthsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstLengths
LengthsCreateConst(
   const char *const valueType,
   const char *const label
) {
   ConstHandle2Lengths handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      valueType,
      label
   );
   return handle;
}

// Create, general
Handle2Lengths
LengthsCreate(
   const char *const valueType,
   const char *const label
) {
   ConstHandle2Lengths handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      valueType,
      label
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
LengthsAssign(ConstHandle2Lengths This, ConstHandle2ConstLengths from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
LengthsDelete(ConstHandle2ConstLengths This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
LengthsRead(ConstHandle2Lengths This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
LengthsWrite(ConstHandle2ConstLengths This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
LengthsPrint(ConstHandle2ConstLengths This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
LengthsPrintXML(ConstHandle2ConstLengths This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
LengthsPrintJSON(ConstHandle2ConstLengths This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Data vector
// -----------------------------------------------------------------------------

// Clear
void
LengthsIntsClear(ConstHandle2Lengths This)
{
   detail::vectorClear<CPP>
      (CLASSNAME, CLASSNAME+"IntsClear", This);
}

// Get size
size_t
LengthsIntsSize(ConstHandle2ConstLengths This)
{
   return detail::vectorSize<CPP>
      (CLASSNAME, CLASSNAME+"IntsSize", This);
}

// Get value
// By index \in [0,size)
int
LengthsIntsGet(ConstHandle2ConstLengths This, const size_t index)
{
   return detail::vectorGet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsGet", This, index);
}

// Set value
// By index \in [0,size)
void
LengthsIntsSet(ConstHandle2Lengths This, const size_t index, const int value)
{
   detail::vectorSet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsSet", This, index, value);
}

// Get pointer to existing values, const
const int *
LengthsIntsGetArrayConst(ConstHandle2ConstLengths This)
{
   return detail::vectorGet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsGetArrayConst", This);
}

// Get pointer to existing values, non-const
int *
LengthsIntsGetArray(ConstHandle2Lengths This)
{
   return detail::vectorGet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsGetArray", This);
}

// Set completely new values and size
void
LengthsIntsSetArray(ConstHandle2Lengths This, const int *const values, const size_t size)
{
   return detail::vectorSet<CPP,int>
      (CLASSNAME, CLASSNAME+"IntsSetArray", This, size, values);
}


// -----------------------------------------------------------------------------
// Metadatum: valueType
// -----------------------------------------------------------------------------

// Has
int
LengthsValueTypeHas(ConstHandle2ConstLengths This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValueTypeHas", This, extract::valueType);
}

// Get
// Returns by value
const char *
LengthsValueTypeGet(ConstHandle2ConstLengths This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ValueTypeGet", This, extract::valueType);
}

// Set
void
LengthsValueTypeSet(ConstHandle2Lengths This, const char *const valueType)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ValueTypeSet", This, extract::valueType, valueType);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
LengthsLabelHas(ConstHandle2ConstLengths This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
const char *
LengthsLabelGet(ConstHandle2ConstLengths This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
LengthsLabelSet(ConstHandle2Lengths This, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/g3d/Lengths/src/custom.cpp"
