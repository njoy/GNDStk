
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/covariance/CovarianceMatrix.hpp"
#include "CovarianceMatrix.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = CovarianceMatrixClass;
using CPP = multigroup::CovarianceMatrix;

static const std::string CLASSNAME = "CovarianceMatrix";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto type = [](auto &obj) { return &obj.type; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto gridded2d = [](auto &obj) { return &obj.gridded2d; };
}

using CPPGridded2d = common::Gridded2d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstCovarianceMatrix
CovarianceMatrixDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2CovarianceMatrix
CovarianceMatrixDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstCovarianceMatrix
CovarianceMatrixCreateConst(
   const char *const label,
   const char *const type,
   const char *const productFrame,
   ConstHandle2ConstGridded2d gridded2d
) {
   ConstHandle2CovarianceMatrix handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      type,
      productFrame,
      detail::tocpp<CPPGridded2d>(gridded2d)
   );
   return handle;
}

// Create, general
Handle2CovarianceMatrix
CovarianceMatrixCreate(
   const char *const label,
   const char *const type,
   const char *const productFrame,
   ConstHandle2ConstGridded2d gridded2d
) {
   ConstHandle2CovarianceMatrix handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      type,
      productFrame,
      detail::tocpp<CPPGridded2d>(gridded2d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
CovarianceMatrixAssign(ConstHandle2CovarianceMatrix This, ConstHandle2ConstCovarianceMatrix from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
CovarianceMatrixDelete(ConstHandle2ConstCovarianceMatrix This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
CovarianceMatrixRead(ConstHandle2CovarianceMatrix This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
CovarianceMatrixWrite(ConstHandle2ConstCovarianceMatrix This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
CovarianceMatrixPrint(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
CovarianceMatrixPrintXML(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
CovarianceMatrixPrintJSON(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixLabelHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
const char *
CovarianceMatrixLabelGet(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
CovarianceMatrixLabelSet(ConstHandle2CovarianceMatrix This, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: type
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixTypeHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TypeHas", This, extract::type);
}

// Get
// Returns by value
const char *
CovarianceMatrixTypeGet(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"TypeGet", This, extract::type);
}

// Set
void
CovarianceMatrixTypeSet(ConstHandle2CovarianceMatrix This, const char *const type)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"TypeSet", This, extract::type, type);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixProductFrameHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", This, extract::productFrame);
}

// Get
// Returns by value
const char *
CovarianceMatrixProductFrameGet(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", This, extract::productFrame);
}

// Set
void
CovarianceMatrixProductFrameSet(ConstHandle2CovarianceMatrix This, const char *const productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", This, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: gridded2d
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixGridded2dHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Gridded2dHas", This, extract::gridded2d);
}

// Get, const
Handle2ConstGridded2d
CovarianceMatrixGridded2dGetConst(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP,Handle2ConstGridded2d>
      (CLASSNAME, CLASSNAME+"Gridded2dGetConst", This, extract::gridded2d);
}

// Get, non-const
Handle2Gridded2d
CovarianceMatrixGridded2dGet(ConstHandle2CovarianceMatrix This)
{
   return detail::getField<CPP,Handle2Gridded2d>
      (CLASSNAME, CLASSNAME+"Gridded2dGet", This, extract::gridded2d);
}

// Set
void
CovarianceMatrixGridded2dSet(ConstHandle2CovarianceMatrix This, ConstHandle2ConstGridded2d gridded2d)
{
   detail::setField<CPP,CPPGridded2d>
      (CLASSNAME, CLASSNAME+"Gridded2dSet", This, extract::gridded2d, gridded2d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/covariance/CovarianceMatrix/src/custom.cpp"
