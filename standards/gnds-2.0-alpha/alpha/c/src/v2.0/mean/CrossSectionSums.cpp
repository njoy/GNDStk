
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/mean/CrossSectionSums.hpp"
#include "CrossSectionSums.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = CrossSectionSumsClass;
using CPP = multigroup::CrossSectionSums;

static const std::string CLASSNAME = "CrossSectionSums";

namespace extract {
   static auto crossSectionSum = [](auto &obj) { return &obj.crossSectionSum; };
}

using CPPCrossSectionSum = mean::CrossSectionSum;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstCrossSectionSums
CrossSectionSumsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2CrossSectionSums
CrossSectionSumsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstCrossSectionSums
CrossSectionSumsCreateConst(
   ConstHandle2CrossSectionSum *const crossSectionSum, const size_t crossSectionSumSize
) {
   ConstHandle2CrossSectionSums handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPCrossSectionSum>{}
   );
   for (size_t CrossSectionSumN = 0; CrossSectionSumN < crossSectionSumSize; ++CrossSectionSumN)
      CrossSectionSumsCrossSectionSumAdd(handle, crossSectionSum[CrossSectionSumN]);
   return handle;
}

// Create, general
Handle2CrossSectionSums
CrossSectionSumsCreate(
   ConstHandle2CrossSectionSum *const crossSectionSum, const size_t crossSectionSumSize
) {
   ConstHandle2CrossSectionSums handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPCrossSectionSum>{}
   );
   for (size_t CrossSectionSumN = 0; CrossSectionSumN < crossSectionSumSize; ++CrossSectionSumN)
      CrossSectionSumsCrossSectionSumAdd(handle, crossSectionSum[CrossSectionSumN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
CrossSectionSumsAssign(ConstHandle2CrossSectionSums This, ConstHandle2ConstCrossSectionSums from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
CrossSectionSumsDelete(ConstHandle2ConstCrossSectionSums This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
CrossSectionSumsRead(ConstHandle2CrossSectionSums This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
CrossSectionSumsWrite(ConstHandle2ConstCrossSectionSums This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
CrossSectionSumsPrint(ConstHandle2ConstCrossSectionSums This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
CrossSectionSumsPrintXML(ConstHandle2ConstCrossSectionSums This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
CrossSectionSumsPrintJSON(ConstHandle2ConstCrossSectionSums This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: crossSectionSum
// -----------------------------------------------------------------------------

// Has
int
CrossSectionSumsCrossSectionSumHas(ConstHandle2ConstCrossSectionSums This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionSumHas", This, extract::crossSectionSum);
}

// Clear
void
CrossSectionSumsCrossSectionSumClear(ConstHandle2CrossSectionSums This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionSumClear", This, extract::crossSectionSum);
}

// Size
size_t
CrossSectionSumsCrossSectionSumSize(ConstHandle2ConstCrossSectionSums This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionSumSize", This, extract::crossSectionSum);
}

// Add
void
CrossSectionSumsCrossSectionSumAdd(ConstHandle2CrossSectionSums This, ConstHandle2ConstCrossSectionSum crossSectionSum)
{
   detail::addToContainer<CPP,CPPCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumAdd", This, extract::crossSectionSum, crossSectionSum);
}

// Get, by index \in [0,size), const
Handle2ConstCrossSectionSum
CrossSectionSumsCrossSectionSumGetConst(ConstHandle2ConstCrossSectionSums This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumGetConst", This, extract::crossSectionSum, index_);
}

// Get, by index \in [0,size), non-const
Handle2CrossSectionSum
CrossSectionSumsCrossSectionSumGet(ConstHandle2CrossSectionSums This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2CrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumGet", This, extract::crossSectionSum, index_);
}

// Set, by index \in [0,size)
void
CrossSectionSumsCrossSectionSumSet(
   ConstHandle2CrossSectionSums This,
   const size_t index_,
   ConstHandle2ConstCrossSectionSum crossSectionSum
) {
   detail::setByIndex<CPP,CPPCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumSet", This, extract::crossSectionSum, index_, crossSectionSum);
}

// Has, by label
int
CrossSectionSumsCrossSectionSumHasByLabel(
   ConstHandle2ConstCrossSectionSums This,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionSumHasByLabel",
       This, extract::crossSectionSum, meta::label, label);
}

// Get, by label, const
Handle2ConstCrossSectionSum
CrossSectionSumsCrossSectionSumGetByLabelConst(
   ConstHandle2ConstCrossSectionSums This,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumGetByLabelConst",
       This, extract::crossSectionSum, meta::label, label);
}

// Get, by label, non-const
Handle2CrossSectionSum
CrossSectionSumsCrossSectionSumGetByLabel(
   ConstHandle2CrossSectionSums This,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2CrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumGetByLabel",
       This, extract::crossSectionSum, meta::label, label);
}

// Set, by label
void
CrossSectionSumsCrossSectionSumSetByLabel(
   ConstHandle2CrossSectionSums This,
   const char *const label,
   ConstHandle2ConstCrossSectionSum crossSectionSum
) {
   detail::setByMetadatum<CPP,CPPCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumSetByLabel",
       This, extract::crossSectionSum, meta::label, label, crossSectionSum);
}

// Has, by ENDF_MT
int
CrossSectionSumsCrossSectionSumHasByENDFMT(
   ConstHandle2ConstCrossSectionSums This,
   const int ENDF_MT
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionSumHasByENDFMT",
       This, extract::crossSectionSum, meta::ENDF_MT, ENDF_MT);
}

// Get, by ENDF_MT, const
Handle2ConstCrossSectionSum
CrossSectionSumsCrossSectionSumGetByENDFMTConst(
   ConstHandle2ConstCrossSectionSums This,
   const int ENDF_MT
) {
   return detail::getByMetadatum<CPP,Handle2ConstCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumGetByENDFMTConst",
       This, extract::crossSectionSum, meta::ENDF_MT, ENDF_MT);
}

// Get, by ENDF_MT, non-const
Handle2CrossSectionSum
CrossSectionSumsCrossSectionSumGetByENDFMT(
   ConstHandle2CrossSectionSums This,
   const int ENDF_MT
) {
   return detail::getByMetadatum<CPP,Handle2CrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumGetByENDFMT",
       This, extract::crossSectionSum, meta::ENDF_MT, ENDF_MT);
}

// Set, by ENDF_MT
void
CrossSectionSumsCrossSectionSumSetByENDFMT(
   ConstHandle2CrossSectionSums This,
   const int ENDF_MT,
   ConstHandle2ConstCrossSectionSum crossSectionSum
) {
   detail::setByMetadatum<CPP,CPPCrossSectionSum>
      (CLASSNAME, CLASSNAME+"CrossSectionSumSetByENDFMT",
       This, extract::crossSectionSum, meta::ENDF_MT, ENDF_MT, crossSectionSum);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/mean/CrossSectionSums/src/custom.cpp"
