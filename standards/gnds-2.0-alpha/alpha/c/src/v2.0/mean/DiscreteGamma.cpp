
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/mean/DiscreteGamma.hpp"
#include "DiscreteGamma.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = DiscreteGammaClass;
using CPP = multigroup::DiscreteGamma;

static const std::string CLASSNAME = "DiscreteGamma";

namespace extract {
   static auto value = [](auto &obj) { return &obj.value; };
   static auto domainMin = [](auto &obj) { return &obj.domainMin; };
   static auto domainMax = [](auto &obj) { return &obj.domainMax; };
   static auto axes = [](auto &obj) { return &obj.axes; };
}

using CPPAxes = common::Axes;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDiscreteGamma
DiscreteGammaDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2DiscreteGamma
DiscreteGammaDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDiscreteGamma
DiscreteGammaCreateConst(
   const double value,
   const double domainMin,
   const double domainMax,
   ConstHandle2ConstAxes axes
) {
   ConstHandle2DiscreteGamma handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      value,
      domainMin,
      domainMax,
      detail::tocpp<CPPAxes>(axes)
   );
   return handle;
}

// Create, general
Handle2DiscreteGamma
DiscreteGammaCreate(
   const double value,
   const double domainMin,
   const double domainMax,
   ConstHandle2ConstAxes axes
) {
   ConstHandle2DiscreteGamma handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      value,
      domainMin,
      domainMax,
      detail::tocpp<CPPAxes>(axes)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DiscreteGammaAssign(ConstHandle2DiscreteGamma This, ConstHandle2ConstDiscreteGamma from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DiscreteGammaDelete(ConstHandle2ConstDiscreteGamma This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DiscreteGammaRead(ConstHandle2DiscreteGamma This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DiscreteGammaWrite(ConstHandle2ConstDiscreteGamma This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
DiscreteGammaPrint(ConstHandle2ConstDiscreteGamma This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
DiscreteGammaPrintXML(ConstHandle2ConstDiscreteGamma This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
DiscreteGammaPrintJSON(ConstHandle2ConstDiscreteGamma This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// Has
int
DiscreteGammaValueHas(ConstHandle2ConstDiscreteGamma This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValueHas", This, extract::value);
}

// Get
// Returns by value
double
DiscreteGammaValueGet(ConstHandle2ConstDiscreteGamma This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ValueGet", This, extract::value);
}

// Set
void
DiscreteGammaValueSet(ConstHandle2DiscreteGamma This, const double value)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ValueSet", This, extract::value, value);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMin
// -----------------------------------------------------------------------------

// Has
int
DiscreteGammaDomainMinHas(ConstHandle2ConstDiscreteGamma This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinHas", This, extract::domainMin);
}

// Get
// Returns by value
double
DiscreteGammaDomainMinGet(ConstHandle2ConstDiscreteGamma This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinGet", This, extract::domainMin);
}

// Set
void
DiscreteGammaDomainMinSet(ConstHandle2DiscreteGamma This, const double domainMin)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinSet", This, extract::domainMin, domainMin);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMax
// -----------------------------------------------------------------------------

// Has
int
DiscreteGammaDomainMaxHas(ConstHandle2ConstDiscreteGamma This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxHas", This, extract::domainMax);
}

// Get
// Returns by value
double
DiscreteGammaDomainMaxGet(ConstHandle2ConstDiscreteGamma This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxGet", This, extract::domainMax);
}

// Set
void
DiscreteGammaDomainMaxSet(ConstHandle2DiscreteGamma This, const double domainMax)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxSet", This, extract::domainMax, domainMax);
}


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// Has
int
DiscreteGammaAxesHas(ConstHandle2ConstDiscreteGamma This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AxesHas", This, extract::axes);
}

// Get, const
Handle2ConstAxes
DiscreteGammaAxesGetConst(ConstHandle2ConstDiscreteGamma This)
{
   return detail::getField<CPP,Handle2ConstAxes>
      (CLASSNAME, CLASSNAME+"AxesGetConst", This, extract::axes);
}

// Get, non-const
Handle2Axes
DiscreteGammaAxesGet(ConstHandle2DiscreteGamma This)
{
   return detail::getField<CPP,Handle2Axes>
      (CLASSNAME, CLASSNAME+"AxesGet", This, extract::axes);
}

// Set
void
DiscreteGammaAxesSet(ConstHandle2DiscreteGamma This, ConstHandle2ConstAxes axes)
{
   detail::setField<CPP,CPPAxes>
      (CLASSNAME, CLASSNAME+"AxesSet", This, extract::axes, axes);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/mean/DiscreteGamma/src/custom.cpp"
