
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/mean/Uncorrelated.hpp"
#include "Uncorrelated.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = UncorrelatedClass;
using CPP = multigroup::Uncorrelated;

static const std::string CLASSNAME = "Uncorrelated";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto angular = [](auto &obj) { return &obj.angular; };
   static auto energy = [](auto &obj) { return &obj.energy; };
}

using CPPAngular = mean::Angular;
using CPPEnergy = common::Energy;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstUncorrelated
UncorrelatedDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Uncorrelated
UncorrelatedDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstUncorrelated
UncorrelatedCreateConst(
   const char *const label,
   const char *const productFrame,
   ConstHandle2ConstAngular angular,
   ConstHandle2ConstEnergy energy
) {
   ConstHandle2Uncorrelated handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      productFrame,
      detail::tocpp<CPPAngular>(angular),
      detail::tocpp<CPPEnergy>(energy)
   );
   return handle;
}

// Create, general
Handle2Uncorrelated
UncorrelatedCreate(
   const char *const label,
   const char *const productFrame,
   ConstHandle2ConstAngular angular,
   ConstHandle2ConstEnergy energy
) {
   ConstHandle2Uncorrelated handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      productFrame,
      detail::tocpp<CPPAngular>(angular),
      detail::tocpp<CPPEnergy>(energy)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
UncorrelatedAssign(ConstHandle2Uncorrelated This, ConstHandle2ConstUncorrelated from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
UncorrelatedDelete(ConstHandle2ConstUncorrelated This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
UncorrelatedRead(ConstHandle2Uncorrelated This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
UncorrelatedWrite(ConstHandle2ConstUncorrelated This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
UncorrelatedPrint(ConstHandle2ConstUncorrelated This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
UncorrelatedPrintXML(ConstHandle2ConstUncorrelated This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
UncorrelatedPrintJSON(ConstHandle2ConstUncorrelated This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
UncorrelatedLabelHas(ConstHandle2ConstUncorrelated This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
const char *
UncorrelatedLabelGet(ConstHandle2ConstUncorrelated This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
UncorrelatedLabelSet(ConstHandle2Uncorrelated This, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
UncorrelatedProductFrameHas(ConstHandle2ConstUncorrelated This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", This, extract::productFrame);
}

// Get
// Returns by value
const char *
UncorrelatedProductFrameGet(ConstHandle2ConstUncorrelated This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", This, extract::productFrame);
}

// Set
void
UncorrelatedProductFrameSet(ConstHandle2Uncorrelated This, const char *const productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", This, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: angular
// -----------------------------------------------------------------------------

// Has
int
UncorrelatedAngularHas(ConstHandle2ConstUncorrelated This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AngularHas", This, extract::angular);
}

// Get, const
Handle2ConstAngular
UncorrelatedAngularGetConst(ConstHandle2ConstUncorrelated This)
{
   return detail::getField<CPP,Handle2ConstAngular>
      (CLASSNAME, CLASSNAME+"AngularGetConst", This, extract::angular);
}

// Get, non-const
Handle2Angular
UncorrelatedAngularGet(ConstHandle2Uncorrelated This)
{
   return detail::getField<CPP,Handle2Angular>
      (CLASSNAME, CLASSNAME+"AngularGet", This, extract::angular);
}

// Set
void
UncorrelatedAngularSet(ConstHandle2Uncorrelated This, ConstHandle2ConstAngular angular)
{
   detail::setField<CPP,CPPAngular>
      (CLASSNAME, CLASSNAME+"AngularSet", This, extract::angular, angular);
}


// -----------------------------------------------------------------------------
// Child: energy
// -----------------------------------------------------------------------------

// Has
int
UncorrelatedEnergyHas(ConstHandle2ConstUncorrelated This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EnergyHas", This, extract::energy);
}

// Get, const
Handle2ConstEnergy
UncorrelatedEnergyGetConst(ConstHandle2ConstUncorrelated This)
{
   return detail::getField<CPP,Handle2ConstEnergy>
      (CLASSNAME, CLASSNAME+"EnergyGetConst", This, extract::energy);
}

// Get, non-const
Handle2Energy
UncorrelatedEnergyGet(ConstHandle2Uncorrelated This)
{
   return detail::getField<CPP,Handle2Energy>
      (CLASSNAME, CLASSNAME+"EnergyGet", This, extract::energy);
}

// Set
void
UncorrelatedEnergySet(ConstHandle2Uncorrelated This, ConstHandle2ConstEnergy energy)
{
   detail::setField<CPP,CPPEnergy>
      (CLASSNAME, CLASSNAME+"EnergySet", This, extract::energy, energy);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/mean/Uncorrelated/src/custom.cpp"
