
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/mean/Resonances.hpp"
#include "Resonances.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ResonancesClass;
using CPP = multigroup::Resonances;

static const std::string CLASSNAME = "Resonances";

namespace extract {
   static auto href = [](auto &obj) { return &obj.href; };
   static auto scatteringRadius = [](auto &obj) { return &obj.scatteringRadius; };
   static auto resolved = [](auto &obj) { return &obj.resolved; };
   static auto unresolved = [](auto &obj) { return &obj.unresolved; };
}

using CPPScatteringRadius = mean::ScatteringRadius;
using CPPResolved = mean::Resolved;
using CPPUnresolved = mean::Unresolved;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstResonances
ResonancesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Resonances
ResonancesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstResonances
ResonancesCreateConst(
   const char *const href,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstResolved resolved,
   ConstHandle2ConstUnresolved unresolved
) {
   ConstHandle2Resonances handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      href,
      detail::tocpp<CPPScatteringRadius>(scatteringRadius),
      detail::tocpp<CPPResolved>(resolved),
      detail::tocpp<CPPUnresolved>(unresolved)
   );
   return handle;
}

// Create, general
Handle2Resonances
ResonancesCreate(
   const char *const href,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstResolved resolved,
   ConstHandle2ConstUnresolved unresolved
) {
   ConstHandle2Resonances handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      href,
      detail::tocpp<CPPScatteringRadius>(scatteringRadius),
      detail::tocpp<CPPResolved>(resolved),
      detail::tocpp<CPPUnresolved>(unresolved)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ResonancesAssign(ConstHandle2Resonances This, ConstHandle2ConstResonances from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ResonancesDelete(ConstHandle2ConstResonances This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ResonancesRead(ConstHandle2Resonances This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ResonancesWrite(ConstHandle2ConstResonances This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ResonancesPrint(ConstHandle2ConstResonances This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ResonancesPrintXML(ConstHandle2ConstResonances This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ResonancesPrintJSON(ConstHandle2ConstResonances This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
ResonancesHrefHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
const char *
ResonancesHrefGet(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
ResonancesHrefSet(ConstHandle2Resonances This, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}


// -----------------------------------------------------------------------------
// Child: scatteringRadius
// -----------------------------------------------------------------------------

// Has
int
ResonancesScatteringRadiusHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusHas", This, extract::scatteringRadius);
}

// Get, const
Handle2ConstScatteringRadius
ResonancesScatteringRadiusGetConst(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP,Handle2ConstScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGetConst", This, extract::scatteringRadius);
}

// Get, non-const
Handle2ScatteringRadius
ResonancesScatteringRadiusGet(ConstHandle2Resonances This)
{
   return detail::getField<CPP,Handle2ScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGet", This, extract::scatteringRadius);
}

// Set
void
ResonancesScatteringRadiusSet(ConstHandle2Resonances This, ConstHandle2ConstScatteringRadius scatteringRadius)
{
   detail::setField<CPP,CPPScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusSet", This, extract::scatteringRadius, scatteringRadius);
}


// -----------------------------------------------------------------------------
// Child: resolved
// -----------------------------------------------------------------------------

// Has
int
ResonancesResolvedHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedHas", This, extract::resolved);
}

// Get, const
Handle2ConstResolved
ResonancesResolvedGetConst(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP,Handle2ConstResolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetConst", This, extract::resolved);
}

// Get, non-const
Handle2Resolved
ResonancesResolvedGet(ConstHandle2Resonances This)
{
   return detail::getField<CPP,Handle2Resolved>
      (CLASSNAME, CLASSNAME+"ResolvedGet", This, extract::resolved);
}

// Set
void
ResonancesResolvedSet(ConstHandle2Resonances This, ConstHandle2ConstResolved resolved)
{
   detail::setField<CPP,CPPResolved>
      (CLASSNAME, CLASSNAME+"ResolvedSet", This, extract::resolved, resolved);
}


// -----------------------------------------------------------------------------
// Child: unresolved
// -----------------------------------------------------------------------------

// Has
int
ResonancesUnresolvedHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedHas", This, extract::unresolved);
}

// Get, const
Handle2ConstUnresolved
ResonancesUnresolvedGetConst(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP,Handle2ConstUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetConst", This, extract::unresolved);
}

// Get, non-const
Handle2Unresolved
ResonancesUnresolvedGet(ConstHandle2Resonances This)
{
   return detail::getField<CPP,Handle2Unresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGet", This, extract::unresolved);
}

// Set
void
ResonancesUnresolvedSet(ConstHandle2Resonances This, ConstHandle2ConstUnresolved unresolved)
{
   detail::setField<CPP,CPPUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedSet", This, extract::unresolved, unresolved);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/mean/Resonances/src/custom.cpp"
