
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2_0/mean/Table.hpp"
#include "Table.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = TableClass;
using CPP = multigroup::Table;

static const std::string CLASSNAME = "Table";

namespace extract {
   static auto rows = [](auto &obj) { return &obj.rows; };
   static auto columns = [](auto &obj) { return &obj.columns; };
   static auto columnHeaders = [](auto &obj) { return &obj.columnHeaders; };
   static auto data = [](auto &obj) { return &obj.data; };
}

using CPPColumnHeaders = mean::ColumnHeaders;
using CPPData = mean::Data;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstTable
TableDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Table
TableDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstTable
TableCreateConst(
   const int rows,
   const int columns,
   ConstHandle2ConstColumnHeaders columnHeaders,
   ConstHandle2ConstData data
) {
   ConstHandle2Table handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      rows,
      columns,
      detail::tocpp<CPPColumnHeaders>(columnHeaders),
      detail::tocpp<CPPData>(data)
   );
   return handle;
}

// Create, general
Handle2Table
TableCreate(
   const int rows,
   const int columns,
   ConstHandle2ConstColumnHeaders columnHeaders,
   ConstHandle2ConstData data
) {
   ConstHandle2Table handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      rows,
      columns,
      detail::tocpp<CPPColumnHeaders>(columnHeaders),
      detail::tocpp<CPPData>(data)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
TableAssign(ConstHandle2Table This, ConstHandle2ConstTable from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
TableDelete(ConstHandle2ConstTable This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
TableRead(ConstHandle2Table This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
TableWrite(ConstHandle2ConstTable This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
TablePrint(ConstHandle2ConstTable This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
TablePrintXML(ConstHandle2ConstTable This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
TablePrintJSON(ConstHandle2ConstTable This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: rows
// -----------------------------------------------------------------------------

// Has
int
TableRowsHas(ConstHandle2ConstTable This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"RowsHas", This, extract::rows);
}

// Get
// Returns by value
int
TableRowsGet(ConstHandle2ConstTable This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"RowsGet", This, extract::rows);
}

// Set
void
TableRowsSet(ConstHandle2Table This, const int rows)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"RowsSet", This, extract::rows, rows);
}


// -----------------------------------------------------------------------------
// Metadatum: columns
// -----------------------------------------------------------------------------

// Has
int
TableColumnsHas(ConstHandle2ConstTable This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ColumnsHas", This, extract::columns);
}

// Get
// Returns by value
int
TableColumnsGet(ConstHandle2ConstTable This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ColumnsGet", This, extract::columns);
}

// Set
void
TableColumnsSet(ConstHandle2Table This, const int columns)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ColumnsSet", This, extract::columns, columns);
}


// -----------------------------------------------------------------------------
// Child: columnHeaders
// -----------------------------------------------------------------------------

// Has
int
TableColumnHeadersHas(ConstHandle2ConstTable This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ColumnHeadersHas", This, extract::columnHeaders);
}

// Get, const
Handle2ConstColumnHeaders
TableColumnHeadersGetConst(ConstHandle2ConstTable This)
{
   return detail::getField<CPP,Handle2ConstColumnHeaders>
      (CLASSNAME, CLASSNAME+"ColumnHeadersGetConst", This, extract::columnHeaders);
}

// Get, non-const
Handle2ColumnHeaders
TableColumnHeadersGet(ConstHandle2Table This)
{
   return detail::getField<CPP,Handle2ColumnHeaders>
      (CLASSNAME, CLASSNAME+"ColumnHeadersGet", This, extract::columnHeaders);
}

// Set
void
TableColumnHeadersSet(ConstHandle2Table This, ConstHandle2ConstColumnHeaders columnHeaders)
{
   detail::setField<CPP,CPPColumnHeaders>
      (CLASSNAME, CLASSNAME+"ColumnHeadersSet", This, extract::columnHeaders, columnHeaders);
}


// -----------------------------------------------------------------------------
// Child: data
// -----------------------------------------------------------------------------

// Has
int
TableDataHas(ConstHandle2ConstTable This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DataHas", This, extract::data);
}

// Get, const
Handle2ConstData
TableDataGetConst(ConstHandle2ConstTable This)
{
   return detail::getField<CPP,Handle2ConstData>
      (CLASSNAME, CLASSNAME+"DataGetConst", This, extract::data);
}

// Get, non-const
Handle2Data
TableDataGet(ConstHandle2Table This)
{
   return detail::getField<CPP,Handle2Data>
      (CLASSNAME, CLASSNAME+"DataGet", This, extract::data);
}

// Set
void
TableDataSet(ConstHandle2Table This, ConstHandle2ConstData data)
{
   detail::setField<CPP,CPPData>
      (CLASSNAME, CLASSNAME+"DataSet", This, extract::data, data);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/mean/Table/src/custom.cpp"
