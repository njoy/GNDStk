
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// IncidentEnergies is the basic handle type in this file. Example:
//    // Create a default IncidentEnergies object:
//    IncidentEnergies handle = IncidentEnergiesDefault();
// Functions involving IncidentEnergies are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_ALPHA_V2_0_NFY_INCIDENTENERGIES
#define C_INTERFACE_ALPHA_V2_0_NFY_INCIDENTENERGIES

#include "GNDStk.h"
#include "v2.0/nfy/IncidentEnergy.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct IncidentEnergiesClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ IncidentEnergies
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct IncidentEnergiesClass *IncidentEnergies;

// --- Const-aware handles.
typedef const struct IncidentEnergiesClass *const ConstHandle2ConstIncidentEnergies;
typedef       struct IncidentEnergiesClass *const ConstHandle2IncidentEnergies;
typedef const struct IncidentEnergiesClass *      Handle2ConstIncidentEnergies;
typedef       struct IncidentEnergiesClass *      Handle2IncidentEnergies;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstIncidentEnergies
IncidentEnergiesDefaultConst();

// +++ Create, default
extern_c Handle2IncidentEnergies
IncidentEnergiesDefault();

// --- Create, general, const
extern_c Handle2ConstIncidentEnergies
IncidentEnergiesCreateConst(
   ConstHandle2IncidentEnergy *const incidentEnergy, const size_t incidentEnergySize
);

// +++ Create, general
extern_c Handle2IncidentEnergies
IncidentEnergiesCreate(
   ConstHandle2IncidentEnergy *const incidentEnergy, const size_t incidentEnergySize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
IncidentEnergiesAssign(ConstHandle2IncidentEnergies This, ConstHandle2ConstIncidentEnergies from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
IncidentEnergiesDelete(ConstHandle2ConstIncidentEnergies This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
IncidentEnergiesRead(ConstHandle2IncidentEnergies This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
IncidentEnergiesWrite(ConstHandle2ConstIncidentEnergies This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
IncidentEnergiesPrint(ConstHandle2ConstIncidentEnergies This);

// +++ Print to standard output, as XML
extern_c int
IncidentEnergiesPrintXML(ConstHandle2ConstIncidentEnergies This);

// +++ Print to standard output, as JSON
extern_c int
IncidentEnergiesPrintJSON(ConstHandle2ConstIncidentEnergies This);


// -----------------------------------------------------------------------------
// Child: incidentEnergy
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
IncidentEnergiesIncidentEnergyHas(ConstHandle2ConstIncidentEnergies This);

// +++ Clear
extern_c void
IncidentEnergiesIncidentEnergyClear(ConstHandle2IncidentEnergies This);

// +++ Size
extern_c size_t
IncidentEnergiesIncidentEnergySize(ConstHandle2ConstIncidentEnergies This);

// +++ Add
extern_c void
IncidentEnergiesIncidentEnergyAdd(ConstHandle2IncidentEnergies This, ConstHandle2ConstIncidentEnergy incidentEnergy);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstIncidentEnergy
IncidentEnergiesIncidentEnergyGetConst(ConstHandle2ConstIncidentEnergies This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2IncidentEnergy
IncidentEnergiesIncidentEnergyGet(ConstHandle2IncidentEnergies This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
IncidentEnergiesIncidentEnergySet(
   ConstHandle2IncidentEnergies This,
   const size_t index_,
   ConstHandle2ConstIncidentEnergy incidentEnergy
);

// +++ Has, by label
extern_c int
IncidentEnergiesIncidentEnergyHasByLabel(
   ConstHandle2ConstIncidentEnergies This,
   const char *const label
);

// --- Get, by label, const
extern_c Handle2ConstIncidentEnergy
IncidentEnergiesIncidentEnergyGetByLabelConst(
   ConstHandle2ConstIncidentEnergies This,
   const char *const label
);

// +++ Get, by label, non-const
extern_c Handle2IncidentEnergy
IncidentEnergiesIncidentEnergyGetByLabel(
   ConstHandle2IncidentEnergies This,
   const char *const label
);

// +++ Set, by label
extern_c void
IncidentEnergiesIncidentEnergySetByLabel(
   ConstHandle2IncidentEnergies This,
   const char *const label,
   ConstHandle2ConstIncidentEnergy incidentEnergy
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/nfy/IncidentEnergies/src/custom.h"

#undef extern_c
#endif
