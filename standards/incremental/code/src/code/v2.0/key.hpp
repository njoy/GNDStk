
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_KEY
#define TEST_V2_0_KEY

// GNDStk Core Interface
#include "GNDStk.hpp"

namespace test {
namespace v2_0 {

using namespace njoy::GNDStk;


// -----------------------------------------------------------------------------
// meta::
// -----------------------------------------------------------------------------

namespace meta {

#define GNDSTK_MAKE_LOOKUP(nameField,nameGNDS) \
   inline const auto nameField = makeLookup( \
      [](const auto &obj) -> decltype(obj.nameField()) \
      { return obj.nameField(); }, \
      #nameGNDS \
   )
// nameField vs. nameGNDS: for, e.g., Double vs. double in GNDS

GNDSTK_MAKE_LOOKUP(Z,Z);
GNDSTK_MAKE_LOOKUP(date,date);
GNDSTK_MAKE_LOOKUP(dateType,dateType);
GNDSTK_MAKE_LOOKUP(electronNumber,electronNumber);
GNDSTK_MAKE_LOOKUP(format,format);
GNDSTK_MAKE_LOOKUP(label,label);
GNDSTK_MAKE_LOOKUP(library,library);
GNDSTK_MAKE_LOOKUP(name,name);
GNDSTK_MAKE_LOOKUP(subshell,subshell);
GNDSTK_MAKE_LOOKUP(symbol,symbol);
GNDSTK_MAKE_LOOKUP(unit,unit);
GNDSTK_MAKE_LOOKUP(value,value);
GNDSTK_MAKE_LOOKUP(version,version);

#undef GNDSTK_MAKE_LOOKUP

} // namespace meta


// -----------------------------------------------------------------------------
// gnds::child::
// -----------------------------------------------------------------------------

namespace gnds {
namespace child {

inline const Child<> Double("double");
inline const Child<> PoPs("PoPs");
inline const Child<> atomic("atomic");
inline const Child<> author("author");
inline const Child<> authors("authors");
inline const Child<> bindingEnergy("bindingEnergy");
inline const Child<> body("body");
inline const Child<> chemicalElement("chemicalElement");
inline const Child<> chemicalElements("chemicalElements");
inline const Child<> configuration("configuration");
inline const Child<> configurations("configurations");
inline const Child<> date("date");
inline const Child<> dates("dates");
inline const Child<> documentation("documentation");
inline const Child<> endfCompatible("endfCompatible");
inline const Child<> evaluated("evaluated");
inline const Child<> styles("styles");
inline const Child<> title("title");

} // namespace child
using namespace child;
} // namespace gnds


// -----------------------------------------------------------------------------
// For convenience: using directives
// -----------------------------------------------------------------------------

namespace key {
   using namespace meta;
   using namespace gnds::child;
} // namespace key

using namespace key;
using namespace gnds;


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

} // namespace v2_0
} // namespace test

#endif
