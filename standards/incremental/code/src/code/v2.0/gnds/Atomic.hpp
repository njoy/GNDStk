
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef CODE_V2_0_GNDS_ATOMIC
#define CODE_V2_0_GNDS_ATOMIC

#include "code/v2.0/gnds/Configurations.hpp"

namespace code {
namespace v2_0 {
namespace gnds {

// -----------------------------------------------------------------------------
// gnds::
// class Atomic
// -----------------------------------------------------------------------------

class Atomic : public Component<gnds::Atomic> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "gnds"; }
   static auto CLASS() { return "Atomic"; }
   static auto FIELD() { return "atomic"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         --Child<gnds::Configurations>("configurations")
      ;
   }

public:
   using Component::construct;

   // children
   Field<gnds::Configurations> configurations{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->configurations)

   // default
   Atomic() :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: Atomic: default" << std::endl;
      Component::finish();
   }

   // from fields
   explicit Atomic(
      const wrapper<gnds::Configurations> &configurations
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      configurations(this,configurations)
   {
      std::cout << "ctor: Atomic: fields" << std::endl;
      Component::finish();
   }

   // from node
   explicit Atomic(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: Atomic: node" << std::endl;
      Component::finish(node);
   }

   // copy
   Atomic(const Atomic &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      configurations(this,other.configurations)
   {
      std::cout << "ctor: Atomic: copy" << std::endl;
      Component::finish(other);
   }

   // move
   Atomic(Atomic &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      configurations(this,std::move(other.configurations))
   {
      std::cout << "ctor: Atomic: move" << std::endl;
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Atomic &operator=(const Atomic &other)
   {
      if (this != &other) {
         std::cout << "assign: Atomic: copy" << std::endl;
         Component::operator=(other);
         configurations = other.configurations;
      }
      return *this;
   }

   // move
   Atomic &operator=(Atomic &&other)
   {
      if (this != &other) {
         std::cout << "assign: Atomic: move" << std::endl;
         Component::operator=(std::move(other));
         configurations = std::move(other.configurations);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "code/v2.0/gnds/Atomic/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Atomic

} // namespace gnds
} // namespace v2_0
} // namespace code

#endif
