
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef CODE_V2_0_GNDS_BINDINGENERGY
#define CODE_V2_0_GNDS_BINDINGENERGY

#include "code/v2.0/gnds/Double.hpp"

namespace code {
namespace v2_0 {
namespace gnds {

// -----------------------------------------------------------------------------
// gnds::
// class BindingEnergy
// -----------------------------------------------------------------------------

class BindingEnergy : public Component<gnds::BindingEnergy> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "gnds"; }
   static auto CLASS() { return "BindingEnergy"; }
   static auto FIELD() { return "bindingEnergy"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         --Child<gnds::Double>("double")
      ;
   }

public:
   using Component::construct;

   // children
   Field<gnds::Double> Double{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->Double)

   // default
   BindingEnergy() :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: BindingEnergy: default" << std::endl;
      Component::finish();
   }

   // from fields
   explicit BindingEnergy(
      const wrapper<gnds::Double> &Double
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      Double(this,Double)
   {
      std::cout << "ctor: BindingEnergy: fields" << std::endl;
      Component::finish();
   }

   // from node
   explicit BindingEnergy(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: BindingEnergy: node" << std::endl;
      Component::finish(node);
   }

   // copy
   BindingEnergy(const BindingEnergy &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      Double(this,other.Double)
   {
      std::cout << "ctor: BindingEnergy: copy" << std::endl;
      Component::finish(other);
   }

   // move
   BindingEnergy(BindingEnergy &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      Double(this,std::move(other.Double))
   {
      std::cout << "ctor: BindingEnergy: move" << std::endl;
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   BindingEnergy &operator=(const BindingEnergy &other)
   {
      if (this != &other) {
         std::cout << "assign: BindingEnergy: copy" << std::endl;
         Component::operator=(other);
         Double = other.Double;
      }
      return *this;
   }

   // move
   BindingEnergy &operator=(BindingEnergy &&other)
   {
      if (this != &other) {
         std::cout << "assign: BindingEnergy: move" << std::endl;
         Component::operator=(std::move(other));
         Double = std::move(other.Double);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "code/v2.0/gnds/BindingEnergy/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class BindingEnergy

} // namespace gnds
} // namespace v2_0
} // namespace code

#endif
