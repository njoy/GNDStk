
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef CODE_V2_0_GNDS_POPS
#define CODE_V2_0_GNDS_POPS

#include "code/v2.0/gnds/Styles.hpp"
#include "code/v2.0/gnds/ChemicalElements.hpp"

namespace code {
namespace v2_0 {
namespace gnds {

// -----------------------------------------------------------------------------
// gnds::
// class PoPs
// -----------------------------------------------------------------------------

class PoPs : public Component<gnds::PoPs> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "gnds"; }
   static auto CLASS() { return "PoPs"; }
   static auto FIELD() { return "PoPs"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::string{}
            / Meta<>("name") |
         std::string{}
            / Meta<>("version") |
         std::string{}
            / Meta<>("format") |
         // children
         --Child<gnds::Styles>("styles") |
         --Child<gnds::ChemicalElements>("chemicalElements")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::string> name{this};
   Field<std::string> version{this};
   Field<std::string> format{this};

   // children
   Field<gnds::Styles> styles{this};
   Field<gnds::ChemicalElements> chemicalElements{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->name, \
      this->version, \
      this->format, \
      this->styles, \
      this->chemicalElements)

   // default
   PoPs() :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: PoPs: default" << std::endl;
      Component::finish();
   }

   // from fields
   explicit PoPs(
      const wrapper<std::string> &name,
      const wrapper<std::string> &version = {},
      const wrapper<std::string> &format = {},
      const wrapper<gnds::Styles> &styles = {},
      const wrapper<gnds::ChemicalElements> &chemicalElements = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      name(this,name),
      version(this,version),
      format(this,format),
      styles(this,styles),
      chemicalElements(this,chemicalElements)
   {
      std::cout << "ctor: PoPs: fields" << std::endl;
      Component::finish();
   }

   // from node
   explicit PoPs(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: PoPs: node" << std::endl;
      Component::finish(node);
   }

   // copy
   PoPs(const PoPs &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      name(this,other.name),
      version(this,other.version),
      format(this,other.format),
      styles(this,other.styles),
      chemicalElements(this,other.chemicalElements)
   {
      std::cout << "ctor: PoPs: copy" << std::endl;
      Component::finish(other);
   }

   // move
   PoPs(PoPs &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      name(this,std::move(other.name)),
      version(this,std::move(other.version)),
      format(this,std::move(other.format)),
      styles(this,std::move(other.styles)),
      chemicalElements(this,std::move(other.chemicalElements))
   {
      std::cout << "ctor: PoPs: move" << std::endl;
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   PoPs &operator=(const PoPs &other)
   {
      if (this != &other) {
         std::cout << "assign: PoPs: copy" << std::endl;
         Component::operator=(other);
         name = other.name;
         version = other.version;
         format = other.format;
         styles = other.styles;
         chemicalElements = other.chemicalElements;
      }
      return *this;
   }

   // move
   PoPs &operator=(PoPs &&other)
   {
      if (this != &other) {
         std::cout << "assign: PoPs: move" << std::endl;
         Component::operator=(std::move(other));
         name = std::move(other.name);
         version = std::move(other.version);
         format = std::move(other.format);
         styles = std::move(other.styles);
         chemicalElements = std::move(other.chemicalElements);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "code/v2.0/gnds/PoPs/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class PoPs

} // namespace gnds
} // namespace v2_0
} // namespace code

#endif
