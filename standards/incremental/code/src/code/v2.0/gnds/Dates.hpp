
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef CODE_V2_0_GNDS_DATES
#define CODE_V2_0_GNDS_DATES

#include "code/v2.0/gnds/Date.hpp"

namespace code {
namespace v2_0 {
namespace gnds {

// -----------------------------------------------------------------------------
// gnds::
// class Dates
// -----------------------------------------------------------------------------

class Dates : public Component<gnds::Dates> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "gnds"; }
   static auto CLASS() { return "Dates"; }
   static auto FIELD() { return "dates"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment)/commentConverter{} |

         // children
         ++Child<gnds::Date>("date")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::vector<gnds::Date>> date{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->date)

   // default
   Dates() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Dates(
      const wrapper<std::vector<gnds::Date>> &date
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      date(this,date)
   {
      Component::finish();
   }

   // from node
   explicit Dates(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Dates(const Dates &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      date(this,other.date)
   {
      Component::finish(other);
   }

   // move
   Dates(Dates &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      date(this,std::move(other.date))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Dates &operator=(const Dates &) = default;
   Dates &operator=(Dates &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "code/v2.0/gnds/Dates/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Dates

} // namespace gnds
} // namespace v2_0
} // namespace code

#endif
