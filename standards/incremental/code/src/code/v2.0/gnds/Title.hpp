
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef CODE_V2_0_GNDS_TITLE
#define CODE_V2_0_GNDS_TITLE

#include "code/v2.0/key.hpp"

namespace code {
namespace v2_0 {
namespace gnds {

// -----------------------------------------------------------------------------
// gnds::
// class Title
// -----------------------------------------------------------------------------

class Title : public Component<gnds::Title,true> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "gnds"; }
   static auto CLASS() { return "Title"; }
   static auto FIELD() { return "title"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return std::tuple<>{};
   }

public:
   using Component::construct;
   using BlockData::operator=;

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata)

   // default
   Title() :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: Title: default" << std::endl;
      Component::finish();
   }

   // from node
   explicit Title(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: Title: node" << std::endl;
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   Title(const std::vector<T> &vector) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: Title: vector" << std::endl;
      Component::finish(vector);
   }

   // copy
   Title(const Title &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      std::cout << "ctor: Title: copy" << std::endl;
      *this = other;
      Component::finish(other);
   }

   // move
   Title(Title &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      std::cout << "ctor: Title: move" << std::endl;
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Title &operator=(const Title &other)
   {
      if (this != &other) {
      }
      std::cout << "assign: Title: copy" << std::endl;
      return *this;
   }

   // move
   Title &operator=(Title &&other)
   {
      if (this != &other) {
      }
      std::cout << "assign: Title: move" << std::endl;
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "code/v2.0/gnds/Title/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Title

} // namespace gnds
} // namespace v2_0
} // namespace code

#endif
