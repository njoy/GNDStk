
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef CODE_V2_0_GNDS_ENDFCOMPATIBLE
#define CODE_V2_0_GNDS_ENDFCOMPATIBLE

#include "code/v2.0/key.hpp"

namespace code {
namespace v2_0 {
namespace gnds {

// -----------------------------------------------------------------------------
// gnds::
// class EndfCompatible
// -----------------------------------------------------------------------------

class EndfCompatible : public Component<gnds::EndfCompatible,true> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "gnds"; }
   static auto CLASS() { return "EndfCompatible"; }
   static auto FIELD() { return "endfCompatible"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return std::tuple<>{};
   }

public:
   using Component::construct;
   using BlockData::operator=;

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata)

   // default
   EndfCompatible() :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: EndfCompatible: default" << std::endl;
      Component::finish();
   }

   // from node
   explicit EndfCompatible(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: EndfCompatible: node" << std::endl;
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   EndfCompatible(const std::vector<T> &vector) :
      GNDSTK_COMPONENT(BlockData{})
   {
      std::cout << "ctor: EndfCompatible: vector" << std::endl;
      Component::finish(vector);
   }

   // copy
   EndfCompatible(const EndfCompatible &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      std::cout << "ctor: EndfCompatible: copy" << std::endl;
      Component::finish(other);
   }

   // move
   EndfCompatible(EndfCompatible &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      std::cout << "ctor: EndfCompatible: move" << std::endl;
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   EndfCompatible &operator=(const EndfCompatible &other)
   {
      if (this != &other) {
         std::cout << "assign: EndfCompatible: copy" << std::endl;
         Component::operator=(other);
      }
      return *this;
   }

   // move
   EndfCompatible &operator=(EndfCompatible &&other)
   {
      if (this != &other) {
         std::cout << "assign: EndfCompatible: move" << std::endl;
         Component::operator=(std::move(other));
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "code/v2.0/gnds/EndfCompatible/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class EndfCompatible

} // namespace gnds
} // namespace v2_0
} // namespace code

#endif
