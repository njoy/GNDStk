
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "code/v2.0/gnds/Documentation.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_gnds {

// wrapper for gnds::Documentation
void wrapDocumentation(py::module &module)
{
   using namespace code;
   using namespace code::v2_0;

   // type aliases
   using cppCLASS = gnds::Documentation;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Documentation",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const gnds::Authors &,
         const gnds::Dates &,
         const gnds::Title &,
         const gnds::Body &,
         const gnds::EndfCompatible &
      >(),
      py::arg("authors"),
      py::arg("dates"),
      py::arg("title"),
      py::arg("body"),
      py::arg("endf_compatible"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set authors
   object.def_property(
      "authors",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.authors();
      },
      [](cppCLASS &self, const gnds::Authors &value)
      {
         self.authors() = value;
      },
      cppCLASS::component_t::documentation("authors").data()
   );

   // get/set dates
   object.def_property(
      "dates",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.dates();
      },
      [](cppCLASS &self, const gnds::Dates &value)
      {
         self.dates() = value;
      },
      cppCLASS::component_t::documentation("dates").data()
   );

   // get/set title
   object.def_property(
      "title",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.title();
      },
      [](cppCLASS &self, const gnds::Title &value)
      {
         self.title() = value;
      },
      cppCLASS::component_t::documentation("title").data()
   );

   // get/set body
   object.def_property(
      "body",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.body();
      },
      [](cppCLASS &self, const gnds::Body &value)
      {
         self.body() = value;
      },
      cppCLASS::component_t::documentation("body").data()
   );

   // get/set endfCompatible
   object.def_property(
      "endf_compatible",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.endfCompatible();
      },
      [](cppCLASS &self, const gnds::EndfCompatible &value)
      {
         self.endfCompatible() = value;
      },
      cppCLASS::component_t::documentation("endf_compatible").data()
   );

   // shortcut: get/set author
   object.def_property(
      "author",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.author();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.author())> &value)
      {
         self.author() = value;
      },
      cppCLASS::component_t::documentation("author").data()
   );

   // shortcut: get/set date
   object.def_property(
      "date",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.date();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.date())> &value)
      {
         self.date() = value;
      },
      cppCLASS::component_t::documentation("date").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_gnds
} // namespace python_v2_0
