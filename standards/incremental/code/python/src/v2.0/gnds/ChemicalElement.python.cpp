
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "code/v2.0/gnds/ChemicalElement.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_gnds {

// wrapper for gnds::ChemicalElement
void wrapChemicalElement(py::module &module)
{
   using namespace code;
   using namespace code::v2_0;

   // type aliases
   using cppCLASS = gnds::ChemicalElement;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ChemicalElement",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const int &,
         const std::string &,
         const gnds::Atomic &
      >(),
      py::arg("symbol"),
      py::arg("z"),
      py::arg("name"),
      py::arg("atomic"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set symbol
   object.def_property(
      "symbol",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.symbol();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.symbol() = value;
      },
      cppCLASS::component_t::documentation("symbol").data()
   );

   // get/set Z
   object.def_property(
      "z",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Z();
      },
      [](cppCLASS &self, const int &value)
      {
         self.Z() = value;
      },
      cppCLASS::component_t::documentation("z").data()
   );

   // get/set name
   object.def_property(
      "name",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.name();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.name() = value;
      },
      cppCLASS::component_t::documentation("name").data()
   );

   // get/set atomic
   object.def_property(
      "atomic",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.atomic();
      },
      [](cppCLASS &self, const gnds::Atomic &value)
      {
         self.atomic() = value;
      },
      cppCLASS::component_t::documentation("atomic").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_gnds
} // namespace python_v2_0
