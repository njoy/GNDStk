
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "code/v2.0/gnds/PoPs.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_gnds {

// wrapper for gnds::PoPs
void wrapPoPs(py::module &module)
{
   using namespace code;
   using namespace code::v2_0;

   // type aliases
   using cppCLASS = gnds::PoPs;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "PoPs",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const std::string &,
         const gnds::Styles &,
         const gnds::ChemicalElements &
      >(),
      py::arg("name"),
      py::arg("version"),
      py::arg("format"),
      py::arg("styles"),
      py::arg("chemical_elements"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set name
   object.def_property(
      "name",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.name();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.name() = value;
      },
      cppCLASS::component_t::documentation("name").data()
   );

   // get/set version
   object.def_property(
      "version",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.version();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.version() = value;
      },
      cppCLASS::component_t::documentation("version").data()
   );

   // get/set format
   object.def_property(
      "format",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.format();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.format() = value;
      },
      cppCLASS::component_t::documentation("format").data()
   );

   // get/set styles
   object.def_property(
      "styles",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.styles();
      },
      [](cppCLASS &self, const gnds::Styles &value)
      {
         self.styles() = value;
      },
      cppCLASS::component_t::documentation("styles").data()
   );

   // get/set chemicalElements
   object.def_property(
      "chemical_elements",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.chemicalElements();
      },
      [](cppCLASS &self, const gnds::ChemicalElements &value)
      {
         self.chemicalElements() = value;
      },
      cppCLASS::component_t::documentation("chemical_elements").data()
   );

   // shortcut: get/set chemicalElement
   object.def_property(
      "chemical_element",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.chemicalElement();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.chemicalElement())> &value)
      {
         self.chemicalElement() = value;
      },
      cppCLASS::component_t::documentation("chemical_element").data()
   );

   // shortcut: get/set documentation
   object.def_property(
      "documentation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.documentation();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.documentation())> &value)
      {
         self.documentation() = value;
      },
      cppCLASS::component_t::documentation("documentation").data()
   );

   // shortcut: get/set evaluated
   object.def_property(
      "evaluated",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.evaluated();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.evaluated())> &value)
      {
         self.evaluated() = value;
      },
      cppCLASS::component_t::documentation("evaluated").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_gnds
} // namespace python_v2_0
