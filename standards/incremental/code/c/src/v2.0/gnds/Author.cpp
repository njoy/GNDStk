
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "code/v2_0/gnds/Author.hpp"
#include "Author.h"

using namespace njoy::GNDStk;
using namespace code::v2_0;

using C = AuthorClass;
using CPP = multigroup::Author;

static const std::string CLASSNAME = "Author";

namespace extract {
   static auto name = [](auto &obj) { return &obj.name; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstAuthor
AuthorDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Author
AuthorDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstAuthor
AuthorCreateConst(
   const char *const name
) {
   ConstHandle2Author handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      name
   );
   return handle;
}

// Create, general
Handle2Author
AuthorCreate(
   const char *const name
) {
   ConstHandle2Author handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      name
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
AuthorAssign(ConstHandle2Author This, ConstHandle2ConstAuthor from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
AuthorDelete(ConstHandle2ConstAuthor This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
AuthorRead(ConstHandle2Author This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
AuthorWrite(ConstHandle2ConstAuthor This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
AuthorPrint(ConstHandle2ConstAuthor This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
AuthorPrintXML(ConstHandle2ConstAuthor This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
AuthorPrintJSON(ConstHandle2ConstAuthor This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// Has
int
AuthorNameHas(ConstHandle2ConstAuthor This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NameHas", This, extract::name);
}

// Get
// Returns by value
const char *
AuthorNameGet(ConstHandle2ConstAuthor This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NameGet", This, extract::name);
}

// Set
void
AuthorNameSet(ConstHandle2Author This, const char *const name)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NameSet", This, extract::name, name);
}
