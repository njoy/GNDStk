
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "code/v2_0/gnds/Styles.hpp"
#include "Styles.h"

using namespace njoy::GNDStk;
using namespace code::v2_0;

using C = StylesClass;
using CPP = multigroup::Styles;

static const std::string CLASSNAME = "Styles";

namespace extract {
   static auto evaluated = [](auto &obj) { return &obj.evaluated; };
}

using CPPEvaluated = gnds::Evaluated;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstStyles
StylesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Styles
StylesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstStyles
StylesCreateConst(
   ConstHandle2ConstEvaluated evaluated
) {
   ConstHandle2Styles handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPEvaluated>(evaluated)
   );
   return handle;
}

// Create, general
Handle2Styles
StylesCreate(
   ConstHandle2ConstEvaluated evaluated
) {
   ConstHandle2Styles handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPEvaluated>(evaluated)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
StylesAssign(ConstHandle2Styles This, ConstHandle2ConstStyles from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
StylesDelete(ConstHandle2ConstStyles This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
StylesRead(ConstHandle2Styles This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
StylesWrite(ConstHandle2ConstStyles This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
StylesPrint(ConstHandle2ConstStyles This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
StylesPrintXML(ConstHandle2ConstStyles This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
StylesPrintJSON(ConstHandle2ConstStyles This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: evaluated
// -----------------------------------------------------------------------------

// Has
int
StylesEvaluatedHas(ConstHandle2ConstStyles This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHas", This, extract::evaluated);
}

// Get, const
Handle2ConstEvaluated
StylesEvaluatedGetConst(ConstHandle2ConstStyles This)
{
   return detail::getField<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetConst", This, extract::evaluated);
}

// Get, non-const
Handle2Evaluated
StylesEvaluatedGet(ConstHandle2Styles This)
{
   return detail::getField<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGet", This, extract::evaluated);
}

// Set
void
StylesEvaluatedSet(ConstHandle2Styles This, ConstHandle2ConstEvaluated evaluated)
{
   detail::setField<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSet", This, extract::evaluated, evaluated);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/gnds/Styles/src/custom.cpp"
