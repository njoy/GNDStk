
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_MIXED
#define TEST_V2_0_COVARIANCE_MIXED

#include "test/v2.0/covariance/CovarianceMatrix.hpp"
#include "test/v2.0/covariance/ShortRangeSelfScalingVariance.hpp"
#include "test/v2.0/covariance/Sum.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class Mixed
// -----------------------------------------------------------------------------

class Mixed : public Component<covariance::Mixed> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "Mixed"; }
   static auto FIELD() { return "mixed"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         std::optional<covariance::CovarianceMatrix>{}
            / ++Child<>("covarianceMatrix") |
         std::optional<covariance::ShortRangeSelfScalingVariance>{}
            / ++Child<>("shortRangeSelfScalingVariance") |
         std::optional<covariance::Sum>{}
            / ++Child<>("sum")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> label{this};

   // children
   Field<std::optional<std::vector<covariance::CovarianceMatrix>>> covarianceMatrix{this};
   Field<std::optional<std::vector<covariance::ShortRangeSelfScalingVariance>>> shortRangeSelfScalingVariance{this};
   Field<std::optional<std::vector<covariance::Sum>>> sum{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->covarianceMatrix, \
      this->shortRangeSelfScalingVariance, \
      this->sum)

   // default, and from fields
   explicit Mixed(
      const wrapper<XMLName> &label = {},
      const wrapper<std::optional<std::vector<covariance::CovarianceMatrix>>> &covarianceMatrix = {},
      const wrapper<std::optional<std::vector<covariance::ShortRangeSelfScalingVariance>>> &shortRangeSelfScalingVariance = {},
      const wrapper<std::optional<std::vector<covariance::Sum>>> &sum = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      covarianceMatrix(this,covarianceMatrix),
      shortRangeSelfScalingVariance(this,shortRangeSelfScalingVariance),
      sum(this,sum)
   {
      Component::finish();
   }

   // from node
   explicit Mixed(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Mixed(const Mixed &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Mixed(Mixed &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Mixed &operator=(const Mixed &) = default;
   Mixed &operator=(Mixed &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/Mixed/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Mixed

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
