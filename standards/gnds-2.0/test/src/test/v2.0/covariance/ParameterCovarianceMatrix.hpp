
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_PARAMETERCOVARIANCEMATRIX
#define TEST_V2_0_COVARIANCE_PARAMETERCOVARIANCEMATRIX

#include "test/v2.0/covariance/Parameters.hpp"
#include "test/v2.0/containers/Array.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class ParameterCovarianceMatrix
// -----------------------------------------------------------------------------

class ParameterCovarianceMatrix :
   public Component<covariance::ParameterCovarianceMatrix>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "ParameterCovarianceMatrix"; }
   static auto NODENAME() { return "parameterCovarianceMatrix"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("type") |

         // children
         --Child<covariance::Parameters>
            ("parameters") |
         --Child<containers::Array>
            ("array")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "type",
         "parameters",
         "array"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "type",
         "parameters",
         "array"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      label{this};
   Field<std::optional<XMLName>>
      type{this};

   // children
   Field<covariance::Parameters>
      parameters{this};
   Field<containers::Array>
      array{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->type, \
      this->parameters, \
      this->array \
   )

   // default
   ParameterCovarianceMatrix() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ParameterCovarianceMatrix(
      const wrapper<XMLName>
         &label,
      const wrapper<std::optional<XMLName>>
         &type = {},
      const wrapper<covariance::Parameters>
         &parameters = {},
      const wrapper<containers::Array>
         &array = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      type(this,type),
      parameters(this,parameters),
      array(this,array)
   {
      Component::finish();
   }

   // from node
   explicit ParameterCovarianceMatrix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ParameterCovarianceMatrix(const ParameterCovarianceMatrix &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      type(this,other.type),
      parameters(this,other.parameters),
      array(this,other.array)
   {
      Component::finish(other);
   }

   // move
   ParameterCovarianceMatrix(ParameterCovarianceMatrix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      type(this,std::move(other.type)),
      parameters(this,std::move(other.parameters)),
      array(this,std::move(other.array))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ParameterCovarianceMatrix &operator=(const ParameterCovarianceMatrix &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         type = other.type;
         parameters = other.parameters;
         array = other.array;
      }
      return *this;
   }

   // move
   ParameterCovarianceMatrix &operator=(ParameterCovarianceMatrix &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         type = std::move(other.type);
         parameters = std::move(other.parameters);
         array = std::move(other.array);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/ParameterCovarianceMatrix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ParameterCovarianceMatrix

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
