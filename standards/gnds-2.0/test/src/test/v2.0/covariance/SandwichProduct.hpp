
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_SANDWICHPRODUCT
#define TEST_V2_0_COVARIANCE_SANDWICHPRODUCT

#include "test/v2.0/containers/Axes.hpp"
#include "test/v2.0/covariance/Covariance.hpp"
#include "test/v2.0/covariance/RowSensitivity.hpp"
#include "test/v2.0/covariance/ColumnSensitivity.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class SandwichProduct
// -----------------------------------------------------------------------------

class SandwichProduct :
   public Component<covariance::SandwichProduct>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "SandwichProduct"; }
   static auto NODENAME() { return "sandwichProduct"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<containers::Axes>
            ("axes") |
         --Child<covariance::Covariance>
            ("covariance") |
         --Child<covariance::RowSensitivity>
            ("rowSensitivity") |
         --Child<std::optional<covariance::ColumnSensitivity>>
            ("columnSensitivity")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "axes",
         "covariance",
         "rowSensitivity",
         "columnSensitivity"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "axes",
         "covariance",
         "row_sensitivity",
         "column_sensitivity"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<containers::Axes>
      axes{this};
   Field<covariance::Covariance>
      covariance{this};
   Field<covariance::RowSensitivity>
      rowSensitivity{this};
   Field<std::optional<covariance::ColumnSensitivity>>
      columnSensitivity{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(axes(),axis);
   GNDSTK_SHORTCUT(axes(),grid);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->axes, \
      this->covariance, \
      this->rowSensitivity, \
      this->columnSensitivity \
   )

   // default
   SandwichProduct() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit SandwichProduct(
      const wrapper<containers::Axes>
         &axes,
      const wrapper<covariance::Covariance>
         &covariance = {},
      const wrapper<covariance::RowSensitivity>
         &rowSensitivity = {},
      const wrapper<std::optional<covariance::ColumnSensitivity>>
         &columnSensitivity = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      axes(this,axes),
      covariance(this,covariance),
      rowSensitivity(this,rowSensitivity),
      columnSensitivity(this,columnSensitivity)
   {
      Component::finish();
   }

   // from node
   explicit SandwichProduct(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   SandwichProduct(const SandwichProduct &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      axes(this,other.axes),
      covariance(this,other.covariance),
      rowSensitivity(this,other.rowSensitivity),
      columnSensitivity(this,other.columnSensitivity)
   {
      Component::finish(other);
   }

   // move
   SandwichProduct(SandwichProduct &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      axes(this,std::move(other.axes)),
      covariance(this,std::move(other.covariance)),
      rowSensitivity(this,std::move(other.rowSensitivity)),
      columnSensitivity(this,std::move(other.columnSensitivity))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   SandwichProduct &operator=(const SandwichProduct &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         axes = other.axes;
         covariance = other.covariance;
         rowSensitivity = other.rowSensitivity;
         columnSensitivity = other.columnSensitivity;
      }
      return *this;
   }

   // move
   SandwichProduct &operator=(SandwichProduct &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         axes = std::move(other.axes);
         covariance = std::move(other.covariance);
         rowSensitivity = std::move(other.rowSensitivity);
         columnSensitivity = std::move(other.columnSensitivity);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/SandwichProduct/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class SandwichProduct

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
