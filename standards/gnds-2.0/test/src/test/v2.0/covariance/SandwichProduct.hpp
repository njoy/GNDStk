
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_SANDWICHPRODUCT
#define TEST_V2_0_COVARIANCE_SANDWICHPRODUCT

#include "test/v2.0/containers/Axes.hpp"
#include "test/v2.0/covariance/Covariance.hpp"
#include "test/v2.0/covariance/RowSensitivity.hpp"
#include "test/v2.0/covariance/ColumnSensitivity.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class SandwichProduct
// -----------------------------------------------------------------------------

class SandwichProduct : public Component<covariance::SandwichProduct> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "SandwichProduct"; }
   static auto FIELD() { return "sandwichProduct"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         --Child<containers::Axes>("axes") |
         --Child<covariance::Covariance>("covariance") |
         --Child<covariance::RowSensitivity>("rowSensitivity") |
         --Child<std::optional<covariance::ColumnSensitivity>>("columnSensitivity")
      ;
   }

public:
   using Component::construct;

   // children
   Field<containers::Axes> axes{this};
   Field<covariance::Covariance> covariance{this};
   Field<covariance::RowSensitivity> rowSensitivity{this};
   Field<std::optional<covariance::ColumnSensitivity>> columnSensitivity{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->axes, \
      this->covariance, \
      this->rowSensitivity, \
      this->columnSensitivity)

   // default
   SandwichProduct() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit SandwichProduct(
      const wrapper<containers::Axes> &axes,
      const wrapper<covariance::Covariance> &covariance = {},
      const wrapper<covariance::RowSensitivity> &rowSensitivity = {},
      const wrapper<std::optional<covariance::ColumnSensitivity>> &columnSensitivity = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      axes(this,axes),
      covariance(this,covariance),
      rowSensitivity(this,rowSensitivity),
      columnSensitivity(this,columnSensitivity)
   {
      Component::finish();
   }

   // from node
   explicit SandwichProduct(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   SandwichProduct(const SandwichProduct &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      axes(this,other.axes),
      covariance(this,other.covariance),
      rowSensitivity(this,other.rowSensitivity),
      columnSensitivity(this,other.columnSensitivity)
   {
      Component::finish(other);
   }

   // move
   SandwichProduct(SandwichProduct &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      axes(this,std::move(other.axes)),
      covariance(this,std::move(other.covariance)),
      rowSensitivity(this,std::move(other.rowSensitivity)),
      columnSensitivity(this,std::move(other.columnSensitivity))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   SandwichProduct &operator=(const SandwichProduct &) = default;
   SandwichProduct &operator=(SandwichProduct &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/SandwichProduct/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class SandwichProduct

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
