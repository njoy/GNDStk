
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_AVERAGEPARAMETERCOVARIANCE
#define TEST_V2_0_COVARIANCE_AVERAGEPARAMETERCOVARIANCE

#include "test/v2.0/covariance/ColumnData.hpp"
#include "test/v2.0/covariance/RowData.hpp"
#include "test/v2.0/covariance/CovarianceMatrix.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class AverageParameterCovariance
// -----------------------------------------------------------------------------

class AverageParameterCovariance :
   public Component<covariance::AverageParameterCovariance>
{
   friend class Component;

   using _t = std::variant<
      covariance::CovarianceMatrix
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "AverageParameterCovariance"; }
   static auto NODENAME() { return "averageParameterCovariance"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<bool>{}
            / Meta<>("crossTerm") |
         std::optional<XMLName>{}
            / Meta<>("label") |

         // children
         --Child<std::optional<covariance::ColumnData>>
            ("columnData") |
         --Child<std::optional<covariance::RowData>>
            ("rowData") |
         _t{}
            / --(Child<>("covarianceMatrix"))
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "crossTerm",
         "label",
         "columnData",
         "rowData",
         "_covarianceMatrix"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "cross_term",
         "label",
         "column_data",
         "row_data",
         "_covariance_matrix"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<bool>>
      crossTerm{this};
   Field<std::optional<XMLName>>
      label{this};

   // children
   Field<std::optional<covariance::ColumnData>>
      columnData{this};
   Field<std::optional<covariance::RowData>>
      rowData{this};

   // children - variant
   Field<_t>
      _covarianceMatrix{this};
   FieldPart<decltype(_covarianceMatrix),covariance::CovarianceMatrix> covarianceMatrix{_covarianceMatrix};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->crossTerm, \
      this->label, \
      this->columnData, \
      this->rowData, \
      this->_covarianceMatrix \
   )

   // default
   AverageParameterCovariance() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit AverageParameterCovariance(
      const wrapper<std::optional<bool>>
         &crossTerm,
      const wrapper<std::optional<XMLName>>
         &label = {},
      const wrapper<std::optional<covariance::ColumnData>>
         &columnData = {},
      const wrapper<std::optional<covariance::RowData>>
         &rowData = {},
      const wrapper<_t>
         &_covarianceMatrix = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      crossTerm(this,crossTerm),
      label(this,label),
      columnData(this,columnData),
      rowData(this,rowData),
      _covarianceMatrix(this,_covarianceMatrix)
   {
      Component::finish();
   }

   // from node
   explicit AverageParameterCovariance(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   AverageParameterCovariance(const AverageParameterCovariance &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      crossTerm(this,other.crossTerm),
      label(this,other.label),
      columnData(this,other.columnData),
      rowData(this,other.rowData),
      _covarianceMatrix(this,other._covarianceMatrix)
   {
      Component::finish(other);
   }

   // move
   AverageParameterCovariance(AverageParameterCovariance &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      crossTerm(this,std::move(other.crossTerm)),
      label(this,std::move(other.label)),
      columnData(this,std::move(other.columnData)),
      rowData(this,std::move(other.rowData)),
      _covarianceMatrix(this,std::move(other._covarianceMatrix))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   AverageParameterCovariance &operator=(const AverageParameterCovariance &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         crossTerm = other.crossTerm;
         label = other.label;
         columnData = other.columnData;
         rowData = other.rowData;
         _covarianceMatrix = other._covarianceMatrix;
      }
      return *this;
   }

   // move
   AverageParameterCovariance &operator=(AverageParameterCovariance &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         crossTerm = std::move(other.crossTerm);
         label = std::move(other.label);
         columnData = std::move(other.columnData);
         rowData = std::move(other.rowData);
         _covarianceMatrix = std::move(other._covarianceMatrix);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/AverageParameterCovariance/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class AverageParameterCovariance

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
