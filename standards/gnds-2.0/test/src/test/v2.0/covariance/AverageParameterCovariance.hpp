
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_AVERAGEPARAMETERCOVARIANCE
#define TEST_V2_0_COVARIANCE_AVERAGEPARAMETERCOVARIANCE

#include "test/v2.0/covariance/ColumnData.hpp"
#include "test/v2.0/covariance/RowData.hpp"
#include "test/v2.0/covariance/CovarianceMatrix.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class AverageParameterCovariance
// -----------------------------------------------------------------------------

class AverageParameterCovariance : public Component<covariance::AverageParameterCovariance> {
   friend class Component;

   using _t = std::variant<
      covariance::CovarianceMatrix
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "AverageParameterCovariance"; }
   static auto FIELD() { return "averageParameterCovariance"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<bool>{}
            / Meta<>("crossTerm") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         --Child<std::optional<covariance::ColumnData>>("columnData") |
         --Child<std::optional<covariance::RowData>>("rowData") |
         _t{}
            / --(Child<>("covarianceMatrix"))
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<bool>> crossTerm{this};
   Field<std::optional<XMLName>> label{this};

   // children
   Field<std::optional<covariance::ColumnData>> columnData{this};
   Field<std::optional<covariance::RowData>> rowData{this};

   // children - variant
   Field<_t> _covarianceMatrix{this};
   FieldPart<decltype(_covarianceMatrix),covariance::CovarianceMatrix> covarianceMatrix{_covarianceMatrix};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->crossTerm, \
      this->label, \
      this->columnData, \
      this->rowData, \
      this->_covarianceMatrix)

   // default
   AverageParameterCovariance() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit AverageParameterCovariance(
      const wrapper<std::optional<bool>> &crossTerm,
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<covariance::ColumnData>> &columnData = {},
      const wrapper<std::optional<covariance::RowData>> &rowData = {},
      const wrapper<_t> &_covarianceMatrix = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      crossTerm(this,crossTerm),
      label(this,label),
      columnData(this,columnData),
      rowData(this,rowData),
      _covarianceMatrix(this,_covarianceMatrix)
   {
      Component::finish();
   }

   // from node
   explicit AverageParameterCovariance(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   AverageParameterCovariance(const AverageParameterCovariance &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      crossTerm(this,other.crossTerm),
      label(this,other.label),
      columnData(this,other.columnData),
      rowData(this,other.rowData),
      _covarianceMatrix(this,other._covarianceMatrix)
   {
      Component::finish(other);
   }

   // move
   AverageParameterCovariance(AverageParameterCovariance &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      crossTerm(this,std::move(other.crossTerm)),
      label(this,std::move(other.label)),
      columnData(this,std::move(other.columnData)),
      rowData(this,std::move(other.rowData)),
      _covarianceMatrix(this,std::move(other._covarianceMatrix))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   AverageParameterCovariance &operator=(const AverageParameterCovariance &) = default;
   AverageParameterCovariance &operator=(AverageParameterCovariance &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/AverageParameterCovariance/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class AverageParameterCovariance

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
