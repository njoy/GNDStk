
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_SUMMAND
#define TEST_V2_0_COVARIANCE_SUMMAND

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class Summand
// -----------------------------------------------------------------------------

class Summand : public Component<covariance::Summand> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "Summand"; }
   static auto FIELD() { return "summand"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("ENDF_MFMT") |
         std::optional<Float64>{}
            / Meta<>("coefficient") |
         std::optional<std::string>{}
            / Meta<>("href")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> ENDF_MFMT{this};
   Field<std::optional<Float64>> coefficient{this};
   Field<std::optional<std::string>> href{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->ENDF_MFMT, \
      this->coefficient, \
      this->href)

   // default, and from fields
   explicit Summand(
      const wrapper<std::optional<XMLName>> &ENDF_MFMT = {},
      const wrapper<std::optional<Float64>> &coefficient = {},
      const wrapper<std::optional<std::string>> &href = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MFMT(this,ENDF_MFMT),
      coefficient(this,coefficient),
      href(this,href)
   {
      Component::finish();
   }

   // from node
   explicit Summand(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Summand(const Summand &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Summand(Summand &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Summand &operator=(const Summand &) = default;
   Summand &operator=(Summand &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/Summand/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Summand

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
