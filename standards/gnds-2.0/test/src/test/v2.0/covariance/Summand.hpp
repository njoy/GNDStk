
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_SUMMAND
#define TEST_V2_0_COVARIANCE_SUMMAND

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class Summand
// -----------------------------------------------------------------------------

class Summand :
   public Component<covariance::Summand>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "Summand"; }
   static auto NODENAME() { return "summand"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<XMLName>{}
            / Meta<>("ENDF_MFMT") |
         std::optional<Float64>{}
            / Meta<>("coefficient") |
         std::optional<std::string>{}
            / Meta<>("href")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "ENDF_MFMT",
         "coefficient",
         "href"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "endf_mfmt",
         "coefficient",
         "href"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<XMLName>>
      ENDF_MFMT{this};
   Field<std::optional<Float64>>
      coefficient{this};
   Field<std::optional<std::string>>
      href{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->ENDF_MFMT, \
      this->coefficient, \
      this->href \
   )

   // default
   Summand() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Summand(
      const wrapper<std::optional<XMLName>>
         &ENDF_MFMT,
      const wrapper<std::optional<Float64>>
         &coefficient = {},
      const wrapper<std::optional<std::string>>
         &href = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MFMT(this,ENDF_MFMT),
      coefficient(this,coefficient),
      href(this,href)
   {
      Component::finish();
   }

   // from node
   explicit Summand(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Summand(const Summand &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      ENDF_MFMT(this,other.ENDF_MFMT),
      coefficient(this,other.coefficient),
      href(this,other.href)
   {
      Component::finish(other);
   }

   // move
   Summand(Summand &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      ENDF_MFMT(this,std::move(other.ENDF_MFMT)),
      coefficient(this,std::move(other.coefficient)),
      href(this,std::move(other.href))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Summand &operator=(const Summand &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         ENDF_MFMT = other.ENDF_MFMT;
         coefficient = other.coefficient;
         href = other.href;
      }
      return *this;
   }

   // move
   Summand &operator=(Summand &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         ENDF_MFMT = std::move(other.ENDF_MFMT);
         coefficient = std::move(other.coefficient);
         href = std::move(other.href);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/Summand/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Summand

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
