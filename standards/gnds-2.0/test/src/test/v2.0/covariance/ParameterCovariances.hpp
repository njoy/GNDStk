
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_PARAMETERCOVARIANCES
#define TEST_V2_0_COVARIANCE_PARAMETERCOVARIANCES

#include "test/v2.0/covariance/AverageParameterCovariance.hpp"
#include "test/v2.0/covariance/ParameterCovariance.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class ParameterCovariances
// -----------------------------------------------------------------------------

class ParameterCovariances : public Component<covariance::ParameterCovariances> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "ParameterCovariances"; }
   static auto FIELD() { return "parameterCovariances"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         ++Child<std::optional<covariance::AverageParameterCovariance>>("averageParameterCovariance") |
         ++Child<std::optional<covariance::ParameterCovariance>>("parameterCovariance")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::optional<std::vector<covariance::AverageParameterCovariance>>> averageParameterCovariance{this};
   Field<std::optional<std::vector<covariance::ParameterCovariance>>> parameterCovariance{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->averageParameterCovariance, \
      this->parameterCovariance)

   // default
   ParameterCovariances() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit ParameterCovariances(
      const wrapper<std::optional<std::vector<covariance::AverageParameterCovariance>>> &averageParameterCovariance,
      const wrapper<std::optional<std::vector<covariance::ParameterCovariance>>> &parameterCovariance = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      averageParameterCovariance(this,averageParameterCovariance),
      parameterCovariance(this,parameterCovariance)
   {
      Component::finish();
   }

   // from node
   explicit ParameterCovariances(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ParameterCovariances(const ParameterCovariances &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      averageParameterCovariance(this,other.averageParameterCovariance),
      parameterCovariance(this,other.parameterCovariance)
   {
      Component::finish(other);
   }

   // move
   ParameterCovariances(ParameterCovariances &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      averageParameterCovariance(this,std::move(other.averageParameterCovariance)),
      parameterCovariance(this,std::move(other.parameterCovariance))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ParameterCovariances &operator=(const ParameterCovariances &) = default;
   ParameterCovariances &operator=(ParameterCovariances &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/ParameterCovariances/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ParameterCovariances

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
