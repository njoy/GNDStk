
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_PARAMETERCOVARIANCES
#define TEST_V2_0_COVARIANCE_PARAMETERCOVARIANCES

#include "test/v2.0/covariance/AverageParameterCovariance.hpp"
#include "test/v2.0/covariance/ParameterCovariance.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class ParameterCovariances
// -----------------------------------------------------------------------------

class ParameterCovariances :
   public Component<covariance::ParameterCovariances>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "ParameterCovariances"; }
   static auto NODENAME() { return "parameterCovariances"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         ++Child<std::optional<covariance::AverageParameterCovariance>>
            ("averageParameterCovariance") |
         ++Child<std::optional<covariance::ParameterCovariance>>
            ("parameterCovariance")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "averageParameterCovariance",
         "parameterCovariance"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "average_parameter_covariance",
         "parameter_covariance"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<std::vector<covariance::AverageParameterCovariance>>>
      averageParameterCovariance{this};
   Field<std::optional<std::vector<covariance::ParameterCovariance>>>
      parameterCovariance{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->averageParameterCovariance, \
      this->parameterCovariance \
   )

   // default
   ParameterCovariances() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ParameterCovariances(
      const wrapper<std::optional<std::vector<covariance::AverageParameterCovariance>>>
         &averageParameterCovariance,
      const wrapper<std::optional<std::vector<covariance::ParameterCovariance>>>
         &parameterCovariance = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      averageParameterCovariance(this,averageParameterCovariance),
      parameterCovariance(this,parameterCovariance)
   {
      Component::finish();
   }

   // from node
   explicit ParameterCovariances(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ParameterCovariances(const ParameterCovariances &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      averageParameterCovariance(this,other.averageParameterCovariance),
      parameterCovariance(this,other.parameterCovariance)
   {
      Component::finish(other);
   }

   // move
   ParameterCovariances(ParameterCovariances &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      averageParameterCovariance(this,std::move(other.averageParameterCovariance)),
      parameterCovariance(this,std::move(other.parameterCovariance))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ParameterCovariances &operator=(const ParameterCovariances &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         averageParameterCovariance = other.averageParameterCovariance;
         parameterCovariance = other.parameterCovariance;
      }
      return *this;
   }

   // move
   ParameterCovariances &operator=(ParameterCovariances &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         averageParameterCovariance = std::move(other.averageParameterCovariance);
         parameterCovariance = std::move(other.parameterCovariance);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/ParameterCovariances/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ParameterCovariances

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
