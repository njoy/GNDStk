
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_SHORTRANGESELFSCALINGVARIANCE
#define TEST_V2_0_COVARIANCE_SHORTRANGESELFSCALINGVARIANCE

#include "test/v2.0/containers/Gridded2d.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class ShortRangeSelfScalingVariance
// -----------------------------------------------------------------------------

class ShortRangeSelfScalingVariance : public Component<covariance::ShortRangeSelfScalingVariance> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "ShortRangeSelfScalingVariance"; }
   static auto FIELD() { return "shortRangeSelfScalingVariance"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("dependenceOnProcessedGroupWidth") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("type") |
         // children
         std::optional<containers::Gridded2d>{}
            / --Child<>("gridded2d")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> dependenceOnProcessedGroupWidth{this};
   Field<std::optional<XMLName>> label{this};
   Field<std::optional<XMLName>> type{this};

   // children
   Field<std::optional<containers::Gridded2d>> gridded2d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->dependenceOnProcessedGroupWidth, \
      this->label, \
      this->type, \
      this->gridded2d)

   // default, and from fields
   explicit ShortRangeSelfScalingVariance(
      const wrapper<std::optional<XMLName>> &dependenceOnProcessedGroupWidth = {},
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<XMLName>> &type = {},
      const wrapper<std::optional<containers::Gridded2d>> &gridded2d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      dependenceOnProcessedGroupWidth(this,dependenceOnProcessedGroupWidth),
      label(this,label),
      type(this,type),
      gridded2d(this,gridded2d)
   {
      Component::finish();
   }

   // from node
   explicit ShortRangeSelfScalingVariance(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ShortRangeSelfScalingVariance(const ShortRangeSelfScalingVariance &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ShortRangeSelfScalingVariance(ShortRangeSelfScalingVariance &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ShortRangeSelfScalingVariance &operator=(const ShortRangeSelfScalingVariance &) = default;
   ShortRangeSelfScalingVariance &operator=(ShortRangeSelfScalingVariance &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/ShortRangeSelfScalingVariance/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ShortRangeSelfScalingVariance

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
