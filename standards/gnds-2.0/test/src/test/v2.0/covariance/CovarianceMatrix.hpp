
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COVARIANCE_COVARIANCEMATRIX
#define TEST_V2_0_COVARIANCE_COVARIANCEMATRIX

#include "test/v2.0/containers/Gridded2d.hpp"
#include "test/v2.0/covariance/SandwichProduct.hpp"

namespace test {
namespace v2_0 {
namespace covariance {

// -----------------------------------------------------------------------------
// covariance::
// class CovarianceMatrix
// -----------------------------------------------------------------------------

class CovarianceMatrix :
   public Component<covariance::CovarianceMatrix>
{
   friend class Component;

   using _t = std::variant<
      containers::Gridded2d,
      covariance::SandwichProduct
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "covariance"; }
   static auto CLASS() { return "CovarianceMatrix"; }
   static auto NODENAME() { return "covarianceMatrix"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<enums::Frame>{}
            / Meta<>("productFrame") |
         XMLName{}
            / Meta<>("type") |

         // children
         _t{}
            / --(Child<>("gridded2d") || Child<>("sandwichProduct"))
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "productFrame",
         "type",
         "_gridded2dsandwichProduct"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "product_frame",
         "type",
         "_gridded2dsandwich_product"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<XMLName>>
      label{this};
   Field<std::optional<enums::Frame>>
      productFrame{this};
   Field<XMLName>
      type{this};

   // children - variant
   Field<_t>
      _gridded2dsandwichProduct{this};
   FieldPart<decltype(_gridded2dsandwichProduct),containers::Gridded2d> gridded2d{_gridded2dsandwichProduct};
   FieldPart<decltype(_gridded2dsandwichProduct),covariance::SandwichProduct> sandwichProduct{_gridded2dsandwichProduct};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->productFrame, \
      this->type, \
      this->_gridded2dsandwichProduct \
   )

   // default
   CovarianceMatrix() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit CovarianceMatrix(
      const wrapper<std::optional<XMLName>>
         &label,
      const wrapper<std::optional<enums::Frame>>
         &productFrame = {},
      const wrapper<XMLName>
         &type = {},
      const wrapper<_t>
         &_gridded2dsandwichProduct = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      productFrame(this,productFrame),
      type(this,type),
      _gridded2dsandwichProduct(this,_gridded2dsandwichProduct)
   {
      Component::finish();
   }

   // from node
   explicit CovarianceMatrix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   CovarianceMatrix(const CovarianceMatrix &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      productFrame(this,other.productFrame),
      type(this,other.type),
      _gridded2dsandwichProduct(this,other._gridded2dsandwichProduct)
   {
      Component::finish(other);
   }

   // move
   CovarianceMatrix(CovarianceMatrix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      productFrame(this,std::move(other.productFrame)),
      type(this,std::move(other.type)),
      _gridded2dsandwichProduct(this,std::move(other._gridded2dsandwichProduct))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   CovarianceMatrix &operator=(const CovarianceMatrix &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         productFrame = other.productFrame;
         type = other.type;
         _gridded2dsandwichProduct = other._gridded2dsandwichProduct;
      }
      return *this;
   }

   // move
   CovarianceMatrix &operator=(CovarianceMatrix &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         productFrame = std::move(other.productFrame);
         type = std::move(other.type);
         _gridded2dsandwichProduct = std::move(other._gridded2dsandwichProduct);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/covariance/CovarianceMatrix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class CovarianceMatrix

} // namespace covariance
} // namespace v2_0
} // namespace test

#endif
