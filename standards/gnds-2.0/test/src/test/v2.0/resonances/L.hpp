
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_L
#define TEST_V2_0_RESONANCES_L

#include "test/v2.0/resonances/Js.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class L
// -----------------------------------------------------------------------------

class L : public Component<resonances::L> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "L"; }
   static auto FIELD() { return "L"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         Integer32{}
            / Meta<>("value") |
         // children
         --Child<resonances::Js>("Js")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> label{this};
   Field<Integer32> value{this};

   // children
   Field<resonances::Js> Js{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->value, \
      this->Js)

   // default
   L() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit L(
      const wrapper<XMLName> &label,
      const wrapper<Integer32> &value = {},
      const wrapper<resonances::Js> &Js = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      value(this,value),
      Js(this,Js)
   {
      Component::finish();
   }

   // from node
   explicit L(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   L(const L &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      label(this,other.label),
      value(this,other.value),
      Js(this,other.Js)
   {
      Component::finish(other);
   }

   // move
   L(L &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      label(this,std::move(other.label)),
      value(this,std::move(other.value)),
      Js(this,std::move(other.Js))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   L &operator=(const L &) = default;
   L &operator=(L &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/L/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class L

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
