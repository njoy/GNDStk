
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_BREITWIGNER
#define TEST_V2_0_RESONANCES_BREITWIGNER

#include "test/v2.0/pops/PoPs_database.hpp"
#include "test/v2.0/resonances/ScatteringRadius.hpp"
#include "test/v2.0/resonances/HardSphereRadius.hpp"
#include "test/v2.0/resonances/ResonanceParameters.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class BreitWigner
// -----------------------------------------------------------------------------

class BreitWigner : public Component<resonances::BreitWigner> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "BreitWigner"; }
   static auto FIELD() { return "BreitWigner"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("approximation") |
         Defaulted<bool>{false}
            / Meta<>("calculateChannelRadius") |
         Defaulted<bool>{false}
            / Meta<>("useForSelfShieldingOnly") |
         // children
         std::optional<pops::PoPs_database>{}
            / --Child<>("PoPs") |
         std::optional<resonances::ScatteringRadius>{}
            / --Child<>("scatteringRadius") |
         std::optional<resonances::HardSphereRadius>{}
            / --Child<>("hardSphereRadius") |
         std::optional<resonances::ResonanceParameters>{}
            / --Child<>("resonanceParameters")
      ;
   }

public:
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const bool calculateChannelRadius = false;
      static inline const bool useForSelfShieldingOnly = false;
   } defaults;

   // metadata
   Field<XMLName> label{this};
   Field<XMLName> approximation{this};
   Field<Defaulted<bool>> calculateChannelRadius{this,defaults.calculateChannelRadius};
   Field<Defaulted<bool>> useForSelfShieldingOnly{this,defaults.useForSelfShieldingOnly};

   // children
   Field<std::optional<pops::PoPs_database>> PoPs{this};
   Field<std::optional<resonances::ScatteringRadius>> scatteringRadius{this};
   Field<std::optional<resonances::HardSphereRadius>> hardSphereRadius{this};
   Field<std::optional<resonances::ResonanceParameters>> resonanceParameters{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->approximation, \
      this->calculateChannelRadius, \
      this->useForSelfShieldingOnly, \
      this->PoPs, \
      this->scatteringRadius, \
      this->hardSphereRadius, \
      this->resonanceParameters)

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit BreitWigner(
      const wrapper<XMLName> &label = {},
      const wrapper<XMLName> &approximation = {},
      const wrapper<std::optional<bool>> &calculateChannelRadius = {},
      const wrapper<std::optional<bool>> &useForSelfShieldingOnly = {},
      const wrapper<std::optional<pops::PoPs_database>> &PoPs = {},
      const wrapper<std::optional<resonances::ScatteringRadius>> &scatteringRadius = {},
      const wrapper<std::optional<resonances::HardSphereRadius>> &hardSphereRadius = {},
      const wrapper<std::optional<resonances::ResonanceParameters>> &resonanceParameters = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      approximation(this,approximation),
      calculateChannelRadius(this,defaults.calculateChannelRadius,calculateChannelRadius),
      useForSelfShieldingOnly(this,defaults.useForSelfShieldingOnly,useForSelfShieldingOnly),
      PoPs(this,PoPs),
      scatteringRadius(this,scatteringRadius),
      hardSphereRadius(this,hardSphereRadius),
      resonanceParameters(this,resonanceParameters)
   {
      Component::finish();
   }

   // from node
   explicit BreitWigner(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   BreitWigner(const BreitWigner &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   BreitWigner(BreitWigner &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   BreitWigner &operator=(const BreitWigner &) = default;
   BreitWigner &operator=(BreitWigner &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/BreitWigner/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class BreitWigner

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
