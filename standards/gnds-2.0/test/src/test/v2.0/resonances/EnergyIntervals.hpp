
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_ENERGYINTERVALS
#define TEST_V2_0_RESONANCES_ENERGYINTERVALS

#include "test/v2.0/resonances/EnergyInterval.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class EnergyIntervals
// -----------------------------------------------------------------------------

class EnergyIntervals :
   public Component<resonances::EnergyIntervals>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "EnergyIntervals"; }
   static auto NODENAME() { return "energyIntervals"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |

         // children
         ++Child<resonances::EnergyInterval>
            ("energyInterval")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "energyInterval"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "energy_interval"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      label{this};

   // children
   Field<std::vector<resonances::EnergyInterval>>
      energyInterval{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->energyInterval \
   )

   // default
   EnergyIntervals() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit EnergyIntervals(
      const wrapper<XMLName>
         &label,
      const wrapper<std::vector<resonances::EnergyInterval>>
         &energyInterval = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      energyInterval(this,energyInterval)
   {
      Component::finish();
   }

   // from node
   explicit EnergyIntervals(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   EnergyIntervals(const EnergyIntervals &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      energyInterval(this,other.energyInterval)
   {
      Component::finish(other);
   }

   // move
   EnergyIntervals(EnergyIntervals &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      energyInterval(this,std::move(other.energyInterval))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   EnergyIntervals &operator=(const EnergyIntervals &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         energyInterval = other.energyInterval;
      }
      return *this;
   }

   // move
   EnergyIntervals &operator=(EnergyIntervals &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         energyInterval = std::move(other.energyInterval);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/EnergyIntervals/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class EnergyIntervals

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
