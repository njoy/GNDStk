
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_SCATTERINGRADIUS
#define TEST_V2_0_RESONANCES_SCATTERINGRADIUS

#include "test/v2.0/containers/Constant1d.hpp"
#include "test/v2.0/containers/XYs1d.hpp"
#include "test/v2.0/containers/Regions1d.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class ScatteringRadius
// -----------------------------------------------------------------------------

class ScatteringRadius :
   public Component<resonances::ScatteringRadius>
{
   friend class Component;

   using _t = std::variant<
      containers::Constant1d,
      containers::XYs1d,
      containers::Regions1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "ScatteringRadius"; }
   static auto NODENAME() { return "scatteringRadius"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         _t{}
            / --(Child<>("constant1d") || Child<>("XYs1d") || Child<>("regions1d"))
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "_constant1dXYs1dregions1d"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "_constant1d_xys1dregions1d"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children - variant
   Field<_t>
      _constant1dXYs1dregions1d{this};
   FieldPart<decltype(_constant1dXYs1dregions1d),containers::Constant1d> constant1d{_constant1dXYs1dregions1d};
   FieldPart<decltype(_constant1dXYs1dregions1d),containers::XYs1d> XYs1d{_constant1dXYs1dregions1d};
   FieldPart<decltype(_constant1dXYs1dregions1d),containers::Regions1d> regions1d{_constant1dXYs1dregions1d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->_constant1dXYs1dregions1d \
   )

   // default
   ScatteringRadius() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ScatteringRadius(
      const wrapper<_t>
         &_constant1dXYs1dregions1d
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      _constant1dXYs1dregions1d(this,_constant1dXYs1dregions1d)
   {
      Component::finish();
   }

   // from node
   explicit ScatteringRadius(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ScatteringRadius(const ScatteringRadius &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      _constant1dXYs1dregions1d(this,other._constant1dXYs1dregions1d)
   {
      Component::finish(other);
   }

   // move
   ScatteringRadius(ScatteringRadius &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      _constant1dXYs1dregions1d(this,std::move(other._constant1dXYs1dregions1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ScatteringRadius &operator=(const ScatteringRadius &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         _constant1dXYs1dregions1d = other._constant1dXYs1dregions1d;
      }
      return *this;
   }

   // move
   ScatteringRadius &operator=(ScatteringRadius &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         _constant1dXYs1dregions1d = std::move(other._constant1dXYs1dregions1d);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/ScatteringRadius/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ScatteringRadius

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
