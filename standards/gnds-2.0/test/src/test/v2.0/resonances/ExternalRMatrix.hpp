
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_EXTERNALRMATRIX
#define TEST_V2_0_RESONANCES_EXTERNALRMATRIX

#include "test/v2.0/containers/Double.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class ExternalRMatrix
// -----------------------------------------------------------------------------

class ExternalRMatrix : public Component<resonances::ExternalRMatrix> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "ExternalRMatrix"; }
   static auto FIELD() { return "externalRMatrix"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Defaulted<XMLName>{"Froehner"}
            / Meta<>("type") |
         // children
         containers::Double{}
            / ++Child<>("Double")
      ;
   }

public:
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const XMLName type = "Froehner";
   } defaults;

   // metadata
   Field<Defaulted<XMLName>> type{this,defaults.type};

   // children
   Field<std::vector<containers::Double>> Double{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->type, \
      this->Double)

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit ExternalRMatrix(
      const wrapper<std::optional<XMLName>> &type = {},
      const wrapper<std::vector<containers::Double>> &Double = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      type(this,defaults.type,type),
      Double(this,Double)
   {
      Component::finish();
   }

   // from node
   explicit ExternalRMatrix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ExternalRMatrix(const ExternalRMatrix &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ExternalRMatrix(ExternalRMatrix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ExternalRMatrix &operator=(const ExternalRMatrix &) = default;
   ExternalRMatrix &operator=(ExternalRMatrix &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/ExternalRMatrix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ExternalRMatrix

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
