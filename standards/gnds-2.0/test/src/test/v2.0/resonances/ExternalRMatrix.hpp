
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_EXTERNALRMATRIX
#define TEST_V2_0_RESONANCES_EXTERNALRMATRIX

#include "test/v2.0/containers/Double.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class ExternalRMatrix
// -----------------------------------------------------------------------------

class ExternalRMatrix :
   public Component<resonances::ExternalRMatrix>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "ExternalRMatrix"; }
   static auto NODENAME() { return "externalRMatrix"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Defaulted<XMLName>{"Froehner"}
            / Meta<>("type") |

         // children
         ++Child<containers::Double>
            ("double")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "type",
         "Double"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "type",
         "double"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const XMLName type = "Froehner";
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Defaulted<XMLName>>
      type{this,defaults.type};

   // children
   Field<std::vector<containers::Double>>
      Double{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->type, \
      this->Double \
   )

   // default
   ExternalRMatrix() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit ExternalRMatrix(
      const wrapper<std::optional<XMLName>>
         &type,
      const wrapper<std::vector<containers::Double>>
         &Double = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      type(this,defaults.type,type),
      Double(this,Double)
   {
      Component::finish();
   }

   // from node
   explicit ExternalRMatrix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ExternalRMatrix(const ExternalRMatrix &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      type(this,other.type),
      Double(this,other.Double)
   {
      Component::finish(other);
   }

   // move
   ExternalRMatrix(ExternalRMatrix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      type(this,std::move(other.type)),
      Double(this,std::move(other.Double))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ExternalRMatrix &operator=(const ExternalRMatrix &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         type = other.type;
         Double = other.Double;
      }
      return *this;
   }

   // move
   ExternalRMatrix &operator=(ExternalRMatrix &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         type = std::move(other.type);
         Double = std::move(other.Double);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/ExternalRMatrix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ExternalRMatrix

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
