
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_LEVELSPACING
#define TEST_V2_0_RESONANCES_LEVELSPACING

#include "test/v2.0/containers/Constant1d.hpp"
#include "test/v2.0/containers/XYs1d.hpp"
#include "test/v2.0/containers/Regions1d.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class LevelSpacing
// -----------------------------------------------------------------------------

class LevelSpacing :
   public Component<resonances::LevelSpacing>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "LevelSpacing"; }
   static auto FIELD() { return "levelSpacing"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<containers::Constant1d>>("constant1d") |
         --Child<std::optional<containers::XYs1d>>("XYs1d") |
         --Child<std::optional<containers::Regions1d>>("regions1d")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<containers::Constant1d>> constant1d{this};
   Field<std::optional<containers::XYs1d>> XYs1d{this};
   Field<std::optional<containers::Regions1d>> regions1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->constant1d, \
      this->XYs1d, \
      this->regions1d)

   // default
   LevelSpacing() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit LevelSpacing(
      const wrapper<std::optional<containers::Constant1d>> &constant1d,
      const wrapper<std::optional<containers::XYs1d>> &XYs1d = {},
      const wrapper<std::optional<containers::Regions1d>> &regions1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      constant1d(this,constant1d),
      XYs1d(this,XYs1d),
      regions1d(this,regions1d)
   {
      Component::finish();
   }

   // from node
   explicit LevelSpacing(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   LevelSpacing(const LevelSpacing &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      constant1d(this,other.constant1d),
      XYs1d(this,other.XYs1d),
      regions1d(this,other.regions1d)
   {
      Component::finish(other);
   }

   // move
   LevelSpacing(LevelSpacing &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      constant1d(this,std::move(other.constant1d)),
      XYs1d(this,std::move(other.XYs1d)),
      regions1d(this,std::move(other.regions1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   LevelSpacing &operator=(const LevelSpacing &) = default;
   LevelSpacing &operator=(LevelSpacing &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/LevelSpacing/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class LevelSpacing

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
