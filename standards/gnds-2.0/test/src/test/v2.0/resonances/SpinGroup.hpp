
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_SPINGROUP
#define TEST_V2_0_RESONANCES_SPINGROUP

#include "test/v2.0/resonances/Channels.hpp"
#include "test/v2.0/resonances/ResonanceParameters.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class SpinGroup
// -----------------------------------------------------------------------------

class SpinGroup :
   public Component<resonances::SpinGroup>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "SpinGroup"; }
   static auto NODENAME() { return "spinGroup"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |
         Fraction32{}
            / Meta<>("spin") |
         Defaulted<Integer32>{1}
            / Meta<>("parity") |

         // children
         --Child<resonances::Channels>
            ("channels") |
         --Child<resonances::ResonanceParameters>
            ("resonanceParameters")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "spin",
         "parity",
         "channels",
         "resonanceParameters"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "spin",
         "parity",
         "channels",
         "resonance_parameters"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const Integer32 parity = 1;
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      label{this};
   Field<Fraction32>
      spin{this};
   Field<Defaulted<Integer32>>
      parity{this,defaults.parity};

   // children
   Field<resonances::Channels>
      channels{this};
   Field<resonances::ResonanceParameters>
      resonanceParameters{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->spin, \
      this->parity, \
      this->channels, \
      this->resonanceParameters \
   )

   // default
   SpinGroup() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit SpinGroup(
      const wrapper<XMLName>
         &label,
      const wrapper<Fraction32>
         &spin = {},
      const wrapper<std::optional<Integer32>>
         &parity = {},
      const wrapper<resonances::Channels>
         &channels = {},
      const wrapper<resonances::ResonanceParameters>
         &resonanceParameters = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      spin(this,spin),
      parity(this,defaults.parity,parity),
      channels(this,channels),
      resonanceParameters(this,resonanceParameters)
   {
      Component::finish();
   }

   // from node
   explicit SpinGroup(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   SpinGroup(const SpinGroup &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      spin(this,other.spin),
      parity(this,other.parity),
      channels(this,other.channels),
      resonanceParameters(this,other.resonanceParameters)
   {
      Component::finish(other);
   }

   // move
   SpinGroup(SpinGroup &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      spin(this,std::move(other.spin)),
      parity(this,std::move(other.parity)),
      channels(this,std::move(other.channels)),
      resonanceParameters(this,std::move(other.resonanceParameters))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   SpinGroup &operator=(const SpinGroup &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         spin = other.spin;
         parity = other.parity;
         channels = other.channels;
         resonanceParameters = other.resonanceParameters;
      }
      return *this;
   }

   // move
   SpinGroup &operator=(SpinGroup &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         spin = std::move(other.spin);
         parity = std::move(other.parity);
         channels = std::move(other.channels);
         resonanceParameters = std::move(other.resonanceParameters);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/SpinGroup/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class SpinGroup

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
