
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_RESONANCES_RMATRIX
#define TEST_V2_0_RESONANCES_RMATRIX

#include "test/v2.0/pops/PoPs_database.hpp"
#include "test/v2.0/resonances/ResonanceReactions.hpp"
#include "test/v2.0/resonances/SpinGroups.hpp"

namespace test {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class RMatrix
// -----------------------------------------------------------------------------

class RMatrix :
   public Component<resonances::RMatrix>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "RMatrix"; }
   static auto NODENAME() { return "RMatrix"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("approximation") |
         Defaulted<enums::BoundaryCondition>{enums::BoundaryCondition::EliminateShiftFunction}
            / Meta<>("boundaryCondition") |
         std::optional<Float64>{}
            / Meta<>("boundaryConditionValue") |
         Defaulted<bool>{false}
            / Meta<>("calculateChannelRadius") |
         Defaulted<bool>{true}
            / Meta<>("calculatePenetrability") |
         Defaulted<bool>{false}
            / Meta<>("useForSelfShieldingOnly") |
         Defaulted<bool>{false}
            / Meta<>("supportsAngularReconstruction") |

         // children
         --Child<std::optional<pops::PoPs_database>>
            ("PoPs") |
         --Child<resonances::ResonanceReactions>
            ("resonanceReactions") |
         --Child<resonances::SpinGroups>
            ("spinGroups")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "approximation",
         "boundaryCondition",
         "boundaryConditionValue",
         "calculateChannelRadius",
         "calculatePenetrability",
         "useForSelfShieldingOnly",
         "supportsAngularReconstruction",
         "PoPs_database",
         "resonanceReactions",
         "spinGroups"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "approximation",
         "boundary_condition",
         "boundary_condition_value",
         "calculate_channel_radius",
         "calculate_penetrability",
         "use_for_self_shielding_only",
         "supports_angular_reconstruction",
         "po_ps_database",
         "resonance_reactions",
         "spin_groups"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const enums::BoundaryCondition boundaryCondition = enums::BoundaryCondition::EliminateShiftFunction;
      static inline const bool calculateChannelRadius = false;
      static inline const bool calculatePenetrability = true;
      static inline const bool useForSelfShieldingOnly = false;
      static inline const bool supportsAngularReconstruction = false;
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      label{this};
   Field<XMLName>
      approximation{this};
   Field<Defaulted<enums::BoundaryCondition>>
      boundaryCondition{this,defaults.boundaryCondition};
   Field<std::optional<Float64>>
      boundaryConditionValue{this};
   Field<Defaulted<bool>>
      calculateChannelRadius{this,defaults.calculateChannelRadius};
   Field<Defaulted<bool>>
      calculatePenetrability{this,defaults.calculatePenetrability};
   Field<Defaulted<bool>>
      useForSelfShieldingOnly{this,defaults.useForSelfShieldingOnly};
   Field<Defaulted<bool>>
      supportsAngularReconstruction{this,defaults.supportsAngularReconstruction};

   // children
   Field<std::optional<pops::PoPs_database>>
      PoPs_database{this};
   Field<resonances::ResonanceReactions>
      resonanceReactions{this};
   Field<resonances::SpinGroups>
      spinGroups{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(resonanceReactions(),resonanceReaction);
   GNDSTK_SHORTCUT(spinGroups(),spinGroup);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->approximation, \
      this->boundaryCondition, \
      this->boundaryConditionValue, \
      this->calculateChannelRadius, \
      this->calculatePenetrability, \
      this->useForSelfShieldingOnly, \
      this->supportsAngularReconstruction, \
      this->PoPs_database, \
      this->resonanceReactions, \
      this->spinGroups \
   )

   // default
   RMatrix() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit RMatrix(
      const wrapper<XMLName>
         &label,
      const wrapper<XMLName>
         &approximation = {},
      const wrapper<std::optional<enums::BoundaryCondition>>
         &boundaryCondition = {},
      const wrapper<std::optional<Float64>>
         &boundaryConditionValue = {},
      const wrapper<std::optional<bool>>
         &calculateChannelRadius = {},
      const wrapper<std::optional<bool>>
         &calculatePenetrability = {},
      const wrapper<std::optional<bool>>
         &useForSelfShieldingOnly = {},
      const wrapper<std::optional<bool>>
         &supportsAngularReconstruction = {},
      const wrapper<std::optional<pops::PoPs_database>>
         &PoPs_database = {},
      const wrapper<resonances::ResonanceReactions>
         &resonanceReactions = {},
      const wrapper<resonances::SpinGroups>
         &spinGroups = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      approximation(this,approximation),
      boundaryCondition(this,defaults.boundaryCondition,boundaryCondition),
      boundaryConditionValue(this,boundaryConditionValue),
      calculateChannelRadius(this,defaults.calculateChannelRadius,calculateChannelRadius),
      calculatePenetrability(this,defaults.calculatePenetrability,calculatePenetrability),
      useForSelfShieldingOnly(this,defaults.useForSelfShieldingOnly,useForSelfShieldingOnly),
      supportsAngularReconstruction(this,defaults.supportsAngularReconstruction,supportsAngularReconstruction),
      PoPs_database(this,PoPs_database),
      resonanceReactions(this,resonanceReactions),
      spinGroups(this,spinGroups)
   {
      Component::finish();
   }

   // from node
   explicit RMatrix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   RMatrix(const RMatrix &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      approximation(this,other.approximation),
      boundaryCondition(this,other.boundaryCondition),
      boundaryConditionValue(this,other.boundaryConditionValue),
      calculateChannelRadius(this,other.calculateChannelRadius),
      calculatePenetrability(this,other.calculatePenetrability),
      useForSelfShieldingOnly(this,other.useForSelfShieldingOnly),
      supportsAngularReconstruction(this,other.supportsAngularReconstruction),
      PoPs_database(this,other.PoPs_database),
      resonanceReactions(this,other.resonanceReactions),
      spinGroups(this,other.spinGroups)
   {
      Component::finish(other);
   }

   // move
   RMatrix(RMatrix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      approximation(this,std::move(other.approximation)),
      boundaryCondition(this,std::move(other.boundaryCondition)),
      boundaryConditionValue(this,std::move(other.boundaryConditionValue)),
      calculateChannelRadius(this,std::move(other.calculateChannelRadius)),
      calculatePenetrability(this,std::move(other.calculatePenetrability)),
      useForSelfShieldingOnly(this,std::move(other.useForSelfShieldingOnly)),
      supportsAngularReconstruction(this,std::move(other.supportsAngularReconstruction)),
      PoPs_database(this,std::move(other.PoPs_database)),
      resonanceReactions(this,std::move(other.resonanceReactions)),
      spinGroups(this,std::move(other.spinGroups))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   RMatrix &operator=(const RMatrix &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         approximation = other.approximation;
         boundaryCondition = other.boundaryCondition;
         boundaryConditionValue = other.boundaryConditionValue;
         calculateChannelRadius = other.calculateChannelRadius;
         calculatePenetrability = other.calculatePenetrability;
         useForSelfShieldingOnly = other.useForSelfShieldingOnly;
         supportsAngularReconstruction = other.supportsAngularReconstruction;
         PoPs_database = other.PoPs_database;
         resonanceReactions = other.resonanceReactions;
         spinGroups = other.spinGroups;
      }
      return *this;
   }

   // move
   RMatrix &operator=(RMatrix &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         approximation = std::move(other.approximation);
         boundaryCondition = std::move(other.boundaryCondition);
         boundaryConditionValue = std::move(other.boundaryConditionValue);
         calculateChannelRadius = std::move(other.calculateChannelRadius);
         calculatePenetrability = std::move(other.calculatePenetrability);
         useForSelfShieldingOnly = std::move(other.useForSelfShieldingOnly);
         supportsAngularReconstruction = std::move(other.supportsAngularReconstruction);
         PoPs_database = std::move(other.PoPs_database);
         resonanceReactions = std::move(other.resonanceReactions);
         spinGroups = std::move(other.spinGroups);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/resonances/RMatrix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class RMatrix

} // namespace resonances
} // namespace v2_0
} // namespace test

#endif
