
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_ATOMIC_COHERENTPHOTONSCATTERING
#define TEST_V2_0_ATOMIC_COHERENTPHOTONSCATTERING

#include "test/v2.0/atomic/FormFactor.hpp"
#include "test/v2.0/atomic/RealAnomalousFactor.hpp"
#include "test/v2.0/atomic/ImaginaryAnomalousFactor.hpp"

namespace test {
namespace v2_0 {
namespace atomic {

// -----------------------------------------------------------------------------
// atomic::
// class CoherentPhotonScattering
// -----------------------------------------------------------------------------

class CoherentPhotonScattering : public Component<atomic::CoherentPhotonScattering> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "atomic"; }
   static auto CLASS() { return "CoherentPhotonScattering"; }
   static auto FIELD() { return "coherentPhotonScattering"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<std::string>{}
            / Meta<>("href") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("pid") |
         enums::Frame{}
            / Meta<>("productFrame") |
         // children
         std::optional<atomic::FormFactor>{}
            / --Child<>("formFactor") |
         std::optional<atomic::RealAnomalousFactor>{}
            / --Child<>("realAnomalousFactor") |
         std::optional<atomic::ImaginaryAnomalousFactor>{}
            / --Child<>("imaginaryAnomalousFactor")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<std::string>> href{this};
   Field<std::optional<XMLName>> label{this};
   Field<std::optional<XMLName>> pid{this};
   Field<enums::Frame> productFrame{this};

   // children
   Field<std::optional<atomic::FormFactor>> formFactor{this};
   Field<std::optional<atomic::RealAnomalousFactor>> realAnomalousFactor{this};
   Field<std::optional<atomic::ImaginaryAnomalousFactor>> imaginaryAnomalousFactor{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->href, \
      this->label, \
      this->pid, \
      this->productFrame, \
      this->formFactor, \
      this->realAnomalousFactor, \
      this->imaginaryAnomalousFactor)

   // default, and from fields
   explicit CoherentPhotonScattering(
      const wrapper<std::optional<std::string>> &href = {},
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<XMLName>> &pid = {},
      const wrapper<enums::Frame> &productFrame = {},
      const wrapper<std::optional<atomic::FormFactor>> &formFactor = {},
      const wrapper<std::optional<atomic::RealAnomalousFactor>> &realAnomalousFactor = {},
      const wrapper<std::optional<atomic::ImaginaryAnomalousFactor>> &imaginaryAnomalousFactor = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      href(this,href),
      label(this,label),
      pid(this,pid),
      productFrame(this,productFrame),
      formFactor(this,formFactor),
      realAnomalousFactor(this,realAnomalousFactor),
      imaginaryAnomalousFactor(this,imaginaryAnomalousFactor)
   {
      Component::finish();
   }

   // from node
   explicit CoherentPhotonScattering(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   CoherentPhotonScattering(const CoherentPhotonScattering &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   CoherentPhotonScattering(CoherentPhotonScattering &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   CoherentPhotonScattering &operator=(const CoherentPhotonScattering &) = default;
   CoherentPhotonScattering &operator=(CoherentPhotonScattering &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/atomic/CoherentPhotonScattering/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class CoherentPhotonScattering

} // namespace atomic
} // namespace v2_0
} // namespace test

#endif
