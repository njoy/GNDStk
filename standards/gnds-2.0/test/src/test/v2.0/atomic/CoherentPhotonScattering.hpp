
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_ATOMIC_COHERENTPHOTONSCATTERING
#define TEST_V2_0_ATOMIC_COHERENTPHOTONSCATTERING

#include "test/v2.0/atomic/FormFactor.hpp"
#include "test/v2.0/atomic/RealAnomalousFactor.hpp"
#include "test/v2.0/atomic/ImaginaryAnomalousFactor.hpp"

namespace test {
namespace v2_0 {
namespace atomic {

// -----------------------------------------------------------------------------
// atomic::
// class CoherentPhotonScattering
// -----------------------------------------------------------------------------

class CoherentPhotonScattering :
   public Component<atomic::CoherentPhotonScattering>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "atomic"; }
   static auto CLASS() { return "CoherentPhotonScattering"; }
   static auto NODENAME() { return "coherentPhotonScattering"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<std::string>{}
            / Meta<>("href") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("pid") |
         enums::Frame{}
            / Meta<>("productFrame") |

         // children
         --Child<std::optional<atomic::FormFactor>>
            ("formFactor") |
         --Child<std::optional<atomic::RealAnomalousFactor>>
            ("realAnomalousFactor") |
         --Child<std::optional<atomic::ImaginaryAnomalousFactor>>
            ("imaginaryAnomalousFactor")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "href",
         "label",
         "pid",
         "productFrame",
         "formFactor",
         "realAnomalousFactor",
         "imaginaryAnomalousFactor"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "href",
         "label",
         "pid",
         "product_frame",
         "form_factor",
         "real_anomalous_factor",
         "imaginary_anomalous_factor"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<std::string>>
      href{this};
   Field<std::optional<XMLName>>
      label{this};
   Field<std::optional<XMLName>>
      pid{this};
   Field<enums::Frame>
      productFrame{this};

   // children
   Field<std::optional<atomic::FormFactor>>
      formFactor{this};
   Field<std::optional<atomic::RealAnomalousFactor>>
      realAnomalousFactor{this};
   Field<std::optional<atomic::ImaginaryAnomalousFactor>>
      imaginaryAnomalousFactor{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->href, \
      this->label, \
      this->pid, \
      this->productFrame, \
      this->formFactor, \
      this->realAnomalousFactor, \
      this->imaginaryAnomalousFactor \
   )

   // default
   CoherentPhotonScattering() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit CoherentPhotonScattering(
      const wrapper<std::optional<std::string>>
         &href,
      const wrapper<std::optional<XMLName>>
         &label = {},
      const wrapper<std::optional<XMLName>>
         &pid = {},
      const wrapper<enums::Frame>
         &productFrame = {},
      const wrapper<std::optional<atomic::FormFactor>>
         &formFactor = {},
      const wrapper<std::optional<atomic::RealAnomalousFactor>>
         &realAnomalousFactor = {},
      const wrapper<std::optional<atomic::ImaginaryAnomalousFactor>>
         &imaginaryAnomalousFactor = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      href(this,href),
      label(this,label),
      pid(this,pid),
      productFrame(this,productFrame),
      formFactor(this,formFactor),
      realAnomalousFactor(this,realAnomalousFactor),
      imaginaryAnomalousFactor(this,imaginaryAnomalousFactor)
   {
      Component::finish();
   }

   // from node
   explicit CoherentPhotonScattering(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   CoherentPhotonScattering(const CoherentPhotonScattering &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      href(this,other.href),
      label(this,other.label),
      pid(this,other.pid),
      productFrame(this,other.productFrame),
      formFactor(this,other.formFactor),
      realAnomalousFactor(this,other.realAnomalousFactor),
      imaginaryAnomalousFactor(this,other.imaginaryAnomalousFactor)
   {
      Component::finish(other);
   }

   // move
   CoherentPhotonScattering(CoherentPhotonScattering &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      href(this,std::move(other.href)),
      label(this,std::move(other.label)),
      pid(this,std::move(other.pid)),
      productFrame(this,std::move(other.productFrame)),
      formFactor(this,std::move(other.formFactor)),
      realAnomalousFactor(this,std::move(other.realAnomalousFactor)),
      imaginaryAnomalousFactor(this,std::move(other.imaginaryAnomalousFactor))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   CoherentPhotonScattering &operator=(const CoherentPhotonScattering &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         href = other.href;
         label = other.label;
         pid = other.pid;
         productFrame = other.productFrame;
         formFactor = other.formFactor;
         realAnomalousFactor = other.realAnomalousFactor;
         imaginaryAnomalousFactor = other.imaginaryAnomalousFactor;
      }
      return *this;
   }

   // move
   CoherentPhotonScattering &operator=(CoherentPhotonScattering &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         href = std::move(other.href);
         label = std::move(other.label);
         pid = std::move(other.pid);
         productFrame = std::move(other.productFrame);
         formFactor = std::move(other.formFactor);
         realAnomalousFactor = std::move(other.realAnomalousFactor);
         imaginaryAnomalousFactor = std::move(other.imaginaryAnomalousFactor);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/atomic/CoherentPhotonScattering/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class CoherentPhotonScattering

} // namespace atomic
} // namespace v2_0
} // namespace test

#endif
