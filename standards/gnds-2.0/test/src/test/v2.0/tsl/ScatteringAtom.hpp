
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TSL_SCATTERINGATOM
#define TEST_V2_0_TSL_SCATTERINGATOM

#include "test/v2.0/tsl/Mass.hpp"
#include "test/v2.0/tsl/E_critical.hpp"
#include "test/v2.0/tsl/E_max.hpp"
#include "test/v2.0/tsl/BoundAtomCrossSection.hpp"
#include "test/v2.0/tsl/CoherentAtomCrossSection.hpp"
#include "test/v2.0/tsl/DistinctScatteringKernel.hpp"
#include "test/v2.0/tsl/SelfScatteringKernel.hpp"
#include "test/v2.0/tsl/T_effective.hpp"

namespace test {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class ScatteringAtom
// -----------------------------------------------------------------------------

class ScatteringAtom : public Component<tsl::ScatteringAtom> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "ScatteringAtom"; }
   static auto FIELD() { return "scatteringAtom"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("pid") |
         bool{}
            / Meta<>("primaryScatterer") |
         Integer32{}
            / Meta<>("numberPerMolecule") |
         // children
         tsl::Mass{}
            / --Child<>("mass") |
         std::optional<tsl::E_critical>{}
            / --Child<>("e_critical") |
         tsl::E_max{}
            / --Child<>("e_max") |
         tsl::BoundAtomCrossSection{}
            / --Child<>("boundAtomCrossSection") |
         std::optional<tsl::CoherentAtomCrossSection>{}
            / --Child<>("coherentAtomCrossSection") |
         std::optional<tsl::DistinctScatteringKernel>{}
            / --Child<>("distinctScatteringKernel") |
         tsl::SelfScatteringKernel{}
            / --Child<>("selfScatteringKernel") |
         std::optional<tsl::T_effective>{}
            / --Child<>("T_effective")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> pid{this};
   Field<bool> primaryScatterer{this};
   Field<Integer32> numberPerMolecule{this};

   // children
   Field<tsl::Mass> mass{this};
   Field<std::optional<tsl::E_critical>> e_critical{this};
   Field<tsl::E_max> e_max{this};
   Field<tsl::BoundAtomCrossSection> boundAtomCrossSection{this};
   Field<std::optional<tsl::CoherentAtomCrossSection>> coherentAtomCrossSection{this};
   Field<std::optional<tsl::DistinctScatteringKernel>> distinctScatteringKernel{this};
   Field<tsl::SelfScatteringKernel> selfScatteringKernel{this};
   Field<std::optional<tsl::T_effective>> T_effective{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->pid, \
      this->primaryScatterer, \
      this->numberPerMolecule, \
      this->mass, \
      this->e_critical, \
      this->e_max, \
      this->boundAtomCrossSection, \
      this->coherentAtomCrossSection, \
      this->distinctScatteringKernel, \
      this->selfScatteringKernel, \
      this->T_effective)

   // default, and from fields
   explicit ScatteringAtom(
      const wrapper<XMLName> &pid = {},
      const wrapper<bool> &primaryScatterer = {},
      const wrapper<Integer32> &numberPerMolecule = {},
      const wrapper<tsl::Mass> &mass = {},
      const wrapper<std::optional<tsl::E_critical>> &e_critical = {},
      const wrapper<tsl::E_max> &e_max = {},
      const wrapper<tsl::BoundAtomCrossSection> &boundAtomCrossSection = {},
      const wrapper<std::optional<tsl::CoherentAtomCrossSection>> &coherentAtomCrossSection = {},
      const wrapper<std::optional<tsl::DistinctScatteringKernel>> &distinctScatteringKernel = {},
      const wrapper<tsl::SelfScatteringKernel> &selfScatteringKernel = {},
      const wrapper<std::optional<tsl::T_effective>> &T_effective = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      pid(this,pid),
      primaryScatterer(this,primaryScatterer),
      numberPerMolecule(this,numberPerMolecule),
      mass(this,mass),
      e_critical(this,e_critical),
      e_max(this,e_max),
      boundAtomCrossSection(this,boundAtomCrossSection),
      coherentAtomCrossSection(this,coherentAtomCrossSection),
      distinctScatteringKernel(this,distinctScatteringKernel),
      selfScatteringKernel(this,selfScatteringKernel),
      T_effective(this,T_effective)
   {
      Component::finish();
   }

   // from node
   explicit ScatteringAtom(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ScatteringAtom(const ScatteringAtom &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ScatteringAtom(ScatteringAtom &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ScatteringAtom &operator=(const ScatteringAtom &) = default;
   ScatteringAtom &operator=(ScatteringAtom &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/tsl/ScatteringAtom/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ScatteringAtom

} // namespace tsl
} // namespace v2_0
} // namespace test

#endif
