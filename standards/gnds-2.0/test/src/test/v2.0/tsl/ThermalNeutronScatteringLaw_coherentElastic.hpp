
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_COHERENTELASTIC
#define TEST_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_COHERENTELASTIC

#include "test/v2.0/tsl/S_table.hpp"
#include "test/v2.0/tsl/BraggEdges.hpp"

namespace test {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class ThermalNeutronScatteringLaw_coherentElastic
// -----------------------------------------------------------------------------

class ThermalNeutronScatteringLaw_coherentElastic : public Component<tsl::ThermalNeutronScatteringLaw_coherentElastic> {
   friend class Component;

   using _t = std::variant<
      tsl::S_table,
      tsl::BraggEdges
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "ThermalNeutronScatteringLaw_coherentElastic"; }
   static auto FIELD() { return "thermalNeutronScatteringLaw_coherentElastic"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         Defaulted<XMLName>{"enums::DecayType::Neutron"}
            / Meta<>("pid") |
         Defaulted<enums::Frame>{enums::Frame::lab}
            / Meta<>("productFrame") |
         // children
         _t{}
            / --(Child<>("S_table") || Child<>("BraggEdges"))
      ;
   }

public:
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const XMLName pid = "enums::DecayType::Neutron";
      static inline const enums::Frame productFrame = enums::Frame::lab;
   } defaults;

   // metadata
   Field<XMLName> label{this};
   Field<Defaulted<XMLName>> pid{this,defaults.pid};
   Field<Defaulted<enums::Frame>> productFrame{this,defaults.productFrame};

   // children - variant
   Field<_t> _S_tableBraggEdges{this};
   FieldPart<decltype(_S_tableBraggEdges),tsl::S_table> S_table{_S_tableBraggEdges};
   FieldPart<decltype(_S_tableBraggEdges),tsl::BraggEdges> BraggEdges{_S_tableBraggEdges};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->pid, \
      this->productFrame, \
      this->_S_tableBraggEdges)

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit ThermalNeutronScatteringLaw_coherentElastic(
      const wrapper<XMLName> &label = {},
      const wrapper<std::optional<XMLName>> &pid = {},
      const wrapper<std::optional<enums::Frame>> &productFrame = {},
      const wrapper<_t> &_S_tableBraggEdges = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      pid(this,defaults.pid,pid),
      productFrame(this,defaults.productFrame,productFrame),
      _S_tableBraggEdges(this,_S_tableBraggEdges)
   {
      Component::finish();
   }

   // from node
   explicit ThermalNeutronScatteringLaw_coherentElastic(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ThermalNeutronScatteringLaw_coherentElastic(const ThermalNeutronScatteringLaw_coherentElastic &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ThermalNeutronScatteringLaw_coherentElastic(ThermalNeutronScatteringLaw_coherentElastic &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ThermalNeutronScatteringLaw_coherentElastic &operator=(const ThermalNeutronScatteringLaw_coherentElastic &) = default;
   ThermalNeutronScatteringLaw_coherentElastic &operator=(ThermalNeutronScatteringLaw_coherentElastic &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/tsl/ThermalNeutronScatteringLaw_coherentElastic/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ThermalNeutronScatteringLaw_coherentElastic

} // namespace tsl
} // namespace v2_0
} // namespace test

#endif
