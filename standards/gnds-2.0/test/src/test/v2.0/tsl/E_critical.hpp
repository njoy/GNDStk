
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TSL_E_CRITICAL
#define TEST_V2_0_TSL_E_CRITICAL

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class E_critical
// -----------------------------------------------------------------------------

class E_critical :
   public Component<tsl::E_critical>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "E_critical"; }
   static auto NODENAME() { return "e_critical"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<XMLName>{}
            / Meta<>("unit") |
         std::optional<Float64>{}
            / Meta<>("value")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "unit",
         "value"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "unit",
         "value"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<XMLName>>
      unit{this};
   Field<std::optional<Float64>>
      value{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->unit, \
      this->value \
   )

   // default
   E_critical() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit E_critical(
      const wrapper<std::optional<XMLName>>
         &unit,
      const wrapper<std::optional<Float64>>
         &value = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      unit(this,unit),
      value(this,value)
   {
      Component::finish();
   }

   // from node
   explicit E_critical(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   E_critical(const E_critical &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      unit(this,other.unit),
      value(this,other.value)
   {
      Component::finish(other);
   }

   // move
   E_critical(E_critical &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      unit(this,std::move(other.unit)),
      value(this,std::move(other.value))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   E_critical &operator=(const E_critical &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         unit = other.unit;
         value = other.value;
      }
      return *this;
   }

   // move
   E_critical &operator=(E_critical &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         unit = std::move(other.unit);
         value = std::move(other.value);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/tsl/E_critical/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class E_critical

} // namespace tsl
} // namespace v2_0
} // namespace test

#endif
