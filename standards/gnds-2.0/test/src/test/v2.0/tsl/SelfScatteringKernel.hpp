
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TSL_SELFSCATTERINGKERNEL
#define TEST_V2_0_TSL_SELFSCATTERINGKERNEL

#include "test/v2.0/containers/Gridded3d.hpp"
#include "test/v2.0/tsl/GaussianApproximation.hpp"
#include "test/v2.0/tsl/SCTApproximation.hpp"
#include "test/v2.0/tsl/FreeGasApproximation.hpp"

namespace test {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class SelfScatteringKernel
// -----------------------------------------------------------------------------

class SelfScatteringKernel :
   public Component<tsl::SelfScatteringKernel>
{
   friend class Component;

   using _t = std::variant<
      containers::Gridded3d,
      tsl::GaussianApproximation,
      tsl::SCTApproximation,
      tsl::FreeGasApproximation
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "SelfScatteringKernel"; }
   static auto NODENAME() { return "selfScatteringKernel"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<bool>{}
            / Meta<>("symmetric") |

         // children
         _t{}
            / --(Child<>("gridded3d") || Child<>("GaussianApproximation") || Child<>("SCTApproximation") || Child<>("freeGasApproximation"))
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "symmetric",
         "_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "symmetric",
         "_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<bool>>
      symmetric{this};

   // children - variant
   Field<_t>
      _gridded3dGaussianApproximationSCTApproximationfreeGasApproximation{this};
   FieldPart<decltype(_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation),containers::Gridded3d> gridded3d{_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation};
   FieldPart<decltype(_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation),tsl::GaussianApproximation> GaussianApproximation{_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation};
   FieldPart<decltype(_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation),tsl::SCTApproximation> SCTApproximation{_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation};
   FieldPart<decltype(_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation),tsl::FreeGasApproximation> freeGasApproximation{_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->symmetric, \
      this->_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation \
   )

   // default
   SelfScatteringKernel() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit SelfScatteringKernel(
      const wrapper<std::optional<bool>>
         &symmetric,
      const wrapper<_t>
         &_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      symmetric(this,symmetric),
      _gridded3dGaussianApproximationSCTApproximationfreeGasApproximation(this,_gridded3dGaussianApproximationSCTApproximationfreeGasApproximation)
   {
      Component::finish();
   }

   // from node
   explicit SelfScatteringKernel(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   SelfScatteringKernel(const SelfScatteringKernel &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      symmetric(this,other.symmetric),
      _gridded3dGaussianApproximationSCTApproximationfreeGasApproximation(this,other._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation)
   {
      Component::finish(other);
   }

   // move
   SelfScatteringKernel(SelfScatteringKernel &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      symmetric(this,std::move(other.symmetric)),
      _gridded3dGaussianApproximationSCTApproximationfreeGasApproximation(this,std::move(other._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   SelfScatteringKernel &operator=(const SelfScatteringKernel &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         symmetric = other.symmetric;
         _gridded3dGaussianApproximationSCTApproximationfreeGasApproximation = other._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation;
      }
      return *this;
   }

   // move
   SelfScatteringKernel &operator=(SelfScatteringKernel &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         symmetric = std::move(other.symmetric);
         _gridded3dGaussianApproximationSCTApproximationfreeGasApproximation = std::move(other._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/tsl/SelfScatteringKernel/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class SelfScatteringKernel

} // namespace tsl
} // namespace v2_0
} // namespace test

#endif
