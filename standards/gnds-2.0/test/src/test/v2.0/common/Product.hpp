
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_COMMON_PRODUCT
#define TEST_V2_0_COMMON_PRODUCT

#include "test/v2.0/transport/Multiplicity.hpp"
#include "test/v2.0/transport/Distribution.hpp"

namespace test {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class Product
// -----------------------------------------------------------------------------

class Product :
   public Component<common::Product>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "Product"; }
   static auto NODENAME() { return "product"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("pid") |

         // children
         --Child<transport::Multiplicity>
            ("multiplicity") |
         --Child<transport::Distribution>
            ("distribution")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "pid",
         "multiplicity",
         "distribution"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "pid",
         "multiplicity",
         "distribution"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      label{this};
   Field<XMLName>
      pid{this};

   // children
   Field<transport::Multiplicity>
      multiplicity{this};
   Field<transport::Distribution>
      distribution{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->pid, \
      this->multiplicity, \
      this->distribution \
   )

   // default
   Product() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Product(
      const wrapper<XMLName>
         &label,
      const wrapper<XMLName>
         &pid = {},
      const wrapper<transport::Multiplicity>
         &multiplicity = {},
      const wrapper<transport::Distribution>
         &distribution = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      pid(this,pid),
      multiplicity(this,multiplicity),
      distribution(this,distribution)
   {
      Component::finish();
   }

   // from node
   explicit Product(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Product(const Product &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      pid(this,other.pid),
      multiplicity(this,other.multiplicity),
      distribution(this,other.distribution)
   {
      Component::finish(other);
   }

   // move
   Product(Product &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      pid(this,std::move(other.pid)),
      multiplicity(this,std::move(other.multiplicity)),
      distribution(this,std::move(other.distribution))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Product &operator=(const Product &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         pid = other.pid;
         multiplicity = other.multiplicity;
         distribution = other.distribution;
      }
      return *this;
   }

   // move
   Product &operator=(Product &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         pid = std::move(other.pid);
         multiplicity = std::move(other.multiplicity);
         distribution = std::move(other.distribution);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/common/Product/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Product

} // namespace common
} // namespace v2_0
} // namespace test

#endif
