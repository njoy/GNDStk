
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_MAP_TNSL
#define TEST_V2_0_MAP_TNSL

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace map {

// -----------------------------------------------------------------------------
// map::
// class TNSL
// -----------------------------------------------------------------------------

class TNSL : public Component<map::TNSL> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "map"; }
   static auto CLASS() { return "TNSL"; }
   static auto FIELD() { return "TNSL"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("projectile") |
         XMLName{}
            / Meta<>("target") |
         XMLName{}
            / Meta<>("evaluation") |
         XMLName{}
            / Meta<>("path") |
         std::optional<XMLName>{}
            / Meta<>("interaction") |
         checksum{}
            / Meta<>("checksum") |
         std::optional<algorithm>{}
            / Meta<>("algorithm") |
         XMLName{}
            / Meta<>("standardTarget") |
         XMLName{}
            / Meta<>("standardEvaluation")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> projectile{this};
   Field<XMLName> target{this};
   Field<XMLName> evaluation{this};
   Field<XMLName> path{this};
   Field<std::optional<XMLName>> interaction{this};
   Field<checksum> checksum{this};
   Field<std::optional<algorithm>> algorithm{this};
   Field<XMLName> standardTarget{this};
   Field<XMLName> standardEvaluation{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->projectile, \
      this->target, \
      this->evaluation, \
      this->path, \
      this->interaction, \
      this->checksum, \
      this->algorithm, \
      this->standardTarget, \
      this->standardEvaluation)

   // default, and from fields
   explicit TNSL(
      const wrapper<XMLName> &projectile = {},
      const wrapper<XMLName> &target = {},
      const wrapper<XMLName> &evaluation = {},
      const wrapper<XMLName> &path = {},
      const wrapper<std::optional<XMLName>> &interaction = {},
      const wrapper<checksum> &checksum = {},
      const wrapper<std::optional<algorithm>> &algorithm = {},
      const wrapper<XMLName> &standardTarget = {},
      const wrapper<XMLName> &standardEvaluation = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      projectile(this,projectile),
      target(this,target),
      evaluation(this,evaluation),
      path(this,path),
      interaction(this,interaction),
      checksum(this,checksum),
      algorithm(this,algorithm),
      standardTarget(this,standardTarget),
      standardEvaluation(this,standardEvaluation)
   {
      Component::finish();
   }

   // from node
   explicit TNSL(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   TNSL(const TNSL &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   TNSL(TNSL &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   TNSL &operator=(const TNSL &) = default;
   TNSL &operator=(TNSL &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/map/TNSL/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class TNSL

} // namespace map
} // namespace v2_0
} // namespace test

#endif
