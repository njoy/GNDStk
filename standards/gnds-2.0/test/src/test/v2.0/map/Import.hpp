
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_MAP_IMPORT
#define TEST_V2_0_MAP_IMPORT

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace map {

// -----------------------------------------------------------------------------
// map::
// class Import
// -----------------------------------------------------------------------------

class Import : public Component<map::Import> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "map"; }
   static auto CLASS() { return "Import"; }
   static auto FIELD() { return "import"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("path") |
         std::string{}
            / Meta<>("checksum") |
         std::optional<enums::HashAlgorithm>{}
            / Meta<>("algorithm")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> path{this};
   Field<std::string> checksum{this};
   Field<std::optional<enums::HashAlgorithm>> algorithm{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->path, \
      this->checksum, \
      this->algorithm)

   // default
   Import() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Import(
      const wrapper<XMLName> &path,
      const wrapper<std::string> &checksum = {},
      const wrapper<std::optional<enums::HashAlgorithm>> &algorithm = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      path(this,path),
      checksum(this,checksum),
      algorithm(this,algorithm)
   {
      Component::finish();
   }

   // from node
   explicit Import(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Import(const Import &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      path(this,other.path),
      checksum(this,other.checksum),
      algorithm(this,other.algorithm)
   {
      Component::finish(other);
   }

   // move
   Import(Import &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      path(this,std::move(other.path)),
      checksum(this,std::move(other.checksum)),
      algorithm(this,std::move(other.algorithm))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Import &operator=(const Import &) = default;
   Import &operator=(Import &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/map/Import/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Import

} // namespace map
} // namespace v2_0
} // namespace test

#endif
