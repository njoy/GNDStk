
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_MAP_PROTARE
#define TEST_V2_0_MAP_PROTARE

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace map {

// -----------------------------------------------------------------------------
// map::
// class Protare
// -----------------------------------------------------------------------------

class Protare :
   public Component<map::Protare>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "map"; }
   static auto CLASS() { return "Protare"; }
   static auto NODENAME() { return "protare"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("projectile") |
         XMLName{}
            / Meta<>("target") |
         XMLName{}
            / Meta<>("evaluation") |
         XMLName{}
            / Meta<>("path") |
         XMLName{}
            / Meta<>("interaction") |
         std::string{}
            / Meta<>("checksum") |
         std::optional<enums::HashAlgorithm>{}
            / Meta<>("algorithm")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "projectile",
         "target",
         "evaluation",
         "path",
         "interaction",
         "checksum",
         "algorithm"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "projectile",
         "target",
         "evaluation",
         "path",
         "interaction",
         "checksum",
         "algorithm"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      projectile{this};
   Field<XMLName>
      target{this};
   Field<XMLName>
      evaluation{this};
   Field<XMLName>
      path{this};
   Field<XMLName>
      interaction{this};
   Field<std::string>
      checksum{this};
   Field<std::optional<enums::HashAlgorithm>>
      algorithm{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->projectile, \
      this->target, \
      this->evaluation, \
      this->path, \
      this->interaction, \
      this->checksum, \
      this->algorithm \
   )

   // default
   Protare() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Protare(
      const wrapper<XMLName>
         &projectile,
      const wrapper<XMLName>
         &target = {},
      const wrapper<XMLName>
         &evaluation = {},
      const wrapper<XMLName>
         &path = {},
      const wrapper<XMLName>
         &interaction = {},
      const wrapper<std::string>
         &checksum = {},
      const wrapper<std::optional<enums::HashAlgorithm>>
         &algorithm = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      projectile(this,projectile),
      target(this,target),
      evaluation(this,evaluation),
      path(this,path),
      interaction(this,interaction),
      checksum(this,checksum),
      algorithm(this,algorithm)
   {
      Component::finish();
   }

   // from node
   explicit Protare(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Protare(const Protare &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      projectile(this,other.projectile),
      target(this,other.target),
      evaluation(this,other.evaluation),
      path(this,other.path),
      interaction(this,other.interaction),
      checksum(this,other.checksum),
      algorithm(this,other.algorithm)
   {
      Component::finish(other);
   }

   // move
   Protare(Protare &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      projectile(this,std::move(other.projectile)),
      target(this,std::move(other.target)),
      evaluation(this,std::move(other.evaluation)),
      path(this,std::move(other.path)),
      interaction(this,std::move(other.interaction)),
      checksum(this,std::move(other.checksum)),
      algorithm(this,std::move(other.algorithm))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Protare &operator=(const Protare &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         projectile = other.projectile;
         target = other.target;
         evaluation = other.evaluation;
         path = other.path;
         interaction = other.interaction;
         checksum = other.checksum;
         algorithm = other.algorithm;
      }
      return *this;
   }

   // move
   Protare &operator=(Protare &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         projectile = std::move(other.projectile);
         target = std::move(other.target);
         evaluation = std::move(other.evaluation);
         path = std::move(other.path);
         interaction = std::move(other.interaction);
         checksum = std::move(other.checksum);
         algorithm = std::move(other.algorithm);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/map/Protare/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Protare

} // namespace map
} // namespace v2_0
} // namespace test

#endif
