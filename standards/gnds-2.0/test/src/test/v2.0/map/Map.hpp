
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_MAP_MAP
#define TEST_V2_0_MAP_MAP

#include "test/v2.0/map/Import.hpp"
#include "test/v2.0/map/Protare.hpp"
#include "test/v2.0/map/TNSL.hpp"

namespace test {
namespace v2_0 {
namespace map {

// -----------------------------------------------------------------------------
// map::
// class Map
// -----------------------------------------------------------------------------

class Map :
   public Component<map::Map>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "map"; }
   static auto CLASS() { return "Map"; }
   static auto FIELD() { return "map"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("library") |
         XMLName{}
            / Meta<>("format") |
         std::string{}
            / Meta<>("checksum") |
         enums::HashAlgorithm{}
            / Meta<>("algorithm") |

         // children
         ++Child<std::optional<map::Import>>("import") |
         ++Child<std::optional<map::Protare>>("protare") |
         ++Child<std::optional<map::TNSL>>("TNSL")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName> library{this};
   Field<XMLName> format{this};
   Field<std::string> checksum{this};
   Field<enums::HashAlgorithm> algorithm{this};

   // children
   Field<std::optional<std::vector<map::Import>>> import{this};
   Field<std::optional<std::vector<map::Protare>>> protare{this};
   Field<std::optional<std::vector<map::TNSL>>> TNSL{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->library, \
      this->format, \
      this->checksum, \
      this->algorithm, \
      this->import, \
      this->protare, \
      this->TNSL)

   // default
   Map() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Map(
      const wrapper<XMLName> &library,
      const wrapper<XMLName> &format = {},
      const wrapper<std::string> &checksum = {},
      const wrapper<enums::HashAlgorithm> &algorithm = {},
      const wrapper<std::optional<std::vector<map::Import>>> &import = {},
      const wrapper<std::optional<std::vector<map::Protare>>> &protare = {},
      const wrapper<std::optional<std::vector<map::TNSL>>> &TNSL = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      library(this,library),
      format(this,format),
      checksum(this,checksum),
      algorithm(this,algorithm),
      import(this,import),
      protare(this,protare),
      TNSL(this,TNSL)
   {
      Component::finish();
   }

   // from node
   explicit Map(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Map(const Map &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      library(this,other.library),
      format(this,other.format),
      checksum(this,other.checksum),
      algorithm(this,other.algorithm),
      import(this,other.import),
      protare(this,other.protare),
      TNSL(this,other.TNSL)
   {
      Component::finish(other);
   }

   // move
   Map(Map &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      library(this,std::move(other.library)),
      format(this,std::move(other.format)),
      checksum(this,std::move(other.checksum)),
      algorithm(this,std::move(other.algorithm)),
      import(this,std::move(other.import)),
      protare(this,std::move(other.protare)),
      TNSL(this,std::move(other.TNSL))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Map &operator=(const Map &) = default;
   Map &operator=(Map &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/map/Map/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Map

} // namespace map
} // namespace v2_0
} // namespace test

#endif
