
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_MAP_MAP
#define TEST_V2_0_MAP_MAP

#include "test/v2.0/map/Import.hpp"
#include "test/v2.0/map/Protare.hpp"
#include "test/v2.0/map/TNSL.hpp"

namespace test {
namespace v2_0 {
namespace map {

// -----------------------------------------------------------------------------
// map::
// class Map
// -----------------------------------------------------------------------------

class Map : public Component<map::Map> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "map"; }
   static auto CLASS() { return "Map"; }
   static auto FIELD() { return "map"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("library") |
         XMLName{}
            / Meta<>("format") |
         checksum{}
            / Meta<>("checksum") |
         algorithm{}
            / Meta<>("algorithm") |
         // children
         std::optional<map::Import>{}
            / ++Child<>("import") |
         std::optional<map::Protare>{}
            / ++Child<>("protare") |
         std::optional<map::TNSL>{}
            / ++Child<>("TNSL")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> library{this};
   Field<XMLName> format{this};
   Field<checksum> checksum{this};
   Field<algorithm> algorithm{this};

   // children
   Field<std::optional<std::vector<map::Import>>> import{this};
   Field<std::optional<std::vector<map::Protare>>> protare{this};
   Field<std::optional<std::vector<map::TNSL>>> TNSL{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->library, \
      this->format, \
      this->checksum, \
      this->algorithm, \
      this->import, \
      this->protare, \
      this->TNSL)

   // default, and from fields
   explicit Map(
      const wrapper<XMLName> &library = {},
      const wrapper<XMLName> &format = {},
      const wrapper<checksum> &checksum = {},
      const wrapper<algorithm> &algorithm = {},
      const wrapper<std::optional<std::vector<map::Import>>> &import = {},
      const wrapper<std::optional<std::vector<map::Protare>>> &protare = {},
      const wrapper<std::optional<std::vector<map::TNSL>>> &TNSL = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      library(this,library),
      format(this,format),
      checksum(this,checksum),
      algorithm(this,algorithm),
      import(this,import),
      protare(this,protare),
      TNSL(this,TNSL)
   {
      Component::finish();
   }

   // from node
   explicit Map(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Map(const Map &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Map(Map &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Map &operator=(const Map &) = default;
   Map &operator=(Map &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/map/Map/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Map

} // namespace map
} // namespace v2_0
} // namespace test

#endif
