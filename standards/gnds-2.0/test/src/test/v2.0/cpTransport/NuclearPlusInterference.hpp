
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE
#define TEST_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE

#include "test/v2.0/transport/CrossSection.hpp"
#include "test/v2.0/transport/Distribution.hpp"

namespace test {
namespace v2_0 {
namespace cpTransport {

// -----------------------------------------------------------------------------
// cpTransport::
// class NuclearPlusInterference
// -----------------------------------------------------------------------------

class NuclearPlusInterference :
   public Component<cpTransport::NuclearPlusInterference>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "cpTransport"; }
   static auto CLASS() { return "NuclearPlusInterference"; }
   static auto NODENAME() { return "nuclearPlusInterference"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Float64{}
            / Meta<>("muCutoff") |

         // children
         --Child<transport::CrossSection>
            ("crossSection") |
         --Child<transport::Distribution>
            ("distribution")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "muCutoff",
         "crossSection",
         "distribution"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "mu_cutoff",
         "cross_section",
         "distribution"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Float64>
      muCutoff{this};

   // children
   Field<transport::CrossSection>
      crossSection{this};
   Field<transport::Distribution>
      distribution{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->muCutoff, \
      this->crossSection, \
      this->distribution \
   )

   // default
   NuclearPlusInterference() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit NuclearPlusInterference(
      const wrapper<Float64>
         &muCutoff,
      const wrapper<transport::CrossSection>
         &crossSection = {},
      const wrapper<transport::Distribution>
         &distribution = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      muCutoff(this,muCutoff),
      crossSection(this,crossSection),
      distribution(this,distribution)
   {
      Component::finish();
   }

   // from node
   explicit NuclearPlusInterference(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   NuclearPlusInterference(const NuclearPlusInterference &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      muCutoff(this,other.muCutoff),
      crossSection(this,other.crossSection),
      distribution(this,other.distribution)
   {
      Component::finish(other);
   }

   // move
   NuclearPlusInterference(NuclearPlusInterference &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      muCutoff(this,std::move(other.muCutoff)),
      crossSection(this,std::move(other.crossSection)),
      distribution(this,std::move(other.distribution))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   NuclearPlusInterference &operator=(const NuclearPlusInterference &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         muCutoff = other.muCutoff;
         crossSection = other.crossSection;
         distribution = other.distribution;
      }
      return *this;
   }

   // move
   NuclearPlusInterference &operator=(NuclearPlusInterference &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         muCutoff = std::move(other.muCutoff);
         crossSection = std::move(other.crossSection);
         distribution = std::move(other.distribution);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/cpTransport/NuclearPlusInterference/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class NuclearPlusInterference

} // namespace cpTransport
} // namespace v2_0
} // namespace test

#endif
