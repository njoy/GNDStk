
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE
#define TEST_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE

#include "test/v2.0/transport/CrossSection.hpp"
#include "test/v2.0/transport/Distribution.hpp"

namespace test {
namespace v2_0 {
namespace cpTransport {

// -----------------------------------------------------------------------------
// cpTransport::
// class NuclearPlusInterference
// -----------------------------------------------------------------------------

class NuclearPlusInterference :
   public Component<cpTransport::NuclearPlusInterference>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "cpTransport"; }
   static auto CLASS() { return "NuclearPlusInterference"; }
   static auto FIELD() { return "nuclearPlusInterference"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Float64{}
            / Meta<>("muCutoff") |

         // children
         --Child<transport::CrossSection>("crossSection") |
         --Child<transport::Distribution>("distribution")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Float64> muCutoff{this};

   // children
   Field<transport::CrossSection> crossSection{this};
   Field<transport::Distribution> distribution{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->muCutoff, \
      this->crossSection, \
      this->distribution)

   // default
   NuclearPlusInterference() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit NuclearPlusInterference(
      const wrapper<Float64> &muCutoff,
      const wrapper<transport::CrossSection> &crossSection = {},
      const wrapper<transport::Distribution> &distribution = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      muCutoff(this,muCutoff),
      crossSection(this,crossSection),
      distribution(this,distribution)
   {
      Component::finish();
   }

   // from node
   explicit NuclearPlusInterference(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   NuclearPlusInterference(const NuclearPlusInterference &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      muCutoff(this,other.muCutoff),
      crossSection(this,other.crossSection),
      distribution(this,other.distribution)
   {
      Component::finish(other);
   }

   // move
   NuclearPlusInterference(NuclearPlusInterference &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      muCutoff(this,std::move(other.muCutoff)),
      crossSection(this,std::move(other.crossSection)),
      distribution(this,std::move(other.distribution))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   NuclearPlusInterference &operator=(const NuclearPlusInterference &) = default;
   NuclearPlusInterference &operator=(NuclearPlusInterference &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/cpTransport/NuclearPlusInterference/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class NuclearPlusInterference

} // namespace cpTransport
} // namespace v2_0
} // namespace test

#endif
