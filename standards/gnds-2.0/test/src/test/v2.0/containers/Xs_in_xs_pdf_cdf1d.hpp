
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_XS_IN_XS_PDF_CDF1D
#define TEST_V2_0_CONTAINERS_XS_IN_XS_PDF_CDF1D

#include "test/v2.0/containers/Values.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Xs_in_xs_pdf_cdf1d
// -----------------------------------------------------------------------------

class Xs_in_xs_pdf_cdf1d : public Component<containers::Xs_in_xs_pdf_cdf1d> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Xs_in_xs_pdf_cdf1d"; }
   static auto FIELD() { return "xs"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         containers::Values{}
            / --Child<>("values")
      ;
   }

public:
   using Component::construct;

   // children
   Field<containers::Values> values{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->values)

   // default, and from fields
   explicit Xs_in_xs_pdf_cdf1d(
      const wrapper<containers::Values> &values = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      values(this,values)
   {
      Component::finish();
   }

   // from node
   explicit Xs_in_xs_pdf_cdf1d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Xs_in_xs_pdf_cdf1d(const Xs_in_xs_pdf_cdf1d &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Xs_in_xs_pdf_cdf1d(Xs_in_xs_pdf_cdf1d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Xs_in_xs_pdf_cdf1d &operator=(const Xs_in_xs_pdf_cdf1d &) = default;
   Xs_in_xs_pdf_cdf1d &operator=(Xs_in_xs_pdf_cdf1d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Xs_in_xs_pdf_cdf1d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Xs_in_xs_pdf_cdf1d

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
