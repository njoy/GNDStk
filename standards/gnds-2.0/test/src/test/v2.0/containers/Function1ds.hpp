
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_FUNCTION1DS
#define TEST_V2_0_CONTAINERS_FUNCTION1DS

#include "test/v2.0/containers/XYs1d.hpp"
#include "test/v2.0/containers/Constant1d.hpp"
#include "test/v2.0/containers/Polynomial1d.hpp"
#include "test/v2.0/containers/Legendre.hpp"
#include "test/v2.0/containers/Gridded1d.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Function1ds
// -----------------------------------------------------------------------------

class Function1ds : public Component<containers::Function1ds> {
   friend class Component;

   using _t = std::variant<
      containers::XYs1d,
      containers::Constant1d,
      containers::Polynomial1d,
      containers::Legendre,
      containers::Gridded1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Function1ds"; }
   static auto FIELD() { return "function1ds"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         _t{}
            / ++(Child<>("XYs1d") || Child<>("constant1d") || Child<>("polynomial1d") || Child<>("Legendre") || Child<>("gridded1d"))
      ;
   }

public:
   using Component::construct;

   // children - variant
   Field<std::vector<_t>> _XYs1dconstant1dpolynomial1dLegendregridded1d{this};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dLegendregridded1d),containers::XYs1d> XYs1d{_XYs1dconstant1dpolynomial1dLegendregridded1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dLegendregridded1d),containers::Constant1d> constant1d{_XYs1dconstant1dpolynomial1dLegendregridded1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dLegendregridded1d),containers::Polynomial1d> polynomial1d{_XYs1dconstant1dpolynomial1dLegendregridded1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dLegendregridded1d),containers::Legendre> Legendre{_XYs1dconstant1dpolynomial1dLegendregridded1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dLegendregridded1d),containers::Gridded1d> gridded1d{_XYs1dconstant1dpolynomial1dLegendregridded1d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->_XYs1dconstant1dpolynomial1dLegendregridded1d)

   // default, and from fields
   explicit Function1ds(
      const wrapper<std::vector<_t>> &_XYs1dconstant1dpolynomial1dLegendregridded1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      _XYs1dconstant1dpolynomial1dLegendregridded1d(this,_XYs1dconstant1dpolynomial1dLegendregridded1d)
   {
      Component::finish();
   }

   // from node
   explicit Function1ds(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Function1ds(const Function1ds &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Function1ds(Function1ds &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Function1ds &operator=(const Function1ds &) = default;
   Function1ds &operator=(Function1ds &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Function1ds/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Function1ds

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
