
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_YS1D
#define TEST_V2_0_CONTAINERS_YS1D

#include "test/v2.0/containers/Axes.hpp"
#include "test/v2.0/containers/Values.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Ys1d
// -----------------------------------------------------------------------------

class Ys1d :
   public Component<containers::Ys1d>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Ys1d"; }
   static auto NODENAME() { return "Ys1d"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Defaulted<enums::Interpolation>{enums::Interpolation::linlin}
            / Meta<>("interpolation") |
         std::optional<XMLName>{}
            / Meta<>("label") |

         // children
         --Child<containers::Axes>
            ("axes") |
         --Child<containers::Values>
            ("values")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "interpolation",
         "label",
         "axes",
         "values"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "interpolation",
         "label",
         "axes",
         "values"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const enums::Interpolation interpolation = enums::Interpolation::linlin;
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Defaulted<enums::Interpolation>>
      interpolation{this,defaults.interpolation};
   Field<std::optional<XMLName>>
      label{this};

   // children
   Field<containers::Axes>
      axes{this};
   Field<containers::Values>
      values{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(axes(),axis);
   GNDSTK_SHORTCUT(axes(),grid);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->interpolation, \
      this->label, \
      this->axes, \
      this->values \
   )

   // default
   Ys1d() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Ys1d(
      const wrapper<std::optional<enums::Interpolation>>
         &interpolation,
      const wrapper<std::optional<XMLName>>
         &label = {},
      const wrapper<containers::Axes>
         &axes = {},
      const wrapper<containers::Values>
         &values = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      interpolation(this,defaults.interpolation,interpolation),
      label(this,label),
      axes(this,axes),
      values(this,values)
   {
      Component::finish();
   }

   // from node
   explicit Ys1d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Ys1d(const Ys1d &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      interpolation(this,other.interpolation),
      label(this,other.label),
      axes(this,other.axes),
      values(this,other.values)
   {
      Component::finish(other);
   }

   // move
   Ys1d(Ys1d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      interpolation(this,std::move(other.interpolation)),
      label(this,std::move(other.label)),
      axes(this,std::move(other.axes)),
      values(this,std::move(other.values))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Ys1d &operator=(const Ys1d &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         interpolation = other.interpolation;
         label = other.label;
         axes = other.axes;
         values = other.values;
      }
      return *this;
   }

   // move
   Ys1d &operator=(Ys1d &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         interpolation = std::move(other.interpolation);
         label = std::move(other.label);
         axes = std::move(other.axes);
         values = std::move(other.values);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Ys1d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Ys1d

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
