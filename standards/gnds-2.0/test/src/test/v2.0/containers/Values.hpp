
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_VALUES
#define TEST_V2_0_CONTAINERS_VALUES

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Values
// -----------------------------------------------------------------------------

class Values :
   public Component<containers::Values,true>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Values"; }
   static auto NODENAME() { return "values"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Defaulted<UTF8Text>{"Float64"}
            / Meta<>("valueType") |
         Defaulted<Integer32>{0}
            / Meta<>("start") |
         std::optional<Integer32>{}
            / Meta<>("length") |
         std::optional<UTF8Text>{}
            / Meta<>("href") |
         std::optional<Integer32>{}
            / Meta<>("startIndex") |
         std::optional<Integer32>{}
            / Meta<>("count")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "valueType",
         "start",
         "length",
         "href",
         "startIndex",
         "count"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "value_type",
         "start",
         "length",
         "href",
         "start_index",
         "count"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;
   using BlockData::operator=;

   // defaults
   static inline const struct Defaults {
      static inline const UTF8Text valueType = "Float64";
      static inline const Integer32 start = 0;
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   mutable Field<Defaulted<UTF8Text>>
      valueType{this,defaults.valueType};
   mutable Field<Defaulted<Integer32>>
      start{this,defaults.start};
   mutable Field<std::optional<Integer32>>
      length{this};
   Field<std::optional<UTF8Text>>
      href{this};
   Field<std::optional<Integer32>>
      startIndex{this};
   Field<std::optional<Integer32>>
      count{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->valueType, \
      this->start, \
      this->length, \
      this->href, \
      this->startIndex, \
      this->count \
   )

   // default
   Values() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Values(
      const wrapper<std::optional<UTF8Text>>
         &valueType,
      const wrapper<std::optional<Integer32>>
         &start = {},
      const wrapper<std::optional<Integer32>>
         &length = {},
      const wrapper<std::optional<UTF8Text>>
         &href = {},
      const wrapper<std::optional<Integer32>>
         &startIndex = {},
      const wrapper<std::optional<Integer32>>
         &count = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      valueType(this,defaults.valueType,valueType),
      start(this,defaults.start,start),
      length(this,length),
      href(this,href),
      startIndex(this,startIndex),
      count(this,count)
   {
      Component::finish();
   }

   // from node
   explicit Values(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   explicit Values(const std::vector<T> &vector) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(vector);
   }

   // copy
   Values(const Values &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      valueType(this,other.valueType),
      start(this,other.start),
      length(this,other.length),
      href(this,other.href),
      startIndex(this,other.startIndex),
      count(this,other.count)
   {
      Component::finish(other);
   }

   // move
   Values(Values &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      valueType(this,std::move(other.valueType)),
      start(this,std::move(other.start)),
      length(this,std::move(other.length)),
      href(this,std::move(other.href)),
      startIndex(this,std::move(other.startIndex)),
      count(this,std::move(other.count))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Values &operator=(const Values &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         valueType = other.valueType;
         start = other.start;
         length = other.length;
         href = other.href;
         startIndex = other.startIndex;
         count = other.count;
      }
      return *this;
   }

   // move
   Values &operator=(Values &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         valueType = std::move(other.valueType);
         start = std::move(other.start);
         length = std::move(other.length);
         href = std::move(other.href);
         startIndex = std::move(other.startIndex);
         count = std::move(other.count);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Values/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Values

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
