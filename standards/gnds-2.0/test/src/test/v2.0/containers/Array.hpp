
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_ARRAY
#define TEST_V2_0_CONTAINERS_ARRAY

#include "test/v2.0/containers/Values.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Array
// -----------------------------------------------------------------------------

class Array :
   public Component<containers::Array>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Array"; }
   static auto NODENAME() { return "array"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         IntegerTuple{}
            / Meta<>("shape") |
         std::optional<UTF8Text>{}
            / Meta<>("compression") |
         std::optional<UTF8Text>{}
            / Meta<>("symmetry") |
         std::optional<UTF8Text>{}
            / Meta<>("permutation") |
         Defaulted<UTF8Text>{"row-major"}
            / Meta<>("storageOrder") |
         std::optional<IntegerTuple>{}
            / Meta<>("offset") |

         // children
         ++Child<std::optional<containers::Values>>
            ("values") |
         ++Child<std::optional<containers::Array>>
            ("array")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "shape",
         "compression",
         "symmetry",
         "permutation",
         "storageOrder",
         "offset",
         "values",
         "array"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "shape",
         "compression",
         "symmetry",
         "permutation",
         "storage_order",
         "offset",
         "values",
         "array"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const UTF8Text storageOrder = "row-major";
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<IntegerTuple>
      shape{this};
   Field<std::optional<UTF8Text>>
      compression{this};
   Field<std::optional<UTF8Text>>
      symmetry{this};
   Field<std::optional<UTF8Text>>
      permutation{this};
   Field<Defaulted<UTF8Text>>
      storageOrder{this,defaults.storageOrder};
   Field<std::optional<IntegerTuple>>
      offset{this};

   // children
   Field<std::optional<std::vector<containers::Values>>>
      values{this};
   Field<std::optional<std::vector<containers::Array>>>
      array{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->shape, \
      this->compression, \
      this->symmetry, \
      this->permutation, \
      this->storageOrder, \
      this->offset, \
      this->values, \
      this->array \
   )

   // default
   Array() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Array(
      const wrapper<IntegerTuple>
         &shape,
      const wrapper<std::optional<UTF8Text>>
         &compression = {},
      const wrapper<std::optional<UTF8Text>>
         &symmetry = {},
      const wrapper<std::optional<UTF8Text>>
         &permutation = {},
      const wrapper<std::optional<UTF8Text>>
         &storageOrder = {},
      const wrapper<std::optional<IntegerTuple>>
         &offset = {},
      const wrapper<std::optional<std::vector<containers::Values>>>
         &values = {},
      const wrapper<std::optional<std::vector<containers::Array>>>
         &array = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      shape(this,shape),
      compression(this,compression),
      symmetry(this,symmetry),
      permutation(this,permutation),
      storageOrder(this,defaults.storageOrder,storageOrder),
      offset(this,offset),
      values(this,values),
      array(this,array)
   {
      Component::finish();
   }

   // from node
   explicit Array(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Array(const Array &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      shape(this,other.shape),
      compression(this,other.compression),
      symmetry(this,other.symmetry),
      permutation(this,other.permutation),
      storageOrder(this,other.storageOrder),
      offset(this,other.offset),
      values(this,other.values),
      array(this,other.array)
   {
      Component::finish(other);
   }

   // move
   Array(Array &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      shape(this,std::move(other.shape)),
      compression(this,std::move(other.compression)),
      symmetry(this,std::move(other.symmetry)),
      permutation(this,std::move(other.permutation)),
      storageOrder(this,std::move(other.storageOrder)),
      offset(this,std::move(other.offset)),
      values(this,std::move(other.values)),
      array(this,std::move(other.array))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Array &operator=(const Array &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         shape = other.shape;
         compression = other.compression;
         symmetry = other.symmetry;
         permutation = other.permutation;
         storageOrder = other.storageOrder;
         offset = other.offset;
         values = other.values;
         array = other.array;
      }
      return *this;
   }

   // move
   Array &operator=(Array &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         shape = std::move(other.shape);
         compression = std::move(other.compression);
         symmetry = std::move(other.symmetry);
         permutation = std::move(other.permutation);
         storageOrder = std::move(other.storageOrder);
         offset = std::move(other.offset);
         values = std::move(other.values);
         array = std::move(other.array);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Array/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Array

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
