
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_AXES
#define TEST_V2_0_CONTAINERS_AXES

#include "test/v2.0/containers/Axis.hpp"
#include "test/v2.0/containers/Grid.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Axes
// -----------------------------------------------------------------------------

class Axes : public Component<containers::Axes> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Axes"; }
   static auto FIELD() { return "axes"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<UTF8Text>{}
            / Meta<>("href") |
         // children
         std::optional<containers::Axis>{}
            / ++Child<>("axis") |
         std::optional<containers::Grid>{}
            / ++Child<>("grid")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<UTF8Text>> href{this};

   // children
   Field<std::optional<std::vector<containers::Axis>>> axis{this};
   Field<std::optional<std::vector<containers::Grid>>> grid{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->href, \
      this->axis, \
      this->grid)

   // default, and from fields
   explicit Axes(
      const wrapper<std::optional<UTF8Text>> &href = {},
      const wrapper<std::optional<std::vector<containers::Axis>>> &axis = {},
      const wrapper<std::optional<std::vector<containers::Grid>>> &grid = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      href(this,href),
      axis(this,axis),
      grid(this,grid)
   {
      Component::finish();
   }

   // from node
   explicit Axes(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Axes(const Axes &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Axes(Axes &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Axes &operator=(const Axes &) = default;
   Axes &operator=(Axes &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Axes/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Axes

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
