
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_DATA
#define TEST_V2_0_CONTAINERS_DATA

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Data
// -----------------------------------------------------------------------------

class Data :
   public Component<containers::Data,true>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Data"; }
   static auto FIELD() { return "data"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Defaulted<UTF8Text>{"whiteSpace"}
            / Meta<>("sep")
      ;
   }

public:
   using Component::construct;
   using BlockData::operator=;

   // defaults
   static inline const struct Defaults {
      static inline const UTF8Text sep = "whiteSpace";
   } defaults;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Defaulted<UTF8Text>> sep{this,defaults.sep};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->sep)

   // default
   Data() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Data(
      const wrapper<std::optional<UTF8Text>> &sep
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      sep(this,defaults.sep,sep)
   {
      Component::finish();
   }

   // from node
   explicit Data(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   Data(const std::vector<T> &vector) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(vector);
   }

   // copy
   Data(const Data &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      sep(this,other.sep)
   {
      Component::finish(other);
   }

   // move
   Data(Data &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      sep(this,std::move(other.sep))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Data &operator=(const Data &) = default;
   Data &operator=(Data &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Data/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Data

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
