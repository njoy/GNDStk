
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_STRING
#define TEST_V2_0_CONTAINERS_STRING

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class String
// -----------------------------------------------------------------------------

class String :
   public Component<containers::String>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "String"; }
   static auto FIELD() { return "string"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("unit") |
         XMLName{}
            / Meta<>("value")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<XMLName>> label{this};
   Field<std::optional<XMLName>> unit{this};
   Field<XMLName> value{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->unit, \
      this->value)

   // default
   String() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit String(
      const wrapper<std::optional<XMLName>> &label,
      const wrapper<std::optional<XMLName>> &unit = {},
      const wrapper<XMLName> &value = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      unit(this,unit),
      value(this,value)
   {
      Component::finish();
   }

   // from node
   explicit String(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   String(const String &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      unit(this,other.unit),
      value(this,other.value)
   {
      Component::finish(other);
   }

   // move
   String(String &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      unit(this,std::move(other.unit)),
      value(this,std::move(other.value))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   String &operator=(const String &) = default;
   String &operator=(String &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/String/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class String

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
