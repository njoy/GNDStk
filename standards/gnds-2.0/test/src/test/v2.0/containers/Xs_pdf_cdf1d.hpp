
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_XS_PDF_CDF1D
#define TEST_V2_0_CONTAINERS_XS_PDF_CDF1D

#include "test/v2.0/containers/Xs_in_xs_pdf_cdf1d.hpp"
#include "test/v2.0/containers/Pdf.hpp"
#include "test/v2.0/containers/Cdf_in_xs_pdf_cdf1d.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Xs_pdf_cdf1d
// -----------------------------------------------------------------------------

class Xs_pdf_cdf1d :
   public Component<containers::Xs_pdf_cdf1d>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Xs_pdf_cdf1d"; }
   static auto FIELD() { return "xs_pdf_cdf1d"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<Float64>{}
            / Meta<>("outerDomainValue") |

         // children
         --Child<containers::Xs_in_xs_pdf_cdf1d>("xs") |
         --Child<containers::Pdf>("pdf") |
         --Child<containers::Cdf_in_xs_pdf_cdf1d>("cdf")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<Float64>> outerDomainValue{this};

   // children
   Field<containers::Xs_in_xs_pdf_cdf1d> xs_in_xs_pdf_cdf1d{this};
   Field<containers::Pdf> pdf{this};
   Field<containers::Cdf_in_xs_pdf_cdf1d> cdf_in_xs_pdf_cdf1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->outerDomainValue, \
      this->xs_in_xs_pdf_cdf1d, \
      this->pdf, \
      this->cdf_in_xs_pdf_cdf1d)

   // default
   Xs_pdf_cdf1d() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Xs_pdf_cdf1d(
      const wrapper<std::optional<Float64>> &outerDomainValue,
      const wrapper<containers::Xs_in_xs_pdf_cdf1d> &xs_in_xs_pdf_cdf1d = {},
      const wrapper<containers::Pdf> &pdf = {},
      const wrapper<containers::Cdf_in_xs_pdf_cdf1d> &cdf_in_xs_pdf_cdf1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      outerDomainValue(this,outerDomainValue),
      xs_in_xs_pdf_cdf1d(this,xs_in_xs_pdf_cdf1d),
      pdf(this,pdf),
      cdf_in_xs_pdf_cdf1d(this,cdf_in_xs_pdf_cdf1d)
   {
      Component::finish();
   }

   // from node
   explicit Xs_pdf_cdf1d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Xs_pdf_cdf1d(const Xs_pdf_cdf1d &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      outerDomainValue(this,other.outerDomainValue),
      xs_in_xs_pdf_cdf1d(this,other.xs_in_xs_pdf_cdf1d),
      pdf(this,other.pdf),
      cdf_in_xs_pdf_cdf1d(this,other.cdf_in_xs_pdf_cdf1d)
   {
      Component::finish(other);
   }

   // move
   Xs_pdf_cdf1d(Xs_pdf_cdf1d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      outerDomainValue(this,std::move(other.outerDomainValue)),
      xs_in_xs_pdf_cdf1d(this,std::move(other.xs_in_xs_pdf_cdf1d)),
      pdf(this,std::move(other.pdf)),
      cdf_in_xs_pdf_cdf1d(this,std::move(other.cdf_in_xs_pdf_cdf1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Xs_pdf_cdf1d &operator=(const Xs_pdf_cdf1d &) = default;
   Xs_pdf_cdf1d &operator=(Xs_pdf_cdf1d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Xs_pdf_cdf1d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Xs_pdf_cdf1d

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
