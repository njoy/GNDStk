
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_UNCERTAINTY
#define TEST_V2_0_CONTAINERS_UNCERTAINTY

#include "test/v2.0/containers/Standard.hpp"
#include "test/v2.0/containers/LogNormal.hpp"
#include "test/v2.0/containers/ConfidenceIntervals.hpp"
#include "test/v2.0/containers/Pdf.hpp"
#include "test/v2.0/containers/XYs1d.hpp"
#include "test/v2.0/containers/Polynomial1d.hpp"
#include "test/v2.0/containers/Covariance.hpp"
#include "test/v2.0/containers/ListOfCovariances.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Uncertainty
// -----------------------------------------------------------------------------

class Uncertainty : public Component<containers::Uncertainty> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Uncertainty"; }
   static auto FIELD() { return "uncertainty"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         std::optional<containers::Standard>{}
            / --Child<>("standard") |
         std::optional<containers::LogNormal>{}
            / --Child<>("logNormal") |
         std::optional<containers::ConfidenceIntervals>{}
            / --Child<>("confidenceIntervals") |
         std::optional<containers::Pdf>{}
            / --Child<>("pdf") |
         std::optional<containers::XYs1d>{}
            / --Child<>("XYs1d") |
         std::optional<containers::Polynomial1d>{}
            / --Child<>("polynomial1d") |
         std::optional<containers::Covariance>{}
            / --Child<>("covariance") |
         std::optional<containers::ListOfCovariances>{}
            / --Child<>("listOfCovariances")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::optional<containers::Standard>> standard{this};
   Field<std::optional<containers::LogNormal>> logNormal{this};
   Field<std::optional<containers::ConfidenceIntervals>> confidenceIntervals{this};
   Field<std::optional<containers::Pdf>> pdf{this};
   Field<std::optional<containers::XYs1d>> XYs1d{this};
   Field<std::optional<containers::Polynomial1d>> polynomial1d{this};
   Field<std::optional<containers::Covariance>> covariance{this};
   Field<std::optional<containers::ListOfCovariances>> listOfCovariances{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->standard, \
      this->logNormal, \
      this->confidenceIntervals, \
      this->pdf, \
      this->XYs1d, \
      this->polynomial1d, \
      this->covariance, \
      this->listOfCovariances)

   // default, and from fields
   explicit Uncertainty(
      const wrapper<std::optional<containers::Standard>> &standard = {},
      const wrapper<std::optional<containers::LogNormal>> &logNormal = {},
      const wrapper<std::optional<containers::ConfidenceIntervals>> &confidenceIntervals = {},
      const wrapper<std::optional<containers::Pdf>> &pdf = {},
      const wrapper<std::optional<containers::XYs1d>> &XYs1d = {},
      const wrapper<std::optional<containers::Polynomial1d>> &polynomial1d = {},
      const wrapper<std::optional<containers::Covariance>> &covariance = {},
      const wrapper<std::optional<containers::ListOfCovariances>> &listOfCovariances = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      standard(this,standard),
      logNormal(this,logNormal),
      confidenceIntervals(this,confidenceIntervals),
      pdf(this,pdf),
      XYs1d(this,XYs1d),
      polynomial1d(this,polynomial1d),
      covariance(this,covariance),
      listOfCovariances(this,listOfCovariances)
   {
      Component::finish();
   }

   // from node
   explicit Uncertainty(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Uncertainty(const Uncertainty &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Uncertainty(Uncertainty &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Uncertainty &operator=(const Uncertainty &) = default;
   Uncertainty &operator=(Uncertainty &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Uncertainty/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Uncertainty

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
