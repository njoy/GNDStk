
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_CONFIDENCEINTERVALS
#define TEST_V2_0_CONTAINERS_CONFIDENCEINTERVALS

#include "test/v2.0/containers/Interval.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class ConfidenceIntervals
// -----------------------------------------------------------------------------

class ConfidenceIntervals : public Component<containers::ConfidenceIntervals> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "ConfidenceIntervals"; }
   static auto FIELD() { return "confidenceIntervals"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         ++Child<containers::Interval>("interval")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::vector<containers::Interval>> interval{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->interval)

   // default
   ConfidenceIntervals() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit ConfidenceIntervals(
      const wrapper<std::vector<containers::Interval>> &interval
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      interval(this,interval)
   {
      Component::finish();
   }

   // from node
   explicit ConfidenceIntervals(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ConfidenceIntervals(const ConfidenceIntervals &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      interval(this,other.interval)
   {
      Component::finish(other);
   }

   // move
   ConfidenceIntervals(ConfidenceIntervals &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      interval(this,std::move(other.interval))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ConfidenceIntervals &operator=(const ConfidenceIntervals &) = default;
   ConfidenceIntervals &operator=(ConfidenceIntervals &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/ConfidenceIntervals/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ConfidenceIntervals

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
