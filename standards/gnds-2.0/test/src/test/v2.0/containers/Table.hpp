
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_CONTAINERS_TABLE
#define TEST_V2_0_CONTAINERS_TABLE

#include "test/v2.0/containers/ColumnHeaders.hpp"
#include "test/v2.0/containers/Data.hpp"

namespace test {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Table
// -----------------------------------------------------------------------------

class Table :
   public Component<containers::Table>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Table"; }
   static auto FIELD() { return "table"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Integer32{}
            / Meta<>("columns") |
         Integer32{}
            / Meta<>("rows") |
         Defaulted<XMLName>{"row-major"}
            / Meta<>("storageOrder") |

         // children
         --Child<containers::ColumnHeaders>("columnHeaders") |
         --Child<containers::Data>("data")
      ;
   }

public:
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const XMLName storageOrder = "row-major";
   } defaults;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Integer32> columns{this};
   Field<Integer32> rows{this};
   Field<Defaulted<XMLName>> storageOrder{this,defaults.storageOrder};

   // children
   Field<containers::ColumnHeaders> columnHeaders{this};
   Field<containers::Data> data{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->columns, \
      this->rows, \
      this->storageOrder, \
      this->columnHeaders, \
      this->data)

   // default
   Table() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Table(
      const wrapper<Integer32> &columns,
      const wrapper<Integer32> &rows = {},
      const wrapper<std::optional<XMLName>> &storageOrder = {},
      const wrapper<containers::ColumnHeaders> &columnHeaders = {},
      const wrapper<containers::Data> &data = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      columns(this,columns),
      rows(this,rows),
      storageOrder(this,defaults.storageOrder,storageOrder),
      columnHeaders(this,columnHeaders),
      data(this,data)
   {
      Component::finish();
   }

   // from node
   explicit Table(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Table(const Table &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      columns(this,other.columns),
      rows(this,other.rows),
      storageOrder(this,other.storageOrder),
      columnHeaders(this,other.columnHeaders),
      data(this,other.data)
   {
      Component::finish(other);
   }

   // move
   Table(Table &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      columns(this,std::move(other.columns)),
      rows(this,std::move(other.rows)),
      storageOrder(this,std::move(other.storageOrder)),
      columnHeaders(this,std::move(other.columnHeaders)),
      data(this,std::move(other.data))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Table &operator=(const Table &) = default;
   Table &operator=(Table &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/containers/Table/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Table

} // namespace containers
} // namespace v2_0
} // namespace test

#endif
