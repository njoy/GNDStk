
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FISSIONTRANSPORT_WATT
#define TEST_V2_0_FISSIONTRANSPORT_WATT

#include "test/v2.0/transport/U.hpp"
#include "test/v2.0/fissionTransport/A.hpp"
#include "test/v2.0/fissionTransport/B.hpp"

namespace test {
namespace v2_0 {
namespace fissionTransport {

// -----------------------------------------------------------------------------
// fissionTransport::
// class Watt
// -----------------------------------------------------------------------------

class Watt :
   public Component<fissionTransport::Watt>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "fissionTransport"; }
   static auto CLASS() { return "Watt"; }
   static auto NODENAME() { return "Watt"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<transport::U>
            ("U") |
         --Child<fissionTransport::A>
            ("a") |
         --Child<fissionTransport::B>
            ("b")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "U",
         "a",
         "b"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "u",
         "a",
         "b"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<transport::U>
      U{this};
   Field<fissionTransport::A>
      a{this};
   Field<fissionTransport::B>
      b{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->U, \
      this->a, \
      this->b \
   )

   // default
   Watt() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Watt(
      const wrapper<transport::U>
         &U,
      const wrapper<fissionTransport::A>
         &a = {},
      const wrapper<fissionTransport::B>
         &b = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      U(this,U),
      a(this,a),
      b(this,b)
   {
      Component::finish();
   }

   // from node
   explicit Watt(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Watt(const Watt &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      U(this,other.U),
      a(this,other.a),
      b(this,other.b)
   {
      Component::finish(other);
   }

   // move
   Watt(Watt &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      U(this,std::move(other.U)),
      a(this,std::move(other.a)),
      b(this,std::move(other.b))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Watt &operator=(const Watt &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         U = other.U;
         a = other.a;
         b = other.b;
      }
      return *this;
   }

   // move
   Watt &operator=(Watt &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         U = std::move(other.U);
         a = std::move(other.a);
         b = std::move(other.b);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fissionTransport/Watt/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Watt

} // namespace fissionTransport
} // namespace v2_0
} // namespace test

#endif
