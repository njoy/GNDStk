
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FISSIONTRANSPORT_WATT
#define TEST_V2_0_FISSIONTRANSPORT_WATT

#include "test/v2.0/transport/U.hpp"
#include "test/v2.0/fissionTransport/A.hpp"
#include "test/v2.0/fissionTransport/B.hpp"

namespace test {
namespace v2_0 {
namespace fissionTransport {

// -----------------------------------------------------------------------------
// fissionTransport::
// class Watt
// -----------------------------------------------------------------------------

class Watt : public Component<fissionTransport::Watt> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "fissionTransport"; }
   static auto CLASS() { return "Watt"; }
   static auto FIELD() { return "Watt"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         --Child<transport::U>("U") |
         --Child<fissionTransport::A>("a") |
         --Child<fissionTransport::B>("b")
      ;
   }

public:
   using Component::construct;

   // children
   Field<transport::U> U{this};
   Field<fissionTransport::A> a{this};
   Field<fissionTransport::B> b{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->U, \
      this->a, \
      this->b)

   // default
   Watt() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Watt(
      const wrapper<transport::U> &U,
      const wrapper<fissionTransport::A> &a = {},
      const wrapper<fissionTransport::B> &b = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      U(this,U),
      a(this,a),
      b(this,b)
   {
      Component::finish();
   }

   // from node
   explicit Watt(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Watt(const Watt &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      U(this,other.U),
      a(this,other.a),
      b(this,other.b)
   {
      Component::finish(other);
   }

   // move
   Watt(Watt &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      U(this,std::move(other.U)),
      a(this,std::move(other.a)),
      b(this,std::move(other.b))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Watt &operator=(const Watt &) = default;
   Watt &operator=(Watt &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fissionTransport/Watt/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Watt

} // namespace fissionTransport
} // namespace v2_0
} // namespace test

#endif
