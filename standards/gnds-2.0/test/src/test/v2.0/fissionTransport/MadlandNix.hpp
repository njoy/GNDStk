
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FISSIONTRANSPORT_MADLANDNIX
#define TEST_V2_0_FISSIONTRANSPORT_MADLANDNIX

#include "test/v2.0/fissionTransport/EFH.hpp"
#include "test/v2.0/fissionTransport/EFL.hpp"
#include "test/v2.0/fissionTransport/T_M.hpp"

namespace test {
namespace v2_0 {
namespace fissionTransport {

// -----------------------------------------------------------------------------
// fissionTransport::
// class MadlandNix
// -----------------------------------------------------------------------------

class MadlandNix :
   public Component<fissionTransport::MadlandNix>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "fissionTransport"; }
   static auto CLASS() { return "MadlandNix"; }
   static auto FIELD() { return "MadlandNix"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<fissionTransport::EFH>("EFH") |
         --Child<fissionTransport::EFL>("EFL") |
         --Child<fissionTransport::T_M>("T_M")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<fissionTransport::EFH> EFH{this};
   Field<fissionTransport::EFL> EFL{this};
   Field<fissionTransport::T_M> T_M{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->EFH, \
      this->EFL, \
      this->T_M)

   // default
   MadlandNix() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit MadlandNix(
      const wrapper<fissionTransport::EFH> &EFH,
      const wrapper<fissionTransport::EFL> &EFL = {},
      const wrapper<fissionTransport::T_M> &T_M = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      EFH(this,EFH),
      EFL(this,EFL),
      T_M(this,T_M)
   {
      Component::finish();
   }

   // from node
   explicit MadlandNix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   MadlandNix(const MadlandNix &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      EFH(this,other.EFH),
      EFL(this,other.EFL),
      T_M(this,other.T_M)
   {
      Component::finish(other);
   }

   // move
   MadlandNix(MadlandNix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      EFH(this,std::move(other.EFH)),
      EFL(this,std::move(other.EFL)),
      T_M(this,std::move(other.T_M))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   MadlandNix &operator=(const MadlandNix &) = default;
   MadlandNix &operator=(MadlandNix &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fissionTransport/MadlandNix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class MadlandNix

} // namespace fissionTransport
} // namespace v2_0
} // namespace test

#endif
