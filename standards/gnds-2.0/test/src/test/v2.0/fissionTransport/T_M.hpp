
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FISSIONTRANSPORT_T_M
#define TEST_V2_0_FISSIONTRANSPORT_T_M

#include "test/v2.0/containers/XYs1d.hpp"

namespace test {
namespace v2_0 {
namespace fissionTransport {

// -----------------------------------------------------------------------------
// fissionTransport::
// class T_M
// -----------------------------------------------------------------------------

class T_M : public Component<fissionTransport::T_M> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "fissionTransport"; }
   static auto CLASS() { return "T_M"; }
   static auto FIELD() { return "T_M"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         --Child<containers::XYs1d>("XYs1d")
      ;
   }

public:
   using Component::construct;

   // children
   Field<containers::XYs1d> XYs1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->XYs1d)

   // default
   T_M() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit T_M(
      const wrapper<containers::XYs1d> &XYs1d
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs1d(this,XYs1d)
   {
      Component::finish();
   }

   // from node
   explicit T_M(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   T_M(const T_M &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      XYs1d(this,other.XYs1d)
   {
      Component::finish(other);
   }

   // move
   T_M(T_M &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      XYs1d(this,std::move(other.XYs1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   T_M &operator=(const T_M &) = default;
   T_M &operator=(T_M &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fissionTransport/T_M/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class T_M

} // namespace fissionTransport
} // namespace v2_0
} // namespace test

#endif
