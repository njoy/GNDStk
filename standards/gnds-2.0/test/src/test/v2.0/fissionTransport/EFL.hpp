
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FISSIONTRANSPORT_EFL
#define TEST_V2_0_FISSIONTRANSPORT_EFL

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace fissionTransport {

// -----------------------------------------------------------------------------
// fissionTransport::
// class EFL
// -----------------------------------------------------------------------------

class EFL :
   public Component<fissionTransport::EFL>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "fissionTransport"; }
   static auto CLASS() { return "EFL"; }
   static auto FIELD() { return "EFL"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("unit") |
         Float64{}
            / Meta<>("value")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName> unit{this};
   Field<Float64> value{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->unit, \
      this->value)

   // default
   EFL() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit EFL(
      const wrapper<XMLName> &unit,
      const wrapper<Float64> &value = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      unit(this,unit),
      value(this,value)
   {
      Component::finish();
   }

   // from node
   explicit EFL(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   EFL(const EFL &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      unit(this,other.unit),
      value(this,other.value)
   {
      Component::finish(other);
   }

   // move
   EFL(EFL &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      unit(this,std::move(other.unit)),
      value(this,std::move(other.value))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   EFL &operator=(const EFL &) = default;
   EFL &operator=(EFL &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fissionTransport/EFL/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class EFL

} // namespace fissionTransport
} // namespace v2_0
} // namespace test

#endif
