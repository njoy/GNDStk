
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FISSIONTRANSPORT_FISSIONENERGYRELEASED
#define TEST_V2_0_FISSIONTRANSPORT_FISSIONENERGYRELEASED

#include "test/v2.0/fissionTransport/DelayedBetaEnergy.hpp"
#include "test/v2.0/fissionTransport/DelayedGammaEnergy.hpp"
#include "test/v2.0/fissionTransport/DelayedNeutronKE.hpp"
#include "test/v2.0/fissionTransport/NeutrinoEnergy.hpp"
#include "test/v2.0/fissionTransport/NonNeutrinoEnergy.hpp"
#include "test/v2.0/fissionTransport/PromptGammaEnergy.hpp"
#include "test/v2.0/fissionTransport/PromptNeutronKE.hpp"
#include "test/v2.0/fissionTransport/PromptProductKE.hpp"
#include "test/v2.0/fissionTransport/TotalEnergy.hpp"

namespace test {
namespace v2_0 {
namespace fissionTransport {

// -----------------------------------------------------------------------------
// fissionTransport::
// class FissionEnergyReleased
// -----------------------------------------------------------------------------

class FissionEnergyReleased : public Component<fissionTransport::FissionEnergyReleased> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "fissionTransport"; }
   static auto CLASS() { return "FissionEnergyReleased"; }
   static auto FIELD() { return "fissionEnergyReleased"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         std::optional<fissionTransport::DelayedBetaEnergy>{}
            / --Child<>("delayedBetaEnergy") |
         std::optional<fissionTransport::DelayedGammaEnergy>{}
            / --Child<>("delayedGammaEnergy") |
         std::optional<fissionTransport::DelayedNeutronKE>{}
            / --Child<>("delayedNeutronKE") |
         std::optional<fissionTransport::NeutrinoEnergy>{}
            / --Child<>("neutrinoEnergy") |
         std::optional<fissionTransport::NonNeutrinoEnergy>{}
            / --Child<>("nonNeutrinoEnergy") |
         std::optional<fissionTransport::PromptGammaEnergy>{}
            / --Child<>("promptGammaEnergy") |
         std::optional<fissionTransport::PromptNeutronKE>{}
            / --Child<>("promptNeutronKE") |
         std::optional<fissionTransport::PromptProductKE>{}
            / --Child<>("promptProductKE") |
         std::optional<fissionTransport::TotalEnergy>{}
            / --Child<>("totalEnergy")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> label{this};

   // children
   Field<std::optional<fissionTransport::DelayedBetaEnergy>> delayedBetaEnergy{this};
   Field<std::optional<fissionTransport::DelayedGammaEnergy>> delayedGammaEnergy{this};
   Field<std::optional<fissionTransport::DelayedNeutronKE>> delayedNeutronKE{this};
   Field<std::optional<fissionTransport::NeutrinoEnergy>> neutrinoEnergy{this};
   Field<std::optional<fissionTransport::NonNeutrinoEnergy>> nonNeutrinoEnergy{this};
   Field<std::optional<fissionTransport::PromptGammaEnergy>> promptGammaEnergy{this};
   Field<std::optional<fissionTransport::PromptNeutronKE>> promptNeutronKE{this};
   Field<std::optional<fissionTransport::PromptProductKE>> promptProductKE{this};
   Field<std::optional<fissionTransport::TotalEnergy>> totalEnergy{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->delayedBetaEnergy, \
      this->delayedGammaEnergy, \
      this->delayedNeutronKE, \
      this->neutrinoEnergy, \
      this->nonNeutrinoEnergy, \
      this->promptGammaEnergy, \
      this->promptNeutronKE, \
      this->promptProductKE, \
      this->totalEnergy)

   // default, and from fields
   explicit FissionEnergyReleased(
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<fissionTransport::DelayedBetaEnergy>> &delayedBetaEnergy = {},
      const wrapper<std::optional<fissionTransport::DelayedGammaEnergy>> &delayedGammaEnergy = {},
      const wrapper<std::optional<fissionTransport::DelayedNeutronKE>> &delayedNeutronKE = {},
      const wrapper<std::optional<fissionTransport::NeutrinoEnergy>> &neutrinoEnergy = {},
      const wrapper<std::optional<fissionTransport::NonNeutrinoEnergy>> &nonNeutrinoEnergy = {},
      const wrapper<std::optional<fissionTransport::PromptGammaEnergy>> &promptGammaEnergy = {},
      const wrapper<std::optional<fissionTransport::PromptNeutronKE>> &promptNeutronKE = {},
      const wrapper<std::optional<fissionTransport::PromptProductKE>> &promptProductKE = {},
      const wrapper<std::optional<fissionTransport::TotalEnergy>> &totalEnergy = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      delayedBetaEnergy(this,delayedBetaEnergy),
      delayedGammaEnergy(this,delayedGammaEnergy),
      delayedNeutronKE(this,delayedNeutronKE),
      neutrinoEnergy(this,neutrinoEnergy),
      nonNeutrinoEnergy(this,nonNeutrinoEnergy),
      promptGammaEnergy(this,promptGammaEnergy),
      promptNeutronKE(this,promptNeutronKE),
      promptProductKE(this,promptProductKE),
      totalEnergy(this,totalEnergy)
   {
      Component::finish();
   }

   // from node
   explicit FissionEnergyReleased(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   FissionEnergyReleased(const FissionEnergyReleased &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   FissionEnergyReleased(FissionEnergyReleased &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   FissionEnergyReleased &operator=(const FissionEnergyReleased &) = default;
   FissionEnergyReleased &operator=(FissionEnergyReleased &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fissionTransport/FissionEnergyReleased/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class FissionEnergyReleased

} // namespace fissionTransport
} // namespace v2_0
} // namespace test

#endif
