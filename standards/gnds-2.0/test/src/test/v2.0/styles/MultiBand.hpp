
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_STYLES_MULTIBAND
#define TEST_V2_0_STYLES_MULTIBAND

#include "test/v2.0/documentation/Documentation.hpp"

namespace test {
namespace v2_0 {
namespace styles {

// -----------------------------------------------------------------------------
// styles::
// class MultiBand
// -----------------------------------------------------------------------------

class MultiBand :
   public Component<styles::MultiBand>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "styles"; }
   static auto CLASS() { return "MultiBand"; }
   static auto NODENAME() { return "multiBand"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("date") |
         XMLName{}
            / Meta<>("derivedFrom") |
         XMLName{}
            / Meta<>("label") |
         Integer32{}
            / Meta<>("numberOfBands") |

         // children
         --Child<std::optional<documentation::Documentation>>
            ("documentation")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "date",
         "derivedFrom",
         "label",
         "numberOfBands",
         "documentation"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "date",
         "derived_from",
         "label",
         "number_of_bands",
         "documentation"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      date{this};
   Field<XMLName>
      derivedFrom{this};
   Field<XMLName>
      label{this};
   Field<Integer32>
      numberOfBands{this};

   // children
   Field<std::optional<documentation::Documentation>>
      documentation{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->date, \
      this->derivedFrom, \
      this->label, \
      this->numberOfBands, \
      this->documentation \
   )

   // default
   MultiBand() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit MultiBand(
      const wrapper<std::string>
         &date,
      const wrapper<XMLName>
         &derivedFrom = {},
      const wrapper<XMLName>
         &label = {},
      const wrapper<Integer32>
         &numberOfBands = {},
      const wrapper<std::optional<documentation::Documentation>>
         &documentation = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      date(this,date),
      derivedFrom(this,derivedFrom),
      label(this,label),
      numberOfBands(this,numberOfBands),
      documentation(this,documentation)
   {
      Component::finish();
   }

   // from node
   explicit MultiBand(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   MultiBand(const MultiBand &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      date(this,other.date),
      derivedFrom(this,other.derivedFrom),
      label(this,other.label),
      numberOfBands(this,other.numberOfBands),
      documentation(this,other.documentation)
   {
      Component::finish(other);
   }

   // move
   MultiBand(MultiBand &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      date(this,std::move(other.date)),
      derivedFrom(this,std::move(other.derivedFrom)),
      label(this,std::move(other.label)),
      numberOfBands(this,std::move(other.numberOfBands)),
      documentation(this,std::move(other.documentation))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   MultiBand &operator=(const MultiBand &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         date = other.date;
         derivedFrom = other.derivedFrom;
         label = other.label;
         numberOfBands = other.numberOfBands;
         documentation = other.documentation;
      }
      return *this;
   }

   // move
   MultiBand &operator=(MultiBand &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         date = std::move(other.date);
         derivedFrom = std::move(other.derivedFrom);
         label = std::move(other.label);
         numberOfBands = std::move(other.numberOfBands);
         documentation = std::move(other.documentation);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/styles/MultiBand/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class MultiBand

} // namespace styles
} // namespace v2_0
} // namespace test

#endif
