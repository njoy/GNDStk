
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_STYLES_TRANSPORTABLE
#define TEST_V2_0_STYLES_TRANSPORTABLE

#include "test/v2.0/styles/MultiGroup.hpp"

namespace test {
namespace v2_0 {
namespace styles {

// -----------------------------------------------------------------------------
// styles::
// class Transportable
// -----------------------------------------------------------------------------

class Transportable :
   public Component<styles::Transportable>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "styles"; }
   static auto CLASS() { return "Transportable"; }
   static auto NODENAME() { return "transportable"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Defaulted<XMLName>{"number"}
            / Meta<>("conserve") |
         XMLName{}
            / Meta<>("label") |

         // children
         --Child<styles::MultiGroup>
            ("multiGroup")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "conserve",
         "label",
         "multiGroup"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "conserve",
         "label",
         "multi_group"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const XMLName conserve = "number";
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Defaulted<XMLName>>
      conserve{this,defaults.conserve};
   Field<XMLName>
      label{this};

   // children
   Field<styles::MultiGroup>
      multiGroup{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(multiGroup(),grid);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->conserve, \
      this->label, \
      this->multiGroup \
   )

   // default
   Transportable() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Transportable(
      const wrapper<std::optional<XMLName>>
         &conserve,
      const wrapper<XMLName>
         &label = {},
      const wrapper<styles::MultiGroup>
         &multiGroup = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      conserve(this,defaults.conserve,conserve),
      label(this,label),
      multiGroup(this,multiGroup)
   {
      Component::finish();
   }

   // from node
   explicit Transportable(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Transportable(const Transportable &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      conserve(this,other.conserve),
      label(this,other.label),
      multiGroup(this,other.multiGroup)
   {
      Component::finish(other);
   }

   // move
   Transportable(Transportable &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      conserve(this,std::move(other.conserve)),
      label(this,std::move(other.label)),
      multiGroup(this,std::move(other.multiGroup))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Transportable &operator=(const Transportable &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         conserve = other.conserve;
         label = other.label;
         multiGroup = other.multiGroup;
      }
      return *this;
   }

   // move
   Transportable &operator=(Transportable &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         conserve = std::move(other.conserve);
         label = std::move(other.label);
         multiGroup = std::move(other.multiGroup);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/styles/Transportable/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Transportable

} // namespace styles
} // namespace v2_0
} // namespace test

#endif
