
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_APPDATA_ENDFCONVERSIONFLAGS
#define TEST_V2_0_APPDATA_ENDFCONVERSIONFLAGS

#include "test/v2.0/appData/Conversion.hpp"

namespace test {
namespace v2_0 {
namespace appData {

// -----------------------------------------------------------------------------
// appData::
// class ENDFconversionFlags
// -----------------------------------------------------------------------------

class ENDFconversionFlags : public Component<appData::ENDFconversionFlags> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "appData"; }
   static auto CLASS() { return "ENDFconversionFlags"; }
   static auto FIELD() { return "ENDFconversionFlags"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         std::optional<appData::Conversion>{}
            / --Child<>("conversion")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::optional<appData::Conversion>> conversion{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->conversion)

   // default, and from fields
   explicit ENDFconversionFlags(
      const wrapper<std::optional<appData::Conversion>> &conversion = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      conversion(this,conversion)
   {
      Component::finish();
   }

   // from node
   explicit ENDFconversionFlags(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ENDFconversionFlags(const ENDFconversionFlags &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ENDFconversionFlags(ENDFconversionFlags &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ENDFconversionFlags &operator=(const ENDFconversionFlags &) = default;
   ENDFconversionFlags &operator=(ENDFconversionFlags &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/appData/ENDFconversionFlags/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ENDFconversionFlags

} // namespace appData
} // namespace v2_0
} // namespace test

#endif
