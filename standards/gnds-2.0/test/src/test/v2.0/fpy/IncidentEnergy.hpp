
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FPY_INCIDENTENERGY
#define TEST_V2_0_FPY_INCIDENTENERGY

#include "test/v2.0/fpy/Energy.hpp"
#include "test/v2.0/fpy/Yields.hpp"

namespace test {
namespace v2_0 {
namespace fpy {

// -----------------------------------------------------------------------------
// fpy::
// class IncidentEnergy
// -----------------------------------------------------------------------------

class IncidentEnergy : public Component<fpy::IncidentEnergy> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "fpy"; }
   static auto CLASS() { return "IncidentEnergy"; }
   static auto FIELD() { return "incidentEnergy"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         fpy::Energy{}
            / --Child<>("energy") |
         fpy::Yields{}
            / --Child<>("yields")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> label{this};

   // children
   Field<fpy::Energy> energy{this};
   Field<fpy::Yields> yields{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->energy, \
      this->yields)

   // default, and from fields
   explicit IncidentEnergy(
      const wrapper<XMLName> &label = {},
      const wrapper<fpy::Energy> &energy = {},
      const wrapper<fpy::Yields> &yields = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      energy(this,energy),
      yields(this,yields)
   {
      Component::finish();
   }

   // from node
   explicit IncidentEnergy(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   IncidentEnergy(const IncidentEnergy &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   IncidentEnergy(IncidentEnergy &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   IncidentEnergy &operator=(const IncidentEnergy &) = default;
   IncidentEnergy &operator=(IncidentEnergy &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fpy/IncidentEnergy/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class IncidentEnergy

} // namespace fpy
} // namespace v2_0
} // namespace test

#endif
