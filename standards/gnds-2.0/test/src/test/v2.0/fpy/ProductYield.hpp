
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FPY_PRODUCTYIELD
#define TEST_V2_0_FPY_PRODUCTYIELD

#include "test/v2.0/fpy/Nuclides.hpp"
#include "test/v2.0/fpy/ElapsedTimes.hpp"

namespace test {
namespace v2_0 {
namespace fpy {

// -----------------------------------------------------------------------------
// fpy::
// class ProductYield
// -----------------------------------------------------------------------------

class ProductYield : public Component<fpy::ProductYield> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "fpy"; }
   static auto CLASS() { return "ProductYield"; }
   static auto FIELD() { return "productYield"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("label") |
         // children
         std::optional<fpy::Nuclides>{}
            / --Child<>("nuclides") |
         fpy::ElapsedTimes{}
            / --Child<>("elapsedTimes")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> label{this};

   // children
   Field<std::optional<fpy::Nuclides>> nuclides{this};
   Field<fpy::ElapsedTimes> elapsedTimes{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->nuclides, \
      this->elapsedTimes)

   // default, and from fields
   explicit ProductYield(
      const wrapper<XMLName> &label = {},
      const wrapper<std::optional<fpy::Nuclides>> &nuclides = {},
      const wrapper<fpy::ElapsedTimes> &elapsedTimes = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      nuclides(this,nuclides),
      elapsedTimes(this,elapsedTimes)
   {
      Component::finish();
   }

   // from node
   explicit ProductYield(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ProductYield(const ProductYield &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ProductYield(ProductYield &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ProductYield &operator=(const ProductYield &) = default;
   ProductYield &operator=(ProductYield &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fpy/ProductYield/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ProductYield

} // namespace fpy
} // namespace v2_0
} // namespace test

#endif
