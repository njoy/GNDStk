
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FPY_ELAPSEDTIME
#define TEST_V2_0_FPY_ELAPSEDTIME

#include "test/v2.0/fpy/Time.hpp"
#include "test/v2.0/fpy/Yields.hpp"
#include "test/v2.0/fpy/IncidentEnergies.hpp"

namespace test {
namespace v2_0 {
namespace fpy {

// -----------------------------------------------------------------------------
// fpy::
// class ElapsedTime
// -----------------------------------------------------------------------------

class ElapsedTime :
   public Component<fpy::ElapsedTime>
{
   friend class Component;

   using _t = std::variant<
      fpy::Yields,
      fpy::IncidentEnergies
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "fpy"; }
   static auto CLASS() { return "ElapsedTime"; }
   static auto NODENAME() { return "elapsedTime"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |

         // children
         --Child<fpy::Time>
            ("time") |
         _t{}
            / --(Child<>("yields") || Child<>("incidentEnergies"))
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "time",
         "_yieldsincidentEnergies"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "time",
         "_yieldsincident_energies"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<XMLName>>
      label{this};

   // children
   Field<fpy::Time>
      time{this};

   // children - variant
   Field<_t>
      _yieldsincidentEnergies{this};
   FieldPart<decltype(_yieldsincidentEnergies),fpy::Yields> yields{_yieldsincidentEnergies};
   FieldPart<decltype(_yieldsincidentEnergies),fpy::IncidentEnergies> incidentEnergies{_yieldsincidentEnergies};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->time, \
      this->_yieldsincidentEnergies \
   )

   // default
   ElapsedTime() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ElapsedTime(
      const wrapper<std::optional<XMLName>>
         &label,
      const wrapper<fpy::Time>
         &time = {},
      const wrapper<_t>
         &_yieldsincidentEnergies = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      time(this,time),
      _yieldsincidentEnergies(this,_yieldsincidentEnergies)
   {
      Component::finish();
   }

   // from node
   explicit ElapsedTime(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ElapsedTime(const ElapsedTime &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      time(this,other.time),
      _yieldsincidentEnergies(this,other._yieldsincidentEnergies)
   {
      Component::finish(other);
   }

   // move
   ElapsedTime(ElapsedTime &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      time(this,std::move(other.time)),
      _yieldsincidentEnergies(this,std::move(other._yieldsincidentEnergies))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ElapsedTime &operator=(const ElapsedTime &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         time = other.time;
         _yieldsincidentEnergies = other._yieldsincidentEnergies;
      }
      return *this;
   }

   // move
   ElapsedTime &operator=(ElapsedTime &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         time = std::move(other.time);
         _yieldsincidentEnergies = std::move(other._yieldsincidentEnergies);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fpy/ElapsedTime/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ElapsedTime

} // namespace fpy
} // namespace v2_0
} // namespace test

#endif
