
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_FPY_INCIDENTENERGIES
#define TEST_V2_0_FPY_INCIDENTENERGIES

#include "test/v2.0/fpy/IncidentEnergy.hpp"

namespace test {
namespace v2_0 {
namespace fpy {

// -----------------------------------------------------------------------------
// fpy::
// class IncidentEnergies
// -----------------------------------------------------------------------------

class IncidentEnergies :
   public Component<fpy::IncidentEnergies>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "fpy"; }
   static auto CLASS() { return "IncidentEnergies"; }
   static auto FIELD() { return "incidentEnergies"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         ++Child<fpy::IncidentEnergy>("incidentEnergy")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::vector<fpy::IncidentEnergy>> incidentEnergy{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->incidentEnergy)

   // default
   IncidentEnergies() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit IncidentEnergies(
      const wrapper<std::vector<fpy::IncidentEnergy>> &incidentEnergy
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      incidentEnergy(this,incidentEnergy)
   {
      Component::finish();
   }

   // from node
   explicit IncidentEnergies(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   IncidentEnergies(const IncidentEnergies &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      incidentEnergy(this,other.incidentEnergy)
   {
      Component::finish(other);
   }

   // move
   IncidentEnergies(IncidentEnergies &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      incidentEnergy(this,std::move(other.incidentEnergy))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   IncidentEnergies &operator=(const IncidentEnergies &) = default;
   IncidentEnergies &operator=(IncidentEnergies &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/fpy/IncidentEnergies/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class IncidentEnergies

} // namespace fpy
} // namespace v2_0
} // namespace test

#endif
