
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_EXTRA_UNCERTAINTY
#define TEST_V2_0_EXTRA_UNCERTAINTY

#include "test/v2.0/containers/Standard.hpp"
#include "test/v2.0/containers/LogNormal.hpp"
#include "test/v2.0/containers/ConfidenceIntervals.hpp"
#include "test/v2.0/containers/Covariance.hpp"
#include "test/v2.0/containers/ListOfCovariances.hpp"

namespace test {
namespace v2_0 {
namespace extra {

// -----------------------------------------------------------------------------
// extra::
// class Uncertainty
// -----------------------------------------------------------------------------

class Uncertainty :
   public Component<extra::Uncertainty>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "extra"; }
   static auto CLASS() { return "Uncertainty"; }
   static auto NODENAME() { return "uncertainty"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<containers::Standard>>
            ("standard") |
         --Child<std::optional<containers::LogNormal>>
            ("logNormal") |
         --Child<std::optional<containers::ConfidenceIntervals>>
            ("confidenceIntervals") |
         --Child<std::optional<containers::Covariance>>
            ("covariance") |
         --Child<std::optional<containers::ListOfCovariances>>
            ("listOfCovariances")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "standard",
         "logNormal",
         "confidenceIntervals",
         "covariance",
         "listOfCovariances"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "standard",
         "log_normal",
         "confidence_intervals",
         "covariance",
         "list_of_covariances"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<containers::Standard>>
      standard{this};
   Field<std::optional<containers::LogNormal>>
      logNormal{this};
   Field<std::optional<containers::ConfidenceIntervals>>
      confidenceIntervals{this};
   Field<std::optional<containers::Covariance>>
      covariance{this};
   Field<std::optional<containers::ListOfCovariances>>
      listOfCovariances{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->standard, \
      this->logNormal, \
      this->confidenceIntervals, \
      this->covariance, \
      this->listOfCovariances \
   )

   // default
   Uncertainty() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Uncertainty(
      const wrapper<std::optional<containers::Standard>>
         &standard,
      const wrapper<std::optional<containers::LogNormal>>
         &logNormal = {},
      const wrapper<std::optional<containers::ConfidenceIntervals>>
         &confidenceIntervals = {},
      const wrapper<std::optional<containers::Covariance>>
         &covariance = {},
      const wrapper<std::optional<containers::ListOfCovariances>>
         &listOfCovariances = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      standard(this,standard),
      logNormal(this,logNormal),
      confidenceIntervals(this,confidenceIntervals),
      covariance(this,covariance),
      listOfCovariances(this,listOfCovariances)
   {
      Component::finish();
   }

   // from node
   explicit Uncertainty(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Uncertainty(const Uncertainty &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      standard(this,other.standard),
      logNormal(this,other.logNormal),
      confidenceIntervals(this,other.confidenceIntervals),
      covariance(this,other.covariance),
      listOfCovariances(this,other.listOfCovariances)
   {
      Component::finish(other);
   }

   // move
   Uncertainty(Uncertainty &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      standard(this,std::move(other.standard)),
      logNormal(this,std::move(other.logNormal)),
      confidenceIntervals(this,std::move(other.confidenceIntervals)),
      covariance(this,std::move(other.covariance)),
      listOfCovariances(this,std::move(other.listOfCovariances))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Uncertainty &operator=(const Uncertainty &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         standard = other.standard;
         logNormal = other.logNormal;
         confidenceIntervals = other.confidenceIntervals;
         covariance = other.covariance;
         listOfCovariances = other.listOfCovariances;
      }
      return *this;
   }

   // move
   Uncertainty &operator=(Uncertainty &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         standard = std::move(other.standard);
         logNormal = std::move(other.logNormal);
         confidenceIntervals = std::move(other.confidenceIntervals);
         covariance = std::move(other.covariance);
         listOfCovariances = std::move(other.listOfCovariances);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/extra/Uncertainty/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Uncertainty

} // namespace extra
} // namespace v2_0
} // namespace test

#endif
