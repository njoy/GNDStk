
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_PROCESSED_ANGULARENERGYMC
#define TEST_V2_0_PROCESSED_ANGULARENERGYMC

#include "test/v2.0/transport/Angular_uncorrelated.hpp"
#include "test/v2.0/transport/AngularEnergy.hpp"

namespace test {
namespace v2_0 {
namespace processed {

// -----------------------------------------------------------------------------
// processed::
// class AngularEnergyMC
// -----------------------------------------------------------------------------

class AngularEnergyMC :
   public Component<processed::AngularEnergyMC>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "processed"; }
   static auto CLASS() { return "AngularEnergyMC"; }
   static auto FIELD() { return "angularEnergyMC"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("productFrame") |

         // children
         --Child<transport::Angular_uncorrelated>("angular") |
         --Child<transport::AngularEnergy>("angularEnergy")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName> label{this};
   Field<XMLName> productFrame{this};

   // children
   Field<transport::Angular_uncorrelated> angular_uncorrelated{this};
   Field<transport::AngularEnergy> angularEnergy{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->productFrame, \
      this->angular_uncorrelated, \
      this->angularEnergy)

   // default
   AngularEnergyMC() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit AngularEnergyMC(
      const wrapper<XMLName> &label,
      const wrapper<XMLName> &productFrame = {},
      const wrapper<transport::Angular_uncorrelated> &angular_uncorrelated = {},
      const wrapper<transport::AngularEnergy> &angularEnergy = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      productFrame(this,productFrame),
      angular_uncorrelated(this,angular_uncorrelated),
      angularEnergy(this,angularEnergy)
   {
      Component::finish();
   }

   // from node
   explicit AngularEnergyMC(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   AngularEnergyMC(const AngularEnergyMC &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      productFrame(this,other.productFrame),
      angular_uncorrelated(this,other.angular_uncorrelated),
      angularEnergy(this,other.angularEnergy)
   {
      Component::finish(other);
   }

   // move
   AngularEnergyMC(AngularEnergyMC &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      productFrame(this,std::move(other.productFrame)),
      angular_uncorrelated(this,std::move(other.angular_uncorrelated)),
      angularEnergy(this,std::move(other.angularEnergy))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   AngularEnergyMC &operator=(const AngularEnergyMC &) = default;
   AngularEnergyMC &operator=(AngularEnergyMC &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/processed/AngularEnergyMC/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class AngularEnergyMC

} // namespace processed
} // namespace v2_0
} // namespace test

#endif
