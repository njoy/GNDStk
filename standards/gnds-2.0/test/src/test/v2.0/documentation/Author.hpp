
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_AUTHOR
#define TEST_V2_0_DOCUMENTATION_AUTHOR

#include "test/v2.0/documentation/Affiliations.hpp"
#include "test/v2.0/documentation/Note.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class Author
// -----------------------------------------------------------------------------

class Author :
   public Component<documentation::Author>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "Author"; }
   static auto FIELD() { return "author"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         UTF8Text{}
            / Meta<>("name") |
         std::optional<UTF8Text>{}
            / Meta<>("orcid") |
         std::optional<UTF8Text>{}
            / Meta<>("email") |

         // children
         --Child<std::optional<documentation::Affiliations>>("affiliations") |
         --Child<std::optional<documentation::Note>>("note")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<UTF8Text> name{this};
   Field<std::optional<UTF8Text>> orcid{this};
   Field<std::optional<UTF8Text>> email{this};

   // children
   Field<std::optional<documentation::Affiliations>> affiliations{this};
   Field<std::optional<documentation::Note>> note{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->name, \
      this->orcid, \
      this->email, \
      this->affiliations, \
      this->note)

   // default
   Author() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Author(
      const wrapper<UTF8Text> &name,
      const wrapper<std::optional<UTF8Text>> &orcid = {},
      const wrapper<std::optional<UTF8Text>> &email = {},
      const wrapper<std::optional<documentation::Affiliations>> &affiliations = {},
      const wrapper<std::optional<documentation::Note>> &note = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      name(this,name),
      orcid(this,orcid),
      email(this,email),
      affiliations(this,affiliations),
      note(this,note)
   {
      Component::finish();
   }

   // from node
   explicit Author(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Author(const Author &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      name(this,other.name),
      orcid(this,other.orcid),
      email(this,other.email),
      affiliations(this,other.affiliations),
      note(this,other.note)
   {
      Component::finish(other);
   }

   // move
   Author(Author &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      name(this,std::move(other.name)),
      orcid(this,std::move(other.orcid)),
      email(this,std::move(other.email)),
      affiliations(this,std::move(other.affiliations)),
      note(this,std::move(other.note))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Author &operator=(const Author &) = default;
   Author &operator=(Author &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/Author/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Author

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
