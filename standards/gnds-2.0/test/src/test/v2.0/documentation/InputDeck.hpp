
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_INPUTDECK
#define TEST_V2_0_DOCUMENTATION_INPUTDECK

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class InputDeck
// -----------------------------------------------------------------------------

class InputDeck :
   public Component<documentation::InputDeck,true>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "InputDeck"; }
   static auto NODENAME() { return "inputDeck"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Defaulted<XMLName>{"ascii"}
            / Meta<>("encoding") |
         Defaulted<std::string>{"enums::GridStyle::none"}
            / Meta<>("markup") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("filename")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "encoding",
         "markup",
         "label",
         "filename"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "encoding",
         "markup",
         "label",
         "filename"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;
   using BlockData::operator=;

   // defaults
   static inline const struct Defaults {
      static inline const XMLName encoding = "ascii";
      static inline const std::string markup = "enums::GridStyle::none";
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Defaulted<XMLName>>
      encoding{this,defaults.encoding};
   Field<Defaulted<std::string>>
      markup{this,defaults.markup};
   Field<std::optional<XMLName>>
      label{this};
   Field<std::optional<XMLName>>
      filename{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->encoding, \
      this->markup, \
      this->label, \
      this->filename \
   )

   // default
   InputDeck() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit InputDeck(
      const wrapper<std::optional<XMLName>>
         &encoding,
      const wrapper<std::optional<std::string>>
         &markup = {},
      const wrapper<std::optional<XMLName>>
         &label = {},
      const wrapper<std::optional<XMLName>>
         &filename = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      encoding(this,defaults.encoding,encoding),
      markup(this,defaults.markup,markup),
      label(this,label),
      filename(this,filename)
   {
      Component::finish();
   }

   // from node
   explicit InputDeck(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   explicit InputDeck(const std::vector<T> &vector) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(vector);
   }

   // copy
   InputDeck(const InputDeck &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      encoding(this,other.encoding),
      markup(this,other.markup),
      label(this,other.label),
      filename(this,other.filename)
   {
      Component::finish(other);
   }

   // move
   InputDeck(InputDeck &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      encoding(this,std::move(other.encoding)),
      markup(this,std::move(other.markup)),
      label(this,std::move(other.label)),
      filename(this,std::move(other.filename))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   InputDeck &operator=(const InputDeck &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         encoding = other.encoding;
         markup = other.markup;
         label = other.label;
         filename = other.filename;
      }
      return *this;
   }

   // move
   InputDeck &operator=(InputDeck &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         encoding = std::move(other.encoding);
         markup = std::move(other.markup);
         label = std::move(other.label);
         filename = std::move(other.filename);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/InputDeck/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class InputDeck

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
