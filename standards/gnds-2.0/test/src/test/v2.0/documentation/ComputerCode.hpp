
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_COMPUTERCODE
#define TEST_V2_0_DOCUMENTATION_COMPUTERCODE

#include "test/v2.0/documentation/ExecutionArguments.hpp"
#include "test/v2.0/documentation/CodeRepo.hpp"
#include "test/v2.0/documentation/Note.hpp"
#include "test/v2.0/documentation/InputDecks.hpp"
#include "test/v2.0/documentation/OutputDecks.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class ComputerCode
// -----------------------------------------------------------------------------

class ComputerCode :
   public Component<documentation::ComputerCode>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "ComputerCode"; }
   static auto NODENAME() { return "computerCode"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         UTF8Text{}
            / Meta<>("name") |
         XMLName{}
            / Meta<>("version") |

         // children
         --Child<std::optional<documentation::ExecutionArguments>>
            ("executionArguments") |
         --Child<std::optional<documentation::CodeRepo>>
            ("codeRepo") |
         --Child<std::optional<documentation::Note>>
            ("note") |
         --Child<std::optional<documentation::InputDecks>>
            ("inputDecks") |
         --Child<std::optional<documentation::OutputDecks>>
            ("outputDecks")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "name",
         "version",
         "executionArguments",
         "codeRepo",
         "note",
         "inputDecks",
         "outputDecks"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "name",
         "version",
         "execution_arguments",
         "code_repo",
         "note",
         "input_decks",
         "output_decks"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<XMLName>>
      label{this};
   Field<UTF8Text>
      name{this};
   Field<XMLName>
      version{this};

   // children
   Field<std::optional<documentation::ExecutionArguments>>
      executionArguments{this};
   Field<std::optional<documentation::CodeRepo>>
      codeRepo{this};
   Field<std::optional<documentation::Note>>
      note{this};
   Field<std::optional<documentation::InputDecks>>
      inputDecks{this};
   Field<std::optional<documentation::OutputDecks>>
      outputDecks{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->name, \
      this->version, \
      this->executionArguments, \
      this->codeRepo, \
      this->note, \
      this->inputDecks, \
      this->outputDecks \
   )

   // default
   ComputerCode() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ComputerCode(
      const wrapper<std::optional<XMLName>>
         &label,
      const wrapper<UTF8Text>
         &name = {},
      const wrapper<XMLName>
         &version = {},
      const wrapper<std::optional<documentation::ExecutionArguments>>
         &executionArguments = {},
      const wrapper<std::optional<documentation::CodeRepo>>
         &codeRepo = {},
      const wrapper<std::optional<documentation::Note>>
         &note = {},
      const wrapper<std::optional<documentation::InputDecks>>
         &inputDecks = {},
      const wrapper<std::optional<documentation::OutputDecks>>
         &outputDecks = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      name(this,name),
      version(this,version),
      executionArguments(this,executionArguments),
      codeRepo(this,codeRepo),
      note(this,note),
      inputDecks(this,inputDecks),
      outputDecks(this,outputDecks)
   {
      Component::finish();
   }

   // from node
   explicit ComputerCode(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ComputerCode(const ComputerCode &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      name(this,other.name),
      version(this,other.version),
      executionArguments(this,other.executionArguments),
      codeRepo(this,other.codeRepo),
      note(this,other.note),
      inputDecks(this,other.inputDecks),
      outputDecks(this,other.outputDecks)
   {
      Component::finish(other);
   }

   // move
   ComputerCode(ComputerCode &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      name(this,std::move(other.name)),
      version(this,std::move(other.version)),
      executionArguments(this,std::move(other.executionArguments)),
      codeRepo(this,std::move(other.codeRepo)),
      note(this,std::move(other.note)),
      inputDecks(this,std::move(other.inputDecks)),
      outputDecks(this,std::move(other.outputDecks))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ComputerCode &operator=(const ComputerCode &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         name = other.name;
         version = other.version;
         executionArguments = other.executionArguments;
         codeRepo = other.codeRepo;
         note = other.note;
         inputDecks = other.inputDecks;
         outputDecks = other.outputDecks;
      }
      return *this;
   }

   // move
   ComputerCode &operator=(ComputerCode &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         name = std::move(other.name);
         version = std::move(other.version);
         executionArguments = std::move(other.executionArguments);
         codeRepo = std::move(other.codeRepo);
         note = std::move(other.note);
         inputDecks = std::move(other.inputDecks);
         outputDecks = std::move(other.outputDecks);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/ComputerCode/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ComputerCode

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
