
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_EXFORDATASET
#define TEST_V2_0_DOCUMENTATION_EXFORDATASET

#include "test/v2.0/documentation/CovarianceScript.hpp"
#include "test/v2.0/documentation/CorrectionScript.hpp"
#include "test/v2.0/documentation/Note.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class ExforDataSet
// -----------------------------------------------------------------------------

class ExforDataSet :
   public Component<documentation::ExforDataSet>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "ExforDataSet"; }
   static auto NODENAME() { return "exforDataSet"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("subentry") |
         std::string{}
            / Meta<>("retrievalDate") |

         // children
         --Child<std::optional<documentation::CovarianceScript>>
            ("covarianceScript") |
         --Child<std::optional<documentation::CorrectionScript>>
            ("correctionScript") |
         --Child<std::optional<documentation::Note>>
            ("note")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "subentry",
         "retrievalDate",
         "covarianceScript",
         "correctionScript",
         "note"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "subentry",
         "retrieval_date",
         "covariance_script",
         "correction_script",
         "note"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      subentry{this};
   Field<std::string>
      retrievalDate{this};

   // children
   Field<std::optional<documentation::CovarianceScript>>
      covarianceScript{this};
   Field<std::optional<documentation::CorrectionScript>>
      correctionScript{this};
   Field<std::optional<documentation::Note>>
      note{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->subentry, \
      this->retrievalDate, \
      this->covarianceScript, \
      this->correctionScript, \
      this->note \
   )

   // default
   ExforDataSet() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ExforDataSet(
      const wrapper<XMLName>
         &subentry,
      const wrapper<std::string>
         &retrievalDate = {},
      const wrapper<std::optional<documentation::CovarianceScript>>
         &covarianceScript = {},
      const wrapper<std::optional<documentation::CorrectionScript>>
         &correctionScript = {},
      const wrapper<std::optional<documentation::Note>>
         &note = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      subentry(this,subentry),
      retrievalDate(this,retrievalDate),
      covarianceScript(this,covarianceScript),
      correctionScript(this,correctionScript),
      note(this,note)
   {
      Component::finish();
   }

   // from node
   explicit ExforDataSet(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ExforDataSet(const ExforDataSet &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      subentry(this,other.subentry),
      retrievalDate(this,other.retrievalDate),
      covarianceScript(this,other.covarianceScript),
      correctionScript(this,other.correctionScript),
      note(this,other.note)
   {
      Component::finish(other);
   }

   // move
   ExforDataSet(ExforDataSet &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      subentry(this,std::move(other.subentry)),
      retrievalDate(this,std::move(other.retrievalDate)),
      covarianceScript(this,std::move(other.covarianceScript)),
      correctionScript(this,std::move(other.correctionScript)),
      note(this,std::move(other.note))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ExforDataSet &operator=(const ExforDataSet &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         subentry = other.subentry;
         retrievalDate = other.retrievalDate;
         covarianceScript = other.covarianceScript;
         correctionScript = other.correctionScript;
         note = other.note;
      }
      return *this;
   }

   // move
   ExforDataSet &operator=(ExforDataSet &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         subentry = std::move(other.subentry);
         retrievalDate = std::move(other.retrievalDate);
         covarianceScript = std::move(other.covarianceScript);
         correctionScript = std::move(other.correctionScript);
         note = std::move(other.note);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/ExforDataSet/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ExforDataSet

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
