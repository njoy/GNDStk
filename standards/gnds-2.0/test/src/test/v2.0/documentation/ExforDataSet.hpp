
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_EXFORDATASET
#define TEST_V2_0_DOCUMENTATION_EXFORDATASET

#include "test/v2.0/documentation/CovarianceScript.hpp"
#include "test/v2.0/documentation/CorrectionScript.hpp"
#include "test/v2.0/documentation/Note.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class ExforDataSet
// -----------------------------------------------------------------------------

class ExforDataSet :
   public Component<documentation::ExforDataSet>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "ExforDataSet"; }
   static auto FIELD() { return "exforDataSet"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("subentry") |
         std::string{}
            / Meta<>("retrievalDate") |

         // children
         --Child<std::optional<documentation::CovarianceScript>>("covarianceScript") |
         --Child<std::optional<documentation::CorrectionScript>>("correctionScript") |
         --Child<std::optional<documentation::Note>>("note")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName> subentry{this};
   Field<std::string> retrievalDate{this};

   // children
   Field<std::optional<documentation::CovarianceScript>> covarianceScript{this};
   Field<std::optional<documentation::CorrectionScript>> correctionScript{this};
   Field<std::optional<documentation::Note>> note{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->subentry, \
      this->retrievalDate, \
      this->covarianceScript, \
      this->correctionScript, \
      this->note)

   // default
   ExforDataSet() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ExforDataSet(
      const wrapper<XMLName> &subentry,
      const wrapper<std::string> &retrievalDate = {},
      const wrapper<std::optional<documentation::CovarianceScript>> &covarianceScript = {},
      const wrapper<std::optional<documentation::CorrectionScript>> &correctionScript = {},
      const wrapper<std::optional<documentation::Note>> &note = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      subentry(this,subentry),
      retrievalDate(this,retrievalDate),
      covarianceScript(this,covarianceScript),
      correctionScript(this,correctionScript),
      note(this,note)
   {
      Component::finish();
   }

   // from node
   explicit ExforDataSet(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ExforDataSet(const ExforDataSet &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      subentry(this,other.subentry),
      retrievalDate(this,other.retrievalDate),
      covarianceScript(this,other.covarianceScript),
      correctionScript(this,other.correctionScript),
      note(this,other.note)
   {
      Component::finish(other);
   }

   // move
   ExforDataSet(ExforDataSet &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      subentry(this,std::move(other.subentry)),
      retrievalDate(this,std::move(other.retrievalDate)),
      covarianceScript(this,std::move(other.covarianceScript)),
      correctionScript(this,std::move(other.correctionScript)),
      note(this,std::move(other.note))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ExforDataSet &operator=(const ExforDataSet &) = default;
   ExforDataSet &operator=(ExforDataSet &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/ExforDataSet/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ExforDataSet

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
