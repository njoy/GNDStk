
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_RELATEDITEM
#define TEST_V2_0_DOCUMENTATION_RELATEDITEM

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class RelatedItem
// -----------------------------------------------------------------------------

class RelatedItem :
   public Component<documentation::RelatedItem>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "RelatedItem"; }
   static auto FIELD() { return "relatedItem"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         UTF8Text{}
            / Meta<>("name") |
         std::optional<UTF8Text>{}
            / Meta<>("href") |
         std::optional<enums::RelationType>{}
            / Meta<>("relationType")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<UTF8Text> name{this};
   Field<std::optional<UTF8Text>> href{this};
   Field<std::optional<enums::RelationType>> relationType{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->name, \
      this->href, \
      this->relationType)

   // default
   RelatedItem() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit RelatedItem(
      const wrapper<UTF8Text> &name,
      const wrapper<std::optional<UTF8Text>> &href = {},
      const wrapper<std::optional<enums::RelationType>> &relationType = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      name(this,name),
      href(this,href),
      relationType(this,relationType)
   {
      Component::finish();
   }

   // from node
   explicit RelatedItem(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   RelatedItem(const RelatedItem &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      name(this,other.name),
      href(this,other.href),
      relationType(this,other.relationType)
   {
      Component::finish(other);
   }

   // move
   RelatedItem(RelatedItem &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      name(this,std::move(other.name)),
      href(this,std::move(other.href)),
      relationType(this,std::move(other.relationType))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   RelatedItem &operator=(const RelatedItem &) = default;
   RelatedItem &operator=(RelatedItem &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/RelatedItem/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class RelatedItem

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
