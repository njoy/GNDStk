
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_DOCUMENTATION
#define TEST_V2_0_DOCUMENTATION_DOCUMENTATION

#include "test/v2.0/documentation/Authors.hpp"
#include "test/v2.0/documentation/Contributors.hpp"
#include "test/v2.0/documentation/Collaborations.hpp"
#include "test/v2.0/documentation/Dates.hpp"
#include "test/v2.0/documentation/Copyright.hpp"
#include "test/v2.0/documentation/Acknowledgements.hpp"
#include "test/v2.0/documentation/Keywords.hpp"
#include "test/v2.0/documentation/RelatedItems.hpp"
#include "test/v2.0/documentation/Title.hpp"
#include "test/v2.0/documentation/Abstract.hpp"
#include "test/v2.0/documentation/Body.hpp"
#include "test/v2.0/documentation/ComputerCodes.hpp"
#include "test/v2.0/documentation/ExperimentalDataSets.hpp"
#include "test/v2.0/documentation/Bibliography.hpp"
#include "test/v2.0/documentation/EndfCompatible.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class Documentation
// -----------------------------------------------------------------------------

class Documentation : public Component<documentation::Documentation> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "Documentation"; }
   static auto FIELD() { return "documentation"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<UTF8Text>{}
            / Meta<>("doi") |
         std::optional<std::string>{}
            / Meta<>("publicationDate") |
         std::optional<UTF8Text>{}
            / Meta<>("version") |
         // children
         documentation::Authors{}
            / --Child<>("authors") |
         std::optional<documentation::Contributors>{}
            / --Child<>("contributors") |
         std::optional<documentation::Collaborations>{}
            / --Child<>("collaborations") |
         documentation::Dates{}
            / --Child<>("dates") |
         std::optional<documentation::Copyright>{}
            / --Child<>("copyright") |
         std::optional<documentation::Acknowledgements>{}
            / --Child<>("acknowledgements") |
         std::optional<documentation::Keywords>{}
            / --Child<>("keywords") |
         std::optional<documentation::RelatedItems>{}
            / --Child<>("relatedItems") |
         documentation::Title{}
            / --Child<>("title") |
         std::optional<documentation::Abstract>{}
            / --Child<>("abstract") |
         documentation::Body{}
            / --Child<>("body") |
         std::optional<documentation::ComputerCodes>{}
            / --Child<>("computerCodes") |
         std::optional<documentation::ExperimentalDataSets>{}
            / --Child<>("experimentalDataSets") |
         std::optional<documentation::Bibliography>{}
            / --Child<>("bibliography") |
         std::optional<documentation::EndfCompatible>{}
            / --Child<>("endfCompatible")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<UTF8Text>> doi{this};
   Field<std::optional<std::string>> publicationDate{this};
   Field<std::optional<UTF8Text>> version{this};

   // children
   Field<documentation::Authors> authors{this};
   Field<std::optional<documentation::Contributors>> contributors{this};
   Field<std::optional<documentation::Collaborations>> collaborations{this};
   Field<documentation::Dates> dates{this};
   Field<std::optional<documentation::Copyright>> copyright{this};
   Field<std::optional<documentation::Acknowledgements>> acknowledgements{this};
   Field<std::optional<documentation::Keywords>> keywords{this};
   Field<std::optional<documentation::RelatedItems>> relatedItems{this};
   Field<documentation::Title> title{this};
   Field<std::optional<documentation::Abstract>> abstract{this};
   Field<documentation::Body> body{this};
   Field<std::optional<documentation::ComputerCodes>> computerCodes{this};
   Field<std::optional<documentation::ExperimentalDataSets>> experimentalDataSets{this};
   Field<std::optional<documentation::Bibliography>> bibliography{this};
   Field<std::optional<documentation::EndfCompatible>> endfCompatible{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->doi, \
      this->publicationDate, \
      this->version, \
      this->authors, \
      this->contributors, \
      this->collaborations, \
      this->dates, \
      this->copyright, \
      this->acknowledgements, \
      this->keywords, \
      this->relatedItems, \
      this->title, \
      this->abstract, \
      this->body, \
      this->computerCodes, \
      this->experimentalDataSets, \
      this->bibliography, \
      this->endfCompatible)

   // default, and from fields
   explicit Documentation(
      const wrapper<std::optional<UTF8Text>> &doi = {},
      const wrapper<std::optional<std::string>> &publicationDate = {},
      const wrapper<std::optional<UTF8Text>> &version = {},
      const wrapper<documentation::Authors> &authors = {},
      const wrapper<std::optional<documentation::Contributors>> &contributors = {},
      const wrapper<std::optional<documentation::Collaborations>> &collaborations = {},
      const wrapper<documentation::Dates> &dates = {},
      const wrapper<std::optional<documentation::Copyright>> &copyright = {},
      const wrapper<std::optional<documentation::Acknowledgements>> &acknowledgements = {},
      const wrapper<std::optional<documentation::Keywords>> &keywords = {},
      const wrapper<std::optional<documentation::RelatedItems>> &relatedItems = {},
      const wrapper<documentation::Title> &title = {},
      const wrapper<std::optional<documentation::Abstract>> &abstract = {},
      const wrapper<documentation::Body> &body = {},
      const wrapper<std::optional<documentation::ComputerCodes>> &computerCodes = {},
      const wrapper<std::optional<documentation::ExperimentalDataSets>> &experimentalDataSets = {},
      const wrapper<std::optional<documentation::Bibliography>> &bibliography = {},
      const wrapper<std::optional<documentation::EndfCompatible>> &endfCompatible = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      doi(this,doi),
      publicationDate(this,publicationDate),
      version(this,version),
      authors(this,authors),
      contributors(this,contributors),
      collaborations(this,collaborations),
      dates(this,dates),
      copyright(this,copyright),
      acknowledgements(this,acknowledgements),
      keywords(this,keywords),
      relatedItems(this,relatedItems),
      title(this,title),
      abstract(this,abstract),
      body(this,body),
      computerCodes(this,computerCodes),
      experimentalDataSets(this,experimentalDataSets),
      bibliography(this,bibliography),
      endfCompatible(this,endfCompatible)
   {
      Component::finish();
   }

   // from node
   explicit Documentation(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Documentation(const Documentation &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Documentation(Documentation &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Documentation &operator=(const Documentation &) = default;
   Documentation &operator=(Documentation &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/Documentation/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Documentation

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
