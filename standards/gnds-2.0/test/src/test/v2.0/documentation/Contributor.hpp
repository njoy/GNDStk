
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_DOCUMENTATION_CONTRIBUTOR
#define TEST_V2_0_DOCUMENTATION_CONTRIBUTOR

#include "test/v2.0/documentation/Affiliations.hpp"
#include "test/v2.0/documentation/Note.hpp"

namespace test {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class Contributor
// -----------------------------------------------------------------------------

class Contributor :
   public Component<documentation::Contributor>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "Contributor"; }
   static auto NODENAME() { return "contributor"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         UTF8Text{}
            / Meta<>("name") |
         enums::ContributorType{}
            / Meta<>("contributorType") |
         std::optional<UTF8Text>{}
            / Meta<>("orcid") |
         std::optional<UTF8Text>{}
            / Meta<>("email") |

         // children
         --Child<std::optional<documentation::Affiliations>>
            ("affiliations") |
         --Child<std::optional<documentation::Note>>
            ("note")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "name",
         "contributorType",
         "orcid",
         "email",
         "affiliations",
         "note"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "name",
         "contributor_type",
         "orcid",
         "email",
         "affiliations",
         "note"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<UTF8Text>
      name{this};
   Field<enums::ContributorType>
      contributorType{this};
   Field<std::optional<UTF8Text>>
      orcid{this};
   Field<std::optional<UTF8Text>>
      email{this};

   // children
   Field<std::optional<documentation::Affiliations>>
      affiliations{this};
   Field<std::optional<documentation::Note>>
      note{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->name, \
      this->contributorType, \
      this->orcid, \
      this->email, \
      this->affiliations, \
      this->note \
   )

   // default
   Contributor() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Contributor(
      const wrapper<UTF8Text>
         &name,
      const wrapper<enums::ContributorType>
         &contributorType = {},
      const wrapper<std::optional<UTF8Text>>
         &orcid = {},
      const wrapper<std::optional<UTF8Text>>
         &email = {},
      const wrapper<std::optional<documentation::Affiliations>>
         &affiliations = {},
      const wrapper<std::optional<documentation::Note>>
         &note = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      name(this,name),
      contributorType(this,contributorType),
      orcid(this,orcid),
      email(this,email),
      affiliations(this,affiliations),
      note(this,note)
   {
      Component::finish();
   }

   // from node
   explicit Contributor(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Contributor(const Contributor &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      name(this,other.name),
      contributorType(this,other.contributorType),
      orcid(this,other.orcid),
      email(this,other.email),
      affiliations(this,other.affiliations),
      note(this,other.note)
   {
      Component::finish(other);
   }

   // move
   Contributor(Contributor &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      name(this,std::move(other.name)),
      contributorType(this,std::move(other.contributorType)),
      orcid(this,std::move(other.orcid)),
      email(this,std::move(other.email)),
      affiliations(this,std::move(other.affiliations)),
      note(this,std::move(other.note))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Contributor &operator=(const Contributor &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         name = other.name;
         contributorType = other.contributorType;
         orcid = other.orcid;
         email = other.email;
         affiliations = other.affiliations;
         note = other.note;
      }
      return *this;
   }

   // move
   Contributor &operator=(Contributor &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         name = std::move(other.name);
         contributorType = std::move(other.contributorType);
         orcid = std::move(other.orcid);
         email = std::move(other.email);
         affiliations = std::move(other.affiliations);
         note = std::move(other.note);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/documentation/Contributor/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Contributor

} // namespace documentation
} // namespace v2_0
} // namespace test

#endif
