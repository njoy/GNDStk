
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_MULTIPLICITYSUM
#define TEST_V2_0_TRANSPORT_MULTIPLICITYSUM

#include "test/v2.0/transport/Multiplicity.hpp"
#include "test/v2.0/transport/Summands.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class MultiplicitySum
// -----------------------------------------------------------------------------

class MultiplicitySum : public Component<transport::MultiplicitySum> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "MultiplicitySum"; }
   static auto FIELD() { return "multiplicitySum"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<Integer32>{}
            / Meta<>("ENDF_MT") |
         XMLName{}
            / Meta<>("label") |
         // children
         transport::Multiplicity{}
            / --Child<>("multiplicity") |
         transport::Summands{}
            / --Child<>("summands")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<Integer32>> ENDF_MT{this};
   Field<XMLName> label{this};

   // children
   Field<transport::Multiplicity> multiplicity{this};
   Field<transport::Summands> summands{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->ENDF_MT, \
      this->label, \
      this->multiplicity, \
      this->summands)

   // default, and from fields
   explicit MultiplicitySum(
      const wrapper<std::optional<Integer32>> &ENDF_MT = {},
      const wrapper<XMLName> &label = {},
      const wrapper<transport::Multiplicity> &multiplicity = {},
      const wrapper<transport::Summands> &summands = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MT(this,ENDF_MT),
      label(this,label),
      multiplicity(this,multiplicity),
      summands(this,summands)
   {
      Component::finish();
   }

   // from node
   explicit MultiplicitySum(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   MultiplicitySum(const MultiplicitySum &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   MultiplicitySum(MultiplicitySum &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   MultiplicitySum &operator=(const MultiplicitySum &) = default;
   MultiplicitySum &operator=(MultiplicitySum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/MultiplicitySum/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class MultiplicitySum

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
