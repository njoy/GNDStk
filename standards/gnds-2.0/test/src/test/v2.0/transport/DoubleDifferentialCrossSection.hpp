
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_DOUBLEDIFFERENTIALCROSSSECTION
#define TEST_V2_0_TRANSPORT_DOUBLEDIFFERENTIALCROSSSECTION

#include "test/v2.0/containers/Regions3d.hpp"
#include "test/v2.0/containers/XYs3d.hpp"
#include "test/v2.0/cpTransport/CoulombPlusNuclearElastic.hpp"
#include "test/v2.0/transport/Reference.hpp"
#include "test/v2.0/atomic/CoherentPhotonScattering.hpp"
#include "test/v2.0/atomic/IncoherentPhotonScattering.hpp"
#include "test/v2.0/tsl/ThermalNeutronScatteringLaw_coherentElastic.hpp"
#include "test/v2.0/tsl/ThermalNeutronScatteringLaw_incoherentElastic.hpp"
#include "test/v2.0/tsl/ThermalNeutronScatteringLaw_incoherentInelastic.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class DoubleDifferentialCrossSection
// -----------------------------------------------------------------------------

class DoubleDifferentialCrossSection :
   public Component<transport::DoubleDifferentialCrossSection>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "DoubleDifferentialCrossSection"; }
   static auto FIELD() { return "doubleDifferentialCrossSection"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<containers::Regions3d>>("regions3d") |
         --Child<std::optional<containers::XYs3d>>("XYs3d") |
         --Child<std::optional<cpTransport::CoulombPlusNuclearElastic>>("CoulombPlusNuclearElastic") |
         --Child<std::optional<transport::Reference>>("reference") |
         --Child<std::optional<atomic::CoherentPhotonScattering>>("coherentPhotonScattering") |
         --Child<std::optional<atomic::IncoherentPhotonScattering>>("incoherentPhotonScattering") |
         --Child<std::optional<tsl::ThermalNeutronScatteringLaw_coherentElastic>>("thermalNeutronScatteringLaw_coherentElastic") |
         --Child<std::optional<tsl::ThermalNeutronScatteringLaw_incoherentElastic>>("thermalNeutronScatteringLaw_incoherentElastic") |
         --Child<std::optional<tsl::ThermalNeutronScatteringLaw_incoherentInelastic>>("thermalNeutronScatteringLaw_incoherentInelastic")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<containers::Regions3d>> regions3d{this};
   Field<std::optional<containers::XYs3d>> XYs3d{this};
   Field<std::optional<cpTransport::CoulombPlusNuclearElastic>> CoulombPlusNuclearElastic{this};
   Field<std::optional<transport::Reference>> reference{this};
   Field<std::optional<atomic::CoherentPhotonScattering>> coherentPhotonScattering{this};
   Field<std::optional<atomic::IncoherentPhotonScattering>> incoherentPhotonScattering{this};
   Field<std::optional<tsl::ThermalNeutronScatteringLaw_coherentElastic>> thermalNeutronScatteringLaw_coherentElastic{this};
   Field<std::optional<tsl::ThermalNeutronScatteringLaw_incoherentElastic>> thermalNeutronScatteringLaw_incoherentElastic{this};
   Field<std::optional<tsl::ThermalNeutronScatteringLaw_incoherentInelastic>> thermalNeutronScatteringLaw_incoherentInelastic{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->regions3d, \
      this->XYs3d, \
      this->CoulombPlusNuclearElastic, \
      this->reference, \
      this->coherentPhotonScattering, \
      this->incoherentPhotonScattering, \
      this->thermalNeutronScatteringLaw_coherentElastic, \
      this->thermalNeutronScatteringLaw_incoherentElastic, \
      this->thermalNeutronScatteringLaw_incoherentInelastic)

   // default
   DoubleDifferentialCrossSection() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit DoubleDifferentialCrossSection(
      const wrapper<std::optional<containers::Regions3d>> &regions3d,
      const wrapper<std::optional<containers::XYs3d>> &XYs3d = {},
      const wrapper<std::optional<cpTransport::CoulombPlusNuclearElastic>> &CoulombPlusNuclearElastic = {},
      const wrapper<std::optional<transport::Reference>> &reference = {},
      const wrapper<std::optional<atomic::CoherentPhotonScattering>> &coherentPhotonScattering = {},
      const wrapper<std::optional<atomic::IncoherentPhotonScattering>> &incoherentPhotonScattering = {},
      const wrapper<std::optional<tsl::ThermalNeutronScatteringLaw_coherentElastic>> &thermalNeutronScatteringLaw_coherentElastic = {},
      const wrapper<std::optional<tsl::ThermalNeutronScatteringLaw_incoherentElastic>> &thermalNeutronScatteringLaw_incoherentElastic = {},
      const wrapper<std::optional<tsl::ThermalNeutronScatteringLaw_incoherentInelastic>> &thermalNeutronScatteringLaw_incoherentInelastic = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      regions3d(this,regions3d),
      XYs3d(this,XYs3d),
      CoulombPlusNuclearElastic(this,CoulombPlusNuclearElastic),
      reference(this,reference),
      coherentPhotonScattering(this,coherentPhotonScattering),
      incoherentPhotonScattering(this,incoherentPhotonScattering),
      thermalNeutronScatteringLaw_coherentElastic(this,thermalNeutronScatteringLaw_coherentElastic),
      thermalNeutronScatteringLaw_incoherentElastic(this,thermalNeutronScatteringLaw_incoherentElastic),
      thermalNeutronScatteringLaw_incoherentInelastic(this,thermalNeutronScatteringLaw_incoherentInelastic)
   {
      Component::finish();
   }

   // from node
   explicit DoubleDifferentialCrossSection(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   DoubleDifferentialCrossSection(const DoubleDifferentialCrossSection &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      regions3d(this,other.regions3d),
      XYs3d(this,other.XYs3d),
      CoulombPlusNuclearElastic(this,other.CoulombPlusNuclearElastic),
      reference(this,other.reference),
      coherentPhotonScattering(this,other.coherentPhotonScattering),
      incoherentPhotonScattering(this,other.incoherentPhotonScattering),
      thermalNeutronScatteringLaw_coherentElastic(this,other.thermalNeutronScatteringLaw_coherentElastic),
      thermalNeutronScatteringLaw_incoherentElastic(this,other.thermalNeutronScatteringLaw_incoherentElastic),
      thermalNeutronScatteringLaw_incoherentInelastic(this,other.thermalNeutronScatteringLaw_incoherentInelastic)
   {
      Component::finish(other);
   }

   // move
   DoubleDifferentialCrossSection(DoubleDifferentialCrossSection &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      regions3d(this,std::move(other.regions3d)),
      XYs3d(this,std::move(other.XYs3d)),
      CoulombPlusNuclearElastic(this,std::move(other.CoulombPlusNuclearElastic)),
      reference(this,std::move(other.reference)),
      coherentPhotonScattering(this,std::move(other.coherentPhotonScattering)),
      incoherentPhotonScattering(this,std::move(other.incoherentPhotonScattering)),
      thermalNeutronScatteringLaw_coherentElastic(this,std::move(other.thermalNeutronScatteringLaw_coherentElastic)),
      thermalNeutronScatteringLaw_incoherentElastic(this,std::move(other.thermalNeutronScatteringLaw_incoherentElastic)),
      thermalNeutronScatteringLaw_incoherentInelastic(this,std::move(other.thermalNeutronScatteringLaw_incoherentInelastic))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   DoubleDifferentialCrossSection &operator=(const DoubleDifferentialCrossSection &) = default;
   DoubleDifferentialCrossSection &operator=(DoubleDifferentialCrossSection &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/DoubleDifferentialCrossSection/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class DoubleDifferentialCrossSection

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
