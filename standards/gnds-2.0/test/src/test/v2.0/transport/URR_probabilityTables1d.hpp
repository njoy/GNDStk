
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_URR_PROBABILITYTABLES1D
#define TEST_V2_0_TRANSPORT_URR_PROBABILITYTABLES1D

#include "test/v2.0/containers/XYs2d.hpp"
#include "test/v2.0/containers/Regions2d.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class URR_probabilityTables1d
// -----------------------------------------------------------------------------

class URR_probabilityTables1d :
   public Component<transport::URR_probabilityTables1d>
{
   friend class Component;

   using _t = std::variant<
      containers::XYs2d,
      containers::Regions2d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "URR_probabilityTables1d"; }
   static auto FIELD() { return "URR_probabilityTables1d"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |

         // children
         _t{}
            / --(Child<>("XYs2d") || Child<>("regions2d"))
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName> label{this};

   // children - variant
   Field<_t> _XYs2dregions2d{this};
   FieldPart<decltype(_XYs2dregions2d),containers::XYs2d> XYs2d{_XYs2dregions2d};
   FieldPart<decltype(_XYs2dregions2d),containers::Regions2d> regions2d{_XYs2dregions2d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->label, \
      this->_XYs2dregions2d)

   // default
   URR_probabilityTables1d() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit URR_probabilityTables1d(
      const wrapper<XMLName> &label,
      const wrapper<_t> &_XYs2dregions2d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      _XYs2dregions2d(this,_XYs2dregions2d)
   {
      Component::finish();
   }

   // from node
   explicit URR_probabilityTables1d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   URR_probabilityTables1d(const URR_probabilityTables1d &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      _XYs2dregions2d(this,other._XYs2dregions2d)
   {
      Component::finish(other);
   }

   // move
   URR_probabilityTables1d(URR_probabilityTables1d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      _XYs2dregions2d(this,std::move(other._XYs2dregions2d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   URR_probabilityTables1d &operator=(const URR_probabilityTables1d &) = default;
   URR_probabilityTables1d &operator=(URR_probabilityTables1d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/URR_probabilityTables1d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class URR_probabilityTables1d

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
