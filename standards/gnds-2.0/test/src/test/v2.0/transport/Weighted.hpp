
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_WEIGHTED
#define TEST_V2_0_TRANSPORT_WEIGHTED

#include "test/v2.0/containers/XYs1d.hpp"
#include "test/v2.0/containers/XYs2d.hpp"
#include "test/v2.0/transport/Evaporation.hpp"
#include "test/v2.0/transport/GeneralEvaporation.hpp"
#include "test/v2.0/fissionTransport/SimpleMaxwellianFission.hpp"
#include "test/v2.0/fissionTransport/Watt.hpp"
#include "test/v2.0/fissionTransport/MadlandNix.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Weighted
// -----------------------------------------------------------------------------

class Weighted : public Component<transport::Weighted> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Weighted"; }
   static auto FIELD() { return "weighted"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         containers::XYs1d{}
            / --Child<>("XYs1d") |
         std::optional<containers::XYs2d>{}
            / --Child<>("XYs2d") |
         std::optional<transport::Evaporation>{}
            / --Child<>("evaporation") |
         std::optional<transport::GeneralEvaporation>{}
            / --Child<>("generalEvaporation") |
         std::optional<fissionTransport::SimpleMaxwellianFission>{}
            / --Child<>("simpleMaxwellianFission") |
         std::optional<fissionTransport::Watt>{}
            / --Child<>("Watt") |
         std::optional<fissionTransport::MadlandNix>{}
            / --Child<>("MadlandNix")
      ;
   }

public:
   using Component::construct;

   // children
   Field<containers::XYs1d> XYs1d{this};
   Field<std::optional<containers::XYs2d>> XYs2d{this};
   Field<std::optional<transport::Evaporation>> evaporation{this};
   Field<std::optional<transport::GeneralEvaporation>> generalEvaporation{this};
   Field<std::optional<fissionTransport::SimpleMaxwellianFission>> simpleMaxwellianFission{this};
   Field<std::optional<fissionTransport::Watt>> Watt{this};
   Field<std::optional<fissionTransport::MadlandNix>> MadlandNix{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->XYs1d, \
      this->XYs2d, \
      this->evaporation, \
      this->generalEvaporation, \
      this->simpleMaxwellianFission, \
      this->Watt, \
      this->MadlandNix)

   // default, and from fields
   explicit Weighted(
      const wrapper<containers::XYs1d> &XYs1d = {},
      const wrapper<std::optional<containers::XYs2d>> &XYs2d = {},
      const wrapper<std::optional<transport::Evaporation>> &evaporation = {},
      const wrapper<std::optional<transport::GeneralEvaporation>> &generalEvaporation = {},
      const wrapper<std::optional<fissionTransport::SimpleMaxwellianFission>> &simpleMaxwellianFission = {},
      const wrapper<std::optional<fissionTransport::Watt>> &Watt = {},
      const wrapper<std::optional<fissionTransport::MadlandNix>> &MadlandNix = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs1d(this,XYs1d),
      XYs2d(this,XYs2d),
      evaporation(this,evaporation),
      generalEvaporation(this,generalEvaporation),
      simpleMaxwellianFission(this,simpleMaxwellianFission),
      Watt(this,Watt),
      MadlandNix(this,MadlandNix)
   {
      Component::finish();
   }

   // from node
   explicit Weighted(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Weighted(const Weighted &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Weighted(Weighted &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Weighted &operator=(const Weighted &) = default;
   Weighted &operator=(Weighted &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/Weighted/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Weighted

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
