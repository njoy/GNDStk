
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_WEIGHTED
#define TEST_V2_0_TRANSPORT_WEIGHTED

#include "test/v2.0/containers/XYs1d.hpp"
#include "test/v2.0/containers/XYs2d.hpp"
#include "test/v2.0/transport/Evaporation.hpp"
#include "test/v2.0/transport/GeneralEvaporation.hpp"
#include "test/v2.0/fissionTransport/SimpleMaxwellianFission.hpp"
#include "test/v2.0/fissionTransport/Watt.hpp"
#include "test/v2.0/fissionTransport/MadlandNix.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Weighted
// -----------------------------------------------------------------------------

class Weighted :
   public Component<transport::Weighted>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Weighted"; }
   static auto NODENAME() { return "weighted"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<containers::XYs1d>
            ("XYs1d") |
         --Child<std::optional<containers::XYs2d>>
            ("XYs2d") |
         --Child<std::optional<transport::Evaporation>>
            ("evaporation") |
         --Child<std::optional<transport::GeneralEvaporation>>
            ("generalEvaporation") |
         --Child<std::optional<fissionTransport::SimpleMaxwellianFission>>
            ("simpleMaxwellianFission") |
         --Child<std::optional<fissionTransport::Watt>>
            ("Watt") |
         --Child<std::optional<fissionTransport::MadlandNix>>
            ("MadlandNix")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "XYs1d",
         "XYs2d",
         "evaporation",
         "generalEvaporation",
         "simpleMaxwellianFission",
         "Watt",
         "MadlandNix"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "xys1d",
         "xys2d",
         "evaporation",
         "general_evaporation",
         "simple_maxwellian_fission",
         "watt",
         "madland_nix"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<containers::XYs1d>
      XYs1d{this};
   Field<std::optional<containers::XYs2d>>
      XYs2d{this};
   Field<std::optional<transport::Evaporation>>
      evaporation{this};
   Field<std::optional<transport::GeneralEvaporation>>
      generalEvaporation{this};
   Field<std::optional<fissionTransport::SimpleMaxwellianFission>>
      simpleMaxwellianFission{this};
   Field<std::optional<fissionTransport::Watt>>
      Watt{this};
   Field<std::optional<fissionTransport::MadlandNix>>
      MadlandNix{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(XYs1d(),values);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->XYs1d, \
      this->XYs2d, \
      this->evaporation, \
      this->generalEvaporation, \
      this->simpleMaxwellianFission, \
      this->Watt, \
      this->MadlandNix \
   )

   // default
   Weighted() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Weighted(
      const wrapper<containers::XYs1d>
         &XYs1d,
      const wrapper<std::optional<containers::XYs2d>>
         &XYs2d = {},
      const wrapper<std::optional<transport::Evaporation>>
         &evaporation = {},
      const wrapper<std::optional<transport::GeneralEvaporation>>
         &generalEvaporation = {},
      const wrapper<std::optional<fissionTransport::SimpleMaxwellianFission>>
         &simpleMaxwellianFission = {},
      const wrapper<std::optional<fissionTransport::Watt>>
         &Watt = {},
      const wrapper<std::optional<fissionTransport::MadlandNix>>
         &MadlandNix = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs1d(this,XYs1d),
      XYs2d(this,XYs2d),
      evaporation(this,evaporation),
      generalEvaporation(this,generalEvaporation),
      simpleMaxwellianFission(this,simpleMaxwellianFission),
      Watt(this,Watt),
      MadlandNix(this,MadlandNix)
   {
      Component::finish();
   }

   // from node
   explicit Weighted(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Weighted(const Weighted &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      XYs1d(this,other.XYs1d),
      XYs2d(this,other.XYs2d),
      evaporation(this,other.evaporation),
      generalEvaporation(this,other.generalEvaporation),
      simpleMaxwellianFission(this,other.simpleMaxwellianFission),
      Watt(this,other.Watt),
      MadlandNix(this,other.MadlandNix)
   {
      Component::finish(other);
   }

   // move
   Weighted(Weighted &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      XYs1d(this,std::move(other.XYs1d)),
      XYs2d(this,std::move(other.XYs2d)),
      evaporation(this,std::move(other.evaporation)),
      generalEvaporation(this,std::move(other.generalEvaporation)),
      simpleMaxwellianFission(this,std::move(other.simpleMaxwellianFission)),
      Watt(this,std::move(other.Watt)),
      MadlandNix(this,std::move(other.MadlandNix))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Weighted &operator=(const Weighted &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         XYs1d = other.XYs1d;
         XYs2d = other.XYs2d;
         evaporation = other.evaporation;
         generalEvaporation = other.generalEvaporation;
         simpleMaxwellianFission = other.simpleMaxwellianFission;
         Watt = other.Watt;
         MadlandNix = other.MadlandNix;
      }
      return *this;
   }

   // move
   Weighted &operator=(Weighted &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         XYs1d = std::move(other.XYs1d);
         XYs2d = std::move(other.XYs2d);
         evaporation = std::move(other.evaporation);
         generalEvaporation = std::move(other.generalEvaporation);
         simpleMaxwellianFission = std::move(other.simpleMaxwellianFission);
         Watt = std::move(other.Watt);
         MadlandNix = std::move(other.MadlandNix);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/Weighted/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Weighted

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
