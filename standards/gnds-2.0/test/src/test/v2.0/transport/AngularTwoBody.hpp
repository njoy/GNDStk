
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_ANGULARTWOBODY
#define TEST_V2_0_TRANSPORT_ANGULARTWOBODY

#include "test/v2.0/containers/XYs2d.hpp"
#include "test/v2.0/containers/Regions2d.hpp"
#include "test/v2.0/transport/Isotropic2d.hpp"
#include "test/v2.0/transport/Recoil.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class AngularTwoBody
// -----------------------------------------------------------------------------

class AngularTwoBody : public Component<transport::AngularTwoBody> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "AngularTwoBody"; }
   static auto FIELD() { return "angularTwoBody"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         XMLName{}
            / Meta<>("productFrame") |
         // children
         --Child<std::optional<containers::XYs2d>>("XYs2d") |
         --Child<std::optional<containers::Regions2d>>("regions2d") |
         --Child<std::optional<transport::Isotropic2d>>("isotropic2d") |
         --Child<std::optional<transport::Recoil>>("recoil")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> label{this};
   Field<XMLName> productFrame{this};

   // children
   Field<std::optional<containers::XYs2d>> XYs2d{this};
   Field<std::optional<containers::Regions2d>> regions2d{this};
   Field<std::optional<transport::Isotropic2d>> isotropic2d{this};
   Field<std::optional<transport::Recoil>> recoil{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->productFrame, \
      this->XYs2d, \
      this->regions2d, \
      this->isotropic2d, \
      this->recoil)

   // default
   AngularTwoBody() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit AngularTwoBody(
      const wrapper<std::optional<XMLName>> &label,
      const wrapper<XMLName> &productFrame = {},
      const wrapper<std::optional<containers::XYs2d>> &XYs2d = {},
      const wrapper<std::optional<containers::Regions2d>> &regions2d = {},
      const wrapper<std::optional<transport::Isotropic2d>> &isotropic2d = {},
      const wrapper<std::optional<transport::Recoil>> &recoil = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      productFrame(this,productFrame),
      XYs2d(this,XYs2d),
      regions2d(this,regions2d),
      isotropic2d(this,isotropic2d),
      recoil(this,recoil)
   {
      Component::finish();
   }

   // from node
   explicit AngularTwoBody(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   AngularTwoBody(const AngularTwoBody &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      label(this,other.label),
      productFrame(this,other.productFrame),
      XYs2d(this,other.XYs2d),
      regions2d(this,other.regions2d),
      isotropic2d(this,other.isotropic2d),
      recoil(this,other.recoil)
   {
      Component::finish(other);
   }

   // move
   AngularTwoBody(AngularTwoBody &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      label(this,std::move(other.label)),
      productFrame(this,std::move(other.productFrame)),
      XYs2d(this,std::move(other.XYs2d)),
      regions2d(this,std::move(other.regions2d)),
      isotropic2d(this,std::move(other.isotropic2d)),
      recoil(this,std::move(other.recoil))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   AngularTwoBody &operator=(const AngularTwoBody &) = default;
   AngularTwoBody &operator=(AngularTwoBody &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/AngularTwoBody/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class AngularTwoBody

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
