
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_DISCRETEGAMMA
#define TEST_V2_0_TRANSPORT_DISCRETEGAMMA

#include "test/v2.0/containers/Axes.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class DiscreteGamma
// -----------------------------------------------------------------------------

class DiscreteGamma :
   public Component<transport::DiscreteGamma>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "DiscreteGamma"; }
   static auto FIELD() { return "discreteGamma"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<Float64>{}
            / Meta<>("domainMax") |
         std::optional<Float64>{}
            / Meta<>("domainMin") |
         std::optional<Float64>{}
            / Meta<>("value") |

         // children
         --Child<std::optional<containers::Axes>>("axes")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<Float64>> domainMax{this};
   Field<std::optional<Float64>> domainMin{this};
   Field<std::optional<Float64>> value{this};

   // children
   Field<std::optional<containers::Axes>> axes{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->domainMax, \
      this->domainMin, \
      this->value, \
      this->axes)

   // default
   DiscreteGamma() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit DiscreteGamma(
      const wrapper<std::optional<Float64>> &domainMax,
      const wrapper<std::optional<Float64>> &domainMin = {},
      const wrapper<std::optional<Float64>> &value = {},
      const wrapper<std::optional<containers::Axes>> &axes = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      domainMax(this,domainMax),
      domainMin(this,domainMin),
      value(this,value),
      axes(this,axes)
   {
      Component::finish();
   }

   // from node
   explicit DiscreteGamma(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   DiscreteGamma(const DiscreteGamma &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      domainMax(this,other.domainMax),
      domainMin(this,other.domainMin),
      value(this,other.value),
      axes(this,other.axes)
   {
      Component::finish(other);
   }

   // move
   DiscreteGamma(DiscreteGamma &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      domainMax(this,std::move(other.domainMax)),
      domainMin(this,std::move(other.domainMin)),
      value(this,std::move(other.value)),
      axes(this,std::move(other.axes))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   DiscreteGamma &operator=(const DiscreteGamma &) = default;
   DiscreteGamma &operator=(DiscreteGamma &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/DiscreteGamma/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class DiscreteGamma

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
