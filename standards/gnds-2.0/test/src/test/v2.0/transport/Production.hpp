
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_PRODUCTION
#define TEST_V2_0_TRANSPORT_PRODUCTION

#include "test/v2.0/transport/CrossSection.hpp"
#include "test/v2.0/transport/OutputChannel.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Production
// -----------------------------------------------------------------------------

class Production : public Component<transport::Production> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Production"; }
   static auto FIELD() { return "production"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<Integer32>{}
            / Meta<>("ENDF_MT") |
         std::optional<XMLName>{}
            / Meta<>("label") |
         // children
         std::optional<transport::CrossSection>{}
            / --Child<>("crossSection") |
         std::optional<transport::OutputChannel>{}
            / --Child<>("outputChannel")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<Integer32>> ENDF_MT{this};
   Field<std::optional<XMLName>> label{this};

   // children
   Field<std::optional<transport::CrossSection>> crossSection{this};
   Field<std::optional<transport::OutputChannel>> outputChannel{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->ENDF_MT, \
      this->label, \
      this->crossSection, \
      this->outputChannel)

   // default, and from fields
   explicit Production(
      const wrapper<std::optional<Integer32>> &ENDF_MT = {},
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<transport::CrossSection>> &crossSection = {},
      const wrapper<std::optional<transport::OutputChannel>> &outputChannel = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MT(this,ENDF_MT),
      label(this,label),
      crossSection(this,crossSection),
      outputChannel(this,outputChannel)
   {
      Component::finish();
   }

   // from node
   explicit Production(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Production(const Production &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Production(Production &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Production &operator=(const Production &) = default;
   Production &operator=(Production &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/Production/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Production

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
