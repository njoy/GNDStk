
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_REACTION
#define TEST_V2_0_TRANSPORT_REACTION

#include "test/v2.0/transport/DoubleDifferentialCrossSection.hpp"
#include "test/v2.0/transport/CrossSection.hpp"
#include "test/v2.0/transport/OutputChannel.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Reaction
// -----------------------------------------------------------------------------

class Reaction : public Component<transport::Reaction> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Reaction"; }
   static auto FIELD() { return "reaction"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("ENDF_MT") |
         std::optional<XMLName>{}
            / Meta<>("fissionGenre") |
         XMLName{}
            / Meta<>("label") |
         // children
         --Child<std::optional<transport::DoubleDifferentialCrossSection>>("doubleDifferentialCrossSection") |
         --Child<transport::CrossSection>("crossSection") |
         --Child<transport::OutputChannel>("outputChannel")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<Integer32> ENDF_MT{this};
   Field<std::optional<XMLName>> fissionGenre{this};
   Field<XMLName> label{this};

   // children
   Field<std::optional<transport::DoubleDifferentialCrossSection>> doubleDifferentialCrossSection{this};
   Field<transport::CrossSection> crossSection{this};
   Field<transport::OutputChannel> outputChannel{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->ENDF_MT, \
      this->fissionGenre, \
      this->label, \
      this->doubleDifferentialCrossSection, \
      this->crossSection, \
      this->outputChannel)

   // default
   Reaction() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Reaction(
      const wrapper<Integer32> &ENDF_MT,
      const wrapper<std::optional<XMLName>> &fissionGenre = {},
      const wrapper<XMLName> &label = {},
      const wrapper<std::optional<transport::DoubleDifferentialCrossSection>> &doubleDifferentialCrossSection = {},
      const wrapper<transport::CrossSection> &crossSection = {},
      const wrapper<transport::OutputChannel> &outputChannel = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MT(this,ENDF_MT),
      fissionGenre(this,fissionGenre),
      label(this,label),
      doubleDifferentialCrossSection(this,doubleDifferentialCrossSection),
      crossSection(this,crossSection),
      outputChannel(this,outputChannel)
   {
      Component::finish();
   }

   // from node
   explicit Reaction(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Reaction(const Reaction &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      ENDF_MT(this,other.ENDF_MT),
      fissionGenre(this,other.fissionGenre),
      label(this,other.label),
      doubleDifferentialCrossSection(this,other.doubleDifferentialCrossSection),
      crossSection(this,other.crossSection),
      outputChannel(this,other.outputChannel)
   {
      Component::finish(other);
   }

   // move
   Reaction(Reaction &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      ENDF_MT(this,std::move(other.ENDF_MT)),
      fissionGenre(this,std::move(other.fissionGenre)),
      label(this,std::move(other.label)),
      doubleDifferentialCrossSection(this,std::move(other.doubleDifferentialCrossSection)),
      crossSection(this,std::move(other.crossSection)),
      outputChannel(this,std::move(other.outputChannel))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Reaction &operator=(const Reaction &) = default;
   Reaction &operator=(Reaction &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/Reaction/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Reaction

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
