
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_GENERALEVAPORATION
#define TEST_V2_0_TRANSPORT_GENERALEVAPORATION

#include "test/v2.0/transport/U.hpp"
#include "test/v2.0/transport/G.hpp"
#include "test/v2.0/transport/Theta.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class GeneralEvaporation
// -----------------------------------------------------------------------------

class GeneralEvaporation :
   public Component<transport::GeneralEvaporation>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "GeneralEvaporation"; }
   static auto NODENAME() { return "generalEvaporation"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<transport::U>>
            ("U") |
         --Child<std::optional<transport::G>>
            ("g") |
         --Child<std::optional<transport::Theta>>
            ("theta")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "U",
         "g",
         "theta"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "u",
         "g",
         "theta"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<transport::U>>
      U{this};
   Field<std::optional<transport::G>>
      g{this};
   Field<std::optional<transport::Theta>>
      theta{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->U, \
      this->g, \
      this->theta \
   )

   // default
   GeneralEvaporation() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit GeneralEvaporation(
      const wrapper<std::optional<transport::U>>
         &U,
      const wrapper<std::optional<transport::G>>
         &g = {},
      const wrapper<std::optional<transport::Theta>>
         &theta = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      U(this,U),
      g(this,g),
      theta(this,theta)
   {
      Component::finish();
   }

   // from node
   explicit GeneralEvaporation(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   GeneralEvaporation(const GeneralEvaporation &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      U(this,other.U),
      g(this,other.g),
      theta(this,other.theta)
   {
      Component::finish(other);
   }

   // move
   GeneralEvaporation(GeneralEvaporation &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      U(this,std::move(other.U)),
      g(this,std::move(other.g)),
      theta(this,std::move(other.theta))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   GeneralEvaporation &operator=(const GeneralEvaporation &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         U = other.U;
         g = other.g;
         theta = other.theta;
      }
      return *this;
   }

   // move
   GeneralEvaporation &operator=(GeneralEvaporation &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         U = std::move(other.U);
         g = std::move(other.g);
         theta = std::move(other.theta);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/GeneralEvaporation/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class GeneralEvaporation

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
