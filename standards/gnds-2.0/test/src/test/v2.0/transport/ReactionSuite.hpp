
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_REACTIONSUITE
#define TEST_V2_0_TRANSPORT_REACTIONSUITE

#include "test/v2.0/common/ExternalFiles.hpp"
#include "test/v2.0/styles/Styles.hpp"
#include "test/v2.0/pops/PoPs_database.hpp"
#include "test/v2.0/resonances/Resonances.hpp"
#include "test/v2.0/transport/Reactions.hpp"
#include "test/v2.0/transport/OrphanProducts.hpp"
#include "test/v2.0/transport/Sums.hpp"
#include "test/v2.0/fissionTransport/FissionComponents.hpp"
#include "test/v2.0/transport/Productions.hpp"
#include "test/v2.0/transport/IncompleteReactions.hpp"
#include "test/v2.0/appData/ApplicationData.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class ReactionSuite
// -----------------------------------------------------------------------------

class ReactionSuite :
   public Component<transport::ReactionSuite>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "ReactionSuite"; }
   static auto NODENAME() { return "reactionSuite"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("evaluation") |
         XMLName{}
            / Meta<>("format") |
         XMLName{}
            / Meta<>("projectile") |
         enums::Frame{}
            / Meta<>("projectileFrame") |
         XMLName{}
            / Meta<>("target") |
         enums::Interaction{}
            / Meta<>("interaction") |

         // children
         --Child<std::optional<common::ExternalFiles>>
            ("externalFiles") |
         --Child<styles::Styles>
            ("styles") |
         --Child<pops::PoPs_database>
            ("PoPs") |
         --Child<std::optional<resonances::Resonances>>
            ("resonances") |
         --Child<std::optional<transport::Reactions>>
            ("reactions") |
         --Child<std::optional<transport::OrphanProducts>>
            ("orphanProducts") |
         --Child<std::optional<transport::Sums>>
            ("sums") |
         --Child<std::optional<fissionTransport::FissionComponents>>
            ("fissionComponents") |
         --Child<std::optional<transport::Productions>>
            ("productions") |
         --Child<std::optional<transport::IncompleteReactions>>
            ("incompleteReactions") |
         --Child<std::optional<appData::ApplicationData>>
            ("applicationData")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "evaluation",
         "format",
         "projectile",
         "projectileFrame",
         "target",
         "interaction",
         "externalFiles",
         "styles",
         "PoPs_database",
         "resonances",
         "reactions",
         "orphanProducts",
         "sums",
         "fissionComponents",
         "productions",
         "incompleteReactions",
         "applicationData"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "evaluation",
         "format",
         "projectile",
         "projectile_frame",
         "target",
         "interaction",
         "external_files",
         "styles",
         "po_ps_database",
         "resonances",
         "reactions",
         "orphan_products",
         "sums",
         "fission_components",
         "productions",
         "incomplete_reactions",
         "application_data"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      evaluation{this};
   Field<XMLName>
      format{this};
   Field<XMLName>
      projectile{this};
   Field<enums::Frame>
      projectileFrame{this};
   Field<XMLName>
      target{this};
   Field<enums::Interaction>
      interaction{this};

   // children
   Field<std::optional<common::ExternalFiles>>
      externalFiles{this};
   Field<styles::Styles>
      styles{this};
   Field<pops::PoPs_database>
      PoPs_database{this};
   Field<std::optional<resonances::Resonances>>
      resonances{this};
   Field<std::optional<transport::Reactions>>
      reactions{this};
   Field<std::optional<transport::OrphanProducts>>
      orphanProducts{this};
   Field<std::optional<transport::Sums>>
      sums{this};
   Field<std::optional<fissionTransport::FissionComponents>>
      fissionComponents{this};
   Field<std::optional<transport::Productions>>
      productions{this};
   Field<std::optional<transport::IncompleteReactions>>
      incompleteReactions{this};
   Field<std::optional<appData::ApplicationData>>
      applicationData{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(PoPs_database(),aliases);
   GNDSTK_SHORTCUT(PoPs_database(),baryons);
   GNDSTK_SHORTCUT(PoPs_database(),chemicalElements);
   GNDSTK_SHORTCUT(PoPs_database(),gaugeBosons);
   GNDSTK_SHORTCUT(PoPs_database(),leptons);
   GNDSTK_SHORTCUT(PoPs_database(),unorthodoxes);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->evaluation, \
      this->format, \
      this->projectile, \
      this->projectileFrame, \
      this->target, \
      this->interaction, \
      this->externalFiles, \
      this->styles, \
      this->PoPs_database, \
      this->resonances, \
      this->reactions, \
      this->orphanProducts, \
      this->sums, \
      this->fissionComponents, \
      this->productions, \
      this->incompleteReactions, \
      this->applicationData \
   )

   // default
   ReactionSuite() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ReactionSuite(
      const wrapper<XMLName>
         &evaluation,
      const wrapper<XMLName>
         &format = {},
      const wrapper<XMLName>
         &projectile = {},
      const wrapper<enums::Frame>
         &projectileFrame = {},
      const wrapper<XMLName>
         &target = {},
      const wrapper<enums::Interaction>
         &interaction = {},
      const wrapper<std::optional<common::ExternalFiles>>
         &externalFiles = {},
      const wrapper<styles::Styles>
         &styles = {},
      const wrapper<pops::PoPs_database>
         &PoPs_database = {},
      const wrapper<std::optional<resonances::Resonances>>
         &resonances = {},
      const wrapper<std::optional<transport::Reactions>>
         &reactions = {},
      const wrapper<std::optional<transport::OrphanProducts>>
         &orphanProducts = {},
      const wrapper<std::optional<transport::Sums>>
         &sums = {},
      const wrapper<std::optional<fissionTransport::FissionComponents>>
         &fissionComponents = {},
      const wrapper<std::optional<transport::Productions>>
         &productions = {},
      const wrapper<std::optional<transport::IncompleteReactions>>
         &incompleteReactions = {},
      const wrapper<std::optional<appData::ApplicationData>>
         &applicationData = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      evaluation(this,evaluation),
      format(this,format),
      projectile(this,projectile),
      projectileFrame(this,projectileFrame),
      target(this,target),
      interaction(this,interaction),
      externalFiles(this,externalFiles),
      styles(this,styles),
      PoPs_database(this,PoPs_database),
      resonances(this,resonances),
      reactions(this,reactions),
      orphanProducts(this,orphanProducts),
      sums(this,sums),
      fissionComponents(this,fissionComponents),
      productions(this,productions),
      incompleteReactions(this,incompleteReactions),
      applicationData(this,applicationData)
   {
      Component::finish();
   }

   // from node
   explicit ReactionSuite(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ReactionSuite(const ReactionSuite &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      evaluation(this,other.evaluation),
      format(this,other.format),
      projectile(this,other.projectile),
      projectileFrame(this,other.projectileFrame),
      target(this,other.target),
      interaction(this,other.interaction),
      externalFiles(this,other.externalFiles),
      styles(this,other.styles),
      PoPs_database(this,other.PoPs_database),
      resonances(this,other.resonances),
      reactions(this,other.reactions),
      orphanProducts(this,other.orphanProducts),
      sums(this,other.sums),
      fissionComponents(this,other.fissionComponents),
      productions(this,other.productions),
      incompleteReactions(this,other.incompleteReactions),
      applicationData(this,other.applicationData)
   {
      Component::finish(other);
   }

   // move
   ReactionSuite(ReactionSuite &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      evaluation(this,std::move(other.evaluation)),
      format(this,std::move(other.format)),
      projectile(this,std::move(other.projectile)),
      projectileFrame(this,std::move(other.projectileFrame)),
      target(this,std::move(other.target)),
      interaction(this,std::move(other.interaction)),
      externalFiles(this,std::move(other.externalFiles)),
      styles(this,std::move(other.styles)),
      PoPs_database(this,std::move(other.PoPs_database)),
      resonances(this,std::move(other.resonances)),
      reactions(this,std::move(other.reactions)),
      orphanProducts(this,std::move(other.orphanProducts)),
      sums(this,std::move(other.sums)),
      fissionComponents(this,std::move(other.fissionComponents)),
      productions(this,std::move(other.productions)),
      incompleteReactions(this,std::move(other.incompleteReactions)),
      applicationData(this,std::move(other.applicationData))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ReactionSuite &operator=(const ReactionSuite &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         evaluation = other.evaluation;
         format = other.format;
         projectile = other.projectile;
         projectileFrame = other.projectileFrame;
         target = other.target;
         interaction = other.interaction;
         externalFiles = other.externalFiles;
         styles = other.styles;
         PoPs_database = other.PoPs_database;
         resonances = other.resonances;
         reactions = other.reactions;
         orphanProducts = other.orphanProducts;
         sums = other.sums;
         fissionComponents = other.fissionComponents;
         productions = other.productions;
         incompleteReactions = other.incompleteReactions;
         applicationData = other.applicationData;
      }
      return *this;
   }

   // move
   ReactionSuite &operator=(ReactionSuite &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         evaluation = std::move(other.evaluation);
         format = std::move(other.format);
         projectile = std::move(other.projectile);
         projectileFrame = std::move(other.projectileFrame);
         target = std::move(other.target);
         interaction = std::move(other.interaction);
         externalFiles = std::move(other.externalFiles);
         styles = std::move(other.styles);
         PoPs_database = std::move(other.PoPs_database);
         resonances = std::move(other.resonances);
         reactions = std::move(other.reactions);
         orphanProducts = std::move(other.orphanProducts);
         sums = std::move(other.sums);
         fissionComponents = std::move(other.fissionComponents);
         productions = std::move(other.productions);
         incompleteReactions = std::move(other.incompleteReactions);
         applicationData = std::move(other.applicationData);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/ReactionSuite/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ReactionSuite

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
