
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_A
#define TEST_V2_0_TRANSPORT_A

#include "test/v2.0/containers/XYs2d.hpp"
#include "test/v2.0/containers/Regions2d.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class A
// -----------------------------------------------------------------------------

class A : public Component<transport::A> {
   friend class Component;

   using _t = std::variant<
      containers::XYs2d,
      containers::Regions2d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "A"; }
   static auto FIELD() { return "a"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         _t{}
            / --(Child<>("XYs2d") || Child<>("regions2d"))
      ;
   }

public:
   using Component::construct;

   // children - variant
   Field<_t> _XYs2dregions2d{this};
   FieldPart<decltype(_XYs2dregions2d),containers::XYs2d> XYs2d{_XYs2dregions2d};
   FieldPart<decltype(_XYs2dregions2d),containers::Regions2d> regions2d{_XYs2dregions2d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->_XYs2dregions2d)

   // default
   A() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit A(
      const wrapper<_t> &_XYs2dregions2d
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      _XYs2dregions2d(this,_XYs2dregions2d)
   {
      Component::finish();
   }

   // from node
   explicit A(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   A(const A &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      _XYs2dregions2d(this,other._XYs2dregions2d)
   {
      Component::finish(other);
   }

   // move
   A(A &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      _XYs2dregions2d(this,std::move(other._XYs2dregions2d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   A &operator=(const A &) = default;
   A &operator=(A &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/A/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class A

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
