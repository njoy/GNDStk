
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_TRANSPORT_COHERENTPHOTON
#define TEST_V2_0_TRANSPORT_COHERENTPHOTON

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class CoherentPhoton
// -----------------------------------------------------------------------------

class CoherentPhoton : public Component<transport::CoherentPhoton> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "CoherentPhoton"; }
   static auto FIELD() { return "coherentPhoton"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return std::tuple<>{};
   }

public:
   using Component::construct;

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata)

   // default
   CoherentPhoton() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from node
   explicit CoherentPhoton(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   CoherentPhoton(const CoherentPhoton &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      Component::finish(other);
   }

   // move
   CoherentPhoton(CoherentPhoton &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   CoherentPhoton &operator=(const CoherentPhoton &) = default;
   CoherentPhoton &operator=(CoherentPhoton &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/transport/CoherentPhoton/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class CoherentPhoton

} // namespace transport
} // namespace v2_0
} // namespace test

#endif
