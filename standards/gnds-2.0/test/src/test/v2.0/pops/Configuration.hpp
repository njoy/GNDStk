
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_CONFIGURATION
#define TEST_V2_0_POPS_CONFIGURATION

#include "test/v2.0/pops/BindingEnergy.hpp"
#include "test/v2.0/pops/DecayData.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Configuration
// -----------------------------------------------------------------------------

class Configuration :
   public Component<pops::Configuration>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Configuration"; }
   static auto NODENAME() { return "configuration"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("subshell") |
         Float64{}
            / Meta<>("electronNumber") |

         // children
         --Child<pops::BindingEnergy>
            ("bindingEnergy") |
         --Child<std::optional<pops::DecayData>>
            ("decayData")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "subshell",
         "electronNumber",
         "bindingEnergy",
         "decayData"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "subshell",
         "electron_number",
         "binding_energy",
         "decay_data"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      subshell{this};
   Field<Float64>
      electronNumber{this};

   // children
   Field<pops::BindingEnergy>
      bindingEnergy{this};
   Field<std::optional<pops::DecayData>>
      decayData{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(bindingEnergy(),Double);
   GNDSTK_SHORTCUT(bindingEnergy(),documentation);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->subshell, \
      this->electronNumber, \
      this->bindingEnergy, \
      this->decayData \
   )

   // default
   Configuration() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Configuration(
      const wrapper<std::string>
         &subshell,
      const wrapper<Float64>
         &electronNumber = {},
      const wrapper<pops::BindingEnergy>
         &bindingEnergy = {},
      const wrapper<std::optional<pops::DecayData>>
         &decayData = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      subshell(this,subshell),
      electronNumber(this,electronNumber),
      bindingEnergy(this,bindingEnergy),
      decayData(this,decayData)
   {
      Component::finish();
   }

   // from node
   explicit Configuration(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Configuration(const Configuration &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      subshell(this,other.subshell),
      electronNumber(this,other.electronNumber),
      bindingEnergy(this,other.bindingEnergy),
      decayData(this,other.decayData)
   {
      Component::finish(other);
   }

   // move
   Configuration(Configuration &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      subshell(this,std::move(other.subshell)),
      electronNumber(this,std::move(other.electronNumber)),
      bindingEnergy(this,std::move(other.bindingEnergy)),
      decayData(this,std::move(other.decayData))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Configuration &operator=(const Configuration &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         subshell = other.subshell;
         electronNumber = other.electronNumber;
         bindingEnergy = other.bindingEnergy;
         decayData = other.decayData;
      }
      return *this;
   }

   // move
   Configuration &operator=(Configuration &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         subshell = std::move(other.subshell);
         electronNumber = std::move(other.electronNumber);
         bindingEnergy = std::move(other.bindingEnergy);
         decayData = std::move(other.decayData);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Configuration/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Configuration

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
