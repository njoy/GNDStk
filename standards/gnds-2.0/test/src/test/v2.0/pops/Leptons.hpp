
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_LEPTONS
#define TEST_V2_0_POPS_LEPTONS

#include "test/v2.0/pops/Lepton.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Leptons
// -----------------------------------------------------------------------------

class Leptons : public Component<pops::Leptons> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Leptons"; }
   static auto FIELD() { return "leptons"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         ++Child<pops::Lepton>("lepton")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::vector<pops::Lepton>> lepton{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->lepton)

   // default
   Leptons() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Leptons(
      const wrapper<std::vector<pops::Lepton>> &lepton
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      lepton(this,lepton)
   {
      Component::finish();
   }

   // from node
   explicit Leptons(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Leptons(const Leptons &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      lepton(this,other.lepton)
   {
      Component::finish(other);
   }

   // move
   Leptons(Leptons &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      lepton(this,std::move(other.lepton))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Leptons &operator=(const Leptons &) = default;
   Leptons &operator=(Leptons &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Leptons/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Leptons

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
