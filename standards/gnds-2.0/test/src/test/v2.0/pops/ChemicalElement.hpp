
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_CHEMICALELEMENT
#define TEST_V2_0_POPS_CHEMICALELEMENT

#include "test/v2.0/pops/Atomic.hpp"
#include "test/v2.0/pops/Isotopes.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class ChemicalElement
// -----------------------------------------------------------------------------

class ChemicalElement :
   public Component<pops::ChemicalElement>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "ChemicalElement"; }
   static auto NODENAME() { return "chemicalElement"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("symbol") |
         Integer32{}
            / Meta<>("Z") |
         std::optional<XMLName>{}
            / Meta<>("name") |

         // children
         --Child<std::optional<pops::Atomic>>
            ("atomic") |
         --Child<std::optional<pops::Isotopes>>
            ("isotopes")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "symbol",
         "Z",
         "name",
         "atomic",
         "isotopes"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "symbol",
         "z",
         "name",
         "atomic",
         "isotopes"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      symbol{this};
   Field<Integer32>
      Z{this};
   Field<std::optional<XMLName>>
      name{this};

   // children
   Field<std::optional<pops::Atomic>>
      atomic{this};
   Field<std::optional<pops::Isotopes>>
      isotopes{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->symbol, \
      this->Z, \
      this->name, \
      this->atomic, \
      this->isotopes \
   )

   // default
   ChemicalElement() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ChemicalElement(
      const wrapper<XMLName>
         &symbol,
      const wrapper<Integer32>
         &Z = {},
      const wrapper<std::optional<XMLName>>
         &name = {},
      const wrapper<std::optional<pops::Atomic>>
         &atomic = {},
      const wrapper<std::optional<pops::Isotopes>>
         &isotopes = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      symbol(this,symbol),
      Z(this,Z),
      name(this,name),
      atomic(this,atomic),
      isotopes(this,isotopes)
   {
      Component::finish();
   }

   // from node
   explicit ChemicalElement(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ChemicalElement(const ChemicalElement &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      symbol(this,other.symbol),
      Z(this,other.Z),
      name(this,other.name),
      atomic(this,other.atomic),
      isotopes(this,other.isotopes)
   {
      Component::finish(other);
   }

   // move
   ChemicalElement(ChemicalElement &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      symbol(this,std::move(other.symbol)),
      Z(this,std::move(other.Z)),
      name(this,std::move(other.name)),
      atomic(this,std::move(other.atomic)),
      isotopes(this,std::move(other.isotopes))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ChemicalElement &operator=(const ChemicalElement &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         symbol = other.symbol;
         Z = other.Z;
         name = other.name;
         atomic = other.atomic;
         isotopes = other.isotopes;
      }
      return *this;
   }

   // move
   ChemicalElement &operator=(ChemicalElement &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         symbol = std::move(other.symbol);
         Z = std::move(other.Z);
         name = std::move(other.name);
         atomic = std::move(other.atomic);
         isotopes = std::move(other.isotopes);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/ChemicalElement/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ChemicalElement

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
