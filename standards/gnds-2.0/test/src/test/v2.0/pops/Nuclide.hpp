
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_NUCLIDE
#define TEST_V2_0_POPS_NUCLIDE

#include "test/v2.0/pops/Charge.hpp"
#include "test/v2.0/pops/Mass.hpp"
#include "test/v2.0/pops/Spin.hpp"
#include "test/v2.0/pops/Parity.hpp"
#include "test/v2.0/pops/Nucleus.hpp"
#include "test/v2.0/pops/DecayData.hpp"
#include "test/v2.0/fissionFragmentData/FissionFragmentData.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Nuclide
// -----------------------------------------------------------------------------

class Nuclide : public Component<pops::Nuclide> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Nuclide"; }
   static auto FIELD() { return "nuclide"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         XMLName{}
            / Meta<>("id") |
         // children
         std::optional<pops::Charge>{}
            / --Child<>("charge") |
         std::optional<pops::Mass>{}
            / --Child<>("mass") |
         std::optional<pops::Spin>{}
            / --Child<>("spin") |
         std::optional<pops::Parity>{}
            / --Child<>("parity") |
         std::optional<pops::Nucleus>{}
            / --Child<>("nucleus") |
         std::optional<pops::DecayData>{}
            / --Child<>("decayData") |
         std::optional<fissionFragmentData::FissionFragmentData>{}
            / --Child<>("fissionFragmentData")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<XMLName> id{this};

   // children
   Field<std::optional<pops::Charge>> charge{this};
   Field<std::optional<pops::Mass>> mass{this};
   Field<std::optional<pops::Spin>> spin{this};
   Field<std::optional<pops::Parity>> parity{this};
   Field<std::optional<pops::Nucleus>> nucleus{this};
   Field<std::optional<pops::DecayData>> decayData{this};
   Field<std::optional<fissionFragmentData::FissionFragmentData>> fissionFragmentData{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->id, \
      this->charge, \
      this->mass, \
      this->spin, \
      this->parity, \
      this->nucleus, \
      this->decayData, \
      this->fissionFragmentData)

   // default, and from fields
   explicit Nuclide(
      const wrapper<XMLName> &id = {},
      const wrapper<std::optional<pops::Charge>> &charge = {},
      const wrapper<std::optional<pops::Mass>> &mass = {},
      const wrapper<std::optional<pops::Spin>> &spin = {},
      const wrapper<std::optional<pops::Parity>> &parity = {},
      const wrapper<std::optional<pops::Nucleus>> &nucleus = {},
      const wrapper<std::optional<pops::DecayData>> &decayData = {},
      const wrapper<std::optional<fissionFragmentData::FissionFragmentData>> &fissionFragmentData = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      id(this,id),
      charge(this,charge),
      mass(this,mass),
      spin(this,spin),
      parity(this,parity),
      nucleus(this,nucleus),
      decayData(this,decayData),
      fissionFragmentData(this,fissionFragmentData)
   {
      Component::finish();
   }

   // from node
   explicit Nuclide(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Nuclide(const Nuclide &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Nuclide(Nuclide &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Nuclide &operator=(const Nuclide &) = default;
   Nuclide &operator=(Nuclide &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Nuclide/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Nuclide

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
