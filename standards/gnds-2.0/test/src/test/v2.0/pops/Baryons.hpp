
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_BARYONS
#define TEST_V2_0_POPS_BARYONS

#include "test/v2.0/pops/Baryon.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Baryons
// -----------------------------------------------------------------------------

class Baryons : public Component<pops::Baryons> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Baryons"; }
   static auto FIELD() { return "baryons"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         std::optional<pops::Baryon>{}
            / ++Child<>("baryon")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::optional<std::vector<pops::Baryon>>> baryon{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->baryon)

   // default, and from fields
   explicit Baryons(
      const wrapper<std::optional<std::vector<pops::Baryon>>> &baryon = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      baryon(this,baryon)
   {
      Component::finish();
   }

   // from node
   explicit Baryons(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Baryons(const Baryons &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Baryons(Baryons &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Baryons &operator=(const Baryons &) = default;
   Baryons &operator=(Baryons &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Baryons/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Baryons

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
