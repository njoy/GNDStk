
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_INTERVAL
#define TEST_V2_0_POPS_INTERVAL

#include "test/v2.0/key.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Interval
// -----------------------------------------------------------------------------

class Interval :
   public Component<pops::Interval>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Interval"; }
   static auto NODENAME() { return "interval"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Float64{}
            / Meta<>("confidence") |
         Float64{}
            / Meta<>("lower") |
         Float64{}
            / Meta<>("upper")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "confidence",
         "lower",
         "upper"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "confidence",
         "lower",
         "upper"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Float64>
      confidence{this};
   Field<Float64>
      lower{this};
   Field<Float64>
      upper{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->confidence, \
      this->lower, \
      this->upper \
   )

   // default
   Interval() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Interval(
      const wrapper<Float64>
         &confidence,
      const wrapper<Float64>
         &lower = {},
      const wrapper<Float64>
         &upper = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      confidence(this,confidence),
      lower(this,lower),
      upper(this,upper)
   {
      Component::finish();
   }

   // from node
   explicit Interval(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Interval(const Interval &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      confidence(this,other.confidence),
      lower(this,other.lower),
      upper(this,other.upper)
   {
      Component::finish(other);
   }

   // move
   Interval(Interval &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      confidence(this,std::move(other.confidence)),
      lower(this,std::move(other.lower)),
      upper(this,std::move(other.upper))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Interval &operator=(const Interval &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         confidence = other.confidence;
         lower = other.lower;
         upper = other.upper;
      }
      return *this;
   }

   // move
   Interval &operator=(Interval &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         confidence = std::move(other.confidence);
         lower = std::move(other.lower);
         upper = std::move(other.upper);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Interval/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Interval

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
