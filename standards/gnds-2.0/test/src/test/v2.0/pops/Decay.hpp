
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_DECAY
#define TEST_V2_0_POPS_DECAY

#include "test/v2.0/pops/Products.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Decay
// -----------------------------------------------------------------------------

class Decay :
   public Component<pops::Decay>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Decay"; }
   static auto NODENAME() { return "decay"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         Integer32{}
            / Meta<>("index") |
         std::optional<enums::DecayType>{}
            / Meta<>("mode") |
         Defaulted<bool>{false}
            / Meta<>("complete") |

         // children
         --Child<std::optional<pops::Products>>
            ("products")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "index",
         "mode",
         "complete",
         "products"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "index",
         "mode",
         "complete",
         "products"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const bool complete = false;
   } defaults;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<Integer32>
      index{this};
   Field<std::optional<enums::DecayType>>
      mode{this};
   Field<Defaulted<bool>>
      complete{this,defaults.complete};

   // children
   Field<std::optional<pops::Products>>
      products{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->index, \
      this->mode, \
      this->complete, \
      this->products \
   )

   // default
   Decay() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   // optional replaces Defaulted; this class knows the default(s)
   explicit Decay(
      const wrapper<Integer32>
         &index,
      const wrapper<std::optional<enums::DecayType>>
         &mode = {},
      const wrapper<std::optional<bool>>
         &complete = {},
      const wrapper<std::optional<pops::Products>>
         &products = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      index(this,index),
      mode(this,mode),
      complete(this,defaults.complete,complete),
      products(this,products)
   {
      Component::finish();
   }

   // from node
   explicit Decay(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Decay(const Decay &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      index(this,other.index),
      mode(this,other.mode),
      complete(this,other.complete),
      products(this,other.products)
   {
      Component::finish(other);
   }

   // move
   Decay(Decay &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      index(this,std::move(other.index)),
      mode(this,std::move(other.mode)),
      complete(this,std::move(other.complete)),
      products(this,std::move(other.products))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Decay &operator=(const Decay &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         index = other.index;
         mode = other.mode;
         complete = other.complete;
         products = other.products;
      }
      return *this;
   }

   // move
   Decay &operator=(Decay &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         index = std::move(other.index);
         mode = std::move(other.mode);
         complete = std::move(other.complete);
         products = std::move(other.products);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Decay/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Decay

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
