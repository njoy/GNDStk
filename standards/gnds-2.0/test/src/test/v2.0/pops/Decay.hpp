
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_DECAY
#define TEST_V2_0_POPS_DECAY

#include "test/v2.0/pops/Products.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Decay
// -----------------------------------------------------------------------------

class Decay : public Component<pops::Decay> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Decay"; }
   static auto FIELD() { return "decay"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("index") |
         std::optional<enums::DecayType>{}
            / Meta<>("mode") |
         Defaulted<bool>{false}
            / Meta<>("complete") |
         // children
         std::optional<pops::Products>{}
            / --Child<>("products")
      ;
   }

public:
   using Component::construct;

   // defaults
   static inline const struct Defaults {
      static inline const bool complete = false;
   } defaults;

   // metadata
   Field<Integer32> index{this};
   Field<std::optional<enums::DecayType>> mode{this};
   Field<Defaulted<bool>> complete{this,defaults.complete};

   // children
   Field<std::optional<pops::Products>> products{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->index, \
      this->mode, \
      this->complete, \
      this->products)

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Decay(
      const wrapper<Integer32> &index = {},
      const wrapper<std::optional<enums::DecayType>> &mode = {},
      const wrapper<std::optional<bool>> &complete = {},
      const wrapper<std::optional<pops::Products>> &products = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      index(this,index),
      mode(this,mode),
      complete(this,defaults.complete,complete),
      products(this,products)
   {
      Component::finish();
   }

   // from node
   explicit Decay(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Decay(const Decay &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Decay(Decay &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Decay &operator=(const Decay &) = default;
   Decay &operator=(Decay &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Decay/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Decay

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
