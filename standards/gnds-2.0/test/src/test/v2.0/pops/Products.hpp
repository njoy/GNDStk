
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_PRODUCTS
#define TEST_V2_0_POPS_PRODUCTS

#include "test/v2.0/pops/Product.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Products
// -----------------------------------------------------------------------------

class Products : public Component<pops::Products> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Products"; }
   static auto FIELD() { return "products"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         ++Child<pops::Product>("product")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::vector<pops::Product>> product{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->product)

   // default
   Products() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Products(
      const wrapper<std::vector<pops::Product>> &product
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      product(this,product)
   {
      Component::finish();
   }

   // from node
   explicit Products(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Products(const Products &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      product(this,other.product)
   {
      Component::finish(other);
   }

   // move
   Products(Products &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      product(this,std::move(other.product))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Products &operator=(const Products &) = default;
   Products &operator=(Products &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Products/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Products

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
