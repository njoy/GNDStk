
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_DECAYMODE
#define TEST_V2_0_POPS_DECAYMODE

#include "test/v2.0/pops/Probability.hpp"
#include "test/v2.0/pops/InternalConversionCoefficients.hpp"
#include "test/v2.0/pops/PhotonEmissionProbabilities.hpp"
#include "test/v2.0/pops/Q.hpp"
#include "test/v2.0/pops/DecayPath.hpp"
#include "test/v2.0/pops/Spectra.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class DecayMode
// -----------------------------------------------------------------------------

class DecayMode :
   public Component<pops::DecayMode>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "DecayMode"; }
   static auto NODENAME() { return "decayMode"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         XMLName{}
            / Meta<>("label") |
         enums::DecayType{}
            / Meta<>("mode") |

         // children
         --Child<pops::Probability>
            ("probability") |
         --Child<std::optional<pops::InternalConversionCoefficients>>
            ("internalConversionCoefficients") |
         --Child<std::optional<pops::PhotonEmissionProbabilities>>
            ("photonEmissionProbabilities") |
         --Child<std::optional<pops::Q>>
            ("Q") |
         --Child<std::optional<pops::DecayPath>>
            ("decayPath") |
         --Child<std::optional<pops::Spectra>>
            ("spectra")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "mode",
         "probability",
         "internalConversionCoefficients",
         "photonEmissionProbabilities",
         "Q",
         "decayPath",
         "spectra"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "mode",
         "probability",
         "internal_conversion_coefficients",
         "photon_emission_probabilities",
         "q",
         "decay_path",
         "spectra"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<XMLName>
      label{this};
   Field<enums::DecayType>
      mode{this};

   // children
   Field<pops::Probability>
      probability{this};
   Field<std::optional<pops::InternalConversionCoefficients>>
      internalConversionCoefficients{this};
   Field<std::optional<pops::PhotonEmissionProbabilities>>
      photonEmissionProbabilities{this};
   Field<std::optional<pops::Q>>
      Q{this};
   Field<std::optional<pops::DecayPath>>
      decayPath{this};
   Field<std::optional<pops::Spectra>>
      spectra{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->mode, \
      this->probability, \
      this->internalConversionCoefficients, \
      this->photonEmissionProbabilities, \
      this->Q, \
      this->decayPath, \
      this->spectra \
   )

   // default
   DecayMode() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit DecayMode(
      const wrapper<XMLName>
         &label,
      const wrapper<enums::DecayType>
         &mode = {},
      const wrapper<pops::Probability>
         &probability = {},
      const wrapper<std::optional<pops::InternalConversionCoefficients>>
         &internalConversionCoefficients = {},
      const wrapper<std::optional<pops::PhotonEmissionProbabilities>>
         &photonEmissionProbabilities = {},
      const wrapper<std::optional<pops::Q>>
         &Q = {},
      const wrapper<std::optional<pops::DecayPath>>
         &decayPath = {},
      const wrapper<std::optional<pops::Spectra>>
         &spectra = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      mode(this,mode),
      probability(this,probability),
      internalConversionCoefficients(this,internalConversionCoefficients),
      photonEmissionProbabilities(this,photonEmissionProbabilities),
      Q(this,Q),
      decayPath(this,decayPath),
      spectra(this,spectra)
   {
      Component::finish();
   }

   // from node
   explicit DecayMode(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   DecayMode(const DecayMode &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      mode(this,other.mode),
      probability(this,other.probability),
      internalConversionCoefficients(this,other.internalConversionCoefficients),
      photonEmissionProbabilities(this,other.photonEmissionProbabilities),
      Q(this,other.Q),
      decayPath(this,other.decayPath),
      spectra(this,other.spectra)
   {
      Component::finish(other);
   }

   // move
   DecayMode(DecayMode &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      mode(this,std::move(other.mode)),
      probability(this,std::move(other.probability)),
      internalConversionCoefficients(this,std::move(other.internalConversionCoefficients)),
      photonEmissionProbabilities(this,std::move(other.photonEmissionProbabilities)),
      Q(this,std::move(other.Q)),
      decayPath(this,std::move(other.decayPath)),
      spectra(this,std::move(other.spectra))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   DecayMode &operator=(const DecayMode &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         mode = other.mode;
         probability = other.probability;
         internalConversionCoefficients = other.internalConversionCoefficients;
         photonEmissionProbabilities = other.photonEmissionProbabilities;
         Q = other.Q;
         decayPath = other.decayPath;
         spectra = other.spectra;
      }
      return *this;
   }

   // move
   DecayMode &operator=(DecayMode &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         mode = std::move(other.mode);
         probability = std::move(other.probability);
         internalConversionCoefficients = std::move(other.internalConversionCoefficients);
         photonEmissionProbabilities = std::move(other.photonEmissionProbabilities);
         Q = std::move(other.Q);
         decayPath = std::move(other.decayPath);
         spectra = std::move(other.spectra);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/DecayMode/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class DecayMode

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
