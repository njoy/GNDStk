
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_DISCRETE
#define TEST_V2_0_POPS_DISCRETE

#include "test/v2.0/pops/DiscreteEnergy.hpp"
#include "test/v2.0/pops/Intensity.hpp"
#include "test/v2.0/pops/InternalConversionCoefficients.hpp"
#include "test/v2.0/pops/InternalPairFormationCoefficient.hpp"
#include "test/v2.0/pops/PhotonEmissionProbabilities.hpp"
#include "test/v2.0/pops/PositronEmissionIntensity.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Discrete
// -----------------------------------------------------------------------------

class Discrete : public Component<pops::Discrete> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Discrete"; }
   static auto FIELD() { return "discrete"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("type") |
         // children
         pops::DiscreteEnergy{}
            / --Child<>("energy") |
         pops::Intensity{}
            / --Child<>("intensity") |
         std::optional<pops::InternalConversionCoefficients>{}
            / --Child<>("internalConversionCoefficients") |
         std::optional<pops::InternalPairFormationCoefficient>{}
            / --Child<>("internalPairFormationCoefficient") |
         std::optional<pops::PhotonEmissionProbabilities>{}
            / --Child<>("photonEmissionProbabilities") |
         std::optional<pops::PositronEmissionIntensity>{}
            / --Child<>("positronEmissionIntensity")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> type{this};

   // children
   Field<pops::DiscreteEnergy> energy{this};
   Field<pops::Intensity> intensity{this};
   Field<std::optional<pops::InternalConversionCoefficients>> internalConversionCoefficients{this};
   Field<std::optional<pops::InternalPairFormationCoefficient>> internalPairFormationCoefficient{this};
   Field<std::optional<pops::PhotonEmissionProbabilities>> photonEmissionProbabilities{this};
   Field<std::optional<pops::PositronEmissionIntensity>> positronEmissionIntensity{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->type, \
      this->energy, \
      this->intensity, \
      this->internalConversionCoefficients, \
      this->internalPairFormationCoefficient, \
      this->photonEmissionProbabilities, \
      this->positronEmissionIntensity)

   // default, and from fields
   explicit Discrete(
      const wrapper<std::optional<XMLName>> &type = {},
      const wrapper<pops::DiscreteEnergy> &energy = {},
      const wrapper<pops::Intensity> &intensity = {},
      const wrapper<std::optional<pops::InternalConversionCoefficients>> &internalConversionCoefficients = {},
      const wrapper<std::optional<pops::InternalPairFormationCoefficient>> &internalPairFormationCoefficient = {},
      const wrapper<std::optional<pops::PhotonEmissionProbabilities>> &photonEmissionProbabilities = {},
      const wrapper<std::optional<pops::PositronEmissionIntensity>> &positronEmissionIntensity = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      type(this,type),
      energy(this,energy),
      intensity(this,intensity),
      internalConversionCoefficients(this,internalConversionCoefficients),
      internalPairFormationCoefficient(this,internalPairFormationCoefficient),
      photonEmissionProbabilities(this,photonEmissionProbabilities),
      positronEmissionIntensity(this,positronEmissionIntensity)
   {
      Component::finish();
   }

   // from node
   explicit Discrete(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Discrete(const Discrete &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Discrete(Discrete &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Discrete &operator=(const Discrete &) = default;
   Discrete &operator=(Discrete &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Discrete/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Discrete

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
