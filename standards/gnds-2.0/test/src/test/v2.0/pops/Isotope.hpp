
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TEST_V2_0_POPS_ISOTOPE
#define TEST_V2_0_POPS_ISOTOPE

#include "test/v2.0/pops/Nuclides.hpp"

namespace test {
namespace v2_0 {
namespace pops {

// -----------------------------------------------------------------------------
// pops::
// class Isotope
// -----------------------------------------------------------------------------

class Isotope : public Component<pops::Isotope> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "pops"; }
   static auto CLASS() { return "Isotope"; }
   static auto FIELD() { return "isotope"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Integer32{}
            / Meta<>("A") |
         XMLName{}
            / Meta<>("symbol") |
         // children
         --Child<std::optional<pops::Nuclides>>("nuclides")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<Integer32> A{this};
   Field<XMLName> symbol{this};

   // children
   Field<std::optional<pops::Nuclides>> nuclides{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->A, \
      this->symbol, \
      this->nuclides)

   // default
   Isotope() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Isotope(
      const wrapper<Integer32> &A,
      const wrapper<XMLName> &symbol = {},
      const wrapper<std::optional<pops::Nuclides>> &nuclides = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      A(this,A),
      symbol(this,symbol),
      nuclides(this,nuclides)
   {
      Component::finish();
   }

   // from node
   explicit Isotope(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Isotope(const Isotope &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      A(this,other.A),
      symbol(this,other.symbol),
      nuclides(this,other.nuclides)
   {
      Component::finish(other);
   }

   // move
   Isotope(Isotope &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      A(this,std::move(other.A)),
      symbol(this,std::move(other.symbol)),
      nuclides(this,std::move(other.nuclides))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Isotope &operator=(const Isotope &) = default;
   Isotope &operator=(Isotope &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "test/v2.0/pops/Isotope/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Isotope

} // namespace pops
} // namespace v2_0
} // namespace test

#endif
