
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/processed/MultiGroup3d.hpp"
#include "MultiGroup3d.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = MultiGroup3dClass;
using CPP = multigroup::MultiGroup3d;

static const std::string CLASSNAME = "MultiGroup3d";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto gridded3d = [](auto &obj) { return &obj.gridded3d; };
}

using CPPGridded3d = containers::Gridded3d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstMultiGroup3d
MultiGroup3dDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2MultiGroup3d
MultiGroup3dDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstMultiGroup3d
MultiGroup3dCreateConst(
   const XMLName label,
   const XMLName productFrame,
   ConstHandle2ConstGridded3d gridded3d
) {
   ConstHandle2MultiGroup3d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      productFrame,
      detail::tocpp<CPPGridded3d>(gridded3d)
   );
   return handle;
}

// Create, general
Handle2MultiGroup3d
MultiGroup3dCreate(
   const XMLName label,
   const XMLName productFrame,
   ConstHandle2ConstGridded3d gridded3d
) {
   ConstHandle2MultiGroup3d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      productFrame,
      detail::tocpp<CPPGridded3d>(gridded3d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
MultiGroup3dAssign(ConstHandle2MultiGroup3d This, ConstHandle2ConstMultiGroup3d from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
MultiGroup3dDelete(ConstHandle2ConstMultiGroup3d This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
MultiGroup3dRead(ConstHandle2MultiGroup3d This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
MultiGroup3dWrite(ConstHandle2ConstMultiGroup3d This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
MultiGroup3dPrint(ConstHandle2ConstMultiGroup3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
MultiGroup3dPrintXML(ConstHandle2ConstMultiGroup3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
MultiGroup3dPrintJSON(ConstHandle2ConstMultiGroup3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
MultiGroup3dLabelHas(ConstHandle2ConstMultiGroup3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
MultiGroup3dLabelGet(ConstHandle2ConstMultiGroup3d This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
MultiGroup3dLabelSet(ConstHandle2MultiGroup3d This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
MultiGroup3dProductFrameHas(ConstHandle2ConstMultiGroup3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", This, extract::productFrame);
}

// Get
// Returns by value
XMLName
MultiGroup3dProductFrameGet(ConstHandle2ConstMultiGroup3d This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", This, extract::productFrame);
}

// Set
void
MultiGroup3dProductFrameSet(ConstHandle2MultiGroup3d This, const XMLName productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", This, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: gridded3d
// -----------------------------------------------------------------------------

// Has
int
MultiGroup3dGridded3dHas(ConstHandle2ConstMultiGroup3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Gridded3dHas", This, extract::gridded3d);
}

// Get, const
Handle2ConstGridded3d
MultiGroup3dGridded3dGetConst(ConstHandle2ConstMultiGroup3d This)
{
   return detail::getField<CPP,Handle2ConstGridded3d>
      (CLASSNAME, CLASSNAME+"Gridded3dGetConst", This, extract::gridded3d);
}

// Get, non-const
Handle2Gridded3d
MultiGroup3dGridded3dGet(ConstHandle2MultiGroup3d This)
{
   return detail::getField<CPP,Handle2Gridded3d>
      (CLASSNAME, CLASSNAME+"Gridded3dGet", This, extract::gridded3d);
}

// Set
void
MultiGroup3dGridded3dSet(ConstHandle2MultiGroup3d This, ConstHandle2ConstGridded3d gridded3d)
{
   detail::setField<CPP,CPPGridded3d>
      (CLASSNAME, CLASSNAME+"Gridded3dSet", This, extract::gridded3d, gridded3d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/processed/MultiGroup3d/src/custom.cpp"
