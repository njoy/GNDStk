
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/processed/AverageProductEnergy.hpp"
#include "AverageProductEnergy.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = AverageProductEnergyClass;
using CPP = multigroup::AverageProductEnergy;

static const std::string CLASSNAME = "AverageProductEnergy";

namespace extract {
   static auto XYs1d = [](auto &obj) { return &obj.XYs1d; };
   static auto gridded1d = [](auto &obj) { return &obj.gridded1d; };
   static auto regions1d = [](auto &obj) { return &obj.regions1d; };
}

using CPPXYs1d = containers::XYs1d;
using CPPGridded1d = containers::Gridded1d;
using CPPRegions1d = containers::Regions1d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstAverageProductEnergy
AverageProductEnergyDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2AverageProductEnergy
AverageProductEnergyDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstAverageProductEnergy
AverageProductEnergyCreateConst(
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstGridded1d gridded1d,
   ConstHandle2ConstRegions1d regions1d
) {
   ConstHandle2AverageProductEnergy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPXYs1d>(XYs1d),
      detail::tocpp<CPPGridded1d>(gridded1d),
      detail::tocpp<CPPRegions1d>(regions1d)
   );
   return handle;
}

// Create, general
Handle2AverageProductEnergy
AverageProductEnergyCreate(
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstGridded1d gridded1d,
   ConstHandle2ConstRegions1d regions1d
) {
   ConstHandle2AverageProductEnergy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPXYs1d>(XYs1d),
      detail::tocpp<CPPGridded1d>(gridded1d),
      detail::tocpp<CPPRegions1d>(regions1d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
AverageProductEnergyAssign(ConstHandle2AverageProductEnergy self, ConstHandle2ConstAverageProductEnergy from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
AverageProductEnergyDelete(ConstHandle2ConstAverageProductEnergy self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
AverageProductEnergyRead(ConstHandle2AverageProductEnergy self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
AverageProductEnergyWrite(ConstHandle2ConstAverageProductEnergy self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
AverageProductEnergyPrint(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
AverageProductEnergyPrintXML(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
AverageProductEnergyPrintJSON(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: XYs1d
// -----------------------------------------------------------------------------

// Has
int
AverageProductEnergyXYs1dHas(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHas", self, extract::XYs1d);
}

// Get, const
Handle2ConstXYs1d
AverageProductEnergyXYs1dGetConst(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::getField<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetConst", self, extract::XYs1d);
}

// Get, non-const
Handle2XYs1d
AverageProductEnergyXYs1dGet(ConstHandle2AverageProductEnergy self)
{
   return detail::getField<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGet", self, extract::XYs1d);
}

// Set
void
AverageProductEnergyXYs1dSet(ConstHandle2AverageProductEnergy self, ConstHandle2ConstXYs1d XYs1d)
{
   detail::setField<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSet", self, extract::XYs1d, XYs1d);
}


// -----------------------------------------------------------------------------
// Child: gridded1d
// -----------------------------------------------------------------------------

// Has
int
AverageProductEnergyGridded1dHas(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Gridded1dHas", self, extract::gridded1d);
}

// Get, const
Handle2ConstGridded1d
AverageProductEnergyGridded1dGetConst(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::getField<CPP,Handle2ConstGridded1d>
      (CLASSNAME, CLASSNAME+"Gridded1dGetConst", self, extract::gridded1d);
}

// Get, non-const
Handle2Gridded1d
AverageProductEnergyGridded1dGet(ConstHandle2AverageProductEnergy self)
{
   return detail::getField<CPP,Handle2Gridded1d>
      (CLASSNAME, CLASSNAME+"Gridded1dGet", self, extract::gridded1d);
}

// Set
void
AverageProductEnergyGridded1dSet(ConstHandle2AverageProductEnergy self, ConstHandle2ConstGridded1d gridded1d)
{
   detail::setField<CPP,CPPGridded1d>
      (CLASSNAME, CLASSNAME+"Gridded1dSet", self, extract::gridded1d, gridded1d);
}


// -----------------------------------------------------------------------------
// Child: regions1d
// -----------------------------------------------------------------------------

// Has
int
AverageProductEnergyRegions1dHas(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Regions1dHas", self, extract::regions1d);
}

// Get, const
Handle2ConstRegions1d
AverageProductEnergyRegions1dGetConst(ConstHandle2ConstAverageProductEnergy self)
{
   return detail::getField<CPP,Handle2ConstRegions1d>
      (CLASSNAME, CLASSNAME+"Regions1dGetConst", self, extract::regions1d);
}

// Get, non-const
Handle2Regions1d
AverageProductEnergyRegions1dGet(ConstHandle2AverageProductEnergy self)
{
   return detail::getField<CPP,Handle2Regions1d>
      (CLASSNAME, CLASSNAME+"Regions1dGet", self, extract::regions1d);
}

// Set
void
AverageProductEnergyRegions1dSet(ConstHandle2AverageProductEnergy self, ConstHandle2ConstRegions1d regions1d)
{
   detail::setField<CPP,CPPRegions1d>
      (CLASSNAME, CLASSNAME+"Regions1dSet", self, extract::regions1d, regions1d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/processed/AverageProductEnergy/src/custom.cpp"
