
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// EnergyAngularMC is the basic handle type in this file. Example:
//    // Create a default EnergyAngularMC object:
//    EnergyAngularMC handle = EnergyAngularMCDefault();
// Functions involving EnergyAngularMC are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_PROCESSED_ENERGYANGULARMC
#define C_INTERFACE_TEST_V2_0_PROCESSED_ENERGYANGULARMC

#include "GNDStk.h"
#include "v2.0/common/Energy.h"
#include "v2.0/transport/EnergyAngular.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct EnergyAngularMCClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ EnergyAngularMC
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct EnergyAngularMCClass *EnergyAngularMC;

// --- Const-aware handles.
typedef const struct EnergyAngularMCClass *const ConstHandle2ConstEnergyAngularMC;
typedef       struct EnergyAngularMCClass *const ConstHandle2EnergyAngularMC;
typedef const struct EnergyAngularMCClass *      Handle2ConstEnergyAngularMC;
typedef       struct EnergyAngularMCClass *      Handle2EnergyAngularMC;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstEnergyAngularMC
EnergyAngularMCDefaultConst();

// +++ Create, default
extern_c Handle2EnergyAngularMC
EnergyAngularMCDefault();

// --- Create, general, const
extern_c Handle2ConstEnergyAngularMC
EnergyAngularMCCreateConst(
   const XMLName label,
   const XMLName productFrame,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstEnergyAngular energyAngular
);

// +++ Create, general
extern_c Handle2EnergyAngularMC
EnergyAngularMCCreate(
   const XMLName label,
   const XMLName productFrame,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstEnergyAngular energyAngular
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
EnergyAngularMCAssign(ConstHandle2EnergyAngularMC self, ConstHandle2ConstEnergyAngularMC from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
EnergyAngularMCDelete(ConstHandle2ConstEnergyAngularMC self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
EnergyAngularMCRead(ConstHandle2EnergyAngularMC self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
EnergyAngularMCWrite(ConstHandle2ConstEnergyAngularMC self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
EnergyAngularMCPrint(ConstHandle2ConstEnergyAngularMC self);

// +++ Print to standard output, as XML
extern_c int
EnergyAngularMCPrintXML(ConstHandle2ConstEnergyAngularMC self);

// +++ Print to standard output, as JSON
extern_c int
EnergyAngularMCPrintJSON(ConstHandle2ConstEnergyAngularMC self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EnergyAngularMCLabelHas(ConstHandle2ConstEnergyAngularMC self);

// +++ Get
// +++ Returns by value
extern_c XMLName
EnergyAngularMCLabelGet(ConstHandle2ConstEnergyAngularMC self);

// +++ Set
extern_c void
EnergyAngularMCLabelSet(ConstHandle2EnergyAngularMC self, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EnergyAngularMCProductFrameHas(ConstHandle2ConstEnergyAngularMC self);

// +++ Get
// +++ Returns by value
extern_c XMLName
EnergyAngularMCProductFrameGet(ConstHandle2ConstEnergyAngularMC self);

// +++ Set
extern_c void
EnergyAngularMCProductFrameSet(ConstHandle2EnergyAngularMC self, const XMLName productFrame);


// -----------------------------------------------------------------------------
// Child: energy
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EnergyAngularMCEnergyHas(ConstHandle2ConstEnergyAngularMC self);

// --- Get, const
extern_c Handle2ConstEnergy
EnergyAngularMCEnergyGetConst(ConstHandle2ConstEnergyAngularMC self);

// +++ Get, non-const
extern_c Handle2Energy
EnergyAngularMCEnergyGet(ConstHandle2EnergyAngularMC self);

// +++ Set
extern_c void
EnergyAngularMCEnergySet(ConstHandle2EnergyAngularMC self, ConstHandle2ConstEnergy energy);


// -----------------------------------------------------------------------------
// Child: energyAngular
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EnergyAngularMCEnergyAngularHas(ConstHandle2ConstEnergyAngularMC self);

// --- Get, const
extern_c Handle2ConstEnergyAngular
EnergyAngularMCEnergyAngularGetConst(ConstHandle2ConstEnergyAngularMC self);

// +++ Get, non-const
extern_c Handle2EnergyAngular
EnergyAngularMCEnergyAngularGet(ConstHandle2EnergyAngularMC self);

// +++ Set
extern_c void
EnergyAngularMCEnergyAngularSet(ConstHandle2EnergyAngularMC self, ConstHandle2ConstEnergyAngular energyAngular);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/processed/EnergyAngularMC/src/custom.h"

#undef extern_c
#endif
