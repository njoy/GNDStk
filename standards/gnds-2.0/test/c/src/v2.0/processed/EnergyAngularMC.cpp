
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/processed/EnergyAngularMC.hpp"
#include "EnergyAngularMC.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = EnergyAngularMCClass;
using CPP = multigroup::EnergyAngularMC;

static const std::string CLASSNAME = "EnergyAngularMC";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto energy = [](auto &obj) { return &obj.energy; };
   static auto energyAngular = [](auto &obj) { return &obj.energyAngular; };
}

using CPPEnergy = common::Energy;
using CPPEnergyAngular = transport::EnergyAngular;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstEnergyAngularMC
EnergyAngularMCDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2EnergyAngularMC
EnergyAngularMCDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstEnergyAngularMC
EnergyAngularMCCreateConst(
   const XMLName label,
   const XMLName productFrame,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstEnergyAngular energyAngular
) {
   ConstHandle2EnergyAngularMC handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      productFrame,
      detail::tocpp<CPPEnergy>(energy),
      detail::tocpp<CPPEnergyAngular>(energyAngular)
   );
   return handle;
}

// Create, general
Handle2EnergyAngularMC
EnergyAngularMCCreate(
   const XMLName label,
   const XMLName productFrame,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstEnergyAngular energyAngular
) {
   ConstHandle2EnergyAngularMC handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      productFrame,
      detail::tocpp<CPPEnergy>(energy),
      detail::tocpp<CPPEnergyAngular>(energyAngular)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
EnergyAngularMCAssign(ConstHandle2EnergyAngularMC self, ConstHandle2ConstEnergyAngularMC from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
EnergyAngularMCDelete(ConstHandle2ConstEnergyAngularMC self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
EnergyAngularMCRead(ConstHandle2EnergyAngularMC self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
EnergyAngularMCWrite(ConstHandle2ConstEnergyAngularMC self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
EnergyAngularMCPrint(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
EnergyAngularMCPrintXML(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
EnergyAngularMCPrintJSON(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
EnergyAngularMCLabelHas(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
EnergyAngularMCLabelGet(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
EnergyAngularMCLabelSet(ConstHandle2EnergyAngularMC self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
EnergyAngularMCProductFrameHas(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", self, extract::productFrame);
}

// Get
// Returns by value
XMLName
EnergyAngularMCProductFrameGet(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", self, extract::productFrame);
}

// Set
void
EnergyAngularMCProductFrameSet(ConstHandle2EnergyAngularMC self, const XMLName productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", self, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: energy
// -----------------------------------------------------------------------------

// Has
int
EnergyAngularMCEnergyHas(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EnergyHas", self, extract::energy);
}

// Get, const
Handle2ConstEnergy
EnergyAngularMCEnergyGetConst(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::getField<CPP,Handle2ConstEnergy>
      (CLASSNAME, CLASSNAME+"EnergyGetConst", self, extract::energy);
}

// Get, non-const
Handle2Energy
EnergyAngularMCEnergyGet(ConstHandle2EnergyAngularMC self)
{
   return detail::getField<CPP,Handle2Energy>
      (CLASSNAME, CLASSNAME+"EnergyGet", self, extract::energy);
}

// Set
void
EnergyAngularMCEnergySet(ConstHandle2EnergyAngularMC self, ConstHandle2ConstEnergy energy)
{
   detail::setField<CPP,CPPEnergy>
      (CLASSNAME, CLASSNAME+"EnergySet", self, extract::energy, energy);
}


// -----------------------------------------------------------------------------
// Child: energyAngular
// -----------------------------------------------------------------------------

// Has
int
EnergyAngularMCEnergyAngularHas(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EnergyAngularHas", self, extract::energyAngular);
}

// Get, const
Handle2ConstEnergyAngular
EnergyAngularMCEnergyAngularGetConst(ConstHandle2ConstEnergyAngularMC self)
{
   return detail::getField<CPP,Handle2ConstEnergyAngular>
      (CLASSNAME, CLASSNAME+"EnergyAngularGetConst", self, extract::energyAngular);
}

// Get, non-const
Handle2EnergyAngular
EnergyAngularMCEnergyAngularGet(ConstHandle2EnergyAngularMC self)
{
   return detail::getField<CPP,Handle2EnergyAngular>
      (CLASSNAME, CLASSNAME+"EnergyAngularGet", self, extract::energyAngular);
}

// Set
void
EnergyAngularMCEnergyAngularSet(ConstHandle2EnergyAngularMC self, ConstHandle2ConstEnergyAngular energyAngular)
{
   detail::setField<CPP,CPPEnergyAngular>
      (CLASSNAME, CLASSNAME+"EnergyAngularSet", self, extract::energyAngular, energyAngular);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/processed/EnergyAngularMC/src/custom.cpp"
