
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Regions3d is the basic handle type in this file. Example:
//    // Create a default Regions3d object:
//    Regions3d handle = Regions3dDefault();
// Functions involving Regions3d are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_CONTAINERS_REGIONS3D
#define C_INTERFACE_TEST_V2_0_CONTAINERS_REGIONS3D

#include "GNDStk.h"
#include "v2.0/containers/Axes.h"
#include "v2.0/containers/Function3ds.h"
#include "v2.0/containers/Uncertainty.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct Regions3dClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Regions3d
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct Regions3dClass *Regions3d;

// --- Const-aware handles.
typedef const struct Regions3dClass *const ConstHandle2ConstRegions3d;
typedef       struct Regions3dClass *const ConstHandle2Regions3d;
typedef const struct Regions3dClass *      Handle2ConstRegions3d;
typedef       struct Regions3dClass *      Handle2Regions3d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstRegions3d
Regions3dDefaultConst();

// +++ Create, default
extern_c Handle2Regions3d
Regions3dDefault();

// --- Create, general, const
extern_c Handle2ConstRegions3d
Regions3dCreateConst(
   const XMLName label,
   const Float64 outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction3ds function3ds,
   ConstHandle2ConstUncertainty uncertainty
);

// +++ Create, general
extern_c Handle2Regions3d
Regions3dCreate(
   const XMLName label,
   const Float64 outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction3ds function3ds,
   ConstHandle2ConstUncertainty uncertainty
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
Regions3dAssign(ConstHandle2Regions3d This, ConstHandle2ConstRegions3d from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
Regions3dDelete(ConstHandle2ConstRegions3d This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
Regions3dRead(ConstHandle2Regions3d This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
Regions3dWrite(ConstHandle2ConstRegions3d This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
Regions3dPrint(ConstHandle2ConstRegions3d This);

// +++ Print to standard output, as XML
extern_c int
Regions3dPrintXML(ConstHandle2ConstRegions3d This);

// +++ Print to standard output, as JSON
extern_c int
Regions3dPrintJSON(ConstHandle2ConstRegions3d This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Regions3dLabelHas(ConstHandle2ConstRegions3d This);

// +++ Get
// +++ Returns by value
extern_c XMLName
Regions3dLabelGet(ConstHandle2ConstRegions3d This);

// +++ Set
extern_c void
Regions3dLabelSet(ConstHandle2Regions3d This, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: outerDomainValue
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Regions3dOuterDomainValueHas(ConstHandle2ConstRegions3d This);

// +++ Get
// +++ Returns by value
extern_c Float64
Regions3dOuterDomainValueGet(ConstHandle2ConstRegions3d This);

// +++ Set
extern_c void
Regions3dOuterDomainValueSet(ConstHandle2Regions3d This, const Float64 outerDomainValue);


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Regions3dAxesHas(ConstHandle2ConstRegions3d This);

// --- Get, const
extern_c Handle2ConstAxes
Regions3dAxesGetConst(ConstHandle2ConstRegions3d This);

// +++ Get, non-const
extern_c Handle2Axes
Regions3dAxesGet(ConstHandle2Regions3d This);

// +++ Set
extern_c void
Regions3dAxesSet(ConstHandle2Regions3d This, ConstHandle2ConstAxes axes);


// -----------------------------------------------------------------------------
// Child: function3ds
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Regions3dFunction3dsHas(ConstHandle2ConstRegions3d This);

// --- Get, const
extern_c Handle2ConstFunction3ds
Regions3dFunction3dsGetConst(ConstHandle2ConstRegions3d This);

// +++ Get, non-const
extern_c Handle2Function3ds
Regions3dFunction3dsGet(ConstHandle2Regions3d This);

// +++ Set
extern_c void
Regions3dFunction3dsSet(ConstHandle2Regions3d This, ConstHandle2ConstFunction3ds function3ds);


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Regions3dUncertaintyHas(ConstHandle2ConstRegions3d This);

// --- Get, const
extern_c Handle2ConstUncertainty
Regions3dUncertaintyGetConst(ConstHandle2ConstRegions3d This);

// +++ Get, non-const
extern_c Handle2Uncertainty
Regions3dUncertaintyGet(ConstHandle2Regions3d This);

// +++ Set
extern_c void
Regions3dUncertaintySet(ConstHandle2Regions3d This, ConstHandle2ConstUncertainty uncertainty);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/containers/Regions3d/src/custom.h"

#undef extern_c
#endif
