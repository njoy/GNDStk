
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/containers/Regions3d.hpp"
#include "Regions3d.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = Regions3dClass;
using CPP = multigroup::Regions3d;

static const std::string CLASSNAME = "Regions3d";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto outerDomainValue = [](auto &obj) { return &obj.outerDomainValue; };
   static auto axes = [](auto &obj) { return &obj.axes; };
   static auto function3ds = [](auto &obj) { return &obj.function3ds; };
   static auto uncertainty = [](auto &obj) { return &obj.uncertainty; };
}

using CPPAxes = containers::Axes;
using CPPFunction3ds = containers::Function3ds;
using CPPUncertainty = containers::Uncertainty;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstRegions3d
Regions3dDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Regions3d
Regions3dDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstRegions3d
Regions3dCreateConst(
   const XMLName label,
   const Float64 outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction3ds function3ds,
   ConstHandle2ConstUncertainty uncertainty
) {
   ConstHandle2Regions3d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      outerDomainValue,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPFunction3ds>(function3ds),
      detail::tocpp<CPPUncertainty>(uncertainty)
   );
   return handle;
}

// Create, general
Handle2Regions3d
Regions3dCreate(
   const XMLName label,
   const Float64 outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction3ds function3ds,
   ConstHandle2ConstUncertainty uncertainty
) {
   ConstHandle2Regions3d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      outerDomainValue,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPFunction3ds>(function3ds),
      detail::tocpp<CPPUncertainty>(uncertainty)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
Regions3dAssign(ConstHandle2Regions3d This, ConstHandle2ConstRegions3d from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
Regions3dDelete(ConstHandle2ConstRegions3d This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
Regions3dRead(ConstHandle2Regions3d This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
Regions3dWrite(ConstHandle2ConstRegions3d This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
Regions3dPrint(ConstHandle2ConstRegions3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
Regions3dPrintXML(ConstHandle2ConstRegions3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
Regions3dPrintJSON(ConstHandle2ConstRegions3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
Regions3dLabelHas(ConstHandle2ConstRegions3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
Regions3dLabelGet(ConstHandle2ConstRegions3d This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
Regions3dLabelSet(ConstHandle2Regions3d This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: outerDomainValue
// -----------------------------------------------------------------------------

// Has
int
Regions3dOuterDomainValueHas(ConstHandle2ConstRegions3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueHas", This, extract::outerDomainValue);
}

// Get
// Returns by value
Float64
Regions3dOuterDomainValueGet(ConstHandle2ConstRegions3d This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueGet", This, extract::outerDomainValue);
}

// Set
void
Regions3dOuterDomainValueSet(ConstHandle2Regions3d This, const Float64 outerDomainValue)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueSet", This, extract::outerDomainValue, outerDomainValue);
}


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// Has
int
Regions3dAxesHas(ConstHandle2ConstRegions3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AxesHas", This, extract::axes);
}

// Get, const
Handle2ConstAxes
Regions3dAxesGetConst(ConstHandle2ConstRegions3d This)
{
   return detail::getField<CPP,Handle2ConstAxes>
      (CLASSNAME, CLASSNAME+"AxesGetConst", This, extract::axes);
}

// Get, non-const
Handle2Axes
Regions3dAxesGet(ConstHandle2Regions3d This)
{
   return detail::getField<CPP,Handle2Axes>
      (CLASSNAME, CLASSNAME+"AxesGet", This, extract::axes);
}

// Set
void
Regions3dAxesSet(ConstHandle2Regions3d This, ConstHandle2ConstAxes axes)
{
   detail::setField<CPP,CPPAxes>
      (CLASSNAME, CLASSNAME+"AxesSet", This, extract::axes, axes);
}


// -----------------------------------------------------------------------------
// Child: function3ds
// -----------------------------------------------------------------------------

// Has
int
Regions3dFunction3dsHas(ConstHandle2ConstRegions3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Function3dsHas", This, extract::function3ds);
}

// Get, const
Handle2ConstFunction3ds
Regions3dFunction3dsGetConst(ConstHandle2ConstRegions3d This)
{
   return detail::getField<CPP,Handle2ConstFunction3ds>
      (CLASSNAME, CLASSNAME+"Function3dsGetConst", This, extract::function3ds);
}

// Get, non-const
Handle2Function3ds
Regions3dFunction3dsGet(ConstHandle2Regions3d This)
{
   return detail::getField<CPP,Handle2Function3ds>
      (CLASSNAME, CLASSNAME+"Function3dsGet", This, extract::function3ds);
}

// Set
void
Regions3dFunction3dsSet(ConstHandle2Regions3d This, ConstHandle2ConstFunction3ds function3ds)
{
   detail::setField<CPP,CPPFunction3ds>
      (CLASSNAME, CLASSNAME+"Function3dsSet", This, extract::function3ds, function3ds);
}


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// Has
int
Regions3dUncertaintyHas(ConstHandle2ConstRegions3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UncertaintyHas", This, extract::uncertainty);
}

// Get, const
Handle2ConstUncertainty
Regions3dUncertaintyGetConst(ConstHandle2ConstRegions3d This)
{
   return detail::getField<CPP,Handle2ConstUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGetConst", This, extract::uncertainty);
}

// Get, non-const
Handle2Uncertainty
Regions3dUncertaintyGet(ConstHandle2Regions3d This)
{
   return detail::getField<CPP,Handle2Uncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGet", This, extract::uncertainty);
}

// Set
void
Regions3dUncertaintySet(ConstHandle2Regions3d This, ConstHandle2ConstUncertainty uncertainty)
{
   detail::setField<CPP,CPPUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintySet", This, extract::uncertainty, uncertainty);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/containers/Regions3d/src/custom.cpp"
