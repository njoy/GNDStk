
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/containers/Polynomial1d.hpp"
#include "Polynomial1d.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = Polynomial1dClass;
using CPP = multigroup::Polynomial1d;

static const std::string CLASSNAME = "Polynomial1d";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto outerDomainValue = [](auto &obj) { return &obj.outerDomainValue; };
   static auto lowerIndex = [](auto &obj) { return &obj.lowerIndex; };
   static auto domainMin = [](auto &obj) { return &obj.domainMin; };
   static auto domainMax = [](auto &obj) { return &obj.domainMax; };
   static auto axes = [](auto &obj) { return &obj.axes; };
   static auto uncertainty = [](auto &obj) { return &obj.uncertainty; };
   static auto values = [](auto &obj) { return &obj.values; };
}

using CPPAxes = containers::Axes;
using CPPUncertainty = extra::Uncertainty;
using CPPValues = containers::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstPolynomial1d
Polynomial1dDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Polynomial1d
Polynomial1dDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstPolynomial1d
Polynomial1dCreateConst(
   const XMLName label,
   const Float64 outerDomainValue,
   const Integer32 lowerIndex,
   const Float64 domainMin,
   const Float64 domainMax,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstUncertainty uncertainty,
   ConstHandle2ConstValues values
) {
   ConstHandle2Polynomial1d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      outerDomainValue,
      lowerIndex,
      domainMin,
      domainMax,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPUncertainty>(uncertainty),
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Create, general
Handle2Polynomial1d
Polynomial1dCreate(
   const XMLName label,
   const Float64 outerDomainValue,
   const Integer32 lowerIndex,
   const Float64 domainMin,
   const Float64 domainMax,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstUncertainty uncertainty,
   ConstHandle2ConstValues values
) {
   ConstHandle2Polynomial1d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      outerDomainValue,
      lowerIndex,
      domainMin,
      domainMax,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPUncertainty>(uncertainty),
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
Polynomial1dAssign(ConstHandle2Polynomial1d self, ConstHandle2ConstPolynomial1d from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
Polynomial1dDelete(ConstHandle2ConstPolynomial1d self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
Polynomial1dRead(ConstHandle2Polynomial1d self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
Polynomial1dWrite(ConstHandle2ConstPolynomial1d self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
Polynomial1dPrint(ConstHandle2ConstPolynomial1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
Polynomial1dPrintXML(ConstHandle2ConstPolynomial1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
Polynomial1dPrintJSON(ConstHandle2ConstPolynomial1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dLabelHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
Polynomial1dLabelGet(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
Polynomial1dLabelSet(ConstHandle2Polynomial1d self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: outerDomainValue
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dOuterDomainValueHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueHas", self, extract::outerDomainValue);
}

// Get
// Returns by value
Float64
Polynomial1dOuterDomainValueGet(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueGet", self, extract::outerDomainValue);
}

// Set
void
Polynomial1dOuterDomainValueSet(ConstHandle2Polynomial1d self, const Float64 outerDomainValue)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueSet", self, extract::outerDomainValue, outerDomainValue);
}


// -----------------------------------------------------------------------------
// Metadatum: lowerIndex
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dLowerIndexHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LowerIndexHas", self, extract::lowerIndex);
}

// Get
// Returns by value
Integer32
Polynomial1dLowerIndexGet(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LowerIndexGet", self, extract::lowerIndex);
}

// Set
void
Polynomial1dLowerIndexSet(ConstHandle2Polynomial1d self, const Integer32 lowerIndex)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LowerIndexSet", self, extract::lowerIndex, lowerIndex);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMin
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dDomainMinHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinHas", self, extract::domainMin);
}

// Get
// Returns by value
Float64
Polynomial1dDomainMinGet(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinGet", self, extract::domainMin);
}

// Set
void
Polynomial1dDomainMinSet(ConstHandle2Polynomial1d self, const Float64 domainMin)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinSet", self, extract::domainMin, domainMin);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMax
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dDomainMaxHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxHas", self, extract::domainMax);
}

// Get
// Returns by value
Float64
Polynomial1dDomainMaxGet(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxGet", self, extract::domainMax);
}

// Set
void
Polynomial1dDomainMaxSet(ConstHandle2Polynomial1d self, const Float64 domainMax)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxSet", self, extract::domainMax, domainMax);
}


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dAxesHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AxesHas", self, extract::axes);
}

// Get, const
Handle2ConstAxes
Polynomial1dAxesGetConst(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP,Handle2ConstAxes>
      (CLASSNAME, CLASSNAME+"AxesGetConst", self, extract::axes);
}

// Get, non-const
Handle2Axes
Polynomial1dAxesGet(ConstHandle2Polynomial1d self)
{
   return detail::getField<CPP,Handle2Axes>
      (CLASSNAME, CLASSNAME+"AxesGet", self, extract::axes);
}

// Set
void
Polynomial1dAxesSet(ConstHandle2Polynomial1d self, ConstHandle2ConstAxes axes)
{
   detail::setField<CPP,CPPAxes>
      (CLASSNAME, CLASSNAME+"AxesSet", self, extract::axes, axes);
}


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dUncertaintyHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UncertaintyHas", self, extract::uncertainty);
}

// Get, const
Handle2ConstUncertainty
Polynomial1dUncertaintyGetConst(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP,Handle2ConstUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGetConst", self, extract::uncertainty);
}

// Get, non-const
Handle2Uncertainty
Polynomial1dUncertaintyGet(ConstHandle2Polynomial1d self)
{
   return detail::getField<CPP,Handle2Uncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGet", self, extract::uncertainty);
}

// Set
void
Polynomial1dUncertaintySet(ConstHandle2Polynomial1d self, ConstHandle2ConstUncertainty uncertainty)
{
   detail::setField<CPP,CPPUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintySet", self, extract::uncertainty, uncertainty);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
Polynomial1dValuesHas(ConstHandle2ConstPolynomial1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", self, extract::values);
}

// Get, const
Handle2ConstValues
Polynomial1dValuesGetConst(ConstHandle2ConstPolynomial1d self)
{
   return detail::getField<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", self, extract::values);
}

// Get, non-const
Handle2Values
Polynomial1dValuesGet(ConstHandle2Polynomial1d self)
{
   return detail::getField<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", self, extract::values);
}

// Set
void
Polynomial1dValuesSet(ConstHandle2Polynomial1d self, ConstHandle2ConstValues values)
{
   detail::setField<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", self, extract::values, values);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/containers/Polynomial1d/src/custom.cpp"
