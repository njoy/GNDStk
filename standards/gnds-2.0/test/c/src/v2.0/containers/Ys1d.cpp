
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/containers/Ys1d.hpp"
#include "Ys1d.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = Ys1dClass;
using CPP = multigroup::Ys1d;

static const std::string CLASSNAME = "Ys1d";

namespace extract {
   static auto interpolation = [](auto &obj) { return &obj.interpolation; };
   static auto label = [](auto &obj) { return &obj.label; };
   static auto axes = [](auto &obj) { return &obj.axes; };
   static auto values = [](auto &obj) { return &obj.values; };
}

using CPPAxes = containers::Axes;
using CPPValues = containers::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstYs1d
Ys1dDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Ys1d
Ys1dDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstYs1d
Ys1dCreateConst(
   const enums::Interpolation interpolation,
   const XMLName label,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstValues values
) {
   ConstHandle2Ys1d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      interpolation,
      label,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Create, general
Handle2Ys1d
Ys1dCreate(
   const enums::Interpolation interpolation,
   const XMLName label,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstValues values
) {
   ConstHandle2Ys1d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      interpolation,
      label,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
Ys1dAssign(ConstHandle2Ys1d self, ConstHandle2ConstYs1d from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
Ys1dDelete(ConstHandle2ConstYs1d self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
Ys1dRead(ConstHandle2Ys1d self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
Ys1dWrite(ConstHandle2ConstYs1d self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
Ys1dPrint(ConstHandle2ConstYs1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
Ys1dPrintXML(ConstHandle2ConstYs1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
Ys1dPrintJSON(ConstHandle2ConstYs1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: interpolation
// -----------------------------------------------------------------------------

// Has
int
Ys1dInterpolationHas(ConstHandle2ConstYs1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationHas", self, extract::interpolation);
}

// Get
// Returns by value
enums::Interpolation
Ys1dInterpolationGet(ConstHandle2ConstYs1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationGet", self, extract::interpolation);
}

// Set
void
Ys1dInterpolationSet(ConstHandle2Ys1d self, const enums::Interpolation interpolation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationSet", self, extract::interpolation, interpolation);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
Ys1dLabelHas(ConstHandle2ConstYs1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
Ys1dLabelGet(ConstHandle2ConstYs1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
Ys1dLabelSet(ConstHandle2Ys1d self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// Has
int
Ys1dAxesHas(ConstHandle2ConstYs1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AxesHas", self, extract::axes);
}

// Get, const
Handle2ConstAxes
Ys1dAxesGetConst(ConstHandle2ConstYs1d self)
{
   return detail::getField<CPP,Handle2ConstAxes>
      (CLASSNAME, CLASSNAME+"AxesGetConst", self, extract::axes);
}

// Get, non-const
Handle2Axes
Ys1dAxesGet(ConstHandle2Ys1d self)
{
   return detail::getField<CPP,Handle2Axes>
      (CLASSNAME, CLASSNAME+"AxesGet", self, extract::axes);
}

// Set
void
Ys1dAxesSet(ConstHandle2Ys1d self, ConstHandle2ConstAxes axes)
{
   detail::setField<CPP,CPPAxes>
      (CLASSNAME, CLASSNAME+"AxesSet", self, extract::axes, axes);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
Ys1dValuesHas(ConstHandle2ConstYs1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", self, extract::values);
}

// Get, const
Handle2ConstValues
Ys1dValuesGetConst(ConstHandle2ConstYs1d self)
{
   return detail::getField<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", self, extract::values);
}

// Get, non-const
Handle2Values
Ys1dValuesGet(ConstHandle2Ys1d self)
{
   return detail::getField<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", self, extract::values);
}

// Set
void
Ys1dValuesSet(ConstHandle2Ys1d self, ConstHandle2ConstValues values)
{
   detail::setField<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", self, extract::values, values);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/containers/Ys1d/src/custom.cpp"
