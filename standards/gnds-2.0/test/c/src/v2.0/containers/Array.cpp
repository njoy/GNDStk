
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/containers/Array.hpp"
#include "Array.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ArrayClass;
using CPP = multigroup::Array;

static const std::string CLASSNAME = "Array";

namespace extract {
   static auto shape = [](auto &obj) { return &obj.shape; };
   static auto compression = [](auto &obj) { return &obj.compression; };
   static auto symmetry = [](auto &obj) { return &obj.symmetry; };
   static auto permutation = [](auto &obj) { return &obj.permutation; };
   static auto storageOrder = [](auto &obj) { return &obj.storageOrder; };
   static auto offset = [](auto &obj) { return &obj.offset; };
   static auto values = [](auto &obj) { return &obj.values; };
   static auto array = [](auto &obj) { return &obj.array; };
}

using CPPValues = containers::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstArray
ArrayDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Array
ArrayDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstArray
ArrayCreateConst(
   const IntegerTuple shape,
   const UTF8Text compression,
   const UTF8Text symmetry,
   const UTF8Text permutation,
   const UTF8Text storageOrder,
   const IntegerTuple offset,
   ConstHandle2Values *const values, const size_t valuesSize,
   ConstHandle2Array *const array, const size_t arraySize
) {
   ConstHandle2Array handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      shape,
      compression,
      symmetry,
      permutation,
      storageOrder,
      offset,
      std::vector<CPPValues>{},
      std::vector<CPPArray>{}
   );
   for (size_t ValuesN = 0; ValuesN < valuesSize; ++ValuesN)
      ArrayValuesAdd(handle, values[ValuesN]);
   for (size_t ArrayN = 0; ArrayN < arraySize; ++ArrayN)
      ArrayArrayAdd(handle, array[ArrayN]);
   return handle;
}

// Create, general
Handle2Array
ArrayCreate(
   const IntegerTuple shape,
   const UTF8Text compression,
   const UTF8Text symmetry,
   const UTF8Text permutation,
   const UTF8Text storageOrder,
   const IntegerTuple offset,
   ConstHandle2Values *const values, const size_t valuesSize,
   ConstHandle2Array *const array, const size_t arraySize
) {
   ConstHandle2Array handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      shape,
      compression,
      symmetry,
      permutation,
      storageOrder,
      offset,
      std::vector<CPPValues>{},
      std::vector<CPPArray>{}
   );
   for (size_t ValuesN = 0; ValuesN < valuesSize; ++ValuesN)
      ArrayValuesAdd(handle, values[ValuesN]);
   for (size_t ArrayN = 0; ArrayN < arraySize; ++ArrayN)
      ArrayArrayAdd(handle, array[ArrayN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ArrayAssign(ConstHandle2Array self, ConstHandle2ConstArray from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ArrayDelete(ConstHandle2ConstArray self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ArrayRead(ConstHandle2Array self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ArrayWrite(ConstHandle2ConstArray self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ArrayPrint(ConstHandle2ConstArray self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ArrayPrintXML(ConstHandle2ConstArray self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ArrayPrintJSON(ConstHandle2ConstArray self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: shape
// -----------------------------------------------------------------------------

// Has
int
ArrayShapeHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ShapeHas", self, extract::shape);
}

// Get
// Returns by value
IntegerTuple
ArrayShapeGet(ConstHandle2ConstArray self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ShapeGet", self, extract::shape);
}

// Set
void
ArrayShapeSet(ConstHandle2Array self, const IntegerTuple shape)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ShapeSet", self, extract::shape, shape);
}


// -----------------------------------------------------------------------------
// Metadatum: compression
// -----------------------------------------------------------------------------

// Has
int
ArrayCompressionHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CompressionHas", self, extract::compression);
}

// Get
// Returns by value
UTF8Text
ArrayCompressionGet(ConstHandle2ConstArray self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CompressionGet", self, extract::compression);
}

// Set
void
ArrayCompressionSet(ConstHandle2Array self, const UTF8Text compression)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CompressionSet", self, extract::compression, compression);
}


// -----------------------------------------------------------------------------
// Metadatum: symmetry
// -----------------------------------------------------------------------------

// Has
int
ArraySymmetryHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SymmetryHas", self, extract::symmetry);
}

// Get
// Returns by value
UTF8Text
ArraySymmetryGet(ConstHandle2ConstArray self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"SymmetryGet", self, extract::symmetry);
}

// Set
void
ArraySymmetrySet(ConstHandle2Array self, const UTF8Text symmetry)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"SymmetrySet", self, extract::symmetry, symmetry);
}


// -----------------------------------------------------------------------------
// Metadatum: permutation
// -----------------------------------------------------------------------------

// Has
int
ArrayPermutationHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PermutationHas", self, extract::permutation);
}

// Get
// Returns by value
UTF8Text
ArrayPermutationGet(ConstHandle2ConstArray self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PermutationGet", self, extract::permutation);
}

// Set
void
ArrayPermutationSet(ConstHandle2Array self, const UTF8Text permutation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PermutationSet", self, extract::permutation, permutation);
}


// -----------------------------------------------------------------------------
// Metadatum: storageOrder
// -----------------------------------------------------------------------------

// Has
int
ArrayStorageOrderHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StorageOrderHas", self, extract::storageOrder);
}

// Get
// Returns by value
UTF8Text
ArrayStorageOrderGet(ConstHandle2ConstArray self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"StorageOrderGet", self, extract::storageOrder);
}

// Set
void
ArrayStorageOrderSet(ConstHandle2Array self, const UTF8Text storageOrder)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"StorageOrderSet", self, extract::storageOrder, storageOrder);
}


// -----------------------------------------------------------------------------
// Metadatum: offset
// -----------------------------------------------------------------------------

// Has
int
ArrayOffsetHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OffsetHas", self, extract::offset);
}

// Get
// Returns by value
IntegerTuple
ArrayOffsetGet(ConstHandle2ConstArray self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"OffsetGet", self, extract::offset);
}

// Set
void
ArrayOffsetSet(ConstHandle2Array self, const IntegerTuple offset)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"OffsetSet", self, extract::offset, offset);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
ArrayValuesHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", self, extract::values);
}

// Clear
void
ArrayValuesClear(ConstHandle2Array self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ValuesClear", self, extract::values);
}

// Size
size_t
ArrayValuesSize(ConstHandle2ConstArray self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ValuesSize", self, extract::values);
}

// Add
void
ArrayValuesAdd(ConstHandle2Array self, ConstHandle2ConstValues values)
{
   detail::addToContainer<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesAdd", self, extract::values, values);
}

// Get, by index \in [0,size), const
Handle2ConstValues
ArrayValuesGetConst(ConstHandle2ConstArray self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", self, extract::values, index_);
}

// Get, by index \in [0,size), non-const
Handle2Values
ArrayValuesGet(ConstHandle2Array self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", self, extract::values, index_);
}

// Set, by index \in [0,size)
void
ArrayValuesSet(
   ConstHandle2Array self,
   const size_t index_,
   ConstHandle2ConstValues values
) {
   detail::setByIndex<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", self, extract::values, index_, values);
}

// Has, by valueType
int
ArrayValuesHasByValueType(
   ConstHandle2ConstArray self,
   const UTF8Text valueType
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHasByValueType",
       self, extract::values, meta::valueType, valueType);
}

// Get, by valueType, const
Handle2ConstValues
ArrayValuesGetByValueTypeConst(
   ConstHandle2ConstArray self,
   const UTF8Text valueType
) {
   return detail::getByMetadatum<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetByValueTypeConst",
       self, extract::values, meta::valueType, valueType);
}

// Get, by valueType, non-const
Handle2Values
ArrayValuesGetByValueType(
   ConstHandle2Array self,
   const UTF8Text valueType
) {
   return detail::getByMetadatum<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGetByValueType",
       self, extract::values, meta::valueType, valueType);
}

// Set, by valueType
void
ArrayValuesSetByValueType(
   ConstHandle2Array self,
   const UTF8Text valueType,
   ConstHandle2ConstValues values
) {
   detail::setByMetadatum<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSetByValueType",
       self, extract::values, meta::valueType, valueType, values);
}

// Has, by start
int
ArrayValuesHasByStart(
   ConstHandle2ConstArray self,
   const Integer32 start
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHasByStart",
       self, extract::values, meta::start, start);
}

// Get, by start, const
Handle2ConstValues
ArrayValuesGetByStartConst(
   ConstHandle2ConstArray self,
   const Integer32 start
) {
   return detail::getByMetadatum<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetByStartConst",
       self, extract::values, meta::start, start);
}

// Get, by start, non-const
Handle2Values
ArrayValuesGetByStart(
   ConstHandle2Array self,
   const Integer32 start
) {
   return detail::getByMetadatum<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGetByStart",
       self, extract::values, meta::start, start);
}

// Set, by start
void
ArrayValuesSetByStart(
   ConstHandle2Array self,
   const Integer32 start,
   ConstHandle2ConstValues values
) {
   detail::setByMetadatum<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSetByStart",
       self, extract::values, meta::start, start, values);
}

// Has, by length
int
ArrayValuesHasByLength(
   ConstHandle2ConstArray self,
   const Integer32 length
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHasByLength",
       self, extract::values, meta::length, length);
}

// Get, by length, const
Handle2ConstValues
ArrayValuesGetByLengthConst(
   ConstHandle2ConstArray self,
   const Integer32 length
) {
   return detail::getByMetadatum<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetByLengthConst",
       self, extract::values, meta::length, length);
}

// Get, by length, non-const
Handle2Values
ArrayValuesGetByLength(
   ConstHandle2Array self,
   const Integer32 length
) {
   return detail::getByMetadatum<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGetByLength",
       self, extract::values, meta::length, length);
}

// Set, by length
void
ArrayValuesSetByLength(
   ConstHandle2Array self,
   const Integer32 length,
   ConstHandle2ConstValues values
) {
   detail::setByMetadatum<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSetByLength",
       self, extract::values, meta::length, length, values);
}

// Has, by href
int
ArrayValuesHasByHref(
   ConstHandle2ConstArray self,
   const UTF8Text href
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHasByHref",
       self, extract::values, meta::href, href);
}

// Get, by href, const
Handle2ConstValues
ArrayValuesGetByHrefConst(
   ConstHandle2ConstArray self,
   const UTF8Text href
) {
   return detail::getByMetadatum<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetByHrefConst",
       self, extract::values, meta::href, href);
}

// Get, by href, non-const
Handle2Values
ArrayValuesGetByHref(
   ConstHandle2Array self,
   const UTF8Text href
) {
   return detail::getByMetadatum<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGetByHref",
       self, extract::values, meta::href, href);
}

// Set, by href
void
ArrayValuesSetByHref(
   ConstHandle2Array self,
   const UTF8Text href,
   ConstHandle2ConstValues values
) {
   detail::setByMetadatum<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSetByHref",
       self, extract::values, meta::href, href, values);
}

// Has, by startIndex
int
ArrayValuesHasByStartIndex(
   ConstHandle2ConstArray self,
   const Integer32 startIndex
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHasByStartIndex",
       self, extract::values, meta::startIndex, startIndex);
}

// Get, by startIndex, const
Handle2ConstValues
ArrayValuesGetByStartIndexConst(
   ConstHandle2ConstArray self,
   const Integer32 startIndex
) {
   return detail::getByMetadatum<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetByStartIndexConst",
       self, extract::values, meta::startIndex, startIndex);
}

// Get, by startIndex, non-const
Handle2Values
ArrayValuesGetByStartIndex(
   ConstHandle2Array self,
   const Integer32 startIndex
) {
   return detail::getByMetadatum<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGetByStartIndex",
       self, extract::values, meta::startIndex, startIndex);
}

// Set, by startIndex
void
ArrayValuesSetByStartIndex(
   ConstHandle2Array self,
   const Integer32 startIndex,
   ConstHandle2ConstValues values
) {
   detail::setByMetadatum<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSetByStartIndex",
       self, extract::values, meta::startIndex, startIndex, values);
}

// Has, by count
int
ArrayValuesHasByCount(
   ConstHandle2ConstArray self,
   const Integer32 count
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHasByCount",
       self, extract::values, meta::count, count);
}

// Get, by count, const
Handle2ConstValues
ArrayValuesGetByCountConst(
   ConstHandle2ConstArray self,
   const Integer32 count
) {
   return detail::getByMetadatum<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetByCountConst",
       self, extract::values, meta::count, count);
}

// Get, by count, non-const
Handle2Values
ArrayValuesGetByCount(
   ConstHandle2Array self,
   const Integer32 count
) {
   return detail::getByMetadatum<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGetByCount",
       self, extract::values, meta::count, count);
}

// Set, by count
void
ArrayValuesSetByCount(
   ConstHandle2Array self,
   const Integer32 count,
   ConstHandle2ConstValues values
) {
   detail::setByMetadatum<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSetByCount",
       self, extract::values, meta::count, count, values);
}


// -----------------------------------------------------------------------------
// Child: array
// -----------------------------------------------------------------------------

// Has
int
ArrayArrayHas(ConstHandle2ConstArray self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHas", self, extract::array);
}

// Clear
void
ArrayArrayClear(ConstHandle2Array self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ArrayClear", self, extract::array);
}

// Size
size_t
ArrayArraySize(ConstHandle2ConstArray self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ArraySize", self, extract::array);
}

// Add
void
ArrayArrayAdd(ConstHandle2Array self, ConstHandle2ConstArray array)
{
   detail::addToContainer<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArrayAdd", self, extract::array, array);
}

// Get, by index \in [0,size), const
Handle2ConstArray
ArrayArrayGetConst(ConstHandle2ConstArray self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetConst", self, extract::array, index_);
}

// Get, by index \in [0,size), non-const
Handle2Array
ArrayArrayGet(ConstHandle2Array self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGet", self, extract::array, index_);
}

// Set, by index \in [0,size)
void
ArrayArraySet(
   ConstHandle2Array self,
   const size_t index_,
   ConstHandle2ConstArray array
) {
   detail::setByIndex<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySet", self, extract::array, index_, array);
}

// Has, by shape
int
ArrayArrayHasByShape(
   ConstHandle2ConstArray self,
   const IntegerTuple shape
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHasByShape",
       self, extract::array, meta::shape, shape);
}

// Get, by shape, const
Handle2ConstArray
ArrayArrayGetByShapeConst(
   ConstHandle2ConstArray self,
   const IntegerTuple shape
) {
   return detail::getByMetadatum<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetByShapeConst",
       self, extract::array, meta::shape, shape);
}

// Get, by shape, non-const
Handle2Array
ArrayArrayGetByShape(
   ConstHandle2Array self,
   const IntegerTuple shape
) {
   return detail::getByMetadatum<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGetByShape",
       self, extract::array, meta::shape, shape);
}

// Set, by shape
void
ArrayArraySetByShape(
   ConstHandle2Array self,
   const IntegerTuple shape,
   ConstHandle2ConstArray array
) {
   detail::setByMetadatum<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySetByShape",
       self, extract::array, meta::shape, shape, array);
}

// Has, by compression
int
ArrayArrayHasByCompression(
   ConstHandle2ConstArray self,
   const UTF8Text compression
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHasByCompression",
       self, extract::array, meta::compression, compression);
}

// Get, by compression, const
Handle2ConstArray
ArrayArrayGetByCompressionConst(
   ConstHandle2ConstArray self,
   const UTF8Text compression
) {
   return detail::getByMetadatum<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetByCompressionConst",
       self, extract::array, meta::compression, compression);
}

// Get, by compression, non-const
Handle2Array
ArrayArrayGetByCompression(
   ConstHandle2Array self,
   const UTF8Text compression
) {
   return detail::getByMetadatum<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGetByCompression",
       self, extract::array, meta::compression, compression);
}

// Set, by compression
void
ArrayArraySetByCompression(
   ConstHandle2Array self,
   const UTF8Text compression,
   ConstHandle2ConstArray array
) {
   detail::setByMetadatum<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySetByCompression",
       self, extract::array, meta::compression, compression, array);
}

// Has, by symmetry
int
ArrayArrayHasBySymmetry(
   ConstHandle2ConstArray self,
   const UTF8Text symmetry
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHasBySymmetry",
       self, extract::array, meta::symmetry, symmetry);
}

// Get, by symmetry, const
Handle2ConstArray
ArrayArrayGetBySymmetryConst(
   ConstHandle2ConstArray self,
   const UTF8Text symmetry
) {
   return detail::getByMetadatum<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetBySymmetryConst",
       self, extract::array, meta::symmetry, symmetry);
}

// Get, by symmetry, non-const
Handle2Array
ArrayArrayGetBySymmetry(
   ConstHandle2Array self,
   const UTF8Text symmetry
) {
   return detail::getByMetadatum<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGetBySymmetry",
       self, extract::array, meta::symmetry, symmetry);
}

// Set, by symmetry
void
ArrayArraySetBySymmetry(
   ConstHandle2Array self,
   const UTF8Text symmetry,
   ConstHandle2ConstArray array
) {
   detail::setByMetadatum<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySetBySymmetry",
       self, extract::array, meta::symmetry, symmetry, array);
}

// Has, by permutation
int
ArrayArrayHasByPermutation(
   ConstHandle2ConstArray self,
   const UTF8Text permutation
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHasByPermutation",
       self, extract::array, meta::permutation, permutation);
}

// Get, by permutation, const
Handle2ConstArray
ArrayArrayGetByPermutationConst(
   ConstHandle2ConstArray self,
   const UTF8Text permutation
) {
   return detail::getByMetadatum<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetByPermutationConst",
       self, extract::array, meta::permutation, permutation);
}

// Get, by permutation, non-const
Handle2Array
ArrayArrayGetByPermutation(
   ConstHandle2Array self,
   const UTF8Text permutation
) {
   return detail::getByMetadatum<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGetByPermutation",
       self, extract::array, meta::permutation, permutation);
}

// Set, by permutation
void
ArrayArraySetByPermutation(
   ConstHandle2Array self,
   const UTF8Text permutation,
   ConstHandle2ConstArray array
) {
   detail::setByMetadatum<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySetByPermutation",
       self, extract::array, meta::permutation, permutation, array);
}

// Has, by storageOrder
int
ArrayArrayHasByStorageOrder(
   ConstHandle2ConstArray self,
   const UTF8Text storageOrder
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHasByStorageOrder",
       self, extract::array, meta::storageOrder, storageOrder);
}

// Get, by storageOrder, const
Handle2ConstArray
ArrayArrayGetByStorageOrderConst(
   ConstHandle2ConstArray self,
   const UTF8Text storageOrder
) {
   return detail::getByMetadatum<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetByStorageOrderConst",
       self, extract::array, meta::storageOrder, storageOrder);
}

// Get, by storageOrder, non-const
Handle2Array
ArrayArrayGetByStorageOrder(
   ConstHandle2Array self,
   const UTF8Text storageOrder
) {
   return detail::getByMetadatum<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGetByStorageOrder",
       self, extract::array, meta::storageOrder, storageOrder);
}

// Set, by storageOrder
void
ArrayArraySetByStorageOrder(
   ConstHandle2Array self,
   const UTF8Text storageOrder,
   ConstHandle2ConstArray array
) {
   detail::setByMetadatum<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySetByStorageOrder",
       self, extract::array, meta::storageOrder, storageOrder, array);
}

// Has, by offset
int
ArrayArrayHasByOffset(
   ConstHandle2ConstArray self,
   const IntegerTuple offset
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHasByOffset",
       self, extract::array, meta::offset, offset);
}

// Get, by offset, const
Handle2ConstArray
ArrayArrayGetByOffsetConst(
   ConstHandle2ConstArray self,
   const IntegerTuple offset
) {
   return detail::getByMetadatum<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetByOffsetConst",
       self, extract::array, meta::offset, offset);
}

// Get, by offset, non-const
Handle2Array
ArrayArrayGetByOffset(
   ConstHandle2Array self,
   const IntegerTuple offset
) {
   return detail::getByMetadatum<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGetByOffset",
       self, extract::array, meta::offset, offset);
}

// Set, by offset
void
ArrayArraySetByOffset(
   ConstHandle2Array self,
   const IntegerTuple offset,
   ConstHandle2ConstArray array
) {
   detail::setByMetadatum<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySetByOffset",
       self, extract::array, meta::offset, offset, array);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/containers/Array/src/custom.cpp"
