
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// DelayedNeutrons is the basic handle type in this file. Example:
//    // Create a default DelayedNeutrons object:
//    DelayedNeutrons handle = DelayedNeutronsDefault();
// Functions involving DelayedNeutrons are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_FISSIONFRAGMENTDATA_DELAYEDNEUTRONS
#define C_INTERFACE_TEST_V2_0_FISSIONFRAGMENTDATA_DELAYEDNEUTRONS

#include "GNDStk.h"
#include "v2.0/fissionFragmentData/DelayedNeutron.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct DelayedNeutronsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ DelayedNeutrons
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct DelayedNeutronsClass *DelayedNeutrons;

// --- Const-aware handles.
typedef const struct DelayedNeutronsClass *const ConstHandle2ConstDelayedNeutrons;
typedef       struct DelayedNeutronsClass *const ConstHandle2DelayedNeutrons;
typedef const struct DelayedNeutronsClass *      Handle2ConstDelayedNeutrons;
typedef       struct DelayedNeutronsClass *      Handle2DelayedNeutrons;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstDelayedNeutrons
DelayedNeutronsDefaultConst();

// +++ Create, default
extern_c Handle2DelayedNeutrons
DelayedNeutronsDefault();

// --- Create, general, const
extern_c Handle2ConstDelayedNeutrons
DelayedNeutronsCreateConst(
   ConstHandle2DelayedNeutron *const delayedNeutron, const size_t delayedNeutronSize
);

// +++ Create, general
extern_c Handle2DelayedNeutrons
DelayedNeutronsCreate(
   ConstHandle2DelayedNeutron *const delayedNeutron, const size_t delayedNeutronSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
DelayedNeutronsAssign(ConstHandle2DelayedNeutrons This, ConstHandle2ConstDelayedNeutrons from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
DelayedNeutronsDelete(ConstHandle2ConstDelayedNeutrons This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
DelayedNeutronsRead(ConstHandle2DelayedNeutrons This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
DelayedNeutronsWrite(ConstHandle2ConstDelayedNeutrons This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
DelayedNeutronsPrint(ConstHandle2ConstDelayedNeutrons This);

// +++ Print to standard output, as XML
extern_c int
DelayedNeutronsPrintXML(ConstHandle2ConstDelayedNeutrons This);

// +++ Print to standard output, as JSON
extern_c int
DelayedNeutronsPrintJSON(ConstHandle2ConstDelayedNeutrons This);


// -----------------------------------------------------------------------------
// Child: delayedNeutron
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
DelayedNeutronsDelayedNeutronHas(ConstHandle2ConstDelayedNeutrons This);

// +++ Clear
extern_c void
DelayedNeutronsDelayedNeutronClear(ConstHandle2DelayedNeutrons This);

// +++ Size
extern_c size_t
DelayedNeutronsDelayedNeutronSize(ConstHandle2ConstDelayedNeutrons This);

// +++ Add
extern_c void
DelayedNeutronsDelayedNeutronAdd(ConstHandle2DelayedNeutrons This, ConstHandle2ConstDelayedNeutron delayedNeutron);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstDelayedNeutron
DelayedNeutronsDelayedNeutronGetConst(ConstHandle2ConstDelayedNeutrons This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2DelayedNeutron
DelayedNeutronsDelayedNeutronGet(ConstHandle2DelayedNeutrons This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
DelayedNeutronsDelayedNeutronSet(
   ConstHandle2DelayedNeutrons This,
   const size_t index_,
   ConstHandle2ConstDelayedNeutron delayedNeutron
);

// +++ Has, by label
extern_c int
DelayedNeutronsDelayedNeutronHasByLabel(
   ConstHandle2ConstDelayedNeutrons This,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstDelayedNeutron
DelayedNeutronsDelayedNeutronGetByLabelConst(
   ConstHandle2ConstDelayedNeutrons This,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2DelayedNeutron
DelayedNeutronsDelayedNeutronGetByLabel(
   ConstHandle2DelayedNeutrons This,
   const XMLName label
);

// +++ Set, by label
extern_c void
DelayedNeutronsDelayedNeutronSetByLabel(
   ConstHandle2DelayedNeutrons This,
   const XMLName label,
   ConstHandle2ConstDelayedNeutron delayedNeutron
);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
