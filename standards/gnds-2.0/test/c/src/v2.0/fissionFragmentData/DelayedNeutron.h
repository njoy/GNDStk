
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// DelayedNeutron is the basic handle type in this file. Example:
//    // Create a default DelayedNeutron object:
//    DelayedNeutron handle = DelayedNeutronDefault();
// Functions involving DelayedNeutron are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_FISSIONFRAGMENTDATA_DELAYEDNEUTRON
#define C_INTERFACE_TEST_V2_0_FISSIONFRAGMENTDATA_DELAYEDNEUTRON

#include "GNDStk.h"
#include "v2.0/fissionFragmentData/Rate.h"
#include "v2.0/common/Product.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct DelayedNeutronClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ DelayedNeutron
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct DelayedNeutronClass *DelayedNeutron;

// --- Const-aware handles.
typedef const struct DelayedNeutronClass *const ConstHandle2ConstDelayedNeutron;
typedef       struct DelayedNeutronClass *const ConstHandle2DelayedNeutron;
typedef const struct DelayedNeutronClass *      Handle2ConstDelayedNeutron;
typedef       struct DelayedNeutronClass *      Handle2DelayedNeutron;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstDelayedNeutron
DelayedNeutronDefaultConst();

// +++ Create, default
extern_c Handle2DelayedNeutron
DelayedNeutronDefault();

// --- Create, general, const
extern_c Handle2ConstDelayedNeutron
DelayedNeutronCreateConst(
   const XMLName label,
   ConstHandle2ConstRate rate,
   ConstHandle2ConstProduct product
);

// +++ Create, general
extern_c Handle2DelayedNeutron
DelayedNeutronCreate(
   const XMLName label,
   ConstHandle2ConstRate rate,
   ConstHandle2ConstProduct product
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
DelayedNeutronAssign(ConstHandle2DelayedNeutron This, ConstHandle2ConstDelayedNeutron from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
DelayedNeutronDelete(ConstHandle2ConstDelayedNeutron This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
DelayedNeutronRead(ConstHandle2DelayedNeutron This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
DelayedNeutronWrite(ConstHandle2ConstDelayedNeutron This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
DelayedNeutronPrint(ConstHandle2ConstDelayedNeutron This);

// +++ Print to standard output, as XML
extern_c int
DelayedNeutronPrintXML(ConstHandle2ConstDelayedNeutron This);

// +++ Print to standard output, as JSON
extern_c int
DelayedNeutronPrintJSON(ConstHandle2ConstDelayedNeutron This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
DelayedNeutronLabelHas(ConstHandle2ConstDelayedNeutron This);

// +++ Get
// +++ Returns by value
extern_c XMLName
DelayedNeutronLabelGet(ConstHandle2ConstDelayedNeutron This);

// +++ Set
extern_c void
DelayedNeutronLabelSet(ConstHandle2DelayedNeutron This, const XMLName label);


// -----------------------------------------------------------------------------
// Child: rate
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
DelayedNeutronRateHas(ConstHandle2ConstDelayedNeutron This);

// --- Get, const
extern_c Handle2ConstRate
DelayedNeutronRateGetConst(ConstHandle2ConstDelayedNeutron This);

// +++ Get, non-const
extern_c Handle2Rate
DelayedNeutronRateGet(ConstHandle2DelayedNeutron This);

// +++ Set
extern_c void
DelayedNeutronRateSet(ConstHandle2DelayedNeutron This, ConstHandle2ConstRate rate);


// -----------------------------------------------------------------------------
// Child: product
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
DelayedNeutronProductHas(ConstHandle2ConstDelayedNeutron This);

// --- Get, const
extern_c Handle2ConstProduct
DelayedNeutronProductGetConst(ConstHandle2ConstDelayedNeutron This);

// +++ Get, non-const
extern_c Handle2Product
DelayedNeutronProductGet(ConstHandle2DelayedNeutron This);

// +++ Set
extern_c void
DelayedNeutronProductSet(ConstHandle2DelayedNeutron This, ConstHandle2ConstProduct product);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
