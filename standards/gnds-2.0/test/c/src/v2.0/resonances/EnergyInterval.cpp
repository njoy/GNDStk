
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/resonances/EnergyInterval.hpp"
#include "EnergyInterval.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = EnergyIntervalClass;
using CPP = multigroup::EnergyInterval;

static const std::string CLASSNAME = "EnergyInterval";

namespace extract {
   static auto index = [](auto &obj) { return &obj.index; };
   static auto domainMin = [](auto &obj) { return &obj.domainMin; };
   static auto domainMax = [](auto &obj) { return &obj.domainMax; };
   static auto domainUnit = [](auto &obj) { return &obj.domainUnit; };
}

using CPPRMatrix = resonances::RMatrix;
using CPPBreitWigner = resonances::BreitWigner;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstEnergyInterval
EnergyIntervalDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2EnergyInterval
EnergyIntervalDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstEnergyInterval
EnergyIntervalCreateConst(
   const Integer32 index,
   const Float64 domainMin,
   const Float64 domainMax,
   const XMLName domainUnit,
) {
   ConstHandle2EnergyInterval handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      index,
      domainMin,
      domainMax,
      domainUnit
   );
   return handle;
}

// Create, general
Handle2EnergyInterval
EnergyIntervalCreate(
   const Integer32 index,
   const Float64 domainMin,
   const Float64 domainMax,
   const XMLName domainUnit,
) {
   ConstHandle2EnergyInterval handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      index,
      domainMin,
      domainMax,
      domainUnit
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
EnergyIntervalAssign(ConstHandle2EnergyInterval self, ConstHandle2ConstEnergyInterval from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
EnergyIntervalDelete(ConstHandle2ConstEnergyInterval self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
EnergyIntervalRead(ConstHandle2EnergyInterval self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
EnergyIntervalWrite(ConstHandle2ConstEnergyInterval self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
EnergyIntervalPrint(ConstHandle2ConstEnergyInterval self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
EnergyIntervalPrintXML(ConstHandle2ConstEnergyInterval self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
EnergyIntervalPrintJSON(ConstHandle2ConstEnergyInterval self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: index
// -----------------------------------------------------------------------------

// Has
int
EnergyIntervalIndexHas(ConstHandle2ConstEnergyInterval self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IndexHas", self, extract::index);
}

// Get
// Returns by value
Integer32
EnergyIntervalIndexGet(ConstHandle2ConstEnergyInterval self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"IndexGet", self, extract::index);
}

// Set
void
EnergyIntervalIndexSet(ConstHandle2EnergyInterval self, const Integer32 index)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"IndexSet", self, extract::index, index);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMin
// -----------------------------------------------------------------------------

// Has
int
EnergyIntervalDomainMinHas(ConstHandle2ConstEnergyInterval self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinHas", self, extract::domainMin);
}

// Get
// Returns by value
Float64
EnergyIntervalDomainMinGet(ConstHandle2ConstEnergyInterval self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinGet", self, extract::domainMin);
}

// Set
void
EnergyIntervalDomainMinSet(ConstHandle2EnergyInterval self, const Float64 domainMin)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinSet", self, extract::domainMin, domainMin);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMax
// -----------------------------------------------------------------------------

// Has
int
EnergyIntervalDomainMaxHas(ConstHandle2ConstEnergyInterval self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxHas", self, extract::domainMax);
}

// Get
// Returns by value
Float64
EnergyIntervalDomainMaxGet(ConstHandle2ConstEnergyInterval self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxGet", self, extract::domainMax);
}

// Set
void
EnergyIntervalDomainMaxSet(ConstHandle2EnergyInterval self, const Float64 domainMax)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxSet", self, extract::domainMax, domainMax);
}


// -----------------------------------------------------------------------------
// Metadatum: domainUnit
// -----------------------------------------------------------------------------

// Has
int
EnergyIntervalDomainUnitHas(ConstHandle2ConstEnergyInterval self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainUnitHas", self, extract::domainUnit);
}

// Get
// Returns by value
XMLName
EnergyIntervalDomainUnitGet(ConstHandle2ConstEnergyInterval self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainUnitGet", self, extract::domainUnit);
}

// Set
void
EnergyIntervalDomainUnitSet(ConstHandle2EnergyInterval self, const XMLName domainUnit)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainUnitSet", self, extract::domainUnit, domainUnit);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/resonances/EnergyInterval/src/custom.cpp"
