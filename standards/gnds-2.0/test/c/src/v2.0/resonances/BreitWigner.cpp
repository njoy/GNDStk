
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/resonances/BreitWigner.hpp"
#include "BreitWigner.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = BreitWignerClass;
using CPP = multigroup::BreitWigner;

static const std::string CLASSNAME = "BreitWigner";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto approximation = [](auto &obj) { return &obj.approximation; };
   static auto calculateChannelRadius = [](auto &obj) { return &obj.calculateChannelRadius; };
   static auto useForSelfShieldingOnly = [](auto &obj) { return &obj.useForSelfShieldingOnly; };
   static auto PoPs_database = [](auto &obj) { return &obj.PoPs_database; };
   static auto scatteringRadius = [](auto &obj) { return &obj.scatteringRadius; };
   static auto hardSphereRadius = [](auto &obj) { return &obj.hardSphereRadius; };
   static auto resonanceParameters = [](auto &obj) { return &obj.resonanceParameters; };
}

using CPPPoPs_database = pops::PoPs_database;
using CPPScatteringRadius = resonances::ScatteringRadius;
using CPPHardSphereRadius = resonances::HardSphereRadius;
using CPPResonanceParameters = resonances::ResonanceParameters;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstBreitWigner
BreitWignerDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2BreitWigner
BreitWignerDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstBreitWigner
BreitWignerCreateConst(
   const XMLName label,
   const XMLName approximation,
   const bool calculateChannelRadius,
   const bool useForSelfShieldingOnly,
   ConstHandle2ConstPoPs_database PoPs_database,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstHardSphereRadius hardSphereRadius,
   ConstHandle2ConstResonanceParameters resonanceParameters
) {
   ConstHandle2BreitWigner handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      approximation,
      calculateChannelRadius,
      useForSelfShieldingOnly,
      detail::tocpp<CPPPoPs_database>(PoPs_database),
      detail::tocpp<CPPScatteringRadius>(scatteringRadius),
      detail::tocpp<CPPHardSphereRadius>(hardSphereRadius),
      detail::tocpp<CPPResonanceParameters>(resonanceParameters)
   );
   return handle;
}

// Create, general
Handle2BreitWigner
BreitWignerCreate(
   const XMLName label,
   const XMLName approximation,
   const bool calculateChannelRadius,
   const bool useForSelfShieldingOnly,
   ConstHandle2ConstPoPs_database PoPs_database,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstHardSphereRadius hardSphereRadius,
   ConstHandle2ConstResonanceParameters resonanceParameters
) {
   ConstHandle2BreitWigner handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      approximation,
      calculateChannelRadius,
      useForSelfShieldingOnly,
      detail::tocpp<CPPPoPs_database>(PoPs_database),
      detail::tocpp<CPPScatteringRadius>(scatteringRadius),
      detail::tocpp<CPPHardSphereRadius>(hardSphereRadius),
      detail::tocpp<CPPResonanceParameters>(resonanceParameters)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
BreitWignerAssign(ConstHandle2BreitWigner self, ConstHandle2ConstBreitWigner from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
BreitWignerDelete(ConstHandle2ConstBreitWigner self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
BreitWignerRead(ConstHandle2BreitWigner self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
BreitWignerWrite(ConstHandle2ConstBreitWigner self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
BreitWignerPrint(ConstHandle2ConstBreitWigner self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
BreitWignerPrintXML(ConstHandle2ConstBreitWigner self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
BreitWignerPrintJSON(ConstHandle2ConstBreitWigner self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
BreitWignerLabelHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
BreitWignerLabelGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
BreitWignerLabelSet(ConstHandle2BreitWigner self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: approximation
// -----------------------------------------------------------------------------

// Has
int
BreitWignerApproximationHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ApproximationHas", self, extract::approximation);
}

// Get
// Returns by value
XMLName
BreitWignerApproximationGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ApproximationGet", self, extract::approximation);
}

// Set
void
BreitWignerApproximationSet(ConstHandle2BreitWigner self, const XMLName approximation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ApproximationSet", self, extract::approximation, approximation);
}


// -----------------------------------------------------------------------------
// Metadatum: calculateChannelRadius
// -----------------------------------------------------------------------------

// Has
int
BreitWignerCalculateChannelRadiusHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CalculateChannelRadiusHas", self, extract::calculateChannelRadius);
}

// Get
// Returns by value
bool
BreitWignerCalculateChannelRadiusGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CalculateChannelRadiusGet", self, extract::calculateChannelRadius);
}

// Set
void
BreitWignerCalculateChannelRadiusSet(ConstHandle2BreitWigner self, const bool calculateChannelRadius)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CalculateChannelRadiusSet", self, extract::calculateChannelRadius, calculateChannelRadius);
}


// -----------------------------------------------------------------------------
// Metadatum: useForSelfShieldingOnly
// -----------------------------------------------------------------------------

// Has
int
BreitWignerUseForSelfShieldingOnlyHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UseForSelfShieldingOnlyHas", self, extract::useForSelfShieldingOnly);
}

// Get
// Returns by value
bool
BreitWignerUseForSelfShieldingOnlyGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"UseForSelfShieldingOnlyGet", self, extract::useForSelfShieldingOnly);
}

// Set
void
BreitWignerUseForSelfShieldingOnlySet(ConstHandle2BreitWigner self, const bool useForSelfShieldingOnly)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"UseForSelfShieldingOnlySet", self, extract::useForSelfShieldingOnly, useForSelfShieldingOnly);
}


// -----------------------------------------------------------------------------
// Child: PoPs_database
// -----------------------------------------------------------------------------

// Has
int
BreitWignerPoPs_databaseHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PoPs_databaseHas", self, extract::PoPs_database);
}

// Get, const
Handle2ConstPoPs_database
BreitWignerPoPs_databaseGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstPoPs_database>
      (CLASSNAME, CLASSNAME+"PoPs_databaseGetConst", self, extract::PoPs_database);
}

// Get, non-const
Handle2PoPs_database
BreitWignerPoPs_databaseGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2PoPs_database>
      (CLASSNAME, CLASSNAME+"PoPs_databaseGet", self, extract::PoPs_database);
}

// Set
void
BreitWignerPoPs_databaseSet(ConstHandle2BreitWigner self, ConstHandle2ConstPoPs_database PoPs_database)
{
   detail::setField<CPP,CPPPoPs_database>
      (CLASSNAME, CLASSNAME+"PoPs_databaseSet", self, extract::PoPs_database, PoPs_database);
}


// -----------------------------------------------------------------------------
// Child: scatteringRadius
// -----------------------------------------------------------------------------

// Has
int
BreitWignerScatteringRadiusHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusHas", self, extract::scatteringRadius);
}

// Get, const
Handle2ConstScatteringRadius
BreitWignerScatteringRadiusGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGetConst", self, extract::scatteringRadius);
}

// Get, non-const
Handle2ScatteringRadius
BreitWignerScatteringRadiusGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2ScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGet", self, extract::scatteringRadius);
}

// Set
void
BreitWignerScatteringRadiusSet(ConstHandle2BreitWigner self, ConstHandle2ConstScatteringRadius scatteringRadius)
{
   detail::setField<CPP,CPPScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusSet", self, extract::scatteringRadius, scatteringRadius);
}


// -----------------------------------------------------------------------------
// Child: hardSphereRadius
// -----------------------------------------------------------------------------

// Has
int
BreitWignerHardSphereRadiusHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusHas", self, extract::hardSphereRadius);
}

// Get, const
Handle2ConstHardSphereRadius
BreitWignerHardSphereRadiusGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstHardSphereRadius>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusGetConst", self, extract::hardSphereRadius);
}

// Get, non-const
Handle2HardSphereRadius
BreitWignerHardSphereRadiusGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2HardSphereRadius>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusGet", self, extract::hardSphereRadius);
}

// Set
void
BreitWignerHardSphereRadiusSet(ConstHandle2BreitWigner self, ConstHandle2ConstHardSphereRadius hardSphereRadius)
{
   detail::setField<CPP,CPPHardSphereRadius>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusSet", self, extract::hardSphereRadius, hardSphereRadius);
}


// -----------------------------------------------------------------------------
// Child: resonanceParameters
// -----------------------------------------------------------------------------

// Has
int
BreitWignerResonanceParametersHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceParametersHas", self, extract::resonanceParameters);
}

// Get, const
Handle2ConstResonanceParameters
BreitWignerResonanceParametersGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersGetConst", self, extract::resonanceParameters);
}

// Get, non-const
Handle2ResonanceParameters
BreitWignerResonanceParametersGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2ResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersGet", self, extract::resonanceParameters);
}

// Set
void
BreitWignerResonanceParametersSet(ConstHandle2BreitWigner self, ConstHandle2ConstResonanceParameters resonanceParameters)
{
   detail::setField<CPP,CPPResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersSet", self, extract::resonanceParameters, resonanceParameters);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/resonances/BreitWigner/src/custom.cpp"
