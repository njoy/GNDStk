
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/resonances/Resonances.hpp"
#include "Resonances.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ResonancesClass;
using CPP = multigroup::Resonances;

static const std::string CLASSNAME = "Resonances";

namespace extract {
   static auto href = [](auto &obj) { return &obj.href; };
   static auto scatteringRadius = [](auto &obj) { return &obj.scatteringRadius; };
   static auto hardSphereRadius = [](auto &obj) { return &obj.hardSphereRadius; };
   static auto resolved = [](auto &obj) { return &obj.resolved; };
   static auto unresolved = [](auto &obj) { return &obj.unresolved; };
}

using CPPScatteringRadius = resonances::ScatteringRadius;
using CPPHardSphereRadius = resonances::HardSphereRadius;
using CPPResolved = resonances::Resolved;
using CPPUnresolved = resonances::Unresolved;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstResonances
ResonancesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Resonances
ResonancesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstResonances
ResonancesCreateConst(
   const XMLName href,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstHardSphereRadius hardSphereRadius,
   ConstHandle2Resolved *const resolved, const size_t resolvedSize,
   ConstHandle2Unresolved *const unresolved, const size_t unresolvedSize
) {
   ConstHandle2Resonances handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      href,
      detail::tocpp<CPPScatteringRadius>(scatteringRadius),
      detail::tocpp<CPPHardSphereRadius>(hardSphereRadius),
      std::vector<CPPResolved>{},
      std::vector<CPPUnresolved>{}
   );
   for (size_t ResolvedN = 0; ResolvedN < resolvedSize; ++ResolvedN)
      ResonancesResolvedAdd(handle, resolved[ResolvedN]);
   for (size_t UnresolvedN = 0; UnresolvedN < unresolvedSize; ++UnresolvedN)
      ResonancesUnresolvedAdd(handle, unresolved[UnresolvedN]);
   return handle;
}

// Create, general
Handle2Resonances
ResonancesCreate(
   const XMLName href,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstHardSphereRadius hardSphereRadius,
   ConstHandle2Resolved *const resolved, const size_t resolvedSize,
   ConstHandle2Unresolved *const unresolved, const size_t unresolvedSize
) {
   ConstHandle2Resonances handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      href,
      detail::tocpp<CPPScatteringRadius>(scatteringRadius),
      detail::tocpp<CPPHardSphereRadius>(hardSphereRadius),
      std::vector<CPPResolved>{},
      std::vector<CPPUnresolved>{}
   );
   for (size_t ResolvedN = 0; ResolvedN < resolvedSize; ++ResolvedN)
      ResonancesResolvedAdd(handle, resolved[ResolvedN]);
   for (size_t UnresolvedN = 0; UnresolvedN < unresolvedSize; ++UnresolvedN)
      ResonancesUnresolvedAdd(handle, unresolved[UnresolvedN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ResonancesAssign(ConstHandle2Resonances This, ConstHandle2ConstResonances from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ResonancesDelete(ConstHandle2ConstResonances This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ResonancesRead(ConstHandle2Resonances This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ResonancesWrite(ConstHandle2ConstResonances This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ResonancesPrint(ConstHandle2ConstResonances This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ResonancesPrintXML(ConstHandle2ConstResonances This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ResonancesPrintJSON(ConstHandle2ConstResonances This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
ResonancesHrefHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
XMLName
ResonancesHrefGet(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
ResonancesHrefSet(ConstHandle2Resonances This, const XMLName href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}


// -----------------------------------------------------------------------------
// Child: scatteringRadius
// -----------------------------------------------------------------------------

// Has
int
ResonancesScatteringRadiusHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusHas", This, extract::scatteringRadius);
}

// Get, const
Handle2ConstScatteringRadius
ResonancesScatteringRadiusGetConst(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP,Handle2ConstScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGetConst", This, extract::scatteringRadius);
}

// Get, non-const
Handle2ScatteringRadius
ResonancesScatteringRadiusGet(ConstHandle2Resonances This)
{
   return detail::getField<CPP,Handle2ScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGet", This, extract::scatteringRadius);
}

// Set
void
ResonancesScatteringRadiusSet(ConstHandle2Resonances This, ConstHandle2ConstScatteringRadius scatteringRadius)
{
   detail::setField<CPP,CPPScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusSet", This, extract::scatteringRadius, scatteringRadius);
}


// -----------------------------------------------------------------------------
// Child: hardSphereRadius
// -----------------------------------------------------------------------------

// Has
int
ResonancesHardSphereRadiusHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusHas", This, extract::hardSphereRadius);
}

// Get, const
Handle2ConstHardSphereRadius
ResonancesHardSphereRadiusGetConst(ConstHandle2ConstResonances This)
{
   return detail::getField<CPP,Handle2ConstHardSphereRadius>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusGetConst", This, extract::hardSphereRadius);
}

// Get, non-const
Handle2HardSphereRadius
ResonancesHardSphereRadiusGet(ConstHandle2Resonances This)
{
   return detail::getField<CPP,Handle2HardSphereRadius>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusGet", This, extract::hardSphereRadius);
}

// Set
void
ResonancesHardSphereRadiusSet(ConstHandle2Resonances This, ConstHandle2ConstHardSphereRadius hardSphereRadius)
{
   detail::setField<CPP,CPPHardSphereRadius>
      (CLASSNAME, CLASSNAME+"HardSphereRadiusSet", This, extract::hardSphereRadius, hardSphereRadius);
}


// -----------------------------------------------------------------------------
// Child: resolved
// -----------------------------------------------------------------------------

// Has
int
ResonancesResolvedHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedHas", This, extract::resolved);
}

// Clear
void
ResonancesResolvedClear(ConstHandle2Resonances This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedClear", This, extract::resolved);
}

// Size
size_t
ResonancesResolvedSize(ConstHandle2ConstResonances This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedSize", This, extract::resolved);
}

// Add
void
ResonancesResolvedAdd(ConstHandle2Resonances This, ConstHandle2ConstResolved resolved)
{
   detail::addToContainer<CPP,CPPResolved>
      (CLASSNAME, CLASSNAME+"ResolvedAdd", This, extract::resolved, resolved);
}

// Get, by index \in [0,size), const
Handle2ConstResolved
ResonancesResolvedGetConst(ConstHandle2ConstResonances This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstResolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetConst", This, extract::resolved, index_);
}

// Get, by index \in [0,size), non-const
Handle2Resolved
ResonancesResolvedGet(ConstHandle2Resonances This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Resolved>
      (CLASSNAME, CLASSNAME+"ResolvedGet", This, extract::resolved, index_);
}

// Set, by index \in [0,size)
void
ResonancesResolvedSet(
   ConstHandle2Resonances This,
   const size_t index_,
   ConstHandle2ConstResolved resolved
) {
   detail::setByIndex<CPP,CPPResolved>
      (CLASSNAME, CLASSNAME+"ResolvedSet", This, extract::resolved, index_, resolved);
}

// Has, by domainMin
int
ResonancesResolvedHasByDomainMin(
   ConstHandle2ConstResonances This,
   const Float64 domainMin
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedHasByDomainMin",
       This, extract::resolved, meta::domainMin, domainMin);
}

// Get, by domainMin, const
Handle2ConstResolved
ResonancesResolvedGetByDomainMinConst(
   ConstHandle2ConstResonances This,
   const Float64 domainMin
) {
   return detail::getByMetadatum<CPP,Handle2ConstResolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetByDomainMinConst",
       This, extract::resolved, meta::domainMin, domainMin);
}

// Get, by domainMin, non-const
Handle2Resolved
ResonancesResolvedGetByDomainMin(
   ConstHandle2Resonances This,
   const Float64 domainMin
) {
   return detail::getByMetadatum<CPP,Handle2Resolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetByDomainMin",
       This, extract::resolved, meta::domainMin, domainMin);
}

// Set, by domainMin
void
ResonancesResolvedSetByDomainMin(
   ConstHandle2Resonances This,
   const Float64 domainMin,
   ConstHandle2ConstResolved resolved
) {
   detail::setByMetadatum<CPP,CPPResolved>
      (CLASSNAME, CLASSNAME+"ResolvedSetByDomainMin",
       This, extract::resolved, meta::domainMin, domainMin, resolved);
}

// Has, by domainMax
int
ResonancesResolvedHasByDomainMax(
   ConstHandle2ConstResonances This,
   const Float64 domainMax
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedHasByDomainMax",
       This, extract::resolved, meta::domainMax, domainMax);
}

// Get, by domainMax, const
Handle2ConstResolved
ResonancesResolvedGetByDomainMaxConst(
   ConstHandle2ConstResonances This,
   const Float64 domainMax
) {
   return detail::getByMetadatum<CPP,Handle2ConstResolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetByDomainMaxConst",
       This, extract::resolved, meta::domainMax, domainMax);
}

// Get, by domainMax, non-const
Handle2Resolved
ResonancesResolvedGetByDomainMax(
   ConstHandle2Resonances This,
   const Float64 domainMax
) {
   return detail::getByMetadatum<CPP,Handle2Resolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetByDomainMax",
       This, extract::resolved, meta::domainMax, domainMax);
}

// Set, by domainMax
void
ResonancesResolvedSetByDomainMax(
   ConstHandle2Resonances This,
   const Float64 domainMax,
   ConstHandle2ConstResolved resolved
) {
   detail::setByMetadatum<CPP,CPPResolved>
      (CLASSNAME, CLASSNAME+"ResolvedSetByDomainMax",
       This, extract::resolved, meta::domainMax, domainMax, resolved);
}

// Has, by domainUnit
int
ResonancesResolvedHasByDomainUnit(
   ConstHandle2ConstResonances This,
   const XMLName domainUnit
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ResolvedHasByDomainUnit",
       This, extract::resolved, meta::domainUnit, domainUnit);
}

// Get, by domainUnit, const
Handle2ConstResolved
ResonancesResolvedGetByDomainUnitConst(
   ConstHandle2ConstResonances This,
   const XMLName domainUnit
) {
   return detail::getByMetadatum<CPP,Handle2ConstResolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetByDomainUnitConst",
       This, extract::resolved, meta::domainUnit, domainUnit);
}

// Get, by domainUnit, non-const
Handle2Resolved
ResonancesResolvedGetByDomainUnit(
   ConstHandle2Resonances This,
   const XMLName domainUnit
) {
   return detail::getByMetadatum<CPP,Handle2Resolved>
      (CLASSNAME, CLASSNAME+"ResolvedGetByDomainUnit",
       This, extract::resolved, meta::domainUnit, domainUnit);
}

// Set, by domainUnit
void
ResonancesResolvedSetByDomainUnit(
   ConstHandle2Resonances This,
   const XMLName domainUnit,
   ConstHandle2ConstResolved resolved
) {
   detail::setByMetadatum<CPP,CPPResolved>
      (CLASSNAME, CLASSNAME+"ResolvedSetByDomainUnit",
       This, extract::resolved, meta::domainUnit, domainUnit, resolved);
}


// -----------------------------------------------------------------------------
// Child: unresolved
// -----------------------------------------------------------------------------

// Has
int
ResonancesUnresolvedHas(ConstHandle2ConstResonances This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedHas", This, extract::unresolved);
}

// Clear
void
ResonancesUnresolvedClear(ConstHandle2Resonances This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedClear", This, extract::unresolved);
}

// Size
size_t
ResonancesUnresolvedSize(ConstHandle2ConstResonances This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedSize", This, extract::unresolved);
}

// Add
void
ResonancesUnresolvedAdd(ConstHandle2Resonances This, ConstHandle2ConstUnresolved unresolved)
{
   detail::addToContainer<CPP,CPPUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedAdd", This, extract::unresolved, unresolved);
}

// Get, by index \in [0,size), const
Handle2ConstUnresolved
ResonancesUnresolvedGetConst(ConstHandle2ConstResonances This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetConst", This, extract::unresolved, index_);
}

// Get, by index \in [0,size), non-const
Handle2Unresolved
ResonancesUnresolvedGet(ConstHandle2Resonances This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Unresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGet", This, extract::unresolved, index_);
}

// Set, by index \in [0,size)
void
ResonancesUnresolvedSet(
   ConstHandle2Resonances This,
   const size_t index_,
   ConstHandle2ConstUnresolved unresolved
) {
   detail::setByIndex<CPP,CPPUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedSet", This, extract::unresolved, index_, unresolved);
}

// Has, by domainMin
int
ResonancesUnresolvedHasByDomainMin(
   ConstHandle2ConstResonances This,
   const Float64 domainMin
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedHasByDomainMin",
       This, extract::unresolved, meta::domainMin, domainMin);
}

// Get, by domainMin, const
Handle2ConstUnresolved
ResonancesUnresolvedGetByDomainMinConst(
   ConstHandle2ConstResonances This,
   const Float64 domainMin
) {
   return detail::getByMetadatum<CPP,Handle2ConstUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetByDomainMinConst",
       This, extract::unresolved, meta::domainMin, domainMin);
}

// Get, by domainMin, non-const
Handle2Unresolved
ResonancesUnresolvedGetByDomainMin(
   ConstHandle2Resonances This,
   const Float64 domainMin
) {
   return detail::getByMetadatum<CPP,Handle2Unresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetByDomainMin",
       This, extract::unresolved, meta::domainMin, domainMin);
}

// Set, by domainMin
void
ResonancesUnresolvedSetByDomainMin(
   ConstHandle2Resonances This,
   const Float64 domainMin,
   ConstHandle2ConstUnresolved unresolved
) {
   detail::setByMetadatum<CPP,CPPUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedSetByDomainMin",
       This, extract::unresolved, meta::domainMin, domainMin, unresolved);
}

// Has, by domainMax
int
ResonancesUnresolvedHasByDomainMax(
   ConstHandle2ConstResonances This,
   const Float64 domainMax
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedHasByDomainMax",
       This, extract::unresolved, meta::domainMax, domainMax);
}

// Get, by domainMax, const
Handle2ConstUnresolved
ResonancesUnresolvedGetByDomainMaxConst(
   ConstHandle2ConstResonances This,
   const Float64 domainMax
) {
   return detail::getByMetadatum<CPP,Handle2ConstUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetByDomainMaxConst",
       This, extract::unresolved, meta::domainMax, domainMax);
}

// Get, by domainMax, non-const
Handle2Unresolved
ResonancesUnresolvedGetByDomainMax(
   ConstHandle2Resonances This,
   const Float64 domainMax
) {
   return detail::getByMetadatum<CPP,Handle2Unresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetByDomainMax",
       This, extract::unresolved, meta::domainMax, domainMax);
}

// Set, by domainMax
void
ResonancesUnresolvedSetByDomainMax(
   ConstHandle2Resonances This,
   const Float64 domainMax,
   ConstHandle2ConstUnresolved unresolved
) {
   detail::setByMetadatum<CPP,CPPUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedSetByDomainMax",
       This, extract::unresolved, meta::domainMax, domainMax, unresolved);
}

// Has, by domainUnit
int
ResonancesUnresolvedHasByDomainUnit(
   ConstHandle2ConstResonances This,
   const XMLName domainUnit
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"UnresolvedHasByDomainUnit",
       This, extract::unresolved, meta::domainUnit, domainUnit);
}

// Get, by domainUnit, const
Handle2ConstUnresolved
ResonancesUnresolvedGetByDomainUnitConst(
   ConstHandle2ConstResonances This,
   const XMLName domainUnit
) {
   return detail::getByMetadatum<CPP,Handle2ConstUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetByDomainUnitConst",
       This, extract::unresolved, meta::domainUnit, domainUnit);
}

// Get, by domainUnit, non-const
Handle2Unresolved
ResonancesUnresolvedGetByDomainUnit(
   ConstHandle2Resonances This,
   const XMLName domainUnit
) {
   return detail::getByMetadatum<CPP,Handle2Unresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedGetByDomainUnit",
       This, extract::unresolved, meta::domainUnit, domainUnit);
}

// Set, by domainUnit
void
ResonancesUnresolvedSetByDomainUnit(
   ConstHandle2Resonances This,
   const XMLName domainUnit,
   ConstHandle2ConstUnresolved unresolved
) {
   detail::setByMetadatum<CPP,CPPUnresolved>
      (CLASSNAME, CLASSNAME+"UnresolvedSetByDomainUnit",
       This, extract::unresolved, meta::domainUnit, domainUnit, unresolved);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/resonances/Resonances/src/custom.cpp"
