
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/covariance/CovarianceSection.hpp"
#include "CovarianceSection.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = CovarianceSectionClass;
using CPP = multigroup::CovarianceSection;

static const std::string CLASSNAME = "CovarianceSection";

namespace extract {
   static auto crossTerm = [](auto &obj) { return &obj.crossTerm; };
   static auto label = [](auto &obj) { return &obj.label; };
   static auto rowData = [](auto &obj) { return &obj.rowData; };
   static auto columnData = [](auto &obj) { return &obj.columnData; };
}

using CPPRowData = covariance::RowData;
using CPPColumnData = covariance::ColumnData;
using CPPCovarianceMatrix = covariance::CovarianceMatrix;
using CPPSum = covariance::Sum;
using CPPMixed = covariance::Mixed;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstCovarianceSection
CovarianceSectionDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2CovarianceSection
CovarianceSectionDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstCovarianceSection
CovarianceSectionCreateConst(
   const bool crossTerm,
   const XMLName label,
   ConstHandle2ConstRowData rowData,
   ConstHandle2ConstColumnData columnData,
) {
   ConstHandle2CovarianceSection handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      crossTerm,
      label,
      detail::tocpp<CPPRowData>(rowData),
      detail::tocpp<CPPColumnData>(columnData)
   );
   return handle;
}

// Create, general
Handle2CovarianceSection
CovarianceSectionCreate(
   const bool crossTerm,
   const XMLName label,
   ConstHandle2ConstRowData rowData,
   ConstHandle2ConstColumnData columnData,
) {
   ConstHandle2CovarianceSection handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      crossTerm,
      label,
      detail::tocpp<CPPRowData>(rowData),
      detail::tocpp<CPPColumnData>(columnData)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
CovarianceSectionAssign(ConstHandle2CovarianceSection self, ConstHandle2ConstCovarianceSection from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
CovarianceSectionDelete(ConstHandle2ConstCovarianceSection self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
CovarianceSectionRead(ConstHandle2CovarianceSection self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
CovarianceSectionWrite(ConstHandle2ConstCovarianceSection self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
CovarianceSectionPrint(ConstHandle2ConstCovarianceSection self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
CovarianceSectionPrintXML(ConstHandle2ConstCovarianceSection self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
CovarianceSectionPrintJSON(ConstHandle2ConstCovarianceSection self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: crossTerm
// -----------------------------------------------------------------------------

// Has
int
CovarianceSectionCrossTermHas(ConstHandle2ConstCovarianceSection self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CrossTermHas", self, extract::crossTerm);
}

// Get
// Returns by value
bool
CovarianceSectionCrossTermGet(ConstHandle2ConstCovarianceSection self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CrossTermGet", self, extract::crossTerm);
}

// Set
void
CovarianceSectionCrossTermSet(ConstHandle2CovarianceSection self, const bool crossTerm)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CrossTermSet", self, extract::crossTerm, crossTerm);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
CovarianceSectionLabelHas(ConstHandle2ConstCovarianceSection self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
CovarianceSectionLabelGet(ConstHandle2ConstCovarianceSection self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
CovarianceSectionLabelSet(ConstHandle2CovarianceSection self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: rowData
// -----------------------------------------------------------------------------

// Has
int
CovarianceSectionRowDataHas(ConstHandle2ConstCovarianceSection self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"RowDataHas", self, extract::rowData);
}

// Get, const
Handle2ConstRowData
CovarianceSectionRowDataGetConst(ConstHandle2ConstCovarianceSection self)
{
   return detail::getField<CPP,Handle2ConstRowData>
      (CLASSNAME, CLASSNAME+"RowDataGetConst", self, extract::rowData);
}

// Get, non-const
Handle2RowData
CovarianceSectionRowDataGet(ConstHandle2CovarianceSection self)
{
   return detail::getField<CPP,Handle2RowData>
      (CLASSNAME, CLASSNAME+"RowDataGet", self, extract::rowData);
}

// Set
void
CovarianceSectionRowDataSet(ConstHandle2CovarianceSection self, ConstHandle2ConstRowData rowData)
{
   detail::setField<CPP,CPPRowData>
      (CLASSNAME, CLASSNAME+"RowDataSet", self, extract::rowData, rowData);
}


// -----------------------------------------------------------------------------
// Child: columnData
// -----------------------------------------------------------------------------

// Has
int
CovarianceSectionColumnDataHas(ConstHandle2ConstCovarianceSection self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ColumnDataHas", self, extract::columnData);
}

// Get, const
Handle2ConstColumnData
CovarianceSectionColumnDataGetConst(ConstHandle2ConstCovarianceSection self)
{
   return detail::getField<CPP,Handle2ConstColumnData>
      (CLASSNAME, CLASSNAME+"ColumnDataGetConst", self, extract::columnData);
}

// Get, non-const
Handle2ColumnData
CovarianceSectionColumnDataGet(ConstHandle2CovarianceSection self)
{
   return detail::getField<CPP,Handle2ColumnData>
      (CLASSNAME, CLASSNAME+"ColumnDataGet", self, extract::columnData);
}

// Set
void
CovarianceSectionColumnDataSet(ConstHandle2CovarianceSection self, ConstHandle2ConstColumnData columnData)
{
   detail::setField<CPP,CPPColumnData>
      (CLASSNAME, CLASSNAME+"ColumnDataSet", self, extract::columnData, columnData);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/covariance/CovarianceSection/src/custom.cpp"
