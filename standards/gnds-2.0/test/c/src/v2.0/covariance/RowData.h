
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// RowData is the basic handle type in this file. Example:
//    // Create a default RowData object:
//    RowData handle = RowDataDefault();
// Functions involving RowData are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_COVARIANCE_ROWDATA
#define C_INTERFACE_TEST_V2_0_COVARIANCE_ROWDATA

#include "GNDStk.h"
#include "v2.0/covariance/Slices.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct RowDataClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ RowData
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct RowDataClass *RowData;

// --- Const-aware handles.
typedef const struct RowDataClass *const ConstHandle2ConstRowData;
typedef       struct RowDataClass *const ConstHandle2RowData;
typedef const struct RowDataClass *      Handle2ConstRowData;
typedef       struct RowDataClass *      Handle2RowData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstRowData
RowDataDefaultConst();

// +++ Create, default
extern_c Handle2RowData
RowDataDefault();

// --- Create, general, const
extern_c Handle2ConstRowData
RowDataCreateConst(
   const XMLName ENDF_MFMT,
   const XMLName href,
   const Integer32 dimension,
   ConstHandle2ConstSlices slices
);

// +++ Create, general
extern_c Handle2RowData
RowDataCreate(
   const XMLName ENDF_MFMT,
   const XMLName href,
   const Integer32 dimension,
   ConstHandle2ConstSlices slices
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
RowDataAssign(ConstHandle2RowData This, ConstHandle2ConstRowData from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
RowDataDelete(ConstHandle2ConstRowData This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
RowDataRead(ConstHandle2RowData This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
RowDataWrite(ConstHandle2ConstRowData This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
RowDataPrint(ConstHandle2ConstRowData This);

// +++ Print to standard output, as XML
extern_c int
RowDataPrintXML(ConstHandle2ConstRowData This);

// +++ Print to standard output, as JSON
extern_c int
RowDataPrintJSON(ConstHandle2ConstRowData This);


// -----------------------------------------------------------------------------
// Metadatum: ENDF_MFMT
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
RowDataENDFMFMTHas(ConstHandle2ConstRowData This);

// +++ Get
// +++ Returns by value
extern_c XMLName
RowDataENDFMFMTGet(ConstHandle2ConstRowData This);

// +++ Set
extern_c void
RowDataENDFMFMTSet(ConstHandle2RowData This, const XMLName ENDF_MFMT);


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
RowDataHrefHas(ConstHandle2ConstRowData This);

// +++ Get
// +++ Returns by value
extern_c XMLName
RowDataHrefGet(ConstHandle2ConstRowData This);

// +++ Set
extern_c void
RowDataHrefSet(ConstHandle2RowData This, const XMLName href);


// -----------------------------------------------------------------------------
// Metadatum: dimension
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
RowDataDimensionHas(ConstHandle2ConstRowData This);

// +++ Get
// +++ Returns by value
extern_c Integer32
RowDataDimensionGet(ConstHandle2ConstRowData This);

// +++ Set
extern_c void
RowDataDimensionSet(ConstHandle2RowData This, const Integer32 dimension);


// -----------------------------------------------------------------------------
// Child: slices
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
RowDataSlicesHas(ConstHandle2ConstRowData This);

// --- Get, const
extern_c Handle2ConstSlices
RowDataSlicesGetConst(ConstHandle2ConstRowData This);

// +++ Get, non-const
extern_c Handle2Slices
RowDataSlicesGet(ConstHandle2RowData This);

// +++ Set
extern_c void
RowDataSlicesSet(ConstHandle2RowData This, ConstHandle2ConstSlices slices);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/covariance/RowData/src/custom.h"

#undef extern_c
#endif
