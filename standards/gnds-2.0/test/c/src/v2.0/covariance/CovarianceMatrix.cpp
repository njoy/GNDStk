
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/covariance/CovarianceMatrix.hpp"
#include "CovarianceMatrix.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = CovarianceMatrixClass;
using CPP = multigroup::CovarianceMatrix;

static const std::string CLASSNAME = "CovarianceMatrix";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto type = [](auto &obj) { return &obj.type; };
}

using CPPGridded2d = containers::Gridded2d;
using CPPSandwichProduct = covariance::SandwichProduct;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstCovarianceMatrix
CovarianceMatrixDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2CovarianceMatrix
CovarianceMatrixDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstCovarianceMatrix
CovarianceMatrixCreateConst(
   const XMLName label,
   const enums::Frame productFrame,
   const XMLName type,
) {
   ConstHandle2CovarianceMatrix handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      productFrame,
      type
   );
   return handle;
}

// Create, general
Handle2CovarianceMatrix
CovarianceMatrixCreate(
   const XMLName label,
   const enums::Frame productFrame,
   const XMLName type,
) {
   ConstHandle2CovarianceMatrix handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      productFrame,
      type
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
CovarianceMatrixAssign(ConstHandle2CovarianceMatrix This, ConstHandle2ConstCovarianceMatrix from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
CovarianceMatrixDelete(ConstHandle2ConstCovarianceMatrix This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
CovarianceMatrixRead(ConstHandle2CovarianceMatrix This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
CovarianceMatrixWrite(ConstHandle2ConstCovarianceMatrix This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
CovarianceMatrixPrint(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
CovarianceMatrixPrintXML(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
CovarianceMatrixPrintJSON(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixLabelHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
CovarianceMatrixLabelGet(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
CovarianceMatrixLabelSet(ConstHandle2CovarianceMatrix This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixProductFrameHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", This, extract::productFrame);
}

// Get
// Returns by value
enums::Frame
CovarianceMatrixProductFrameGet(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", This, extract::productFrame);
}

// Set
void
CovarianceMatrixProductFrameSet(ConstHandle2CovarianceMatrix This, const enums::Frame productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", This, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Metadatum: type
// -----------------------------------------------------------------------------

// Has
int
CovarianceMatrixTypeHas(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TypeHas", This, extract::type);
}

// Get
// Returns by value
XMLName
CovarianceMatrixTypeGet(ConstHandle2ConstCovarianceMatrix This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"TypeGet", This, extract::type);
}

// Set
void
CovarianceMatrixTypeSet(ConstHandle2CovarianceMatrix This, const XMLName type)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"TypeSet", This, extract::type, type);
}
