
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// SandwichProduct is the basic handle type in this file. Example:
//    // Create a default SandwichProduct object:
//    SandwichProduct handle = SandwichProductDefault();
// Functions involving SandwichProduct are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_COVARIANCE_SANDWICHPRODUCT
#define C_INTERFACE_TEST_V2_0_COVARIANCE_SANDWICHPRODUCT

#include "GNDStk.h"
#include "v2.0/containers/Axes.h"
#include "v2.0/covariance/Covariance.h"
#include "v2.0/covariance/RowSensitivity.h"
#include "v2.0/covariance/ColumnSensitivity.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct SandwichProductClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ SandwichProduct
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct SandwichProductClass *SandwichProduct;

// --- Const-aware handles.
typedef const struct SandwichProductClass *const ConstHandle2ConstSandwichProduct;
typedef       struct SandwichProductClass *const ConstHandle2SandwichProduct;
typedef const struct SandwichProductClass *      Handle2ConstSandwichProduct;
typedef       struct SandwichProductClass *      Handle2SandwichProduct;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstSandwichProduct
SandwichProductDefaultConst();

// +++ Create, default
extern_c Handle2SandwichProduct
SandwichProductDefault();

// --- Create, general, const
extern_c Handle2ConstSandwichProduct
SandwichProductCreateConst(
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstCovariance covariance,
   ConstHandle2ConstRowSensitivity rowSensitivity,
   ConstHandle2ConstColumnSensitivity columnSensitivity
);

// +++ Create, general
extern_c Handle2SandwichProduct
SandwichProductCreate(
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstCovariance covariance,
   ConstHandle2ConstRowSensitivity rowSensitivity,
   ConstHandle2ConstColumnSensitivity columnSensitivity
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
SandwichProductAssign(ConstHandle2SandwichProduct self, ConstHandle2ConstSandwichProduct from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
SandwichProductDelete(ConstHandle2ConstSandwichProduct self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
SandwichProductRead(ConstHandle2SandwichProduct self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
SandwichProductWrite(ConstHandle2ConstSandwichProduct self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
SandwichProductPrint(ConstHandle2ConstSandwichProduct self);

// +++ Print to standard output, as XML
extern_c int
SandwichProductPrintXML(ConstHandle2ConstSandwichProduct self);

// +++ Print to standard output, as JSON
extern_c int
SandwichProductPrintJSON(ConstHandle2ConstSandwichProduct self);


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SandwichProductAxesHas(ConstHandle2ConstSandwichProduct self);

// --- Get, const
extern_c Handle2ConstAxes
SandwichProductAxesGetConst(ConstHandle2ConstSandwichProduct self);

// +++ Get, non-const
extern_c Handle2Axes
SandwichProductAxesGet(ConstHandle2SandwichProduct self);

// +++ Set
extern_c void
SandwichProductAxesSet(ConstHandle2SandwichProduct self, ConstHandle2ConstAxes axes);


// -----------------------------------------------------------------------------
// Child: covariance
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SandwichProductCovarianceHas(ConstHandle2ConstSandwichProduct self);

// --- Get, const
extern_c Handle2ConstCovariance
SandwichProductCovarianceGetConst(ConstHandle2ConstSandwichProduct self);

// +++ Get, non-const
extern_c Handle2Covariance
SandwichProductCovarianceGet(ConstHandle2SandwichProduct self);

// +++ Set
extern_c void
SandwichProductCovarianceSet(ConstHandle2SandwichProduct self, ConstHandle2ConstCovariance covariance);


// -----------------------------------------------------------------------------
// Child: rowSensitivity
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SandwichProductRowSensitivityHas(ConstHandle2ConstSandwichProduct self);

// --- Get, const
extern_c Handle2ConstRowSensitivity
SandwichProductRowSensitivityGetConst(ConstHandle2ConstSandwichProduct self);

// +++ Get, non-const
extern_c Handle2RowSensitivity
SandwichProductRowSensitivityGet(ConstHandle2SandwichProduct self);

// +++ Set
extern_c void
SandwichProductRowSensitivitySet(ConstHandle2SandwichProduct self, ConstHandle2ConstRowSensitivity rowSensitivity);


// -----------------------------------------------------------------------------
// Child: columnSensitivity
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SandwichProductColumnSensitivityHas(ConstHandle2ConstSandwichProduct self);

// --- Get, const
extern_c Handle2ConstColumnSensitivity
SandwichProductColumnSensitivityGetConst(ConstHandle2ConstSandwichProduct self);

// +++ Get, non-const
extern_c Handle2ColumnSensitivity
SandwichProductColumnSensitivityGet(ConstHandle2SandwichProduct self);

// +++ Set
extern_c void
SandwichProductColumnSensitivitySet(ConstHandle2SandwichProduct self, ConstHandle2ConstColumnSensitivity columnSensitivity);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/covariance/SandwichProduct/src/custom.h"

#undef extern_c
#endif
