
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/covariance/RowSensitivity.hpp"
#include "RowSensitivity.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = RowSensitivityClass;
using CPP = multigroup::RowSensitivity;

static const std::string CLASSNAME = "RowSensitivity";

namespace extract {
   static auto array = [](auto &obj) { return &obj.array; };
}

using CPPArray = containers::Array;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstRowSensitivity
RowSensitivityDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2RowSensitivity
RowSensitivityDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstRowSensitivity
RowSensitivityCreateConst(
   ConstHandle2ConstArray array
) {
   ConstHandle2RowSensitivity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPArray>(array)
   );
   return handle;
}

// Create, general
Handle2RowSensitivity
RowSensitivityCreate(
   ConstHandle2ConstArray array
) {
   ConstHandle2RowSensitivity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPArray>(array)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
RowSensitivityAssign(ConstHandle2RowSensitivity self, ConstHandle2ConstRowSensitivity from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
RowSensitivityDelete(ConstHandle2ConstRowSensitivity self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
RowSensitivityRead(ConstHandle2RowSensitivity self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
RowSensitivityWrite(ConstHandle2ConstRowSensitivity self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
RowSensitivityPrint(ConstHandle2ConstRowSensitivity self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
RowSensitivityPrintXML(ConstHandle2ConstRowSensitivity self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
RowSensitivityPrintJSON(ConstHandle2ConstRowSensitivity self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: array
// -----------------------------------------------------------------------------

// Has
int
RowSensitivityArrayHas(ConstHandle2ConstRowSensitivity self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHas", self, extract::array);
}

// Get, const
Handle2ConstArray
RowSensitivityArrayGetConst(ConstHandle2ConstRowSensitivity self)
{
   return detail::getField<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetConst", self, extract::array);
}

// Get, non-const
Handle2Array
RowSensitivityArrayGet(ConstHandle2RowSensitivity self)
{
   return detail::getField<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGet", self, extract::array);
}

// Set
void
RowSensitivityArraySet(ConstHandle2RowSensitivity self, ConstHandle2ConstArray array)
{
   detail::setField<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySet", self, extract::array, array);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/covariance/RowSensitivity/src/custom.cpp"
