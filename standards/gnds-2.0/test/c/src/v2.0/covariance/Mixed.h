
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Mixed is the basic handle type in this file. Example:
//    // Create a default Mixed object:
//    Mixed handle = MixedDefault();
// Functions involving Mixed are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_COVARIANCE_MIXED
#define C_INTERFACE_TEST_V2_0_COVARIANCE_MIXED

#include "GNDStk.h"
#include "v2.0/covariance/CovarianceMatrix.h"
#include "v2.0/covariance/ShortRangeSelfScalingVariance.h"
#include "v2.0/covariance/Sum.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct MixedClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Mixed
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct MixedClass *Mixed;

// --- Const-aware handles.
typedef const struct MixedClass *const ConstHandle2ConstMixed;
typedef       struct MixedClass *const ConstHandle2Mixed;
typedef const struct MixedClass *      Handle2ConstMixed;
typedef       struct MixedClass *      Handle2Mixed;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstMixed
MixedDefaultConst();

// +++ Create, default
extern_c Handle2Mixed
MixedDefault();

// --- Create, general, const
extern_c Handle2ConstMixed
MixedCreateConst(
   const XMLName label,
   ConstHandle2CovarianceMatrix *const covarianceMatrix, const size_t covarianceMatrixSize,
   ConstHandle2ShortRangeSelfScalingVariance *const shortRangeSelfScalingVariance, const size_t shortRangeSelfScalingVarianceSize,
   ConstHandle2Sum *const sum, const size_t sumSize
);

// +++ Create, general
extern_c Handle2Mixed
MixedCreate(
   const XMLName label,
   ConstHandle2CovarianceMatrix *const covarianceMatrix, const size_t covarianceMatrixSize,
   ConstHandle2ShortRangeSelfScalingVariance *const shortRangeSelfScalingVariance, const size_t shortRangeSelfScalingVarianceSize,
   ConstHandle2Sum *const sum, const size_t sumSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
MixedAssign(ConstHandle2Mixed self, ConstHandle2ConstMixed from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
MixedDelete(ConstHandle2ConstMixed self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
MixedRead(ConstHandle2Mixed self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
MixedWrite(ConstHandle2ConstMixed self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
MixedPrint(ConstHandle2ConstMixed self);

// +++ Print to standard output, as XML
extern_c int
MixedPrintXML(ConstHandle2ConstMixed self);

// +++ Print to standard output, as JSON
extern_c int
MixedPrintJSON(ConstHandle2ConstMixed self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MixedLabelHas(ConstHandle2ConstMixed self);

// +++ Get
// +++ Returns by value
extern_c XMLName
MixedLabelGet(ConstHandle2ConstMixed self);

// +++ Set
extern_c void
MixedLabelSet(ConstHandle2Mixed self, const XMLName label);


// -----------------------------------------------------------------------------
// Child: covarianceMatrix
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MixedCovarianceMatrixHas(ConstHandle2ConstMixed self);

// +++ Clear
extern_c void
MixedCovarianceMatrixClear(ConstHandle2Mixed self);

// +++ Size
extern_c size_t
MixedCovarianceMatrixSize(ConstHandle2ConstMixed self);

// +++ Add
extern_c void
MixedCovarianceMatrixAdd(ConstHandle2Mixed self, ConstHandle2ConstCovarianceMatrix covarianceMatrix);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetConst(ConstHandle2ConstMixed self, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2CovarianceMatrix
MixedCovarianceMatrixGet(ConstHandle2Mixed self, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
MixedCovarianceMatrixSet(
   ConstHandle2Mixed self,
   const size_t index_,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
);

// +++ Has, by label
extern_c int
MixedCovarianceMatrixHasByLabel(
   ConstHandle2ConstMixed self,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetByLabelConst(
   ConstHandle2ConstMixed self,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2CovarianceMatrix
MixedCovarianceMatrixGetByLabel(
   ConstHandle2Mixed self,
   const XMLName label
);

// +++ Set, by label
extern_c void
MixedCovarianceMatrixSetByLabel(
   ConstHandle2Mixed self,
   const XMLName label,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
);

// +++ Has, by productFrame
extern_c int
MixedCovarianceMatrixHasByProductFrame(
   ConstHandle2ConstMixed self,
   const enums::Frame productFrame
);

// --- Get, by productFrame, const
extern_c Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetByProductFrameConst(
   ConstHandle2ConstMixed self,
   const enums::Frame productFrame
);

// +++ Get, by productFrame, non-const
extern_c Handle2CovarianceMatrix
MixedCovarianceMatrixGetByProductFrame(
   ConstHandle2Mixed self,
   const enums::Frame productFrame
);

// +++ Set, by productFrame
extern_c void
MixedCovarianceMatrixSetByProductFrame(
   ConstHandle2Mixed self,
   const enums::Frame productFrame,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
);

// +++ Has, by type
extern_c int
MixedCovarianceMatrixHasByType(
   ConstHandle2ConstMixed self,
   const XMLName type
);

// --- Get, by type, const
extern_c Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetByTypeConst(
   ConstHandle2ConstMixed self,
   const XMLName type
);

// +++ Get, by type, non-const
extern_c Handle2CovarianceMatrix
MixedCovarianceMatrixGetByType(
   ConstHandle2Mixed self,
   const XMLName type
);

// +++ Set, by type
extern_c void
MixedCovarianceMatrixSetByType(
   ConstHandle2Mixed self,
   const XMLName type,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
);


// -----------------------------------------------------------------------------
// Child: shortRangeSelfScalingVariance
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MixedShortRangeSelfScalingVarianceHas(ConstHandle2ConstMixed self);

// +++ Clear
extern_c void
MixedShortRangeSelfScalingVarianceClear(ConstHandle2Mixed self);

// +++ Size
extern_c size_t
MixedShortRangeSelfScalingVarianceSize(ConstHandle2ConstMixed self);

// +++ Add
extern_c void
MixedShortRangeSelfScalingVarianceAdd(ConstHandle2Mixed self, ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetConst(ConstHandle2ConstMixed self, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGet(ConstHandle2Mixed self, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
MixedShortRangeSelfScalingVarianceSet(
   ConstHandle2Mixed self,
   const size_t index_,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
);

// +++ Has, by dependenceOnProcessedGroupWidth
extern_c int
MixedShortRangeSelfScalingVarianceHasByDependenceOnProcessedGroupWidth(
   ConstHandle2ConstMixed self,
   const XMLName dependenceOnProcessedGroupWidth
);

// --- Get, by dependenceOnProcessedGroupWidth, const
extern_c Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByDependenceOnProcessedGroupWidthConst(
   ConstHandle2ConstMixed self,
   const XMLName dependenceOnProcessedGroupWidth
);

// +++ Get, by dependenceOnProcessedGroupWidth, non-const
extern_c Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByDependenceOnProcessedGroupWidth(
   ConstHandle2Mixed self,
   const XMLName dependenceOnProcessedGroupWidth
);

// +++ Set, by dependenceOnProcessedGroupWidth
extern_c void
MixedShortRangeSelfScalingVarianceSetByDependenceOnProcessedGroupWidth(
   ConstHandle2Mixed self,
   const XMLName dependenceOnProcessedGroupWidth,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
);

// +++ Has, by label
extern_c int
MixedShortRangeSelfScalingVarianceHasByLabel(
   ConstHandle2ConstMixed self,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByLabelConst(
   ConstHandle2ConstMixed self,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByLabel(
   ConstHandle2Mixed self,
   const XMLName label
);

// +++ Set, by label
extern_c void
MixedShortRangeSelfScalingVarianceSetByLabel(
   ConstHandle2Mixed self,
   const XMLName label,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
);

// +++ Has, by type
extern_c int
MixedShortRangeSelfScalingVarianceHasByType(
   ConstHandle2ConstMixed self,
   const XMLName type
);

// --- Get, by type, const
extern_c Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByTypeConst(
   ConstHandle2ConstMixed self,
   const XMLName type
);

// +++ Get, by type, non-const
extern_c Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByType(
   ConstHandle2Mixed self,
   const XMLName type
);

// +++ Set, by type
extern_c void
MixedShortRangeSelfScalingVarianceSetByType(
   ConstHandle2Mixed self,
   const XMLName type,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
);


// -----------------------------------------------------------------------------
// Child: sum
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MixedSumHas(ConstHandle2ConstMixed self);

// +++ Clear
extern_c void
MixedSumClear(ConstHandle2Mixed self);

// +++ Size
extern_c size_t
MixedSumSize(ConstHandle2ConstMixed self);

// +++ Add
extern_c void
MixedSumAdd(ConstHandle2Mixed self, ConstHandle2ConstSum sum);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstSum
MixedSumGetConst(ConstHandle2ConstMixed self, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Sum
MixedSumGet(ConstHandle2Mixed self, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
MixedSumSet(
   ConstHandle2Mixed self,
   const size_t index_,
   ConstHandle2ConstSum sum
);

// +++ Has, by domainMin
extern_c int
MixedSumHasByDomainMin(
   ConstHandle2ConstMixed self,
   const Float64 domainMin
);

// --- Get, by domainMin, const
extern_c Handle2ConstSum
MixedSumGetByDomainMinConst(
   ConstHandle2ConstMixed self,
   const Float64 domainMin
);

// +++ Get, by domainMin, non-const
extern_c Handle2Sum
MixedSumGetByDomainMin(
   ConstHandle2Mixed self,
   const Float64 domainMin
);

// +++ Set, by domainMin
extern_c void
MixedSumSetByDomainMin(
   ConstHandle2Mixed self,
   const Float64 domainMin,
   ConstHandle2ConstSum sum
);

// +++ Has, by domainMax
extern_c int
MixedSumHasByDomainMax(
   ConstHandle2ConstMixed self,
   const Float64 domainMax
);

// --- Get, by domainMax, const
extern_c Handle2ConstSum
MixedSumGetByDomainMaxConst(
   ConstHandle2ConstMixed self,
   const Float64 domainMax
);

// +++ Get, by domainMax, non-const
extern_c Handle2Sum
MixedSumGetByDomainMax(
   ConstHandle2Mixed self,
   const Float64 domainMax
);

// +++ Set, by domainMax
extern_c void
MixedSumSetByDomainMax(
   ConstHandle2Mixed self,
   const Float64 domainMax,
   ConstHandle2ConstSum sum
);

// +++ Has, by domainUnit
extern_c int
MixedSumHasByDomainUnit(
   ConstHandle2ConstMixed self,
   const XMLName domainUnit
);

// --- Get, by domainUnit, const
extern_c Handle2ConstSum
MixedSumGetByDomainUnitConst(
   ConstHandle2ConstMixed self,
   const XMLName domainUnit
);

// +++ Get, by domainUnit, non-const
extern_c Handle2Sum
MixedSumGetByDomainUnit(
   ConstHandle2Mixed self,
   const XMLName domainUnit
);

// +++ Set, by domainUnit
extern_c void
MixedSumSetByDomainUnit(
   ConstHandle2Mixed self,
   const XMLName domainUnit,
   ConstHandle2ConstSum sum
);

// +++ Has, by label
extern_c int
MixedSumHasByLabel(
   ConstHandle2ConstMixed self,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstSum
MixedSumGetByLabelConst(
   ConstHandle2ConstMixed self,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2Sum
MixedSumGetByLabel(
   ConstHandle2Mixed self,
   const XMLName label
);

// +++ Set, by label
extern_c void
MixedSumSetByLabel(
   ConstHandle2Mixed self,
   const XMLName label,
   ConstHandle2ConstSum sum
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/covariance/Mixed/src/custom.h"

#undef extern_c
#endif
