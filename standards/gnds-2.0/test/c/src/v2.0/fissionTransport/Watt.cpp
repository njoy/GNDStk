
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/fissionTransport/Watt.hpp"
#include "Watt.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = WattClass;
using CPP = multigroup::Watt;

static const std::string CLASSNAME = "Watt";

namespace extract {
   static auto U = [](auto &obj) { return &obj.U; };
   static auto a = [](auto &obj) { return &obj.a; };
   static auto b = [](auto &obj) { return &obj.b; };
}

using CPPU = transport::U;
using CPPA = fissionTransport::A;
using CPPB = fissionTransport::B;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstWatt
WattDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Watt
WattDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstWatt
WattCreateConst(
   ConstHandle2ConstU U,
   ConstHandle2ConstA a,
   ConstHandle2ConstB b
) {
   ConstHandle2Watt handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPU>(U),
      detail::tocpp<CPPA>(a),
      detail::tocpp<CPPB>(b)
   );
   return handle;
}

// Create, general
Handle2Watt
WattCreate(
   ConstHandle2ConstU U,
   ConstHandle2ConstA a,
   ConstHandle2ConstB b
) {
   ConstHandle2Watt handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPU>(U),
      detail::tocpp<CPPA>(a),
      detail::tocpp<CPPB>(b)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
WattAssign(ConstHandle2Watt self, ConstHandle2ConstWatt from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
WattDelete(ConstHandle2ConstWatt self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
WattRead(ConstHandle2Watt self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
WattWrite(ConstHandle2ConstWatt self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
WattPrint(ConstHandle2ConstWatt self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
WattPrintXML(ConstHandle2ConstWatt self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
WattPrintJSON(ConstHandle2ConstWatt self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: U
// -----------------------------------------------------------------------------

// Has
int
WattUHas(ConstHandle2ConstWatt self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UHas", self, extract::U);
}

// Get, const
Handle2ConstU
WattUGetConst(ConstHandle2ConstWatt self)
{
   return detail::getField<CPP,Handle2ConstU>
      (CLASSNAME, CLASSNAME+"UGetConst", self, extract::U);
}

// Get, non-const
Handle2U
WattUGet(ConstHandle2Watt self)
{
   return detail::getField<CPP,Handle2U>
      (CLASSNAME, CLASSNAME+"UGet", self, extract::U);
}

// Set
void
WattUSet(ConstHandle2Watt self, ConstHandle2ConstU U)
{
   detail::setField<CPP,CPPU>
      (CLASSNAME, CLASSNAME+"USet", self, extract::U, U);
}


// -----------------------------------------------------------------------------
// Child: a
// -----------------------------------------------------------------------------

// Has
int
WattAHas(ConstHandle2ConstWatt self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AHas", self, extract::a);
}

// Get, const
Handle2ConstA
WattAGetConst(ConstHandle2ConstWatt self)
{
   return detail::getField<CPP,Handle2ConstA>
      (CLASSNAME, CLASSNAME+"AGetConst", self, extract::a);
}

// Get, non-const
Handle2A
WattAGet(ConstHandle2Watt self)
{
   return detail::getField<CPP,Handle2A>
      (CLASSNAME, CLASSNAME+"AGet", self, extract::a);
}

// Set
void
WattASet(ConstHandle2Watt self, ConstHandle2ConstA a)
{
   detail::setField<CPP,CPPA>
      (CLASSNAME, CLASSNAME+"ASet", self, extract::a, a);
}


// -----------------------------------------------------------------------------
// Child: b
// -----------------------------------------------------------------------------

// Has
int
WattBHas(ConstHandle2ConstWatt self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BHas", self, extract::b);
}

// Get, const
Handle2ConstB
WattBGetConst(ConstHandle2ConstWatt self)
{
   return detail::getField<CPP,Handle2ConstB>
      (CLASSNAME, CLASSNAME+"BGetConst", self, extract::b);
}

// Get, non-const
Handle2B
WattBGet(ConstHandle2Watt self)
{
   return detail::getField<CPP,Handle2B>
      (CLASSNAME, CLASSNAME+"BGet", self, extract::b);
}

// Set
void
WattBSet(ConstHandle2Watt self, ConstHandle2ConstB b)
{
   detail::setField<CPP,CPPB>
      (CLASSNAME, CLASSNAME+"BSet", self, extract::b, b);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/fissionTransport/Watt/src/custom.cpp"
