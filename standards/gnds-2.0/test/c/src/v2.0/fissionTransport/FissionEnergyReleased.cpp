
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/fissionTransport/FissionEnergyReleased.hpp"
#include "FissionEnergyReleased.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = FissionEnergyReleasedClass;
using CPP = multigroup::FissionEnergyReleased;

static const std::string CLASSNAME = "FissionEnergyReleased";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto delayedBetaEnergy = [](auto &obj) { return &obj.delayedBetaEnergy; };
   static auto delayedGammaEnergy = [](auto &obj) { return &obj.delayedGammaEnergy; };
   static auto delayedNeutronKE = [](auto &obj) { return &obj.delayedNeutronKE; };
   static auto neutrinoEnergy = [](auto &obj) { return &obj.neutrinoEnergy; };
   static auto nonNeutrinoEnergy = [](auto &obj) { return &obj.nonNeutrinoEnergy; };
   static auto promptGammaEnergy = [](auto &obj) { return &obj.promptGammaEnergy; };
   static auto promptNeutronKE = [](auto &obj) { return &obj.promptNeutronKE; };
   static auto promptProductKE = [](auto &obj) { return &obj.promptProductKE; };
   static auto totalEnergy = [](auto &obj) { return &obj.totalEnergy; };
}

using CPPDelayedBetaEnergy = fissionTransport::DelayedBetaEnergy;
using CPPDelayedGammaEnergy = fissionTransport::DelayedGammaEnergy;
using CPPDelayedNeutronKE = fissionTransport::DelayedNeutronKE;
using CPPNeutrinoEnergy = fissionTransport::NeutrinoEnergy;
using CPPNonNeutrinoEnergy = fissionTransport::NonNeutrinoEnergy;
using CPPPromptGammaEnergy = fissionTransport::PromptGammaEnergy;
using CPPPromptNeutronKE = fissionTransport::PromptNeutronKE;
using CPPPromptProductKE = fissionTransport::PromptProductKE;
using CPPTotalEnergy = fissionTransport::TotalEnergy;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstFissionEnergyReleased
FissionEnergyReleasedDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2FissionEnergyReleased
FissionEnergyReleasedDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstFissionEnergyReleased
FissionEnergyReleasedCreateConst(
   const XMLName label,
   ConstHandle2ConstDelayedBetaEnergy delayedBetaEnergy,
   ConstHandle2ConstDelayedGammaEnergy delayedGammaEnergy,
   ConstHandle2ConstDelayedNeutronKE delayedNeutronKE,
   ConstHandle2ConstNeutrinoEnergy neutrinoEnergy,
   ConstHandle2ConstNonNeutrinoEnergy nonNeutrinoEnergy,
   ConstHandle2ConstPromptGammaEnergy promptGammaEnergy,
   ConstHandle2ConstPromptNeutronKE promptNeutronKE,
   ConstHandle2ConstPromptProductKE promptProductKE,
   ConstHandle2ConstTotalEnergy totalEnergy
) {
   ConstHandle2FissionEnergyReleased handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      detail::tocpp<CPPDelayedBetaEnergy>(delayedBetaEnergy),
      detail::tocpp<CPPDelayedGammaEnergy>(delayedGammaEnergy),
      detail::tocpp<CPPDelayedNeutronKE>(delayedNeutronKE),
      detail::tocpp<CPPNeutrinoEnergy>(neutrinoEnergy),
      detail::tocpp<CPPNonNeutrinoEnergy>(nonNeutrinoEnergy),
      detail::tocpp<CPPPromptGammaEnergy>(promptGammaEnergy),
      detail::tocpp<CPPPromptNeutronKE>(promptNeutronKE),
      detail::tocpp<CPPPromptProductKE>(promptProductKE),
      detail::tocpp<CPPTotalEnergy>(totalEnergy)
   );
   return handle;
}

// Create, general
Handle2FissionEnergyReleased
FissionEnergyReleasedCreate(
   const XMLName label,
   ConstHandle2ConstDelayedBetaEnergy delayedBetaEnergy,
   ConstHandle2ConstDelayedGammaEnergy delayedGammaEnergy,
   ConstHandle2ConstDelayedNeutronKE delayedNeutronKE,
   ConstHandle2ConstNeutrinoEnergy neutrinoEnergy,
   ConstHandle2ConstNonNeutrinoEnergy nonNeutrinoEnergy,
   ConstHandle2ConstPromptGammaEnergy promptGammaEnergy,
   ConstHandle2ConstPromptNeutronKE promptNeutronKE,
   ConstHandle2ConstPromptProductKE promptProductKE,
   ConstHandle2ConstTotalEnergy totalEnergy
) {
   ConstHandle2FissionEnergyReleased handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      detail::tocpp<CPPDelayedBetaEnergy>(delayedBetaEnergy),
      detail::tocpp<CPPDelayedGammaEnergy>(delayedGammaEnergy),
      detail::tocpp<CPPDelayedNeutronKE>(delayedNeutronKE),
      detail::tocpp<CPPNeutrinoEnergy>(neutrinoEnergy),
      detail::tocpp<CPPNonNeutrinoEnergy>(nonNeutrinoEnergy),
      detail::tocpp<CPPPromptGammaEnergy>(promptGammaEnergy),
      detail::tocpp<CPPPromptNeutronKE>(promptNeutronKE),
      detail::tocpp<CPPPromptProductKE>(promptProductKE),
      detail::tocpp<CPPTotalEnergy>(totalEnergy)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
FissionEnergyReleasedAssign(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstFissionEnergyReleased from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
FissionEnergyReleasedDelete(ConstHandle2ConstFissionEnergyReleased self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
FissionEnergyReleasedRead(ConstHandle2FissionEnergyReleased self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
FissionEnergyReleasedWrite(ConstHandle2ConstFissionEnergyReleased self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
FissionEnergyReleasedPrint(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
FissionEnergyReleasedPrintXML(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
FissionEnergyReleasedPrintJSON(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedLabelHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
FissionEnergyReleasedLabelGet(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
FissionEnergyReleasedLabelSet(ConstHandle2FissionEnergyReleased self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: delayedBetaEnergy
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedDelayedBetaEnergyHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DelayedBetaEnergyHas", self, extract::delayedBetaEnergy);
}

// Get, const
Handle2ConstDelayedBetaEnergy
FissionEnergyReleasedDelayedBetaEnergyGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstDelayedBetaEnergy>
      (CLASSNAME, CLASSNAME+"DelayedBetaEnergyGetConst", self, extract::delayedBetaEnergy);
}

// Get, non-const
Handle2DelayedBetaEnergy
FissionEnergyReleasedDelayedBetaEnergyGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2DelayedBetaEnergy>
      (CLASSNAME, CLASSNAME+"DelayedBetaEnergyGet", self, extract::delayedBetaEnergy);
}

// Set
void
FissionEnergyReleasedDelayedBetaEnergySet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstDelayedBetaEnergy delayedBetaEnergy)
{
   detail::setField<CPP,CPPDelayedBetaEnergy>
      (CLASSNAME, CLASSNAME+"DelayedBetaEnergySet", self, extract::delayedBetaEnergy, delayedBetaEnergy);
}


// -----------------------------------------------------------------------------
// Child: delayedGammaEnergy
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedDelayedGammaEnergyHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DelayedGammaEnergyHas", self, extract::delayedGammaEnergy);
}

// Get, const
Handle2ConstDelayedGammaEnergy
FissionEnergyReleasedDelayedGammaEnergyGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstDelayedGammaEnergy>
      (CLASSNAME, CLASSNAME+"DelayedGammaEnergyGetConst", self, extract::delayedGammaEnergy);
}

// Get, non-const
Handle2DelayedGammaEnergy
FissionEnergyReleasedDelayedGammaEnergyGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2DelayedGammaEnergy>
      (CLASSNAME, CLASSNAME+"DelayedGammaEnergyGet", self, extract::delayedGammaEnergy);
}

// Set
void
FissionEnergyReleasedDelayedGammaEnergySet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstDelayedGammaEnergy delayedGammaEnergy)
{
   detail::setField<CPP,CPPDelayedGammaEnergy>
      (CLASSNAME, CLASSNAME+"DelayedGammaEnergySet", self, extract::delayedGammaEnergy, delayedGammaEnergy);
}


// -----------------------------------------------------------------------------
// Child: delayedNeutronKE
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedDelayedNeutronKEHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DelayedNeutronKEHas", self, extract::delayedNeutronKE);
}

// Get, const
Handle2ConstDelayedNeutronKE
FissionEnergyReleasedDelayedNeutronKEGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstDelayedNeutronKE>
      (CLASSNAME, CLASSNAME+"DelayedNeutronKEGetConst", self, extract::delayedNeutronKE);
}

// Get, non-const
Handle2DelayedNeutronKE
FissionEnergyReleasedDelayedNeutronKEGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2DelayedNeutronKE>
      (CLASSNAME, CLASSNAME+"DelayedNeutronKEGet", self, extract::delayedNeutronKE);
}

// Set
void
FissionEnergyReleasedDelayedNeutronKESet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstDelayedNeutronKE delayedNeutronKE)
{
   detail::setField<CPP,CPPDelayedNeutronKE>
      (CLASSNAME, CLASSNAME+"DelayedNeutronKESet", self, extract::delayedNeutronKE, delayedNeutronKE);
}


// -----------------------------------------------------------------------------
// Child: neutrinoEnergy
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedNeutrinoEnergyHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NeutrinoEnergyHas", self, extract::neutrinoEnergy);
}

// Get, const
Handle2ConstNeutrinoEnergy
FissionEnergyReleasedNeutrinoEnergyGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstNeutrinoEnergy>
      (CLASSNAME, CLASSNAME+"NeutrinoEnergyGetConst", self, extract::neutrinoEnergy);
}

// Get, non-const
Handle2NeutrinoEnergy
FissionEnergyReleasedNeutrinoEnergyGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2NeutrinoEnergy>
      (CLASSNAME, CLASSNAME+"NeutrinoEnergyGet", self, extract::neutrinoEnergy);
}

// Set
void
FissionEnergyReleasedNeutrinoEnergySet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstNeutrinoEnergy neutrinoEnergy)
{
   detail::setField<CPP,CPPNeutrinoEnergy>
      (CLASSNAME, CLASSNAME+"NeutrinoEnergySet", self, extract::neutrinoEnergy, neutrinoEnergy);
}


// -----------------------------------------------------------------------------
// Child: nonNeutrinoEnergy
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedNonNeutrinoEnergyHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NonNeutrinoEnergyHas", self, extract::nonNeutrinoEnergy);
}

// Get, const
Handle2ConstNonNeutrinoEnergy
FissionEnergyReleasedNonNeutrinoEnergyGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstNonNeutrinoEnergy>
      (CLASSNAME, CLASSNAME+"NonNeutrinoEnergyGetConst", self, extract::nonNeutrinoEnergy);
}

// Get, non-const
Handle2NonNeutrinoEnergy
FissionEnergyReleasedNonNeutrinoEnergyGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2NonNeutrinoEnergy>
      (CLASSNAME, CLASSNAME+"NonNeutrinoEnergyGet", self, extract::nonNeutrinoEnergy);
}

// Set
void
FissionEnergyReleasedNonNeutrinoEnergySet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstNonNeutrinoEnergy nonNeutrinoEnergy)
{
   detail::setField<CPP,CPPNonNeutrinoEnergy>
      (CLASSNAME, CLASSNAME+"NonNeutrinoEnergySet", self, extract::nonNeutrinoEnergy, nonNeutrinoEnergy);
}


// -----------------------------------------------------------------------------
// Child: promptGammaEnergy
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedPromptGammaEnergyHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PromptGammaEnergyHas", self, extract::promptGammaEnergy);
}

// Get, const
Handle2ConstPromptGammaEnergy
FissionEnergyReleasedPromptGammaEnergyGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstPromptGammaEnergy>
      (CLASSNAME, CLASSNAME+"PromptGammaEnergyGetConst", self, extract::promptGammaEnergy);
}

// Get, non-const
Handle2PromptGammaEnergy
FissionEnergyReleasedPromptGammaEnergyGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2PromptGammaEnergy>
      (CLASSNAME, CLASSNAME+"PromptGammaEnergyGet", self, extract::promptGammaEnergy);
}

// Set
void
FissionEnergyReleasedPromptGammaEnergySet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstPromptGammaEnergy promptGammaEnergy)
{
   detail::setField<CPP,CPPPromptGammaEnergy>
      (CLASSNAME, CLASSNAME+"PromptGammaEnergySet", self, extract::promptGammaEnergy, promptGammaEnergy);
}


// -----------------------------------------------------------------------------
// Child: promptNeutronKE
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedPromptNeutronKEHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PromptNeutronKEHas", self, extract::promptNeutronKE);
}

// Get, const
Handle2ConstPromptNeutronKE
FissionEnergyReleasedPromptNeutronKEGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstPromptNeutronKE>
      (CLASSNAME, CLASSNAME+"PromptNeutronKEGetConst", self, extract::promptNeutronKE);
}

// Get, non-const
Handle2PromptNeutronKE
FissionEnergyReleasedPromptNeutronKEGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2PromptNeutronKE>
      (CLASSNAME, CLASSNAME+"PromptNeutronKEGet", self, extract::promptNeutronKE);
}

// Set
void
FissionEnergyReleasedPromptNeutronKESet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstPromptNeutronKE promptNeutronKE)
{
   detail::setField<CPP,CPPPromptNeutronKE>
      (CLASSNAME, CLASSNAME+"PromptNeutronKESet", self, extract::promptNeutronKE, promptNeutronKE);
}


// -----------------------------------------------------------------------------
// Child: promptProductKE
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedPromptProductKEHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PromptProductKEHas", self, extract::promptProductKE);
}

// Get, const
Handle2ConstPromptProductKE
FissionEnergyReleasedPromptProductKEGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstPromptProductKE>
      (CLASSNAME, CLASSNAME+"PromptProductKEGetConst", self, extract::promptProductKE);
}

// Get, non-const
Handle2PromptProductKE
FissionEnergyReleasedPromptProductKEGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2PromptProductKE>
      (CLASSNAME, CLASSNAME+"PromptProductKEGet", self, extract::promptProductKE);
}

// Set
void
FissionEnergyReleasedPromptProductKESet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstPromptProductKE promptProductKE)
{
   detail::setField<CPP,CPPPromptProductKE>
      (CLASSNAME, CLASSNAME+"PromptProductKESet", self, extract::promptProductKE, promptProductKE);
}


// -----------------------------------------------------------------------------
// Child: totalEnergy
// -----------------------------------------------------------------------------

// Has
int
FissionEnergyReleasedTotalEnergyHas(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TotalEnergyHas", self, extract::totalEnergy);
}

// Get, const
Handle2ConstTotalEnergy
FissionEnergyReleasedTotalEnergyGetConst(ConstHandle2ConstFissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2ConstTotalEnergy>
      (CLASSNAME, CLASSNAME+"TotalEnergyGetConst", self, extract::totalEnergy);
}

// Get, non-const
Handle2TotalEnergy
FissionEnergyReleasedTotalEnergyGet(ConstHandle2FissionEnergyReleased self)
{
   return detail::getField<CPP,Handle2TotalEnergy>
      (CLASSNAME, CLASSNAME+"TotalEnergyGet", self, extract::totalEnergy);
}

// Set
void
FissionEnergyReleasedTotalEnergySet(ConstHandle2FissionEnergyReleased self, ConstHandle2ConstTotalEnergy totalEnergy)
{
   detail::setField<CPP,CPPTotalEnergy>
      (CLASSNAME, CLASSNAME+"TotalEnergySet", self, extract::totalEnergy, totalEnergy);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/fissionTransport/FissionEnergyReleased/src/custom.cpp"
