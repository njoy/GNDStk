
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/fissionTransport/PromptNeutronKE.hpp"
#include "PromptNeutronKE.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = PromptNeutronKEClass;
using CPP = multigroup::PromptNeutronKE;

static const std::string CLASSNAME = "PromptNeutronKE";

namespace extract {
   static auto XYs1d = [](auto &obj) { return &obj.XYs1d; };
   static auto polynomial1d = [](auto &obj) { return &obj.polynomial1d; };
}

using CPPXYs1d = containers::XYs1d;
using CPPPolynomial1d = containers::Polynomial1d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstPromptNeutronKE
PromptNeutronKEDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2PromptNeutronKE
PromptNeutronKEDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstPromptNeutronKE
PromptNeutronKECreateConst(
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstPolynomial1d polynomial1d
) {
   ConstHandle2PromptNeutronKE handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPXYs1d>(XYs1d),
      detail::tocpp<CPPPolynomial1d>(polynomial1d)
   );
   return handle;
}

// Create, general
Handle2PromptNeutronKE
PromptNeutronKECreate(
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstPolynomial1d polynomial1d
) {
   ConstHandle2PromptNeutronKE handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPXYs1d>(XYs1d),
      detail::tocpp<CPPPolynomial1d>(polynomial1d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
PromptNeutronKEAssign(ConstHandle2PromptNeutronKE This, ConstHandle2ConstPromptNeutronKE from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
PromptNeutronKEDelete(ConstHandle2ConstPromptNeutronKE This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
PromptNeutronKERead(ConstHandle2PromptNeutronKE This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
PromptNeutronKEWrite(ConstHandle2ConstPromptNeutronKE This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
PromptNeutronKEPrint(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
PromptNeutronKEPrintXML(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
PromptNeutronKEPrintJSON(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: XYs1d
// -----------------------------------------------------------------------------

// Has
int
PromptNeutronKEXYs1dHas(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHas", This, extract::XYs1d);
}

// Get, const
Handle2ConstXYs1d
PromptNeutronKEXYs1dGetConst(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::getField<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetConst", This, extract::XYs1d);
}

// Get, non-const
Handle2XYs1d
PromptNeutronKEXYs1dGet(ConstHandle2PromptNeutronKE This)
{
   return detail::getField<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGet", This, extract::XYs1d);
}

// Set
void
PromptNeutronKEXYs1dSet(ConstHandle2PromptNeutronKE This, ConstHandle2ConstXYs1d XYs1d)
{
   detail::setField<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSet", This, extract::XYs1d, XYs1d);
}


// -----------------------------------------------------------------------------
// Child: polynomial1d
// -----------------------------------------------------------------------------

// Has
int
PromptNeutronKEPolynomial1dHas(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Polynomial1dHas", This, extract::polynomial1d);
}

// Get, const
Handle2ConstPolynomial1d
PromptNeutronKEPolynomial1dGetConst(ConstHandle2ConstPromptNeutronKE This)
{
   return detail::getField<CPP,Handle2ConstPolynomial1d>
      (CLASSNAME, CLASSNAME+"Polynomial1dGetConst", This, extract::polynomial1d);
}

// Get, non-const
Handle2Polynomial1d
PromptNeutronKEPolynomial1dGet(ConstHandle2PromptNeutronKE This)
{
   return detail::getField<CPP,Handle2Polynomial1d>
      (CLASSNAME, CLASSNAME+"Polynomial1dGet", This, extract::polynomial1d);
}

// Set
void
PromptNeutronKEPolynomial1dSet(ConstHandle2PromptNeutronKE This, ConstHandle2ConstPolynomial1d polynomial1d)
{
   detail::setField<CPP,CPPPolynomial1d>
      (CLASSNAME, CLASSNAME+"Polynomial1dSet", This, extract::polynomial1d, polynomial1d);
}
