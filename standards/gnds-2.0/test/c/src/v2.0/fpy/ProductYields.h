
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// ProductYields is the basic handle type in this file. Example:
//    // Create a default ProductYields object:
//    ProductYields handle = ProductYieldsDefault();
// Functions involving ProductYields are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_FPY_PRODUCTYIELDS
#define C_INTERFACE_TEST_V2_0_FPY_PRODUCTYIELDS

#include "GNDStk.h"
#include "v2.0/fpy/ProductYield.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ProductYieldsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ProductYields
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ProductYieldsClass *ProductYields;

// --- Const-aware handles.
typedef const struct ProductYieldsClass *const ConstHandle2ConstProductYields;
typedef       struct ProductYieldsClass *const ConstHandle2ProductYields;
typedef const struct ProductYieldsClass *      Handle2ConstProductYields;
typedef       struct ProductYieldsClass *      Handle2ProductYields;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstProductYields
ProductYieldsDefaultConst();

// +++ Create, default
extern_c Handle2ProductYields
ProductYieldsDefault();

// --- Create, general, const
extern_c Handle2ConstProductYields
ProductYieldsCreateConst(
   ConstHandle2ProductYield *const productYield, const size_t productYieldSize
);

// +++ Create, general
extern_c Handle2ProductYields
ProductYieldsCreate(
   ConstHandle2ProductYield *const productYield, const size_t productYieldSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ProductYieldsAssign(ConstHandle2ProductYields This, ConstHandle2ConstProductYields from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ProductYieldsDelete(ConstHandle2ConstProductYields This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ProductYieldsRead(ConstHandle2ProductYields This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ProductYieldsWrite(ConstHandle2ConstProductYields This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ProductYieldsPrint(ConstHandle2ConstProductYields This);

// +++ Print to standard output, as XML
extern_c int
ProductYieldsPrintXML(ConstHandle2ConstProductYields This);

// +++ Print to standard output, as JSON
extern_c int
ProductYieldsPrintJSON(ConstHandle2ConstProductYields This);


// -----------------------------------------------------------------------------
// Child: productYield
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProductYieldsProductYieldHas(ConstHandle2ConstProductYields This);

// +++ Clear
extern_c void
ProductYieldsProductYieldClear(ConstHandle2ProductYields This);

// +++ Size
extern_c size_t
ProductYieldsProductYieldSize(ConstHandle2ConstProductYields This);

// +++ Add
extern_c void
ProductYieldsProductYieldAdd(ConstHandle2ProductYields This, ConstHandle2ConstProductYield productYield);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstProductYield
ProductYieldsProductYieldGetConst(ConstHandle2ConstProductYields This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2ProductYield
ProductYieldsProductYieldGet(ConstHandle2ProductYields This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
ProductYieldsProductYieldSet(
   ConstHandle2ProductYields This,
   const size_t index_,
   ConstHandle2ConstProductYield productYield
);

// +++ Has, by label
extern_c int
ProductYieldsProductYieldHasByLabel(
   ConstHandle2ConstProductYields This,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstProductYield
ProductYieldsProductYieldGetByLabelConst(
   ConstHandle2ConstProductYields This,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2ProductYield
ProductYieldsProductYieldGetByLabel(
   ConstHandle2ProductYields This,
   const XMLName label
);

// +++ Set, by label
extern_c void
ProductYieldsProductYieldSetByLabel(
   ConstHandle2ProductYields This,
   const XMLName label,
   ConstHandle2ConstProductYield productYield
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/fpy/ProductYields/src/custom.h"

#undef extern_c
#endif
