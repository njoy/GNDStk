
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/styles/Transportable.hpp"
#include "Transportable.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = TransportableClass;
using CPP = multigroup::Transportable;

static const std::string CLASSNAME = "Transportable";

namespace extract {
   static auto conserve = [](auto &obj) { return &obj.conserve; };
   static auto label = [](auto &obj) { return &obj.label; };
   static auto multiGroup = [](auto &obj) { return &obj.multiGroup; };
}

using CPPMultiGroup = styles::MultiGroup;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstTransportable
TransportableDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Transportable
TransportableDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstTransportable
TransportableCreateConst(
   const XMLName conserve,
   const XMLName label,
   ConstHandle2ConstMultiGroup multiGroup
) {
   ConstHandle2Transportable handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      conserve,
      label,
      detail::tocpp<CPPMultiGroup>(multiGroup)
   );
   return handle;
}

// Create, general
Handle2Transportable
TransportableCreate(
   const XMLName conserve,
   const XMLName label,
   ConstHandle2ConstMultiGroup multiGroup
) {
   ConstHandle2Transportable handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      conserve,
      label,
      detail::tocpp<CPPMultiGroup>(multiGroup)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
TransportableAssign(ConstHandle2Transportable self, ConstHandle2ConstTransportable from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
TransportableDelete(ConstHandle2ConstTransportable self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
TransportableRead(ConstHandle2Transportable self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
TransportableWrite(ConstHandle2ConstTransportable self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
TransportablePrint(ConstHandle2ConstTransportable self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
TransportablePrintXML(ConstHandle2ConstTransportable self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
TransportablePrintJSON(ConstHandle2ConstTransportable self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: conserve
// -----------------------------------------------------------------------------

// Has
int
TransportableConserveHas(ConstHandle2ConstTransportable self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ConserveHas", self, extract::conserve);
}

// Get
// Returns by value
XMLName
TransportableConserveGet(ConstHandle2ConstTransportable self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ConserveGet", self, extract::conserve);
}

// Set
void
TransportableConserveSet(ConstHandle2Transportable self, const XMLName conserve)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ConserveSet", self, extract::conserve, conserve);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
TransportableLabelHas(ConstHandle2ConstTransportable self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
TransportableLabelGet(ConstHandle2ConstTransportable self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
TransportableLabelSet(ConstHandle2Transportable self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: multiGroup
// -----------------------------------------------------------------------------

// Has
int
TransportableMultiGroupHas(ConstHandle2ConstTransportable self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MultiGroupHas", self, extract::multiGroup);
}

// Get, const
Handle2ConstMultiGroup
TransportableMultiGroupGetConst(ConstHandle2ConstTransportable self)
{
   return detail::getField<CPP,Handle2ConstMultiGroup>
      (CLASSNAME, CLASSNAME+"MultiGroupGetConst", self, extract::multiGroup);
}

// Get, non-const
Handle2MultiGroup
TransportableMultiGroupGet(ConstHandle2Transportable self)
{
   return detail::getField<CPP,Handle2MultiGroup>
      (CLASSNAME, CLASSNAME+"MultiGroupGet", self, extract::multiGroup);
}

// Set
void
TransportableMultiGroupSet(ConstHandle2Transportable self, ConstHandle2ConstMultiGroup multiGroup)
{
   detail::setField<CPP,CPPMultiGroup>
      (CLASSNAME, CLASSNAME+"MultiGroupSet", self, extract::multiGroup, multiGroup);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/styles/Transportable/src/custom.cpp"
