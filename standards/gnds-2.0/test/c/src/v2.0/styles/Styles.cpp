
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/styles/Styles.hpp"
#include "Styles.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = StylesClass;
using CPP = multigroup::Styles;

static const std::string CLASSNAME = "Styles";

namespace extract {
   static auto evaluated = [](auto &obj) { return &obj.evaluated; };
   static auto crossSectionReconstructed = [](auto &obj) { return &obj.crossSectionReconstructed; };
   static auto angularDistributionReconstructed = [](auto &obj) { return &obj.angularDistributionReconstructed; };
   static auto CoulombPlusNuclearElasticMuCutoff = [](auto &obj) { return &obj.CoulombPlusNuclearElasticMuCutoff; };
   static auto heated = [](auto &obj) { return &obj.heated; };
   static auto averageProductData = [](auto &obj) { return &obj.averageProductData; };
   static auto MonteCarlo_cdf = [](auto &obj) { return &obj.MonteCarlo_cdf; };
   static auto griddedCrossSection = [](auto &obj) { return &obj.griddedCrossSection; };
   static auto URR_probabilityTables = [](auto &obj) { return &obj.URR_probabilityTables; };
   static auto heatedMultiGroup = [](auto &obj) { return &obj.heatedMultiGroup; };
   static auto SnElasticUpScatter = [](auto &obj) { return &obj.SnElasticUpScatter; };
}

using CPPEvaluated = styles::Evaluated;
using CPPCrossSectionReconstructed = styles::CrossSectionReconstructed;
using CPPAngularDistributionReconstructed = styles::AngularDistributionReconstructed;
using CPPCoulombPlusNuclearElasticMuCutoff = styles::CoulombPlusNuclearElasticMuCutoff;
using CPPHeated = styles::Heated;
using CPPAverageProductData = styles::AverageProductData;
using CPPMonteCarlo_cdf = styles::MonteCarlo_cdf;
using CPPGriddedCrossSection = styles::GriddedCrossSection;
using CPPURR_probabilityTables = styles::URR_probabilityTables;
using CPPHeatedMultiGroup = styles::HeatedMultiGroup;
using CPPSnElasticUpScatter = styles::SnElasticUpScatter;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstStyles
StylesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Styles
StylesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstStyles
StylesCreateConst(
   ConstHandle2Evaluated *const evaluated, const size_t evaluatedSize,
   ConstHandle2CrossSectionReconstructed *const crossSectionReconstructed, const size_t crossSectionReconstructedSize,
   ConstHandle2AngularDistributionReconstructed *const angularDistributionReconstructed, const size_t angularDistributionReconstructedSize,
   ConstHandle2CoulombPlusNuclearElasticMuCutoff *const CoulombPlusNuclearElasticMuCutoff, const size_t CoulombPlusNuclearElasticMuCutoffSize,
   ConstHandle2Heated *const heated, const size_t heatedSize,
   ConstHandle2AverageProductData *const averageProductData, const size_t averageProductDataSize,
   ConstHandle2MonteCarlo_cdf *const MonteCarlo_cdf, const size_t MonteCarlo_cdfSize,
   ConstHandle2GriddedCrossSection *const griddedCrossSection, const size_t griddedCrossSectionSize,
   ConstHandle2URR_probabilityTables *const URR_probabilityTables, const size_t URR_probabilityTablesSize,
   ConstHandle2HeatedMultiGroup *const heatedMultiGroup, const size_t heatedMultiGroupSize,
   ConstHandle2SnElasticUpScatter *const SnElasticUpScatter, const size_t SnElasticUpScatterSize
) {
   ConstHandle2Styles handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPEvaluated>{},
      std::vector<CPPCrossSectionReconstructed>{},
      std::vector<CPPAngularDistributionReconstructed>{},
      std::vector<CPPCoulombPlusNuclearElasticMuCutoff>{},
      std::vector<CPPHeated>{},
      std::vector<CPPAverageProductData>{},
      std::vector<CPPMonteCarlo_cdf>{},
      std::vector<CPPGriddedCrossSection>{},
      std::vector<CPPURR_probabilityTables>{},
      std::vector<CPPHeatedMultiGroup>{},
      std::vector<CPPSnElasticUpScatter>{}
   );
   for (size_t EvaluatedN = 0; EvaluatedN < evaluatedSize; ++EvaluatedN)
      StylesEvaluatedAdd(handle, evaluated[EvaluatedN]);
   for (size_t CrossSectionReconstructedN = 0; CrossSectionReconstructedN < crossSectionReconstructedSize; ++CrossSectionReconstructedN)
      StylesCrossSectionReconstructedAdd(handle, crossSectionReconstructed[CrossSectionReconstructedN]);
   for (size_t AngularDistributionReconstructedN = 0; AngularDistributionReconstructedN < angularDistributionReconstructedSize; ++AngularDistributionReconstructedN)
      StylesAngularDistributionReconstructedAdd(handle, angularDistributionReconstructed[AngularDistributionReconstructedN]);
   for (size_t CoulombPlusNuclearElasticMuCutoffN = 0; CoulombPlusNuclearElasticMuCutoffN < CoulombPlusNuclearElasticMuCutoffSize; ++CoulombPlusNuclearElasticMuCutoffN)
      StylesCoulombPlusNuclearElasticMuCutoffAdd(handle, CoulombPlusNuclearElasticMuCutoff[CoulombPlusNuclearElasticMuCutoffN]);
   for (size_t HeatedN = 0; HeatedN < heatedSize; ++HeatedN)
      StylesHeatedAdd(handle, heated[HeatedN]);
   for (size_t AverageProductDataN = 0; AverageProductDataN < averageProductDataSize; ++AverageProductDataN)
      StylesAverageProductDataAdd(handle, averageProductData[AverageProductDataN]);
   for (size_t MonteCarlo_cdfN = 0; MonteCarlo_cdfN < MonteCarlo_cdfSize; ++MonteCarlo_cdfN)
      StylesMonteCarlo_cdfAdd(handle, MonteCarlo_cdf[MonteCarlo_cdfN]);
   for (size_t GriddedCrossSectionN = 0; GriddedCrossSectionN < griddedCrossSectionSize; ++GriddedCrossSectionN)
      StylesGriddedCrossSectionAdd(handle, griddedCrossSection[GriddedCrossSectionN]);
   for (size_t URR_probabilityTablesN = 0; URR_probabilityTablesN < URR_probabilityTablesSize; ++URR_probabilityTablesN)
      StylesURR_probabilityTablesAdd(handle, URR_probabilityTables[URR_probabilityTablesN]);
   for (size_t HeatedMultiGroupN = 0; HeatedMultiGroupN < heatedMultiGroupSize; ++HeatedMultiGroupN)
      StylesHeatedMultiGroupAdd(handle, heatedMultiGroup[HeatedMultiGroupN]);
   for (size_t SnElasticUpScatterN = 0; SnElasticUpScatterN < SnElasticUpScatterSize; ++SnElasticUpScatterN)
      StylesSnElasticUpScatterAdd(handle, SnElasticUpScatter[SnElasticUpScatterN]);
   return handle;
}

// Create, general
Handle2Styles
StylesCreate(
   ConstHandle2Evaluated *const evaluated, const size_t evaluatedSize,
   ConstHandle2CrossSectionReconstructed *const crossSectionReconstructed, const size_t crossSectionReconstructedSize,
   ConstHandle2AngularDistributionReconstructed *const angularDistributionReconstructed, const size_t angularDistributionReconstructedSize,
   ConstHandle2CoulombPlusNuclearElasticMuCutoff *const CoulombPlusNuclearElasticMuCutoff, const size_t CoulombPlusNuclearElasticMuCutoffSize,
   ConstHandle2Heated *const heated, const size_t heatedSize,
   ConstHandle2AverageProductData *const averageProductData, const size_t averageProductDataSize,
   ConstHandle2MonteCarlo_cdf *const MonteCarlo_cdf, const size_t MonteCarlo_cdfSize,
   ConstHandle2GriddedCrossSection *const griddedCrossSection, const size_t griddedCrossSectionSize,
   ConstHandle2URR_probabilityTables *const URR_probabilityTables, const size_t URR_probabilityTablesSize,
   ConstHandle2HeatedMultiGroup *const heatedMultiGroup, const size_t heatedMultiGroupSize,
   ConstHandle2SnElasticUpScatter *const SnElasticUpScatter, const size_t SnElasticUpScatterSize
) {
   ConstHandle2Styles handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPEvaluated>{},
      std::vector<CPPCrossSectionReconstructed>{},
      std::vector<CPPAngularDistributionReconstructed>{},
      std::vector<CPPCoulombPlusNuclearElasticMuCutoff>{},
      std::vector<CPPHeated>{},
      std::vector<CPPAverageProductData>{},
      std::vector<CPPMonteCarlo_cdf>{},
      std::vector<CPPGriddedCrossSection>{},
      std::vector<CPPURR_probabilityTables>{},
      std::vector<CPPHeatedMultiGroup>{},
      std::vector<CPPSnElasticUpScatter>{}
   );
   for (size_t EvaluatedN = 0; EvaluatedN < evaluatedSize; ++EvaluatedN)
      StylesEvaluatedAdd(handle, evaluated[EvaluatedN]);
   for (size_t CrossSectionReconstructedN = 0; CrossSectionReconstructedN < crossSectionReconstructedSize; ++CrossSectionReconstructedN)
      StylesCrossSectionReconstructedAdd(handle, crossSectionReconstructed[CrossSectionReconstructedN]);
   for (size_t AngularDistributionReconstructedN = 0; AngularDistributionReconstructedN < angularDistributionReconstructedSize; ++AngularDistributionReconstructedN)
      StylesAngularDistributionReconstructedAdd(handle, angularDistributionReconstructed[AngularDistributionReconstructedN]);
   for (size_t CoulombPlusNuclearElasticMuCutoffN = 0; CoulombPlusNuclearElasticMuCutoffN < CoulombPlusNuclearElasticMuCutoffSize; ++CoulombPlusNuclearElasticMuCutoffN)
      StylesCoulombPlusNuclearElasticMuCutoffAdd(handle, CoulombPlusNuclearElasticMuCutoff[CoulombPlusNuclearElasticMuCutoffN]);
   for (size_t HeatedN = 0; HeatedN < heatedSize; ++HeatedN)
      StylesHeatedAdd(handle, heated[HeatedN]);
   for (size_t AverageProductDataN = 0; AverageProductDataN < averageProductDataSize; ++AverageProductDataN)
      StylesAverageProductDataAdd(handle, averageProductData[AverageProductDataN]);
   for (size_t MonteCarlo_cdfN = 0; MonteCarlo_cdfN < MonteCarlo_cdfSize; ++MonteCarlo_cdfN)
      StylesMonteCarlo_cdfAdd(handle, MonteCarlo_cdf[MonteCarlo_cdfN]);
   for (size_t GriddedCrossSectionN = 0; GriddedCrossSectionN < griddedCrossSectionSize; ++GriddedCrossSectionN)
      StylesGriddedCrossSectionAdd(handle, griddedCrossSection[GriddedCrossSectionN]);
   for (size_t URR_probabilityTablesN = 0; URR_probabilityTablesN < URR_probabilityTablesSize; ++URR_probabilityTablesN)
      StylesURR_probabilityTablesAdd(handle, URR_probabilityTables[URR_probabilityTablesN]);
   for (size_t HeatedMultiGroupN = 0; HeatedMultiGroupN < heatedMultiGroupSize; ++HeatedMultiGroupN)
      StylesHeatedMultiGroupAdd(handle, heatedMultiGroup[HeatedMultiGroupN]);
   for (size_t SnElasticUpScatterN = 0; SnElasticUpScatterN < SnElasticUpScatterSize; ++SnElasticUpScatterN)
      StylesSnElasticUpScatterAdd(handle, SnElasticUpScatter[SnElasticUpScatterN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
StylesAssign(ConstHandle2Styles self, ConstHandle2ConstStyles from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
StylesDelete(ConstHandle2ConstStyles self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
StylesRead(ConstHandle2Styles self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
StylesWrite(ConstHandle2ConstStyles self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
StylesPrint(ConstHandle2ConstStyles self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
StylesPrintXML(ConstHandle2ConstStyles self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
StylesPrintJSON(ConstHandle2ConstStyles self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: evaluated
// -----------------------------------------------------------------------------

// Has
int
StylesEvaluatedHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHas", self, extract::evaluated);
}

// Clear
void
StylesEvaluatedClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedClear", self, extract::evaluated);
}

// Size
size_t
StylesEvaluatedSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedSize", self, extract::evaluated);
}

// Add
void
StylesEvaluatedAdd(ConstHandle2Styles self, ConstHandle2ConstEvaluated evaluated)
{
   detail::addToContainer<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedAdd", self, extract::evaluated, evaluated);
}

// Get, by index \in [0,size), const
Handle2ConstEvaluated
StylesEvaluatedGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetConst", self, extract::evaluated, index_);
}

// Get, by index \in [0,size), non-const
Handle2Evaluated
StylesEvaluatedGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGet", self, extract::evaluated, index_);
}

// Set, by index \in [0,size)
void
StylesEvaluatedSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstEvaluated evaluated
) {
   detail::setByIndex<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSet", self, extract::evaluated, index_, evaluated);
}

// Has, by date
int
StylesEvaluatedHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHasByDate",
       self, extract::evaluated, meta::date, date);
}

// Get, by date, const
Handle2ConstEvaluated
StylesEvaluatedGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByDateConst",
       self, extract::evaluated, meta::date, date);
}

// Get, by date, non-const
Handle2Evaluated
StylesEvaluatedGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByDate",
       self, extract::evaluated, meta::date, date);
}

// Set, by date
void
StylesEvaluatedSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstEvaluated evaluated
) {
   detail::setByMetadatum<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSetByDate",
       self, extract::evaluated, meta::date, date, evaluated);
}

// Has, by label
int
StylesEvaluatedHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHasByLabel",
       self, extract::evaluated, meta::label, label);
}

// Get, by label, const
Handle2ConstEvaluated
StylesEvaluatedGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByLabelConst",
       self, extract::evaluated, meta::label, label);
}

// Get, by label, non-const
Handle2Evaluated
StylesEvaluatedGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByLabel",
       self, extract::evaluated, meta::label, label);
}

// Set, by label
void
StylesEvaluatedSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstEvaluated evaluated
) {
   detail::setByMetadatum<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSetByLabel",
       self, extract::evaluated, meta::label, label, evaluated);
}

// Has, by derivedFrom
int
StylesEvaluatedHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHasByDerivedFrom",
       self, extract::evaluated, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstEvaluated
StylesEvaluatedGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByDerivedFromConst",
       self, extract::evaluated, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2Evaluated
StylesEvaluatedGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByDerivedFrom",
       self, extract::evaluated, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesEvaluatedSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstEvaluated evaluated
) {
   detail::setByMetadatum<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSetByDerivedFrom",
       self, extract::evaluated, meta::derivedFrom, derivedFrom, evaluated);
}

// Has, by library
int
StylesEvaluatedHasByLibrary(
   ConstHandle2ConstStyles self,
   const XMLName library
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHasByLibrary",
       self, extract::evaluated, meta::library, library);
}

// Get, by library, const
Handle2ConstEvaluated
StylesEvaluatedGetByLibraryConst(
   ConstHandle2ConstStyles self,
   const XMLName library
) {
   return detail::getByMetadatum<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByLibraryConst",
       self, extract::evaluated, meta::library, library);
}

// Get, by library, non-const
Handle2Evaluated
StylesEvaluatedGetByLibrary(
   ConstHandle2Styles self,
   const XMLName library
) {
   return detail::getByMetadatum<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByLibrary",
       self, extract::evaluated, meta::library, library);
}

// Set, by library
void
StylesEvaluatedSetByLibrary(
   ConstHandle2Styles self,
   const XMLName library,
   ConstHandle2ConstEvaluated evaluated
) {
   detail::setByMetadatum<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSetByLibrary",
       self, extract::evaluated, meta::library, library, evaluated);
}

// Has, by version
int
StylesEvaluatedHasByVersion(
   ConstHandle2ConstStyles self,
   const XMLName version
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"EvaluatedHasByVersion",
       self, extract::evaluated, meta::version, version);
}

// Get, by version, const
Handle2ConstEvaluated
StylesEvaluatedGetByVersionConst(
   ConstHandle2ConstStyles self,
   const XMLName version
) {
   return detail::getByMetadatum<CPP,Handle2ConstEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByVersionConst",
       self, extract::evaluated, meta::version, version);
}

// Get, by version, non-const
Handle2Evaluated
StylesEvaluatedGetByVersion(
   ConstHandle2Styles self,
   const XMLName version
) {
   return detail::getByMetadatum<CPP,Handle2Evaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedGetByVersion",
       self, extract::evaluated, meta::version, version);
}

// Set, by version
void
StylesEvaluatedSetByVersion(
   ConstHandle2Styles self,
   const XMLName version,
   ConstHandle2ConstEvaluated evaluated
) {
   detail::setByMetadatum<CPP,CPPEvaluated>
      (CLASSNAME, CLASSNAME+"EvaluatedSetByVersion",
       self, extract::evaluated, meta::version, version, evaluated);
}


// -----------------------------------------------------------------------------
// Child: crossSectionReconstructed
// -----------------------------------------------------------------------------

// Has
int
StylesCrossSectionReconstructedHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedHas", self, extract::crossSectionReconstructed);
}

// Clear
void
StylesCrossSectionReconstructedClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedClear", self, extract::crossSectionReconstructed);
}

// Size
size_t
StylesCrossSectionReconstructedSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedSize", self, extract::crossSectionReconstructed);
}

// Add
void
StylesCrossSectionReconstructedAdd(ConstHandle2Styles self, ConstHandle2ConstCrossSectionReconstructed crossSectionReconstructed)
{
   detail::addToContainer<CPP,CPPCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedAdd", self, extract::crossSectionReconstructed, crossSectionReconstructed);
}

// Get, by index \in [0,size), const
Handle2ConstCrossSectionReconstructed
StylesCrossSectionReconstructedGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetConst", self, extract::crossSectionReconstructed, index_);
}

// Get, by index \in [0,size), non-const
Handle2CrossSectionReconstructed
StylesCrossSectionReconstructedGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2CrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGet", self, extract::crossSectionReconstructed, index_);
}

// Set, by index \in [0,size)
void
StylesCrossSectionReconstructedSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstCrossSectionReconstructed crossSectionReconstructed
) {
   detail::setByIndex<CPP,CPPCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedSet", self, extract::crossSectionReconstructed, index_, crossSectionReconstructed);
}

// Has, by date
int
StylesCrossSectionReconstructedHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedHasByDate",
       self, extract::crossSectionReconstructed, meta::date, date);
}

// Get, by date, const
Handle2ConstCrossSectionReconstructed
StylesCrossSectionReconstructedGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetByDateConst",
       self, extract::crossSectionReconstructed, meta::date, date);
}

// Get, by date, non-const
Handle2CrossSectionReconstructed
StylesCrossSectionReconstructedGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2CrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetByDate",
       self, extract::crossSectionReconstructed, meta::date, date);
}

// Set, by date
void
StylesCrossSectionReconstructedSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstCrossSectionReconstructed crossSectionReconstructed
) {
   detail::setByMetadatum<CPP,CPPCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedSetByDate",
       self, extract::crossSectionReconstructed, meta::date, date, crossSectionReconstructed);
}

// Has, by label
int
StylesCrossSectionReconstructedHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedHasByLabel",
       self, extract::crossSectionReconstructed, meta::label, label);
}

// Get, by label, const
Handle2ConstCrossSectionReconstructed
StylesCrossSectionReconstructedGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetByLabelConst",
       self, extract::crossSectionReconstructed, meta::label, label);
}

// Get, by label, non-const
Handle2CrossSectionReconstructed
StylesCrossSectionReconstructedGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2CrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetByLabel",
       self, extract::crossSectionReconstructed, meta::label, label);
}

// Set, by label
void
StylesCrossSectionReconstructedSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstCrossSectionReconstructed crossSectionReconstructed
) {
   detail::setByMetadatum<CPP,CPPCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedSetByLabel",
       self, extract::crossSectionReconstructed, meta::label, label, crossSectionReconstructed);
}

// Has, by derivedFrom
int
StylesCrossSectionReconstructedHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedHasByDerivedFrom",
       self, extract::crossSectionReconstructed, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstCrossSectionReconstructed
StylesCrossSectionReconstructedGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetByDerivedFromConst",
       self, extract::crossSectionReconstructed, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2CrossSectionReconstructed
StylesCrossSectionReconstructedGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2CrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedGetByDerivedFrom",
       self, extract::crossSectionReconstructed, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesCrossSectionReconstructedSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstCrossSectionReconstructed crossSectionReconstructed
) {
   detail::setByMetadatum<CPP,CPPCrossSectionReconstructed>
      (CLASSNAME, CLASSNAME+"CrossSectionReconstructedSetByDerivedFrom",
       self, extract::crossSectionReconstructed, meta::derivedFrom, derivedFrom, crossSectionReconstructed);
}


// -----------------------------------------------------------------------------
// Child: angularDistributionReconstructed
// -----------------------------------------------------------------------------

// Has
int
StylesAngularDistributionReconstructedHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedHas", self, extract::angularDistributionReconstructed);
}

// Clear
void
StylesAngularDistributionReconstructedClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedClear", self, extract::angularDistributionReconstructed);
}

// Size
size_t
StylesAngularDistributionReconstructedSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedSize", self, extract::angularDistributionReconstructed);
}

// Add
void
StylesAngularDistributionReconstructedAdd(ConstHandle2Styles self, ConstHandle2ConstAngularDistributionReconstructed angularDistributionReconstructed)
{
   detail::addToContainer<CPP,CPPAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedAdd", self, extract::angularDistributionReconstructed, angularDistributionReconstructed);
}

// Get, by index \in [0,size), const
Handle2ConstAngularDistributionReconstructed
StylesAngularDistributionReconstructedGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetConst", self, extract::angularDistributionReconstructed, index_);
}

// Get, by index \in [0,size), non-const
Handle2AngularDistributionReconstructed
StylesAngularDistributionReconstructedGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2AngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGet", self, extract::angularDistributionReconstructed, index_);
}

// Set, by index \in [0,size)
void
StylesAngularDistributionReconstructedSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstAngularDistributionReconstructed angularDistributionReconstructed
) {
   detail::setByIndex<CPP,CPPAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedSet", self, extract::angularDistributionReconstructed, index_, angularDistributionReconstructed);
}

// Has, by date
int
StylesAngularDistributionReconstructedHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedHasByDate",
       self, extract::angularDistributionReconstructed, meta::date, date);
}

// Get, by date, const
Handle2ConstAngularDistributionReconstructed
StylesAngularDistributionReconstructedGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetByDateConst",
       self, extract::angularDistributionReconstructed, meta::date, date);
}

// Get, by date, non-const
Handle2AngularDistributionReconstructed
StylesAngularDistributionReconstructedGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2AngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetByDate",
       self, extract::angularDistributionReconstructed, meta::date, date);
}

// Set, by date
void
StylesAngularDistributionReconstructedSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstAngularDistributionReconstructed angularDistributionReconstructed
) {
   detail::setByMetadatum<CPP,CPPAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedSetByDate",
       self, extract::angularDistributionReconstructed, meta::date, date, angularDistributionReconstructed);
}

// Has, by label
int
StylesAngularDistributionReconstructedHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedHasByLabel",
       self, extract::angularDistributionReconstructed, meta::label, label);
}

// Get, by label, const
Handle2ConstAngularDistributionReconstructed
StylesAngularDistributionReconstructedGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetByLabelConst",
       self, extract::angularDistributionReconstructed, meta::label, label);
}

// Get, by label, non-const
Handle2AngularDistributionReconstructed
StylesAngularDistributionReconstructedGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2AngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetByLabel",
       self, extract::angularDistributionReconstructed, meta::label, label);
}

// Set, by label
void
StylesAngularDistributionReconstructedSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstAngularDistributionReconstructed angularDistributionReconstructed
) {
   detail::setByMetadatum<CPP,CPPAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedSetByLabel",
       self, extract::angularDistributionReconstructed, meta::label, label, angularDistributionReconstructed);
}

// Has, by derivedFrom
int
StylesAngularDistributionReconstructedHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedHasByDerivedFrom",
       self, extract::angularDistributionReconstructed, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstAngularDistributionReconstructed
StylesAngularDistributionReconstructedGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetByDerivedFromConst",
       self, extract::angularDistributionReconstructed, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2AngularDistributionReconstructed
StylesAngularDistributionReconstructedGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2AngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedGetByDerivedFrom",
       self, extract::angularDistributionReconstructed, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesAngularDistributionReconstructedSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstAngularDistributionReconstructed angularDistributionReconstructed
) {
   detail::setByMetadatum<CPP,CPPAngularDistributionReconstructed>
      (CLASSNAME, CLASSNAME+"AngularDistributionReconstructedSetByDerivedFrom",
       self, extract::angularDistributionReconstructed, meta::derivedFrom, derivedFrom, angularDistributionReconstructed);
}


// -----------------------------------------------------------------------------
// Child: CoulombPlusNuclearElasticMuCutoff
// -----------------------------------------------------------------------------

// Has
int
StylesCoulombPlusNuclearElasticMuCutoffHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffHas", self, extract::CoulombPlusNuclearElasticMuCutoff);
}

// Clear
void
StylesCoulombPlusNuclearElasticMuCutoffClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffClear", self, extract::CoulombPlusNuclearElasticMuCutoff);
}

// Size
size_t
StylesCoulombPlusNuclearElasticMuCutoffSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffSize", self, extract::CoulombPlusNuclearElasticMuCutoff);
}

// Add
void
StylesCoulombPlusNuclearElasticMuCutoffAdd(ConstHandle2Styles self, ConstHandle2ConstCoulombPlusNuclearElasticMuCutoff CoulombPlusNuclearElasticMuCutoff)
{
   detail::addToContainer<CPP,CPPCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffAdd", self, extract::CoulombPlusNuclearElasticMuCutoff, CoulombPlusNuclearElasticMuCutoff);
}

// Get, by index \in [0,size), const
Handle2ConstCoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetConst", self, extract::CoulombPlusNuclearElasticMuCutoff, index_);
}

// Get, by index \in [0,size), non-const
Handle2CoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2CoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGet", self, extract::CoulombPlusNuclearElasticMuCutoff, index_);
}

// Set, by index \in [0,size)
void
StylesCoulombPlusNuclearElasticMuCutoffSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstCoulombPlusNuclearElasticMuCutoff CoulombPlusNuclearElasticMuCutoff
) {
   detail::setByIndex<CPP,CPPCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffSet", self, extract::CoulombPlusNuclearElasticMuCutoff, index_, CoulombPlusNuclearElasticMuCutoff);
}

// Has, by date
int
StylesCoulombPlusNuclearElasticMuCutoffHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffHasByDate",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::date, date);
}

// Get, by date, const
Handle2ConstCoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByDateConst",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::date, date);
}

// Get, by date, non-const
Handle2CoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2CoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByDate",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::date, date);
}

// Set, by date
void
StylesCoulombPlusNuclearElasticMuCutoffSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstCoulombPlusNuclearElasticMuCutoff CoulombPlusNuclearElasticMuCutoff
) {
   detail::setByMetadatum<CPP,CPPCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffSetByDate",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::date, date, CoulombPlusNuclearElasticMuCutoff);
}

// Has, by derivedFrom
int
StylesCoulombPlusNuclearElasticMuCutoffHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffHasByDerivedFrom",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstCoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByDerivedFromConst",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2CoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2CoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByDerivedFrom",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesCoulombPlusNuclearElasticMuCutoffSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstCoulombPlusNuclearElasticMuCutoff CoulombPlusNuclearElasticMuCutoff
) {
   detail::setByMetadatum<CPP,CPPCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffSetByDerivedFrom",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::derivedFrom, derivedFrom, CoulombPlusNuclearElasticMuCutoff);
}

// Has, by label
int
StylesCoulombPlusNuclearElasticMuCutoffHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffHasByLabel",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::label, label);
}

// Get, by label, const
Handle2ConstCoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByLabelConst",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::label, label);
}

// Get, by label, non-const
Handle2CoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2CoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByLabel",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::label, label);
}

// Set, by label
void
StylesCoulombPlusNuclearElasticMuCutoffSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstCoulombPlusNuclearElasticMuCutoff CoulombPlusNuclearElasticMuCutoff
) {
   detail::setByMetadatum<CPP,CPPCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffSetByLabel",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::label, label, CoulombPlusNuclearElasticMuCutoff);
}

// Has, by muCutoff
int
StylesCoulombPlusNuclearElasticMuCutoffHasByMuCutoff(
   ConstHandle2ConstStyles self,
   const Float64 muCutoff
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffHasByMuCutoff",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::muCutoff, muCutoff);
}

// Get, by muCutoff, const
Handle2ConstCoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByMuCutoffConst(
   ConstHandle2ConstStyles self,
   const Float64 muCutoff
) {
   return detail::getByMetadatum<CPP,Handle2ConstCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByMuCutoffConst",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::muCutoff, muCutoff);
}

// Get, by muCutoff, non-const
Handle2CoulombPlusNuclearElasticMuCutoff
StylesCoulombPlusNuclearElasticMuCutoffGetByMuCutoff(
   ConstHandle2Styles self,
   const Float64 muCutoff
) {
   return detail::getByMetadatum<CPP,Handle2CoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffGetByMuCutoff",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::muCutoff, muCutoff);
}

// Set, by muCutoff
void
StylesCoulombPlusNuclearElasticMuCutoffSetByMuCutoff(
   ConstHandle2Styles self,
   const Float64 muCutoff,
   ConstHandle2ConstCoulombPlusNuclearElasticMuCutoff CoulombPlusNuclearElasticMuCutoff
) {
   detail::setByMetadatum<CPP,CPPCoulombPlusNuclearElasticMuCutoff>
      (CLASSNAME, CLASSNAME+"CoulombPlusNuclearElasticMuCutoffSetByMuCutoff",
       self, extract::CoulombPlusNuclearElasticMuCutoff, meta::muCutoff, muCutoff, CoulombPlusNuclearElasticMuCutoff);
}


// -----------------------------------------------------------------------------
// Child: heated
// -----------------------------------------------------------------------------

// Has
int
StylesHeatedHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HeatedHas", self, extract::heated);
}

// Clear
void
StylesHeatedClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"HeatedClear", self, extract::heated);
}

// Size
size_t
StylesHeatedSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"HeatedSize", self, extract::heated);
}

// Add
void
StylesHeatedAdd(ConstHandle2Styles self, ConstHandle2ConstHeated heated)
{
   detail::addToContainer<CPP,CPPHeated>
      (CLASSNAME, CLASSNAME+"HeatedAdd", self, extract::heated, heated);
}

// Get, by index \in [0,size), const
Handle2ConstHeated
StylesHeatedGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstHeated>
      (CLASSNAME, CLASSNAME+"HeatedGetConst", self, extract::heated, index_);
}

// Get, by index \in [0,size), non-const
Handle2Heated
StylesHeatedGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Heated>
      (CLASSNAME, CLASSNAME+"HeatedGet", self, extract::heated, index_);
}

// Set, by index \in [0,size)
void
StylesHeatedSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstHeated heated
) {
   detail::setByIndex<CPP,CPPHeated>
      (CLASSNAME, CLASSNAME+"HeatedSet", self, extract::heated, index_, heated);
}

// Has, by date
int
StylesHeatedHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"HeatedHasByDate",
       self, extract::heated, meta::date, date);
}

// Get, by date, const
Handle2ConstHeated
StylesHeatedGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstHeated>
      (CLASSNAME, CLASSNAME+"HeatedGetByDateConst",
       self, extract::heated, meta::date, date);
}

// Get, by date, non-const
Handle2Heated
StylesHeatedGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2Heated>
      (CLASSNAME, CLASSNAME+"HeatedGetByDate",
       self, extract::heated, meta::date, date);
}

// Set, by date
void
StylesHeatedSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstHeated heated
) {
   detail::setByMetadatum<CPP,CPPHeated>
      (CLASSNAME, CLASSNAME+"HeatedSetByDate",
       self, extract::heated, meta::date, date, heated);
}

// Has, by derivedFrom
int
StylesHeatedHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"HeatedHasByDerivedFrom",
       self, extract::heated, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstHeated
StylesHeatedGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstHeated>
      (CLASSNAME, CLASSNAME+"HeatedGetByDerivedFromConst",
       self, extract::heated, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2Heated
StylesHeatedGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2Heated>
      (CLASSNAME, CLASSNAME+"HeatedGetByDerivedFrom",
       self, extract::heated, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesHeatedSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstHeated heated
) {
   detail::setByMetadatum<CPP,CPPHeated>
      (CLASSNAME, CLASSNAME+"HeatedSetByDerivedFrom",
       self, extract::heated, meta::derivedFrom, derivedFrom, heated);
}

// Has, by label
int
StylesHeatedHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"HeatedHasByLabel",
       self, extract::heated, meta::label, label);
}

// Get, by label, const
Handle2ConstHeated
StylesHeatedGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstHeated>
      (CLASSNAME, CLASSNAME+"HeatedGetByLabelConst",
       self, extract::heated, meta::label, label);
}

// Get, by label, non-const
Handle2Heated
StylesHeatedGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Heated>
      (CLASSNAME, CLASSNAME+"HeatedGetByLabel",
       self, extract::heated, meta::label, label);
}

// Set, by label
void
StylesHeatedSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstHeated heated
) {
   detail::setByMetadatum<CPP,CPPHeated>
      (CLASSNAME, CLASSNAME+"HeatedSetByLabel",
       self, extract::heated, meta::label, label, heated);
}


// -----------------------------------------------------------------------------
// Child: averageProductData
// -----------------------------------------------------------------------------

// Has
int
StylesAverageProductDataHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AverageProductDataHas", self, extract::averageProductData);
}

// Clear
void
StylesAverageProductDataClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"AverageProductDataClear", self, extract::averageProductData);
}

// Size
size_t
StylesAverageProductDataSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"AverageProductDataSize", self, extract::averageProductData);
}

// Add
void
StylesAverageProductDataAdd(ConstHandle2Styles self, ConstHandle2ConstAverageProductData averageProductData)
{
   detail::addToContainer<CPP,CPPAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataAdd", self, extract::averageProductData, averageProductData);
}

// Get, by index \in [0,size), const
Handle2ConstAverageProductData
StylesAverageProductDataGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetConst", self, extract::averageProductData, index_);
}

// Get, by index \in [0,size), non-const
Handle2AverageProductData
StylesAverageProductDataGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2AverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGet", self, extract::averageProductData, index_);
}

// Set, by index \in [0,size)
void
StylesAverageProductDataSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstAverageProductData averageProductData
) {
   detail::setByIndex<CPP,CPPAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataSet", self, extract::averageProductData, index_, averageProductData);
}

// Has, by date
int
StylesAverageProductDataHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AverageProductDataHasByDate",
       self, extract::averageProductData, meta::date, date);
}

// Get, by date, const
Handle2ConstAverageProductData
StylesAverageProductDataGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetByDateConst",
       self, extract::averageProductData, meta::date, date);
}

// Get, by date, non-const
Handle2AverageProductData
StylesAverageProductDataGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2AverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetByDate",
       self, extract::averageProductData, meta::date, date);
}

// Set, by date
void
StylesAverageProductDataSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstAverageProductData averageProductData
) {
   detail::setByMetadatum<CPP,CPPAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataSetByDate",
       self, extract::averageProductData, meta::date, date, averageProductData);
}

// Has, by label
int
StylesAverageProductDataHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AverageProductDataHasByLabel",
       self, extract::averageProductData, meta::label, label);
}

// Get, by label, const
Handle2ConstAverageProductData
StylesAverageProductDataGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetByLabelConst",
       self, extract::averageProductData, meta::label, label);
}

// Get, by label, non-const
Handle2AverageProductData
StylesAverageProductDataGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2AverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetByLabel",
       self, extract::averageProductData, meta::label, label);
}

// Set, by label
void
StylesAverageProductDataSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstAverageProductData averageProductData
) {
   detail::setByMetadatum<CPP,CPPAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataSetByLabel",
       self, extract::averageProductData, meta::label, label, averageProductData);
}

// Has, by derivedFrom
int
StylesAverageProductDataHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AverageProductDataHasByDerivedFrom",
       self, extract::averageProductData, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstAverageProductData
StylesAverageProductDataGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetByDerivedFromConst",
       self, extract::averageProductData, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2AverageProductData
StylesAverageProductDataGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2AverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataGetByDerivedFrom",
       self, extract::averageProductData, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesAverageProductDataSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstAverageProductData averageProductData
) {
   detail::setByMetadatum<CPP,CPPAverageProductData>
      (CLASSNAME, CLASSNAME+"AverageProductDataSetByDerivedFrom",
       self, extract::averageProductData, meta::derivedFrom, derivedFrom, averageProductData);
}


// -----------------------------------------------------------------------------
// Child: MonteCarlo_cdf
// -----------------------------------------------------------------------------

// Has
int
StylesMonteCarlo_cdfHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfHas", self, extract::MonteCarlo_cdf);
}

// Clear
void
StylesMonteCarlo_cdfClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfClear", self, extract::MonteCarlo_cdf);
}

// Size
size_t
StylesMonteCarlo_cdfSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfSize", self, extract::MonteCarlo_cdf);
}

// Add
void
StylesMonteCarlo_cdfAdd(ConstHandle2Styles self, ConstHandle2ConstMonteCarlo_cdf MonteCarlo_cdf)
{
   detail::addToContainer<CPP,CPPMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfAdd", self, extract::MonteCarlo_cdf, MonteCarlo_cdf);
}

// Get, by index \in [0,size), const
Handle2ConstMonteCarlo_cdf
StylesMonteCarlo_cdfGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetConst", self, extract::MonteCarlo_cdf, index_);
}

// Get, by index \in [0,size), non-const
Handle2MonteCarlo_cdf
StylesMonteCarlo_cdfGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2MonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGet", self, extract::MonteCarlo_cdf, index_);
}

// Set, by index \in [0,size)
void
StylesMonteCarlo_cdfSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstMonteCarlo_cdf MonteCarlo_cdf
) {
   detail::setByIndex<CPP,CPPMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfSet", self, extract::MonteCarlo_cdf, index_, MonteCarlo_cdf);
}

// Has, by date
int
StylesMonteCarlo_cdfHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfHasByDate",
       self, extract::MonteCarlo_cdf, meta::date, date);
}

// Get, by date, const
Handle2ConstMonteCarlo_cdf
StylesMonteCarlo_cdfGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetByDateConst",
       self, extract::MonteCarlo_cdf, meta::date, date);
}

// Get, by date, non-const
Handle2MonteCarlo_cdf
StylesMonteCarlo_cdfGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2MonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetByDate",
       self, extract::MonteCarlo_cdf, meta::date, date);
}

// Set, by date
void
StylesMonteCarlo_cdfSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstMonteCarlo_cdf MonteCarlo_cdf
) {
   detail::setByMetadatum<CPP,CPPMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfSetByDate",
       self, extract::MonteCarlo_cdf, meta::date, date, MonteCarlo_cdf);
}

// Has, by derivedFrom
int
StylesMonteCarlo_cdfHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfHasByDerivedFrom",
       self, extract::MonteCarlo_cdf, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstMonteCarlo_cdf
StylesMonteCarlo_cdfGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetByDerivedFromConst",
       self, extract::MonteCarlo_cdf, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2MonteCarlo_cdf
StylesMonteCarlo_cdfGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2MonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetByDerivedFrom",
       self, extract::MonteCarlo_cdf, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesMonteCarlo_cdfSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstMonteCarlo_cdf MonteCarlo_cdf
) {
   detail::setByMetadatum<CPP,CPPMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfSetByDerivedFrom",
       self, extract::MonteCarlo_cdf, meta::derivedFrom, derivedFrom, MonteCarlo_cdf);
}

// Has, by label
int
StylesMonteCarlo_cdfHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfHasByLabel",
       self, extract::MonteCarlo_cdf, meta::label, label);
}

// Get, by label, const
Handle2ConstMonteCarlo_cdf
StylesMonteCarlo_cdfGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetByLabelConst",
       self, extract::MonteCarlo_cdf, meta::label, label);
}

// Get, by label, non-const
Handle2MonteCarlo_cdf
StylesMonteCarlo_cdfGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2MonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfGetByLabel",
       self, extract::MonteCarlo_cdf, meta::label, label);
}

// Set, by label
void
StylesMonteCarlo_cdfSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstMonteCarlo_cdf MonteCarlo_cdf
) {
   detail::setByMetadatum<CPP,CPPMonteCarlo_cdf>
      (CLASSNAME, CLASSNAME+"MonteCarlo_cdfSetByLabel",
       self, extract::MonteCarlo_cdf, meta::label, label, MonteCarlo_cdf);
}


// -----------------------------------------------------------------------------
// Child: griddedCrossSection
// -----------------------------------------------------------------------------

// Has
int
StylesGriddedCrossSectionHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionHas", self, extract::griddedCrossSection);
}

// Clear
void
StylesGriddedCrossSectionClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionClear", self, extract::griddedCrossSection);
}

// Size
size_t
StylesGriddedCrossSectionSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionSize", self, extract::griddedCrossSection);
}

// Add
void
StylesGriddedCrossSectionAdd(ConstHandle2Styles self, ConstHandle2ConstGriddedCrossSection griddedCrossSection)
{
   detail::addToContainer<CPP,CPPGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionAdd", self, extract::griddedCrossSection, griddedCrossSection);
}

// Get, by index \in [0,size), const
Handle2ConstGriddedCrossSection
StylesGriddedCrossSectionGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetConst", self, extract::griddedCrossSection, index_);
}

// Get, by index \in [0,size), non-const
Handle2GriddedCrossSection
StylesGriddedCrossSectionGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2GriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGet", self, extract::griddedCrossSection, index_);
}

// Set, by index \in [0,size)
void
StylesGriddedCrossSectionSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstGriddedCrossSection griddedCrossSection
) {
   detail::setByIndex<CPP,CPPGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionSet", self, extract::griddedCrossSection, index_, griddedCrossSection);
}

// Has, by date
int
StylesGriddedCrossSectionHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionHasByDate",
       self, extract::griddedCrossSection, meta::date, date);
}

// Get, by date, const
Handle2ConstGriddedCrossSection
StylesGriddedCrossSectionGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetByDateConst",
       self, extract::griddedCrossSection, meta::date, date);
}

// Get, by date, non-const
Handle2GriddedCrossSection
StylesGriddedCrossSectionGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2GriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetByDate",
       self, extract::griddedCrossSection, meta::date, date);
}

// Set, by date
void
StylesGriddedCrossSectionSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstGriddedCrossSection griddedCrossSection
) {
   detail::setByMetadatum<CPP,CPPGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionSetByDate",
       self, extract::griddedCrossSection, meta::date, date, griddedCrossSection);
}

// Has, by derivedFrom
int
StylesGriddedCrossSectionHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionHasByDerivedFrom",
       self, extract::griddedCrossSection, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstGriddedCrossSection
StylesGriddedCrossSectionGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetByDerivedFromConst",
       self, extract::griddedCrossSection, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2GriddedCrossSection
StylesGriddedCrossSectionGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2GriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetByDerivedFrom",
       self, extract::griddedCrossSection, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesGriddedCrossSectionSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstGriddedCrossSection griddedCrossSection
) {
   detail::setByMetadatum<CPP,CPPGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionSetByDerivedFrom",
       self, extract::griddedCrossSection, meta::derivedFrom, derivedFrom, griddedCrossSection);
}

// Has, by label
int
StylesGriddedCrossSectionHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionHasByLabel",
       self, extract::griddedCrossSection, meta::label, label);
}

// Get, by label, const
Handle2ConstGriddedCrossSection
StylesGriddedCrossSectionGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetByLabelConst",
       self, extract::griddedCrossSection, meta::label, label);
}

// Get, by label, non-const
Handle2GriddedCrossSection
StylesGriddedCrossSectionGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2GriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionGetByLabel",
       self, extract::griddedCrossSection, meta::label, label);
}

// Set, by label
void
StylesGriddedCrossSectionSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstGriddedCrossSection griddedCrossSection
) {
   detail::setByMetadatum<CPP,CPPGriddedCrossSection>
      (CLASSNAME, CLASSNAME+"GriddedCrossSectionSetByLabel",
       self, extract::griddedCrossSection, meta::label, label, griddedCrossSection);
}


// -----------------------------------------------------------------------------
// Child: URR_probabilityTables
// -----------------------------------------------------------------------------

// Has
int
StylesURR_probabilityTablesHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesHas", self, extract::URR_probabilityTables);
}

// Clear
void
StylesURR_probabilityTablesClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesClear", self, extract::URR_probabilityTables);
}

// Size
size_t
StylesURR_probabilityTablesSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesSize", self, extract::URR_probabilityTables);
}

// Add
void
StylesURR_probabilityTablesAdd(ConstHandle2Styles self, ConstHandle2ConstURR_probabilityTables URR_probabilityTables)
{
   detail::addToContainer<CPP,CPPURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesAdd", self, extract::URR_probabilityTables, URR_probabilityTables);
}

// Get, by index \in [0,size), const
Handle2ConstURR_probabilityTables
StylesURR_probabilityTablesGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetConst", self, extract::URR_probabilityTables, index_);
}

// Get, by index \in [0,size), non-const
Handle2URR_probabilityTables
StylesURR_probabilityTablesGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2URR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGet", self, extract::URR_probabilityTables, index_);
}

// Set, by index \in [0,size)
void
StylesURR_probabilityTablesSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstURR_probabilityTables URR_probabilityTables
) {
   detail::setByIndex<CPP,CPPURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesSet", self, extract::URR_probabilityTables, index_, URR_probabilityTables);
}

// Has, by date
int
StylesURR_probabilityTablesHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesHasByDate",
       self, extract::URR_probabilityTables, meta::date, date);
}

// Get, by date, const
Handle2ConstURR_probabilityTables
StylesURR_probabilityTablesGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetByDateConst",
       self, extract::URR_probabilityTables, meta::date, date);
}

// Get, by date, non-const
Handle2URR_probabilityTables
StylesURR_probabilityTablesGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2URR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetByDate",
       self, extract::URR_probabilityTables, meta::date, date);
}

// Set, by date
void
StylesURR_probabilityTablesSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstURR_probabilityTables URR_probabilityTables
) {
   detail::setByMetadatum<CPP,CPPURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesSetByDate",
       self, extract::URR_probabilityTables, meta::date, date, URR_probabilityTables);
}

// Has, by derivedFrom
int
StylesURR_probabilityTablesHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesHasByDerivedFrom",
       self, extract::URR_probabilityTables, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstURR_probabilityTables
StylesURR_probabilityTablesGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetByDerivedFromConst",
       self, extract::URR_probabilityTables, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2URR_probabilityTables
StylesURR_probabilityTablesGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2URR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetByDerivedFrom",
       self, extract::URR_probabilityTables, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesURR_probabilityTablesSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstURR_probabilityTables URR_probabilityTables
) {
   detail::setByMetadatum<CPP,CPPURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesSetByDerivedFrom",
       self, extract::URR_probabilityTables, meta::derivedFrom, derivedFrom, URR_probabilityTables);
}

// Has, by label
int
StylesURR_probabilityTablesHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesHasByLabel",
       self, extract::URR_probabilityTables, meta::label, label);
}

// Get, by label, const
Handle2ConstURR_probabilityTables
StylesURR_probabilityTablesGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetByLabelConst",
       self, extract::URR_probabilityTables, meta::label, label);
}

// Get, by label, non-const
Handle2URR_probabilityTables
StylesURR_probabilityTablesGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2URR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesGetByLabel",
       self, extract::URR_probabilityTables, meta::label, label);
}

// Set, by label
void
StylesURR_probabilityTablesSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstURR_probabilityTables URR_probabilityTables
) {
   detail::setByMetadatum<CPP,CPPURR_probabilityTables>
      (CLASSNAME, CLASSNAME+"URR_probabilityTablesSetByLabel",
       self, extract::URR_probabilityTables, meta::label, label, URR_probabilityTables);
}


// -----------------------------------------------------------------------------
// Child: heatedMultiGroup
// -----------------------------------------------------------------------------

// Has
int
StylesHeatedMultiGroupHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupHas", self, extract::heatedMultiGroup);
}

// Clear
void
StylesHeatedMultiGroupClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupClear", self, extract::heatedMultiGroup);
}

// Size
size_t
StylesHeatedMultiGroupSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupSize", self, extract::heatedMultiGroup);
}

// Add
void
StylesHeatedMultiGroupAdd(ConstHandle2Styles self, ConstHandle2ConstHeatedMultiGroup heatedMultiGroup)
{
   detail::addToContainer<CPP,CPPHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupAdd", self, extract::heatedMultiGroup, heatedMultiGroup);
}

// Get, by index \in [0,size), const
Handle2ConstHeatedMultiGroup
StylesHeatedMultiGroupGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetConst", self, extract::heatedMultiGroup, index_);
}

// Get, by index \in [0,size), non-const
Handle2HeatedMultiGroup
StylesHeatedMultiGroupGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2HeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGet", self, extract::heatedMultiGroup, index_);
}

// Set, by index \in [0,size)
void
StylesHeatedMultiGroupSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstHeatedMultiGroup heatedMultiGroup
) {
   detail::setByIndex<CPP,CPPHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupSet", self, extract::heatedMultiGroup, index_, heatedMultiGroup);
}

// Has, by date
int
StylesHeatedMultiGroupHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupHasByDate",
       self, extract::heatedMultiGroup, meta::date, date);
}

// Get, by date, const
Handle2ConstHeatedMultiGroup
StylesHeatedMultiGroupGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetByDateConst",
       self, extract::heatedMultiGroup, meta::date, date);
}

// Get, by date, non-const
Handle2HeatedMultiGroup
StylesHeatedMultiGroupGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2HeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetByDate",
       self, extract::heatedMultiGroup, meta::date, date);
}

// Set, by date
void
StylesHeatedMultiGroupSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstHeatedMultiGroup heatedMultiGroup
) {
   detail::setByMetadatum<CPP,CPPHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupSetByDate",
       self, extract::heatedMultiGroup, meta::date, date, heatedMultiGroup);
}

// Has, by derivedFrom
int
StylesHeatedMultiGroupHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupHasByDerivedFrom",
       self, extract::heatedMultiGroup, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstHeatedMultiGroup
StylesHeatedMultiGroupGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetByDerivedFromConst",
       self, extract::heatedMultiGroup, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2HeatedMultiGroup
StylesHeatedMultiGroupGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2HeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetByDerivedFrom",
       self, extract::heatedMultiGroup, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesHeatedMultiGroupSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstHeatedMultiGroup heatedMultiGroup
) {
   detail::setByMetadatum<CPP,CPPHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupSetByDerivedFrom",
       self, extract::heatedMultiGroup, meta::derivedFrom, derivedFrom, heatedMultiGroup);
}

// Has, by label
int
StylesHeatedMultiGroupHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupHasByLabel",
       self, extract::heatedMultiGroup, meta::label, label);
}

// Get, by label, const
Handle2ConstHeatedMultiGroup
StylesHeatedMultiGroupGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetByLabelConst",
       self, extract::heatedMultiGroup, meta::label, label);
}

// Get, by label, non-const
Handle2HeatedMultiGroup
StylesHeatedMultiGroupGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2HeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupGetByLabel",
       self, extract::heatedMultiGroup, meta::label, label);
}

// Set, by label
void
StylesHeatedMultiGroupSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstHeatedMultiGroup heatedMultiGroup
) {
   detail::setByMetadatum<CPP,CPPHeatedMultiGroup>
      (CLASSNAME, CLASSNAME+"HeatedMultiGroupSetByLabel",
       self, extract::heatedMultiGroup, meta::label, label, heatedMultiGroup);
}


// -----------------------------------------------------------------------------
// Child: SnElasticUpScatter
// -----------------------------------------------------------------------------

// Has
int
StylesSnElasticUpScatterHas(ConstHandle2ConstStyles self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterHas", self, extract::SnElasticUpScatter);
}

// Clear
void
StylesSnElasticUpScatterClear(ConstHandle2Styles self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterClear", self, extract::SnElasticUpScatter);
}

// Size
size_t
StylesSnElasticUpScatterSize(ConstHandle2ConstStyles self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterSize", self, extract::SnElasticUpScatter);
}

// Add
void
StylesSnElasticUpScatterAdd(ConstHandle2Styles self, ConstHandle2ConstSnElasticUpScatter SnElasticUpScatter)
{
   detail::addToContainer<CPP,CPPSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterAdd", self, extract::SnElasticUpScatter, SnElasticUpScatter);
}

// Get, by index \in [0,size), const
Handle2ConstSnElasticUpScatter
StylesSnElasticUpScatterGetConst(ConstHandle2ConstStyles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetConst", self, extract::SnElasticUpScatter, index_);
}

// Get, by index \in [0,size), non-const
Handle2SnElasticUpScatter
StylesSnElasticUpScatterGet(ConstHandle2Styles self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2SnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGet", self, extract::SnElasticUpScatter, index_);
}

// Set, by index \in [0,size)
void
StylesSnElasticUpScatterSet(
   ConstHandle2Styles self,
   const size_t index_,
   ConstHandle2ConstSnElasticUpScatter SnElasticUpScatter
) {
   detail::setByIndex<CPP,CPPSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterSet", self, extract::SnElasticUpScatter, index_, SnElasticUpScatter);
}

// Has, by date
int
StylesSnElasticUpScatterHasByDate(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterHasByDate",
       self, extract::SnElasticUpScatter, meta::date, date);
}

// Get, by date, const
Handle2ConstSnElasticUpScatter
StylesSnElasticUpScatterGetByDateConst(
   ConstHandle2ConstStyles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2ConstSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByDateConst",
       self, extract::SnElasticUpScatter, meta::date, date);
}

// Get, by date, non-const
Handle2SnElasticUpScatter
StylesSnElasticUpScatterGetByDate(
   ConstHandle2Styles self,
   const char *const date
) {
   return detail::getByMetadatum<CPP,Handle2SnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByDate",
       self, extract::SnElasticUpScatter, meta::date, date);
}

// Set, by date
void
StylesSnElasticUpScatterSetByDate(
   ConstHandle2Styles self,
   const char *const date,
   ConstHandle2ConstSnElasticUpScatter SnElasticUpScatter
) {
   detail::setByMetadatum<CPP,CPPSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterSetByDate",
       self, extract::SnElasticUpScatter, meta::date, date, SnElasticUpScatter);
}

// Has, by derivedFrom
int
StylesSnElasticUpScatterHasByDerivedFrom(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterHasByDerivedFrom",
       self, extract::SnElasticUpScatter, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, const
Handle2ConstSnElasticUpScatter
StylesSnElasticUpScatterGetByDerivedFromConst(
   ConstHandle2ConstStyles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2ConstSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByDerivedFromConst",
       self, extract::SnElasticUpScatter, meta::derivedFrom, derivedFrom);
}

// Get, by derivedFrom, non-const
Handle2SnElasticUpScatter
StylesSnElasticUpScatterGetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom
) {
   return detail::getByMetadatum<CPP,Handle2SnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByDerivedFrom",
       self, extract::SnElasticUpScatter, meta::derivedFrom, derivedFrom);
}

// Set, by derivedFrom
void
StylesSnElasticUpScatterSetByDerivedFrom(
   ConstHandle2Styles self,
   const XMLName derivedFrom,
   ConstHandle2ConstSnElasticUpScatter SnElasticUpScatter
) {
   detail::setByMetadatum<CPP,CPPSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterSetByDerivedFrom",
       self, extract::SnElasticUpScatter, meta::derivedFrom, derivedFrom, SnElasticUpScatter);
}

// Has, by label
int
StylesSnElasticUpScatterHasByLabel(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterHasByLabel",
       self, extract::SnElasticUpScatter, meta::label, label);
}

// Get, by label, const
Handle2ConstSnElasticUpScatter
StylesSnElasticUpScatterGetByLabelConst(
   ConstHandle2ConstStyles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByLabelConst",
       self, extract::SnElasticUpScatter, meta::label, label);
}

// Get, by label, non-const
Handle2SnElasticUpScatter
StylesSnElasticUpScatterGetByLabel(
   ConstHandle2Styles self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2SnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByLabel",
       self, extract::SnElasticUpScatter, meta::label, label);
}

// Set, by label
void
StylesSnElasticUpScatterSetByLabel(
   ConstHandle2Styles self,
   const XMLName label,
   ConstHandle2ConstSnElasticUpScatter SnElasticUpScatter
) {
   detail::setByMetadatum<CPP,CPPSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterSetByLabel",
       self, extract::SnElasticUpScatter, meta::label, label, SnElasticUpScatter);
}

// Has, by upperCalculatedGroup
int
StylesSnElasticUpScatterHasByUpperCalculatedGroup(
   ConstHandle2ConstStyles self,
   const Integer32 upperCalculatedGroup
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterHasByUpperCalculatedGroup",
       self, extract::SnElasticUpScatter, meta::upperCalculatedGroup, upperCalculatedGroup);
}

// Get, by upperCalculatedGroup, const
Handle2ConstSnElasticUpScatter
StylesSnElasticUpScatterGetByUpperCalculatedGroupConst(
   ConstHandle2ConstStyles self,
   const Integer32 upperCalculatedGroup
) {
   return detail::getByMetadatum<CPP,Handle2ConstSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByUpperCalculatedGroupConst",
       self, extract::SnElasticUpScatter, meta::upperCalculatedGroup, upperCalculatedGroup);
}

// Get, by upperCalculatedGroup, non-const
Handle2SnElasticUpScatter
StylesSnElasticUpScatterGetByUpperCalculatedGroup(
   ConstHandle2Styles self,
   const Integer32 upperCalculatedGroup
) {
   return detail::getByMetadatum<CPP,Handle2SnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterGetByUpperCalculatedGroup",
       self, extract::SnElasticUpScatter, meta::upperCalculatedGroup, upperCalculatedGroup);
}

// Set, by upperCalculatedGroup
void
StylesSnElasticUpScatterSetByUpperCalculatedGroup(
   ConstHandle2Styles self,
   const Integer32 upperCalculatedGroup,
   ConstHandle2ConstSnElasticUpScatter SnElasticUpScatter
) {
   detail::setByMetadatum<CPP,CPPSnElasticUpScatter>
      (CLASSNAME, CLASSNAME+"SnElasticUpScatterSetByUpperCalculatedGroup",
       self, extract::SnElasticUpScatter, meta::upperCalculatedGroup, upperCalculatedGroup, SnElasticUpScatter);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/styles/Styles/src/custom.cpp"
