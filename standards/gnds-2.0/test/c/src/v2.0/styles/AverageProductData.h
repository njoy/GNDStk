
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// AverageProductData is the basic handle type in this file. Example:
//    // Create a default AverageProductData object:
//    AverageProductData handle = AverageProductDataDefault();
// Functions involving AverageProductData are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_STYLES_AVERAGEPRODUCTDATA
#define C_INTERFACE_TEST_V2_0_STYLES_AVERAGEPRODUCTDATA

#include "GNDStk.h"
#include "v2.0/styles/Temperature.h"
#include "v2.0/documentation/Documentation.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct AverageProductDataClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ AverageProductData
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct AverageProductDataClass *AverageProductData;

// --- Const-aware handles.
typedef const struct AverageProductDataClass *const ConstHandle2ConstAverageProductData;
typedef       struct AverageProductDataClass *const ConstHandle2AverageProductData;
typedef const struct AverageProductDataClass *      Handle2ConstAverageProductData;
typedef       struct AverageProductDataClass *      Handle2AverageProductData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstAverageProductData
AverageProductDataDefaultConst();

// +++ Create, default
extern_c Handle2AverageProductData
AverageProductDataDefault();

// --- Create, general, const
extern_c Handle2ConstAverageProductData
AverageProductDataCreateConst(
   const char *const date,
   const XMLName label,
   const XMLName derivedFrom,
   ConstHandle2ConstTemperature temperature,
   ConstHandle2ConstDocumentation documentation
);

// +++ Create, general
extern_c Handle2AverageProductData
AverageProductDataCreate(
   const char *const date,
   const XMLName label,
   const XMLName derivedFrom,
   ConstHandle2ConstTemperature temperature,
   ConstHandle2ConstDocumentation documentation
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
AverageProductDataAssign(ConstHandle2AverageProductData This, ConstHandle2ConstAverageProductData from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
AverageProductDataDelete(ConstHandle2ConstAverageProductData This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
AverageProductDataRead(ConstHandle2AverageProductData This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
AverageProductDataWrite(ConstHandle2ConstAverageProductData This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
AverageProductDataPrint(ConstHandle2ConstAverageProductData This);

// +++ Print to standard output, as XML
extern_c int
AverageProductDataPrintXML(ConstHandle2ConstAverageProductData This);

// +++ Print to standard output, as JSON
extern_c int
AverageProductDataPrintJSON(ConstHandle2ConstAverageProductData This);


// -----------------------------------------------------------------------------
// Metadatum: date
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AverageProductDataDateHas(ConstHandle2ConstAverageProductData This);

// +++ Get
// +++ Returns by value
extern_c const char *
AverageProductDataDateGet(ConstHandle2ConstAverageProductData This);

// +++ Set
extern_c void
AverageProductDataDateSet(ConstHandle2AverageProductData This, const char *const date);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AverageProductDataLabelHas(ConstHandle2ConstAverageProductData This);

// +++ Get
// +++ Returns by value
extern_c XMLName
AverageProductDataLabelGet(ConstHandle2ConstAverageProductData This);

// +++ Set
extern_c void
AverageProductDataLabelSet(ConstHandle2AverageProductData This, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: derivedFrom
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AverageProductDataDerivedFromHas(ConstHandle2ConstAverageProductData This);

// +++ Get
// +++ Returns by value
extern_c XMLName
AverageProductDataDerivedFromGet(ConstHandle2ConstAverageProductData This);

// +++ Set
extern_c void
AverageProductDataDerivedFromSet(ConstHandle2AverageProductData This, const XMLName derivedFrom);


// -----------------------------------------------------------------------------
// Child: temperature
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AverageProductDataTemperatureHas(ConstHandle2ConstAverageProductData This);

// --- Get, const
extern_c Handle2ConstTemperature
AverageProductDataTemperatureGetConst(ConstHandle2ConstAverageProductData This);

// +++ Get, non-const
extern_c Handle2Temperature
AverageProductDataTemperatureGet(ConstHandle2AverageProductData This);

// +++ Set
extern_c void
AverageProductDataTemperatureSet(ConstHandle2AverageProductData This, ConstHandle2ConstTemperature temperature);


// -----------------------------------------------------------------------------
// Child: documentation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AverageProductDataDocumentationHas(ConstHandle2ConstAverageProductData This);

// --- Get, const
extern_c Handle2ConstDocumentation
AverageProductDataDocumentationGetConst(ConstHandle2ConstAverageProductData This);

// +++ Get, non-const
extern_c Handle2Documentation
AverageProductDataDocumentationGet(ConstHandle2AverageProductData This);

// +++ Set
extern_c void
AverageProductDataDocumentationSet(ConstHandle2AverageProductData This, ConstHandle2ConstDocumentation documentation);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
