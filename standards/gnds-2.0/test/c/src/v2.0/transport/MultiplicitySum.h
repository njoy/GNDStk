
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// MultiplicitySum is the basic handle type in this file. Example:
//    // Create a default MultiplicitySum object:
//    MultiplicitySum handle = MultiplicitySumDefault();
// Functions involving MultiplicitySum are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_TRANSPORT_MULTIPLICITYSUM
#define C_INTERFACE_TEST_V2_0_TRANSPORT_MULTIPLICITYSUM

#include "GNDStk.h"
#include "v2.0/transport/Multiplicity.h"
#include "v2.0/transport/Summands.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct MultiplicitySumClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ MultiplicitySum
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct MultiplicitySumClass *MultiplicitySum;

// --- Const-aware handles.
typedef const struct MultiplicitySumClass *const ConstHandle2ConstMultiplicitySum;
typedef       struct MultiplicitySumClass *const ConstHandle2MultiplicitySum;
typedef const struct MultiplicitySumClass *      Handle2ConstMultiplicitySum;
typedef       struct MultiplicitySumClass *      Handle2MultiplicitySum;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstMultiplicitySum
MultiplicitySumDefaultConst();

// +++ Create, default
extern_c Handle2MultiplicitySum
MultiplicitySumDefault();

// --- Create, general, const
extern_c Handle2ConstMultiplicitySum
MultiplicitySumCreateConst(
   const Integer32 ENDF_MT,
   const XMLName label,
   ConstHandle2ConstMultiplicity multiplicity,
   ConstHandle2ConstSummands summands
);

// +++ Create, general
extern_c Handle2MultiplicitySum
MultiplicitySumCreate(
   const Integer32 ENDF_MT,
   const XMLName label,
   ConstHandle2ConstMultiplicity multiplicity,
   ConstHandle2ConstSummands summands
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
MultiplicitySumAssign(ConstHandle2MultiplicitySum This, ConstHandle2ConstMultiplicitySum from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
MultiplicitySumDelete(ConstHandle2ConstMultiplicitySum This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
MultiplicitySumRead(ConstHandle2MultiplicitySum This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
MultiplicitySumWrite(ConstHandle2ConstMultiplicitySum This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
MultiplicitySumPrint(ConstHandle2ConstMultiplicitySum This);

// +++ Print to standard output, as XML
extern_c int
MultiplicitySumPrintXML(ConstHandle2ConstMultiplicitySum This);

// +++ Print to standard output, as JSON
extern_c int
MultiplicitySumPrintJSON(ConstHandle2ConstMultiplicitySum This);


// -----------------------------------------------------------------------------
// Metadatum: ENDF_MT
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MultiplicitySumENDFMTHas(ConstHandle2ConstMultiplicitySum This);

// +++ Get
// +++ Returns by value
extern_c Integer32
MultiplicitySumENDFMTGet(ConstHandle2ConstMultiplicitySum This);

// +++ Set
extern_c void
MultiplicitySumENDFMTSet(ConstHandle2MultiplicitySum This, const Integer32 ENDF_MT);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MultiplicitySumLabelHas(ConstHandle2ConstMultiplicitySum This);

// +++ Get
// +++ Returns by value
extern_c XMLName
MultiplicitySumLabelGet(ConstHandle2ConstMultiplicitySum This);

// +++ Set
extern_c void
MultiplicitySumLabelSet(ConstHandle2MultiplicitySum This, const XMLName label);


// -----------------------------------------------------------------------------
// Child: multiplicity
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MultiplicitySumMultiplicityHas(ConstHandle2ConstMultiplicitySum This);

// --- Get, const
extern_c Handle2ConstMultiplicity
MultiplicitySumMultiplicityGetConst(ConstHandle2ConstMultiplicitySum This);

// +++ Get, non-const
extern_c Handle2Multiplicity
MultiplicitySumMultiplicityGet(ConstHandle2MultiplicitySum This);

// +++ Set
extern_c void
MultiplicitySumMultiplicitySet(ConstHandle2MultiplicitySum This, ConstHandle2ConstMultiplicity multiplicity);


// -----------------------------------------------------------------------------
// Child: summands
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
MultiplicitySumSummandsHas(ConstHandle2ConstMultiplicitySum This);

// --- Get, const
extern_c Handle2ConstSummands
MultiplicitySumSummandsGetConst(ConstHandle2ConstMultiplicitySum This);

// +++ Get, non-const
extern_c Handle2Summands
MultiplicitySumSummandsGet(ConstHandle2MultiplicitySum This);

// +++ Set
extern_c void
MultiplicitySumSummandsSet(ConstHandle2MultiplicitySum This, ConstHandle2ConstSummands summands);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
