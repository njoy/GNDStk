
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/transport/WeightedFunctionals.hpp"
#include "WeightedFunctionals.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = WeightedFunctionalsClass;
using CPP = multigroup::WeightedFunctionals;

static const std::string CLASSNAME = "WeightedFunctionals";

namespace extract {
   static auto weighted = [](auto &obj) { return &obj.weighted; };
}

using CPPWeighted = transport::Weighted;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstWeightedFunctionals
WeightedFunctionalsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2WeightedFunctionals
WeightedFunctionalsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstWeightedFunctionals
WeightedFunctionalsCreateConst(
   ConstHandle2ConstWeighted weighted
) {
   ConstHandle2WeightedFunctionals handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPWeighted>(weighted)
   );
   return handle;
}

// Create, general
Handle2WeightedFunctionals
WeightedFunctionalsCreate(
   ConstHandle2ConstWeighted weighted
) {
   ConstHandle2WeightedFunctionals handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPWeighted>(weighted)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
WeightedFunctionalsAssign(ConstHandle2WeightedFunctionals This, ConstHandle2ConstWeightedFunctionals from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
WeightedFunctionalsDelete(ConstHandle2ConstWeightedFunctionals This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
WeightedFunctionalsRead(ConstHandle2WeightedFunctionals This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
WeightedFunctionalsWrite(ConstHandle2ConstWeightedFunctionals This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
WeightedFunctionalsPrint(ConstHandle2ConstWeightedFunctionals This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
WeightedFunctionalsPrintXML(ConstHandle2ConstWeightedFunctionals This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
WeightedFunctionalsPrintJSON(ConstHandle2ConstWeightedFunctionals This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: weighted
// -----------------------------------------------------------------------------

// Has
int
WeightedFunctionalsWeightedHas(ConstHandle2ConstWeightedFunctionals This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"WeightedHas", This, extract::weighted);
}

// Get, const
Handle2ConstWeighted
WeightedFunctionalsWeightedGetConst(ConstHandle2ConstWeightedFunctionals This)
{
   return detail::getField<CPP,Handle2ConstWeighted>
      (CLASSNAME, CLASSNAME+"WeightedGetConst", This, extract::weighted);
}

// Get, non-const
Handle2Weighted
WeightedFunctionalsWeightedGet(ConstHandle2WeightedFunctionals This)
{
   return detail::getField<CPP,Handle2Weighted>
      (CLASSNAME, CLASSNAME+"WeightedGet", This, extract::weighted);
}

// Set
void
WeightedFunctionalsWeightedSet(ConstHandle2WeightedFunctionals This, ConstHandle2ConstWeighted weighted)
{
   detail::setField<CPP,CPPWeighted>
      (CLASSNAME, CLASSNAME+"WeightedSet", This, extract::weighted, weighted);
}
