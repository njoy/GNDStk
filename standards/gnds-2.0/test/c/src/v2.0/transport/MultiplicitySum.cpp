
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/transport/MultiplicitySum.hpp"
#include "MultiplicitySum.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = MultiplicitySumClass;
using CPP = multigroup::MultiplicitySum;

static const std::string CLASSNAME = "MultiplicitySum";

namespace extract {
   static auto ENDF_MT = [](auto &obj) { return &obj.ENDF_MT; };
   static auto label = [](auto &obj) { return &obj.label; };
   static auto multiplicity = [](auto &obj) { return &obj.multiplicity; };
   static auto summands = [](auto &obj) { return &obj.summands; };
}

using CPPMultiplicity = transport::Multiplicity;
using CPPSummands = transport::Summands;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstMultiplicitySum
MultiplicitySumDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2MultiplicitySum
MultiplicitySumDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstMultiplicitySum
MultiplicitySumCreateConst(
   const Integer32 ENDF_MT,
   const XMLName label,
   ConstHandle2ConstMultiplicity multiplicity,
   ConstHandle2ConstSummands summands
) {
   ConstHandle2MultiplicitySum handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      ENDF_MT,
      label,
      detail::tocpp<CPPMultiplicity>(multiplicity),
      detail::tocpp<CPPSummands>(summands)
   );
   return handle;
}

// Create, general
Handle2MultiplicitySum
MultiplicitySumCreate(
   const Integer32 ENDF_MT,
   const XMLName label,
   ConstHandle2ConstMultiplicity multiplicity,
   ConstHandle2ConstSummands summands
) {
   ConstHandle2MultiplicitySum handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      ENDF_MT,
      label,
      detail::tocpp<CPPMultiplicity>(multiplicity),
      detail::tocpp<CPPSummands>(summands)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
MultiplicitySumAssign(ConstHandle2MultiplicitySum This, ConstHandle2ConstMultiplicitySum from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
MultiplicitySumDelete(ConstHandle2ConstMultiplicitySum This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
MultiplicitySumRead(ConstHandle2MultiplicitySum This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
MultiplicitySumWrite(ConstHandle2ConstMultiplicitySum This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
MultiplicitySumPrint(ConstHandle2ConstMultiplicitySum This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
MultiplicitySumPrintXML(ConstHandle2ConstMultiplicitySum This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
MultiplicitySumPrintJSON(ConstHandle2ConstMultiplicitySum This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: ENDF_MT
// -----------------------------------------------------------------------------

// Has
int
MultiplicitySumENDFMTHas(ConstHandle2ConstMultiplicitySum This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ENDFMTHas", This, extract::ENDF_MT);
}

// Get
// Returns by value
Integer32
MultiplicitySumENDFMTGet(ConstHandle2ConstMultiplicitySum This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ENDFMTGet", This, extract::ENDF_MT);
}

// Set
void
MultiplicitySumENDFMTSet(ConstHandle2MultiplicitySum This, const Integer32 ENDF_MT)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ENDFMTSet", This, extract::ENDF_MT, ENDF_MT);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
MultiplicitySumLabelHas(ConstHandle2ConstMultiplicitySum This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
MultiplicitySumLabelGet(ConstHandle2ConstMultiplicitySum This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
MultiplicitySumLabelSet(ConstHandle2MultiplicitySum This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: multiplicity
// -----------------------------------------------------------------------------

// Has
int
MultiplicitySumMultiplicityHas(ConstHandle2ConstMultiplicitySum This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MultiplicityHas", This, extract::multiplicity);
}

// Get, const
Handle2ConstMultiplicity
MultiplicitySumMultiplicityGetConst(ConstHandle2ConstMultiplicitySum This)
{
   return detail::getField<CPP,Handle2ConstMultiplicity>
      (CLASSNAME, CLASSNAME+"MultiplicityGetConst", This, extract::multiplicity);
}

// Get, non-const
Handle2Multiplicity
MultiplicitySumMultiplicityGet(ConstHandle2MultiplicitySum This)
{
   return detail::getField<CPP,Handle2Multiplicity>
      (CLASSNAME, CLASSNAME+"MultiplicityGet", This, extract::multiplicity);
}

// Set
void
MultiplicitySumMultiplicitySet(ConstHandle2MultiplicitySum This, ConstHandle2ConstMultiplicity multiplicity)
{
   detail::setField<CPP,CPPMultiplicity>
      (CLASSNAME, CLASSNAME+"MultiplicitySet", This, extract::multiplicity, multiplicity);
}


// -----------------------------------------------------------------------------
// Child: summands
// -----------------------------------------------------------------------------

// Has
int
MultiplicitySumSummandsHas(ConstHandle2ConstMultiplicitySum This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SummandsHas", This, extract::summands);
}

// Get, const
Handle2ConstSummands
MultiplicitySumSummandsGetConst(ConstHandle2ConstMultiplicitySum This)
{
   return detail::getField<CPP,Handle2ConstSummands>
      (CLASSNAME, CLASSNAME+"SummandsGetConst", This, extract::summands);
}

// Get, non-const
Handle2Summands
MultiplicitySumSummandsGet(ConstHandle2MultiplicitySum This)
{
   return detail::getField<CPP,Handle2Summands>
      (CLASSNAME, CLASSNAME+"SummandsGet", This, extract::summands);
}

// Set
void
MultiplicitySumSummandsSet(ConstHandle2MultiplicitySum This, ConstHandle2ConstSummands summands)
{
   detail::setField<CPP,CPPSummands>
      (CLASSNAME, CLASSNAME+"SummandsSet", This, extract::summands, summands);
}
