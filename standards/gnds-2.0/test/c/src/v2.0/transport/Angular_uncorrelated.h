
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Angular_uncorrelated is the basic handle type in this file. Example:
//    // Create a default Angular_uncorrelated object:
//    Angular_uncorrelated handle = Angular_uncorrelatedDefault();
// Functions involving Angular_uncorrelated are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_TRANSPORT_ANGULAR_UNCORRELATED
#define C_INTERFACE_TEST_V2_0_TRANSPORT_ANGULAR_UNCORRELATED

#include "GNDStk.h"
#include "v2.0/containers/XYs2d.h"
#include "v2.0/transport/Isotropic2d.h"
#include "v2.0/transport/Forward.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct Angular_uncorrelatedClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Angular_uncorrelated
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct Angular_uncorrelatedClass *Angular_uncorrelated;

// --- Const-aware handles.
typedef const struct Angular_uncorrelatedClass *const ConstHandle2ConstAngular_uncorrelated;
typedef       struct Angular_uncorrelatedClass *const ConstHandle2Angular_uncorrelated;
typedef const struct Angular_uncorrelatedClass *      Handle2ConstAngular_uncorrelated;
typedef       struct Angular_uncorrelatedClass *      Handle2Angular_uncorrelated;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstAngular_uncorrelated
Angular_uncorrelatedDefaultConst();

// +++ Create, default
extern_c Handle2Angular_uncorrelated
Angular_uncorrelatedDefault();

// --- Create, general, const
extern_c Handle2ConstAngular_uncorrelated
Angular_uncorrelatedCreateConst(
   ConstHandle2ConstXYs2d XYs2d,
   ConstHandle2ConstIsotropic2d isotropic2d,
   ConstHandle2ConstForward forward
);

// +++ Create, general
extern_c Handle2Angular_uncorrelated
Angular_uncorrelatedCreate(
   ConstHandle2ConstXYs2d XYs2d,
   ConstHandle2ConstIsotropic2d isotropic2d,
   ConstHandle2ConstForward forward
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
Angular_uncorrelatedAssign(ConstHandle2Angular_uncorrelated This, ConstHandle2ConstAngular_uncorrelated from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
Angular_uncorrelatedDelete(ConstHandle2ConstAngular_uncorrelated This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
Angular_uncorrelatedRead(ConstHandle2Angular_uncorrelated This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
Angular_uncorrelatedWrite(ConstHandle2ConstAngular_uncorrelated This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
Angular_uncorrelatedPrint(ConstHandle2ConstAngular_uncorrelated This);

// +++ Print to standard output, as XML
extern_c int
Angular_uncorrelatedPrintXML(ConstHandle2ConstAngular_uncorrelated This);

// +++ Print to standard output, as JSON
extern_c int
Angular_uncorrelatedPrintJSON(ConstHandle2ConstAngular_uncorrelated This);


// -----------------------------------------------------------------------------
// Child: XYs2d
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Angular_uncorrelatedXYs2dHas(ConstHandle2ConstAngular_uncorrelated This);

// --- Get, const
extern_c Handle2ConstXYs2d
Angular_uncorrelatedXYs2dGetConst(ConstHandle2ConstAngular_uncorrelated This);

// +++ Get, non-const
extern_c Handle2XYs2d
Angular_uncorrelatedXYs2dGet(ConstHandle2Angular_uncorrelated This);

// +++ Set
extern_c void
Angular_uncorrelatedXYs2dSet(ConstHandle2Angular_uncorrelated This, ConstHandle2ConstXYs2d XYs2d);


// -----------------------------------------------------------------------------
// Child: isotropic2d
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Angular_uncorrelatedIsotropic2dHas(ConstHandle2ConstAngular_uncorrelated This);

// --- Get, const
extern_c Handle2ConstIsotropic2d
Angular_uncorrelatedIsotropic2dGetConst(ConstHandle2ConstAngular_uncorrelated This);

// +++ Get, non-const
extern_c Handle2Isotropic2d
Angular_uncorrelatedIsotropic2dGet(ConstHandle2Angular_uncorrelated This);

// +++ Set
extern_c void
Angular_uncorrelatedIsotropic2dSet(ConstHandle2Angular_uncorrelated This, ConstHandle2ConstIsotropic2d isotropic2d);


// -----------------------------------------------------------------------------
// Child: forward
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
Angular_uncorrelatedForwardHas(ConstHandle2ConstAngular_uncorrelated This);

// --- Get, const
extern_c Handle2ConstForward
Angular_uncorrelatedForwardGetConst(ConstHandle2ConstAngular_uncorrelated This);

// +++ Get, non-const
extern_c Handle2Forward
Angular_uncorrelatedForwardGet(ConstHandle2Angular_uncorrelated This);

// +++ Set
extern_c void
Angular_uncorrelatedForwardSet(ConstHandle2Angular_uncorrelated This, ConstHandle2ConstForward forward);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
