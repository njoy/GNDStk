
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/transport/OutputChannel.hpp"
#include "OutputChannel.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = OutputChannelClass;
using CPP = multigroup::OutputChannel;

static const std::string CLASSNAME = "OutputChannel";

namespace extract {
   static auto genre = [](auto &obj) { return &obj.genre; };
   static auto process = [](auto &obj) { return &obj.process; };
   static auto Q = [](auto &obj) { return &obj.Q; };
   static auto products = [](auto &obj) { return &obj.products; };
   static auto fissionFragmentData = [](auto &obj) { return &obj.fissionFragmentData; };
}

using CPPQ = common::Q;
using CPPProducts = common::Products;
using CPPFissionFragmentData = fissionFragmentData::FissionFragmentData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstOutputChannel
OutputChannelDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2OutputChannel
OutputChannelDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstOutputChannel
OutputChannelCreateConst(
   const XMLName genre,
   const XMLName process,
   ConstHandle2ConstQ Q,
   ConstHandle2ConstProducts products,
   ConstHandle2ConstFissionFragmentData fissionFragmentData
) {
   ConstHandle2OutputChannel handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      genre,
      process,
      detail::tocpp<CPPQ>(Q),
      detail::tocpp<CPPProducts>(products),
      detail::tocpp<CPPFissionFragmentData>(fissionFragmentData)
   );
   return handle;
}

// Create, general
Handle2OutputChannel
OutputChannelCreate(
   const XMLName genre,
   const XMLName process,
   ConstHandle2ConstQ Q,
   ConstHandle2ConstProducts products,
   ConstHandle2ConstFissionFragmentData fissionFragmentData
) {
   ConstHandle2OutputChannel handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      genre,
      process,
      detail::tocpp<CPPQ>(Q),
      detail::tocpp<CPPProducts>(products),
      detail::tocpp<CPPFissionFragmentData>(fissionFragmentData)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
OutputChannelAssign(ConstHandle2OutputChannel self, ConstHandle2ConstOutputChannel from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
OutputChannelDelete(ConstHandle2ConstOutputChannel self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
OutputChannelRead(ConstHandle2OutputChannel self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
OutputChannelWrite(ConstHandle2ConstOutputChannel self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
OutputChannelPrint(ConstHandle2ConstOutputChannel self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
OutputChannelPrintXML(ConstHandle2ConstOutputChannel self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
OutputChannelPrintJSON(ConstHandle2ConstOutputChannel self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: genre
// -----------------------------------------------------------------------------

// Has
int
OutputChannelGenreHas(ConstHandle2ConstOutputChannel self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"GenreHas", self, extract::genre);
}

// Get
// Returns by value
XMLName
OutputChannelGenreGet(ConstHandle2ConstOutputChannel self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"GenreGet", self, extract::genre);
}

// Set
void
OutputChannelGenreSet(ConstHandle2OutputChannel self, const XMLName genre)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"GenreSet", self, extract::genre, genre);
}


// -----------------------------------------------------------------------------
// Metadatum: process
// -----------------------------------------------------------------------------

// Has
int
OutputChannelProcessHas(ConstHandle2ConstOutputChannel self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProcessHas", self, extract::process);
}

// Get
// Returns by value
XMLName
OutputChannelProcessGet(ConstHandle2ConstOutputChannel self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProcessGet", self, extract::process);
}

// Set
void
OutputChannelProcessSet(ConstHandle2OutputChannel self, const XMLName process)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProcessSet", self, extract::process, process);
}


// -----------------------------------------------------------------------------
// Child: Q
// -----------------------------------------------------------------------------

// Has
int
OutputChannelQHas(ConstHandle2ConstOutputChannel self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"QHas", self, extract::Q);
}

// Get, const
Handle2ConstQ
OutputChannelQGetConst(ConstHandle2ConstOutputChannel self)
{
   return detail::getField<CPP,Handle2ConstQ>
      (CLASSNAME, CLASSNAME+"QGetConst", self, extract::Q);
}

// Get, non-const
Handle2Q
OutputChannelQGet(ConstHandle2OutputChannel self)
{
   return detail::getField<CPP,Handle2Q>
      (CLASSNAME, CLASSNAME+"QGet", self, extract::Q);
}

// Set
void
OutputChannelQSet(ConstHandle2OutputChannel self, ConstHandle2ConstQ Q)
{
   detail::setField<CPP,CPPQ>
      (CLASSNAME, CLASSNAME+"QSet", self, extract::Q, Q);
}


// -----------------------------------------------------------------------------
// Child: products
// -----------------------------------------------------------------------------

// Has
int
OutputChannelProductsHas(ConstHandle2ConstOutputChannel self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductsHas", self, extract::products);
}

// Get, const
Handle2ConstProducts
OutputChannelProductsGetConst(ConstHandle2ConstOutputChannel self)
{
   return detail::getField<CPP,Handle2ConstProducts>
      (CLASSNAME, CLASSNAME+"ProductsGetConst", self, extract::products);
}

// Get, non-const
Handle2Products
OutputChannelProductsGet(ConstHandle2OutputChannel self)
{
   return detail::getField<CPP,Handle2Products>
      (CLASSNAME, CLASSNAME+"ProductsGet", self, extract::products);
}

// Set
void
OutputChannelProductsSet(ConstHandle2OutputChannel self, ConstHandle2ConstProducts products)
{
   detail::setField<CPP,CPPProducts>
      (CLASSNAME, CLASSNAME+"ProductsSet", self, extract::products, products);
}


// -----------------------------------------------------------------------------
// Child: fissionFragmentData
// -----------------------------------------------------------------------------

// Has
int
OutputChannelFissionFragmentDataHas(ConstHandle2ConstOutputChannel self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataHas", self, extract::fissionFragmentData);
}

// Get, const
Handle2ConstFissionFragmentData
OutputChannelFissionFragmentDataGetConst(ConstHandle2ConstOutputChannel self)
{
   return detail::getField<CPP,Handle2ConstFissionFragmentData>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataGetConst", self, extract::fissionFragmentData);
}

// Get, non-const
Handle2FissionFragmentData
OutputChannelFissionFragmentDataGet(ConstHandle2OutputChannel self)
{
   return detail::getField<CPP,Handle2FissionFragmentData>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataGet", self, extract::fissionFragmentData);
}

// Set
void
OutputChannelFissionFragmentDataSet(ConstHandle2OutputChannel self, ConstHandle2ConstFissionFragmentData fissionFragmentData)
{
   detail::setField<CPP,CPPFissionFragmentData>
      (CLASSNAME, CLASSNAME+"FissionFragmentDataSet", self, extract::fissionFragmentData, fissionFragmentData);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/transport/OutputChannel/src/custom.cpp"
