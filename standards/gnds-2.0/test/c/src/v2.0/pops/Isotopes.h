
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Isotopes is the basic handle type in this file. Example:
//    // Create a default Isotopes object:
//    Isotopes handle = IsotopesDefault();
// Functions involving Isotopes are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_POPS_ISOTOPES
#define C_INTERFACE_TEST_V2_0_POPS_ISOTOPES

#include "GNDStk.h"
#include "v2.0/pops/Isotope.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct IsotopesClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Isotopes
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct IsotopesClass *Isotopes;

// --- Const-aware handles.
typedef const struct IsotopesClass *const ConstHandle2ConstIsotopes;
typedef       struct IsotopesClass *const ConstHandle2Isotopes;
typedef const struct IsotopesClass *      Handle2ConstIsotopes;
typedef       struct IsotopesClass *      Handle2Isotopes;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstIsotopes
IsotopesDefaultConst();

// +++ Create, default
extern_c Handle2Isotopes
IsotopesDefault();

// --- Create, general, const
extern_c Handle2ConstIsotopes
IsotopesCreateConst(
   ConstHandle2Isotope *const isotope, const size_t isotopeSize
);

// +++ Create, general
extern_c Handle2Isotopes
IsotopesCreate(
   ConstHandle2Isotope *const isotope, const size_t isotopeSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
IsotopesAssign(ConstHandle2Isotopes self, ConstHandle2ConstIsotopes from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
IsotopesDelete(ConstHandle2ConstIsotopes self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
IsotopesRead(ConstHandle2Isotopes self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
IsotopesWrite(ConstHandle2ConstIsotopes self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
IsotopesPrint(ConstHandle2ConstIsotopes self);

// +++ Print to standard output, as XML
extern_c int
IsotopesPrintXML(ConstHandle2ConstIsotopes self);

// +++ Print to standard output, as JSON
extern_c int
IsotopesPrintJSON(ConstHandle2ConstIsotopes self);


// -----------------------------------------------------------------------------
// Child: isotope
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
IsotopesIsotopeHas(ConstHandle2ConstIsotopes self);

// +++ Clear
extern_c void
IsotopesIsotopeClear(ConstHandle2Isotopes self);

// +++ Size
extern_c size_t
IsotopesIsotopeSize(ConstHandle2ConstIsotopes self);

// +++ Add
extern_c void
IsotopesIsotopeAdd(ConstHandle2Isotopes self, ConstHandle2ConstIsotope isotope);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstIsotope
IsotopesIsotopeGetConst(ConstHandle2ConstIsotopes self, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Isotope
IsotopesIsotopeGet(ConstHandle2Isotopes self, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
IsotopesIsotopeSet(
   ConstHandle2Isotopes self,
   const size_t index_,
   ConstHandle2ConstIsotope isotope
);

// +++ Has, by A
extern_c int
IsotopesIsotopeHasByA(
   ConstHandle2ConstIsotopes self,
   const Integer32 A
);

// --- Get, by A, const
extern_c Handle2ConstIsotope
IsotopesIsotopeGetByAConst(
   ConstHandle2ConstIsotopes self,
   const Integer32 A
);

// +++ Get, by A, non-const
extern_c Handle2Isotope
IsotopesIsotopeGetByA(
   ConstHandle2Isotopes self,
   const Integer32 A
);

// +++ Set, by A
extern_c void
IsotopesIsotopeSetByA(
   ConstHandle2Isotopes self,
   const Integer32 A,
   ConstHandle2ConstIsotope isotope
);

// +++ Has, by symbol
extern_c int
IsotopesIsotopeHasBySymbol(
   ConstHandle2ConstIsotopes self,
   const XMLName symbol
);

// --- Get, by symbol, const
extern_c Handle2ConstIsotope
IsotopesIsotopeGetBySymbolConst(
   ConstHandle2ConstIsotopes self,
   const XMLName symbol
);

// +++ Get, by symbol, non-const
extern_c Handle2Isotope
IsotopesIsotopeGetBySymbol(
   ConstHandle2Isotopes self,
   const XMLName symbol
);

// +++ Set, by symbol
extern_c void
IsotopesIsotopeSetBySymbol(
   ConstHandle2Isotopes self,
   const XMLName symbol,
   ConstHandle2ConstIsotope isotope
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/pops/Isotopes/src/custom.h"

#undef extern_c
#endif
