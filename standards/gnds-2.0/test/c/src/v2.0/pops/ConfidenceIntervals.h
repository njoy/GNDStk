
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// ConfidenceIntervals is the basic handle type in this file. Example:
//    // Create a default ConfidenceIntervals object:
//    ConfidenceIntervals handle = ConfidenceIntervalsDefault();
// Functions involving ConfidenceIntervals are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_POPS_CONFIDENCEINTERVALS
#define C_INTERFACE_TEST_V2_0_POPS_CONFIDENCEINTERVALS

#include "GNDStk.h"
#include "v2.0/pops/Interval.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ConfidenceIntervalsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ConfidenceIntervals
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ConfidenceIntervalsClass *ConfidenceIntervals;

// --- Const-aware handles.
typedef const struct ConfidenceIntervalsClass *const ConstHandle2ConstConfidenceIntervals;
typedef       struct ConfidenceIntervalsClass *const ConstHandle2ConfidenceIntervals;
typedef const struct ConfidenceIntervalsClass *      Handle2ConstConfidenceIntervals;
typedef       struct ConfidenceIntervalsClass *      Handle2ConfidenceIntervals;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstConfidenceIntervals
ConfidenceIntervalsDefaultConst();

// +++ Create, default
extern_c Handle2ConfidenceIntervals
ConfidenceIntervalsDefault();

// --- Create, general, const
extern_c Handle2ConstConfidenceIntervals
ConfidenceIntervalsCreateConst(
   ConstHandle2Interval *const interval, const size_t intervalSize
);

// +++ Create, general
extern_c Handle2ConfidenceIntervals
ConfidenceIntervalsCreate(
   ConstHandle2Interval *const interval, const size_t intervalSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ConfidenceIntervalsAssign(ConstHandle2ConfidenceIntervals This, ConstHandle2ConstConfidenceIntervals from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ConfidenceIntervalsDelete(ConstHandle2ConstConfidenceIntervals This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ConfidenceIntervalsRead(ConstHandle2ConfidenceIntervals This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ConfidenceIntervalsWrite(ConstHandle2ConstConfidenceIntervals This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ConfidenceIntervalsPrint(ConstHandle2ConstConfidenceIntervals This);

// +++ Print to standard output, as XML
extern_c int
ConfidenceIntervalsPrintXML(ConstHandle2ConstConfidenceIntervals This);

// +++ Print to standard output, as JSON
extern_c int
ConfidenceIntervalsPrintJSON(ConstHandle2ConstConfidenceIntervals This);


// -----------------------------------------------------------------------------
// Child: interval
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ConfidenceIntervalsIntervalHas(ConstHandle2ConstConfidenceIntervals This);

// +++ Clear
extern_c void
ConfidenceIntervalsIntervalClear(ConstHandle2ConfidenceIntervals This);

// +++ Size
extern_c size_t
ConfidenceIntervalsIntervalSize(ConstHandle2ConstConfidenceIntervals This);

// +++ Add
extern_c void
ConfidenceIntervalsIntervalAdd(ConstHandle2ConfidenceIntervals This, ConstHandle2ConstInterval interval);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstInterval
ConfidenceIntervalsIntervalGetConst(ConstHandle2ConstConfidenceIntervals This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Interval
ConfidenceIntervalsIntervalGet(ConstHandle2ConfidenceIntervals This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
ConfidenceIntervalsIntervalSet(
   ConstHandle2ConfidenceIntervals This,
   const size_t index_,
   ConstHandle2ConstInterval interval
);

// +++ Has, by confidence
extern_c int
ConfidenceIntervalsIntervalHasByConfidence(
   ConstHandle2ConstConfidenceIntervals This,
   const Float64 confidence
);

// --- Get, by confidence, const
extern_c Handle2ConstInterval
ConfidenceIntervalsIntervalGetByConfidenceConst(
   ConstHandle2ConstConfidenceIntervals This,
   const Float64 confidence
);

// +++ Get, by confidence, non-const
extern_c Handle2Interval
ConfidenceIntervalsIntervalGetByConfidence(
   ConstHandle2ConfidenceIntervals This,
   const Float64 confidence
);

// +++ Set, by confidence
extern_c void
ConfidenceIntervalsIntervalSetByConfidence(
   ConstHandle2ConfidenceIntervals This,
   const Float64 confidence,
   ConstHandle2ConstInterval interval
);

// +++ Has, by lower
extern_c int
ConfidenceIntervalsIntervalHasByLower(
   ConstHandle2ConstConfidenceIntervals This,
   const Float64 lower
);

// --- Get, by lower, const
extern_c Handle2ConstInterval
ConfidenceIntervalsIntervalGetByLowerConst(
   ConstHandle2ConstConfidenceIntervals This,
   const Float64 lower
);

// +++ Get, by lower, non-const
extern_c Handle2Interval
ConfidenceIntervalsIntervalGetByLower(
   ConstHandle2ConfidenceIntervals This,
   const Float64 lower
);

// +++ Set, by lower
extern_c void
ConfidenceIntervalsIntervalSetByLower(
   ConstHandle2ConfidenceIntervals This,
   const Float64 lower,
   ConstHandle2ConstInterval interval
);

// +++ Has, by upper
extern_c int
ConfidenceIntervalsIntervalHasByUpper(
   ConstHandle2ConstConfidenceIntervals This,
   const Float64 upper
);

// --- Get, by upper, const
extern_c Handle2ConstInterval
ConfidenceIntervalsIntervalGetByUpperConst(
   ConstHandle2ConstConfidenceIntervals This,
   const Float64 upper
);

// +++ Get, by upper, non-const
extern_c Handle2Interval
ConfidenceIntervalsIntervalGetByUpper(
   ConstHandle2ConfidenceIntervals This,
   const Float64 upper
);

// +++ Set, by upper
extern_c void
ConfidenceIntervalsIntervalSetByUpper(
   ConstHandle2ConfidenceIntervals This,
   const Float64 upper,
   ConstHandle2ConstInterval interval
);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
