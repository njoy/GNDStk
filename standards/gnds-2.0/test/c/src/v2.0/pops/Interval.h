
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Interval is the basic handle type in this file. Example:
//    // Create a default Interval object:
//    Interval handle = IntervalDefault();
// Functions involving Interval are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_POPS_INTERVAL
#define C_INTERFACE_TEST_V2_0_POPS_INTERVAL

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct IntervalClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Interval
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct IntervalClass *Interval;

// --- Const-aware handles.
typedef const struct IntervalClass *const ConstHandle2ConstInterval;
typedef       struct IntervalClass *const ConstHandle2Interval;
typedef const struct IntervalClass *      Handle2ConstInterval;
typedef       struct IntervalClass *      Handle2Interval;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstInterval
IntervalDefaultConst();

// +++ Create, default
extern_c Handle2Interval
IntervalDefault();

// --- Create, general, const
extern_c Handle2ConstInterval
IntervalCreateConst(
   const Float64 confidence,
   const Float64 lower,
   const Float64 upper
);

// +++ Create, general
extern_c Handle2Interval
IntervalCreate(
   const Float64 confidence,
   const Float64 lower,
   const Float64 upper
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
IntervalAssign(ConstHandle2Interval This, ConstHandle2ConstInterval from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
IntervalDelete(ConstHandle2ConstInterval This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
IntervalRead(ConstHandle2Interval This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
IntervalWrite(ConstHandle2ConstInterval This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
IntervalPrint(ConstHandle2ConstInterval This);

// +++ Print to standard output, as XML
extern_c int
IntervalPrintXML(ConstHandle2ConstInterval This);

// +++ Print to standard output, as JSON
extern_c int
IntervalPrintJSON(ConstHandle2ConstInterval This);


// -----------------------------------------------------------------------------
// Metadatum: confidence
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
IntervalConfidenceHas(ConstHandle2ConstInterval This);

// +++ Get
// +++ Returns by value
extern_c Float64
IntervalConfidenceGet(ConstHandle2ConstInterval This);

// +++ Set
extern_c void
IntervalConfidenceSet(ConstHandle2Interval This, const Float64 confidence);


// -----------------------------------------------------------------------------
// Metadatum: lower
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
IntervalLowerHas(ConstHandle2ConstInterval This);

// +++ Get
// +++ Returns by value
extern_c Float64
IntervalLowerGet(ConstHandle2ConstInterval This);

// +++ Set
extern_c void
IntervalLowerSet(ConstHandle2Interval This, const Float64 lower);


// -----------------------------------------------------------------------------
// Metadatum: upper
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
IntervalUpperHas(ConstHandle2ConstInterval This);

// +++ Get
// +++ Returns by value
extern_c Float64
IntervalUpperGet(ConstHandle2ConstInterval This);

// +++ Set
extern_c void
IntervalUpperSet(ConstHandle2Interval This, const Float64 upper);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
