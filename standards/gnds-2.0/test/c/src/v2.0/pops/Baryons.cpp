
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/pops/Baryons.hpp"
#include "Baryons.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = BaryonsClass;
using CPP = multigroup::Baryons;

static const std::string CLASSNAME = "Baryons";

namespace extract {
   static auto baryon = [](auto &obj) { return &obj.baryon; };
}

using CPPBaryon = pops::Baryon;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstBaryons
BaryonsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Baryons
BaryonsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstBaryons
BaryonsCreateConst(
   ConstHandle2Baryon *const baryon, const size_t baryonSize
) {
   ConstHandle2Baryons handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPBaryon>{}
   );
   for (size_t BaryonN = 0; BaryonN < baryonSize; ++BaryonN)
      BaryonsBaryonAdd(handle, baryon[BaryonN]);
   return handle;
}

// Create, general
Handle2Baryons
BaryonsCreate(
   ConstHandle2Baryon *const baryon, const size_t baryonSize
) {
   ConstHandle2Baryons handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPBaryon>{}
   );
   for (size_t BaryonN = 0; BaryonN < baryonSize; ++BaryonN)
      BaryonsBaryonAdd(handle, baryon[BaryonN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
BaryonsAssign(ConstHandle2Baryons This, ConstHandle2ConstBaryons from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
BaryonsDelete(ConstHandle2ConstBaryons This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
BaryonsRead(ConstHandle2Baryons This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
BaryonsWrite(ConstHandle2ConstBaryons This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
BaryonsPrint(ConstHandle2ConstBaryons This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
BaryonsPrintXML(ConstHandle2ConstBaryons This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
BaryonsPrintJSON(ConstHandle2ConstBaryons This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: baryon
// -----------------------------------------------------------------------------

// Has
int
BaryonsBaryonHas(ConstHandle2ConstBaryons This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BaryonHas", This, extract::baryon);
}

// Clear
void
BaryonsBaryonClear(ConstHandle2Baryons This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"BaryonClear", This, extract::baryon);
}

// Size
size_t
BaryonsBaryonSize(ConstHandle2ConstBaryons This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"BaryonSize", This, extract::baryon);
}

// Add
void
BaryonsBaryonAdd(ConstHandle2Baryons This, ConstHandle2ConstBaryon baryon)
{
   detail::addToContainer<CPP,CPPBaryon>
      (CLASSNAME, CLASSNAME+"BaryonAdd", This, extract::baryon, baryon);
}

// Get, by index \in [0,size), const
Handle2ConstBaryon
BaryonsBaryonGetConst(ConstHandle2ConstBaryons This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstBaryon>
      (CLASSNAME, CLASSNAME+"BaryonGetConst", This, extract::baryon, index_);
}

// Get, by index \in [0,size), non-const
Handle2Baryon
BaryonsBaryonGet(ConstHandle2Baryons This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Baryon>
      (CLASSNAME, CLASSNAME+"BaryonGet", This, extract::baryon, index_);
}

// Set, by index \in [0,size)
void
BaryonsBaryonSet(
   ConstHandle2Baryons This,
   const size_t index_,
   ConstHandle2ConstBaryon baryon
) {
   detail::setByIndex<CPP,CPPBaryon>
      (CLASSNAME, CLASSNAME+"BaryonSet", This, extract::baryon, index_, baryon);
}

// Has, by id
int
BaryonsBaryonHasById(
   ConstHandle2ConstBaryons This,
   const XMLName id
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"BaryonHasById",
       This, extract::baryon, meta::id, id);
}

// Get, by id, const
Handle2ConstBaryon
BaryonsBaryonGetByIdConst(
   ConstHandle2ConstBaryons This,
   const XMLName id
) {
   return detail::getByMetadatum<CPP,Handle2ConstBaryon>
      (CLASSNAME, CLASSNAME+"BaryonGetByIdConst",
       This, extract::baryon, meta::id, id);
}

// Get, by id, non-const
Handle2Baryon
BaryonsBaryonGetById(
   ConstHandle2Baryons This,
   const XMLName id
) {
   return detail::getByMetadatum<CPP,Handle2Baryon>
      (CLASSNAME, CLASSNAME+"BaryonGetById",
       This, extract::baryon, meta::id, id);
}

// Set, by id
void
BaryonsBaryonSetById(
   ConstHandle2Baryons This,
   const XMLName id,
   ConstHandle2ConstBaryon baryon
) {
   detail::setByMetadatum<CPP,CPPBaryon>
      (CLASSNAME, CLASSNAME+"BaryonSetById",
       This, extract::baryon, meta::id, id, baryon);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/pops/Baryons/src/custom.cpp"
