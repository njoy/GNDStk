
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/pops/Probability.hpp"
#include "Probability.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ProbabilityClass;
using CPP = multigroup::Probability;

static const std::string CLASSNAME = "Probability";

namespace extract {
   static auto Double = [](auto &obj) { return &obj.Double; };
}

using CPPDouble = containers::Double;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstProbability
ProbabilityDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Probability
ProbabilityDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstProbability
ProbabilityCreateConst(
   ConstHandle2Double *const Double, const size_t DoubleSize
) {
   ConstHandle2Probability handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPDouble>{}
   );
   for (size_t DoubleN = 0; DoubleN < DoubleSize; ++DoubleN)
      ProbabilityDoubleAdd(handle, Double[DoubleN]);
   return handle;
}

// Create, general
Handle2Probability
ProbabilityCreate(
   ConstHandle2Double *const Double, const size_t DoubleSize
) {
   ConstHandle2Probability handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPDouble>{}
   );
   for (size_t DoubleN = 0; DoubleN < DoubleSize; ++DoubleN)
      ProbabilityDoubleAdd(handle, Double[DoubleN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ProbabilityAssign(ConstHandle2Probability self, ConstHandle2ConstProbability from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ProbabilityDelete(ConstHandle2ConstProbability self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ProbabilityRead(ConstHandle2Probability self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ProbabilityWrite(ConstHandle2ConstProbability self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ProbabilityPrint(ConstHandle2ConstProbability self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ProbabilityPrintXML(ConstHandle2ConstProbability self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ProbabilityPrintJSON(ConstHandle2ConstProbability self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: Double
// -----------------------------------------------------------------------------

// Has
int
ProbabilityDoubleHas(ConstHandle2ConstProbability self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DoubleHas", self, extract::Double);
}

// Clear
void
ProbabilityDoubleClear(ConstHandle2Probability self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"DoubleClear", self, extract::Double);
}

// Size
size_t
ProbabilityDoubleSize(ConstHandle2ConstProbability self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"DoubleSize", self, extract::Double);
}

// Add
void
ProbabilityDoubleAdd(ConstHandle2Probability self, ConstHandle2ConstDouble Double)
{
   detail::addToContainer<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleAdd", self, extract::Double, Double);
}

// Get, by index \in [0,size), const
Handle2ConstDouble
ProbabilityDoubleGetConst(ConstHandle2ConstProbability self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstDouble>
      (CLASSNAME, CLASSNAME+"DoubleGetConst", self, extract::Double, index_);
}

// Get, by index \in [0,size), non-const
Handle2Double
ProbabilityDoubleGet(ConstHandle2Probability self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Double>
      (CLASSNAME, CLASSNAME+"DoubleGet", self, extract::Double, index_);
}

// Set, by index \in [0,size)
void
ProbabilityDoubleSet(
   ConstHandle2Probability self,
   const size_t index_,
   ConstHandle2ConstDouble Double
) {
   detail::setByIndex<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleSet", self, extract::Double, index_, Double);
}

// Has, by label
int
ProbabilityDoubleHasByLabel(
   ConstHandle2ConstProbability self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DoubleHasByLabel",
       self, extract::Double, meta::label, label);
}

// Get, by label, const
Handle2ConstDouble
ProbabilityDoubleGetByLabelConst(
   ConstHandle2ConstProbability self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstDouble>
      (CLASSNAME, CLASSNAME+"DoubleGetByLabelConst",
       self, extract::Double, meta::label, label);
}

// Get, by label, non-const
Handle2Double
ProbabilityDoubleGetByLabel(
   ConstHandle2Probability self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Double>
      (CLASSNAME, CLASSNAME+"DoubleGetByLabel",
       self, extract::Double, meta::label, label);
}

// Set, by label
void
ProbabilityDoubleSetByLabel(
   ConstHandle2Probability self,
   const XMLName label,
   ConstHandle2ConstDouble Double
) {
   detail::setByMetadatum<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleSetByLabel",
       self, extract::Double, meta::label, label, Double);
}

// Has, by unit
int
ProbabilityDoubleHasByUnit(
   ConstHandle2ConstProbability self,
   const XMLName unit
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DoubleHasByUnit",
       self, extract::Double, meta::unit, unit);
}

// Get, by unit, const
Handle2ConstDouble
ProbabilityDoubleGetByUnitConst(
   ConstHandle2ConstProbability self,
   const XMLName unit
) {
   return detail::getByMetadatum<CPP,Handle2ConstDouble>
      (CLASSNAME, CLASSNAME+"DoubleGetByUnitConst",
       self, extract::Double, meta::unit, unit);
}

// Get, by unit, non-const
Handle2Double
ProbabilityDoubleGetByUnit(
   ConstHandle2Probability self,
   const XMLName unit
) {
   return detail::getByMetadatum<CPP,Handle2Double>
      (CLASSNAME, CLASSNAME+"DoubleGetByUnit",
       self, extract::Double, meta::unit, unit);
}

// Set, by unit
void
ProbabilityDoubleSetByUnit(
   ConstHandle2Probability self,
   const XMLName unit,
   ConstHandle2ConstDouble Double
) {
   detail::setByMetadatum<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleSetByUnit",
       self, extract::Double, meta::unit, unit, Double);
}

// Has, by value
int
ProbabilityDoubleHasByValue(
   ConstHandle2ConstProbability self,
   const Float64 value
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DoubleHasByValue",
       self, extract::Double, meta::value, value);
}

// Get, by value, const
Handle2ConstDouble
ProbabilityDoubleGetByValueConst(
   ConstHandle2ConstProbability self,
   const Float64 value
) {
   return detail::getByMetadatum<CPP,Handle2ConstDouble>
      (CLASSNAME, CLASSNAME+"DoubleGetByValueConst",
       self, extract::Double, meta::value, value);
}

// Get, by value, non-const
Handle2Double
ProbabilityDoubleGetByValue(
   ConstHandle2Probability self,
   const Float64 value
) {
   return detail::getByMetadatum<CPP,Handle2Double>
      (CLASSNAME, CLASSNAME+"DoubleGetByValue",
       self, extract::Double, meta::value, value);
}

// Set, by value
void
ProbabilityDoubleSetByValue(
   ConstHandle2Probability self,
   const Float64 value,
   ConstHandle2ConstDouble Double
) {
   detail::setByMetadatum<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleSetByValue",
       self, extract::Double, meta::value, value, Double);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/pops/Probability/src/custom.cpp"
