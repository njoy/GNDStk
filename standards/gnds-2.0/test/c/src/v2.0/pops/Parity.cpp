
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/pops/Parity.hpp"
#include "Parity.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ParityClass;
using CPP = multigroup::Parity;

static const std::string CLASSNAME = "Parity";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto unit = [](auto &obj) { return &obj.unit; };
   static auto value = [](auto &obj) { return &obj.value; };
   static auto documentation = [](auto &obj) { return &obj.documentation; };
   static auto uncertainty = [](auto &obj) { return &obj.uncertainty; };
   static auto integer = [](auto &obj) { return &obj.integer; };
}

using CPPDocumentation = documentation::Documentation;
using CPPUncertainty = pops::Uncertainty;
using CPPInteger = containers::Integer;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstParity
ParityDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Parity
ParityDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstParity
ParityCreateConst(
   const XMLName label,
   const XMLName unit,
   const XMLName value,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstUncertainty uncertainty,
   ConstHandle2Integer *const integer, const size_t integerSize
) {
   ConstHandle2Parity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      unit,
      value,
      detail::tocpp<CPPDocumentation>(documentation),
      detail::tocpp<CPPUncertainty>(uncertainty),
      std::vector<CPPInteger>{}
   );
   for (size_t IntegerN = 0; IntegerN < integerSize; ++IntegerN)
      ParityIntegerAdd(handle, integer[IntegerN]);
   return handle;
}

// Create, general
Handle2Parity
ParityCreate(
   const XMLName label,
   const XMLName unit,
   const XMLName value,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstUncertainty uncertainty,
   ConstHandle2Integer *const integer, const size_t integerSize
) {
   ConstHandle2Parity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      unit,
      value,
      detail::tocpp<CPPDocumentation>(documentation),
      detail::tocpp<CPPUncertainty>(uncertainty),
      std::vector<CPPInteger>{}
   );
   for (size_t IntegerN = 0; IntegerN < integerSize; ++IntegerN)
      ParityIntegerAdd(handle, integer[IntegerN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ParityAssign(ConstHandle2Parity This, ConstHandle2ConstParity from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ParityDelete(ConstHandle2ConstParity This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ParityRead(ConstHandle2Parity This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ParityWrite(ConstHandle2ConstParity This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ParityPrint(ConstHandle2ConstParity This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ParityPrintXML(ConstHandle2ConstParity This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ParityPrintJSON(ConstHandle2ConstParity This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ParityLabelHas(ConstHandle2ConstParity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
ParityLabelGet(ConstHandle2ConstParity This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
ParityLabelSet(ConstHandle2Parity This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// Has
int
ParityUnitHas(ConstHandle2ConstParity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnitHas", This, extract::unit);
}

// Get
// Returns by value
XMLName
ParityUnitGet(ConstHandle2ConstParity This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"UnitGet", This, extract::unit);
}

// Set
void
ParityUnitSet(ConstHandle2Parity This, const XMLName unit)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"UnitSet", This, extract::unit, unit);
}


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// Has
int
ParityValueHas(ConstHandle2ConstParity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValueHas", This, extract::value);
}

// Get
// Returns by value
XMLName
ParityValueGet(ConstHandle2ConstParity This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ValueGet", This, extract::value);
}

// Set
void
ParityValueSet(ConstHandle2Parity This, const XMLName value)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ValueSet", This, extract::value, value);
}


// -----------------------------------------------------------------------------
// Child: documentation
// -----------------------------------------------------------------------------

// Has
int
ParityDocumentationHas(ConstHandle2ConstParity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DocumentationHas", This, extract::documentation);
}

// Get, const
Handle2ConstDocumentation
ParityDocumentationGetConst(ConstHandle2ConstParity This)
{
   return detail::getField<CPP,Handle2ConstDocumentation>
      (CLASSNAME, CLASSNAME+"DocumentationGetConst", This, extract::documentation);
}

// Get, non-const
Handle2Documentation
ParityDocumentationGet(ConstHandle2Parity This)
{
   return detail::getField<CPP,Handle2Documentation>
      (CLASSNAME, CLASSNAME+"DocumentationGet", This, extract::documentation);
}

// Set
void
ParityDocumentationSet(ConstHandle2Parity This, ConstHandle2ConstDocumentation documentation)
{
   detail::setField<CPP,CPPDocumentation>
      (CLASSNAME, CLASSNAME+"DocumentationSet", This, extract::documentation, documentation);
}


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// Has
int
ParityUncertaintyHas(ConstHandle2ConstParity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UncertaintyHas", This, extract::uncertainty);
}

// Get, const
Handle2ConstUncertainty
ParityUncertaintyGetConst(ConstHandle2ConstParity This)
{
   return detail::getField<CPP,Handle2ConstUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGetConst", This, extract::uncertainty);
}

// Get, non-const
Handle2Uncertainty
ParityUncertaintyGet(ConstHandle2Parity This)
{
   return detail::getField<CPP,Handle2Uncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintyGet", This, extract::uncertainty);
}

// Set
void
ParityUncertaintySet(ConstHandle2Parity This, ConstHandle2ConstUncertainty uncertainty)
{
   detail::setField<CPP,CPPUncertainty>
      (CLASSNAME, CLASSNAME+"UncertaintySet", This, extract::uncertainty, uncertainty);
}


// -----------------------------------------------------------------------------
// Child: integer
// -----------------------------------------------------------------------------

// Has
int
ParityIntegerHas(ConstHandle2ConstParity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IntegerHas", This, extract::integer);
}

// Clear
void
ParityIntegerClear(ConstHandle2Parity This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"IntegerClear", This, extract::integer);
}

// Size
size_t
ParityIntegerSize(ConstHandle2ConstParity This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"IntegerSize", This, extract::integer);
}

// Add
void
ParityIntegerAdd(ConstHandle2Parity This, ConstHandle2ConstInteger integer)
{
   detail::addToContainer<CPP,CPPInteger>
      (CLASSNAME, CLASSNAME+"IntegerAdd", This, extract::integer, integer);
}

// Get, by index \in [0,size), const
Handle2ConstInteger
ParityIntegerGetConst(ConstHandle2ConstParity This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstInteger>
      (CLASSNAME, CLASSNAME+"IntegerGetConst", This, extract::integer, index_);
}

// Get, by index \in [0,size), non-const
Handle2Integer
ParityIntegerGet(ConstHandle2Parity This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Integer>
      (CLASSNAME, CLASSNAME+"IntegerGet", This, extract::integer, index_);
}

// Set, by index \in [0,size)
void
ParityIntegerSet(
   ConstHandle2Parity This,
   const size_t index_,
   ConstHandle2ConstInteger integer
) {
   detail::setByIndex<CPP,CPPInteger>
      (CLASSNAME, CLASSNAME+"IntegerSet", This, extract::integer, index_, integer);
}

// Has, by label
int
ParityIntegerHasByLabel(
   ConstHandle2ConstParity This,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IntegerHasByLabel",
       This, extract::integer, meta::label, label);
}

// Get, by label, const
Handle2ConstInteger
ParityIntegerGetByLabelConst(
   ConstHandle2ConstParity This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstInteger>
      (CLASSNAME, CLASSNAME+"IntegerGetByLabelConst",
       This, extract::integer, meta::label, label);
}

// Get, by label, non-const
Handle2Integer
ParityIntegerGetByLabel(
   ConstHandle2Parity This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Integer>
      (CLASSNAME, CLASSNAME+"IntegerGetByLabel",
       This, extract::integer, meta::label, label);
}

// Set, by label
void
ParityIntegerSetByLabel(
   ConstHandle2Parity This,
   const XMLName label,
   ConstHandle2ConstInteger integer
) {
   detail::setByMetadatum<CPP,CPPInteger>
      (CLASSNAME, CLASSNAME+"IntegerSetByLabel",
       This, extract::integer, meta::label, label, integer);
}

// Has, by unit
int
ParityIntegerHasByUnit(
   ConstHandle2ConstParity This,
   const XMLName unit
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IntegerHasByUnit",
       This, extract::integer, meta::unit, unit);
}

// Get, by unit, const
Handle2ConstInteger
ParityIntegerGetByUnitConst(
   ConstHandle2ConstParity This,
   const XMLName unit
) {
   return detail::getByMetadatum<CPP,Handle2ConstInteger>
      (CLASSNAME, CLASSNAME+"IntegerGetByUnitConst",
       This, extract::integer, meta::unit, unit);
}

// Get, by unit, non-const
Handle2Integer
ParityIntegerGetByUnit(
   ConstHandle2Parity This,
   const XMLName unit
) {
   return detail::getByMetadatum<CPP,Handle2Integer>
      (CLASSNAME, CLASSNAME+"IntegerGetByUnit",
       This, extract::integer, meta::unit, unit);
}

// Set, by unit
void
ParityIntegerSetByUnit(
   ConstHandle2Parity This,
   const XMLName unit,
   ConstHandle2ConstInteger integer
) {
   detail::setByMetadatum<CPP,CPPInteger>
      (CLASSNAME, CLASSNAME+"IntegerSetByUnit",
       This, extract::integer, meta::unit, unit, integer);
}

// Has, by value
int
ParityIntegerHasByValue(
   ConstHandle2ConstParity This,
   const Integer32 value
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IntegerHasByValue",
       This, extract::integer, meta::value, value);
}

// Get, by value, const
Handle2ConstInteger
ParityIntegerGetByValueConst(
   ConstHandle2ConstParity This,
   const Integer32 value
) {
   return detail::getByMetadatum<CPP,Handle2ConstInteger>
      (CLASSNAME, CLASSNAME+"IntegerGetByValueConst",
       This, extract::integer, meta::value, value);
}

// Get, by value, non-const
Handle2Integer
ParityIntegerGetByValue(
   ConstHandle2Parity This,
   const Integer32 value
) {
   return detail::getByMetadatum<CPP,Handle2Integer>
      (CLASSNAME, CLASSNAME+"IntegerGetByValue",
       This, extract::integer, meta::value, value);
}

// Set, by value
void
ParityIntegerSetByValue(
   ConstHandle2Parity This,
   const Integer32 value,
   ConstHandle2ConstInteger integer
) {
   detail::setByMetadatum<CPP,CPPInteger>
      (CLASSNAME, CLASSNAME+"IntegerSetByValue",
       This, extract::integer, meta::value, value, integer);
}
