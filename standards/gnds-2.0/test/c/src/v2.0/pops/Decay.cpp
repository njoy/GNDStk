
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/pops/Decay.hpp"
#include "Decay.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = DecayClass;
using CPP = multigroup::Decay;

static const std::string CLASSNAME = "Decay";

namespace extract {
   static auto index = [](auto &obj) { return &obj.index; };
   static auto mode = [](auto &obj) { return &obj.mode; };
   static auto complete = [](auto &obj) { return &obj.complete; };
   static auto products = [](auto &obj) { return &obj.products; };
}

using CPPProducts = pops::Products;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDecay
DecayDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Decay
DecayDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDecay
DecayCreateConst(
   const Integer32 index,
   const enums::DecayType mode,
   const bool complete,
   ConstHandle2ConstProducts products
) {
   ConstHandle2Decay handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      index,
      mode,
      complete,
      detail::tocpp<CPPProducts>(products)
   );
   return handle;
}

// Create, general
Handle2Decay
DecayCreate(
   const Integer32 index,
   const enums::DecayType mode,
   const bool complete,
   ConstHandle2ConstProducts products
) {
   ConstHandle2Decay handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      index,
      mode,
      complete,
      detail::tocpp<CPPProducts>(products)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DecayAssign(ConstHandle2Decay self, ConstHandle2ConstDecay from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DecayDelete(ConstHandle2ConstDecay self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DecayRead(ConstHandle2Decay self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DecayWrite(ConstHandle2ConstDecay self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
DecayPrint(ConstHandle2ConstDecay self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
DecayPrintXML(ConstHandle2ConstDecay self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
DecayPrintJSON(ConstHandle2ConstDecay self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: index
// -----------------------------------------------------------------------------

// Has
int
DecayIndexHas(ConstHandle2ConstDecay self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IndexHas", self, extract::index);
}

// Get
// Returns by value
Integer32
DecayIndexGet(ConstHandle2ConstDecay self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"IndexGet", self, extract::index);
}

// Set
void
DecayIndexSet(ConstHandle2Decay self, const Integer32 index)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"IndexSet", self, extract::index, index);
}


// -----------------------------------------------------------------------------
// Metadatum: mode
// -----------------------------------------------------------------------------

// Has
int
DecayModeHas(ConstHandle2ConstDecay self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ModeHas", self, extract::mode);
}

// Get
// Returns by value
enums::DecayType
DecayModeGet(ConstHandle2ConstDecay self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ModeGet", self, extract::mode);
}

// Set
void
DecayModeSet(ConstHandle2Decay self, const enums::DecayType mode)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ModeSet", self, extract::mode, mode);
}


// -----------------------------------------------------------------------------
// Metadatum: complete
// -----------------------------------------------------------------------------

// Has
int
DecayCompleteHas(ConstHandle2ConstDecay self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CompleteHas", self, extract::complete);
}

// Get
// Returns by value
bool
DecayCompleteGet(ConstHandle2ConstDecay self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CompleteGet", self, extract::complete);
}

// Set
void
DecayCompleteSet(ConstHandle2Decay self, const bool complete)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CompleteSet", self, extract::complete, complete);
}


// -----------------------------------------------------------------------------
// Child: products
// -----------------------------------------------------------------------------

// Has
int
DecayProductsHas(ConstHandle2ConstDecay self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductsHas", self, extract::products);
}

// Get, const
Handle2ConstProducts
DecayProductsGetConst(ConstHandle2ConstDecay self)
{
   return detail::getField<CPP,Handle2ConstProducts>
      (CLASSNAME, CLASSNAME+"ProductsGetConst", self, extract::products);
}

// Get, non-const
Handle2Products
DecayProductsGet(ConstHandle2Decay self)
{
   return detail::getField<CPP,Handle2Products>
      (CLASSNAME, CLASSNAME+"ProductsGet", self, extract::products);
}

// Set
void
DecayProductsSet(ConstHandle2Decay self, ConstHandle2ConstProducts products)
{
   detail::setField<CPP,CPPProducts>
      (CLASSNAME, CLASSNAME+"ProductsSet", self, extract::products, products);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/pops/Decay/src/custom.cpp"
