
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Halflife is the basic handle type in this file. Example:
//    // Create a default Halflife object:
//    Halflife handle = HalflifeDefault();
// Functions involving Halflife are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_POPS_HALFLIFE
#define C_INTERFACE_TEST_V2_0_POPS_HALFLIFE

#include "GNDStk.h"
#include "v2.0/documentation/Documentation.h"
#include "v2.0/pops/Uncertainty.h"
#include "v2.0/containers/String.h"
#include "v2.0/containers/Double.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct HalflifeClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Halflife
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct HalflifeClass *Halflife;

// --- Const-aware handles.
typedef const struct HalflifeClass *const ConstHandle2ConstHalflife;
typedef       struct HalflifeClass *const ConstHandle2Halflife;
typedef const struct HalflifeClass *      Handle2ConstHalflife;
typedef       struct HalflifeClass *      Handle2Halflife;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstHalflife
HalflifeDefaultConst();

// +++ Create, default
extern_c Handle2Halflife
HalflifeDefault();

// --- Create, general, const
extern_c Handle2ConstHalflife
HalflifeCreateConst(
   const XMLName label,
   const XMLName unit,
   const XMLName value,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstUncertainty uncertainty,
);

// +++ Create, general
extern_c Handle2Halflife
HalflifeCreate(
   const XMLName label,
   const XMLName unit,
   const XMLName value,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstUncertainty uncertainty,
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
HalflifeAssign(ConstHandle2Halflife This, ConstHandle2ConstHalflife from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
HalflifeDelete(ConstHandle2ConstHalflife This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
HalflifeRead(ConstHandle2Halflife This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
HalflifeWrite(ConstHandle2ConstHalflife This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
HalflifePrint(ConstHandle2ConstHalflife This);

// +++ Print to standard output, as XML
extern_c int
HalflifePrintXML(ConstHandle2ConstHalflife This);

// +++ Print to standard output, as JSON
extern_c int
HalflifePrintJSON(ConstHandle2ConstHalflife This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
HalflifeLabelHas(ConstHandle2ConstHalflife This);

// +++ Get
// +++ Returns by value
extern_c XMLName
HalflifeLabelGet(ConstHandle2ConstHalflife This);

// +++ Set
extern_c void
HalflifeLabelSet(ConstHandle2Halflife This, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
HalflifeUnitHas(ConstHandle2ConstHalflife This);

// +++ Get
// +++ Returns by value
extern_c XMLName
HalflifeUnitGet(ConstHandle2ConstHalflife This);

// +++ Set
extern_c void
HalflifeUnitSet(ConstHandle2Halflife This, const XMLName unit);


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
HalflifeValueHas(ConstHandle2ConstHalflife This);

// +++ Get
// +++ Returns by value
extern_c XMLName
HalflifeValueGet(ConstHandle2ConstHalflife This);

// +++ Set
extern_c void
HalflifeValueSet(ConstHandle2Halflife This, const XMLName value);


// -----------------------------------------------------------------------------
// Child: documentation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
HalflifeDocumentationHas(ConstHandle2ConstHalflife This);

// --- Get, const
extern_c Handle2ConstDocumentation
HalflifeDocumentationGetConst(ConstHandle2ConstHalflife This);

// +++ Get, non-const
extern_c Handle2Documentation
HalflifeDocumentationGet(ConstHandle2Halflife This);

// +++ Set
extern_c void
HalflifeDocumentationSet(ConstHandle2Halflife This, ConstHandle2ConstDocumentation documentation);


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
HalflifeUncertaintyHas(ConstHandle2ConstHalflife This);

// --- Get, const
extern_c Handle2ConstUncertainty
HalflifeUncertaintyGetConst(ConstHandle2ConstHalflife This);

// +++ Get, non-const
extern_c Handle2Uncertainty
HalflifeUncertaintyGet(ConstHandle2Halflife This);

// +++ Set
extern_c void
HalflifeUncertaintySet(ConstHandle2Halflife This, ConstHandle2ConstUncertainty uncertainty);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
