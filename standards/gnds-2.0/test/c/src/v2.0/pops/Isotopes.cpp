
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/pops/Isotopes.hpp"
#include "Isotopes.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = IsotopesClass;
using CPP = multigroup::Isotopes;

static const std::string CLASSNAME = "Isotopes";

namespace extract {
   static auto isotope = [](auto &obj) { return &obj.isotope; };
}

using CPPIsotope = pops::Isotope;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstIsotopes
IsotopesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Isotopes
IsotopesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstIsotopes
IsotopesCreateConst(
   ConstHandle2Isotope *const isotope, const size_t isotopeSize
) {
   ConstHandle2Isotopes handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPIsotope>{}
   );
   for (size_t IsotopeN = 0; IsotopeN < isotopeSize; ++IsotopeN)
      IsotopesIsotopeAdd(handle, isotope[IsotopeN]);
   return handle;
}

// Create, general
Handle2Isotopes
IsotopesCreate(
   ConstHandle2Isotope *const isotope, const size_t isotopeSize
) {
   ConstHandle2Isotopes handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPIsotope>{}
   );
   for (size_t IsotopeN = 0; IsotopeN < isotopeSize; ++IsotopeN)
      IsotopesIsotopeAdd(handle, isotope[IsotopeN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
IsotopesAssign(ConstHandle2Isotopes This, ConstHandle2ConstIsotopes from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
IsotopesDelete(ConstHandle2ConstIsotopes This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
IsotopesRead(ConstHandle2Isotopes This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
IsotopesWrite(ConstHandle2ConstIsotopes This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
IsotopesPrint(ConstHandle2ConstIsotopes This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
IsotopesPrintXML(ConstHandle2ConstIsotopes This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
IsotopesPrintJSON(ConstHandle2ConstIsotopes This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: isotope
// -----------------------------------------------------------------------------

// Has
int
IsotopesIsotopeHas(ConstHandle2ConstIsotopes This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IsotopeHas", This, extract::isotope);
}

// Clear
void
IsotopesIsotopeClear(ConstHandle2Isotopes This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"IsotopeClear", This, extract::isotope);
}

// Size
size_t
IsotopesIsotopeSize(ConstHandle2ConstIsotopes This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"IsotopeSize", This, extract::isotope);
}

// Add
void
IsotopesIsotopeAdd(ConstHandle2Isotopes This, ConstHandle2ConstIsotope isotope)
{
   detail::addToContainer<CPP,CPPIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeAdd", This, extract::isotope, isotope);
}

// Get, by index \in [0,size), const
Handle2ConstIsotope
IsotopesIsotopeGetConst(ConstHandle2ConstIsotopes This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeGetConst", This, extract::isotope, index_);
}

// Get, by index \in [0,size), non-const
Handle2Isotope
IsotopesIsotopeGet(ConstHandle2Isotopes This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Isotope>
      (CLASSNAME, CLASSNAME+"IsotopeGet", This, extract::isotope, index_);
}

// Set, by index \in [0,size)
void
IsotopesIsotopeSet(
   ConstHandle2Isotopes This,
   const size_t index_,
   ConstHandle2ConstIsotope isotope
) {
   detail::setByIndex<CPP,CPPIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeSet", This, extract::isotope, index_, isotope);
}

// Has, by A
int
IsotopesIsotopeHasByA(
   ConstHandle2ConstIsotopes This,
   const Integer32 A
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IsotopeHasByA",
       This, extract::isotope, meta::A, A);
}

// Get, by A, const
Handle2ConstIsotope
IsotopesIsotopeGetByAConst(
   ConstHandle2ConstIsotopes This,
   const Integer32 A
) {
   return detail::getByMetadatum<CPP,Handle2ConstIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeGetByAConst",
       This, extract::isotope, meta::A, A);
}

// Get, by A, non-const
Handle2Isotope
IsotopesIsotopeGetByA(
   ConstHandle2Isotopes This,
   const Integer32 A
) {
   return detail::getByMetadatum<CPP,Handle2Isotope>
      (CLASSNAME, CLASSNAME+"IsotopeGetByA",
       This, extract::isotope, meta::A, A);
}

// Set, by A
void
IsotopesIsotopeSetByA(
   ConstHandle2Isotopes This,
   const Integer32 A,
   ConstHandle2ConstIsotope isotope
) {
   detail::setByMetadatum<CPP,CPPIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeSetByA",
       This, extract::isotope, meta::A, A, isotope);
}

// Has, by symbol
int
IsotopesIsotopeHasBySymbol(
   ConstHandle2ConstIsotopes This,
   const XMLName symbol
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IsotopeHasBySymbol",
       This, extract::isotope, meta::symbol, symbol);
}

// Get, by symbol, const
Handle2ConstIsotope
IsotopesIsotopeGetBySymbolConst(
   ConstHandle2ConstIsotopes This,
   const XMLName symbol
) {
   return detail::getByMetadatum<CPP,Handle2ConstIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeGetBySymbolConst",
       This, extract::isotope, meta::symbol, symbol);
}

// Get, by symbol, non-const
Handle2Isotope
IsotopesIsotopeGetBySymbol(
   ConstHandle2Isotopes This,
   const XMLName symbol
) {
   return detail::getByMetadatum<CPP,Handle2Isotope>
      (CLASSNAME, CLASSNAME+"IsotopeGetBySymbol",
       This, extract::isotope, meta::symbol, symbol);
}

// Set, by symbol
void
IsotopesIsotopeSetBySymbol(
   ConstHandle2Isotopes This,
   const XMLName symbol,
   ConstHandle2ConstIsotope isotope
) {
   detail::setByMetadatum<CPP,CPPIsotope>
      (CLASSNAME, CLASSNAME+"IsotopeSetBySymbol",
       This, extract::isotope, meta::symbol, symbol, isotope);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/pops/Isotopes/src/custom.cpp"
