
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/pops/ConfidenceIntervals.hpp"
#include "ConfidenceIntervals.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ConfidenceIntervalsClass;
using CPP = multigroup::ConfidenceIntervals;

static const std::string CLASSNAME = "ConfidenceIntervals";

namespace extract {
   static auto interval = [](auto &obj) { return &obj.interval; };
}

using CPPInterval = pops::Interval;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstConfidenceIntervals
ConfidenceIntervalsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ConfidenceIntervals
ConfidenceIntervalsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstConfidenceIntervals
ConfidenceIntervalsCreateConst(
   ConstHandle2Interval *const interval, const size_t intervalSize
) {
   ConstHandle2ConfidenceIntervals handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPInterval>{}
   );
   for (size_t IntervalN = 0; IntervalN < intervalSize; ++IntervalN)
      ConfidenceIntervalsIntervalAdd(handle, interval[IntervalN]);
   return handle;
}

// Create, general
Handle2ConfidenceIntervals
ConfidenceIntervalsCreate(
   ConstHandle2Interval *const interval, const size_t intervalSize
) {
   ConstHandle2ConfidenceIntervals handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPInterval>{}
   );
   for (size_t IntervalN = 0; IntervalN < intervalSize; ++IntervalN)
      ConfidenceIntervalsIntervalAdd(handle, interval[IntervalN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ConfidenceIntervalsAssign(ConstHandle2ConfidenceIntervals self, ConstHandle2ConstConfidenceIntervals from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ConfidenceIntervalsDelete(ConstHandle2ConstConfidenceIntervals self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ConfidenceIntervalsRead(ConstHandle2ConfidenceIntervals self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ConfidenceIntervalsWrite(ConstHandle2ConstConfidenceIntervals self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ConfidenceIntervalsPrint(ConstHandle2ConstConfidenceIntervals self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ConfidenceIntervalsPrintXML(ConstHandle2ConstConfidenceIntervals self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ConfidenceIntervalsPrintJSON(ConstHandle2ConstConfidenceIntervals self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: interval
// -----------------------------------------------------------------------------

// Has
int
ConfidenceIntervalsIntervalHas(ConstHandle2ConstConfidenceIntervals self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IntervalHas", self, extract::interval);
}

// Clear
void
ConfidenceIntervalsIntervalClear(ConstHandle2ConfidenceIntervals self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"IntervalClear", self, extract::interval);
}

// Size
size_t
ConfidenceIntervalsIntervalSize(ConstHandle2ConstConfidenceIntervals self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"IntervalSize", self, extract::interval);
}

// Add
void
ConfidenceIntervalsIntervalAdd(ConstHandle2ConfidenceIntervals self, ConstHandle2ConstInterval interval)
{
   detail::addToContainer<CPP,CPPInterval>
      (CLASSNAME, CLASSNAME+"IntervalAdd", self, extract::interval, interval);
}

// Get, by index \in [0,size), const
Handle2ConstInterval
ConfidenceIntervalsIntervalGetConst(ConstHandle2ConstConfidenceIntervals self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstInterval>
      (CLASSNAME, CLASSNAME+"IntervalGetConst", self, extract::interval, index_);
}

// Get, by index \in [0,size), non-const
Handle2Interval
ConfidenceIntervalsIntervalGet(ConstHandle2ConfidenceIntervals self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Interval>
      (CLASSNAME, CLASSNAME+"IntervalGet", self, extract::interval, index_);
}

// Set, by index \in [0,size)
void
ConfidenceIntervalsIntervalSet(
   ConstHandle2ConfidenceIntervals self,
   const size_t index_,
   ConstHandle2ConstInterval interval
) {
   detail::setByIndex<CPP,CPPInterval>
      (CLASSNAME, CLASSNAME+"IntervalSet", self, extract::interval, index_, interval);
}

// Has, by confidence
int
ConfidenceIntervalsIntervalHasByConfidence(
   ConstHandle2ConstConfidenceIntervals self,
   const Float64 confidence
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IntervalHasByConfidence",
       self, extract::interval, meta::confidence, confidence);
}

// Get, by confidence, const
Handle2ConstInterval
ConfidenceIntervalsIntervalGetByConfidenceConst(
   ConstHandle2ConstConfidenceIntervals self,
   const Float64 confidence
) {
   return detail::getByMetadatum<CPP,Handle2ConstInterval>
      (CLASSNAME, CLASSNAME+"IntervalGetByConfidenceConst",
       self, extract::interval, meta::confidence, confidence);
}

// Get, by confidence, non-const
Handle2Interval
ConfidenceIntervalsIntervalGetByConfidence(
   ConstHandle2ConfidenceIntervals self,
   const Float64 confidence
) {
   return detail::getByMetadatum<CPP,Handle2Interval>
      (CLASSNAME, CLASSNAME+"IntervalGetByConfidence",
       self, extract::interval, meta::confidence, confidence);
}

// Set, by confidence
void
ConfidenceIntervalsIntervalSetByConfidence(
   ConstHandle2ConfidenceIntervals self,
   const Float64 confidence,
   ConstHandle2ConstInterval interval
) {
   detail::setByMetadatum<CPP,CPPInterval>
      (CLASSNAME, CLASSNAME+"IntervalSetByConfidence",
       self, extract::interval, meta::confidence, confidence, interval);
}

// Has, by lower
int
ConfidenceIntervalsIntervalHasByLower(
   ConstHandle2ConstConfidenceIntervals self,
   const Float64 lower
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IntervalHasByLower",
       self, extract::interval, meta::lower, lower);
}

// Get, by lower, const
Handle2ConstInterval
ConfidenceIntervalsIntervalGetByLowerConst(
   ConstHandle2ConstConfidenceIntervals self,
   const Float64 lower
) {
   return detail::getByMetadatum<CPP,Handle2ConstInterval>
      (CLASSNAME, CLASSNAME+"IntervalGetByLowerConst",
       self, extract::interval, meta::lower, lower);
}

// Get, by lower, non-const
Handle2Interval
ConfidenceIntervalsIntervalGetByLower(
   ConstHandle2ConfidenceIntervals self,
   const Float64 lower
) {
   return detail::getByMetadatum<CPP,Handle2Interval>
      (CLASSNAME, CLASSNAME+"IntervalGetByLower",
       self, extract::interval, meta::lower, lower);
}

// Set, by lower
void
ConfidenceIntervalsIntervalSetByLower(
   ConstHandle2ConfidenceIntervals self,
   const Float64 lower,
   ConstHandle2ConstInterval interval
) {
   detail::setByMetadatum<CPP,CPPInterval>
      (CLASSNAME, CLASSNAME+"IntervalSetByLower",
       self, extract::interval, meta::lower, lower, interval);
}

// Has, by upper
int
ConfidenceIntervalsIntervalHasByUpper(
   ConstHandle2ConstConfidenceIntervals self,
   const Float64 upper
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"IntervalHasByUpper",
       self, extract::interval, meta::upper, upper);
}

// Get, by upper, const
Handle2ConstInterval
ConfidenceIntervalsIntervalGetByUpperConst(
   ConstHandle2ConstConfidenceIntervals self,
   const Float64 upper
) {
   return detail::getByMetadatum<CPP,Handle2ConstInterval>
      (CLASSNAME, CLASSNAME+"IntervalGetByUpperConst",
       self, extract::interval, meta::upper, upper);
}

// Get, by upper, non-const
Handle2Interval
ConfidenceIntervalsIntervalGetByUpper(
   ConstHandle2ConfidenceIntervals self,
   const Float64 upper
) {
   return detail::getByMetadatum<CPP,Handle2Interval>
      (CLASSNAME, CLASSNAME+"IntervalGetByUpper",
       self, extract::interval, meta::upper, upper);
}

// Set, by upper
void
ConfidenceIntervalsIntervalSetByUpper(
   ConstHandle2ConfidenceIntervals self,
   const Float64 upper,
   ConstHandle2ConstInterval interval
) {
   detail::setByMetadatum<CPP,CPPInterval>
      (CLASSNAME, CLASSNAME+"IntervalSetByUpper",
       self, extract::interval, meta::upper, upper, interval);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/pops/ConfidenceIntervals/src/custom.cpp"
