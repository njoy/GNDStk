
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Charge is the basic handle type in this file. Example:
//    // Create a default Charge object:
//    Charge handle = ChargeDefault();
// Functions involving Charge are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_POPS_CHARGE
#define C_INTERFACE_TEST_V2_0_POPS_CHARGE

#include "GNDStk.h"
#include "v2.0/documentation/Documentation.h"
#include "v2.0/pops/Uncertainty.h"
#include "v2.0/containers/Integer.h"
#include "v2.0/containers/Fraction.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ChargeClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Charge
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ChargeClass *Charge;

// --- Const-aware handles.
typedef const struct ChargeClass *const ConstHandle2ConstCharge;
typedef       struct ChargeClass *const ConstHandle2Charge;
typedef const struct ChargeClass *      Handle2ConstCharge;
typedef       struct ChargeClass *      Handle2Charge;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstCharge
ChargeDefaultConst();

// +++ Create, default
extern_c Handle2Charge
ChargeDefault();

// --- Create, general, const
extern_c Handle2ConstCharge
ChargeCreateConst(
   const XMLName label,
   const XMLName unit,
   const XMLName value,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstUncertainty uncertainty,
);

// +++ Create, general
extern_c Handle2Charge
ChargeCreate(
   const XMLName label,
   const XMLName unit,
   const XMLName value,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstUncertainty uncertainty,
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ChargeAssign(ConstHandle2Charge This, ConstHandle2ConstCharge from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ChargeDelete(ConstHandle2ConstCharge This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ChargeRead(ConstHandle2Charge This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ChargeWrite(ConstHandle2ConstCharge This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ChargePrint(ConstHandle2ConstCharge This);

// +++ Print to standard output, as XML
extern_c int
ChargePrintXML(ConstHandle2ConstCharge This);

// +++ Print to standard output, as JSON
extern_c int
ChargePrintJSON(ConstHandle2ConstCharge This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChargeLabelHas(ConstHandle2ConstCharge This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ChargeLabelGet(ConstHandle2ConstCharge This);

// +++ Set
extern_c void
ChargeLabelSet(ConstHandle2Charge This, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChargeUnitHas(ConstHandle2ConstCharge This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ChargeUnitGet(ConstHandle2ConstCharge This);

// +++ Set
extern_c void
ChargeUnitSet(ConstHandle2Charge This, const XMLName unit);


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChargeValueHas(ConstHandle2ConstCharge This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ChargeValueGet(ConstHandle2ConstCharge This);

// +++ Set
extern_c void
ChargeValueSet(ConstHandle2Charge This, const XMLName value);


// -----------------------------------------------------------------------------
// Child: documentation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChargeDocumentationHas(ConstHandle2ConstCharge This);

// --- Get, const
extern_c Handle2ConstDocumentation
ChargeDocumentationGetConst(ConstHandle2ConstCharge This);

// +++ Get, non-const
extern_c Handle2Documentation
ChargeDocumentationGet(ConstHandle2Charge This);

// +++ Set
extern_c void
ChargeDocumentationSet(ConstHandle2Charge This, ConstHandle2ConstDocumentation documentation);


// -----------------------------------------------------------------------------
// Child: uncertainty
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChargeUncertaintyHas(ConstHandle2ConstCharge This);

// --- Get, const
extern_c Handle2ConstUncertainty
ChargeUncertaintyGetConst(ConstHandle2ConstCharge This);

// +++ Get, non-const
extern_c Handle2Uncertainty
ChargeUncertaintyGet(ConstHandle2Charge This);

// +++ Set
extern_c void
ChargeUncertaintySet(ConstHandle2Charge This, ConstHandle2ConstUncertainty uncertainty);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
