
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/tsl/ScatteringAtoms.hpp"
#include "ScatteringAtoms.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ScatteringAtomsClass;
using CPP = multigroup::ScatteringAtoms;

static const std::string CLASSNAME = "ScatteringAtoms";

namespace extract {
   static auto scatteringAtom = [](auto &obj) { return &obj.scatteringAtom; };
}

using CPPScatteringAtom = tsl::ScatteringAtom;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstScatteringAtoms
ScatteringAtomsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ScatteringAtoms
ScatteringAtomsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstScatteringAtoms
ScatteringAtomsCreateConst(
   ConstHandle2ScatteringAtom *const scatteringAtom, const size_t scatteringAtomSize
) {
   ConstHandle2ScatteringAtoms handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPScatteringAtom>{}
   );
   for (size_t ScatteringAtomN = 0; ScatteringAtomN < scatteringAtomSize; ++ScatteringAtomN)
      ScatteringAtomsScatteringAtomAdd(handle, scatteringAtom[ScatteringAtomN]);
   return handle;
}

// Create, general
Handle2ScatteringAtoms
ScatteringAtomsCreate(
   ConstHandle2ScatteringAtom *const scatteringAtom, const size_t scatteringAtomSize
) {
   ConstHandle2ScatteringAtoms handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPScatteringAtom>{}
   );
   for (size_t ScatteringAtomN = 0; ScatteringAtomN < scatteringAtomSize; ++ScatteringAtomN)
      ScatteringAtomsScatteringAtomAdd(handle, scatteringAtom[ScatteringAtomN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ScatteringAtomsAssign(ConstHandle2ScatteringAtoms This, ConstHandle2ConstScatteringAtoms from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ScatteringAtomsDelete(ConstHandle2ConstScatteringAtoms This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ScatteringAtomsRead(ConstHandle2ScatteringAtoms This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ScatteringAtomsWrite(ConstHandle2ConstScatteringAtoms This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ScatteringAtomsPrint(ConstHandle2ConstScatteringAtoms This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ScatteringAtomsPrintXML(ConstHandle2ConstScatteringAtoms This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ScatteringAtomsPrintJSON(ConstHandle2ConstScatteringAtoms This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: scatteringAtom
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomsScatteringAtomHas(ConstHandle2ConstScatteringAtoms This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomHas", This, extract::scatteringAtom);
}

// Clear
void
ScatteringAtomsScatteringAtomClear(ConstHandle2ScatteringAtoms This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomClear", This, extract::scatteringAtom);
}

// Size
size_t
ScatteringAtomsScatteringAtomSize(ConstHandle2ConstScatteringAtoms This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomSize", This, extract::scatteringAtom);
}

// Add
void
ScatteringAtomsScatteringAtomAdd(ConstHandle2ScatteringAtoms This, ConstHandle2ConstScatteringAtom scatteringAtom)
{
   detail::addToContainer<CPP,CPPScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomAdd", This, extract::scatteringAtom, scatteringAtom);
}

// Get, by index \in [0,size), const
Handle2ConstScatteringAtom
ScatteringAtomsScatteringAtomGetConst(ConstHandle2ConstScatteringAtoms This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetConst", This, extract::scatteringAtom, index_);
}

// Get, by index \in [0,size), non-const
Handle2ScatteringAtom
ScatteringAtomsScatteringAtomGet(ConstHandle2ScatteringAtoms This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGet", This, extract::scatteringAtom, index_);
}

// Set, by index \in [0,size)
void
ScatteringAtomsScatteringAtomSet(
   ConstHandle2ScatteringAtoms This,
   const size_t index_,
   ConstHandle2ConstScatteringAtom scatteringAtom
) {
   detail::setByIndex<CPP,CPPScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomSet", This, extract::scatteringAtom, index_, scatteringAtom);
}

// Has, by pid
int
ScatteringAtomsScatteringAtomHasByPid(
   ConstHandle2ConstScatteringAtoms This,
   const XMLName pid
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomHasByPid",
       This, extract::scatteringAtom, meta::pid, pid);
}

// Get, by pid, const
Handle2ConstScatteringAtom
ScatteringAtomsScatteringAtomGetByPidConst(
   ConstHandle2ConstScatteringAtoms This,
   const XMLName pid
) {
   return detail::getByMetadatum<CPP,Handle2ConstScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetByPidConst",
       This, extract::scatteringAtom, meta::pid, pid);
}

// Get, by pid, non-const
Handle2ScatteringAtom
ScatteringAtomsScatteringAtomGetByPid(
   ConstHandle2ScatteringAtoms This,
   const XMLName pid
) {
   return detail::getByMetadatum<CPP,Handle2ScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetByPid",
       This, extract::scatteringAtom, meta::pid, pid);
}

// Set, by pid
void
ScatteringAtomsScatteringAtomSetByPid(
   ConstHandle2ScatteringAtoms This,
   const XMLName pid,
   ConstHandle2ConstScatteringAtom scatteringAtom
) {
   detail::setByMetadatum<CPP,CPPScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomSetByPid",
       This, extract::scatteringAtom, meta::pid, pid, scatteringAtom);
}

// Has, by primaryScatterer
int
ScatteringAtomsScatteringAtomHasByPrimaryScatterer(
   ConstHandle2ConstScatteringAtoms This,
   const bool primaryScatterer
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomHasByPrimaryScatterer",
       This, extract::scatteringAtom, meta::primaryScatterer, primaryScatterer);
}

// Get, by primaryScatterer, const
Handle2ConstScatteringAtom
ScatteringAtomsScatteringAtomGetByPrimaryScattererConst(
   ConstHandle2ConstScatteringAtoms This,
   const bool primaryScatterer
) {
   return detail::getByMetadatum<CPP,Handle2ConstScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetByPrimaryScattererConst",
       This, extract::scatteringAtom, meta::primaryScatterer, primaryScatterer);
}

// Get, by primaryScatterer, non-const
Handle2ScatteringAtom
ScatteringAtomsScatteringAtomGetByPrimaryScatterer(
   ConstHandle2ScatteringAtoms This,
   const bool primaryScatterer
) {
   return detail::getByMetadatum<CPP,Handle2ScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetByPrimaryScatterer",
       This, extract::scatteringAtom, meta::primaryScatterer, primaryScatterer);
}

// Set, by primaryScatterer
void
ScatteringAtomsScatteringAtomSetByPrimaryScatterer(
   ConstHandle2ScatteringAtoms This,
   const bool primaryScatterer,
   ConstHandle2ConstScatteringAtom scatteringAtom
) {
   detail::setByMetadatum<CPP,CPPScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomSetByPrimaryScatterer",
       This, extract::scatteringAtom, meta::primaryScatterer, primaryScatterer, scatteringAtom);
}

// Has, by numberPerMolecule
int
ScatteringAtomsScatteringAtomHasByNumberPerMolecule(
   ConstHandle2ConstScatteringAtoms This,
   const Integer32 numberPerMolecule
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomHasByNumberPerMolecule",
       This, extract::scatteringAtom, meta::numberPerMolecule, numberPerMolecule);
}

// Get, by numberPerMolecule, const
Handle2ConstScatteringAtom
ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst(
   ConstHandle2ConstScatteringAtoms This,
   const Integer32 numberPerMolecule
) {
   return detail::getByMetadatum<CPP,Handle2ConstScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetByNumberPerMoleculeConst",
       This, extract::scatteringAtom, meta::numberPerMolecule, numberPerMolecule);
}

// Get, by numberPerMolecule, non-const
Handle2ScatteringAtom
ScatteringAtomsScatteringAtomGetByNumberPerMolecule(
   ConstHandle2ScatteringAtoms This,
   const Integer32 numberPerMolecule
) {
   return detail::getByMetadatum<CPP,Handle2ScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomGetByNumberPerMolecule",
       This, extract::scatteringAtom, meta::numberPerMolecule, numberPerMolecule);
}

// Set, by numberPerMolecule
void
ScatteringAtomsScatteringAtomSetByNumberPerMolecule(
   ConstHandle2ScatteringAtoms This,
   const Integer32 numberPerMolecule,
   ConstHandle2ConstScatteringAtom scatteringAtom
) {
   detail::setByMetadatum<CPP,CPPScatteringAtom>
      (CLASSNAME, CLASSNAME+"ScatteringAtomSetByNumberPerMolecule",
       This, extract::scatteringAtom, meta::numberPerMolecule, numberPerMolecule, scatteringAtom);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/ScatteringAtoms/src/custom.cpp"
