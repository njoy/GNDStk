
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/tsl/ThermalNeutronScatteringLaw_incoherentInelastic.hpp"
#include "ThermalNeutronScatteringLaw_incoherentInelastic.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ThermalNeutronScatteringLaw_incoherentInelasticClass;
using CPP = multigroup::ThermalNeutronScatteringLaw_incoherentInelastic;

static const std::string CLASSNAME = "ThermalNeutronScatteringLaw_incoherentInelastic";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto pid = [](auto &obj) { return &obj.pid; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto calculatedAtThermal = [](auto &obj) { return &obj.calculatedAtThermal; };
   static auto incoherentApproximation = [](auto &obj) { return &obj.incoherentApproximation; };
   static auto primaryScatterer = [](auto &obj) { return &obj.primaryScatterer; };
   static auto scatteringAtoms = [](auto &obj) { return &obj.scatteringAtoms; };
}

using CPPScatteringAtoms = tsl::ScatteringAtoms;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticCreateConst(
   const XMLName label,
   const XMLName pid,
   const enums::Frame productFrame,
   const bool calculatedAtThermal,
   const bool incoherentApproximation,
   const XMLName primaryScatterer,
   ConstHandle2ConstScatteringAtoms scatteringAtoms
) {
   ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      pid,
      productFrame,
      calculatedAtThermal,
      incoherentApproximation,
      primaryScatterer,
      detail::tocpp<CPPScatteringAtoms>(scatteringAtoms)
   );
   return handle;
}

// Create, general
Handle2ThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticCreate(
   const XMLName label,
   const XMLName pid,
   const enums::Frame productFrame,
   const bool calculatedAtThermal,
   const bool incoherentApproximation,
   const XMLName primaryScatterer,
   ConstHandle2ConstScatteringAtoms scatteringAtoms
) {
   ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      pid,
      productFrame,
      calculatedAtThermal,
      incoherentApproximation,
      primaryScatterer,
      detail::tocpp<CPPScatteringAtoms>(scatteringAtoms)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ThermalNeutronScatteringLaw_incoherentInelasticAssign(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ThermalNeutronScatteringLaw_incoherentInelasticDelete(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ThermalNeutronScatteringLaw_incoherentInelasticRead(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ThermalNeutronScatteringLaw_incoherentInelasticWrite(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ThermalNeutronScatteringLaw_incoherentInelasticPrint(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ThermalNeutronScatteringLaw_incoherentInelasticPrintXML(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ThermalNeutronScatteringLaw_incoherentInelasticPrintJSON(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticLabelHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
ThermalNeutronScatteringLaw_incoherentInelasticLabelGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticLabelSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticPidHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PidHas", self, extract::pid);
}

// Get
// Returns by value
XMLName
ThermalNeutronScatteringLaw_incoherentInelasticPidGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PidGet", self, extract::pid);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticPidSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const XMLName pid)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PidSet", self, extract::pid, pid);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticProductFrameHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", self, extract::productFrame);
}

// Get
// Returns by value
enums::Frame
ThermalNeutronScatteringLaw_incoherentInelasticProductFrameGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", self, extract::productFrame);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticProductFrameSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const enums::Frame productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", self, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Metadatum: calculatedAtThermal
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticCalculatedAtThermalHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CalculatedAtThermalHas", self, extract::calculatedAtThermal);
}

// Get
// Returns by value
bool
ThermalNeutronScatteringLaw_incoherentInelasticCalculatedAtThermalGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CalculatedAtThermalGet", self, extract::calculatedAtThermal);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticCalculatedAtThermalSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const bool calculatedAtThermal)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CalculatedAtThermalSet", self, extract::calculatedAtThermal, calculatedAtThermal);
}


// -----------------------------------------------------------------------------
// Metadatum: incoherentApproximation
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticIncoherentApproximationHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IncoherentApproximationHas", self, extract::incoherentApproximation);
}

// Get
// Returns by value
bool
ThermalNeutronScatteringLaw_incoherentInelasticIncoherentApproximationGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"IncoherentApproximationGet", self, extract::incoherentApproximation);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticIncoherentApproximationSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const bool incoherentApproximation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"IncoherentApproximationSet", self, extract::incoherentApproximation, incoherentApproximation);
}


// -----------------------------------------------------------------------------
// Metadatum: primaryScatterer
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticPrimaryScattererHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryScattererHas", self, extract::primaryScatterer);
}

// Get
// Returns by value
XMLName
ThermalNeutronScatteringLaw_incoherentInelasticPrimaryScattererGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryScattererGet", self, extract::primaryScatterer);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticPrimaryScattererSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, const XMLName primaryScatterer)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryScattererSet", self, extract::primaryScatterer, primaryScatterer);
}


// -----------------------------------------------------------------------------
// Child: scatteringAtoms
// -----------------------------------------------------------------------------

// Has
int
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringAtomsHas", self, extract::scatteringAtoms);
}

// Get, const
Handle2ConstScatteringAtoms
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsGetConst(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP,Handle2ConstScatteringAtoms>
      (CLASSNAME, CLASSNAME+"ScatteringAtomsGetConst", self, extract::scatteringAtoms);
}

// Get, non-const
Handle2ScatteringAtoms
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsGet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self)
{
   return detail::getField<CPP,Handle2ScatteringAtoms>
      (CLASSNAME, CLASSNAME+"ScatteringAtomsGet", self, extract::scatteringAtoms);
}

// Set
void
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic self, ConstHandle2ConstScatteringAtoms scatteringAtoms)
{
   detail::setField<CPP,CPPScatteringAtoms>
      (CLASSNAME, CLASSNAME+"ScatteringAtomsSet", self, extract::scatteringAtoms, scatteringAtoms);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/ThermalNeutronScatteringLaw_incoherentInelastic/src/custom.cpp"
