
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// ThermalNeutronScatteringLaw_incoherentInelastic is the basic handle type in this file. Example:
//    // Create a default ThermalNeutronScatteringLaw_incoherentInelastic object:
//    ThermalNeutronScatteringLaw_incoherentInelastic handle = ThermalNeutronScatteringLaw_incoherentInelasticDefault();
// Functions involving ThermalNeutronScatteringLaw_incoherentInelastic are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTINELASTIC
#define C_INTERFACE_TEST_V2_0_TSL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTINELASTIC

#include "GNDStk.h"
#include "v2.0/tsl/ScatteringAtoms.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ThermalNeutronScatteringLaw_incoherentInelasticClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ThermalNeutronScatteringLaw_incoherentInelastic
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ThermalNeutronScatteringLaw_incoherentInelasticClass *ThermalNeutronScatteringLaw_incoherentInelastic;

// --- Const-aware handles.
typedef const struct ThermalNeutronScatteringLaw_incoherentInelasticClass *const ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic;
typedef       struct ThermalNeutronScatteringLaw_incoherentInelasticClass *const ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic;
typedef const struct ThermalNeutronScatteringLaw_incoherentInelasticClass *      Handle2ConstThermalNeutronScatteringLaw_incoherentInelastic;
typedef       struct ThermalNeutronScatteringLaw_incoherentInelasticClass *      Handle2ThermalNeutronScatteringLaw_incoherentInelastic;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticDefaultConst();

// +++ Create, default
extern_c Handle2ThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticDefault();

// --- Create, general, const
extern_c Handle2ConstThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticCreateConst(
   const XMLName label,
   const XMLName pid,
   const enums::Frame productFrame,
   const bool calculatedAtThermal,
   const bool incoherentApproximation,
   const XMLName primaryScatterer,
   ConstHandle2ConstScatteringAtoms scatteringAtoms
);

// +++ Create, general
extern_c Handle2ThermalNeutronScatteringLaw_incoherentInelastic
ThermalNeutronScatteringLaw_incoherentInelasticCreate(
   const XMLName label,
   const XMLName pid,
   const enums::Frame productFrame,
   const bool calculatedAtThermal,
   const bool incoherentApproximation,
   const XMLName primaryScatterer,
   ConstHandle2ConstScatteringAtoms scatteringAtoms
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticAssign(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticDelete(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticRead(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticWrite(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticPrint(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Print to standard output, as XML
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticPrintXML(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Print to standard output, as JSON
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticPrintJSON(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticLabelHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ThermalNeutronScatteringLaw_incoherentInelasticLabelGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticLabelSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticPidHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ThermalNeutronScatteringLaw_incoherentInelasticPidGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticPidSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const XMLName pid);


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticProductFrameHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get
// +++ Returns by value
extern_c enums::Frame
ThermalNeutronScatteringLaw_incoherentInelasticProductFrameGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticProductFrameSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const enums::Frame productFrame);


// -----------------------------------------------------------------------------
// Metadatum: calculatedAtThermal
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticCalculatedAtThermalHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get
// +++ Returns by value
extern_c bool
ThermalNeutronScatteringLaw_incoherentInelasticCalculatedAtThermalGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticCalculatedAtThermalSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const bool calculatedAtThermal);


// -----------------------------------------------------------------------------
// Metadatum: incoherentApproximation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticIncoherentApproximationHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get
// +++ Returns by value
extern_c bool
ThermalNeutronScatteringLaw_incoherentInelasticIncoherentApproximationGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticIncoherentApproximationSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const bool incoherentApproximation);


// -----------------------------------------------------------------------------
// Metadatum: primaryScatterer
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticPrimaryScattererHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ThermalNeutronScatteringLaw_incoherentInelasticPrimaryScattererGet(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticPrimaryScattererSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, const XMLName primaryScatterer);


// -----------------------------------------------------------------------------
// Child: scatteringAtoms
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsHas(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// --- Get, const
extern_c Handle2ConstScatteringAtoms
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsGetConst(ConstHandle2ConstThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Get, non-const
extern_c Handle2ScatteringAtoms
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsGet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This);

// +++ Set
extern_c void
ThermalNeutronScatteringLaw_incoherentInelasticScatteringAtomsSet(ConstHandle2ThermalNeutronScatteringLaw_incoherentInelastic This, ConstHandle2ConstScatteringAtoms scatteringAtoms);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/ThermalNeutronScatteringLaw_incoherentInelastic/src/custom.h"

#undef extern_c
#endif
