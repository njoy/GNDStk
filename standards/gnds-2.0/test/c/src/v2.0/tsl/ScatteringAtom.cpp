
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/tsl/ScatteringAtom.hpp"
#include "ScatteringAtom.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ScatteringAtomClass;
using CPP = multigroup::ScatteringAtom;

static const std::string CLASSNAME = "ScatteringAtom";

namespace extract {
   static auto pid = [](auto &obj) { return &obj.pid; };
   static auto primaryScatterer = [](auto &obj) { return &obj.primaryScatterer; };
   static auto numberPerMolecule = [](auto &obj) { return &obj.numberPerMolecule; };
   static auto mass = [](auto &obj) { return &obj.mass; };
   static auto e_critical = [](auto &obj) { return &obj.e_critical; };
   static auto e_max = [](auto &obj) { return &obj.e_max; };
   static auto boundAtomCrossSection = [](auto &obj) { return &obj.boundAtomCrossSection; };
   static auto coherentAtomCrossSection = [](auto &obj) { return &obj.coherentAtomCrossSection; };
   static auto distinctScatteringKernel = [](auto &obj) { return &obj.distinctScatteringKernel; };
   static auto selfScatteringKernel = [](auto &obj) { return &obj.selfScatteringKernel; };
   static auto T_effective = [](auto &obj) { return &obj.T_effective; };
}

using CPPMass = tsl::Mass;
using CPPE_critical = tsl::E_critical;
using CPPE_max = tsl::E_max;
using CPPBoundAtomCrossSection = tsl::BoundAtomCrossSection;
using CPPCoherentAtomCrossSection = tsl::CoherentAtomCrossSection;
using CPPDistinctScatteringKernel = tsl::DistinctScatteringKernel;
using CPPSelfScatteringKernel = tsl::SelfScatteringKernel;
using CPPT_effective = tsl::T_effective;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstScatteringAtom
ScatteringAtomDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ScatteringAtom
ScatteringAtomDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstScatteringAtom
ScatteringAtomCreateConst(
   const XMLName pid,
   const bool primaryScatterer,
   const Integer32 numberPerMolecule,
   ConstHandle2ConstMass mass,
   ConstHandle2ConstE_critical e_critical,
   ConstHandle2ConstE_max e_max,
   ConstHandle2ConstBoundAtomCrossSection boundAtomCrossSection,
   ConstHandle2ConstCoherentAtomCrossSection coherentAtomCrossSection,
   ConstHandle2ConstDistinctScatteringKernel distinctScatteringKernel,
   ConstHandle2ConstSelfScatteringKernel selfScatteringKernel,
   ConstHandle2ConstT_effective T_effective
) {
   ConstHandle2ScatteringAtom handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      pid,
      primaryScatterer,
      numberPerMolecule,
      detail::tocpp<CPPMass>(mass),
      detail::tocpp<CPPE_critical>(e_critical),
      detail::tocpp<CPPE_max>(e_max),
      detail::tocpp<CPPBoundAtomCrossSection>(boundAtomCrossSection),
      detail::tocpp<CPPCoherentAtomCrossSection>(coherentAtomCrossSection),
      detail::tocpp<CPPDistinctScatteringKernel>(distinctScatteringKernel),
      detail::tocpp<CPPSelfScatteringKernel>(selfScatteringKernel),
      detail::tocpp<CPPT_effective>(T_effective)
   );
   return handle;
}

// Create, general
Handle2ScatteringAtom
ScatteringAtomCreate(
   const XMLName pid,
   const bool primaryScatterer,
   const Integer32 numberPerMolecule,
   ConstHandle2ConstMass mass,
   ConstHandle2ConstE_critical e_critical,
   ConstHandle2ConstE_max e_max,
   ConstHandle2ConstBoundAtomCrossSection boundAtomCrossSection,
   ConstHandle2ConstCoherentAtomCrossSection coherentAtomCrossSection,
   ConstHandle2ConstDistinctScatteringKernel distinctScatteringKernel,
   ConstHandle2ConstSelfScatteringKernel selfScatteringKernel,
   ConstHandle2ConstT_effective T_effective
) {
   ConstHandle2ScatteringAtom handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      pid,
      primaryScatterer,
      numberPerMolecule,
      detail::tocpp<CPPMass>(mass),
      detail::tocpp<CPPE_critical>(e_critical),
      detail::tocpp<CPPE_max>(e_max),
      detail::tocpp<CPPBoundAtomCrossSection>(boundAtomCrossSection),
      detail::tocpp<CPPCoherentAtomCrossSection>(coherentAtomCrossSection),
      detail::tocpp<CPPDistinctScatteringKernel>(distinctScatteringKernel),
      detail::tocpp<CPPSelfScatteringKernel>(selfScatteringKernel),
      detail::tocpp<CPPT_effective>(T_effective)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ScatteringAtomAssign(ConstHandle2ScatteringAtom This, ConstHandle2ConstScatteringAtom from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ScatteringAtomDelete(ConstHandle2ConstScatteringAtom This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ScatteringAtomRead(ConstHandle2ScatteringAtom This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ScatteringAtomWrite(ConstHandle2ConstScatteringAtom This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ScatteringAtomPrint(ConstHandle2ConstScatteringAtom This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ScatteringAtomPrintXML(ConstHandle2ConstScatteringAtom This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ScatteringAtomPrintJSON(ConstHandle2ConstScatteringAtom This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomPidHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PidHas", This, extract::pid);
}

// Get
// Returns by value
XMLName
ScatteringAtomPidGet(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PidGet", This, extract::pid);
}

// Set
void
ScatteringAtomPidSet(ConstHandle2ScatteringAtom This, const XMLName pid)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PidSet", This, extract::pid, pid);
}


// -----------------------------------------------------------------------------
// Metadatum: primaryScatterer
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomPrimaryScattererHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryScattererHas", This, extract::primaryScatterer);
}

// Get
// Returns by value
bool
ScatteringAtomPrimaryScattererGet(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryScattererGet", This, extract::primaryScatterer);
}

// Set
void
ScatteringAtomPrimaryScattererSet(ConstHandle2ScatteringAtom This, const bool primaryScatterer)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PrimaryScattererSet", This, extract::primaryScatterer, primaryScatterer);
}


// -----------------------------------------------------------------------------
// Metadatum: numberPerMolecule
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomNumberPerMoleculeHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NumberPerMoleculeHas", This, extract::numberPerMolecule);
}

// Get
// Returns by value
Integer32
ScatteringAtomNumberPerMoleculeGet(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NumberPerMoleculeGet", This, extract::numberPerMolecule);
}

// Set
void
ScatteringAtomNumberPerMoleculeSet(ConstHandle2ScatteringAtom This, const Integer32 numberPerMolecule)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NumberPerMoleculeSet", This, extract::numberPerMolecule, numberPerMolecule);
}


// -----------------------------------------------------------------------------
// Child: mass
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomMassHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MassHas", This, extract::mass);
}

// Get, const
Handle2ConstMass
ScatteringAtomMassGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstMass>
      (CLASSNAME, CLASSNAME+"MassGetConst", This, extract::mass);
}

// Get, non-const
Handle2Mass
ScatteringAtomMassGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2Mass>
      (CLASSNAME, CLASSNAME+"MassGet", This, extract::mass);
}

// Set
void
ScatteringAtomMassSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstMass mass)
{
   detail::setField<CPP,CPPMass>
      (CLASSNAME, CLASSNAME+"MassSet", This, extract::mass, mass);
}


// -----------------------------------------------------------------------------
// Child: e_critical
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomE_criticalHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"E_criticalHas", This, extract::e_critical);
}

// Get, const
Handle2ConstE_critical
ScatteringAtomE_criticalGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstE_critical>
      (CLASSNAME, CLASSNAME+"E_criticalGetConst", This, extract::e_critical);
}

// Get, non-const
Handle2E_critical
ScatteringAtomE_criticalGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2E_critical>
      (CLASSNAME, CLASSNAME+"E_criticalGet", This, extract::e_critical);
}

// Set
void
ScatteringAtomE_criticalSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstE_critical e_critical)
{
   detail::setField<CPP,CPPE_critical>
      (CLASSNAME, CLASSNAME+"E_criticalSet", This, extract::e_critical, e_critical);
}


// -----------------------------------------------------------------------------
// Child: e_max
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomE_maxHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"E_maxHas", This, extract::e_max);
}

// Get, const
Handle2ConstE_max
ScatteringAtomE_maxGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstE_max>
      (CLASSNAME, CLASSNAME+"E_maxGetConst", This, extract::e_max);
}

// Get, non-const
Handle2E_max
ScatteringAtomE_maxGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2E_max>
      (CLASSNAME, CLASSNAME+"E_maxGet", This, extract::e_max);
}

// Set
void
ScatteringAtomE_maxSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstE_max e_max)
{
   detail::setField<CPP,CPPE_max>
      (CLASSNAME, CLASSNAME+"E_maxSet", This, extract::e_max, e_max);
}


// -----------------------------------------------------------------------------
// Child: boundAtomCrossSection
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomBoundAtomCrossSectionHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionHas", This, extract::boundAtomCrossSection);
}

// Get, const
Handle2ConstBoundAtomCrossSection
ScatteringAtomBoundAtomCrossSectionGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstBoundAtomCrossSection>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionGetConst", This, extract::boundAtomCrossSection);
}

// Get, non-const
Handle2BoundAtomCrossSection
ScatteringAtomBoundAtomCrossSectionGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2BoundAtomCrossSection>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionGet", This, extract::boundAtomCrossSection);
}

// Set
void
ScatteringAtomBoundAtomCrossSectionSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstBoundAtomCrossSection boundAtomCrossSection)
{
   detail::setField<CPP,CPPBoundAtomCrossSection>
      (CLASSNAME, CLASSNAME+"BoundAtomCrossSectionSet", This, extract::boundAtomCrossSection, boundAtomCrossSection);
}


// -----------------------------------------------------------------------------
// Child: coherentAtomCrossSection
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomCoherentAtomCrossSectionHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CoherentAtomCrossSectionHas", This, extract::coherentAtomCrossSection);
}

// Get, const
Handle2ConstCoherentAtomCrossSection
ScatteringAtomCoherentAtomCrossSectionGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstCoherentAtomCrossSection>
      (CLASSNAME, CLASSNAME+"CoherentAtomCrossSectionGetConst", This, extract::coherentAtomCrossSection);
}

// Get, non-const
Handle2CoherentAtomCrossSection
ScatteringAtomCoherentAtomCrossSectionGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2CoherentAtomCrossSection>
      (CLASSNAME, CLASSNAME+"CoherentAtomCrossSectionGet", This, extract::coherentAtomCrossSection);
}

// Set
void
ScatteringAtomCoherentAtomCrossSectionSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstCoherentAtomCrossSection coherentAtomCrossSection)
{
   detail::setField<CPP,CPPCoherentAtomCrossSection>
      (CLASSNAME, CLASSNAME+"CoherentAtomCrossSectionSet", This, extract::coherentAtomCrossSection, coherentAtomCrossSection);
}


// -----------------------------------------------------------------------------
// Child: distinctScatteringKernel
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomDistinctScatteringKernelHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DistinctScatteringKernelHas", This, extract::distinctScatteringKernel);
}

// Get, const
Handle2ConstDistinctScatteringKernel
ScatteringAtomDistinctScatteringKernelGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstDistinctScatteringKernel>
      (CLASSNAME, CLASSNAME+"DistinctScatteringKernelGetConst", This, extract::distinctScatteringKernel);
}

// Get, non-const
Handle2DistinctScatteringKernel
ScatteringAtomDistinctScatteringKernelGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2DistinctScatteringKernel>
      (CLASSNAME, CLASSNAME+"DistinctScatteringKernelGet", This, extract::distinctScatteringKernel);
}

// Set
void
ScatteringAtomDistinctScatteringKernelSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstDistinctScatteringKernel distinctScatteringKernel)
{
   detail::setField<CPP,CPPDistinctScatteringKernel>
      (CLASSNAME, CLASSNAME+"DistinctScatteringKernelSet", This, extract::distinctScatteringKernel, distinctScatteringKernel);
}


// -----------------------------------------------------------------------------
// Child: selfScatteringKernel
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomSelfScatteringKernelHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SelfScatteringKernelHas", This, extract::selfScatteringKernel);
}

// Get, const
Handle2ConstSelfScatteringKernel
ScatteringAtomSelfScatteringKernelGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstSelfScatteringKernel>
      (CLASSNAME, CLASSNAME+"SelfScatteringKernelGetConst", This, extract::selfScatteringKernel);
}

// Get, non-const
Handle2SelfScatteringKernel
ScatteringAtomSelfScatteringKernelGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2SelfScatteringKernel>
      (CLASSNAME, CLASSNAME+"SelfScatteringKernelGet", This, extract::selfScatteringKernel);
}

// Set
void
ScatteringAtomSelfScatteringKernelSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstSelfScatteringKernel selfScatteringKernel)
{
   detail::setField<CPP,CPPSelfScatteringKernel>
      (CLASSNAME, CLASSNAME+"SelfScatteringKernelSet", This, extract::selfScatteringKernel, selfScatteringKernel);
}


// -----------------------------------------------------------------------------
// Child: T_effective
// -----------------------------------------------------------------------------

// Has
int
ScatteringAtomT_effectiveHas(ConstHandle2ConstScatteringAtom This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"T_effectiveHas", This, extract::T_effective);
}

// Get, const
Handle2ConstT_effective
ScatteringAtomT_effectiveGetConst(ConstHandle2ConstScatteringAtom This)
{
   return detail::getField<CPP,Handle2ConstT_effective>
      (CLASSNAME, CLASSNAME+"T_effectiveGetConst", This, extract::T_effective);
}

// Get, non-const
Handle2T_effective
ScatteringAtomT_effectiveGet(ConstHandle2ScatteringAtom This)
{
   return detail::getField<CPP,Handle2T_effective>
      (CLASSNAME, CLASSNAME+"T_effectiveGet", This, extract::T_effective);
}

// Set
void
ScatteringAtomT_effectiveSet(ConstHandle2ScatteringAtom This, ConstHandle2ConstT_effective T_effective)
{
   detail::setField<CPP,CPPT_effective>
      (CLASSNAME, CLASSNAME+"T_effectiveSet", This, extract::T_effective, T_effective);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/ScatteringAtom/src/custom.cpp"
