
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/tsl/BraggEdge.hpp"
#include "BraggEdge.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = BraggEdgeClass;
using CPP = multigroup::BraggEdge;

static const std::string CLASSNAME = "BraggEdge";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto BraggEnergy = [](auto &obj) { return &obj.BraggEnergy; };
   static auto structureFactor = [](auto &obj) { return &obj.structureFactor; };
}

using CPPBraggEnergy = tsl::BraggEnergy;
using CPPStructureFactor = tsl::StructureFactor;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstBraggEdge
BraggEdgeDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2BraggEdge
BraggEdgeDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstBraggEdge
BraggEdgeCreateConst(
   const XMLName label,
   ConstHandle2ConstBraggEnergy BraggEnergy,
   ConstHandle2ConstStructureFactor structureFactor
) {
   ConstHandle2BraggEdge handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      detail::tocpp<CPPBraggEnergy>(BraggEnergy),
      detail::tocpp<CPPStructureFactor>(structureFactor)
   );
   return handle;
}

// Create, general
Handle2BraggEdge
BraggEdgeCreate(
   const XMLName label,
   ConstHandle2ConstBraggEnergy BraggEnergy,
   ConstHandle2ConstStructureFactor structureFactor
) {
   ConstHandle2BraggEdge handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      detail::tocpp<CPPBraggEnergy>(BraggEnergy),
      detail::tocpp<CPPStructureFactor>(structureFactor)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
BraggEdgeAssign(ConstHandle2BraggEdge self, ConstHandle2ConstBraggEdge from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
BraggEdgeDelete(ConstHandle2ConstBraggEdge self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
BraggEdgeRead(ConstHandle2BraggEdge self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
BraggEdgeWrite(ConstHandle2ConstBraggEdge self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
BraggEdgePrint(ConstHandle2ConstBraggEdge self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
BraggEdgePrintXML(ConstHandle2ConstBraggEdge self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
BraggEdgePrintJSON(ConstHandle2ConstBraggEdge self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
BraggEdgeLabelHas(ConstHandle2ConstBraggEdge self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
BraggEdgeLabelGet(ConstHandle2ConstBraggEdge self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
BraggEdgeLabelSet(ConstHandle2BraggEdge self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: BraggEnergy
// -----------------------------------------------------------------------------

// Has
int
BraggEdgeBraggEnergyHas(ConstHandle2ConstBraggEdge self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BraggEnergyHas", self, extract::BraggEnergy);
}

// Get, const
Handle2ConstBraggEnergy
BraggEdgeBraggEnergyGetConst(ConstHandle2ConstBraggEdge self)
{
   return detail::getField<CPP,Handle2ConstBraggEnergy>
      (CLASSNAME, CLASSNAME+"BraggEnergyGetConst", self, extract::BraggEnergy);
}

// Get, non-const
Handle2BraggEnergy
BraggEdgeBraggEnergyGet(ConstHandle2BraggEdge self)
{
   return detail::getField<CPP,Handle2BraggEnergy>
      (CLASSNAME, CLASSNAME+"BraggEnergyGet", self, extract::BraggEnergy);
}

// Set
void
BraggEdgeBraggEnergySet(ConstHandle2BraggEdge self, ConstHandle2ConstBraggEnergy BraggEnergy)
{
   detail::setField<CPP,CPPBraggEnergy>
      (CLASSNAME, CLASSNAME+"BraggEnergySet", self, extract::BraggEnergy, BraggEnergy);
}


// -----------------------------------------------------------------------------
// Child: structureFactor
// -----------------------------------------------------------------------------

// Has
int
BraggEdgeStructureFactorHas(ConstHandle2ConstBraggEdge self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StructureFactorHas", self, extract::structureFactor);
}

// Get, const
Handle2ConstStructureFactor
BraggEdgeStructureFactorGetConst(ConstHandle2ConstBraggEdge self)
{
   return detail::getField<CPP,Handle2ConstStructureFactor>
      (CLASSNAME, CLASSNAME+"StructureFactorGetConst", self, extract::structureFactor);
}

// Get, non-const
Handle2StructureFactor
BraggEdgeStructureFactorGet(ConstHandle2BraggEdge self)
{
   return detail::getField<CPP,Handle2StructureFactor>
      (CLASSNAME, CLASSNAME+"StructureFactorGet", self, extract::structureFactor);
}

// Set
void
BraggEdgeStructureFactorSet(ConstHandle2BraggEdge self, ConstHandle2ConstStructureFactor structureFactor)
{
   detail::setField<CPP,CPPStructureFactor>
      (CLASSNAME, CLASSNAME+"StructureFactorSet", self, extract::structureFactor, structureFactor);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/tsl/BraggEdge/src/custom.cpp"
