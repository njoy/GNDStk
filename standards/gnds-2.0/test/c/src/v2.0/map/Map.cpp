
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/map/Map.hpp"
#include "Map.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = MapClass;
using CPP = multigroup::Map;

static const std::string CLASSNAME = "Map";

namespace extract {
   static auto library = [](auto &obj) { return &obj.library; };
   static auto format = [](auto &obj) { return &obj.format; };
   static auto checksum = [](auto &obj) { return &obj.checksum; };
   static auto algorithm = [](auto &obj) { return &obj.algorithm; };
   static auto import = [](auto &obj) { return &obj.import; };
   static auto protare = [](auto &obj) { return &obj.protare; };
   static auto TNSL = [](auto &obj) { return &obj.TNSL; };
}

using CPPImport = map::Import;
using CPPProtare = map::Protare;
using CPPTNSL = map::TNSL;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstMap
MapDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Map
MapDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstMap
MapCreateConst(
   const XMLName library,
   const XMLName format,
   const char *const checksum,
   const enums::HashAlgorithm algorithm,
   ConstHandle2Import *const import, const size_t importSize,
   ConstHandle2Protare *const protare, const size_t protareSize,
   ConstHandle2TNSL *const TNSL, const size_t TNSLSize
) {
   ConstHandle2Map handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      library,
      format,
      checksum,
      algorithm,
      std::vector<CPPImport>{},
      std::vector<CPPProtare>{},
      std::vector<CPPTNSL>{}
   );
   for (size_t ImportN = 0; ImportN < importSize; ++ImportN)
      MapImportAdd(handle, import[ImportN]);
   for (size_t ProtareN = 0; ProtareN < protareSize; ++ProtareN)
      MapProtareAdd(handle, protare[ProtareN]);
   for (size_t TNSLN = 0; TNSLN < TNSLSize; ++TNSLN)
      MapTNSLAdd(handle, TNSL[TNSLN]);
   return handle;
}

// Create, general
Handle2Map
MapCreate(
   const XMLName library,
   const XMLName format,
   const char *const checksum,
   const enums::HashAlgorithm algorithm,
   ConstHandle2Import *const import, const size_t importSize,
   ConstHandle2Protare *const protare, const size_t protareSize,
   ConstHandle2TNSL *const TNSL, const size_t TNSLSize
) {
   ConstHandle2Map handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      library,
      format,
      checksum,
      algorithm,
      std::vector<CPPImport>{},
      std::vector<CPPProtare>{},
      std::vector<CPPTNSL>{}
   );
   for (size_t ImportN = 0; ImportN < importSize; ++ImportN)
      MapImportAdd(handle, import[ImportN]);
   for (size_t ProtareN = 0; ProtareN < protareSize; ++ProtareN)
      MapProtareAdd(handle, protare[ProtareN]);
   for (size_t TNSLN = 0; TNSLN < TNSLSize; ++TNSLN)
      MapTNSLAdd(handle, TNSL[TNSLN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
MapAssign(ConstHandle2Map This, ConstHandle2ConstMap from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
MapDelete(ConstHandle2ConstMap This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
MapRead(ConstHandle2Map This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
MapWrite(ConstHandle2ConstMap This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
MapPrint(ConstHandle2ConstMap This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
MapPrintXML(ConstHandle2ConstMap This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
MapPrintJSON(ConstHandle2ConstMap This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: library
// -----------------------------------------------------------------------------

// Has
int
MapLibraryHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LibraryHas", This, extract::library);
}

// Get
// Returns by value
XMLName
MapLibraryGet(ConstHandle2ConstMap This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LibraryGet", This, extract::library);
}

// Set
void
MapLibrarySet(ConstHandle2Map This, const XMLName library)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LibrarySet", This, extract::library, library);
}


// -----------------------------------------------------------------------------
// Metadatum: format
// -----------------------------------------------------------------------------

// Has
int
MapFormatHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FormatHas", This, extract::format);
}

// Get
// Returns by value
XMLName
MapFormatGet(ConstHandle2ConstMap This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FormatGet", This, extract::format);
}

// Set
void
MapFormatSet(ConstHandle2Map This, const XMLName format)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FormatSet", This, extract::format, format);
}


// -----------------------------------------------------------------------------
// Metadatum: checksum
// -----------------------------------------------------------------------------

// Has
int
MapChecksumHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumHas", This, extract::checksum);
}

// Get
// Returns by value
const char *
MapChecksumGet(ConstHandle2ConstMap This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumGet", This, extract::checksum);
}

// Set
void
MapChecksumSet(ConstHandle2Map This, const char *const checksum)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumSet", This, extract::checksum, checksum);
}


// -----------------------------------------------------------------------------
// Metadatum: algorithm
// -----------------------------------------------------------------------------

// Has
int
MapAlgorithmHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmHas", This, extract::algorithm);
}

// Get
// Returns by value
enums::HashAlgorithm
MapAlgorithmGet(ConstHandle2ConstMap This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmGet", This, extract::algorithm);
}

// Set
void
MapAlgorithmSet(ConstHandle2Map This, const enums::HashAlgorithm algorithm)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmSet", This, extract::algorithm, algorithm);
}


// -----------------------------------------------------------------------------
// Child: import
// -----------------------------------------------------------------------------

// Has
int
MapImportHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ImportHas", This, extract::import);
}

// Clear
void
MapImportClear(ConstHandle2Map This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ImportClear", This, extract::import);
}

// Size
size_t
MapImportSize(ConstHandle2ConstMap This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ImportSize", This, extract::import);
}

// Add
void
MapImportAdd(ConstHandle2Map This, ConstHandle2ConstImport import)
{
   detail::addToContainer<CPP,CPPImport>
      (CLASSNAME, CLASSNAME+"ImportAdd", This, extract::import, import);
}

// Get, by index \in [0,size), const
Handle2ConstImport
MapImportGetConst(ConstHandle2ConstMap This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstImport>
      (CLASSNAME, CLASSNAME+"ImportGetConst", This, extract::import, index_);
}

// Get, by index \in [0,size), non-const
Handle2Import
MapImportGet(ConstHandle2Map This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Import>
      (CLASSNAME, CLASSNAME+"ImportGet", This, extract::import, index_);
}

// Set, by index \in [0,size)
void
MapImportSet(
   ConstHandle2Map This,
   const size_t index_,
   ConstHandle2ConstImport import
) {
   detail::setByIndex<CPP,CPPImport>
      (CLASSNAME, CLASSNAME+"ImportSet", This, extract::import, index_, import);
}

// Has, by path
int
MapImportHasByPath(
   ConstHandle2ConstMap This,
   const XMLName path
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ImportHasByPath",
       This, extract::import, meta::path, path);
}

// Get, by path, const
Handle2ConstImport
MapImportGetByPathConst(
   ConstHandle2ConstMap This,
   const XMLName path
) {
   return detail::getByMetadatum<CPP,Handle2ConstImport>
      (CLASSNAME, CLASSNAME+"ImportGetByPathConst",
       This, extract::import, meta::path, path);
}

// Get, by path, non-const
Handle2Import
MapImportGetByPath(
   ConstHandle2Map This,
   const XMLName path
) {
   return detail::getByMetadatum<CPP,Handle2Import>
      (CLASSNAME, CLASSNAME+"ImportGetByPath",
       This, extract::import, meta::path, path);
}

// Set, by path
void
MapImportSetByPath(
   ConstHandle2Map This,
   const XMLName path,
   ConstHandle2ConstImport import
) {
   detail::setByMetadatum<CPP,CPPImport>
      (CLASSNAME, CLASSNAME+"ImportSetByPath",
       This, extract::import, meta::path, path, import);
}

// Has, by checksum
int
MapImportHasByChecksum(
   ConstHandle2ConstMap This,
   const char *const checksum
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ImportHasByChecksum",
       This, extract::import, meta::checksum, checksum);
}

// Get, by checksum, const
Handle2ConstImport
MapImportGetByChecksumConst(
   ConstHandle2ConstMap This,
   const char *const checksum
) {
   return detail::getByMetadatum<CPP,Handle2ConstImport>
      (CLASSNAME, CLASSNAME+"ImportGetByChecksumConst",
       This, extract::import, meta::checksum, checksum);
}

// Get, by checksum, non-const
Handle2Import
MapImportGetByChecksum(
   ConstHandle2Map This,
   const char *const checksum
) {
   return detail::getByMetadatum<CPP,Handle2Import>
      (CLASSNAME, CLASSNAME+"ImportGetByChecksum",
       This, extract::import, meta::checksum, checksum);
}

// Set, by checksum
void
MapImportSetByChecksum(
   ConstHandle2Map This,
   const char *const checksum,
   ConstHandle2ConstImport import
) {
   detail::setByMetadatum<CPP,CPPImport>
      (CLASSNAME, CLASSNAME+"ImportSetByChecksum",
       This, extract::import, meta::checksum, checksum, import);
}

// Has, by algorithm
int
MapImportHasByAlgorithm(
   ConstHandle2ConstMap This,
   const enums::HashAlgorithm algorithm
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ImportHasByAlgorithm",
       This, extract::import, meta::algorithm, algorithm);
}

// Get, by algorithm, const
Handle2ConstImport
MapImportGetByAlgorithmConst(
   ConstHandle2ConstMap This,
   const enums::HashAlgorithm algorithm
) {
   return detail::getByMetadatum<CPP,Handle2ConstImport>
      (CLASSNAME, CLASSNAME+"ImportGetByAlgorithmConst",
       This, extract::import, meta::algorithm, algorithm);
}

// Get, by algorithm, non-const
Handle2Import
MapImportGetByAlgorithm(
   ConstHandle2Map This,
   const enums::HashAlgorithm algorithm
) {
   return detail::getByMetadatum<CPP,Handle2Import>
      (CLASSNAME, CLASSNAME+"ImportGetByAlgorithm",
       This, extract::import, meta::algorithm, algorithm);
}

// Set, by algorithm
void
MapImportSetByAlgorithm(
   ConstHandle2Map This,
   const enums::HashAlgorithm algorithm,
   ConstHandle2ConstImport import
) {
   detail::setByMetadatum<CPP,CPPImport>
      (CLASSNAME, CLASSNAME+"ImportSetByAlgorithm",
       This, extract::import, meta::algorithm, algorithm, import);
}


// -----------------------------------------------------------------------------
// Child: protare
// -----------------------------------------------------------------------------

// Has
int
MapProtareHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHas", This, extract::protare);
}

// Clear
void
MapProtareClear(ConstHandle2Map This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ProtareClear", This, extract::protare);
}

// Size
size_t
MapProtareSize(ConstHandle2ConstMap This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ProtareSize", This, extract::protare);
}

// Add
void
MapProtareAdd(ConstHandle2Map This, ConstHandle2ConstProtare protare)
{
   detail::addToContainer<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareAdd", This, extract::protare, protare);
}

// Get, by index \in [0,size), const
Handle2ConstProtare
MapProtareGetConst(ConstHandle2ConstMap This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetConst", This, extract::protare, index_);
}

// Get, by index \in [0,size), non-const
Handle2Protare
MapProtareGet(ConstHandle2Map This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGet", This, extract::protare, index_);
}

// Set, by index \in [0,size)
void
MapProtareSet(
   ConstHandle2Map This,
   const size_t index_,
   ConstHandle2ConstProtare protare
) {
   detail::setByIndex<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSet", This, extract::protare, index_, protare);
}

// Has, by projectile
int
MapProtareHasByProjectile(
   ConstHandle2ConstMap This,
   const XMLName projectile
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByProjectile",
       This, extract::protare, meta::projectile, projectile);
}

// Get, by projectile, const
Handle2ConstProtare
MapProtareGetByProjectileConst(
   ConstHandle2ConstMap This,
   const XMLName projectile
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByProjectileConst",
       This, extract::protare, meta::projectile, projectile);
}

// Get, by projectile, non-const
Handle2Protare
MapProtareGetByProjectile(
   ConstHandle2Map This,
   const XMLName projectile
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByProjectile",
       This, extract::protare, meta::projectile, projectile);
}

// Set, by projectile
void
MapProtareSetByProjectile(
   ConstHandle2Map This,
   const XMLName projectile,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByProjectile",
       This, extract::protare, meta::projectile, projectile, protare);
}

// Has, by target
int
MapProtareHasByTarget(
   ConstHandle2ConstMap This,
   const XMLName target
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByTarget",
       This, extract::protare, meta::target, target);
}

// Get, by target, const
Handle2ConstProtare
MapProtareGetByTargetConst(
   ConstHandle2ConstMap This,
   const XMLName target
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByTargetConst",
       This, extract::protare, meta::target, target);
}

// Get, by target, non-const
Handle2Protare
MapProtareGetByTarget(
   ConstHandle2Map This,
   const XMLName target
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByTarget",
       This, extract::protare, meta::target, target);
}

// Set, by target
void
MapProtareSetByTarget(
   ConstHandle2Map This,
   const XMLName target,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByTarget",
       This, extract::protare, meta::target, target, protare);
}

// Has, by evaluation
int
MapProtareHasByEvaluation(
   ConstHandle2ConstMap This,
   const XMLName evaluation
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByEvaluation",
       This, extract::protare, meta::evaluation, evaluation);
}

// Get, by evaluation, const
Handle2ConstProtare
MapProtareGetByEvaluationConst(
   ConstHandle2ConstMap This,
   const XMLName evaluation
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByEvaluationConst",
       This, extract::protare, meta::evaluation, evaluation);
}

// Get, by evaluation, non-const
Handle2Protare
MapProtareGetByEvaluation(
   ConstHandle2Map This,
   const XMLName evaluation
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByEvaluation",
       This, extract::protare, meta::evaluation, evaluation);
}

// Set, by evaluation
void
MapProtareSetByEvaluation(
   ConstHandle2Map This,
   const XMLName evaluation,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByEvaluation",
       This, extract::protare, meta::evaluation, evaluation, protare);
}

// Has, by path
int
MapProtareHasByPath(
   ConstHandle2ConstMap This,
   const XMLName path
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByPath",
       This, extract::protare, meta::path, path);
}

// Get, by path, const
Handle2ConstProtare
MapProtareGetByPathConst(
   ConstHandle2ConstMap This,
   const XMLName path
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByPathConst",
       This, extract::protare, meta::path, path);
}

// Get, by path, non-const
Handle2Protare
MapProtareGetByPath(
   ConstHandle2Map This,
   const XMLName path
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByPath",
       This, extract::protare, meta::path, path);
}

// Set, by path
void
MapProtareSetByPath(
   ConstHandle2Map This,
   const XMLName path,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByPath",
       This, extract::protare, meta::path, path, protare);
}

// Has, by interaction
int
MapProtareHasByInteraction(
   ConstHandle2ConstMap This,
   const XMLName interaction
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByInteraction",
       This, extract::protare, meta::interaction, interaction);
}

// Get, by interaction, const
Handle2ConstProtare
MapProtareGetByInteractionConst(
   ConstHandle2ConstMap This,
   const XMLName interaction
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByInteractionConst",
       This, extract::protare, meta::interaction, interaction);
}

// Get, by interaction, non-const
Handle2Protare
MapProtareGetByInteraction(
   ConstHandle2Map This,
   const XMLName interaction
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByInteraction",
       This, extract::protare, meta::interaction, interaction);
}

// Set, by interaction
void
MapProtareSetByInteraction(
   ConstHandle2Map This,
   const XMLName interaction,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByInteraction",
       This, extract::protare, meta::interaction, interaction, protare);
}

// Has, by checksum
int
MapProtareHasByChecksum(
   ConstHandle2ConstMap This,
   const char *const checksum
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByChecksum",
       This, extract::protare, meta::checksum, checksum);
}

// Get, by checksum, const
Handle2ConstProtare
MapProtareGetByChecksumConst(
   ConstHandle2ConstMap This,
   const char *const checksum
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByChecksumConst",
       This, extract::protare, meta::checksum, checksum);
}

// Get, by checksum, non-const
Handle2Protare
MapProtareGetByChecksum(
   ConstHandle2Map This,
   const char *const checksum
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByChecksum",
       This, extract::protare, meta::checksum, checksum);
}

// Set, by checksum
void
MapProtareSetByChecksum(
   ConstHandle2Map This,
   const char *const checksum,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByChecksum",
       This, extract::protare, meta::checksum, checksum, protare);
}

// Has, by algorithm
int
MapProtareHasByAlgorithm(
   ConstHandle2ConstMap This,
   const enums::HashAlgorithm algorithm
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ProtareHasByAlgorithm",
       This, extract::protare, meta::algorithm, algorithm);
}

// Get, by algorithm, const
Handle2ConstProtare
MapProtareGetByAlgorithmConst(
   ConstHandle2ConstMap This,
   const enums::HashAlgorithm algorithm
) {
   return detail::getByMetadatum<CPP,Handle2ConstProtare>
      (CLASSNAME, CLASSNAME+"ProtareGetByAlgorithmConst",
       This, extract::protare, meta::algorithm, algorithm);
}

// Get, by algorithm, non-const
Handle2Protare
MapProtareGetByAlgorithm(
   ConstHandle2Map This,
   const enums::HashAlgorithm algorithm
) {
   return detail::getByMetadatum<CPP,Handle2Protare>
      (CLASSNAME, CLASSNAME+"ProtareGetByAlgorithm",
       This, extract::protare, meta::algorithm, algorithm);
}

// Set, by algorithm
void
MapProtareSetByAlgorithm(
   ConstHandle2Map This,
   const enums::HashAlgorithm algorithm,
   ConstHandle2ConstProtare protare
) {
   detail::setByMetadatum<CPP,CPPProtare>
      (CLASSNAME, CLASSNAME+"ProtareSetByAlgorithm",
       This, extract::protare, meta::algorithm, algorithm, protare);
}


// -----------------------------------------------------------------------------
// Child: TNSL
// -----------------------------------------------------------------------------

// Has
int
MapTNSLHas(ConstHandle2ConstMap This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHas", This, extract::TNSL);
}

// Clear
void
MapTNSLClear(ConstHandle2Map This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"TNSLClear", This, extract::TNSL);
}

// Size
size_t
MapTNSLSize(ConstHandle2ConstMap This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"TNSLSize", This, extract::TNSL);
}

// Add
void
MapTNSLAdd(ConstHandle2Map This, ConstHandle2ConstTNSL TNSL)
{
   detail::addToContainer<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLAdd", This, extract::TNSL, TNSL);
}

// Get, by index \in [0,size), const
Handle2ConstTNSL
MapTNSLGetConst(ConstHandle2ConstMap This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetConst", This, extract::TNSL, index_);
}

// Get, by index \in [0,size), non-const
Handle2TNSL
MapTNSLGet(ConstHandle2Map This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGet", This, extract::TNSL, index_);
}

// Set, by index \in [0,size)
void
MapTNSLSet(
   ConstHandle2Map This,
   const size_t index_,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByIndex<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSet", This, extract::TNSL, index_, TNSL);
}

// Has, by projectile
int
MapTNSLHasByProjectile(
   ConstHandle2ConstMap This,
   const XMLName projectile
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByProjectile",
       This, extract::TNSL, meta::projectile, projectile);
}

// Get, by projectile, const
Handle2ConstTNSL
MapTNSLGetByProjectileConst(
   ConstHandle2ConstMap This,
   const XMLName projectile
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByProjectileConst",
       This, extract::TNSL, meta::projectile, projectile);
}

// Get, by projectile, non-const
Handle2TNSL
MapTNSLGetByProjectile(
   ConstHandle2Map This,
   const XMLName projectile
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByProjectile",
       This, extract::TNSL, meta::projectile, projectile);
}

// Set, by projectile
void
MapTNSLSetByProjectile(
   ConstHandle2Map This,
   const XMLName projectile,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByProjectile",
       This, extract::TNSL, meta::projectile, projectile, TNSL);
}

// Has, by target
int
MapTNSLHasByTarget(
   ConstHandle2ConstMap This,
   const XMLName target
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByTarget",
       This, extract::TNSL, meta::target, target);
}

// Get, by target, const
Handle2ConstTNSL
MapTNSLGetByTargetConst(
   ConstHandle2ConstMap This,
   const XMLName target
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByTargetConst",
       This, extract::TNSL, meta::target, target);
}

// Get, by target, non-const
Handle2TNSL
MapTNSLGetByTarget(
   ConstHandle2Map This,
   const XMLName target
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByTarget",
       This, extract::TNSL, meta::target, target);
}

// Set, by target
void
MapTNSLSetByTarget(
   ConstHandle2Map This,
   const XMLName target,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByTarget",
       This, extract::TNSL, meta::target, target, TNSL);
}

// Has, by evaluation
int
MapTNSLHasByEvaluation(
   ConstHandle2ConstMap This,
   const XMLName evaluation
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByEvaluation",
       This, extract::TNSL, meta::evaluation, evaluation);
}

// Get, by evaluation, const
Handle2ConstTNSL
MapTNSLGetByEvaluationConst(
   ConstHandle2ConstMap This,
   const XMLName evaluation
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByEvaluationConst",
       This, extract::TNSL, meta::evaluation, evaluation);
}

// Get, by evaluation, non-const
Handle2TNSL
MapTNSLGetByEvaluation(
   ConstHandle2Map This,
   const XMLName evaluation
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByEvaluation",
       This, extract::TNSL, meta::evaluation, evaluation);
}

// Set, by evaluation
void
MapTNSLSetByEvaluation(
   ConstHandle2Map This,
   const XMLName evaluation,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByEvaluation",
       This, extract::TNSL, meta::evaluation, evaluation, TNSL);
}

// Has, by path
int
MapTNSLHasByPath(
   ConstHandle2ConstMap This,
   const XMLName path
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByPath",
       This, extract::TNSL, meta::path, path);
}

// Get, by path, const
Handle2ConstTNSL
MapTNSLGetByPathConst(
   ConstHandle2ConstMap This,
   const XMLName path
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByPathConst",
       This, extract::TNSL, meta::path, path);
}

// Get, by path, non-const
Handle2TNSL
MapTNSLGetByPath(
   ConstHandle2Map This,
   const XMLName path
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByPath",
       This, extract::TNSL, meta::path, path);
}

// Set, by path
void
MapTNSLSetByPath(
   ConstHandle2Map This,
   const XMLName path,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByPath",
       This, extract::TNSL, meta::path, path, TNSL);
}

// Has, by interaction
int
MapTNSLHasByInteraction(
   ConstHandle2ConstMap This,
   const XMLName interaction
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByInteraction",
       This, extract::TNSL, meta::interaction, interaction);
}

// Get, by interaction, const
Handle2ConstTNSL
MapTNSLGetByInteractionConst(
   ConstHandle2ConstMap This,
   const XMLName interaction
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByInteractionConst",
       This, extract::TNSL, meta::interaction, interaction);
}

// Get, by interaction, non-const
Handle2TNSL
MapTNSLGetByInteraction(
   ConstHandle2Map This,
   const XMLName interaction
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByInteraction",
       This, extract::TNSL, meta::interaction, interaction);
}

// Set, by interaction
void
MapTNSLSetByInteraction(
   ConstHandle2Map This,
   const XMLName interaction,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByInteraction",
       This, extract::TNSL, meta::interaction, interaction, TNSL);
}

// Has, by checksum
int
MapTNSLHasByChecksum(
   ConstHandle2ConstMap This,
   const char *const checksum
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByChecksum",
       This, extract::TNSL, meta::checksum, checksum);
}

// Get, by checksum, const
Handle2ConstTNSL
MapTNSLGetByChecksumConst(
   ConstHandle2ConstMap This,
   const char *const checksum
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByChecksumConst",
       This, extract::TNSL, meta::checksum, checksum);
}

// Get, by checksum, non-const
Handle2TNSL
MapTNSLGetByChecksum(
   ConstHandle2Map This,
   const char *const checksum
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByChecksum",
       This, extract::TNSL, meta::checksum, checksum);
}

// Set, by checksum
void
MapTNSLSetByChecksum(
   ConstHandle2Map This,
   const char *const checksum,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByChecksum",
       This, extract::TNSL, meta::checksum, checksum, TNSL);
}

// Has, by algorithm
int
MapTNSLHasByAlgorithm(
   ConstHandle2ConstMap This,
   const enums::HashAlgorithm algorithm
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByAlgorithm",
       This, extract::TNSL, meta::algorithm, algorithm);
}

// Get, by algorithm, const
Handle2ConstTNSL
MapTNSLGetByAlgorithmConst(
   ConstHandle2ConstMap This,
   const enums::HashAlgorithm algorithm
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByAlgorithmConst",
       This, extract::TNSL, meta::algorithm, algorithm);
}

// Get, by algorithm, non-const
Handle2TNSL
MapTNSLGetByAlgorithm(
   ConstHandle2Map This,
   const enums::HashAlgorithm algorithm
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByAlgorithm",
       This, extract::TNSL, meta::algorithm, algorithm);
}

// Set, by algorithm
void
MapTNSLSetByAlgorithm(
   ConstHandle2Map This,
   const enums::HashAlgorithm algorithm,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByAlgorithm",
       This, extract::TNSL, meta::algorithm, algorithm, TNSL);
}

// Has, by standardTarget
int
MapTNSLHasByStandardTarget(
   ConstHandle2ConstMap This,
   const XMLName standardTarget
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByStandardTarget",
       This, extract::TNSL, meta::standardTarget, standardTarget);
}

// Get, by standardTarget, const
Handle2ConstTNSL
MapTNSLGetByStandardTargetConst(
   ConstHandle2ConstMap This,
   const XMLName standardTarget
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByStandardTargetConst",
       This, extract::TNSL, meta::standardTarget, standardTarget);
}

// Get, by standardTarget, non-const
Handle2TNSL
MapTNSLGetByStandardTarget(
   ConstHandle2Map This,
   const XMLName standardTarget
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByStandardTarget",
       This, extract::TNSL, meta::standardTarget, standardTarget);
}

// Set, by standardTarget
void
MapTNSLSetByStandardTarget(
   ConstHandle2Map This,
   const XMLName standardTarget,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByStandardTarget",
       This, extract::TNSL, meta::standardTarget, standardTarget, TNSL);
}

// Has, by standardEvaluation
int
MapTNSLHasByStandardEvaluation(
   ConstHandle2ConstMap This,
   const XMLName standardEvaluation
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"TNSLHasByStandardEvaluation",
       This, extract::TNSL, meta::standardEvaluation, standardEvaluation);
}

// Get, by standardEvaluation, const
Handle2ConstTNSL
MapTNSLGetByStandardEvaluationConst(
   ConstHandle2ConstMap This,
   const XMLName standardEvaluation
) {
   return detail::getByMetadatum<CPP,Handle2ConstTNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByStandardEvaluationConst",
       This, extract::TNSL, meta::standardEvaluation, standardEvaluation);
}

// Get, by standardEvaluation, non-const
Handle2TNSL
MapTNSLGetByStandardEvaluation(
   ConstHandle2Map This,
   const XMLName standardEvaluation
) {
   return detail::getByMetadatum<CPP,Handle2TNSL>
      (CLASSNAME, CLASSNAME+"TNSLGetByStandardEvaluation",
       This, extract::TNSL, meta::standardEvaluation, standardEvaluation);
}

// Set, by standardEvaluation
void
MapTNSLSetByStandardEvaluation(
   ConstHandle2Map This,
   const XMLName standardEvaluation,
   ConstHandle2ConstTNSL TNSL
) {
   detail::setByMetadatum<CPP,CPPTNSL>
      (CLASSNAME, CLASSNAME+"TNSLSetByStandardEvaluation",
       This, extract::TNSL, meta::standardEvaluation, standardEvaluation, TNSL);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/map/Map/src/custom.cpp"
