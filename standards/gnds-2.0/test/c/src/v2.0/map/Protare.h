
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Protare is the basic handle type in this file. Example:
//    // Create a default Protare object:
//    Protare handle = ProtareDefault();
// Functions involving Protare are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_MAP_PROTARE
#define C_INTERFACE_TEST_V2_0_MAP_PROTARE

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ProtareClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Protare
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ProtareClass *Protare;

// --- Const-aware handles.
typedef const struct ProtareClass *const ConstHandle2ConstProtare;
typedef       struct ProtareClass *const ConstHandle2Protare;
typedef const struct ProtareClass *      Handle2ConstProtare;
typedef       struct ProtareClass *      Handle2Protare;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstProtare
ProtareDefaultConst();

// +++ Create, default
extern_c Handle2Protare
ProtareDefault();

// --- Create, general, const
extern_c Handle2ConstProtare
ProtareCreateConst(
   const XMLName projectile,
   const XMLName target,
   const XMLName evaluation,
   const XMLName path,
   const XMLName interaction,
   const char *const checksum,
   const enums::HashAlgorithm algorithm
);

// +++ Create, general
extern_c Handle2Protare
ProtareCreate(
   const XMLName projectile,
   const XMLName target,
   const XMLName evaluation,
   const XMLName path,
   const XMLName interaction,
   const char *const checksum,
   const enums::HashAlgorithm algorithm
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ProtareAssign(ConstHandle2Protare self, ConstHandle2ConstProtare from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ProtareDelete(ConstHandle2ConstProtare self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ProtareRead(ConstHandle2Protare self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ProtareWrite(ConstHandle2ConstProtare self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ProtarePrint(ConstHandle2ConstProtare self);

// +++ Print to standard output, as XML
extern_c int
ProtarePrintXML(ConstHandle2ConstProtare self);

// +++ Print to standard output, as JSON
extern_c int
ProtarePrintJSON(ConstHandle2ConstProtare self);


// -----------------------------------------------------------------------------
// Metadatum: projectile
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtareProjectileHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c XMLName
ProtareProjectileGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtareProjectileSet(ConstHandle2Protare self, const XMLName projectile);


// -----------------------------------------------------------------------------
// Metadatum: target
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtareTargetHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c XMLName
ProtareTargetGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtareTargetSet(ConstHandle2Protare self, const XMLName target);


// -----------------------------------------------------------------------------
// Metadatum: evaluation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtareEvaluationHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c XMLName
ProtareEvaluationGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtareEvaluationSet(ConstHandle2Protare self, const XMLName evaluation);


// -----------------------------------------------------------------------------
// Metadatum: path
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtarePathHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c XMLName
ProtarePathGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtarePathSet(ConstHandle2Protare self, const XMLName path);


// -----------------------------------------------------------------------------
// Metadatum: interaction
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtareInteractionHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c XMLName
ProtareInteractionGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtareInteractionSet(ConstHandle2Protare self, const XMLName interaction);


// -----------------------------------------------------------------------------
// Metadatum: checksum
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtareChecksumHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c const char *
ProtareChecksumGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtareChecksumSet(ConstHandle2Protare self, const char *const checksum);


// -----------------------------------------------------------------------------
// Metadatum: algorithm
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProtareAlgorithmHas(ConstHandle2ConstProtare self);

// +++ Get
// +++ Returns by value
extern_c enums::HashAlgorithm
ProtareAlgorithmGet(ConstHandle2ConstProtare self);

// +++ Set
extern_c void
ProtareAlgorithmSet(ConstHandle2Protare self, const enums::HashAlgorithm algorithm);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/map/Protare/src/custom.h"

#undef extern_c
#endif
