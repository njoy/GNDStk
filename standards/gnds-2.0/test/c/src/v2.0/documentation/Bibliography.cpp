
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/documentation/Bibliography.hpp"
#include "Bibliography.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = BibliographyClass;
using CPP = multigroup::Bibliography;

static const std::string CLASSNAME = "Bibliography";

namespace extract {
   static auto bibitem = [](auto &obj) { return &obj.bibitem; };
}

using CPPBibitem = documentation::Bibitem;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstBibliography
BibliographyDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Bibliography
BibliographyDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstBibliography
BibliographyCreateConst(
   ConstHandle2Bibitem *const bibitem, const size_t bibitemSize
) {
   ConstHandle2Bibliography handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPBibitem>{}
   );
   for (size_t BibitemN = 0; BibitemN < bibitemSize; ++BibitemN)
      BibliographyBibitemAdd(handle, bibitem[BibitemN]);
   return handle;
}

// Create, general
Handle2Bibliography
BibliographyCreate(
   ConstHandle2Bibitem *const bibitem, const size_t bibitemSize
) {
   ConstHandle2Bibliography handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPBibitem>{}
   );
   for (size_t BibitemN = 0; BibitemN < bibitemSize; ++BibitemN)
      BibliographyBibitemAdd(handle, bibitem[BibitemN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
BibliographyAssign(ConstHandle2Bibliography This, ConstHandle2ConstBibliography from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
BibliographyDelete(ConstHandle2ConstBibliography This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
BibliographyRead(ConstHandle2Bibliography This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
BibliographyWrite(ConstHandle2ConstBibliography This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
BibliographyPrint(ConstHandle2ConstBibliography This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
BibliographyPrintXML(ConstHandle2ConstBibliography This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
BibliographyPrintJSON(ConstHandle2ConstBibliography This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: bibitem
// -----------------------------------------------------------------------------

// Has
int
BibliographyBibitemHas(ConstHandle2ConstBibliography This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BibitemHas", This, extract::bibitem);
}

// Clear
void
BibliographyBibitemClear(ConstHandle2Bibliography This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"BibitemClear", This, extract::bibitem);
}

// Size
size_t
BibliographyBibitemSize(ConstHandle2ConstBibliography This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"BibitemSize", This, extract::bibitem);
}

// Add
void
BibliographyBibitemAdd(ConstHandle2Bibliography This, ConstHandle2ConstBibitem bibitem)
{
   detail::addToContainer<CPP,CPPBibitem>
      (CLASSNAME, CLASSNAME+"BibitemAdd", This, extract::bibitem, bibitem);
}

// Get, by index \in [0,size), const
Handle2ConstBibitem
BibliographyBibitemGetConst(ConstHandle2ConstBibliography This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstBibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetConst", This, extract::bibitem, index_);
}

// Get, by index \in [0,size), non-const
Handle2Bibitem
BibliographyBibitemGet(ConstHandle2Bibliography This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Bibitem>
      (CLASSNAME, CLASSNAME+"BibitemGet", This, extract::bibitem, index_);
}

// Set, by index \in [0,size)
void
BibliographyBibitemSet(
   ConstHandle2Bibliography This,
   const size_t index_,
   ConstHandle2ConstBibitem bibitem
) {
   detail::setByIndex<CPP,CPPBibitem>
      (CLASSNAME, CLASSNAME+"BibitemSet", This, extract::bibitem, index_, bibitem);
}

// Has, by encoding
int
BibliographyBibitemHasByEncoding(
   ConstHandle2ConstBibliography This,
   const XMLName encoding
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"BibitemHasByEncoding",
       This, extract::bibitem, meta::encoding, encoding);
}

// Get, by encoding, const
Handle2ConstBibitem
BibliographyBibitemGetByEncodingConst(
   ConstHandle2ConstBibliography This,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2ConstBibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByEncodingConst",
       This, extract::bibitem, meta::encoding, encoding);
}

// Get, by encoding, non-const
Handle2Bibitem
BibliographyBibitemGetByEncoding(
   ConstHandle2Bibliography This,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2Bibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByEncoding",
       This, extract::bibitem, meta::encoding, encoding);
}

// Set, by encoding
void
BibliographyBibitemSetByEncoding(
   ConstHandle2Bibliography This,
   const XMLName encoding,
   ConstHandle2ConstBibitem bibitem
) {
   detail::setByMetadatum<CPP,CPPBibitem>
      (CLASSNAME, CLASSNAME+"BibitemSetByEncoding",
       This, extract::bibitem, meta::encoding, encoding, bibitem);
}

// Has, by markup
int
BibliographyBibitemHasByMarkup(
   ConstHandle2ConstBibliography This,
   const char *const markup
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"BibitemHasByMarkup",
       This, extract::bibitem, meta::markup, markup);
}

// Get, by markup, const
Handle2ConstBibitem
BibliographyBibitemGetByMarkupConst(
   ConstHandle2ConstBibliography This,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2ConstBibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByMarkupConst",
       This, extract::bibitem, meta::markup, markup);
}

// Get, by markup, non-const
Handle2Bibitem
BibliographyBibitemGetByMarkup(
   ConstHandle2Bibliography This,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2Bibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByMarkup",
       This, extract::bibitem, meta::markup, markup);
}

// Set, by markup
void
BibliographyBibitemSetByMarkup(
   ConstHandle2Bibliography This,
   const char *const markup,
   ConstHandle2ConstBibitem bibitem
) {
   detail::setByMetadatum<CPP,CPPBibitem>
      (CLASSNAME, CLASSNAME+"BibitemSetByMarkup",
       This, extract::bibitem, meta::markup, markup, bibitem);
}

// Has, by label
int
BibliographyBibitemHasByLabel(
   ConstHandle2ConstBibliography This,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"BibitemHasByLabel",
       This, extract::bibitem, meta::label, label);
}

// Get, by label, const
Handle2ConstBibitem
BibliographyBibitemGetByLabelConst(
   ConstHandle2ConstBibliography This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstBibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByLabelConst",
       This, extract::bibitem, meta::label, label);
}

// Get, by label, non-const
Handle2Bibitem
BibliographyBibitemGetByLabel(
   ConstHandle2Bibliography This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Bibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByLabel",
       This, extract::bibitem, meta::label, label);
}

// Set, by label
void
BibliographyBibitemSetByLabel(
   ConstHandle2Bibliography This,
   const XMLName label,
   ConstHandle2ConstBibitem bibitem
) {
   detail::setByMetadatum<CPP,CPPBibitem>
      (CLASSNAME, CLASSNAME+"BibitemSetByLabel",
       This, extract::bibitem, meta::label, label, bibitem);
}

// Has, by xref
int
BibliographyBibitemHasByXref(
   ConstHandle2ConstBibliography This,
   const XMLName xref
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"BibitemHasByXref",
       This, extract::bibitem, meta::xref, xref);
}

// Get, by xref, const
Handle2ConstBibitem
BibliographyBibitemGetByXrefConst(
   ConstHandle2ConstBibliography This,
   const XMLName xref
) {
   return detail::getByMetadatum<CPP,Handle2ConstBibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByXrefConst",
       This, extract::bibitem, meta::xref, xref);
}

// Get, by xref, non-const
Handle2Bibitem
BibliographyBibitemGetByXref(
   ConstHandle2Bibliography This,
   const XMLName xref
) {
   return detail::getByMetadatum<CPP,Handle2Bibitem>
      (CLASSNAME, CLASSNAME+"BibitemGetByXref",
       This, extract::bibitem, meta::xref, xref);
}

// Set, by xref
void
BibliographyBibitemSetByXref(
   ConstHandle2Bibliography This,
   const XMLName xref,
   ConstHandle2ConstBibitem bibitem
) {
   detail::setByMetadatum<CPP,CPPBibitem>
      (CLASSNAME, CLASSNAME+"BibitemSetByXref",
       This, extract::bibitem, meta::xref, xref, bibitem);
}
