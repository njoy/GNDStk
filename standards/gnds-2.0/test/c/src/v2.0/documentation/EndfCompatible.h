
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// EndfCompatible is the basic handle type in this file. Example:
//    // Create a default EndfCompatible object:
//    EndfCompatible handle = EndfCompatibleDefault();
// Functions involving EndfCompatible are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_ENDFCOMPATIBLE
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_ENDFCOMPATIBLE

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct EndfCompatibleClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ EndfCompatible
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct EndfCompatibleClass *EndfCompatible;

// --- Const-aware handles.
typedef const struct EndfCompatibleClass *const ConstHandle2ConstEndfCompatible;
typedef       struct EndfCompatibleClass *const ConstHandle2EndfCompatible;
typedef const struct EndfCompatibleClass *      Handle2ConstEndfCompatible;
typedef       struct EndfCompatibleClass *      Handle2EndfCompatible;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstEndfCompatible
EndfCompatibleDefaultConst();

// +++ Create, default
extern_c Handle2EndfCompatible
EndfCompatibleDefault();

// --- Create, general, const
extern_c Handle2ConstEndfCompatible
EndfCompatibleCreateConst(
   const XMLName encoding,
   const char *const markup,
   const XMLName label
);

// +++ Create, general
extern_c Handle2EndfCompatible
EndfCompatibleCreate(
   const XMLName encoding,
   const char *const markup,
   const XMLName label
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
EndfCompatibleAssign(ConstHandle2EndfCompatible self, ConstHandle2ConstEndfCompatible from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
EndfCompatibleDelete(ConstHandle2ConstEndfCompatible self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
EndfCompatibleRead(ConstHandle2EndfCompatible self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
EndfCompatibleWrite(ConstHandle2ConstEndfCompatible self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
EndfCompatiblePrint(ConstHandle2ConstEndfCompatible self);

// +++ Print to standard output, as XML
extern_c int
EndfCompatiblePrintXML(ConstHandle2ConstEndfCompatible self);

// +++ Print to standard output, as JSON
extern_c int
EndfCompatiblePrintJSON(ConstHandle2ConstEndfCompatible self);


// -----------------------------------------------------------------------------
// Data vector
// -----------------------------------------------------------------------------

// ------------------------
// int
// ------------------------

// +++ Clear
extern_c void
EndfCompatibleIntsClear(ConstHandle2EndfCompatible self);

// +++ Get size
extern_c size_t
EndfCompatibleIntsSize(ConstHandle2ConstEndfCompatible self);

// +++ Get value
// +++ By index \in [0,size)
extern_c int
EndfCompatibleIntsGet(ConstHandle2ConstEndfCompatible self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
EndfCompatibleIntsSet(ConstHandle2EndfCompatible self, const size_t index, const int value);

// --- Get pointer to existing values, const
extern_c const int *
EndfCompatibleIntsGetArrayConst(ConstHandle2ConstEndfCompatible self);

// +++ Get pointer to existing values, non-const
extern_c int *
EndfCompatibleIntsGetArray(ConstHandle2EndfCompatible self);

// +++ Set completely new values and size
extern_c void
EndfCompatibleIntsSetArray(ConstHandle2EndfCompatible self, const int *const values, const size_t size);

// ------------------------
// unsigned
// ------------------------

// +++ Clear
extern_c void
EndfCompatibleUnsignedsClear(ConstHandle2EndfCompatible self);

// +++ Get size
extern_c size_t
EndfCompatibleUnsignedsSize(ConstHandle2ConstEndfCompatible self);

// +++ Get value
// +++ By index \in [0,size)
extern_c unsigned
EndfCompatibleUnsignedsGet(ConstHandle2ConstEndfCompatible self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
EndfCompatibleUnsignedsSet(ConstHandle2EndfCompatible self, const size_t index, const unsigned value);

// --- Get pointer to existing values, const
extern_c const unsigned *
EndfCompatibleUnsignedsGetArrayConst(ConstHandle2ConstEndfCompatible self);

// +++ Get pointer to existing values, non-const
extern_c unsigned *
EndfCompatibleUnsignedsGetArray(ConstHandle2EndfCompatible self);

// +++ Set completely new values and size
extern_c void
EndfCompatibleUnsignedsSetArray(ConstHandle2EndfCompatible self, const unsigned *const values, const size_t size);

// ------------------------
// float
// ------------------------

// +++ Clear
extern_c void
EndfCompatibleFloatsClear(ConstHandle2EndfCompatible self);

// +++ Get size
extern_c size_t
EndfCompatibleFloatsSize(ConstHandle2ConstEndfCompatible self);

// +++ Get value
// +++ By index \in [0,size)
extern_c float
EndfCompatibleFloatsGet(ConstHandle2ConstEndfCompatible self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
EndfCompatibleFloatsSet(ConstHandle2EndfCompatible self, const size_t index, const float value);

// --- Get pointer to existing values, const
extern_c const float *
EndfCompatibleFloatsGetArrayConst(ConstHandle2ConstEndfCompatible self);

// +++ Get pointer to existing values, non-const
extern_c float *
EndfCompatibleFloatsGetArray(ConstHandle2EndfCompatible self);

// +++ Set completely new values and size
extern_c void
EndfCompatibleFloatsSetArray(ConstHandle2EndfCompatible self, const float *const values, const size_t size);

// ------------------------
// double
// ------------------------

// +++ Clear
extern_c void
EndfCompatibleDoublesClear(ConstHandle2EndfCompatible self);

// +++ Get size
extern_c size_t
EndfCompatibleDoublesSize(ConstHandle2ConstEndfCompatible self);

// +++ Get value
// +++ By index \in [0,size)
extern_c double
EndfCompatibleDoublesGet(ConstHandle2ConstEndfCompatible self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
EndfCompatibleDoublesSet(ConstHandle2EndfCompatible self, const size_t index, const double value);

// --- Get pointer to existing values, const
extern_c const double *
EndfCompatibleDoublesGetArrayConst(ConstHandle2ConstEndfCompatible self);

// +++ Get pointer to existing values, non-const
extern_c double *
EndfCompatibleDoublesGetArray(ConstHandle2EndfCompatible self);

// +++ Set completely new values and size
extern_c void
EndfCompatibleDoublesSetArray(ConstHandle2EndfCompatible self, const double *const values, const size_t size);


// -----------------------------------------------------------------------------
// Metadatum: encoding
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EndfCompatibleEncodingHas(ConstHandle2ConstEndfCompatible self);

// +++ Get
// +++ Returns by value
extern_c XMLName
EndfCompatibleEncodingGet(ConstHandle2ConstEndfCompatible self);

// +++ Set
extern_c void
EndfCompatibleEncodingSet(ConstHandle2EndfCompatible self, const XMLName encoding);


// -----------------------------------------------------------------------------
// Metadatum: markup
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EndfCompatibleMarkupHas(ConstHandle2ConstEndfCompatible self);

// +++ Get
// +++ Returns by value
extern_c const char *
EndfCompatibleMarkupGet(ConstHandle2ConstEndfCompatible self);

// +++ Set
extern_c void
EndfCompatibleMarkupSet(ConstHandle2EndfCompatible self, const char *const markup);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
EndfCompatibleLabelHas(ConstHandle2ConstEndfCompatible self);

// +++ Get
// +++ Returns by value
extern_c XMLName
EndfCompatibleLabelGet(ConstHandle2ConstEndfCompatible self);

// +++ Set
extern_c void
EndfCompatibleLabelSet(ConstHandle2EndfCompatible self, const XMLName label);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/EndfCompatible/src/custom.h"

#undef extern_c
#endif
