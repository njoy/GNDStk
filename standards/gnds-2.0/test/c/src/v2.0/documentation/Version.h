
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Version is the basic handle type in this file. Example:
//    // Create a default Version object:
//    Version handle = VersionDefault();
// Functions involving Version are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_VERSION
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_VERSION

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct VersionClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Version
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct VersionClass *Version;

// --- Const-aware handles.
typedef const struct VersionClass *const ConstHandle2ConstVersion;
typedef       struct VersionClass *const ConstHandle2Version;
typedef const struct VersionClass *      Handle2ConstVersion;
typedef       struct VersionClass *      Handle2Version;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstVersion
VersionDefaultConst();

// +++ Create, default
extern_c Handle2Version
VersionDefault();

// --- Create, general, const
extern_c Handle2ConstVersion
VersionCreateConst(
   const XMLName encoding,
   const char *const markup,
   const XMLName label
);

// +++ Create, general
extern_c Handle2Version
VersionCreate(
   const XMLName encoding,
   const char *const markup,
   const XMLName label
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
VersionAssign(ConstHandle2Version self, ConstHandle2ConstVersion from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
VersionDelete(ConstHandle2ConstVersion self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
VersionRead(ConstHandle2Version self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
VersionWrite(ConstHandle2ConstVersion self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
VersionPrint(ConstHandle2ConstVersion self);

// +++ Print to standard output, as XML
extern_c int
VersionPrintXML(ConstHandle2ConstVersion self);

// +++ Print to standard output, as JSON
extern_c int
VersionPrintJSON(ConstHandle2ConstVersion self);


// -----------------------------------------------------------------------------
// Data vector
// -----------------------------------------------------------------------------

// ------------------------
// int
// ------------------------

// +++ Clear
extern_c void
VersionIntsClear(ConstHandle2Version self);

// +++ Get size
extern_c size_t
VersionIntsSize(ConstHandle2ConstVersion self);

// +++ Get value
// +++ By index \in [0,size)
extern_c int
VersionIntsGet(ConstHandle2ConstVersion self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
VersionIntsSet(ConstHandle2Version self, const size_t index, const int value);

// --- Get pointer to existing values, const
extern_c const int *
VersionIntsGetArrayConst(ConstHandle2ConstVersion self);

// +++ Get pointer to existing values, non-const
extern_c int *
VersionIntsGetArray(ConstHandle2Version self);

// +++ Set completely new values and size
extern_c void
VersionIntsSetArray(ConstHandle2Version self, const int *const values, const size_t size);

// ------------------------
// unsigned
// ------------------------

// +++ Clear
extern_c void
VersionUnsignedsClear(ConstHandle2Version self);

// +++ Get size
extern_c size_t
VersionUnsignedsSize(ConstHandle2ConstVersion self);

// +++ Get value
// +++ By index \in [0,size)
extern_c unsigned
VersionUnsignedsGet(ConstHandle2ConstVersion self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
VersionUnsignedsSet(ConstHandle2Version self, const size_t index, const unsigned value);

// --- Get pointer to existing values, const
extern_c const unsigned *
VersionUnsignedsGetArrayConst(ConstHandle2ConstVersion self);

// +++ Get pointer to existing values, non-const
extern_c unsigned *
VersionUnsignedsGetArray(ConstHandle2Version self);

// +++ Set completely new values and size
extern_c void
VersionUnsignedsSetArray(ConstHandle2Version self, const unsigned *const values, const size_t size);

// ------------------------
// float
// ------------------------

// +++ Clear
extern_c void
VersionFloatsClear(ConstHandle2Version self);

// +++ Get size
extern_c size_t
VersionFloatsSize(ConstHandle2ConstVersion self);

// +++ Get value
// +++ By index \in [0,size)
extern_c float
VersionFloatsGet(ConstHandle2ConstVersion self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
VersionFloatsSet(ConstHandle2Version self, const size_t index, const float value);

// --- Get pointer to existing values, const
extern_c const float *
VersionFloatsGetArrayConst(ConstHandle2ConstVersion self);

// +++ Get pointer to existing values, non-const
extern_c float *
VersionFloatsGetArray(ConstHandle2Version self);

// +++ Set completely new values and size
extern_c void
VersionFloatsSetArray(ConstHandle2Version self, const float *const values, const size_t size);

// ------------------------
// double
// ------------------------

// +++ Clear
extern_c void
VersionDoublesClear(ConstHandle2Version self);

// +++ Get size
extern_c size_t
VersionDoublesSize(ConstHandle2ConstVersion self);

// +++ Get value
// +++ By index \in [0,size)
extern_c double
VersionDoublesGet(ConstHandle2ConstVersion self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
VersionDoublesSet(ConstHandle2Version self, const size_t index, const double value);

// --- Get pointer to existing values, const
extern_c const double *
VersionDoublesGetArrayConst(ConstHandle2ConstVersion self);

// +++ Get pointer to existing values, non-const
extern_c double *
VersionDoublesGetArray(ConstHandle2Version self);

// +++ Set completely new values and size
extern_c void
VersionDoublesSetArray(ConstHandle2Version self, const double *const values, const size_t size);


// -----------------------------------------------------------------------------
// Metadatum: encoding
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
VersionEncodingHas(ConstHandle2ConstVersion self);

// +++ Get
// +++ Returns by value
extern_c XMLName
VersionEncodingGet(ConstHandle2ConstVersion self);

// +++ Set
extern_c void
VersionEncodingSet(ConstHandle2Version self, const XMLName encoding);


// -----------------------------------------------------------------------------
// Metadatum: markup
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
VersionMarkupHas(ConstHandle2ConstVersion self);

// +++ Get
// +++ Returns by value
extern_c const char *
VersionMarkupGet(ConstHandle2ConstVersion self);

// +++ Set
extern_c void
VersionMarkupSet(ConstHandle2Version self, const char *const markup);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
VersionLabelHas(ConstHandle2ConstVersion self);

// +++ Get
// +++ Returns by value
extern_c XMLName
VersionLabelGet(ConstHandle2ConstVersion self);

// +++ Set
extern_c void
VersionLabelSet(ConstHandle2Version self, const XMLName label);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/Version/src/custom.h"

#undef extern_c
#endif
