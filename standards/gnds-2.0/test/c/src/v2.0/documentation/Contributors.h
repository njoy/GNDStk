
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Contributors is the basic handle type in this file. Example:
//    // Create a default Contributors object:
//    Contributors handle = ContributorsDefault();
// Functions involving Contributors are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_CONTRIBUTORS
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_CONTRIBUTORS

#include "GNDStk.h"
#include "v2.0/documentation/Author.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ContributorsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Contributors
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ContributorsClass *Contributors;

// --- Const-aware handles.
typedef const struct ContributorsClass *const ConstHandle2ConstContributors;
typedef       struct ContributorsClass *const ConstHandle2Contributors;
typedef const struct ContributorsClass *      Handle2ConstContributors;
typedef       struct ContributorsClass *      Handle2Contributors;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstContributors
ContributorsDefaultConst();

// +++ Create, default
extern_c Handle2Contributors
ContributorsDefault();

// --- Create, general, const
extern_c Handle2ConstContributors
ContributorsCreateConst(
   ConstHandle2Author *const author, const size_t authorSize
);

// +++ Create, general
extern_c Handle2Contributors
ContributorsCreate(
   ConstHandle2Author *const author, const size_t authorSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ContributorsAssign(ConstHandle2Contributors This, ConstHandle2ConstContributors from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ContributorsDelete(ConstHandle2ConstContributors This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ContributorsRead(ConstHandle2Contributors This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ContributorsWrite(ConstHandle2ConstContributors This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ContributorsPrint(ConstHandle2ConstContributors This);

// +++ Print to standard output, as XML
extern_c int
ContributorsPrintXML(ConstHandle2ConstContributors This);

// +++ Print to standard output, as JSON
extern_c int
ContributorsPrintJSON(ConstHandle2ConstContributors This);


// -----------------------------------------------------------------------------
// Child: author
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ContributorsAuthorHas(ConstHandle2ConstContributors This);

// +++ Clear
extern_c void
ContributorsAuthorClear(ConstHandle2Contributors This);

// +++ Size
extern_c size_t
ContributorsAuthorSize(ConstHandle2ConstContributors This);

// +++ Add
extern_c void
ContributorsAuthorAdd(ConstHandle2Contributors This, ConstHandle2ConstAuthor author);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstAuthor
ContributorsAuthorGetConst(ConstHandle2ConstContributors This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Author
ContributorsAuthorGet(ConstHandle2Contributors This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
ContributorsAuthorSet(
   ConstHandle2Contributors This,
   const size_t index_,
   ConstHandle2ConstAuthor author
);

// +++ Has, by name
extern_c int
ContributorsAuthorHasByName(
   ConstHandle2ConstContributors This,
   const UTF8Text name
);

// --- Get, by name, const
extern_c Handle2ConstAuthor
ContributorsAuthorGetByNameConst(
   ConstHandle2ConstContributors This,
   const UTF8Text name
);

// +++ Get, by name, non-const
extern_c Handle2Author
ContributorsAuthorGetByName(
   ConstHandle2Contributors This,
   const UTF8Text name
);

// +++ Set, by name
extern_c void
ContributorsAuthorSetByName(
   ConstHandle2Contributors This,
   const UTF8Text name,
   ConstHandle2ConstAuthor author
);

// +++ Has, by orcid
extern_c int
ContributorsAuthorHasByOrcid(
   ConstHandle2ConstContributors This,
   const UTF8Text orcid
);

// --- Get, by orcid, const
extern_c Handle2ConstAuthor
ContributorsAuthorGetByOrcidConst(
   ConstHandle2ConstContributors This,
   const UTF8Text orcid
);

// +++ Get, by orcid, non-const
extern_c Handle2Author
ContributorsAuthorGetByOrcid(
   ConstHandle2Contributors This,
   const UTF8Text orcid
);

// +++ Set, by orcid
extern_c void
ContributorsAuthorSetByOrcid(
   ConstHandle2Contributors This,
   const UTF8Text orcid,
   ConstHandle2ConstAuthor author
);

// +++ Has, by email
extern_c int
ContributorsAuthorHasByEmail(
   ConstHandle2ConstContributors This,
   const UTF8Text email
);

// --- Get, by email, const
extern_c Handle2ConstAuthor
ContributorsAuthorGetByEmailConst(
   ConstHandle2ConstContributors This,
   const UTF8Text email
);

// +++ Get, by email, non-const
extern_c Handle2Author
ContributorsAuthorGetByEmail(
   ConstHandle2Contributors This,
   const UTF8Text email
);

// +++ Set, by email
extern_c void
ContributorsAuthorSetByEmail(
   ConstHandle2Contributors This,
   const UTF8Text email,
   ConstHandle2ConstAuthor author
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/Contributors/src/custom.h"

#undef extern_c
#endif
