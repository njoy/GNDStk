
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// ComputerCodes is the basic handle type in this file. Example:
//    // Create a default ComputerCodes object:
//    ComputerCodes handle = ComputerCodesDefault();
// Functions involving ComputerCodes are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_COMPUTERCODES
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_COMPUTERCODES

#include "GNDStk.h"
#include "v2.0/documentation/ComputerCode.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ComputerCodesClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ComputerCodes
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ComputerCodesClass *ComputerCodes;

// --- Const-aware handles.
typedef const struct ComputerCodesClass *const ConstHandle2ConstComputerCodes;
typedef       struct ComputerCodesClass *const ConstHandle2ComputerCodes;
typedef const struct ComputerCodesClass *      Handle2ConstComputerCodes;
typedef       struct ComputerCodesClass *      Handle2ComputerCodes;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstComputerCodes
ComputerCodesDefaultConst();

// +++ Create, default
extern_c Handle2ComputerCodes
ComputerCodesDefault();

// --- Create, general, const
extern_c Handle2ConstComputerCodes
ComputerCodesCreateConst(
   ConstHandle2ComputerCode *const computerCode, const size_t computerCodeSize
);

// +++ Create, general
extern_c Handle2ComputerCodes
ComputerCodesCreate(
   ConstHandle2ComputerCode *const computerCode, const size_t computerCodeSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ComputerCodesAssign(ConstHandle2ComputerCodes This, ConstHandle2ConstComputerCodes from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ComputerCodesDelete(ConstHandle2ConstComputerCodes This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ComputerCodesRead(ConstHandle2ComputerCodes This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ComputerCodesWrite(ConstHandle2ConstComputerCodes This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ComputerCodesPrint(ConstHandle2ConstComputerCodes This);

// +++ Print to standard output, as XML
extern_c int
ComputerCodesPrintXML(ConstHandle2ConstComputerCodes This);

// +++ Print to standard output, as JSON
extern_c int
ComputerCodesPrintJSON(ConstHandle2ConstComputerCodes This);


// -----------------------------------------------------------------------------
// Child: computerCode
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ComputerCodesComputerCodeHas(ConstHandle2ConstComputerCodes This);

// +++ Clear
extern_c void
ComputerCodesComputerCodeClear(ConstHandle2ComputerCodes This);

// +++ Size
extern_c size_t
ComputerCodesComputerCodeSize(ConstHandle2ConstComputerCodes This);

// +++ Add
extern_c void
ComputerCodesComputerCodeAdd(ConstHandle2ComputerCodes This, ConstHandle2ConstComputerCode computerCode);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstComputerCode
ComputerCodesComputerCodeGetConst(ConstHandle2ConstComputerCodes This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2ComputerCode
ComputerCodesComputerCodeGet(ConstHandle2ComputerCodes This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
ComputerCodesComputerCodeSet(
   ConstHandle2ComputerCodes This,
   const size_t index_,
   ConstHandle2ConstComputerCode computerCode
);

// +++ Has, by label
extern_c int
ComputerCodesComputerCodeHasByLabel(
   ConstHandle2ConstComputerCodes This,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstComputerCode
ComputerCodesComputerCodeGetByLabelConst(
   ConstHandle2ConstComputerCodes This,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2ComputerCode
ComputerCodesComputerCodeGetByLabel(
   ConstHandle2ComputerCodes This,
   const XMLName label
);

// +++ Set, by label
extern_c void
ComputerCodesComputerCodeSetByLabel(
   ConstHandle2ComputerCodes This,
   const XMLName label,
   ConstHandle2ConstComputerCode computerCode
);

// +++ Has, by name
extern_c int
ComputerCodesComputerCodeHasByName(
   ConstHandle2ConstComputerCodes This,
   const UTF8Text name
);

// --- Get, by name, const
extern_c Handle2ConstComputerCode
ComputerCodesComputerCodeGetByNameConst(
   ConstHandle2ConstComputerCodes This,
   const UTF8Text name
);

// +++ Get, by name, non-const
extern_c Handle2ComputerCode
ComputerCodesComputerCodeGetByName(
   ConstHandle2ComputerCodes This,
   const UTF8Text name
);

// +++ Set, by name
extern_c void
ComputerCodesComputerCodeSetByName(
   ConstHandle2ComputerCodes This,
   const UTF8Text name,
   ConstHandle2ConstComputerCode computerCode
);

// +++ Has, by version
extern_c int
ComputerCodesComputerCodeHasByVersion(
   ConstHandle2ConstComputerCodes This,
   const XMLName version
);

// --- Get, by version, const
extern_c Handle2ConstComputerCode
ComputerCodesComputerCodeGetByVersionConst(
   ConstHandle2ConstComputerCodes This,
   const XMLName version
);

// +++ Get, by version, non-const
extern_c Handle2ComputerCode
ComputerCodesComputerCodeGetByVersion(
   ConstHandle2ComputerCodes This,
   const XMLName version
);

// +++ Set, by version
extern_c void
ComputerCodesComputerCodeSetByVersion(
   ConstHandle2ComputerCodes This,
   const XMLName version,
   ConstHandle2ConstComputerCode computerCode
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/ComputerCodes/src/custom.h"

#undef extern_c
#endif
