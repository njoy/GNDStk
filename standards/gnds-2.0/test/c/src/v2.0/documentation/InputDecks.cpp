
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/documentation/InputDecks.hpp"
#include "InputDecks.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = InputDecksClass;
using CPP = multigroup::InputDecks;

static const std::string CLASSNAME = "InputDecks";

namespace extract {
   static auto inputDeck = [](auto &obj) { return &obj.inputDeck; };
}

using CPPInputDeck = documentation::InputDeck;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstInputDecks
InputDecksDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2InputDecks
InputDecksDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstInputDecks
InputDecksCreateConst(
   ConstHandle2InputDeck *const inputDeck, const size_t inputDeckSize
) {
   ConstHandle2InputDecks handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPInputDeck>{}
   );
   for (size_t InputDeckN = 0; InputDeckN < inputDeckSize; ++InputDeckN)
      InputDecksInputDeckAdd(handle, inputDeck[InputDeckN]);
   return handle;
}

// Create, general
Handle2InputDecks
InputDecksCreate(
   ConstHandle2InputDeck *const inputDeck, const size_t inputDeckSize
) {
   ConstHandle2InputDecks handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPInputDeck>{}
   );
   for (size_t InputDeckN = 0; InputDeckN < inputDeckSize; ++InputDeckN)
      InputDecksInputDeckAdd(handle, inputDeck[InputDeckN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
InputDecksAssign(ConstHandle2InputDecks self, ConstHandle2ConstInputDecks from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
InputDecksDelete(ConstHandle2ConstInputDecks self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
InputDecksRead(ConstHandle2InputDecks self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
InputDecksWrite(ConstHandle2ConstInputDecks self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
InputDecksPrint(ConstHandle2ConstInputDecks self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
InputDecksPrintXML(ConstHandle2ConstInputDecks self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
InputDecksPrintJSON(ConstHandle2ConstInputDecks self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: inputDeck
// -----------------------------------------------------------------------------

// Has
int
InputDecksInputDeckHas(ConstHandle2ConstInputDecks self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckHas", self, extract::inputDeck);
}

// Clear
void
InputDecksInputDeckClear(ConstHandle2InputDecks self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckClear", self, extract::inputDeck);
}

// Size
size_t
InputDecksInputDeckSize(ConstHandle2ConstInputDecks self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckSize", self, extract::inputDeck);
}

// Add
void
InputDecksInputDeckAdd(ConstHandle2InputDecks self, ConstHandle2ConstInputDeck inputDeck)
{
   detail::addToContainer<CPP,CPPInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckAdd", self, extract::inputDeck, inputDeck);
}

// Get, by index \in [0,size), const
Handle2ConstInputDeck
InputDecksInputDeckGetConst(ConstHandle2ConstInputDecks self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetConst", self, extract::inputDeck, index_);
}

// Get, by index \in [0,size), non-const
Handle2InputDeck
InputDecksInputDeckGet(ConstHandle2InputDecks self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2InputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGet", self, extract::inputDeck, index_);
}

// Set, by index \in [0,size)
void
InputDecksInputDeckSet(
   ConstHandle2InputDecks self,
   const size_t index_,
   ConstHandle2ConstInputDeck inputDeck
) {
   detail::setByIndex<CPP,CPPInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckSet", self, extract::inputDeck, index_, inputDeck);
}

// Has, by encoding
int
InputDecksInputDeckHasByEncoding(
   ConstHandle2ConstInputDecks self,
   const XMLName encoding
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckHasByEncoding",
       self, extract::inputDeck, meta::encoding, encoding);
}

// Get, by encoding, const
Handle2ConstInputDeck
InputDecksInputDeckGetByEncodingConst(
   ConstHandle2ConstInputDecks self,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2ConstInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByEncodingConst",
       self, extract::inputDeck, meta::encoding, encoding);
}

// Get, by encoding, non-const
Handle2InputDeck
InputDecksInputDeckGetByEncoding(
   ConstHandle2InputDecks self,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2InputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByEncoding",
       self, extract::inputDeck, meta::encoding, encoding);
}

// Set, by encoding
void
InputDecksInputDeckSetByEncoding(
   ConstHandle2InputDecks self,
   const XMLName encoding,
   ConstHandle2ConstInputDeck inputDeck
) {
   detail::setByMetadatum<CPP,CPPInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckSetByEncoding",
       self, extract::inputDeck, meta::encoding, encoding, inputDeck);
}

// Has, by markup
int
InputDecksInputDeckHasByMarkup(
   ConstHandle2ConstInputDecks self,
   const char *const markup
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckHasByMarkup",
       self, extract::inputDeck, meta::markup, markup);
}

// Get, by markup, const
Handle2ConstInputDeck
InputDecksInputDeckGetByMarkupConst(
   ConstHandle2ConstInputDecks self,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2ConstInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByMarkupConst",
       self, extract::inputDeck, meta::markup, markup);
}

// Get, by markup, non-const
Handle2InputDeck
InputDecksInputDeckGetByMarkup(
   ConstHandle2InputDecks self,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2InputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByMarkup",
       self, extract::inputDeck, meta::markup, markup);
}

// Set, by markup
void
InputDecksInputDeckSetByMarkup(
   ConstHandle2InputDecks self,
   const char *const markup,
   ConstHandle2ConstInputDeck inputDeck
) {
   detail::setByMetadatum<CPP,CPPInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckSetByMarkup",
       self, extract::inputDeck, meta::markup, markup, inputDeck);
}

// Has, by label
int
InputDecksInputDeckHasByLabel(
   ConstHandle2ConstInputDecks self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckHasByLabel",
       self, extract::inputDeck, meta::label, label);
}

// Get, by label, const
Handle2ConstInputDeck
InputDecksInputDeckGetByLabelConst(
   ConstHandle2ConstInputDecks self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByLabelConst",
       self, extract::inputDeck, meta::label, label);
}

// Get, by label, non-const
Handle2InputDeck
InputDecksInputDeckGetByLabel(
   ConstHandle2InputDecks self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2InputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByLabel",
       self, extract::inputDeck, meta::label, label);
}

// Set, by label
void
InputDecksInputDeckSetByLabel(
   ConstHandle2InputDecks self,
   const XMLName label,
   ConstHandle2ConstInputDeck inputDeck
) {
   detail::setByMetadatum<CPP,CPPInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckSetByLabel",
       self, extract::inputDeck, meta::label, label, inputDeck);
}

// Has, by filename
int
InputDecksInputDeckHasByFilename(
   ConstHandle2ConstInputDecks self,
   const XMLName filename
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"InputDeckHasByFilename",
       self, extract::inputDeck, meta::filename, filename);
}

// Get, by filename, const
Handle2ConstInputDeck
InputDecksInputDeckGetByFilenameConst(
   ConstHandle2ConstInputDecks self,
   const XMLName filename
) {
   return detail::getByMetadatum<CPP,Handle2ConstInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByFilenameConst",
       self, extract::inputDeck, meta::filename, filename);
}

// Get, by filename, non-const
Handle2InputDeck
InputDecksInputDeckGetByFilename(
   ConstHandle2InputDecks self,
   const XMLName filename
) {
   return detail::getByMetadatum<CPP,Handle2InputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckGetByFilename",
       self, extract::inputDeck, meta::filename, filename);
}

// Set, by filename
void
InputDecksInputDeckSetByFilename(
   ConstHandle2InputDecks self,
   const XMLName filename,
   ConstHandle2ConstInputDeck inputDeck
) {
   detail::setByMetadatum<CPP,CPPInputDeck>
      (CLASSNAME, CLASSNAME+"InputDeckSetByFilename",
       self, extract::inputDeck, meta::filename, filename, inputDeck);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/InputDecks/src/custom.cpp"
