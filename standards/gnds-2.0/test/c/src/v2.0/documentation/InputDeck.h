
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// InputDeck is the basic handle type in this file. Example:
//    // Create a default InputDeck object:
//    InputDeck handle = InputDeckDefault();
// Functions involving InputDeck are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_INPUTDECK
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_INPUTDECK

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct InputDeckClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ InputDeck
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct InputDeckClass *InputDeck;

// --- Const-aware handles.
typedef const struct InputDeckClass *const ConstHandle2ConstInputDeck;
typedef       struct InputDeckClass *const ConstHandle2InputDeck;
typedef const struct InputDeckClass *      Handle2ConstInputDeck;
typedef       struct InputDeckClass *      Handle2InputDeck;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstInputDeck
InputDeckDefaultConst();

// +++ Create, default
extern_c Handle2InputDeck
InputDeckDefault();

// --- Create, general, const
extern_c Handle2ConstInputDeck
InputDeckCreateConst(
   const XMLName encoding,
   const char *const markup,
   const XMLName label,
   const XMLName filename
);

// +++ Create, general
extern_c Handle2InputDeck
InputDeckCreate(
   const XMLName encoding,
   const char *const markup,
   const XMLName label,
   const XMLName filename
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
InputDeckAssign(ConstHandle2InputDeck self, ConstHandle2ConstInputDeck from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
InputDeckDelete(ConstHandle2ConstInputDeck self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
InputDeckRead(ConstHandle2InputDeck self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
InputDeckWrite(ConstHandle2ConstInputDeck self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
InputDeckPrint(ConstHandle2ConstInputDeck self);

// +++ Print to standard output, as XML
extern_c int
InputDeckPrintXML(ConstHandle2ConstInputDeck self);

// +++ Print to standard output, as JSON
extern_c int
InputDeckPrintJSON(ConstHandle2ConstInputDeck self);


// -----------------------------------------------------------------------------
// Data vector
// -----------------------------------------------------------------------------

// ------------------------
// int
// ------------------------

// +++ Clear
extern_c void
InputDeckIntsClear(ConstHandle2InputDeck self);

// +++ Get size
extern_c size_t
InputDeckIntsSize(ConstHandle2ConstInputDeck self);

// +++ Get value
// +++ By index \in [0,size)
extern_c int
InputDeckIntsGet(ConstHandle2ConstInputDeck self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
InputDeckIntsSet(ConstHandle2InputDeck self, const size_t index, const int value);

// --- Get pointer to existing values, const
extern_c const int *
InputDeckIntsGetArrayConst(ConstHandle2ConstInputDeck self);

// +++ Get pointer to existing values, non-const
extern_c int *
InputDeckIntsGetArray(ConstHandle2InputDeck self);

// +++ Set completely new values and size
extern_c void
InputDeckIntsSetArray(ConstHandle2InputDeck self, const int *const values, const size_t size);

// ------------------------
// unsigned
// ------------------------

// +++ Clear
extern_c void
InputDeckUnsignedsClear(ConstHandle2InputDeck self);

// +++ Get size
extern_c size_t
InputDeckUnsignedsSize(ConstHandle2ConstInputDeck self);

// +++ Get value
// +++ By index \in [0,size)
extern_c unsigned
InputDeckUnsignedsGet(ConstHandle2ConstInputDeck self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
InputDeckUnsignedsSet(ConstHandle2InputDeck self, const size_t index, const unsigned value);

// --- Get pointer to existing values, const
extern_c const unsigned *
InputDeckUnsignedsGetArrayConst(ConstHandle2ConstInputDeck self);

// +++ Get pointer to existing values, non-const
extern_c unsigned *
InputDeckUnsignedsGetArray(ConstHandle2InputDeck self);

// +++ Set completely new values and size
extern_c void
InputDeckUnsignedsSetArray(ConstHandle2InputDeck self, const unsigned *const values, const size_t size);

// ------------------------
// float
// ------------------------

// +++ Clear
extern_c void
InputDeckFloatsClear(ConstHandle2InputDeck self);

// +++ Get size
extern_c size_t
InputDeckFloatsSize(ConstHandle2ConstInputDeck self);

// +++ Get value
// +++ By index \in [0,size)
extern_c float
InputDeckFloatsGet(ConstHandle2ConstInputDeck self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
InputDeckFloatsSet(ConstHandle2InputDeck self, const size_t index, const float value);

// --- Get pointer to existing values, const
extern_c const float *
InputDeckFloatsGetArrayConst(ConstHandle2ConstInputDeck self);

// +++ Get pointer to existing values, non-const
extern_c float *
InputDeckFloatsGetArray(ConstHandle2InputDeck self);

// +++ Set completely new values and size
extern_c void
InputDeckFloatsSetArray(ConstHandle2InputDeck self, const float *const values, const size_t size);

// ------------------------
// double
// ------------------------

// +++ Clear
extern_c void
InputDeckDoublesClear(ConstHandle2InputDeck self);

// +++ Get size
extern_c size_t
InputDeckDoublesSize(ConstHandle2ConstInputDeck self);

// +++ Get value
// +++ By index \in [0,size)
extern_c double
InputDeckDoublesGet(ConstHandle2ConstInputDeck self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
InputDeckDoublesSet(ConstHandle2InputDeck self, const size_t index, const double value);

// --- Get pointer to existing values, const
extern_c const double *
InputDeckDoublesGetArrayConst(ConstHandle2ConstInputDeck self);

// +++ Get pointer to existing values, non-const
extern_c double *
InputDeckDoublesGetArray(ConstHandle2InputDeck self);

// +++ Set completely new values and size
extern_c void
InputDeckDoublesSetArray(ConstHandle2InputDeck self, const double *const values, const size_t size);


// -----------------------------------------------------------------------------
// Metadatum: encoding
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
InputDeckEncodingHas(ConstHandle2ConstInputDeck self);

// +++ Get
// +++ Returns by value
extern_c XMLName
InputDeckEncodingGet(ConstHandle2ConstInputDeck self);

// +++ Set
extern_c void
InputDeckEncodingSet(ConstHandle2InputDeck self, const XMLName encoding);


// -----------------------------------------------------------------------------
// Metadatum: markup
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
InputDeckMarkupHas(ConstHandle2ConstInputDeck self);

// +++ Get
// +++ Returns by value
extern_c const char *
InputDeckMarkupGet(ConstHandle2ConstInputDeck self);

// +++ Set
extern_c void
InputDeckMarkupSet(ConstHandle2InputDeck self, const char *const markup);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
InputDeckLabelHas(ConstHandle2ConstInputDeck self);

// +++ Get
// +++ Returns by value
extern_c XMLName
InputDeckLabelGet(ConstHandle2ConstInputDeck self);

// +++ Set
extern_c void
InputDeckLabelSet(ConstHandle2InputDeck self, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: filename
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
InputDeckFilenameHas(ConstHandle2ConstInputDeck self);

// +++ Get
// +++ Returns by value
extern_c XMLName
InputDeckFilenameGet(ConstHandle2ConstInputDeck self);

// +++ Set
extern_c void
InputDeckFilenameSet(ConstHandle2InputDeck self, const XMLName filename);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/InputDeck/src/custom.h"

#undef extern_c
#endif
