
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/documentation/ComputerCode.hpp"
#include "ComputerCode.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ComputerCodeClass;
using CPP = multigroup::ComputerCode;

static const std::string CLASSNAME = "ComputerCode";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto name = [](auto &obj) { return &obj.name; };
   static auto version = [](auto &obj) { return &obj.version; };
   static auto executionArguments = [](auto &obj) { return &obj.executionArguments; };
   static auto codeRepo = [](auto &obj) { return &obj.codeRepo; };
   static auto note = [](auto &obj) { return &obj.note; };
   static auto inputDecks = [](auto &obj) { return &obj.inputDecks; };
   static auto outputDecks = [](auto &obj) { return &obj.outputDecks; };
}

using CPPExecutionArguments = documentation::ExecutionArguments;
using CPPCodeRepo = documentation::CodeRepo;
using CPPNote = documentation::Note;
using CPPInputDecks = documentation::InputDecks;
using CPPOutputDecks = documentation::OutputDecks;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstComputerCode
ComputerCodeDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ComputerCode
ComputerCodeDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstComputerCode
ComputerCodeCreateConst(
   const XMLName label,
   const UTF8Text name,
   const XMLName version,
   ConstHandle2ConstExecutionArguments executionArguments,
   ConstHandle2ConstCodeRepo codeRepo,
   ConstHandle2ConstNote note,
   ConstHandle2ConstInputDecks inputDecks,
   ConstHandle2ConstOutputDecks outputDecks
) {
   ConstHandle2ComputerCode handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      name,
      version,
      detail::tocpp<CPPExecutionArguments>(executionArguments),
      detail::tocpp<CPPCodeRepo>(codeRepo),
      detail::tocpp<CPPNote>(note),
      detail::tocpp<CPPInputDecks>(inputDecks),
      detail::tocpp<CPPOutputDecks>(outputDecks)
   );
   return handle;
}

// Create, general
Handle2ComputerCode
ComputerCodeCreate(
   const XMLName label,
   const UTF8Text name,
   const XMLName version,
   ConstHandle2ConstExecutionArguments executionArguments,
   ConstHandle2ConstCodeRepo codeRepo,
   ConstHandle2ConstNote note,
   ConstHandle2ConstInputDecks inputDecks,
   ConstHandle2ConstOutputDecks outputDecks
) {
   ConstHandle2ComputerCode handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      name,
      version,
      detail::tocpp<CPPExecutionArguments>(executionArguments),
      detail::tocpp<CPPCodeRepo>(codeRepo),
      detail::tocpp<CPPNote>(note),
      detail::tocpp<CPPInputDecks>(inputDecks),
      detail::tocpp<CPPOutputDecks>(outputDecks)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ComputerCodeAssign(ConstHandle2ComputerCode self, ConstHandle2ConstComputerCode from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ComputerCodeDelete(ConstHandle2ConstComputerCode self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ComputerCodeRead(ConstHandle2ComputerCode self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ComputerCodeWrite(ConstHandle2ConstComputerCode self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ComputerCodePrint(ConstHandle2ConstComputerCode self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ComputerCodePrintXML(ConstHandle2ConstComputerCode self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ComputerCodePrintJSON(ConstHandle2ConstComputerCode self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeLabelHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
XMLName
ComputerCodeLabelGet(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
ComputerCodeLabelSet(ConstHandle2ComputerCode self, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeNameHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NameHas", self, extract::name);
}

// Get
// Returns by value
UTF8Text
ComputerCodeNameGet(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NameGet", self, extract::name);
}

// Set
void
ComputerCodeNameSet(ConstHandle2ComputerCode self, const UTF8Text name)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NameSet", self, extract::name, name);
}


// -----------------------------------------------------------------------------
// Metadatum: version
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeVersionHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"VersionHas", self, extract::version);
}

// Get
// Returns by value
XMLName
ComputerCodeVersionGet(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"VersionGet", self, extract::version);
}

// Set
void
ComputerCodeVersionSet(ConstHandle2ComputerCode self, const XMLName version)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"VersionSet", self, extract::version, version);
}


// -----------------------------------------------------------------------------
// Child: executionArguments
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeExecutionArgumentsHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ExecutionArgumentsHas", self, extract::executionArguments);
}

// Get, const
Handle2ConstExecutionArguments
ComputerCodeExecutionArgumentsGetConst(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP,Handle2ConstExecutionArguments>
      (CLASSNAME, CLASSNAME+"ExecutionArgumentsGetConst", self, extract::executionArguments);
}

// Get, non-const
Handle2ExecutionArguments
ComputerCodeExecutionArgumentsGet(ConstHandle2ComputerCode self)
{
   return detail::getField<CPP,Handle2ExecutionArguments>
      (CLASSNAME, CLASSNAME+"ExecutionArgumentsGet", self, extract::executionArguments);
}

// Set
void
ComputerCodeExecutionArgumentsSet(ConstHandle2ComputerCode self, ConstHandle2ConstExecutionArguments executionArguments)
{
   detail::setField<CPP,CPPExecutionArguments>
      (CLASSNAME, CLASSNAME+"ExecutionArgumentsSet", self, extract::executionArguments, executionArguments);
}


// -----------------------------------------------------------------------------
// Child: codeRepo
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeCodeRepoHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CodeRepoHas", self, extract::codeRepo);
}

// Get, const
Handle2ConstCodeRepo
ComputerCodeCodeRepoGetConst(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP,Handle2ConstCodeRepo>
      (CLASSNAME, CLASSNAME+"CodeRepoGetConst", self, extract::codeRepo);
}

// Get, non-const
Handle2CodeRepo
ComputerCodeCodeRepoGet(ConstHandle2ComputerCode self)
{
   return detail::getField<CPP,Handle2CodeRepo>
      (CLASSNAME, CLASSNAME+"CodeRepoGet", self, extract::codeRepo);
}

// Set
void
ComputerCodeCodeRepoSet(ConstHandle2ComputerCode self, ConstHandle2ConstCodeRepo codeRepo)
{
   detail::setField<CPP,CPPCodeRepo>
      (CLASSNAME, CLASSNAME+"CodeRepoSet", self, extract::codeRepo, codeRepo);
}


// -----------------------------------------------------------------------------
// Child: note
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeNoteHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NoteHas", self, extract::note);
}

// Get, const
Handle2ConstNote
ComputerCodeNoteGetConst(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP,Handle2ConstNote>
      (CLASSNAME, CLASSNAME+"NoteGetConst", self, extract::note);
}

// Get, non-const
Handle2Note
ComputerCodeNoteGet(ConstHandle2ComputerCode self)
{
   return detail::getField<CPP,Handle2Note>
      (CLASSNAME, CLASSNAME+"NoteGet", self, extract::note);
}

// Set
void
ComputerCodeNoteSet(ConstHandle2ComputerCode self, ConstHandle2ConstNote note)
{
   detail::setField<CPP,CPPNote>
      (CLASSNAME, CLASSNAME+"NoteSet", self, extract::note, note);
}


// -----------------------------------------------------------------------------
// Child: inputDecks
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeInputDecksHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InputDecksHas", self, extract::inputDecks);
}

// Get, const
Handle2ConstInputDecks
ComputerCodeInputDecksGetConst(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP,Handle2ConstInputDecks>
      (CLASSNAME, CLASSNAME+"InputDecksGetConst", self, extract::inputDecks);
}

// Get, non-const
Handle2InputDecks
ComputerCodeInputDecksGet(ConstHandle2ComputerCode self)
{
   return detail::getField<CPP,Handle2InputDecks>
      (CLASSNAME, CLASSNAME+"InputDecksGet", self, extract::inputDecks);
}

// Set
void
ComputerCodeInputDecksSet(ConstHandle2ComputerCode self, ConstHandle2ConstInputDecks inputDecks)
{
   detail::setField<CPP,CPPInputDecks>
      (CLASSNAME, CLASSNAME+"InputDecksSet", self, extract::inputDecks, inputDecks);
}


// -----------------------------------------------------------------------------
// Child: outputDecks
// -----------------------------------------------------------------------------

// Has
int
ComputerCodeOutputDecksHas(ConstHandle2ConstComputerCode self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OutputDecksHas", self, extract::outputDecks);
}

// Get, const
Handle2ConstOutputDecks
ComputerCodeOutputDecksGetConst(ConstHandle2ConstComputerCode self)
{
   return detail::getField<CPP,Handle2ConstOutputDecks>
      (CLASSNAME, CLASSNAME+"OutputDecksGetConst", self, extract::outputDecks);
}

// Get, non-const
Handle2OutputDecks
ComputerCodeOutputDecksGet(ConstHandle2ComputerCode self)
{
   return detail::getField<CPP,Handle2OutputDecks>
      (CLASSNAME, CLASSNAME+"OutputDecksGet", self, extract::outputDecks);
}

// Set
void
ComputerCodeOutputDecksSet(ConstHandle2ComputerCode self, ConstHandle2ConstOutputDecks outputDecks)
{
   detail::setField<CPP,CPPOutputDecks>
      (CLASSNAME, CLASSNAME+"OutputDecksSet", self, extract::outputDecks, outputDecks);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/ComputerCode/src/custom.cpp"
