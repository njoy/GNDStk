
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/documentation/Acknowledgements.hpp"
#include "Acknowledgements.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = AcknowledgementsClass;
using CPP = multigroup::Acknowledgements;

static const std::string CLASSNAME = "Acknowledgements";

namespace extract {
   static auto acknowledgement = [](auto &obj) { return &obj.acknowledgement; };
}

using CPPAcknowledgement = documentation::Acknowledgement;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstAcknowledgements
AcknowledgementsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Acknowledgements
AcknowledgementsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstAcknowledgements
AcknowledgementsCreateConst(
   ConstHandle2Acknowledgement *const acknowledgement, const size_t acknowledgementSize
) {
   ConstHandle2Acknowledgements handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPAcknowledgement>{}
   );
   for (size_t AcknowledgementN = 0; AcknowledgementN < acknowledgementSize; ++AcknowledgementN)
      AcknowledgementsAcknowledgementAdd(handle, acknowledgement[AcknowledgementN]);
   return handle;
}

// Create, general
Handle2Acknowledgements
AcknowledgementsCreate(
   ConstHandle2Acknowledgement *const acknowledgement, const size_t acknowledgementSize
) {
   ConstHandle2Acknowledgements handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPAcknowledgement>{}
   );
   for (size_t AcknowledgementN = 0; AcknowledgementN < acknowledgementSize; ++AcknowledgementN)
      AcknowledgementsAcknowledgementAdd(handle, acknowledgement[AcknowledgementN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
AcknowledgementsAssign(ConstHandle2Acknowledgements self, ConstHandle2ConstAcknowledgements from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
AcknowledgementsDelete(ConstHandle2ConstAcknowledgements self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
AcknowledgementsRead(ConstHandle2Acknowledgements self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
AcknowledgementsWrite(ConstHandle2ConstAcknowledgements self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
AcknowledgementsPrint(ConstHandle2ConstAcknowledgements self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
AcknowledgementsPrintXML(ConstHandle2ConstAcknowledgements self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
AcknowledgementsPrintJSON(ConstHandle2ConstAcknowledgements self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: acknowledgement
// -----------------------------------------------------------------------------

// Has
int
AcknowledgementsAcknowledgementHas(ConstHandle2ConstAcknowledgements self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementHas", self, extract::acknowledgement);
}

// Clear
void
AcknowledgementsAcknowledgementClear(ConstHandle2Acknowledgements self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementClear", self, extract::acknowledgement);
}

// Size
size_t
AcknowledgementsAcknowledgementSize(ConstHandle2ConstAcknowledgements self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementSize", self, extract::acknowledgement);
}

// Add
void
AcknowledgementsAcknowledgementAdd(ConstHandle2Acknowledgements self, ConstHandle2ConstAcknowledgement acknowledgement)
{
   detail::addToContainer<CPP,CPPAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementAdd", self, extract::acknowledgement, acknowledgement);
}

// Get, by index \in [0,size), const
Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetConst(ConstHandle2ConstAcknowledgements self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetConst", self, extract::acknowledgement, index_);
}

// Get, by index \in [0,size), non-const
Handle2Acknowledgement
AcknowledgementsAcknowledgementGet(ConstHandle2Acknowledgements self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Acknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGet", self, extract::acknowledgement, index_);
}

// Set, by index \in [0,size)
void
AcknowledgementsAcknowledgementSet(
   ConstHandle2Acknowledgements self,
   const size_t index_,
   ConstHandle2ConstAcknowledgement acknowledgement
) {
   detail::setByIndex<CPP,CPPAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementSet", self, extract::acknowledgement, index_, acknowledgement);
}

// Has, by encoding
int
AcknowledgementsAcknowledgementHasByEncoding(
   ConstHandle2ConstAcknowledgements self,
   const XMLName encoding
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementHasByEncoding",
       self, extract::acknowledgement, meta::encoding, encoding);
}

// Get, by encoding, const
Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByEncodingConst(
   ConstHandle2ConstAcknowledgements self,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2ConstAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByEncodingConst",
       self, extract::acknowledgement, meta::encoding, encoding);
}

// Get, by encoding, non-const
Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByEncoding(
   ConstHandle2Acknowledgements self,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2Acknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByEncoding",
       self, extract::acknowledgement, meta::encoding, encoding);
}

// Set, by encoding
void
AcknowledgementsAcknowledgementSetByEncoding(
   ConstHandle2Acknowledgements self,
   const XMLName encoding,
   ConstHandle2ConstAcknowledgement acknowledgement
) {
   detail::setByMetadatum<CPP,CPPAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementSetByEncoding",
       self, extract::acknowledgement, meta::encoding, encoding, acknowledgement);
}

// Has, by markup
int
AcknowledgementsAcknowledgementHasByMarkup(
   ConstHandle2ConstAcknowledgements self,
   const char *const markup
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementHasByMarkup",
       self, extract::acknowledgement, meta::markup, markup);
}

// Get, by markup, const
Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByMarkupConst(
   ConstHandle2ConstAcknowledgements self,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2ConstAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByMarkupConst",
       self, extract::acknowledgement, meta::markup, markup);
}

// Get, by markup, non-const
Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByMarkup(
   ConstHandle2Acknowledgements self,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2Acknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByMarkup",
       self, extract::acknowledgement, meta::markup, markup);
}

// Set, by markup
void
AcknowledgementsAcknowledgementSetByMarkup(
   ConstHandle2Acknowledgements self,
   const char *const markup,
   ConstHandle2ConstAcknowledgement acknowledgement
) {
   detail::setByMetadatum<CPP,CPPAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementSetByMarkup",
       self, extract::acknowledgement, meta::markup, markup, acknowledgement);
}

// Has, by label
int
AcknowledgementsAcknowledgementHasByLabel(
   ConstHandle2ConstAcknowledgements self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementHasByLabel",
       self, extract::acknowledgement, meta::label, label);
}

// Get, by label, const
Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByLabelConst(
   ConstHandle2ConstAcknowledgements self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByLabelConst",
       self, extract::acknowledgement, meta::label, label);
}

// Get, by label, non-const
Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByLabel(
   ConstHandle2Acknowledgements self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Acknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByLabel",
       self, extract::acknowledgement, meta::label, label);
}

// Set, by label
void
AcknowledgementsAcknowledgementSetByLabel(
   ConstHandle2Acknowledgements self,
   const XMLName label,
   ConstHandle2ConstAcknowledgement acknowledgement
) {
   detail::setByMetadatum<CPP,CPPAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementSetByLabel",
       self, extract::acknowledgement, meta::label, label, acknowledgement);
}

// Has, by type
int
AcknowledgementsAcknowledgementHasByType(
   ConstHandle2ConstAcknowledgements self,
   const XMLName type
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AcknowledgementHasByType",
       self, extract::acknowledgement, meta::type, type);
}

// Get, by type, const
Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByTypeConst(
   ConstHandle2ConstAcknowledgements self,
   const XMLName type
) {
   return detail::getByMetadatum<CPP,Handle2ConstAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByTypeConst",
       self, extract::acknowledgement, meta::type, type);
}

// Get, by type, non-const
Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByType(
   ConstHandle2Acknowledgements self,
   const XMLName type
) {
   return detail::getByMetadatum<CPP,Handle2Acknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementGetByType",
       self, extract::acknowledgement, meta::type, type);
}

// Set, by type
void
AcknowledgementsAcknowledgementSetByType(
   ConstHandle2Acknowledgements self,
   const XMLName type,
   ConstHandle2ConstAcknowledgement acknowledgement
) {
   detail::setByMetadatum<CPP,CPPAcknowledgement>
      (CLASSNAME, CLASSNAME+"AcknowledgementSetByType",
       self, extract::acknowledgement, meta::type, type, acknowledgement);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/Acknowledgements/src/custom.cpp"
