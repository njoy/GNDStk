
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/documentation/RelatedItem.hpp"
#include "RelatedItem.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = RelatedItemClass;
using CPP = multigroup::RelatedItem;

static const std::string CLASSNAME = "RelatedItem";

namespace extract {
   static auto name = [](auto &obj) { return &obj.name; };
   static auto href = [](auto &obj) { return &obj.href; };
   static auto relationType = [](auto &obj) { return &obj.relationType; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstRelatedItem
RelatedItemDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2RelatedItem
RelatedItemDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstRelatedItem
RelatedItemCreateConst(
   const UTF8Text name,
   const UTF8Text href,
   const enums::RelationType relationType
) {
   ConstHandle2RelatedItem handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      name,
      href,
      relationType
   );
   return handle;
}

// Create, general
Handle2RelatedItem
RelatedItemCreate(
   const UTF8Text name,
   const UTF8Text href,
   const enums::RelationType relationType
) {
   ConstHandle2RelatedItem handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      name,
      href,
      relationType
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
RelatedItemAssign(ConstHandle2RelatedItem This, ConstHandle2ConstRelatedItem from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
RelatedItemDelete(ConstHandle2ConstRelatedItem This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
RelatedItemRead(ConstHandle2RelatedItem This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
RelatedItemWrite(ConstHandle2ConstRelatedItem This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
RelatedItemPrint(ConstHandle2ConstRelatedItem This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
RelatedItemPrintXML(ConstHandle2ConstRelatedItem This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
RelatedItemPrintJSON(ConstHandle2ConstRelatedItem This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// Has
int
RelatedItemNameHas(ConstHandle2ConstRelatedItem This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NameHas", This, extract::name);
}

// Get
// Returns by value
UTF8Text
RelatedItemNameGet(ConstHandle2ConstRelatedItem This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NameGet", This, extract::name);
}

// Set
void
RelatedItemNameSet(ConstHandle2RelatedItem This, const UTF8Text name)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NameSet", This, extract::name, name);
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
RelatedItemHrefHas(ConstHandle2ConstRelatedItem This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
UTF8Text
RelatedItemHrefGet(ConstHandle2ConstRelatedItem This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
RelatedItemHrefSet(ConstHandle2RelatedItem This, const UTF8Text href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}


// -----------------------------------------------------------------------------
// Metadatum: relationType
// -----------------------------------------------------------------------------

// Has
int
RelatedItemRelationTypeHas(ConstHandle2ConstRelatedItem This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"RelationTypeHas", This, extract::relationType);
}

// Get
// Returns by value
enums::RelationType
RelatedItemRelationTypeGet(ConstHandle2ConstRelatedItem This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"RelationTypeGet", This, extract::relationType);
}

// Set
void
RelatedItemRelationTypeSet(ConstHandle2RelatedItem This, const enums::RelationType relationType)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"RelationTypeSet", This, extract::relationType, relationType);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/RelatedItem/src/custom.cpp"
