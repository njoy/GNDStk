
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Author is the basic handle type in this file. Example:
//    // Create a default Author object:
//    Author handle = AuthorDefault();
// Functions involving Author are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_AUTHOR
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_AUTHOR

#include "GNDStk.h"
#include "v2.0/documentation/Affiliations.h"
#include "v2.0/documentation/Note.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct AuthorClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Author
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct AuthorClass *Author;

// --- Const-aware handles.
typedef const struct AuthorClass *const ConstHandle2ConstAuthor;
typedef       struct AuthorClass *const ConstHandle2Author;
typedef const struct AuthorClass *      Handle2ConstAuthor;
typedef       struct AuthorClass *      Handle2Author;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstAuthor
AuthorDefaultConst();

// +++ Create, default
extern_c Handle2Author
AuthorDefault();

// --- Create, general, const
extern_c Handle2ConstAuthor
AuthorCreateConst(
   const UTF8Text name,
   const UTF8Text orcid,
   const UTF8Text email,
   ConstHandle2ConstAffiliations affiliations,
   ConstHandle2ConstNote note
);

// +++ Create, general
extern_c Handle2Author
AuthorCreate(
   const UTF8Text name,
   const UTF8Text orcid,
   const UTF8Text email,
   ConstHandle2ConstAffiliations affiliations,
   ConstHandle2ConstNote note
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
AuthorAssign(ConstHandle2Author self, ConstHandle2ConstAuthor from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
AuthorDelete(ConstHandle2ConstAuthor self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
AuthorRead(ConstHandle2Author self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
AuthorWrite(ConstHandle2ConstAuthor self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
AuthorPrint(ConstHandle2ConstAuthor self);

// +++ Print to standard output, as XML
extern_c int
AuthorPrintXML(ConstHandle2ConstAuthor self);

// +++ Print to standard output, as JSON
extern_c int
AuthorPrintJSON(ConstHandle2ConstAuthor self);


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AuthorNameHas(ConstHandle2ConstAuthor self);

// +++ Get
// +++ Returns by value
extern_c UTF8Text
AuthorNameGet(ConstHandle2ConstAuthor self);

// +++ Set
extern_c void
AuthorNameSet(ConstHandle2Author self, const UTF8Text name);


// -----------------------------------------------------------------------------
// Metadatum: orcid
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AuthorOrcidHas(ConstHandle2ConstAuthor self);

// +++ Get
// +++ Returns by value
extern_c UTF8Text
AuthorOrcidGet(ConstHandle2ConstAuthor self);

// +++ Set
extern_c void
AuthorOrcidSet(ConstHandle2Author self, const UTF8Text orcid);


// -----------------------------------------------------------------------------
// Metadatum: email
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AuthorEmailHas(ConstHandle2ConstAuthor self);

// +++ Get
// +++ Returns by value
extern_c UTF8Text
AuthorEmailGet(ConstHandle2ConstAuthor self);

// +++ Set
extern_c void
AuthorEmailSet(ConstHandle2Author self, const UTF8Text email);


// -----------------------------------------------------------------------------
// Child: affiliations
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AuthorAffiliationsHas(ConstHandle2ConstAuthor self);

// --- Get, const
extern_c Handle2ConstAffiliations
AuthorAffiliationsGetConst(ConstHandle2ConstAuthor self);

// +++ Get, non-const
extern_c Handle2Affiliations
AuthorAffiliationsGet(ConstHandle2Author self);

// +++ Set
extern_c void
AuthorAffiliationsSet(ConstHandle2Author self, ConstHandle2ConstAffiliations affiliations);


// -----------------------------------------------------------------------------
// Child: note
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AuthorNoteHas(ConstHandle2ConstAuthor self);

// --- Get, const
extern_c Handle2ConstNote
AuthorNoteGetConst(ConstHandle2ConstAuthor self);

// +++ Get, non-const
extern_c Handle2Note
AuthorNoteGet(ConstHandle2Author self);

// +++ Set
extern_c void
AuthorNoteSet(ConstHandle2Author self, ConstHandle2ConstNote note);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/Author/src/custom.h"

#undef extern_c
#endif
