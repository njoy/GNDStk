
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Affiliation is the basic handle type in this file. Example:
//    // Create a default Affiliation object:
//    Affiliation handle = AffiliationDefault();
// Functions involving Affiliation are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_AFFILIATION
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_AFFILIATION

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct AffiliationClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Affiliation
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct AffiliationClass *Affiliation;

// --- Const-aware handles.
typedef const struct AffiliationClass *const ConstHandle2ConstAffiliation;
typedef       struct AffiliationClass *const ConstHandle2Affiliation;
typedef const struct AffiliationClass *      Handle2ConstAffiliation;
typedef       struct AffiliationClass *      Handle2Affiliation;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstAffiliation
AffiliationDefaultConst();

// +++ Create, default
extern_c Handle2Affiliation
AffiliationDefault();

// --- Create, general, const
extern_c Handle2ConstAffiliation
AffiliationCreateConst(
   const UTF8Text name,
   const UTF8Text href
);

// +++ Create, general
extern_c Handle2Affiliation
AffiliationCreate(
   const UTF8Text name,
   const UTF8Text href
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
AffiliationAssign(ConstHandle2Affiliation self, ConstHandle2ConstAffiliation from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
AffiliationDelete(ConstHandle2ConstAffiliation self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
AffiliationRead(ConstHandle2Affiliation self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
AffiliationWrite(ConstHandle2ConstAffiliation self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
AffiliationPrint(ConstHandle2ConstAffiliation self);

// +++ Print to standard output, as XML
extern_c int
AffiliationPrintXML(ConstHandle2ConstAffiliation self);

// +++ Print to standard output, as JSON
extern_c int
AffiliationPrintJSON(ConstHandle2ConstAffiliation self);


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AffiliationNameHas(ConstHandle2ConstAffiliation self);

// +++ Get
// +++ Returns by value
extern_c UTF8Text
AffiliationNameGet(ConstHandle2ConstAffiliation self);

// +++ Set
extern_c void
AffiliationNameSet(ConstHandle2Affiliation self, const UTF8Text name);


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AffiliationHrefHas(ConstHandle2ConstAffiliation self);

// +++ Get
// +++ Returns by value
extern_c UTF8Text
AffiliationHrefGet(ConstHandle2ConstAffiliation self);

// +++ Set
extern_c void
AffiliationHrefSet(ConstHandle2Affiliation self, const UTF8Text href);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/Affiliation/src/custom.h"

#undef extern_c
#endif
