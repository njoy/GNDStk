
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// RelatedItems is the basic handle type in this file. Example:
//    // Create a default RelatedItems object:
//    RelatedItems handle = RelatedItemsDefault();
// Functions involving RelatedItems are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TEST_V2_0_DOCUMENTATION_RELATEDITEMS
#define C_INTERFACE_TEST_V2_0_DOCUMENTATION_RELATEDITEMS

#include "GNDStk.h"
#include "v2.0/documentation/RelatedItem.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct RelatedItemsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ RelatedItems
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct RelatedItemsClass *RelatedItems;

// --- Const-aware handles.
typedef const struct RelatedItemsClass *const ConstHandle2ConstRelatedItems;
typedef       struct RelatedItemsClass *const ConstHandle2RelatedItems;
typedef const struct RelatedItemsClass *      Handle2ConstRelatedItems;
typedef       struct RelatedItemsClass *      Handle2RelatedItems;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstRelatedItems
RelatedItemsDefaultConst();

// +++ Create, default
extern_c Handle2RelatedItems
RelatedItemsDefault();

// --- Create, general, const
extern_c Handle2ConstRelatedItems
RelatedItemsCreateConst(
   ConstHandle2RelatedItem *const relatedItem, const size_t relatedItemSize
);

// +++ Create, general
extern_c Handle2RelatedItems
RelatedItemsCreate(
   ConstHandle2RelatedItem *const relatedItem, const size_t relatedItemSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
RelatedItemsAssign(ConstHandle2RelatedItems This, ConstHandle2ConstRelatedItems from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
RelatedItemsDelete(ConstHandle2ConstRelatedItems This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
RelatedItemsRead(ConstHandle2RelatedItems This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
RelatedItemsWrite(ConstHandle2ConstRelatedItems This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
RelatedItemsPrint(ConstHandle2ConstRelatedItems This);

// +++ Print to standard output, as XML
extern_c int
RelatedItemsPrintXML(ConstHandle2ConstRelatedItems This);

// +++ Print to standard output, as JSON
extern_c int
RelatedItemsPrintJSON(ConstHandle2ConstRelatedItems This);


// -----------------------------------------------------------------------------
// Child: relatedItem
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
RelatedItemsRelatedItemHas(ConstHandle2ConstRelatedItems This);

// +++ Clear
extern_c void
RelatedItemsRelatedItemClear(ConstHandle2RelatedItems This);

// +++ Size
extern_c size_t
RelatedItemsRelatedItemSize(ConstHandle2ConstRelatedItems This);

// +++ Add
extern_c void
RelatedItemsRelatedItemAdd(ConstHandle2RelatedItems This, ConstHandle2ConstRelatedItem relatedItem);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstRelatedItem
RelatedItemsRelatedItemGetConst(ConstHandle2ConstRelatedItems This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2RelatedItem
RelatedItemsRelatedItemGet(ConstHandle2RelatedItems This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
RelatedItemsRelatedItemSet(
   ConstHandle2RelatedItems This,
   const size_t index_,
   ConstHandle2ConstRelatedItem relatedItem
);

// +++ Has, by name
extern_c int
RelatedItemsRelatedItemHasByName(
   ConstHandle2ConstRelatedItems This,
   const UTF8Text name
);

// --- Get, by name, const
extern_c Handle2ConstRelatedItem
RelatedItemsRelatedItemGetByNameConst(
   ConstHandle2ConstRelatedItems This,
   const UTF8Text name
);

// +++ Get, by name, non-const
extern_c Handle2RelatedItem
RelatedItemsRelatedItemGetByName(
   ConstHandle2RelatedItems This,
   const UTF8Text name
);

// +++ Set, by name
extern_c void
RelatedItemsRelatedItemSetByName(
   ConstHandle2RelatedItems This,
   const UTF8Text name,
   ConstHandle2ConstRelatedItem relatedItem
);

// +++ Has, by href
extern_c int
RelatedItemsRelatedItemHasByHref(
   ConstHandle2ConstRelatedItems This,
   const UTF8Text href
);

// --- Get, by href, const
extern_c Handle2ConstRelatedItem
RelatedItemsRelatedItemGetByHrefConst(
   ConstHandle2ConstRelatedItems This,
   const UTF8Text href
);

// +++ Get, by href, non-const
extern_c Handle2RelatedItem
RelatedItemsRelatedItemGetByHref(
   ConstHandle2RelatedItems This,
   const UTF8Text href
);

// +++ Set, by href
extern_c void
RelatedItemsRelatedItemSetByHref(
   ConstHandle2RelatedItems This,
   const UTF8Text href,
   ConstHandle2ConstRelatedItem relatedItem
);

// +++ Has, by relationType
extern_c int
RelatedItemsRelatedItemHasByRelationType(
   ConstHandle2ConstRelatedItems This,
   const enums::RelationType relationType
);

// --- Get, by relationType, const
extern_c Handle2ConstRelatedItem
RelatedItemsRelatedItemGetByRelationTypeConst(
   ConstHandle2ConstRelatedItems This,
   const enums::RelationType relationType
);

// +++ Get, by relationType, non-const
extern_c Handle2RelatedItem
RelatedItemsRelatedItemGetByRelationType(
   ConstHandle2RelatedItems This,
   const enums::RelationType relationType
);

// +++ Set, by relationType
extern_c void
RelatedItemsRelatedItemSetByRelationType(
   ConstHandle2RelatedItems This,
   const enums::RelationType relationType,
   ConstHandle2ConstRelatedItem relatedItem
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/RelatedItems/src/custom.h"

#undef extern_c
#endif
