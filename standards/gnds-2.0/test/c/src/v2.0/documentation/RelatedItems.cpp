
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/documentation/RelatedItems.hpp"
#include "RelatedItems.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = RelatedItemsClass;
using CPP = multigroup::RelatedItems;

static const std::string CLASSNAME = "RelatedItems";

namespace extract {
   static auto relatedItem = [](auto &obj) { return &obj.relatedItem; };
}

using CPPRelatedItem = documentation::RelatedItem;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstRelatedItems
RelatedItemsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2RelatedItems
RelatedItemsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstRelatedItems
RelatedItemsCreateConst(
   ConstHandle2RelatedItem *const relatedItem, const size_t relatedItemSize
) {
   ConstHandle2RelatedItems handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPRelatedItem>{}
   );
   for (size_t RelatedItemN = 0; RelatedItemN < relatedItemSize; ++RelatedItemN)
      RelatedItemsRelatedItemAdd(handle, relatedItem[RelatedItemN]);
   return handle;
}

// Create, general
Handle2RelatedItems
RelatedItemsCreate(
   ConstHandle2RelatedItem *const relatedItem, const size_t relatedItemSize
) {
   ConstHandle2RelatedItems handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPRelatedItem>{}
   );
   for (size_t RelatedItemN = 0; RelatedItemN < relatedItemSize; ++RelatedItemN)
      RelatedItemsRelatedItemAdd(handle, relatedItem[RelatedItemN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
RelatedItemsAssign(ConstHandle2RelatedItems self, ConstHandle2ConstRelatedItems from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
RelatedItemsDelete(ConstHandle2ConstRelatedItems self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
RelatedItemsRead(ConstHandle2RelatedItems self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
RelatedItemsWrite(ConstHandle2ConstRelatedItems self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
RelatedItemsPrint(ConstHandle2ConstRelatedItems self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
RelatedItemsPrintXML(ConstHandle2ConstRelatedItems self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
RelatedItemsPrintJSON(ConstHandle2ConstRelatedItems self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: relatedItem
// -----------------------------------------------------------------------------

// Has
int
RelatedItemsRelatedItemHas(ConstHandle2ConstRelatedItems self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"RelatedItemHas", self, extract::relatedItem);
}

// Clear
void
RelatedItemsRelatedItemClear(ConstHandle2RelatedItems self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"RelatedItemClear", self, extract::relatedItem);
}

// Size
size_t
RelatedItemsRelatedItemSize(ConstHandle2ConstRelatedItems self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"RelatedItemSize", self, extract::relatedItem);
}

// Add
void
RelatedItemsRelatedItemAdd(ConstHandle2RelatedItems self, ConstHandle2ConstRelatedItem relatedItem)
{
   detail::addToContainer<CPP,CPPRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemAdd", self, extract::relatedItem, relatedItem);
}

// Get, by index \in [0,size), const
Handle2ConstRelatedItem
RelatedItemsRelatedItemGetConst(ConstHandle2ConstRelatedItems self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetConst", self, extract::relatedItem, index_);
}

// Get, by index \in [0,size), non-const
Handle2RelatedItem
RelatedItemsRelatedItemGet(ConstHandle2RelatedItems self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2RelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGet", self, extract::relatedItem, index_);
}

// Set, by index \in [0,size)
void
RelatedItemsRelatedItemSet(
   ConstHandle2RelatedItems self,
   const size_t index_,
   ConstHandle2ConstRelatedItem relatedItem
) {
   detail::setByIndex<CPP,CPPRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemSet", self, extract::relatedItem, index_, relatedItem);
}

// Has, by name
int
RelatedItemsRelatedItemHasByName(
   ConstHandle2ConstRelatedItems self,
   const UTF8Text name
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"RelatedItemHasByName",
       self, extract::relatedItem, meta::name, name);
}

// Get, by name, const
Handle2ConstRelatedItem
RelatedItemsRelatedItemGetByNameConst(
   ConstHandle2ConstRelatedItems self,
   const UTF8Text name
) {
   return detail::getByMetadatum<CPP,Handle2ConstRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetByNameConst",
       self, extract::relatedItem, meta::name, name);
}

// Get, by name, non-const
Handle2RelatedItem
RelatedItemsRelatedItemGetByName(
   ConstHandle2RelatedItems self,
   const UTF8Text name
) {
   return detail::getByMetadatum<CPP,Handle2RelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetByName",
       self, extract::relatedItem, meta::name, name);
}

// Set, by name
void
RelatedItemsRelatedItemSetByName(
   ConstHandle2RelatedItems self,
   const UTF8Text name,
   ConstHandle2ConstRelatedItem relatedItem
) {
   detail::setByMetadatum<CPP,CPPRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemSetByName",
       self, extract::relatedItem, meta::name, name, relatedItem);
}

// Has, by href
int
RelatedItemsRelatedItemHasByHref(
   ConstHandle2ConstRelatedItems self,
   const UTF8Text href
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"RelatedItemHasByHref",
       self, extract::relatedItem, meta::href, href);
}

// Get, by href, const
Handle2ConstRelatedItem
RelatedItemsRelatedItemGetByHrefConst(
   ConstHandle2ConstRelatedItems self,
   const UTF8Text href
) {
   return detail::getByMetadatum<CPP,Handle2ConstRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetByHrefConst",
       self, extract::relatedItem, meta::href, href);
}

// Get, by href, non-const
Handle2RelatedItem
RelatedItemsRelatedItemGetByHref(
   ConstHandle2RelatedItems self,
   const UTF8Text href
) {
   return detail::getByMetadatum<CPP,Handle2RelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetByHref",
       self, extract::relatedItem, meta::href, href);
}

// Set, by href
void
RelatedItemsRelatedItemSetByHref(
   ConstHandle2RelatedItems self,
   const UTF8Text href,
   ConstHandle2ConstRelatedItem relatedItem
) {
   detail::setByMetadatum<CPP,CPPRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemSetByHref",
       self, extract::relatedItem, meta::href, href, relatedItem);
}

// Has, by relationType
int
RelatedItemsRelatedItemHasByRelationType(
   ConstHandle2ConstRelatedItems self,
   const enums::RelationType relationType
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"RelatedItemHasByRelationType",
       self, extract::relatedItem, meta::relationType, relationType);
}

// Get, by relationType, const
Handle2ConstRelatedItem
RelatedItemsRelatedItemGetByRelationTypeConst(
   ConstHandle2ConstRelatedItems self,
   const enums::RelationType relationType
) {
   return detail::getByMetadatum<CPP,Handle2ConstRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetByRelationTypeConst",
       self, extract::relatedItem, meta::relationType, relationType);
}

// Get, by relationType, non-const
Handle2RelatedItem
RelatedItemsRelatedItemGetByRelationType(
   ConstHandle2RelatedItems self,
   const enums::RelationType relationType
) {
   return detail::getByMetadatum<CPP,Handle2RelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemGetByRelationType",
       self, extract::relatedItem, meta::relationType, relationType);
}

// Set, by relationType
void
RelatedItemsRelatedItemSetByRelationType(
   ConstHandle2RelatedItems self,
   const enums::RelationType relationType,
   ConstHandle2ConstRelatedItem relatedItem
) {
   detail::setByMetadatum<CPP,CPPRelatedItem>
      (CLASSNAME, CLASSNAME+"RelatedItemSetByRelationType",
       self, extract::relatedItem, meta::relationType, relationType, relatedItem);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/RelatedItems/src/custom.cpp"
