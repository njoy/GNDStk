
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/documentation/ExforDataSets.hpp"
#include "ExforDataSets.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ExforDataSetsClass;
using CPP = multigroup::ExforDataSets;

static const std::string CLASSNAME = "ExforDataSets";

namespace extract {
   static auto exforDataSet = [](auto &obj) { return &obj.exforDataSet; };
}

using CPPExforDataSet = documentation::ExforDataSet;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstExforDataSets
ExforDataSetsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ExforDataSets
ExforDataSetsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstExforDataSets
ExforDataSetsCreateConst(
   ConstHandle2ExforDataSet *const exforDataSet, const size_t exforDataSetSize
) {
   ConstHandle2ExforDataSets handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPExforDataSet>{}
   );
   for (size_t ExforDataSetN = 0; ExforDataSetN < exforDataSetSize; ++ExforDataSetN)
      ExforDataSetsExforDataSetAdd(handle, exforDataSet[ExforDataSetN]);
   return handle;
}

// Create, general
Handle2ExforDataSets
ExforDataSetsCreate(
   ConstHandle2ExforDataSet *const exforDataSet, const size_t exforDataSetSize
) {
   ConstHandle2ExforDataSets handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPExforDataSet>{}
   );
   for (size_t ExforDataSetN = 0; ExforDataSetN < exforDataSetSize; ++ExforDataSetN)
      ExforDataSetsExforDataSetAdd(handle, exforDataSet[ExforDataSetN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ExforDataSetsAssign(ConstHandle2ExforDataSets This, ConstHandle2ConstExforDataSets from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ExforDataSetsDelete(ConstHandle2ConstExforDataSets This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ExforDataSetsRead(ConstHandle2ExforDataSets This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ExforDataSetsWrite(ConstHandle2ConstExforDataSets This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ExforDataSetsPrint(ConstHandle2ConstExforDataSets This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ExforDataSetsPrintXML(ConstHandle2ConstExforDataSets This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ExforDataSetsPrintJSON(ConstHandle2ConstExforDataSets This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: exforDataSet
// -----------------------------------------------------------------------------

// Has
int
ExforDataSetsExforDataSetHas(ConstHandle2ConstExforDataSets This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ExforDataSetHas", This, extract::exforDataSet);
}

// Clear
void
ExforDataSetsExforDataSetClear(ConstHandle2ExforDataSets This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ExforDataSetClear", This, extract::exforDataSet);
}

// Size
size_t
ExforDataSetsExforDataSetSize(ConstHandle2ConstExforDataSets This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ExforDataSetSize", This, extract::exforDataSet);
}

// Add
void
ExforDataSetsExforDataSetAdd(ConstHandle2ExforDataSets This, ConstHandle2ConstExforDataSet exforDataSet)
{
   detail::addToContainer<CPP,CPPExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetAdd", This, extract::exforDataSet, exforDataSet);
}

// Get, by index \in [0,size), const
Handle2ConstExforDataSet
ExforDataSetsExforDataSetGetConst(ConstHandle2ConstExforDataSets This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetGetConst", This, extract::exforDataSet, index_);
}

// Get, by index \in [0,size), non-const
Handle2ExforDataSet
ExforDataSetsExforDataSetGet(ConstHandle2ExforDataSets This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetGet", This, extract::exforDataSet, index_);
}

// Set, by index \in [0,size)
void
ExforDataSetsExforDataSetSet(
   ConstHandle2ExforDataSets This,
   const size_t index_,
   ConstHandle2ConstExforDataSet exforDataSet
) {
   detail::setByIndex<CPP,CPPExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetSet", This, extract::exforDataSet, index_, exforDataSet);
}

// Has, by subentry
int
ExforDataSetsExforDataSetHasBySubentry(
   ConstHandle2ConstExforDataSets This,
   const XMLName subentry
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ExforDataSetHasBySubentry",
       This, extract::exforDataSet, meta::subentry, subentry);
}

// Get, by subentry, const
Handle2ConstExforDataSet
ExforDataSetsExforDataSetGetBySubentryConst(
   ConstHandle2ConstExforDataSets This,
   const XMLName subentry
) {
   return detail::getByMetadatum<CPP,Handle2ConstExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetGetBySubentryConst",
       This, extract::exforDataSet, meta::subentry, subentry);
}

// Get, by subentry, non-const
Handle2ExforDataSet
ExforDataSetsExforDataSetGetBySubentry(
   ConstHandle2ExforDataSets This,
   const XMLName subentry
) {
   return detail::getByMetadatum<CPP,Handle2ExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetGetBySubentry",
       This, extract::exforDataSet, meta::subentry, subentry);
}

// Set, by subentry
void
ExforDataSetsExforDataSetSetBySubentry(
   ConstHandle2ExforDataSets This,
   const XMLName subentry,
   ConstHandle2ConstExforDataSet exforDataSet
) {
   detail::setByMetadatum<CPP,CPPExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetSetBySubentry",
       This, extract::exforDataSet, meta::subentry, subentry, exforDataSet);
}

// Has, by retrievalDate
int
ExforDataSetsExforDataSetHasByRetrievalDate(
   ConstHandle2ConstExforDataSets This,
   const char *const retrievalDate
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ExforDataSetHasByRetrievalDate",
       This, extract::exforDataSet, meta::retrievalDate, retrievalDate);
}

// Get, by retrievalDate, const
Handle2ConstExforDataSet
ExforDataSetsExforDataSetGetByRetrievalDateConst(
   ConstHandle2ConstExforDataSets This,
   const char *const retrievalDate
) {
   return detail::getByMetadatum<CPP,Handle2ConstExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetGetByRetrievalDateConst",
       This, extract::exforDataSet, meta::retrievalDate, retrievalDate);
}

// Get, by retrievalDate, non-const
Handle2ExforDataSet
ExforDataSetsExforDataSetGetByRetrievalDate(
   ConstHandle2ExforDataSets This,
   const char *const retrievalDate
) {
   return detail::getByMetadatum<CPP,Handle2ExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetGetByRetrievalDate",
       This, extract::exforDataSet, meta::retrievalDate, retrievalDate);
}

// Set, by retrievalDate
void
ExforDataSetsExforDataSetSetByRetrievalDate(
   ConstHandle2ExforDataSets This,
   const char *const retrievalDate,
   ConstHandle2ConstExforDataSet exforDataSet
) {
   detail::setByMetadatum<CPP,CPPExforDataSet>
      (CLASSNAME, CLASSNAME+"ExforDataSetSetByRetrievalDate",
       This, extract::exforDataSet, meta::retrievalDate, retrievalDate, exforDataSet);
}
