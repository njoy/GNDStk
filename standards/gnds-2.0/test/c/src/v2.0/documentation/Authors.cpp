
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/documentation/Authors.hpp"
#include "Authors.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = AuthorsClass;
using CPP = multigroup::Authors;

static const std::string CLASSNAME = "Authors";

namespace extract {
   static auto author = [](auto &obj) { return &obj.author; };
}

using CPPAuthor = documentation::Author;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstAuthors
AuthorsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Authors
AuthorsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstAuthors
AuthorsCreateConst(
   ConstHandle2Author *const author, const size_t authorSize
) {
   ConstHandle2Authors handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPAuthor>{}
   );
   for (size_t AuthorN = 0; AuthorN < authorSize; ++AuthorN)
      AuthorsAuthorAdd(handle, author[AuthorN]);
   return handle;
}

// Create, general
Handle2Authors
AuthorsCreate(
   ConstHandle2Author *const author, const size_t authorSize
) {
   ConstHandle2Authors handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPAuthor>{}
   );
   for (size_t AuthorN = 0; AuthorN < authorSize; ++AuthorN)
      AuthorsAuthorAdd(handle, author[AuthorN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
AuthorsAssign(ConstHandle2Authors self, ConstHandle2ConstAuthors from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
AuthorsDelete(ConstHandle2ConstAuthors self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
AuthorsRead(ConstHandle2Authors self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
AuthorsWrite(ConstHandle2ConstAuthors self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
AuthorsPrint(ConstHandle2ConstAuthors self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
AuthorsPrintXML(ConstHandle2ConstAuthors self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
AuthorsPrintJSON(ConstHandle2ConstAuthors self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: author
// -----------------------------------------------------------------------------

// Has
int
AuthorsAuthorHas(ConstHandle2ConstAuthors self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AuthorHas", self, extract::author);
}

// Clear
void
AuthorsAuthorClear(ConstHandle2Authors self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"AuthorClear", self, extract::author);
}

// Size
size_t
AuthorsAuthorSize(ConstHandle2ConstAuthors self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"AuthorSize", self, extract::author);
}

// Add
void
AuthorsAuthorAdd(ConstHandle2Authors self, ConstHandle2ConstAuthor author)
{
   detail::addToContainer<CPP,CPPAuthor>
      (CLASSNAME, CLASSNAME+"AuthorAdd", self, extract::author, author);
}

// Get, by index \in [0,size), const
Handle2ConstAuthor
AuthorsAuthorGetConst(ConstHandle2ConstAuthors self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstAuthor>
      (CLASSNAME, CLASSNAME+"AuthorGetConst", self, extract::author, index_);
}

// Get, by index \in [0,size), non-const
Handle2Author
AuthorsAuthorGet(ConstHandle2Authors self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Author>
      (CLASSNAME, CLASSNAME+"AuthorGet", self, extract::author, index_);
}

// Set, by index \in [0,size)
void
AuthorsAuthorSet(
   ConstHandle2Authors self,
   const size_t index_,
   ConstHandle2ConstAuthor author
) {
   detail::setByIndex<CPP,CPPAuthor>
      (CLASSNAME, CLASSNAME+"AuthorSet", self, extract::author, index_, author);
}

// Has, by name
int
AuthorsAuthorHasByName(
   ConstHandle2ConstAuthors self,
   const UTF8Text name
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AuthorHasByName",
       self, extract::author, meta::name, name);
}

// Get, by name, const
Handle2ConstAuthor
AuthorsAuthorGetByNameConst(
   ConstHandle2ConstAuthors self,
   const UTF8Text name
) {
   return detail::getByMetadatum<CPP,Handle2ConstAuthor>
      (CLASSNAME, CLASSNAME+"AuthorGetByNameConst",
       self, extract::author, meta::name, name);
}

// Get, by name, non-const
Handle2Author
AuthorsAuthorGetByName(
   ConstHandle2Authors self,
   const UTF8Text name
) {
   return detail::getByMetadatum<CPP,Handle2Author>
      (CLASSNAME, CLASSNAME+"AuthorGetByName",
       self, extract::author, meta::name, name);
}

// Set, by name
void
AuthorsAuthorSetByName(
   ConstHandle2Authors self,
   const UTF8Text name,
   ConstHandle2ConstAuthor author
) {
   detail::setByMetadatum<CPP,CPPAuthor>
      (CLASSNAME, CLASSNAME+"AuthorSetByName",
       self, extract::author, meta::name, name, author);
}

// Has, by orcid
int
AuthorsAuthorHasByOrcid(
   ConstHandle2ConstAuthors self,
   const UTF8Text orcid
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AuthorHasByOrcid",
       self, extract::author, meta::orcid, orcid);
}

// Get, by orcid, const
Handle2ConstAuthor
AuthorsAuthorGetByOrcidConst(
   ConstHandle2ConstAuthors self,
   const UTF8Text orcid
) {
   return detail::getByMetadatum<CPP,Handle2ConstAuthor>
      (CLASSNAME, CLASSNAME+"AuthorGetByOrcidConst",
       self, extract::author, meta::orcid, orcid);
}

// Get, by orcid, non-const
Handle2Author
AuthorsAuthorGetByOrcid(
   ConstHandle2Authors self,
   const UTF8Text orcid
) {
   return detail::getByMetadatum<CPP,Handle2Author>
      (CLASSNAME, CLASSNAME+"AuthorGetByOrcid",
       self, extract::author, meta::orcid, orcid);
}

// Set, by orcid
void
AuthorsAuthorSetByOrcid(
   ConstHandle2Authors self,
   const UTF8Text orcid,
   ConstHandle2ConstAuthor author
) {
   detail::setByMetadatum<CPP,CPPAuthor>
      (CLASSNAME, CLASSNAME+"AuthorSetByOrcid",
       self, extract::author, meta::orcid, orcid, author);
}

// Has, by email
int
AuthorsAuthorHasByEmail(
   ConstHandle2ConstAuthors self,
   const UTF8Text email
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AuthorHasByEmail",
       self, extract::author, meta::email, email);
}

// Get, by email, const
Handle2ConstAuthor
AuthorsAuthorGetByEmailConst(
   ConstHandle2ConstAuthors self,
   const UTF8Text email
) {
   return detail::getByMetadatum<CPP,Handle2ConstAuthor>
      (CLASSNAME, CLASSNAME+"AuthorGetByEmailConst",
       self, extract::author, meta::email, email);
}

// Get, by email, non-const
Handle2Author
AuthorsAuthorGetByEmail(
   ConstHandle2Authors self,
   const UTF8Text email
) {
   return detail::getByMetadatum<CPP,Handle2Author>
      (CLASSNAME, CLASSNAME+"AuthorGetByEmail",
       self, extract::author, meta::email, email);
}

// Set, by email
void
AuthorsAuthorSetByEmail(
   ConstHandle2Authors self,
   const UTF8Text email,
   ConstHandle2ConstAuthor author
) {
   detail::setByMetadatum<CPP,CPPAuthor>
      (CLASSNAME, CLASSNAME+"AuthorSetByEmail",
       self, extract::author, meta::email, email, author);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/Authors/src/custom.cpp"
