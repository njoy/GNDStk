
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/documentation/OutputDecks.hpp"
#include "OutputDecks.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = OutputDecksClass;
using CPP = multigroup::OutputDecks;

static const std::string CLASSNAME = "OutputDecks";

namespace extract {
   static auto outputDeck = [](auto &obj) { return &obj.outputDeck; };
}

using CPPOutputDeck = documentation::OutputDeck;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstOutputDecks
OutputDecksDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2OutputDecks
OutputDecksDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstOutputDecks
OutputDecksCreateConst(
   ConstHandle2OutputDeck *const outputDeck, const size_t outputDeckSize
) {
   ConstHandle2OutputDecks handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPOutputDeck>{}
   );
   for (size_t OutputDeckN = 0; OutputDeckN < outputDeckSize; ++OutputDeckN)
      OutputDecksOutputDeckAdd(handle, outputDeck[OutputDeckN]);
   return handle;
}

// Create, general
Handle2OutputDecks
OutputDecksCreate(
   ConstHandle2OutputDeck *const outputDeck, const size_t outputDeckSize
) {
   ConstHandle2OutputDecks handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPOutputDeck>{}
   );
   for (size_t OutputDeckN = 0; OutputDeckN < outputDeckSize; ++OutputDeckN)
      OutputDecksOutputDeckAdd(handle, outputDeck[OutputDeckN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
OutputDecksAssign(ConstHandle2OutputDecks self, ConstHandle2ConstOutputDecks from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
OutputDecksDelete(ConstHandle2ConstOutputDecks self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
OutputDecksRead(ConstHandle2OutputDecks self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
OutputDecksWrite(ConstHandle2ConstOutputDecks self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
OutputDecksPrint(ConstHandle2ConstOutputDecks self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
OutputDecksPrintXML(ConstHandle2ConstOutputDecks self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
OutputDecksPrintJSON(ConstHandle2ConstOutputDecks self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: outputDeck
// -----------------------------------------------------------------------------

// Has
int
OutputDecksOutputDeckHas(ConstHandle2ConstOutputDecks self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckHas", self, extract::outputDeck);
}

// Clear
void
OutputDecksOutputDeckClear(ConstHandle2OutputDecks self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckClear", self, extract::outputDeck);
}

// Size
size_t
OutputDecksOutputDeckSize(ConstHandle2ConstOutputDecks self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckSize", self, extract::outputDeck);
}

// Add
void
OutputDecksOutputDeckAdd(ConstHandle2OutputDecks self, ConstHandle2ConstOutputDeck outputDeck)
{
   detail::addToContainer<CPP,CPPOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckAdd", self, extract::outputDeck, outputDeck);
}

// Get, by index \in [0,size), const
Handle2ConstOutputDeck
OutputDecksOutputDeckGetConst(ConstHandle2ConstOutputDecks self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetConst", self, extract::outputDeck, index_);
}

// Get, by index \in [0,size), non-const
Handle2OutputDeck
OutputDecksOutputDeckGet(ConstHandle2OutputDecks self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2OutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGet", self, extract::outputDeck, index_);
}

// Set, by index \in [0,size)
void
OutputDecksOutputDeckSet(
   ConstHandle2OutputDecks self,
   const size_t index_,
   ConstHandle2ConstOutputDeck outputDeck
) {
   detail::setByIndex<CPP,CPPOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckSet", self, extract::outputDeck, index_, outputDeck);
}

// Has, by encoding
int
OutputDecksOutputDeckHasByEncoding(
   ConstHandle2ConstOutputDecks self,
   const XMLName encoding
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckHasByEncoding",
       self, extract::outputDeck, meta::encoding, encoding);
}

// Get, by encoding, const
Handle2ConstOutputDeck
OutputDecksOutputDeckGetByEncodingConst(
   ConstHandle2ConstOutputDecks self,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2ConstOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByEncodingConst",
       self, extract::outputDeck, meta::encoding, encoding);
}

// Get, by encoding, non-const
Handle2OutputDeck
OutputDecksOutputDeckGetByEncoding(
   ConstHandle2OutputDecks self,
   const XMLName encoding
) {
   return detail::getByMetadatum<CPP,Handle2OutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByEncoding",
       self, extract::outputDeck, meta::encoding, encoding);
}

// Set, by encoding
void
OutputDecksOutputDeckSetByEncoding(
   ConstHandle2OutputDecks self,
   const XMLName encoding,
   ConstHandle2ConstOutputDeck outputDeck
) {
   detail::setByMetadatum<CPP,CPPOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckSetByEncoding",
       self, extract::outputDeck, meta::encoding, encoding, outputDeck);
}

// Has, by markup
int
OutputDecksOutputDeckHasByMarkup(
   ConstHandle2ConstOutputDecks self,
   const char *const markup
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckHasByMarkup",
       self, extract::outputDeck, meta::markup, markup);
}

// Get, by markup, const
Handle2ConstOutputDeck
OutputDecksOutputDeckGetByMarkupConst(
   ConstHandle2ConstOutputDecks self,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2ConstOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByMarkupConst",
       self, extract::outputDeck, meta::markup, markup);
}

// Get, by markup, non-const
Handle2OutputDeck
OutputDecksOutputDeckGetByMarkup(
   ConstHandle2OutputDecks self,
   const char *const markup
) {
   return detail::getByMetadatum<CPP,Handle2OutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByMarkup",
       self, extract::outputDeck, meta::markup, markup);
}

// Set, by markup
void
OutputDecksOutputDeckSetByMarkup(
   ConstHandle2OutputDecks self,
   const char *const markup,
   ConstHandle2ConstOutputDeck outputDeck
) {
   detail::setByMetadatum<CPP,CPPOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckSetByMarkup",
       self, extract::outputDeck, meta::markup, markup, outputDeck);
}

// Has, by label
int
OutputDecksOutputDeckHasByLabel(
   ConstHandle2ConstOutputDecks self,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckHasByLabel",
       self, extract::outputDeck, meta::label, label);
}

// Get, by label, const
Handle2ConstOutputDeck
OutputDecksOutputDeckGetByLabelConst(
   ConstHandle2ConstOutputDecks self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByLabelConst",
       self, extract::outputDeck, meta::label, label);
}

// Get, by label, non-const
Handle2OutputDeck
OutputDecksOutputDeckGetByLabel(
   ConstHandle2OutputDecks self,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2OutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByLabel",
       self, extract::outputDeck, meta::label, label);
}

// Set, by label
void
OutputDecksOutputDeckSetByLabel(
   ConstHandle2OutputDecks self,
   const XMLName label,
   ConstHandle2ConstOutputDeck outputDeck
) {
   detail::setByMetadatum<CPP,CPPOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckSetByLabel",
       self, extract::outputDeck, meta::label, label, outputDeck);
}

// Has, by filename
int
OutputDecksOutputDeckHasByFilename(
   ConstHandle2ConstOutputDecks self,
   const XMLName filename
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"OutputDeckHasByFilename",
       self, extract::outputDeck, meta::filename, filename);
}

// Get, by filename, const
Handle2ConstOutputDeck
OutputDecksOutputDeckGetByFilenameConst(
   ConstHandle2ConstOutputDecks self,
   const XMLName filename
) {
   return detail::getByMetadatum<CPP,Handle2ConstOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByFilenameConst",
       self, extract::outputDeck, meta::filename, filename);
}

// Get, by filename, non-const
Handle2OutputDeck
OutputDecksOutputDeckGetByFilename(
   ConstHandle2OutputDecks self,
   const XMLName filename
) {
   return detail::getByMetadatum<CPP,Handle2OutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckGetByFilename",
       self, extract::outputDeck, meta::filename, filename);
}

// Set, by filename
void
OutputDecksOutputDeckSetByFilename(
   ConstHandle2OutputDecks self,
   const XMLName filename,
   ConstHandle2ConstOutputDeck outputDeck
) {
   detail::setByMetadatum<CPP,CPPOutputDeck>
      (CLASSNAME, CLASSNAME+"OutputDeckSetByFilename",
       self, extract::outputDeck, meta::filename, filename, outputDeck);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/documentation/OutputDecks/src/custom.cpp"
