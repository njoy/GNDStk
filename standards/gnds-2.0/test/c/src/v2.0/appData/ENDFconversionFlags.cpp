
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/appData/ENDFconversionFlags.hpp"
#include "ENDFconversionFlags.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ENDFconversionFlagsClass;
using CPP = multigroup::ENDFconversionFlags;

static const std::string CLASSNAME = "ENDFconversionFlags";

namespace extract {
   static auto conversion = [](auto &obj) { return &obj.conversion; };
}

using CPPConversion = appData::Conversion;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstENDFconversionFlags
ENDFconversionFlagsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ENDFconversionFlags
ENDFconversionFlagsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstENDFconversionFlags
ENDFconversionFlagsCreateConst(
   ConstHandle2ConstConversion conversion
) {
   ConstHandle2ENDFconversionFlags handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPConversion>(conversion)
   );
   return handle;
}

// Create, general
Handle2ENDFconversionFlags
ENDFconversionFlagsCreate(
   ConstHandle2ConstConversion conversion
) {
   ConstHandle2ENDFconversionFlags handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPConversion>(conversion)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ENDFconversionFlagsAssign(ConstHandle2ENDFconversionFlags self, ConstHandle2ConstENDFconversionFlags from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ENDFconversionFlagsDelete(ConstHandle2ConstENDFconversionFlags self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ENDFconversionFlagsRead(ConstHandle2ENDFconversionFlags self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ENDFconversionFlagsWrite(ConstHandle2ConstENDFconversionFlags self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ENDFconversionFlagsPrint(ConstHandle2ConstENDFconversionFlags self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ENDFconversionFlagsPrintXML(ConstHandle2ConstENDFconversionFlags self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ENDFconversionFlagsPrintJSON(ConstHandle2ConstENDFconversionFlags self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: conversion
// -----------------------------------------------------------------------------

// Has
int
ENDFconversionFlagsConversionHas(ConstHandle2ConstENDFconversionFlags self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ConversionHas", self, extract::conversion);
}

// Get, const
Handle2ConstConversion
ENDFconversionFlagsConversionGetConst(ConstHandle2ConstENDFconversionFlags self)
{
   return detail::getField<CPP,Handle2ConstConversion>
      (CLASSNAME, CLASSNAME+"ConversionGetConst", self, extract::conversion);
}

// Get, non-const
Handle2Conversion
ENDFconversionFlagsConversionGet(ConstHandle2ENDFconversionFlags self)
{
   return detail::getField<CPP,Handle2Conversion>
      (CLASSNAME, CLASSNAME+"ConversionGet", self, extract::conversion);
}

// Set
void
ENDFconversionFlagsConversionSet(ConstHandle2ENDFconversionFlags self, ConstHandle2ConstConversion conversion)
{
   detail::setField<CPP,CPPConversion>
      (CLASSNAME, CLASSNAME+"ConversionSet", self, extract::conversion, conversion);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/appData/ENDFconversionFlags/src/custom.cpp"
