
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2.0/extra/Uncertainty.hpp"
#include "Uncertainty.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = UncertaintyClass;
using CPP = multigroup::Uncertainty;

static const std::string CLASSNAME = "Uncertainty";

namespace extract {
   static auto standard = [](auto &obj) { return &obj.standard; };
   static auto logNormal = [](auto &obj) { return &obj.logNormal; };
   static auto confidenceIntervals = [](auto &obj) { return &obj.confidenceIntervals; };
   static auto covariance = [](auto &obj) { return &obj.covariance; };
   static auto listOfCovariances = [](auto &obj) { return &obj.listOfCovariances; };
}

using CPPStandard = containers::Standard;
using CPPLogNormal = containers::LogNormal;
using CPPConfidenceIntervals = containers::ConfidenceIntervals;
using CPPCovariance = containers::Covariance;
using CPPListOfCovariances = containers::ListOfCovariances;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstUncertainty
UncertaintyDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Uncertainty
UncertaintyDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstUncertainty
UncertaintyCreateConst(
   ConstHandle2ConstStandard standard,
   ConstHandle2ConstLogNormal logNormal,
   ConstHandle2ConstConfidenceIntervals confidenceIntervals,
   ConstHandle2ConstCovariance covariance,
   ConstHandle2ConstListOfCovariances listOfCovariances
) {
   ConstHandle2Uncertainty handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPStandard>(standard),
      detail::tocpp<CPPLogNormal>(logNormal),
      detail::tocpp<CPPConfidenceIntervals>(confidenceIntervals),
      detail::tocpp<CPPCovariance>(covariance),
      detail::tocpp<CPPListOfCovariances>(listOfCovariances)
   );
   return handle;
}

// Create, general
Handle2Uncertainty
UncertaintyCreate(
   ConstHandle2ConstStandard standard,
   ConstHandle2ConstLogNormal logNormal,
   ConstHandle2ConstConfidenceIntervals confidenceIntervals,
   ConstHandle2ConstCovariance covariance,
   ConstHandle2ConstListOfCovariances listOfCovariances
) {
   ConstHandle2Uncertainty handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPStandard>(standard),
      detail::tocpp<CPPLogNormal>(logNormal),
      detail::tocpp<CPPConfidenceIntervals>(confidenceIntervals),
      detail::tocpp<CPPCovariance>(covariance),
      detail::tocpp<CPPListOfCovariances>(listOfCovariances)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
UncertaintyAssign(ConstHandle2Uncertainty self, ConstHandle2ConstUncertainty from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
UncertaintyDelete(ConstHandle2ConstUncertainty self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
UncertaintyRead(ConstHandle2Uncertainty self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
UncertaintyWrite(ConstHandle2ConstUncertainty self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
UncertaintyPrint(ConstHandle2ConstUncertainty self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
UncertaintyPrintXML(ConstHandle2ConstUncertainty self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
UncertaintyPrintJSON(ConstHandle2ConstUncertainty self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: standard
// -----------------------------------------------------------------------------

// Has
int
UncertaintyStandardHas(ConstHandle2ConstUncertainty self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StandardHas", self, extract::standard);
}

// Get, const
Handle2ConstStandard
UncertaintyStandardGetConst(ConstHandle2ConstUncertainty self)
{
   return detail::getField<CPP,Handle2ConstStandard>
      (CLASSNAME, CLASSNAME+"StandardGetConst", self, extract::standard);
}

// Get, non-const
Handle2Standard
UncertaintyStandardGet(ConstHandle2Uncertainty self)
{
   return detail::getField<CPP,Handle2Standard>
      (CLASSNAME, CLASSNAME+"StandardGet", self, extract::standard);
}

// Set
void
UncertaintyStandardSet(ConstHandle2Uncertainty self, ConstHandle2ConstStandard standard)
{
   detail::setField<CPP,CPPStandard>
      (CLASSNAME, CLASSNAME+"StandardSet", self, extract::standard, standard);
}


// -----------------------------------------------------------------------------
// Child: logNormal
// -----------------------------------------------------------------------------

// Has
int
UncertaintyLogNormalHas(ConstHandle2ConstUncertainty self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LogNormalHas", self, extract::logNormal);
}

// Get, const
Handle2ConstLogNormal
UncertaintyLogNormalGetConst(ConstHandle2ConstUncertainty self)
{
   return detail::getField<CPP,Handle2ConstLogNormal>
      (CLASSNAME, CLASSNAME+"LogNormalGetConst", self, extract::logNormal);
}

// Get, non-const
Handle2LogNormal
UncertaintyLogNormalGet(ConstHandle2Uncertainty self)
{
   return detail::getField<CPP,Handle2LogNormal>
      (CLASSNAME, CLASSNAME+"LogNormalGet", self, extract::logNormal);
}

// Set
void
UncertaintyLogNormalSet(ConstHandle2Uncertainty self, ConstHandle2ConstLogNormal logNormal)
{
   detail::setField<CPP,CPPLogNormal>
      (CLASSNAME, CLASSNAME+"LogNormalSet", self, extract::logNormal, logNormal);
}


// -----------------------------------------------------------------------------
// Child: confidenceIntervals
// -----------------------------------------------------------------------------

// Has
int
UncertaintyConfidenceIntervalsHas(ConstHandle2ConstUncertainty self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ConfidenceIntervalsHas", self, extract::confidenceIntervals);
}

// Get, const
Handle2ConstConfidenceIntervals
UncertaintyConfidenceIntervalsGetConst(ConstHandle2ConstUncertainty self)
{
   return detail::getField<CPP,Handle2ConstConfidenceIntervals>
      (CLASSNAME, CLASSNAME+"ConfidenceIntervalsGetConst", self, extract::confidenceIntervals);
}

// Get, non-const
Handle2ConfidenceIntervals
UncertaintyConfidenceIntervalsGet(ConstHandle2Uncertainty self)
{
   return detail::getField<CPP,Handle2ConfidenceIntervals>
      (CLASSNAME, CLASSNAME+"ConfidenceIntervalsGet", self, extract::confidenceIntervals);
}

// Set
void
UncertaintyConfidenceIntervalsSet(ConstHandle2Uncertainty self, ConstHandle2ConstConfidenceIntervals confidenceIntervals)
{
   detail::setField<CPP,CPPConfidenceIntervals>
      (CLASSNAME, CLASSNAME+"ConfidenceIntervalsSet", self, extract::confidenceIntervals, confidenceIntervals);
}


// -----------------------------------------------------------------------------
// Child: covariance
// -----------------------------------------------------------------------------

// Has
int
UncertaintyCovarianceHas(ConstHandle2ConstUncertainty self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceHas", self, extract::covariance);
}

// Get, const
Handle2ConstCovariance
UncertaintyCovarianceGetConst(ConstHandle2ConstUncertainty self)
{
   return detail::getField<CPP,Handle2ConstCovariance>
      (CLASSNAME, CLASSNAME+"CovarianceGetConst", self, extract::covariance);
}

// Get, non-const
Handle2Covariance
UncertaintyCovarianceGet(ConstHandle2Uncertainty self)
{
   return detail::getField<CPP,Handle2Covariance>
      (CLASSNAME, CLASSNAME+"CovarianceGet", self, extract::covariance);
}

// Set
void
UncertaintyCovarianceSet(ConstHandle2Uncertainty self, ConstHandle2ConstCovariance covariance)
{
   detail::setField<CPP,CPPCovariance>
      (CLASSNAME, CLASSNAME+"CovarianceSet", self, extract::covariance, covariance);
}


// -----------------------------------------------------------------------------
// Child: listOfCovariances
// -----------------------------------------------------------------------------

// Has
int
UncertaintyListOfCovariancesHas(ConstHandle2ConstUncertainty self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ListOfCovariancesHas", self, extract::listOfCovariances);
}

// Get, const
Handle2ConstListOfCovariances
UncertaintyListOfCovariancesGetConst(ConstHandle2ConstUncertainty self)
{
   return detail::getField<CPP,Handle2ConstListOfCovariances>
      (CLASSNAME, CLASSNAME+"ListOfCovariancesGetConst", self, extract::listOfCovariances);
}

// Get, non-const
Handle2ListOfCovariances
UncertaintyListOfCovariancesGet(ConstHandle2Uncertainty self)
{
   return detail::getField<CPP,Handle2ListOfCovariances>
      (CLASSNAME, CLASSNAME+"ListOfCovariancesGet", self, extract::listOfCovariances);
}

// Set
void
UncertaintyListOfCovariancesSet(ConstHandle2Uncertainty self, ConstHandle2ConstListOfCovariances listOfCovariances)
{
   detail::setField<CPP,CPPListOfCovariances>
      (CLASSNAME, CLASSNAME+"ListOfCovariancesSet", self, extract::listOfCovariances, listOfCovariances);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/extra/Uncertainty/src/custom.cpp"
