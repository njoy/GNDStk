
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "test/v2_0/common/ExternalFile.hpp"
#include "ExternalFile.h"

using namespace njoy::GNDStk;
using namespace test::v2_0;

using C = ExternalFileClass;
using CPP = multigroup::ExternalFile;

static const std::string CLASSNAME = "ExternalFile";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto path = [](auto &obj) { return &obj.path; };
   static auto checksum = [](auto &obj) { return &obj.checksum; };
   static auto algorithm = [](auto &obj) { return &obj.algorithm; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstExternalFile
ExternalFileDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ExternalFile
ExternalFileDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstExternalFile
ExternalFileCreateConst(
   const XMLName label,
   const XMLName path,
   const checksum checksum,
   const algorithm algorithm
) {
   ConstHandle2ExternalFile handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      path,
      checksum,
      algorithm
   );
   return handle;
}

// Create, general
Handle2ExternalFile
ExternalFileCreate(
   const XMLName label,
   const XMLName path,
   const checksum checksum,
   const algorithm algorithm
) {
   ConstHandle2ExternalFile handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      path,
      checksum,
      algorithm
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ExternalFileAssign(ConstHandle2ExternalFile This, ConstHandle2ConstExternalFile from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ExternalFileDelete(ConstHandle2ConstExternalFile This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ExternalFileRead(ConstHandle2ExternalFile This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ExternalFileWrite(ConstHandle2ConstExternalFile This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ExternalFilePrint(ConstHandle2ConstExternalFile This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ExternalFilePrintXML(ConstHandle2ConstExternalFile This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ExternalFilePrintJSON(ConstHandle2ConstExternalFile This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ExternalFileLabelHas(ConstHandle2ConstExternalFile This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
ExternalFileLabelGet(ConstHandle2ConstExternalFile This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
ExternalFileLabelSet(ConstHandle2ExternalFile This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: path
// -----------------------------------------------------------------------------

// Has
int
ExternalFilePathHas(ConstHandle2ConstExternalFile This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PathHas", This, extract::path);
}

// Get
// Returns by value
XMLName
ExternalFilePathGet(ConstHandle2ConstExternalFile This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PathGet", This, extract::path);
}

// Set
void
ExternalFilePathSet(ConstHandle2ExternalFile This, const XMLName path)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PathSet", This, extract::path, path);
}


// -----------------------------------------------------------------------------
// Metadatum: checksum
// -----------------------------------------------------------------------------

// Has
int
ExternalFileChecksumHas(ConstHandle2ConstExternalFile This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumHas", This, extract::checksum);
}

// Get
// Returns by value
checksum
ExternalFileChecksumGet(ConstHandle2ConstExternalFile This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumGet", This, extract::checksum);
}

// Set
void
ExternalFileChecksumSet(ConstHandle2ExternalFile This, const checksum checksum)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumSet", This, extract::checksum, checksum);
}


// -----------------------------------------------------------------------------
// Metadatum: algorithm
// -----------------------------------------------------------------------------

// Has
int
ExternalFileAlgorithmHas(ConstHandle2ConstExternalFile This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmHas", This, extract::algorithm);
}

// Get
// Returns by value
algorithm
ExternalFileAlgorithmGet(ConstHandle2ConstExternalFile This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmGet", This, extract::algorithm);
}

// Set
void
ExternalFileAlgorithmSet(ConstHandle2ExternalFile This, const algorithm algorithm)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmSet", This, extract::algorithm, algorithm);
}
