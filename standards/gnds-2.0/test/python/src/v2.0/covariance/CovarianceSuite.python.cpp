
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/covariance/CovarianceSuite.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_covariance {

// wrapper for covariance::CovarianceSuite
void wrapCovarianceSuite(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = covariance::CovarianceSuite;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "CovarianceSuite",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<XMLName> &,
         const std::optional<XMLName> &,
         const std::optional<XMLName> &,
         const enums::Interaction &,
         const std::optional<Float64> &,
         const std::optional<common::ExternalFiles> &,
         const std::optional<styles::Styles> &,
         const std::optional<covariance::CovarianceSections> &,
         const std::optional<covariance::ParameterCovariances> &
      >(),
      py::arg("evaluation") = std::nullopt,
      py::arg("projectile") = std::nullopt,
      py::arg("target") = std::nullopt,
      py::arg("interaction"),
      py::arg("format") = std::nullopt,
      py::arg("external_files") = std::nullopt,
      py::arg("styles") = std::nullopt,
      py::arg("covariance_sections") = std::nullopt,
      py::arg("parameter_covariances") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set evaluation
   object.def_property(
      "evaluation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.evaluation();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.evaluation() = value;
      },
      cppCLASS::component_t::documentation("evaluation").data()
   );

   // get/set projectile
   object.def_property(
      "projectile",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.projectile();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.projectile() = value;
      },
      cppCLASS::component_t::documentation("projectile").data()
   );

   // get/set target
   object.def_property(
      "target",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.target();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.target() = value;
      },
      cppCLASS::component_t::documentation("target").data()
   );

   // get/set interaction
   object.def_property(
      "interaction",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.interaction();
      },
      [](cppCLASS &self, const enums::Interaction &value)
      {
         self.interaction() = value;
      },
      cppCLASS::component_t::documentation("interaction").data()
   );

   // get/set format
   object.def_property(
      "format",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.format();
      },
      [](cppCLASS &self, const std::optional<Float64> &value)
      {
         self.format() = value;
      },
      cppCLASS::component_t::documentation("format").data()
   );

   // get/set externalFiles
   object.def_property(
      "external_files",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.externalFiles();
      },
      [](cppCLASS &self, const std::optional<common::ExternalFiles> &value)
      {
         self.externalFiles() = value;
      },
      cppCLASS::component_t::documentation("external_files").data()
   );

   // get/set styles
   object.def_property(
      "styles",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.styles();
      },
      [](cppCLASS &self, const std::optional<styles::Styles> &value)
      {
         self.styles() = value;
      },
      cppCLASS::component_t::documentation("styles").data()
   );

   // get/set covarianceSections
   object.def_property(
      "covariance_sections",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.covarianceSections();
      },
      [](cppCLASS &self, const std::optional<covariance::CovarianceSections> &value)
      {
         self.covarianceSections() = value;
      },
      cppCLASS::component_t::documentation("covariance_sections").data()
   );

   // get/set parameterCovariances
   object.def_property(
      "parameter_covariances",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.parameterCovariances();
      },
      [](cppCLASS &self, const std::optional<covariance::ParameterCovariances> &value)
      {
         self.parameterCovariances() = value;
      },
      cppCLASS::component_t::documentation("parameter_covariances").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_covariance
} // namespace python_v2_0
