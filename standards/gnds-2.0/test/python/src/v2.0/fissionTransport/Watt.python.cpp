
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/fissionTransport/Watt.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_fissionTransport {

// wrapper for fissionTransport::Watt
void wrapWatt(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = fissionTransport::Watt;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Watt",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const transport::U &,
         const fissionTransport::A &,
         const fissionTransport::B &
      >(),
      py::arg("u"),
      py::arg("a"),
      py::arg("b"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set U
   object.def_property(
      "u",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.U();
      },
      [](cppCLASS &self, const transport::U &value)
      {
         self.U() = value;
      },
      cppCLASS::component_t::documentation("u").data()
   );

   // get/set a
   object.def_property(
      "a",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.a();
      },
      [](cppCLASS &self, const fissionTransport::A &value)
      {
         self.a() = value;
      },
      cppCLASS::component_t::documentation("a").data()
   );

   // get/set b
   object.def_property(
      "b",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.b();
      },
      [](cppCLASS &self, const fissionTransport::B &value)
      {
         self.b() = value;
      },
      cppCLASS::component_t::documentation("b").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_fissionTransport
} // namespace python_v2_0
