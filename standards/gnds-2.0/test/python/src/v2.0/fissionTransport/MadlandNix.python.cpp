
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/fissionTransport/MadlandNix.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_fissionTransport {

// wrapper for fissionTransport::MadlandNix
void wrapMadlandNix(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = fissionTransport::MadlandNix;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "MadlandNix",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const fissionTransport::EFH &,
         const fissionTransport::EFL &,
         const fissionTransport::T_M &
      >(),
      py::arg("efh"),
      py::arg("efl"),
      py::arg("t_m"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set EFH
   object.def_property(
      "efh",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.EFH();
      },
      [](cppCLASS &self, const fissionTransport::EFH &value)
      {
         self.EFH() = value;
      },
      cppCLASS::component_t::documentation("efh").data()
   );

   // get/set EFL
   object.def_property(
      "efl",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.EFL();
      },
      [](cppCLASS &self, const fissionTransport::EFL &value)
      {
         self.EFL() = value;
      },
      cppCLASS::component_t::documentation("efl").data()
   );

   // get/set T_M
   object.def_property(
      "t_m",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.T_M();
      },
      [](cppCLASS &self, const fissionTransport::T_M &value)
      {
         self.T_M() = value;
      },
      cppCLASS::component_t::documentation("t_m").data()
   );

   // shortcut: get/set XYs1d
   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs1d())> &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   // shortcut: get/set axes
   object.def_property(
      "axes",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.axes();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.axes())> &value)
      {
         self.axes() = value;
      },
      cppCLASS::component_t::documentation("axes").data()
   );

   // shortcut: get/set uncertainty
   object.def_property(
      "uncertainty",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.uncertainty();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.uncertainty())> &value)
      {
         self.uncertainty() = value;
      },
      cppCLASS::component_t::documentation("uncertainty").data()
   );

   // shortcut: get/set values
   object.def_property(
      "values",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.values();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.values())> &value)
      {
         self.values() = value;
      },
      cppCLASS::component_t::documentation("values").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_fissionTransport
} // namespace python_v2_0
