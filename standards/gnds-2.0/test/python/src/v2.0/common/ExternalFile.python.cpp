
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/common/ExternalFile.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_common {

// wrapper for common::ExternalFile
void wrapExternalFile(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = common::ExternalFile;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ExternalFile",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const XMLName &,
         const std::optional<std::string> &,
         const std::optional<enums::HashAlgorithm> &
      >(),
      py::arg("label"),
      py::arg("path"),
      py::arg("checksum") = std::nullopt,
      py::arg("algorithm") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set path
   object.def_property(
      "path",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.path();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.path() = value;
      },
      cppCLASS::component_t::documentation("path").data()
   );

   // get/set checksum
   object.def_property(
      "checksum",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.checksum();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.checksum() = value;
      },
      cppCLASS::component_t::documentation("checksum").data()
   );

   // get/set algorithm
   object.def_property(
      "algorithm",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.algorithm();
      },
      [](cppCLASS &self, const std::optional<enums::HashAlgorithm> &value)
      {
         self.algorithm() = value;
      },
      cppCLASS::component_t::documentation("algorithm").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_common
} // namespace python_v2_0
