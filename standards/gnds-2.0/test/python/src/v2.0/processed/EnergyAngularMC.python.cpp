
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/processed/EnergyAngularMC.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_processed {

// wrapper for processed::EnergyAngularMC
void wrapEnergyAngularMC(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = processed::EnergyAngularMC;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "EnergyAngularMC",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const XMLName &,
         const common::Energy &,
         const transport::EnergyAngular &
      >(),
      py::arg("label"),
      py::arg("product_frame"),
      py::arg("energy"),
      py::arg("energy_angular"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set productFrame
   object.def_property(
      "product_frame",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.productFrame();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.productFrame() = value;
      },
      cppCLASS::component_t::documentation("product_frame").data()
   );

   // get/set energy
   object.def_property(
      "energy",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.energy();
      },
      [](cppCLASS &self, const common::Energy &value)
      {
         self.energy() = value;
      },
      cppCLASS::component_t::documentation("energy").data()
   );

   // get/set energyAngular
   object.def_property(
      "energy_angular",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.energyAngular();
      },
      [](cppCLASS &self, const transport::EnergyAngular &value)
      {
         self.energyAngular() = value;
      },
      cppCLASS::component_t::documentation("energy_angular").data()
   );

   // shortcut: get/set Double
   object.def_property(
      "double",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Double();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.Double())> &value)
      {
         self.Double() = value;
      },
      cppCLASS::component_t::documentation("double").data()
   );

   // shortcut: get/set XYs3d
   object.def_property(
      "xys3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs3d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs3d())> &value)
      {
         self.XYs3d() = value;
      },
      cppCLASS::component_t::documentation("xys3d").data()
   );

   // shortcut: get/set axes
   object.def_property(
      "axes",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.axes();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.axes())> &value)
      {
         self.axes() = value;
      },
      cppCLASS::component_t::documentation("axes").data()
   );

   // shortcut: get/set documentation
   object.def_property(
      "documentation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.documentation();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.documentation())> &value)
      {
         self.documentation() = value;
      },
      cppCLASS::component_t::documentation("documentation").data()
   );

   // shortcut: get/set function2ds
   object.def_property(
      "function2ds",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.function2ds();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.function2ds())> &value)
      {
         self.function2ds() = value;
      },
      cppCLASS::component_t::documentation("function2ds").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_processed
} // namespace python_v2_0
