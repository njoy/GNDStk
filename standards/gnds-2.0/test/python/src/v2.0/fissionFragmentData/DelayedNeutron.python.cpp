
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/fissionFragmentData/DelayedNeutron.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_fissionFragmentData {

// wrapper for fissionFragmentData::DelayedNeutron
void wrapDelayedNeutron(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = fissionFragmentData::DelayedNeutron;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "DelayedNeutron",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const fissionFragmentData::Rate &,
         const common::Product &
      >(),
      py::arg("label"),
      py::arg("rate"),
      py::arg("product"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set rate
   object.def_property(
      "rate",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.rate();
      },
      [](cppCLASS &self, const fissionFragmentData::Rate &value)
      {
         self.rate() = value;
      },
      cppCLASS::component_t::documentation("rate").data()
   );

   // get/set product
   object.def_property(
      "product",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.product();
      },
      [](cppCLASS &self, const common::Product &value)
      {
         self.product() = value;
      },
      cppCLASS::component_t::documentation("product").data()
   );

   // shortcut: get/set Double
   object.def_property(
      "double",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Double();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.Double())> &value)
      {
         self.Double() = value;
      },
      cppCLASS::component_t::documentation("double").data()
   );

   // shortcut: get/set distribution
   object.def_property(
      "distribution",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.distribution();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.distribution())> &value)
      {
         self.distribution() = value;
      },
      cppCLASS::component_t::documentation("distribution").data()
   );

   // shortcut: get/set multiplicity
   object.def_property(
      "multiplicity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.multiplicity();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.multiplicity())> &value)
      {
         self.multiplicity() = value;
      },
      cppCLASS::component_t::documentation("multiplicity").data()
   );

   // shortcut: get/set uncertainty
   object.def_property(
      "uncertainty",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.uncertainty();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.uncertainty())> &value)
      {
         self.uncertainty() = value;
      },
      cppCLASS::component_t::documentation("uncertainty").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_fissionFragmentData
} // namespace python_v2_0
