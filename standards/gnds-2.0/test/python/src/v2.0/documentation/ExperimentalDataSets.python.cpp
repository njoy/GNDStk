
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/documentation/ExperimentalDataSets.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_documentation {

// wrapper for documentation::ExperimentalDataSets
void wrapExperimentalDataSets(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = documentation::ExperimentalDataSets;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ExperimentalDataSets",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const documentation::ExforDataSets &
      >(),
      py::arg("exfor_data_sets"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set exforDataSets
   object.def_property(
      "exfor_data_sets",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.exforDataSets();
      },
      [](cppCLASS &self, const documentation::ExforDataSets &value)
      {
         self.exforDataSets() = value;
      },
      cppCLASS::component_t::documentation("exfor_data_sets").data()
   );

   // shortcut: get/set exforDataSet
   object.def_property(
      "exfor_data_set",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.exforDataSet();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.exforDataSet())> &value)
      {
         self.exforDataSet() = value;
      },
      cppCLASS::component_t::documentation("exfor_data_set").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_documentation
} // namespace python_v2_0
