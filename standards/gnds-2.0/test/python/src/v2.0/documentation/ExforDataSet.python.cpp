
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/documentation/ExforDataSet.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_documentation {

// wrapper for documentation::ExforDataSet
void wrapExforDataSet(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = documentation::ExforDataSet;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ExforDataSet",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const std::string &,
         const std::optional<documentation::CovarianceScript> &,
         const std::optional<documentation::CorrectionScript> &,
         const std::optional<documentation::Note> &
      >(),
      py::arg("subentry"),
      py::arg("retrieval_date"),
      py::arg("covariance_script") = std::nullopt,
      py::arg("correction_script") = std::nullopt,
      py::arg("note") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set subentry
   object.def_property(
      "subentry",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.subentry();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.subentry() = value;
      },
      cppCLASS::component_t::documentation("subentry").data()
   );

   // get/set retrievalDate
   object.def_property(
      "retrieval_date",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.retrievalDate();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.retrievalDate() = value;
      },
      cppCLASS::component_t::documentation("retrieval_date").data()
   );

   // get/set covarianceScript
   object.def_property(
      "covariance_script",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.covarianceScript();
      },
      [](cppCLASS &self, const std::optional<documentation::CovarianceScript> &value)
      {
         self.covarianceScript() = value;
      },
      cppCLASS::component_t::documentation("covariance_script").data()
   );

   // get/set correctionScript
   object.def_property(
      "correction_script",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.correctionScript();
      },
      [](cppCLASS &self, const std::optional<documentation::CorrectionScript> &value)
      {
         self.correctionScript() = value;
      },
      cppCLASS::component_t::documentation("correction_script").data()
   );

   // get/set note
   object.def_property(
      "note",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.note();
      },
      [](cppCLASS &self, const std::optional<documentation::Note> &value)
      {
         self.note() = value;
      },
      cppCLASS::component_t::documentation("note").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_documentation
} // namespace python_v2_0
