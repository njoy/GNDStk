
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/documentation/ComputerCode.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_documentation {

// wrapper for documentation::ComputerCode
void wrapComputerCode(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = documentation::ComputerCode;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ComputerCode",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<XMLName> &,
         const UTF8Text &,
         const XMLName &,
         const std::optional<documentation::ExecutionArguments> &,
         const std::optional<documentation::CodeRepo> &,
         const std::optional<documentation::Note> &,
         const std::optional<documentation::InputDecks> &,
         const std::optional<documentation::OutputDecks> &
      >(),
      py::arg("label") = std::nullopt,
      py::arg("name"),
      py::arg("version"),
      py::arg("execution_arguments") = std::nullopt,
      py::arg("code_repo") = std::nullopt,
      py::arg("note") = std::nullopt,
      py::arg("input_decks") = std::nullopt,
      py::arg("output_decks") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set name
   object.def_property(
      "name",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.name();
      },
      [](cppCLASS &self, const UTF8Text &value)
      {
         self.name() = value;
      },
      cppCLASS::component_t::documentation("name").data()
   );

   // get/set version
   object.def_property(
      "version",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.version();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.version() = value;
      },
      cppCLASS::component_t::documentation("version").data()
   );

   // get/set executionArguments
   object.def_property(
      "execution_arguments",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.executionArguments();
      },
      [](cppCLASS &self, const std::optional<documentation::ExecutionArguments> &value)
      {
         self.executionArguments() = value;
      },
      cppCLASS::component_t::documentation("execution_arguments").data()
   );

   // get/set codeRepo
   object.def_property(
      "code_repo",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.codeRepo();
      },
      [](cppCLASS &self, const std::optional<documentation::CodeRepo> &value)
      {
         self.codeRepo() = value;
      },
      cppCLASS::component_t::documentation("code_repo").data()
   );

   // get/set note
   object.def_property(
      "note",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.note();
      },
      [](cppCLASS &self, const std::optional<documentation::Note> &value)
      {
         self.note() = value;
      },
      cppCLASS::component_t::documentation("note").data()
   );

   // get/set inputDecks
   object.def_property(
      "input_decks",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.inputDecks();
      },
      [](cppCLASS &self, const std::optional<documentation::InputDecks> &value)
      {
         self.inputDecks() = value;
      },
      cppCLASS::component_t::documentation("input_decks").data()
   );

   // get/set outputDecks
   object.def_property(
      "output_decks",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.outputDecks();
      },
      [](cppCLASS &self, const std::optional<documentation::OutputDecks> &value)
      {
         self.outputDecks() = value;
      },
      cppCLASS::component_t::documentation("output_decks").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_documentation
} // namespace python_v2_0
