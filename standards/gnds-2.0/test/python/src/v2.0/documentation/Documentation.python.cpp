
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/documentation/Documentation.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_documentation {

// wrapper for documentation::Documentation
void wrapDocumentation(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = documentation::Documentation;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Documentation",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<UTF8Text> &,
         const std::optional<std::string> &,
         const std::optional<UTF8Text> &,
         const documentation::Authors &,
         const std::optional<documentation::Contributors> &,
         const std::optional<documentation::Collaborations> &,
         const documentation::Dates &,
         const std::optional<documentation::Copyright> &,
         const std::optional<documentation::Acknowledgements> &,
         const std::optional<documentation::Keywords> &,
         const std::optional<documentation::RelatedItems> &,
         const documentation::Title &,
         const std::optional<documentation::Abstract> &,
         const documentation::Body &,
         const std::optional<documentation::ComputerCodes> &,
         const std::optional<documentation::ExperimentalDataSets> &,
         const std::optional<documentation::Bibliography> &,
         const std::optional<documentation::EndfCompatible> &
      >(),
      py::arg("doi") = std::nullopt,
      py::arg("publication_date") = std::nullopt,
      py::arg("version") = std::nullopt,
      py::arg("authors"),
      py::arg("contributors") = std::nullopt,
      py::arg("collaborations") = std::nullopt,
      py::arg("dates"),
      py::arg("copyright") = std::nullopt,
      py::arg("acknowledgements") = std::nullopt,
      py::arg("keywords") = std::nullopt,
      py::arg("related_items") = std::nullopt,
      py::arg("title"),
      py::arg("abstract") = std::nullopt,
      py::arg("body"),
      py::arg("computer_codes") = std::nullopt,
      py::arg("experimental_data_sets") = std::nullopt,
      py::arg("bibliography") = std::nullopt,
      py::arg("endf_compatible") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set doi
   object.def_property(
      "doi",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.doi();
      },
      [](cppCLASS &self, const std::optional<UTF8Text> &value)
      {
         self.doi() = value;
      },
      cppCLASS::component_t::documentation("doi").data()
   );

   // get/set publicationDate
   object.def_property(
      "publication_date",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.publicationDate();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.publicationDate() = value;
      },
      cppCLASS::component_t::documentation("publication_date").data()
   );

   // get/set version
   object.def_property(
      "version",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.version();
      },
      [](cppCLASS &self, const std::optional<UTF8Text> &value)
      {
         self.version() = value;
      },
      cppCLASS::component_t::documentation("version").data()
   );

   // get/set authors
   object.def_property(
      "authors",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.authors();
      },
      [](cppCLASS &self, const documentation::Authors &value)
      {
         self.authors() = value;
      },
      cppCLASS::component_t::documentation("authors").data()
   );

   // get/set contributors
   object.def_property(
      "contributors",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.contributors();
      },
      [](cppCLASS &self, const std::optional<documentation::Contributors> &value)
      {
         self.contributors() = value;
      },
      cppCLASS::component_t::documentation("contributors").data()
   );

   // get/set collaborations
   object.def_property(
      "collaborations",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.collaborations();
      },
      [](cppCLASS &self, const std::optional<documentation::Collaborations> &value)
      {
         self.collaborations() = value;
      },
      cppCLASS::component_t::documentation("collaborations").data()
   );

   // get/set dates
   object.def_property(
      "dates",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.dates();
      },
      [](cppCLASS &self, const documentation::Dates &value)
      {
         self.dates() = value;
      },
      cppCLASS::component_t::documentation("dates").data()
   );

   // get/set copyright
   object.def_property(
      "copyright",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.copyright();
      },
      [](cppCLASS &self, const std::optional<documentation::Copyright> &value)
      {
         self.copyright() = value;
      },
      cppCLASS::component_t::documentation("copyright").data()
   );

   // get/set acknowledgements
   object.def_property(
      "acknowledgements",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.acknowledgements();
      },
      [](cppCLASS &self, const std::optional<documentation::Acknowledgements> &value)
      {
         self.acknowledgements() = value;
      },
      cppCLASS::component_t::documentation("acknowledgements").data()
   );

   // get/set keywords
   object.def_property(
      "keywords",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.keywords();
      },
      [](cppCLASS &self, const std::optional<documentation::Keywords> &value)
      {
         self.keywords() = value;
      },
      cppCLASS::component_t::documentation("keywords").data()
   );

   // get/set relatedItems
   object.def_property(
      "related_items",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.relatedItems();
      },
      [](cppCLASS &self, const std::optional<documentation::RelatedItems> &value)
      {
         self.relatedItems() = value;
      },
      cppCLASS::component_t::documentation("related_items").data()
   );

   // get/set title
   object.def_property(
      "title",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.title();
      },
      [](cppCLASS &self, const documentation::Title &value)
      {
         self.title() = value;
      },
      cppCLASS::component_t::documentation("title").data()
   );

   // get/set abstract
   object.def_property(
      "abstract",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.abstract();
      },
      [](cppCLASS &self, const std::optional<documentation::Abstract> &value)
      {
         self.abstract() = value;
      },
      cppCLASS::component_t::documentation("abstract").data()
   );

   // get/set body
   object.def_property(
      "body",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.body();
      },
      [](cppCLASS &self, const documentation::Body &value)
      {
         self.body() = value;
      },
      cppCLASS::component_t::documentation("body").data()
   );

   // get/set computerCodes
   object.def_property(
      "computer_codes",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.computerCodes();
      },
      [](cppCLASS &self, const std::optional<documentation::ComputerCodes> &value)
      {
         self.computerCodes() = value;
      },
      cppCLASS::component_t::documentation("computer_codes").data()
   );

   // get/set experimentalDataSets
   object.def_property(
      "experimental_data_sets",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.experimentalDataSets();
      },
      [](cppCLASS &self, const std::optional<documentation::ExperimentalDataSets> &value)
      {
         self.experimentalDataSets() = value;
      },
      cppCLASS::component_t::documentation("experimental_data_sets").data()
   );

   // get/set bibliography
   object.def_property(
      "bibliography",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.bibliography();
      },
      [](cppCLASS &self, const std::optional<documentation::Bibliography> &value)
      {
         self.bibliography() = value;
      },
      cppCLASS::component_t::documentation("bibliography").data()
   );

   // get/set endfCompatible
   object.def_property(
      "endf_compatible",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.endfCompatible();
      },
      [](cppCLASS &self, const std::optional<documentation::EndfCompatible> &value)
      {
         self.endfCompatible() = value;
      },
      cppCLASS::component_t::documentation("endf_compatible").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_documentation
} // namespace python_v2_0
