
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/resonances/Unresolved.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_resonances {

// wrapper for resonances::Unresolved
void wrapUnresolved(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = resonances::Unresolved;
   using _t = std::variant<
      resonances::TabulatedWidths
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Unresolved",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const Float64 &,
         const Float64 &,
         const XMLName &,
         const _t &
      >(),
      py::arg("domain_min"),
      py::arg("domain_max"),
      py::arg("domain_unit"),
      py::arg("_tabulated_widths"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set domainMin
   object.def_property(
      "domain_min",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainMin();
      },
      [](cppCLASS &self, const Float64 &value)
      {
         self.domainMin() = value;
      },
      cppCLASS::component_t::documentation("domain_min").data()
   );

   // get/set domainMax
   object.def_property(
      "domain_max",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainMax();
      },
      [](cppCLASS &self, const Float64 &value)
      {
         self.domainMax() = value;
      },
      cppCLASS::component_t::documentation("domain_max").data()
   );

   // get/set domainUnit
   object.def_property(
      "domain_unit",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainUnit();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.domainUnit() = value;
      },
      cppCLASS::component_t::documentation("domain_unit").data()
   );

   object.def_property(
      "tabulated_widths",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.tabulatedWidths();
      },
      [](cppCLASS &self, const resonances::TabulatedWidths &value)
      {
         self.tabulatedWidths() = value;
      },
      cppCLASS::component_t::documentation("tabulated_widths").data()
   );

   object.def_property(
      "_tabulated_widths",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._tabulatedWidths();
      },
      [](cppCLASS &self, const _t &value)
      {
         self._tabulatedWidths() = value;
      },
      cppCLASS::component_t::documentation("_tabulated_widths").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_resonances
} // namespace python_v2_0
