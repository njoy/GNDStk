
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/resonances/Channel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_resonances {

// Channel wrapper
void wrapChannel(python::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using Component = resonances::Channel;

   // create the component
   python::class_<Component> component(
      module,
      "Channel",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const XMLName &,
            const std::string &,
            const Integer32 &,
            const Fraction32 &,
            const std::optional<Float64> &,
            const Integer32 &,
            const std::optional<resonances::ExternalRMatrix> &,
            const std::optional<resonances::ScatteringRadius> &,
            const std::optional<resonances::HardSphereRadius> &
         >(),
         python::arg("label"),
         python::arg("resonance_reaction"),
         python::arg("l"),
         python::arg("channel_spin"),
         python::arg("boundary_condition_value") = std::nullopt,
         python::arg("column_index"),
         python::arg("external_rmatrix") = std::nullopt,
         python::arg("scattering_radius") = std::nullopt,
         python::arg("hard_sphere_radius") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self) { return self.label(); },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "resonance_reaction",
         [](const Component &self) { return self.resonanceReaction(); },
         Component::documentation("resonance_reaction").data()
      )
      .def_property_readonly(
         "l",
         [](const Component &self) { return self.L(); },
         Component::documentation("l").data()
      )
      .def_property_readonly(
         "channel_spin",
         [](const Component &self) { return self.channelSpin(); },
         Component::documentation("channel_spin").data()
      )
      .def_property_readonly(
         "boundary_condition_value",
         [](const Component &self) { return self.boundaryConditionValue(); },
         Component::documentation("boundary_condition_value").data()
      )
      .def_property_readonly(
         "column_index",
         [](const Component &self) { return self.columnIndex(); },
         Component::documentation("column_index").data()
      )
      .def_property_readonly(
         "external_rmatrix",
         [](const Component &self) { return self.externalRMatrix(); },
         Component::documentation("external_rmatrix").data()
      )
      .def_property_readonly(
         "scattering_radius",
         [](const Component &self) { return self.scatteringRadius(); },
         Component::documentation("scattering_radius").data()
      )
      .def_property_readonly(
         "hard_sphere_radius",
         [](const Component &self) { return self.hardSphereRadius(); },
         Component::documentation("hard_sphere_radius").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_resonances
} // namespace python_v2_0
