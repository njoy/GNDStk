
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/resonances/ScatteringRadius.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_resonances {

// wrapper for resonances::ScatteringRadius
void wrapScatteringRadius(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = resonances::ScatteringRadius;
   using _t = std::variant<
      containers::Constant1d,
      containers::XYs1d,
      containers::Regions1d
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ScatteringRadius",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const _t &
      >(),
      py::arg("_constant1d_xys1dregions1d"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   object.def_property(
      "constant1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.constant1d();
      },
      [](cppCLASS &self, const containers::Constant1d &value)
      {
         self.constant1d() = value;
      },
      cppCLASS::component_t::documentation("constant1d").data()
   );

   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const containers::XYs1d &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   object.def_property(
      "regions1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.regions1d();
      },
      [](cppCLASS &self, const containers::Regions1d &value)
      {
         self.regions1d() = value;
      },
      cppCLASS::component_t::documentation("regions1d").data()
   );

   object.def_property(
      "_constant1d_xys1dregions1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._constant1dXYs1dregions1d();
      },
      [](cppCLASS &self, const _t &value)
      {
         self._constant1dXYs1dregions1d() = value;
      },
      cppCLASS::component_t::documentation("_constant1d_xys1dregions1d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_resonances
} // namespace python_v2_0
