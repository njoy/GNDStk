
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/tsl/SelfScatteringKernel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_tsl {

// SelfScatteringKernel wrapper
void wrapSelfScatteringKernel(python::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using Component = tsl::SelfScatteringKernel;
   using _t = std::variant<
      containers::Gridded3d,
      tsl::GaussianApproximation,
      tsl::SCTApproximation,
      tsl::FreeGasApproximation
   >;

   // create the component
   python::class_<Component> component(
      module,
      "SelfScatteringKernel",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<bool> &,
            const _t &
         >(),
         python::arg("symmetric") = std::nullopt,
         python::arg("_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "symmetric",
         [](const Component &self) { return self.symmetric(); },
         Component::documentation("symmetric").data()
      )
      .def_property_readonly(
         "gridded3d",
         [](const Component &self) { return self.gridded3d(); },
         Component::documentation("gridded3d").data()
      )
      .def_property_readonly(
         "gaussian_approximation",
         [](const Component &self) { return self.GaussianApproximation(); },
         Component::documentation("gaussian_approximation").data()
      )
      .def_property_readonly(
         "sctapproximation",
         [](const Component &self) { return self.SCTApproximation(); },
         Component::documentation("sctapproximation").data()
      )
      .def_property_readonly(
         "free_gas_approximation",
         [](const Component &self) { return self.freeGasApproximation(); },
         Component::documentation("free_gas_approximation").data()
      )
      .def_property_readonly(
         "_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation",
         [](const Component &self) { return self._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation(); },
         Component::documentation("_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_tsl
} // namespace python_v2_0
