
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/tsl/SelfScatteringKernel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_tsl {

// wrapper for tsl::SelfScatteringKernel
void wrapSelfScatteringKernel(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = tsl::SelfScatteringKernel;
   using _t = std::variant<
      containers::Gridded3d,
      tsl::GaussianApproximation,
      tsl::SCTApproximation,
      tsl::FreeGasApproximation
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "SelfScatteringKernel",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<bool> &,
         const _t &
      >(),
      py::arg("symmetric") = std::nullopt,
      py::arg("_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set symmetric
   object.def_property(
      "symmetric",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.symmetric();
      },
      [](cppCLASS &self, const std::optional<bool> &value)
      {
         self.symmetric() = value;
      },
      cppCLASS::component_t::documentation("symmetric").data()
   );

   object.def_property(
      "gridded3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.gridded3d();
      },
      [](cppCLASS &self, const containers::Gridded3d &value)
      {
         self.gridded3d() = value;
      },
      cppCLASS::component_t::documentation("gridded3d").data()
   );

   object.def_property(
      "gaussian_approximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.GaussianApproximation();
      },
      [](cppCLASS &self, const tsl::GaussianApproximation &value)
      {
         self.GaussianApproximation() = value;
      },
      cppCLASS::component_t::documentation("gaussian_approximation").data()
   );

   object.def_property(
      "sctapproximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.SCTApproximation();
      },
      [](cppCLASS &self, const tsl::SCTApproximation &value)
      {
         self.SCTApproximation() = value;
      },
      cppCLASS::component_t::documentation("sctapproximation").data()
   );

   object.def_property(
      "free_gas_approximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.freeGasApproximation();
      },
      [](cppCLASS &self, const tsl::FreeGasApproximation &value)
      {
         self.freeGasApproximation() = value;
      },
      cppCLASS::component_t::documentation("free_gas_approximation").data()
   );

   object.def_property(
      "_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation();
      },
      [](cppCLASS &self, const _t &value)
      {
         self._gridded3dGaussianApproximationSCTApproximationfreeGasApproximation() = value;
      },
      cppCLASS::component_t::documentation("_gridded3d_gaussian_approximation_sctapproximationfree_gas_approximation").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_tsl
} // namespace python_v2_0
