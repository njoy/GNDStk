
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/tsl/ThermalNeutronScatteringLaw_coherentElastic.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_tsl {

// wrapper for tsl::ThermalNeutronScatteringLaw_coherentElastic
void wrapThermalNeutronScatteringLaw_coherentElastic(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = tsl::ThermalNeutronScatteringLaw_coherentElastic;
   using _t = std::variant<
      tsl::S_table,
      tsl::BraggEdges
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "ThermalNeutronScatteringLaw_coherentElastic",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const std::optional<XMLName> &,
         const std::optional<enums::Frame> &,
         const _t &
      >(),
      py::arg("label"),
      py::arg("pid") = std::nullopt,
      py::arg("product_frame") = std::nullopt,
      py::arg("_s_table_bragg_edges"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set pid
   object.def_property(
      "pid",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.pid().value();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.pid() = value;
      },
      cppCLASS::component_t::documentation("pid").data()
   );

   // get/set productFrame
   object.def_property(
      "product_frame",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.productFrame().value();
      },
      [](cppCLASS &self, const enums::Frame &value)
      {
         self.productFrame() = value;
      },
      cppCLASS::component_t::documentation("product_frame").data()
   );

   object.def_property(
      "s_table",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.S_table();
      },
      [](cppCLASS &self, const tsl::S_table &value)
      {
         self.S_table() = value;
      },
      cppCLASS::component_t::documentation("s_table").data()
   );

   object.def_property(
      "bragg_edges",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.BraggEdges();
      },
      [](cppCLASS &self, const tsl::BraggEdges &value)
      {
         self.BraggEdges() = value;
      },
      cppCLASS::component_t::documentation("bragg_edges").data()
   );

   object.def_property(
      "_s_table_bragg_edges",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._S_tableBraggEdges();
      },
      [](cppCLASS &self, const _t &value)
      {
         self._S_tableBraggEdges() = value;
      },
      cppCLASS::component_t::documentation("_s_table_bragg_edges").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_tsl
} // namespace python_v2_0
