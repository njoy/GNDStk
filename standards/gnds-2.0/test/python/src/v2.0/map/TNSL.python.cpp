
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/map/TNSL.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_map {

// TNSL wrapper
void wrapTNSL(python::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using Component = map::TNSL;

   // create the component
   python::class_<Component> component(
      module,
      "TNSL",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const XMLName &,
            const XMLName &,
            const XMLName &,
            const XMLName &,
            const std::optional<XMLName> &,
            const checksum &,
            const std::optional<algorithm> &,
            const XMLName &,
            const XMLName &
         >(),
         python::arg("projectile"),
         python::arg("target"),
         python::arg("evaluation"),
         python::arg("path"),
         python::arg("interaction") = std::nullopt,
         python::arg("checksum"),
         python::arg("algorithm") = std::nullopt,
         python::arg("standard_target"),
         python::arg("standard_evaluation"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "projectile",
         [](const Component &self) { return self.projectile(); },
         Component::documentation("projectile").data()
      )
      .def_property_readonly(
         "target",
         [](const Component &self) { return self.target(); },
         Component::documentation("target").data()
      )
      .def_property_readonly(
         "evaluation",
         [](const Component &self) { return self.evaluation(); },
         Component::documentation("evaluation").data()
      )
      .def_property_readonly(
         "path",
         [](const Component &self) { return self.path(); },
         Component::documentation("path").data()
      )
      .def_property_readonly(
         "interaction",
         [](const Component &self) { return self.interaction(); },
         Component::documentation("interaction").data()
      )
      .def_property_readonly(
         "checksum",
         [](const Component &self) { return self.checksum(); },
         Component::documentation("checksum").data()
      )
      .def_property_readonly(
         "algorithm",
         [](const Component &self) { return self.algorithm(); },
         Component::documentation("algorithm").data()
      )
      .def_property_readonly(
         "standard_target",
         [](const Component &self) { return self.standardTarget(); },
         Component::documentation("standard_target").data()
      )
      .def_property_readonly(
         "standard_evaluation",
         [](const Component &self) { return self.standardEvaluation(); },
         Component::documentation("standard_evaluation").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_map
} // namespace python_v2_0
