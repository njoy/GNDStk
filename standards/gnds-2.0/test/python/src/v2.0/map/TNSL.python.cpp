
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/map/TNSL.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_map {

// wrapper for map::TNSL
void wrapTNSL(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = map::TNSL;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "TNSL",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const XMLName &,
         const XMLName &,
         const XMLName &,
         const std::optional<XMLName> &,
         const std::string &,
         const std::optional<enums::HashAlgorithm> &,
         const XMLName &,
         const XMLName &
      >(),
      py::arg("projectile"),
      py::arg("target"),
      py::arg("evaluation"),
      py::arg("path"),
      py::arg("interaction") = std::nullopt,
      py::arg("checksum"),
      py::arg("algorithm") = std::nullopt,
      py::arg("standard_target"),
      py::arg("standard_evaluation"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set projectile
   object.def_property(
      "projectile",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.projectile();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.projectile() = value;
      },
      cppCLASS::component_t::documentation("projectile").data()
   );

   // get/set target
   object.def_property(
      "target",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.target();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.target() = value;
      },
      cppCLASS::component_t::documentation("target").data()
   );

   // get/set evaluation
   object.def_property(
      "evaluation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.evaluation();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.evaluation() = value;
      },
      cppCLASS::component_t::documentation("evaluation").data()
   );

   // get/set path
   object.def_property(
      "path",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.path();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.path() = value;
      },
      cppCLASS::component_t::documentation("path").data()
   );

   // get/set interaction
   object.def_property(
      "interaction",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.interaction();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.interaction() = value;
      },
      cppCLASS::component_t::documentation("interaction").data()
   );

   // get/set checksum
   object.def_property(
      "checksum",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.checksum();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.checksum() = value;
      },
      cppCLASS::component_t::documentation("checksum").data()
   );

   // get/set algorithm
   object.def_property(
      "algorithm",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.algorithm();
      },
      [](cppCLASS &self, const std::optional<enums::HashAlgorithm> &value)
      {
         self.algorithm() = value;
      },
      cppCLASS::component_t::documentation("algorithm").data()
   );

   // get/set standardTarget
   object.def_property(
      "standard_target",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.standardTarget();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.standardTarget() = value;
      },
      cppCLASS::component_t::documentation("standard_target").data()
   );

   // get/set standardEvaluation
   object.def_property(
      "standard_evaluation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.standardEvaluation();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.standardEvaluation() = value;
      },
      cppCLASS::component_t::documentation("standard_evaluation").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_map
} // namespace python_v2_0
