
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/cpTransport/NuclearPlusInterference.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_cpTransport {

// wrapper for cpTransport::NuclearPlusInterference
void wrapNuclearPlusInterference(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = cpTransport::NuclearPlusInterference;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "NuclearPlusInterference",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const Float64 &,
         const transport::CrossSection &,
         const transport::Distribution &
      >(),
      py::arg("mu_cutoff"),
      py::arg("cross_section"),
      py::arg("distribution"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set muCutoff
   object.def_property(
      "mu_cutoff",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.muCutoff();
      },
      [](cppCLASS &self, const Float64 &value)
      {
         self.muCutoff() = value;
      },
      cppCLASS::component_t::documentation("mu_cutoff").data()
   );

   // get/set crossSection
   object.def_property(
      "cross_section",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.crossSection();
      },
      [](cppCLASS &self, const transport::CrossSection &value)
      {
         self.crossSection() = value;
      },
      cppCLASS::component_t::documentation("cross_section").data()
   );

   // get/set distribution
   object.def_property(
      "distribution",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.distribution();
      },
      [](cppCLASS &self, const transport::Distribution &value)
      {
         self.distribution() = value;
      },
      cppCLASS::component_t::documentation("distribution").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_cpTransport
} // namespace python_v2_0
