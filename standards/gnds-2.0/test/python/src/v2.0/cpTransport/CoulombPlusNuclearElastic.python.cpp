
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/cpTransport/CoulombPlusNuclearElastic.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_cpTransport {

// CoulombPlusNuclearElastic wrapper
void wrapCoulombPlusNuclearElastic(python::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using Component = cpTransport::CoulombPlusNuclearElastic;

   // create the component
   python::class_<Component> component(
      module,
      "CoulombPlusNuclearElastic",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<XMLName> &,
            const std::optional<bool> &,
            const XMLName &,
            const std::optional<XMLName> &,
            const std::optional<enums::Frame> &,
            const std::optional<cpTransport::RutherfordScattering> &,
            const std::optional<cpTransport::NuclearAmplitudeExpansion> &
         >(),
         python::arg("href") = std::nullopt,
         python::arg("identical_particles") = std::nullopt,
         python::arg("label"),
         python::arg("pid") = std::nullopt,
         python::arg("product_frame") = std::nullopt,
         python::arg("rutherford_scattering") = std::nullopt,
         python::arg("nuclear_amplitude_expansion") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "href",
         [](const Component &self) { return self.href(); },
         Component::documentation("href").data()
      )
      .def_property_readonly(
         "identical_particles",
         [](const Component &self) { return self.identicalParticles().value(); },
         Component::documentation("identical_particles").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self) { return self.label(); },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "pid",
         [](const Component &self) { return self.pid(); },
         Component::documentation("pid").data()
      )
      .def_property_readonly(
         "product_frame",
         [](const Component &self) { return self.productFrame(); },
         Component::documentation("product_frame").data()
      )
      .def_property_readonly(
         "rutherford_scattering",
         [](const Component &self) { return self.RutherfordScattering(); },
         Component::documentation("rutherford_scattering").data()
      )
      .def_property_readonly(
         "nuclear_amplitude_expansion",
         [](const Component &self) { return self.nuclearAmplitudeExpansion(); },
         Component::documentation("nuclear_amplitude_expansion").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_cpTransport
} // namespace python_v2_0
