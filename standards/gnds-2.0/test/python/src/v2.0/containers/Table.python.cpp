
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/containers/Table.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_containers {

// wrapper for containers::Table
void wrapTable(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = containers::Table;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Table",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const Integer32 &,
         const Integer32 &,
         const std::optional<XMLName> &,
         const containers::ColumnHeaders &,
         const containers::Data &
      >(),
      py::arg("columns"),
      py::arg("rows"),
      py::arg("storage_order") = std::nullopt,
      py::arg("column_headers"),
      py::arg("data"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set columns
   object.def_property(
      "columns",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.columns();
      },
      [](cppCLASS &self, const Integer32 &value)
      {
         self.columns() = value;
      },
      cppCLASS::component_t::documentation("columns").data()
   );

   // get/set rows
   object.def_property(
      "rows",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.rows();
      },
      [](cppCLASS &self, const Integer32 &value)
      {
         self.rows() = value;
      },
      cppCLASS::component_t::documentation("rows").data()
   );

   // get/set storageOrder
   object.def_property(
      "storage_order",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.storageOrder().value();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.storageOrder() = value;
      },
      cppCLASS::component_t::documentation("storage_order").data()
   );

   // get/set columnHeaders
   object.def_property(
      "column_headers",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.columnHeaders();
      },
      [](cppCLASS &self, const containers::ColumnHeaders &value)
      {
         self.columnHeaders() = value;
      },
      cppCLASS::component_t::documentation("column_headers").data()
   );

   // get/set data
   object.def_property(
      "data",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.data();
      },
      [](cppCLASS &self, const containers::Data &value)
      {
         self.data() = value;
      },
      cppCLASS::component_t::documentation("data").data()
   );

   // shortcut: get/set column
   object.def_property(
      "column",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.column();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.column())> &value)
      {
         self.column() = value;
      },
      cppCLASS::component_t::documentation("column").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_containers
} // namespace python_v2_0
