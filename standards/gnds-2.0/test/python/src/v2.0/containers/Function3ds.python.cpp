
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/containers/Function3ds.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_containers {

// wrapper for containers::Function3ds
void wrapFunction3ds(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = containers::Function3ds;
   using _t = std::variant<
      containers::XYs3d,
      containers::Gridded3d
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Function3ds",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::vector<_t> &
      >(),
      py::arg("_xys3dgridded3d"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   object.def_property(
      "_xys3dgridded3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._XYs3dgridded3d();
      },
      [](cppCLASS &self, const std::vector<_t> &value)
      {
         self._XYs3dgridded3d() = value;
      },
      cppCLASS::component_t::documentation("_xys3dgridded3d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_containers
} // namespace python_v2_0
