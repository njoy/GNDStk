
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/containers/Function2ds.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_containers {

// Function2ds wrapper
void wrapFunction2ds(python::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using Component = containers::Function2ds;
   using _t = std::variant<
      containers::XYs2d,
      containers::Gridded2d
   >;

   // create the component
   python::class_<Component> component(
      module,
      "Function2ds",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::vector<_t> &
         >(),
         python::arg("_xys2dgridded2d"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "_xys2dgridded2d",
         [](const Component &self) { return self._XYs2dgridded2d(); },
         Component::documentation("_xys2dgridded2d").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_containers
} // namespace python_v2_0
