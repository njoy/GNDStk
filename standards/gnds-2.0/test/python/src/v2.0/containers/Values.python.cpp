
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/containers/Values.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_containers {

// wrapper for containers::Values
void wrapValues(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = containers::Values;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Values",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<UTF8Text> &,
         const std::optional<Integer32> &,
         const std::optional<Integer32> &,
         const std::optional<UTF8Text> &,
         const std::optional<Integer32> &,
         const std::optional<Integer32> &
      >(),
      py::arg("value_type") = std::nullopt,
      py::arg("start") = std::nullopt,
      py::arg("length") = std::nullopt,
      py::arg("href") = std::nullopt,
      py::arg("start_index") = std::nullopt,
      py::arg("count") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // constructor: from vector
   object.def(
      py::init<
         const std::vector<int> &
      >(),
      py::arg("ints"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // constructor: from vector
   object.def(
      py::init<
         const std::vector<double> &
      >(),
      py::arg("doubles"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // constructor: from vector
   object.def(
      py::init<
         const std::vector<std::string> &
      >(),
      py::arg("strings"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set valueType
   object.def_property(
      "value_type",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.valueType().value();
      },
      [](cppCLASS &self, const UTF8Text &value)
      {
         self.valueType() = value;
      },
      cppCLASS::component_t::documentation("value_type").data()
   );

   // get/set start
   object.def_property(
      "start",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.start().value();
      },
      [](cppCLASS &self, const Integer32 &value)
      {
         self.start() = value;
      },
      cppCLASS::component_t::documentation("start").data()
   );

   // get/set length
   object.def_property(
      "length",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.length();
      },
      [](cppCLASS &self, const std::optional<Integer32> &value)
      {
         self.length() = value;
      },
      cppCLASS::component_t::documentation("length").data()
   );

   // get/set href
   object.def_property(
      "href",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.href();
      },
      [](cppCLASS &self, const std::optional<UTF8Text> &value)
      {
         self.href() = value;
      },
      cppCLASS::component_t::documentation("href").data()
   );

   // get/set startIndex
   object.def_property(
      "start_index",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.startIndex();
      },
      [](cppCLASS &self, const std::optional<Integer32> &value)
      {
         self.startIndex() = value;
      },
      cppCLASS::component_t::documentation("start_index").data()
   );

   // get/set count
   object.def_property(
      "count",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.count();
      },
      [](cppCLASS &self, const std::optional<Integer32> &value)
      {
         self.count() = value;
      },
      cppCLASS::component_t::documentation("count").data()
   );

   // get/set vector<int>
   object.def_property(
      "ints",
      [](const cppCLASS &self) -> const std::vector<int> &
      {
         return self.ints();
      },
      [](cppCLASS &self, const std::vector<int> &value)
      {
         self.ints() = value;
      },
      cppCLASS::component_t::documentation("ints").data()
   );

   // get/set vector<double>
   object.def_property(
      "doubles",
      [](const cppCLASS &self) -> const std::vector<double> &
      {
         return self.doubles();
      },
      [](cppCLASS &self, const std::vector<double> &value)
      {
         self.doubles() = value;
      },
      cppCLASS::component_t::documentation("doubles").data()
   );

   // get/set vector<std::string>
   object.def_property(
      "strings",
      [](const cppCLASS &self) -> const std::vector<std::string> &
      {
         return self.strings();
      },
      [](cppCLASS &self, const std::vector<std::string> &value)
      {
         self.strings() = value;
      },
      cppCLASS::component_t::documentation("strings").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_containers
} // namespace python_v2_0
