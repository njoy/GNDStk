
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/transport/Distribution.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_transport {

// Distribution wrapper
void wrapDistribution(python::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using Component = transport::Distribution;
   using _t = std::variant<
      transport::AngularTwoBody,
      transport::Uncorrelated,
      transport::AngularEnergy,
      transport::EnergyAngular,
      transport::KalbachMann,
      transport::Reference,
      transport::Branching3d,
      cpTransport::CoulombPlusNuclearElastic,
      tsl::ThermalNeutronScatteringLaw,
      atomic::CoherentPhotonScattering,
      atomic::IncoherentPhotonScattering,
      transport::Unspecified,
      transport::MultiGroup3d,
      processed::AngularEnergyMC,
      processed::EnergyAngularMC,
      containers::XYs2d
   >;

   // create the component
   python::class_<Component> component(
      module,
      "Distribution",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const _t &
         >(),
         python::arg("_angular_two_bodyuncorrelatedangular_energyenergy_angular_kalbach_mannreferencebranching3d_coulomb_plus_nuclear_elasticthermal_neutron_scattering_lawcoherent_photon_scatteringincoherent_photon_scatteringunspecifiedmulti_group3dangular_energy_mcenergy_angular_mcxys2d"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "angular_two_body",
         [](const Component &self) { return self.angularTwoBody(); },
         Component::documentation("angular_two_body").data()
      )
      .def_property_readonly(
         "uncorrelated",
         [](const Component &self) { return self.uncorrelated(); },
         Component::documentation("uncorrelated").data()
      )
      .def_property_readonly(
         "angular_energy",
         [](const Component &self) { return self.angularEnergy(); },
         Component::documentation("angular_energy").data()
      )
      .def_property_readonly(
         "energy_angular",
         [](const Component &self) { return self.energyAngular(); },
         Component::documentation("energy_angular").data()
      )
      .def_property_readonly(
         "kalbach_mann",
         [](const Component &self) { return self.KalbachMann(); },
         Component::documentation("kalbach_mann").data()
      )
      .def_property_readonly(
         "reference",
         [](const Component &self) { return self.reference(); },
         Component::documentation("reference").data()
      )
      .def_property_readonly(
         "branching3d",
         [](const Component &self) { return self.branching3d(); },
         Component::documentation("branching3d").data()
      )
      .def_property_readonly(
         "coulomb_plus_nuclear_elastic",
         [](const Component &self) { return self.CoulombPlusNuclearElastic(); },
         Component::documentation("coulomb_plus_nuclear_elastic").data()
      )
      .def_property_readonly(
         "thermal_neutron_scattering_law",
         [](const Component &self) { return self.thermalNeutronScatteringLaw(); },
         Component::documentation("thermal_neutron_scattering_law").data()
      )
      .def_property_readonly(
         "coherent_photon_scattering",
         [](const Component &self) { return self.coherentPhotonScattering(); },
         Component::documentation("coherent_photon_scattering").data()
      )
      .def_property_readonly(
         "incoherent_photon_scattering",
         [](const Component &self) { return self.incoherentPhotonScattering(); },
         Component::documentation("incoherent_photon_scattering").data()
      )
      .def_property_readonly(
         "unspecified",
         [](const Component &self) { return self.unspecified(); },
         Component::documentation("unspecified").data()
      )
      .def_property_readonly(
         "multi_group3d",
         [](const Component &self) { return self.multiGroup3d(); },
         Component::documentation("multi_group3d").data()
      )
      .def_property_readonly(
         "angular_energy_mc",
         [](const Component &self) { return self.angularEnergyMC(); },
         Component::documentation("angular_energy_mc").data()
      )
      .def_property_readonly(
         "energy_angular_mc",
         [](const Component &self) { return self.energyAngularMC(); },
         Component::documentation("energy_angular_mc").data()
      )
      .def_property_readonly(
         "xys2d",
         [](const Component &self) { return self.XYs2d(); },
         Component::documentation("xys2d").data()
      )
      .def_property_readonly(
         "_angular_two_bodyuncorrelatedangular_energyenergy_angular_kalbach_mannreferencebranching3d_coulomb_plus_nuclear_elasticthermal_neutron_scattering_lawcoherent_photon_scatteringincoherent_photon_scatteringunspecifiedmulti_group3dangular_energy_mcenergy_angular_mcxys2d",
         [](const Component &self) { return self._angularTwoBodyuncorrelatedangularEnergyenergyAngularKalbachMannreferencebranching3dCoulombPlusNuclearElasticthermalNeutronScatteringLawcoherentPhotonScatteringincoherentPhotonScatteringunspecifiedmultiGroup3dangularEnergyMCenergyAngularMCXYs2d(); },
         Component::documentation("_angular_two_bodyuncorrelatedangular_energyenergy_angular_kalbach_mannreferencebranching3d_coulomb_plus_nuclear_elasticthermal_neutron_scattering_lawcoherent_photon_scatteringincoherent_photon_scatteringunspecifiedmulti_group3dangular_energy_mcenergy_angular_mcxys2d").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_transport
} // namespace python_v2_0
