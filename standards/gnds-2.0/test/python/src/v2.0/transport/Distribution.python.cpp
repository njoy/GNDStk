
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/transport/Distribution.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_transport {

// wrapper for transport::Distribution
void wrapDistribution(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = transport::Distribution;
   using _t = std::variant<
      transport::AngularTwoBody,
      transport::Uncorrelated,
      transport::AngularEnergy,
      transport::EnergyAngular,
      transport::KalbachMann,
      transport::Reference,
      transport::Branching3d,
      cpTransport::CoulombPlusNuclearElastic,
      tsl::ThermalNeutronScatteringLaw,
      atomic::CoherentPhotonScattering,
      atomic::IncoherentPhotonScattering,
      transport::Unspecified,
      transport::MultiGroup3d,
      processed::AngularEnergyMC,
      processed::EnergyAngularMC,
      containers::XYs2d
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Distribution",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const _t &
      >(),
      py::arg("_angular_two_bodyuncorrelatedangular_energyenergy_angular_kalbach_mannreferencebranching3d_coulomb_plus_nuclear_elasticthermal_neutron_scattering_lawcoherent_photon_scatteringincoherent_photon_scatteringunspecifiedmulti_group3dangular_energy_mcenergy_angular_mcxys2d"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   object.def_property(
      "angular_two_body",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.angularTwoBody();
      },
      [](cppCLASS &self, const transport::AngularTwoBody &value)
      {
         self.angularTwoBody() = value;
      },
      cppCLASS::component_t::documentation("angular_two_body").data()
   );

   object.def_property(
      "uncorrelated",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.uncorrelated();
      },
      [](cppCLASS &self, const transport::Uncorrelated &value)
      {
         self.uncorrelated() = value;
      },
      cppCLASS::component_t::documentation("uncorrelated").data()
   );

   object.def_property(
      "angular_energy",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.angularEnergy();
      },
      [](cppCLASS &self, const transport::AngularEnergy &value)
      {
         self.angularEnergy() = value;
      },
      cppCLASS::component_t::documentation("angular_energy").data()
   );

   object.def_property(
      "energy_angular",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.energyAngular();
      },
      [](cppCLASS &self, const transport::EnergyAngular &value)
      {
         self.energyAngular() = value;
      },
      cppCLASS::component_t::documentation("energy_angular").data()
   );

   object.def_property(
      "kalbach_mann",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.KalbachMann();
      },
      [](cppCLASS &self, const transport::KalbachMann &value)
      {
         self.KalbachMann() = value;
      },
      cppCLASS::component_t::documentation("kalbach_mann").data()
   );

   object.def_property(
      "reference",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.reference();
      },
      [](cppCLASS &self, const transport::Reference &value)
      {
         self.reference() = value;
      },
      cppCLASS::component_t::documentation("reference").data()
   );

   object.def_property(
      "branching3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.branching3d();
      },
      [](cppCLASS &self, const transport::Branching3d &value)
      {
         self.branching3d() = value;
      },
      cppCLASS::component_t::documentation("branching3d").data()
   );

   object.def_property(
      "coulomb_plus_nuclear_elastic",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.CoulombPlusNuclearElastic();
      },
      [](cppCLASS &self, const cpTransport::CoulombPlusNuclearElastic &value)
      {
         self.CoulombPlusNuclearElastic() = value;
      },
      cppCLASS::component_t::documentation("coulomb_plus_nuclear_elastic").data()
   );

   object.def_property(
      "thermal_neutron_scattering_law",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.thermalNeutronScatteringLaw();
      },
      [](cppCLASS &self, const tsl::ThermalNeutronScatteringLaw &value)
      {
         self.thermalNeutronScatteringLaw() = value;
      },
      cppCLASS::component_t::documentation("thermal_neutron_scattering_law").data()
   );

   object.def_property(
      "coherent_photon_scattering",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.coherentPhotonScattering();
      },
      [](cppCLASS &self, const atomic::CoherentPhotonScattering &value)
      {
         self.coherentPhotonScattering() = value;
      },
      cppCLASS::component_t::documentation("coherent_photon_scattering").data()
   );

   object.def_property(
      "incoherent_photon_scattering",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.incoherentPhotonScattering();
      },
      [](cppCLASS &self, const atomic::IncoherentPhotonScattering &value)
      {
         self.incoherentPhotonScattering() = value;
      },
      cppCLASS::component_t::documentation("incoherent_photon_scattering").data()
   );

   object.def_property(
      "unspecified",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.unspecified();
      },
      [](cppCLASS &self, const transport::Unspecified &value)
      {
         self.unspecified() = value;
      },
      cppCLASS::component_t::documentation("unspecified").data()
   );

   object.def_property(
      "multi_group3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.multiGroup3d();
      },
      [](cppCLASS &self, const transport::MultiGroup3d &value)
      {
         self.multiGroup3d() = value;
      },
      cppCLASS::component_t::documentation("multi_group3d").data()
   );

   object.def_property(
      "angular_energy_mc",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.angularEnergyMC();
      },
      [](cppCLASS &self, const processed::AngularEnergyMC &value)
      {
         self.angularEnergyMC() = value;
      },
      cppCLASS::component_t::documentation("angular_energy_mc").data()
   );

   object.def_property(
      "energy_angular_mc",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.energyAngularMC();
      },
      [](cppCLASS &self, const processed::EnergyAngularMC &value)
      {
         self.energyAngularMC() = value;
      },
      cppCLASS::component_t::documentation("energy_angular_mc").data()
   );

   object.def_property(
      "xys2d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs2d();
      },
      [](cppCLASS &self, const containers::XYs2d &value)
      {
         self.XYs2d() = value;
      },
      cppCLASS::component_t::documentation("xys2d").data()
   );

   object.def_property(
      "_angular_two_bodyuncorrelatedangular_energyenergy_angular_kalbach_mannreferencebranching3d_coulomb_plus_nuclear_elasticthermal_neutron_scattering_lawcoherent_photon_scatteringincoherent_photon_scatteringunspecifiedmulti_group3dangular_energy_mcenergy_angular_mcxys2d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._angularTwoBodyuncorrelatedangularEnergyenergyAngularKalbachMannreferencebranching3dCoulombPlusNuclearElasticthermalNeutronScatteringLawcoherentPhotonScatteringincoherentPhotonScatteringunspecifiedmultiGroup3dangularEnergyMCenergyAngularMCXYs2d();
      },
      [](cppCLASS &self, const _t &value)
      {
         self._angularTwoBodyuncorrelatedangularEnergyenergyAngularKalbachMannreferencebranching3dCoulombPlusNuclearElasticthermalNeutronScatteringLawcoherentPhotonScatteringincoherentPhotonScatteringunspecifiedmultiGroup3dangularEnergyMCenergyAngularMCXYs2d() = value;
      },
      cppCLASS::component_t::documentation("_angular_two_bodyuncorrelatedangular_energyenergy_angular_kalbach_mannreferencebranching3d_coulomb_plus_nuclear_elasticthermal_neutron_scattering_lawcoherent_photon_scatteringincoherent_photon_scatteringunspecifiedmulti_group3dangular_energy_mcenergy_angular_mcxys2d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_transport
} // namespace python_v2_0
