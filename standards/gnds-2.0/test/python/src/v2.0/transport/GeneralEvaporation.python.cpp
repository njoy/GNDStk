
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/transport/GeneralEvaporation.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_transport {

// wrapper for transport::GeneralEvaporation
void wrapGeneralEvaporation(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = transport::GeneralEvaporation;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "GeneralEvaporation",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<transport::U> &,
         const std::optional<transport::G> &,
         const std::optional<transport::Theta> &
      >(),
      py::arg("u") = std::nullopt,
      py::arg("g") = std::nullopt,
      py::arg("theta") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set U
   object.def_property(
      "u",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.U();
      },
      [](cppCLASS &self, const std::optional<transport::U> &value)
      {
         self.U() = value;
      },
      cppCLASS::component_t::documentation("u").data()
   );

   // get/set g
   object.def_property(
      "g",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.g();
      },
      [](cppCLASS &self, const std::optional<transport::G> &value)
      {
         self.g() = value;
      },
      cppCLASS::component_t::documentation("g").data()
   );

   // get/set theta
   object.def_property(
      "theta",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.theta();
      },
      [](cppCLASS &self, const std::optional<transport::Theta> &value)
      {
         self.theta() = value;
      },
      cppCLASS::component_t::documentation("theta").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_transport
} // namespace python_v2_0
