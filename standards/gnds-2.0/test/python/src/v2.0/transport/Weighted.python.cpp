
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/transport/Weighted.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_transport {

// wrapper for transport::Weighted
void wrapWeighted(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = transport::Weighted;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Weighted",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const containers::XYs1d &,
         const std::optional<containers::XYs2d> &,
         const std::optional<transport::Evaporation> &,
         const std::optional<transport::GeneralEvaporation> &,
         const std::optional<fissionTransport::SimpleMaxwellianFission> &,
         const std::optional<fissionTransport::Watt> &,
         const std::optional<fissionTransport::MadlandNix> &
      >(),
      py::arg("xys1d"),
      py::arg("xys2d") = std::nullopt,
      py::arg("evaporation") = std::nullopt,
      py::arg("general_evaporation") = std::nullopt,
      py::arg("simple_maxwellian_fission") = std::nullopt,
      py::arg("watt") = std::nullopt,
      py::arg("madland_nix") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set XYs1d
   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const containers::XYs1d &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   // get/set XYs2d
   object.def_property(
      "xys2d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs2d();
      },
      [](cppCLASS &self, const std::optional<containers::XYs2d> &value)
      {
         self.XYs2d() = value;
      },
      cppCLASS::component_t::documentation("xys2d").data()
   );

   // get/set evaporation
   object.def_property(
      "evaporation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.evaporation();
      },
      [](cppCLASS &self, const std::optional<transport::Evaporation> &value)
      {
         self.evaporation() = value;
      },
      cppCLASS::component_t::documentation("evaporation").data()
   );

   // get/set generalEvaporation
   object.def_property(
      "general_evaporation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.generalEvaporation();
      },
      [](cppCLASS &self, const std::optional<transport::GeneralEvaporation> &value)
      {
         self.generalEvaporation() = value;
      },
      cppCLASS::component_t::documentation("general_evaporation").data()
   );

   // get/set simpleMaxwellianFission
   object.def_property(
      "simple_maxwellian_fission",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.simpleMaxwellianFission();
      },
      [](cppCLASS &self, const std::optional<fissionTransport::SimpleMaxwellianFission> &value)
      {
         self.simpleMaxwellianFission() = value;
      },
      cppCLASS::component_t::documentation("simple_maxwellian_fission").data()
   );

   // get/set Watt
   object.def_property(
      "watt",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Watt();
      },
      [](cppCLASS &self, const std::optional<fissionTransport::Watt> &value)
      {
         self.Watt() = value;
      },
      cppCLASS::component_t::documentation("watt").data()
   );

   // get/set MadlandNix
   object.def_property(
      "madland_nix",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.MadlandNix();
      },
      [](cppCLASS &self, const std::optional<fissionTransport::MadlandNix> &value)
      {
         self.MadlandNix() = value;
      },
      cppCLASS::component_t::documentation("madland_nix").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_transport
} // namespace python_v2_0
