
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/transport/OutputChannel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_transport {

// wrapper for transport::OutputChannel
void wrapOutputChannel(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = transport::OutputChannel;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "OutputChannel",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<XMLName> &,
         const std::optional<XMLName> &,
         const std::optional<common::Q> &,
         const std::optional<common::Products> &,
         const std::optional<fissionFragmentData::FissionFragmentData> &
      >(),
      py::arg("genre") = std::nullopt,
      py::arg("process") = std::nullopt,
      py::arg("q") = std::nullopt,
      py::arg("products") = std::nullopt,
      py::arg("fission_fragment_data") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set genre
   object.def_property(
      "genre",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.genre();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.genre() = value;
      },
      cppCLASS::component_t::documentation("genre").data()
   );

   // get/set process
   object.def_property(
      "process",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.process();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.process() = value;
      },
      cppCLASS::component_t::documentation("process").data()
   );

   // get/set Q
   object.def_property(
      "q",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Q();
      },
      [](cppCLASS &self, const std::optional<common::Q> &value)
      {
         self.Q() = value;
      },
      cppCLASS::component_t::documentation("q").data()
   );

   // get/set products
   object.def_property(
      "products",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.products();
      },
      [](cppCLASS &self, const std::optional<common::Products> &value)
      {
         self.products() = value;
      },
      cppCLASS::component_t::documentation("products").data()
   );

   // get/set fissionFragmentData
   object.def_property(
      "fission_fragment_data",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.fissionFragmentData();
      },
      [](cppCLASS &self, const std::optional<fissionFragmentData::FissionFragmentData> &value)
      {
         self.fissionFragmentData() = value;
      },
      cppCLASS::component_t::documentation("fission_fragment_data").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_transport
} // namespace python_v2_0
