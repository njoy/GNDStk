
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/pops/Halflife.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_pops {

// wrapper for pops::Halflife
void wrapHalflife(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = pops::Halflife;
   using _t = std::variant<
      containers::String,
      containers::Double
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Halflife",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<XMLName> &,
         const std::optional<XMLName> &,
         const std::optional<XMLName> &,
         const std::optional<documentation::Documentation> &,
         const std::optional<pops::Uncertainty> &,
         const _t &
      >(),
      py::arg("label") = std::nullopt,
      py::arg("unit") = std::nullopt,
      py::arg("value") = std::nullopt,
      py::arg("documentation") = std::nullopt,
      py::arg("uncertainty") = std::nullopt,
      py::arg("_string_double"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set unit
   object.def_property(
      "unit",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.unit();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.unit() = value;
      },
      cppCLASS::component_t::documentation("unit").data()
   );

   // get/set value
   object.def_property(
      "value",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.value();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.value() = value;
      },
      cppCLASS::component_t::documentation("value").data()
   );

   // get/set documentation
   object.def_property(
      "documentation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.documentation();
      },
      [](cppCLASS &self, const std::optional<documentation::Documentation> &value)
      {
         self.documentation() = value;
      },
      cppCLASS::component_t::documentation("documentation").data()
   );

   // get/set uncertainty
   object.def_property(
      "uncertainty",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.uncertainty();
      },
      [](cppCLASS &self, const std::optional<pops::Uncertainty> &value)
      {
         self.uncertainty() = value;
      },
      cppCLASS::component_t::documentation("uncertainty").data()
   );

   object.def_property(
      "string",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.string();
      },
      [](cppCLASS &self, const containers::String &value)
      {
         self.string() = value;
      },
      cppCLASS::component_t::documentation("string").data()
   );

   object.def_property(
      "double",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Double();
      },
      [](cppCLASS &self, const containers::Double &value)
      {
         self.Double() = value;
      },
      cppCLASS::component_t::documentation("double").data()
   );

   object.def_property(
      "_string_double",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self._stringDouble();
      },
      [](cppCLASS &self, const _t &value)
      {
         self._stringDouble() = value;
      },
      cppCLASS::component_t::documentation("_string_double").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_pops
} // namespace python_v2_0
