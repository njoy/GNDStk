
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/pops/DecayMode.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_pops {

// wrapper for pops::DecayMode
void wrapDecayMode(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = pops::DecayMode;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "DecayMode",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const XMLName &,
         const enums::DecayType &,
         const pops::Probability &,
         const std::optional<pops::InternalConversionCoefficients> &,
         const std::optional<pops::PhotonEmissionProbabilities> &,
         const std::optional<pops::Q> &,
         const std::optional<pops::DecayPath> &,
         const std::optional<pops::Spectra> &
      >(),
      py::arg("label"),
      py::arg("mode"),
      py::arg("probability"),
      py::arg("internal_conversion_coefficients") = std::nullopt,
      py::arg("photon_emission_probabilities") = std::nullopt,
      py::arg("q") = std::nullopt,
      py::arg("decay_path") = std::nullopt,
      py::arg("spectra") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const XMLName &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set mode
   object.def_property(
      "mode",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.mode();
      },
      [](cppCLASS &self, const enums::DecayType &value)
      {
         self.mode() = value;
      },
      cppCLASS::component_t::documentation("mode").data()
   );

   // get/set probability
   object.def_property(
      "probability",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.probability();
      },
      [](cppCLASS &self, const pops::Probability &value)
      {
         self.probability() = value;
      },
      cppCLASS::component_t::documentation("probability").data()
   );

   // get/set internalConversionCoefficients
   object.def_property(
      "internal_conversion_coefficients",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.internalConversionCoefficients();
      },
      [](cppCLASS &self, const std::optional<pops::InternalConversionCoefficients> &value)
      {
         self.internalConversionCoefficients() = value;
      },
      cppCLASS::component_t::documentation("internal_conversion_coefficients").data()
   );

   // get/set photonEmissionProbabilities
   object.def_property(
      "photon_emission_probabilities",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.photonEmissionProbabilities();
      },
      [](cppCLASS &self, const std::optional<pops::PhotonEmissionProbabilities> &value)
      {
         self.photonEmissionProbabilities() = value;
      },
      cppCLASS::component_t::documentation("photon_emission_probabilities").data()
   );

   // get/set Q
   object.def_property(
      "q",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Q();
      },
      [](cppCLASS &self, const std::optional<pops::Q> &value)
      {
         self.Q() = value;
      },
      cppCLASS::component_t::documentation("q").data()
   );

   // get/set decayPath
   object.def_property(
      "decay_path",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.decayPath();
      },
      [](cppCLASS &self, const std::optional<pops::DecayPath> &value)
      {
         self.decayPath() = value;
      },
      cppCLASS::component_t::documentation("decay_path").data()
   );

   // get/set spectra
   object.def_property(
      "spectra",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.spectra();
      },
      [](cppCLASS &self, const std::optional<pops::Spectra> &value)
      {
         self.spectra() = value;
      },
      cppCLASS::component_t::documentation("spectra").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_pops
} // namespace python_v2_0
