
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "test/v2.0/pops/Discrete.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_pops {

// wrapper for pops::Discrete
void wrapDiscrete(py::module &module)
{
   using namespace test;
   using namespace test::v2_0;

   // type aliases
   using cppCLASS = pops::Discrete;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Discrete",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<XMLName> &,
         const pops::DiscreteEnergy &,
         const pops::Intensity &,
         const std::optional<pops::InternalConversionCoefficients> &,
         const std::optional<pops::InternalPairFormationCoefficient> &,
         const std::optional<pops::PhotonEmissionProbabilities> &,
         const std::optional<pops::PositronEmissionIntensity> &
      >(),
      py::arg("type") = std::nullopt,
      py::arg("discrete_energy"),
      py::arg("intensity"),
      py::arg("internal_conversion_coefficients") = std::nullopt,
      py::arg("internal_pair_formation_coefficient") = std::nullopt,
      py::arg("photon_emission_probabilities") = std::nullopt,
      py::arg("positron_emission_intensity") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set type
   object.def_property(
      "type",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.type();
      },
      [](cppCLASS &self, const std::optional<XMLName> &value)
      {
         self.type() = value;
      },
      cppCLASS::component_t::documentation("type").data()
   );

   // get/set discreteEnergy
   object.def_property(
      "discrete_energy",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.discreteEnergy();
      },
      [](cppCLASS &self, const pops::DiscreteEnergy &value)
      {
         self.discreteEnergy() = value;
      },
      cppCLASS::component_t::documentation("discrete_energy").data()
   );

   // get/set intensity
   object.def_property(
      "intensity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.intensity();
      },
      [](cppCLASS &self, const pops::Intensity &value)
      {
         self.intensity() = value;
      },
      cppCLASS::component_t::documentation("intensity").data()
   );

   // get/set internalConversionCoefficients
   object.def_property(
      "internal_conversion_coefficients",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.internalConversionCoefficients();
      },
      [](cppCLASS &self, const std::optional<pops::InternalConversionCoefficients> &value)
      {
         self.internalConversionCoefficients() = value;
      },
      cppCLASS::component_t::documentation("internal_conversion_coefficients").data()
   );

   // get/set internalPairFormationCoefficient
   object.def_property(
      "internal_pair_formation_coefficient",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.internalPairFormationCoefficient();
      },
      [](cppCLASS &self, const std::optional<pops::InternalPairFormationCoefficient> &value)
      {
         self.internalPairFormationCoefficient() = value;
      },
      cppCLASS::component_t::documentation("internal_pair_formation_coefficient").data()
   );

   // get/set photonEmissionProbabilities
   object.def_property(
      "photon_emission_probabilities",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.photonEmissionProbabilities();
      },
      [](cppCLASS &self, const std::optional<pops::PhotonEmissionProbabilities> &value)
      {
         self.photonEmissionProbabilities() = value;
      },
      cppCLASS::component_t::documentation("photon_emission_probabilities").data()
   );

   // get/set positronEmissionIntensity
   object.def_property(
      "positron_emission_intensity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.positronEmissionIntensity();
      },
      [](cppCLASS &self, const std::optional<pops::PositronEmissionIntensity> &value)
      {
         self.positronEmissionIntensity() = value;
      },
      cppCLASS::component_t::documentation("positron_emission_intensity").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_pops
} // namespace python_v2_0
