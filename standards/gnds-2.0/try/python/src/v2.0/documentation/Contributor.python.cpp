
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/documentation/Contributor.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_documentation {

// Contributor wrapper
void wrapContributor(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = documentation::Contributor;

   // create the component
   python::class_<Component> component(
      module,
      "Contributor",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const UTF8Text &,
            const enums::ContributorType &,
            const std::optional<UTF8Text> &,
            const std::optional<UTF8Text> &,
            const std::optional<documentation::Affiliations> &,
            const std::optional<documentation::Note> &
         >(),
         python::arg("name"),
         python::arg("contributor_type"),
         python::arg("orcid") = std::nullopt,
         python::arg("email") = std::nullopt,
         python::arg("affiliations") = std::nullopt,
         python::arg("note") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "name",
         [](const Component &self) { return self.name(); },
         Component::documentation("name").data()
      )
      .def_property_readonly(
         "contributor_type",
         [](const Component &self) { return self.contributorType(); },
         Component::documentation("contributor_type").data()
      )
      .def_property_readonly(
         "orcid",
         [](const Component &self) { return self.orcid(); },
         Component::documentation("orcid").data()
      )
      .def_property_readonly(
         "email",
         [](const Component &self) { return self.email(); },
         Component::documentation("email").data()
      )
      .def_property_readonly(
         "affiliations",
         [](const Component &self) { return self.affiliations(); },
         Component::documentation("affiliations").data()
      )
      .def_property_readonly(
         "note",
         [](const Component &self) { return self.note(); },
         Component::documentation("note").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_documentation
} // namespace python_v2_0
