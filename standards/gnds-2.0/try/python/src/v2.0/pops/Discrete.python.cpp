
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/pops/Discrete.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_pops {

// Discrete wrapper
void wrapDiscrete(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = pops::Discrete;

   // create the component
   python::class_<Component> component(
      module,
      "Discrete",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<XMLName> &,
            const pops::DiscreteEnergy &,
            const pops::Intensity &,
            const std::optional<pops::InternalConversionCoefficients> &,
            const std::optional<pops::InternalPairFormationCoefficient> &,
            const std::optional<pops::PhotonEmissionProbabilities> &,
            const std::optional<pops::PositronEmissionIntensity> &
         >(),
         python::arg("type") = std::nullopt,
         python::arg("energy"),
         python::arg("intensity"),
         python::arg("internal_conversion_coefficients") = std::nullopt,
         python::arg("internal_pair_formation_coefficient") = std::nullopt,
         python::arg("photon_emission_probabilities") = std::nullopt,
         python::arg("positron_emission_intensity") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "type",
         [](const Component &self) { return self.type(); },
         Component::documentation("type").data()
      )
      .def_property_readonly(
         "energy",
         [](const Component &self) { return self.energy(); },
         Component::documentation("energy").data()
      )
      .def_property_readonly(
         "intensity",
         [](const Component &self) { return self.intensity(); },
         Component::documentation("intensity").data()
      )
      .def_property_readonly(
         "internal_conversion_coefficients",
         [](const Component &self) { return self.internalConversionCoefficients(); },
         Component::documentation("internal_conversion_coefficients").data()
      )
      .def_property_readonly(
         "internal_pair_formation_coefficient",
         [](const Component &self) { return self.internalPairFormationCoefficient(); },
         Component::documentation("internal_pair_formation_coefficient").data()
      )
      .def_property_readonly(
         "photon_emission_probabilities",
         [](const Component &self) { return self.photonEmissionProbabilities(); },
         Component::documentation("photon_emission_probabilities").data()
      )
      .def_property_readonly(
         "positron_emission_intensity",
         [](const Component &self) { return self.positronEmissionIntensity(); },
         Component::documentation("positron_emission_intensity").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_pops
} // namespace python_v2_0
