
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/pops/DecayMode.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_pops {

// DecayMode wrapper
void wrapDecayMode(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = pops::DecayMode;

   // create the component
   python::class_<Component> component(
      module,
      "DecayMode",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const XMLName &,
            const enums::DecayType &,
            const pops::Probability &,
            const std::optional<pops::InternalConversionCoefficients> &,
            const std::optional<pops::PhotonEmissionProbabilities> &,
            const std::optional<pops::Q> &,
            const std::optional<pops::DecayPath> &,
            const std::optional<pops::Spectra> &
         >(),
         python::arg("label"),
         python::arg("mode"),
         python::arg("probability"),
         python::arg("internal_conversion_coefficients") = std::nullopt,
         python::arg("photon_emission_probabilities") = std::nullopt,
         python::arg("q") = std::nullopt,
         python::arg("decay_path") = std::nullopt,
         python::arg("spectra") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self) { return self.label(); },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "mode",
         [](const Component &self) { return self.mode(); },
         Component::documentation("mode").data()
      )
      .def_property_readonly(
         "probability",
         [](const Component &self) { return self.probability(); },
         Component::documentation("probability").data()
      )
      .def_property_readonly(
         "internal_conversion_coefficients",
         [](const Component &self) { return self.internalConversionCoefficients(); },
         Component::documentation("internal_conversion_coefficients").data()
      )
      .def_property_readonly(
         "photon_emission_probabilities",
         [](const Component &self) { return self.photonEmissionProbabilities(); },
         Component::documentation("photon_emission_probabilities").data()
      )
      .def_property_readonly(
         "q",
         [](const Component &self) { return self.Q(); },
         Component::documentation("q").data()
      )
      .def_property_readonly(
         "decay_path",
         [](const Component &self) { return self.decayPath(); },
         Component::documentation("decay_path").data()
      )
      .def_property_readonly(
         "spectra",
         [](const Component &self) { return self.spectra(); },
         Component::documentation("spectra").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_pops
} // namespace python_v2_0
