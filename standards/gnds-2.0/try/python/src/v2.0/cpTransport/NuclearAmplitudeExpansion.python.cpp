
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/cpTransport/NuclearAmplitudeExpansion.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_cpTransport {

// NuclearAmplitudeExpansion wrapper
void wrapNuclearAmplitudeExpansion(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = cpTransport::NuclearAmplitudeExpansion;

   // create the component
   python::class_<Component> component(
      module,
      "NuclearAmplitudeExpansion",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const cpTransport::NuclearTerm &,
            const cpTransport::RealInterferenceTerm &,
            const cpTransport::ImaginaryInterferenceTerm &
         >(),
         python::arg("nuclear_term"),
         python::arg("real_interference_term"),
         python::arg("imaginary_interference_term"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "nuclear_term",
         [](const Component &self) { return self.nuclearTerm(); },
         Component::documentation("nuclear_term").data()
      )
      .def_property_readonly(
         "real_interference_term",
         [](const Component &self) { return self.realInterferenceTerm(); },
         Component::documentation("real_interference_term").data()
      )
      .def_property_readonly(
         "imaginary_interference_term",
         [](const Component &self) { return self.imaginaryInterferenceTerm(); },
         Component::documentation("imaginary_interference_term").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_cpTransport
} // namespace python_v2_0
