
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/transport/Energy_uncorrelated.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_transport {

// Energy_uncorrelated wrapper
void wrapEnergy_uncorrelated(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = transport::Energy_uncorrelated;

   // create the component
   python::class_<Component> component(
      module,
      "Energy_uncorrelated",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<unknownNamespace::XYs2d> &,
            const std::optional<unknownNamespace::Regions2d> &,
            const std::optional<transport::GeneralEvaporation> &,
            const std::optional<transport::DiscreteGamma> &,
            const std::optional<transport::PrimaryGamma> &,
            const std::optional<transport::NBodyPhaseSpace> &,
            const std::optional<transport::Evaporation> &,
            const std::optional<transport::WeightedFunctionals> &,
            const std::optional<fissionTransport::SimpleMaxwellianFission> &,
            const std::optional<fissionTransport::Watt> &,
            const std::optional<fissionTransport::MadlandNix> &
         >(),
         python::arg("xys2d") = std::nullopt,
         python::arg("regions2d") = std::nullopt,
         python::arg("general_evaporation") = std::nullopt,
         python::arg("discrete_gamma") = std::nullopt,
         python::arg("primary_gamma") = std::nullopt,
         python::arg("nbody_phase_space") = std::nullopt,
         python::arg("evaporation") = std::nullopt,
         python::arg("weighted_functionals") = std::nullopt,
         python::arg("simple_maxwellian_fission") = std::nullopt,
         python::arg("watt") = std::nullopt,
         python::arg("madland_nix") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "xys2d",
         [](const Component &self) { return self.XYs2d(); },
         Component::documentation("xys2d").data()
      )
      .def_property_readonly(
         "regions2d",
         [](const Component &self) { return self.regions2d(); },
         Component::documentation("regions2d").data()
      )
      .def_property_readonly(
         "general_evaporation",
         [](const Component &self) { return self.generalEvaporation(); },
         Component::documentation("general_evaporation").data()
      )
      .def_property_readonly(
         "discrete_gamma",
         [](const Component &self) { return self.discreteGamma(); },
         Component::documentation("discrete_gamma").data()
      )
      .def_property_readonly(
         "primary_gamma",
         [](const Component &self) { return self.primaryGamma(); },
         Component::documentation("primary_gamma").data()
      )
      .def_property_readonly(
         "nbody_phase_space",
         [](const Component &self) { return self.NBodyPhaseSpace(); },
         Component::documentation("nbody_phase_space").data()
      )
      .def_property_readonly(
         "evaporation",
         [](const Component &self) { return self.evaporation(); },
         Component::documentation("evaporation").data()
      )
      .def_property_readonly(
         "weighted_functionals",
         [](const Component &self) { return self.weightedFunctionals(); },
         Component::documentation("weighted_functionals").data()
      )
      .def_property_readonly(
         "simple_maxwellian_fission",
         [](const Component &self) { return self.simpleMaxwellianFission(); },
         Component::documentation("simple_maxwellian_fission").data()
      )
      .def_property_readonly(
         "watt",
         [](const Component &self) { return self.Watt(); },
         Component::documentation("watt").data()
      )
      .def_property_readonly(
         "madland_nix",
         [](const Component &self) { return self.MadlandNix(); },
         Component::documentation("madland_nix").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_transport
} // namespace python_v2_0
