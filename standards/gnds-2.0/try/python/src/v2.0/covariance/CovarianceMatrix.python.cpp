
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/covariance/CovarianceMatrix.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_covariance {

// CovarianceMatrix wrapper
void wrapCovarianceMatrix(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = covariance::CovarianceMatrix;
   using _t = std::variant<
      containers::Gridded2d,
      covariance::SandwichProduct
   >;

   // create the component
   python::class_<Component> component(
      module,
      "CovarianceMatrix",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<XMLName> &,
            const std::optional<enums::Frame> &,
            const XMLName &,
            const _t &
         >(),
         python::arg("label") = std::nullopt,
         python::arg("product_frame") = std::nullopt,
         python::arg("type"),
         python::arg("_gridded2dsandwich_product"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self) { return self.label(); },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "product_frame",
         [](const Component &self) { return self.productFrame(); },
         Component::documentation("product_frame").data()
      )
      .def_property_readonly(
         "type",
         [](const Component &self) { return self.type(); },
         Component::documentation("type").data()
      )
      .def_property_readonly(
         "gridded2d",
         [](const Component &self) { return self.gridded2d(); },
         Component::documentation("gridded2d").data()
      )
      .def_property_readonly(
         "sandwich_product",
         [](const Component &self) { return self.sandwichProduct(); },
         Component::documentation("sandwich_product").data()
      )
      .def_property_readonly(
         "_gridded2dsandwich_product",
         [](const Component &self) { return self._gridded2dsandwichProduct(); },
         Component::documentation("_gridded2dsandwich_product").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_covariance
} // namespace python_v2_0
