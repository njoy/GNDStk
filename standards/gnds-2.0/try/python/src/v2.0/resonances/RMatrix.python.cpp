
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/resonances/RMatrix.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_resonances {

// RMatrix wrapper
void wrapRMatrix(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = resonances::RMatrix;

   // create the component
   python::class_<Component> component(
      module,
      "RMatrix",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const XMLName &,
            const XMLName &,
            const std::optional<enums::BoundaryCondition> &,
            const std::optional<Float64> &,
            const std::optional<bool> &,
            const std::optional<bool> &,
            const std::optional<bool> &,
            const std::optional<bool> &,
            const std::optional<pops::PoPs_database> &,
            const resonances::ResonanceReactions &,
            const resonances::SpinGroups &
         >(),
         python::arg("label"),
         python::arg("approximation"),
         python::arg("boundary_condition") = std::nullopt,
         python::arg("boundary_condition_value") = std::nullopt,
         python::arg("calculate_channel_radius") = std::nullopt,
         python::arg("calculate_penetrability") = std::nullopt,
         python::arg("use_for_self_shielding_only") = std::nullopt,
         python::arg("supports_angular_reconstruction") = std::nullopt,
         python::arg("po_ps") = std::nullopt,
         python::arg("resonance_reactions"),
         python::arg("spin_groups"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "label",
         [](const Component &self) { return self.label(); },
         Component::documentation("label").data()
      )
      .def_property_readonly(
         "approximation",
         [](const Component &self) { return self.approximation(); },
         Component::documentation("approximation").data()
      )
      .def_property_readonly(
         "boundary_condition",
         [](const Component &self) { return self.boundaryCondition().value(); },
         Component::documentation("boundary_condition").data()
      )
      .def_property_readonly(
         "boundary_condition_value",
         [](const Component &self) { return self.boundaryConditionValue(); },
         Component::documentation("boundary_condition_value").data()
      )
      .def_property_readonly(
         "calculate_channel_radius",
         [](const Component &self) { return self.calculateChannelRadius().value(); },
         Component::documentation("calculate_channel_radius").data()
      )
      .def_property_readonly(
         "calculate_penetrability",
         [](const Component &self) { return self.calculatePenetrability().value(); },
         Component::documentation("calculate_penetrability").data()
      )
      .def_property_readonly(
         "use_for_self_shielding_only",
         [](const Component &self) { return self.useForSelfShieldingOnly().value(); },
         Component::documentation("use_for_self_shielding_only").data()
      )
      .def_property_readonly(
         "supports_angular_reconstruction",
         [](const Component &self) { return self.supportsAngularReconstruction().value(); },
         Component::documentation("supports_angular_reconstruction").data()
      )
      .def_property_readonly(
         "po_ps",
         [](const Component &self) { return self.PoPs(); },
         Component::documentation("po_ps").data()
      )
      .def_property_readonly(
         "resonance_reactions",
         [](const Component &self) { return self.resonanceReactions(); },
         Component::documentation("resonance_reactions").data()
      )
      .def_property_readonly(
         "spin_groups",
         [](const Component &self) { return self.spinGroups(); },
         Component::documentation("spin_groups").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_resonances
} // namespace python_v2_0
