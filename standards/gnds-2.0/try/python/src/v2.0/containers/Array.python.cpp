
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/containers/Array.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_containers {

// Array wrapper
void wrapArray(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = containers::Array;

   // create the component
   python::class_<Component> component(
      module,
      "Array",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const IntegerTuple &,
            const std::optional<UTF8Text> &,
            const std::optional<UTF8Text> &,
            const std::optional<UTF8Text> &,
            const std::optional<UTF8Text> &,
            const std::optional<IntegerTuple> &,
            const std::optional<std::vector<containers::Values>> &,
            const std::optional<std::vector<containers::Array>> &
         >(),
         python::arg("shape"),
         python::arg("compression") = std::nullopt,
         python::arg("symmetry") = std::nullopt,
         python::arg("permutation") = std::nullopt,
         python::arg("storage_order") = std::nullopt,
         python::arg("offset") = std::nullopt,
         python::arg("values") = std::nullopt,
         python::arg("array") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "shape",
         [](const Component &self) { return self.shape(); },
         Component::documentation("shape").data()
      )
      .def_property_readonly(
         "compression",
         [](const Component &self) { return self.compression().value(); },
         Component::documentation("compression").data()
      )
      .def_property_readonly(
         "symmetry",
         [](const Component &self) { return self.symmetry().value(); },
         Component::documentation("symmetry").data()
      )
      .def_property_readonly(
         "permutation",
         [](const Component &self) { return self.permutation().value(); },
         Component::documentation("permutation").data()
      )
      .def_property_readonly(
         "storage_order",
         [](const Component &self) { return self.storageOrder().value(); },
         Component::documentation("storage_order").data()
      )
      .def_property_readonly(
         "offset",
         [](const Component &self) { return self.offset(); },
         Component::documentation("offset").data()
      )
      .def_property_readonly(
         "values",
         [](const Component &self) { return self.values(); },
         Component::documentation("values").data()
      )
      .def_property_readonly(
         "array",
         [](const Component &self) { return self.array(); },
         Component::documentation("array").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_containers
} // namespace python_v2_0
