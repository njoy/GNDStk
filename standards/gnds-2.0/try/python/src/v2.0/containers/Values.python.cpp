
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "try/v2.0/containers/Values.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v2_0 {
namespace python_containers {

// Values wrapper
void wrapValues(python::module &module)
{
   using namespace try;
   using namespace try::v2_0;

   // type aliases
   using Component = containers::Values;

   // create the component
   python::class_<Component> component(
      module,
      "Values",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<UTF8Text> &,
            const std::optional<Integer32> &,
            const std::optional<Integer32> &,
            const std::optional<UTF8Text> &,
            const std::optional<Integer32> &,
            const std::optional<Integer32> &
         >(),
         python::arg("value_type") = std::nullopt,
         python::arg("start") = std::nullopt,
         python::arg("length") = std::nullopt,
         python::arg("href") = std::nullopt,
         python::arg("start_index") = std::nullopt,
         python::arg("count") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def(
         python::init<
            const std::vector<int> &
         >(),
         python::arg("ints"),
         Component::documentation("constructor").data()
      )
      .def(
         python::init<
            const std::vector<double> &
         >(),
         python::arg("doubles"),
         Component::documentation("constructor").data()
      )
      .def(
         python::init<
            const std::vector<std::string> &
         >(),
         python::arg("strings"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "value_type",
         [](const Component &self) { return self.valueType().value(); },
         Component::documentation("value_type").data()
      )
      .def_property_readonly(
         "start",
         [](const Component &self) { return self.start().value(); },
         Component::documentation("start").data()
      )
      .def_property_readonly(
         "length",
         [](const Component &self) { return self.length(); },
         Component::documentation("length").data()
      )
      .def_property_readonly(
         "href",
         [](const Component &self) { return self.href(); },
         Component::documentation("href").data()
      )
      .def_property_readonly(
         "start_index",
         [](const Component &self) { return self.startIndex(); },
         Component::documentation("start_index").data()
      )
      .def_property_readonly(
         "count",
         [](const Component &self) { return self.count(); },
         Component::documentation("count").data()
      )
      .def_property_readonly(
         "ints",
         [] (const Component &self) { return self.ints(); },
         Component::documentation("ints").data()
      )
      .def_property_readonly(
         "doubles",
         [] (const Component &self) { return self.doubles(); },
         Component::documentation("doubles").data()
      )
      .def_property_readonly(
         "strings",
         [] (const Component &self) { return self.strings(); },
         Component::documentation("strings").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_containers
} // namespace python_v2_0
