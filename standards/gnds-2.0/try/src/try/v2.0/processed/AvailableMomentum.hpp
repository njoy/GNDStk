
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_PROCESSED_AVAILABLEMOMENTUM
#define TRY_V2_0_PROCESSED_AVAILABLEMOMENTUM

#include "try/v2.0/containers/XYs1d.hpp"
#include "try/v2.0/containers/Gridded1d.hpp"

namespace try {
namespace v2_0 {
namespace processed {

// -----------------------------------------------------------------------------
// processed::
// class AvailableMomentum
// -----------------------------------------------------------------------------

class AvailableMomentum : public Component<processed::AvailableMomentum> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "processed"; }
   static auto CLASS() { return "AvailableMomentum"; }
   static auto FIELD() { return "availableMomentum"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         std::optional<containers::XYs1d>{}
            / --Child<>("XYs1d") |
         std::optional<containers::Gridded1d>{}
            / --Child<>("gridded1d")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::optional<containers::XYs1d>> XYs1d{this};
   Field<std::optional<containers::Gridded1d>> gridded1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->XYs1d, \
      this->gridded1d)

   // default, and from fields
   explicit AvailableMomentum(
      const wrapper<std::optional<containers::XYs1d>> &XYs1d = {},
      const wrapper<std::optional<containers::Gridded1d>> &gridded1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs1d(this,XYs1d),
      gridded1d(this,gridded1d)
   {
      Component::finish();
   }

   // from node
   explicit AvailableMomentum(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   AvailableMomentum(const AvailableMomentum &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   AvailableMomentum(AvailableMomentum &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   AvailableMomentum &operator=(const AvailableMomentum &) = default;
   AvailableMomentum &operator=(AvailableMomentum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/processed/AvailableMomentum/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class AvailableMomentum

} // namespace processed
} // namespace v2_0
} // namespace try

#endif
