
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_FPY_PRODUCTYIELDS
#define TRY_V2_0_FPY_PRODUCTYIELDS

#include "try/v2.0/fpy/ProductYield.hpp"

namespace try {
namespace v2_0 {
namespace fpy {

// -----------------------------------------------------------------------------
// fpy::
// class ProductYields
// -----------------------------------------------------------------------------

class ProductYields : public Component<fpy::ProductYields> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "fpy"; }
   static auto CLASS() { return "ProductYields"; }
   static auto FIELD() { return "productYields"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         fpy::ProductYield{}
            / ++Child<>("productYield")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::vector<fpy::ProductYield>> productYield{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->productYield)

   // default, and from fields
   explicit ProductYields(
      const wrapper<std::vector<fpy::ProductYield>> &productYield = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      productYield(this,productYield)
   {
      Component::finish();
   }

   // from node
   explicit ProductYields(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ProductYields(const ProductYields &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ProductYields(ProductYields &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ProductYields &operator=(const ProductYields &) = default;
   ProductYields &operator=(ProductYields &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/fpy/ProductYields/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ProductYields

} // namespace fpy
} // namespace v2_0
} // namespace try

#endif
