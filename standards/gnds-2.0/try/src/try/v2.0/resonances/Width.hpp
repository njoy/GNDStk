
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_RESONANCES_WIDTH
#define TRY_V2_0_RESONANCES_WIDTH

#include "try/v2.0/containers/Constant1d.hpp"
#include "try/v2.0/containers/XYs1d.hpp"
#include "try/v2.0/containers/Regions1d.hpp"

namespace try {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class Width
// -----------------------------------------------------------------------------

class Width : public Component<resonances::Width> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "Width"; }
   static auto FIELD() { return "width"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::string{}
            / Meta<>("resonanceReaction") |
         Float64{}
            / Meta<>("degreesOfFreedom") |
         // children
         std::optional<containers::Constant1d>{}
            / --Child<>("constant1d") |
         std::optional<containers::XYs1d>{}
            / --Child<>("XYs1d") |
         std::optional<containers::Regions1d>{}
            / --Child<>("regions1d")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::string> resonanceReaction{this};
   Field<Float64> degreesOfFreedom{this};

   // children
   Field<std::optional<containers::Constant1d>> constant1d{this};
   Field<std::optional<containers::XYs1d>> XYs1d{this};
   Field<std::optional<containers::Regions1d>> regions1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->resonanceReaction, \
      this->degreesOfFreedom, \
      this->constant1d, \
      this->XYs1d, \
      this->regions1d)

   // default, and from fields
   explicit Width(
      const wrapper<std::string> &resonanceReaction = {},
      const wrapper<Float64> &degreesOfFreedom = {},
      const wrapper<std::optional<containers::Constant1d>> &constant1d = {},
      const wrapper<std::optional<containers::XYs1d>> &XYs1d = {},
      const wrapper<std::optional<containers::Regions1d>> &regions1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      resonanceReaction(this,resonanceReaction),
      degreesOfFreedom(this,degreesOfFreedom),
      constant1d(this,constant1d),
      XYs1d(this,XYs1d),
      regions1d(this,regions1d)
   {
      Component::finish();
   }

   // from node
   explicit Width(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Width(const Width &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Width(Width &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Width &operator=(const Width &) = default;
   Width &operator=(Width &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/resonances/Width/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Width

} // namespace resonances
} // namespace v2_0
} // namespace try

#endif
