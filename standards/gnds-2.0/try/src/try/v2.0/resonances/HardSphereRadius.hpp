
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_RESONANCES_HARDSPHERERADIUS
#define TRY_V2_0_RESONANCES_HARDSPHERERADIUS

#include "try/v2.0/containers/Constant1d.hpp"

namespace try {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class HardSphereRadius
// -----------------------------------------------------------------------------

class HardSphereRadius : public Component<resonances::HardSphereRadius> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "HardSphereRadius"; }
   static auto FIELD() { return "hardSphereRadius"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         containers::Constant1d{}
            / --Child<>("constant1d")
      ;
   }

public:
   using Component::construct;

   // children
   Field<containers::Constant1d> constant1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->constant1d)

   // default, and from fields
   explicit HardSphereRadius(
      const wrapper<containers::Constant1d> &constant1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      constant1d(this,constant1d)
   {
      Component::finish();
   }

   // from node
   explicit HardSphereRadius(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   HardSphereRadius(const HardSphereRadius &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   HardSphereRadius(HardSphereRadius &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   HardSphereRadius &operator=(const HardSphereRadius &) = default;
   HardSphereRadius &operator=(HardSphereRadius &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/resonances/HardSphereRadius/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class HardSphereRadius

} // namespace resonances
} // namespace v2_0
} // namespace try

#endif
