
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_RESONANCES_RESOLVED
#define TRY_V2_0_RESONANCES_RESOLVED

#include "try/v2.0/resonances/RMatrix.hpp"
#include "try/v2.0/resonances/BreitWigner.hpp"
#include "try/v2.0/resonances/EnergyIntervals.hpp"

namespace try {
namespace v2_0 {
namespace resonances {

// -----------------------------------------------------------------------------
// resonances::
// class Resolved
// -----------------------------------------------------------------------------

class Resolved : public Component<resonances::Resolved> {
   friend class Component;

   using _t = std::variant<
      resonances::RMatrix,
      resonances::BreitWigner,
      resonances::EnergyIntervals
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "resonances"; }
   static auto CLASS() { return "Resolved"; }
   static auto FIELD() { return "resolved"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Float64{}
            / Meta<>("domainMin") |
         Float64{}
            / Meta<>("domainMax") |
         XMLName{}
            / Meta<>("domainUnit") |
         // children
         _t{}
            / --(Child<>("RMatrix") || Child<>("BreitWigner") || Child<>("energyIntervals"))
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<Float64> domainMin{this};
   Field<Float64> domainMax{this};
   Field<XMLName> domainUnit{this};

   // children - variant
   Field<_t> _RMatrixBreitWignerenergyIntervals{this};
   FieldPart<decltype(_RMatrixBreitWignerenergyIntervals),resonances::RMatrix> RMatrix{_RMatrixBreitWignerenergyIntervals};
   FieldPart<decltype(_RMatrixBreitWignerenergyIntervals),resonances::BreitWigner> BreitWigner{_RMatrixBreitWignerenergyIntervals};
   FieldPart<decltype(_RMatrixBreitWignerenergyIntervals),resonances::EnergyIntervals> energyIntervals{_RMatrixBreitWignerenergyIntervals};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->domainMin, \
      this->domainMax, \
      this->domainUnit, \
      this->_RMatrixBreitWignerenergyIntervals)

   // default, and from fields
   explicit Resolved(
      const wrapper<Float64> &domainMin = {},
      const wrapper<Float64> &domainMax = {},
      const wrapper<XMLName> &domainUnit = {},
      const wrapper<_t> &_RMatrixBreitWignerenergyIntervals = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      domainMin(this,domainMin),
      domainMax(this,domainMax),
      domainUnit(this,domainUnit),
      _RMatrixBreitWignerenergyIntervals(this,_RMatrixBreitWignerenergyIntervals)
   {
      Component::finish();
   }

   // from node
   explicit Resolved(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Resolved(const Resolved &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Resolved(Resolved &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Resolved &operator=(const Resolved &) = default;
   Resolved &operator=(Resolved &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/resonances/Resolved/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Resolved

} // namespace resonances
} // namespace v2_0
} // namespace try

#endif
