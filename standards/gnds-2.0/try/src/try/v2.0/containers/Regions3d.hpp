
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_CONTAINERS_REGIONS3D
#define TRY_V2_0_CONTAINERS_REGIONS3D

#include "try/v2.0/containers/Axes.hpp"
#include "try/v2.0/containers/Function3ds.hpp"

namespace try {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Regions3d
// -----------------------------------------------------------------------------

class Regions3d : public Component<containers::Regions3d> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Regions3d"; }
   static auto FIELD() { return "regions3d"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<Float64>{}
            / Meta<>("outerDomainValue") |
         // children
         std::optional<containers::Axes>{}
            / --Child<>("axes") |
         containers::Function3ds{}
            / --Child<>("function3ds")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> label{this};
   Field<std::optional<Float64>> outerDomainValue{this};

   // children
   Field<std::optional<containers::Axes>> axes{this};
   Field<containers::Function3ds> function3ds{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->outerDomainValue, \
      this->axes, \
      this->function3ds)

   // default, and from fields
   explicit Regions3d(
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<Float64>> &outerDomainValue = {},
      const wrapper<std::optional<containers::Axes>> &axes = {},
      const wrapper<containers::Function3ds> &function3ds = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      outerDomainValue(this,outerDomainValue),
      axes(this,axes),
      function3ds(this,function3ds)
   {
      Component::finish();
   }

   // from node
   explicit Regions3d(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Regions3d(const Regions3d &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Regions3d(Regions3d &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Regions3d &operator=(const Regions3d &) = default;
   Regions3d &operator=(Regions3d &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/containers/Regions3d/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Regions3d

} // namespace containers
} // namespace v2_0
} // namespace try

#endif
