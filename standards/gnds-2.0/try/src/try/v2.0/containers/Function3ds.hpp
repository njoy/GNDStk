
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_CONTAINERS_FUNCTION3DS
#define TRY_V2_0_CONTAINERS_FUNCTION3DS

#include "try/v2.0/containers/XYs3d.hpp"
#include "try/v2.0/containers/Gridded3d.hpp"

namespace try {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Function3ds
// -----------------------------------------------------------------------------

class Function3ds : public Component<containers::Function3ds> {
   friend class Component;

   using _t = std::variant<
      containers::XYs3d,
      containers::Gridded3d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Function3ds"; }
   static auto FIELD() { return "function3ds"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         _t{}
            / ++(Child<>("XYs3d") || Child<>("gridded3d"))
      ;
   }

public:
   using Component::construct;

   // children - variant
   Field<std::vector<_t>> _XYs3dgridded3d{this};
   FieldPart<decltype(_XYs3dgridded3d),containers::XYs3d> XYs3d{_XYs3dgridded3d};
   FieldPart<decltype(_XYs3dgridded3d),containers::Gridded3d> gridded3d{_XYs3dgridded3d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->_XYs3dgridded3d)

   // default, and from fields
   explicit Function3ds(
      const wrapper<std::vector<_t>> &_XYs3dgridded3d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      _XYs3dgridded3d(this,_XYs3dgridded3d)
   {
      Component::finish();
   }

   // from node
   explicit Function3ds(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Function3ds(const Function3ds &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Function3ds(Function3ds &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Function3ds &operator=(const Function3ds &) = default;
   Function3ds &operator=(Function3ds &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/containers/Function3ds/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Function3ds

} // namespace containers
} // namespace v2_0
} // namespace try

#endif
