
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_CONTAINERS_VALUES
#define TRY_V2_0_CONTAINERS_VALUES

#include "try/v2.0/key.hpp"

namespace try {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Values
// -----------------------------------------------------------------------------

class Values : public Component<containers::Values,true> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Values"; }
   static auto FIELD() { return "values"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Defaulted<UTF8Text>{"Float64"}
            / Meta<>("valueType") |
         Defaulted<Integer32>{0}
            / Meta<>("start") |
         std::optional<Integer32>{}
            / Meta<>("length") |
         std::optional<UTF8Text>{}
            / Meta<>("href") |
         std::optional<Integer32>{}
            / Meta<>("startIndex") |
         std::optional<Integer32>{}
            / Meta<>("count")
      ;
   }

public:
   using Component::construct;
   using BlockData::operator=;

   // defaults
   static inline const struct Defaults {
      static inline const UTF8Text valueType = "Float64";
      static inline const Integer32 start = 0;
   } defaults;

   // metadata
   mutable Field<Defaulted<UTF8Text>> valueType{this,defaults.valueType};
   mutable Field<Defaulted<Integer32>> start{this,defaults.start};
   mutable Field<std::optional<Integer32>> length{this};
   Field<std::optional<UTF8Text>> href{this};
   Field<std::optional<Integer32>> startIndex{this};
   Field<std::optional<Integer32>> count{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->valueType, \
      this->start, \
      this->length, \
      this->href, \
      this->startIndex, \
      this->count)

   // default, and from fields
   // std::optional replaces Defaulted; this class knows the default(s)
   explicit Values(
      const wrapper<std::optional<UTF8Text>> &valueType = {},
      const wrapper<std::optional<Integer32>> &start = {},
      const wrapper<std::optional<Integer32>> &length = {},
      const wrapper<std::optional<UTF8Text>> &href = {},
      const wrapper<std::optional<Integer32>> &startIndex = {},
      const wrapper<std::optional<Integer32>> &count = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      valueType(this,defaults.valueType,valueType),
      start(this,defaults.start,start),
      length(this,length),
      href(this,href),
      startIndex(this,startIndex),
      count(this,count)
   {
      Component::finish();
   }

   // from node
   explicit Values(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector
   template<class T, class = std::enable_if_t<BLOCKDATA::template supported<T>>>
   Values(const std::vector<T> &vector) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(vector);
   }

   // copy
   Values(const Values &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Values(Values &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Values &operator=(const Values &) = default;
   Values &operator=(Values &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/containers/Values/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Values

} // namespace containers
} // namespace v2_0
} // namespace try

#endif
