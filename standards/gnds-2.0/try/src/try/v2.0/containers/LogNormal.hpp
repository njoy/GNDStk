
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_CONTAINERS_LOGNORMAL
#define TRY_V2_0_CONTAINERS_LOGNORMAL

#include "try/v2.0/containers/Double.hpp"

namespace try {
namespace v2_0 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class LogNormal
// -----------------------------------------------------------------------------

class LogNormal : public Component<containers::LogNormal> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "LogNormal"; }
   static auto FIELD() { return "logNormal"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         containers::Double{}
            / --Child<>("Double")
      ;
   }

public:
   using Component::construct;

   // children
   Field<containers::Double> Double{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->Double)

   // default, and from fields
   explicit LogNormal(
      const wrapper<containers::Double> &Double = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      Double(this,Double)
   {
      Component::finish();
   }

   // from node
   explicit LogNormal(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   LogNormal(const LogNormal &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   LogNormal(LogNormal &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   LogNormal &operator=(const LogNormal &) = default;
   LogNormal &operator=(LogNormal &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/containers/LogNormal/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class LogNormal

} // namespace containers
} // namespace v2_0
} // namespace try

#endif
