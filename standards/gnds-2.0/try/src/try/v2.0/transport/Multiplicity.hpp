
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_TRANSPORT_MULTIPLICITY
#define TRY_V2_0_TRANSPORT_MULTIPLICITY

#include "try/v2.0/containers/XYs1d.hpp"
#include "try/v2.0/containers/Constant1d.hpp"
#include "try/v2.0/containers/Polynomial1d.hpp"
#include "try/v2.0/transport/Branching1d.hpp"
#include "try/v2.0/transport/Reference.hpp"
#include "try/v2.0/containers/Gridded1d.hpp"
#include "try/v2.0/containers/Regions1d.hpp"

namespace try {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Multiplicity
// -----------------------------------------------------------------------------

class Multiplicity : public Component<transport::Multiplicity> {
   friend class Component;

   using _t = std::variant<
      containers::XYs1d,
      containers::Constant1d,
      containers::Polynomial1d,
      transport::Branching1d,
      transport::Reference,
      containers::Gridded1d,
      containers::Regions1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Multiplicity"; }
   static auto FIELD() { return "multiplicity"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         _t{}
            / --(Child<>("XYs1d") || Child<>("constant1d") || Child<>("polynomial1d") || Child<>("branching1d") || Child<>("reference") || Child<>("gridded1d") || Child<>("regions1d"))
      ;
   }

public:
   using Component::construct;

   // children - variant
   Field<_t> _XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d{this};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),containers::XYs1d> XYs1d{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),containers::Constant1d> constant1d{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),containers::Polynomial1d> polynomial1d{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),transport::Branching1d> branching1d{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),transport::Reference> reference{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),containers::Gridded1d> gridded1d{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};
   FieldPart<decltype(_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d),containers::Regions1d> regions1d{_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d)

   // default, and from fields
   explicit Multiplicity(
      const wrapper<_t> &_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      _XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d(this,_XYs1dconstant1dpolynomial1dbranching1dreferencegridded1dregions1d)
   {
      Component::finish();
   }

   // from node
   explicit Multiplicity(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Multiplicity(const Multiplicity &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Multiplicity(Multiplicity &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Multiplicity &operator=(const Multiplicity &) = default;
   Multiplicity &operator=(Multiplicity &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/transport/Multiplicity/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Multiplicity

} // namespace transport
} // namespace v2_0
} // namespace try

#endif
