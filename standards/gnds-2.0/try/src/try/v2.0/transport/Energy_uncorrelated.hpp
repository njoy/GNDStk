
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_TRANSPORT_ENERGY_UNCORRELATED
#define TRY_V2_0_TRANSPORT_ENERGY_UNCORRELATED

#include "try/v2.0/unknownNamespace/XYs2d.hpp"
#include "try/v2.0/unknownNamespace/Regions2d.hpp"
#include "try/v2.0/transport/GeneralEvaporation.hpp"
#include "try/v2.0/transport/DiscreteGamma.hpp"
#include "try/v2.0/transport/PrimaryGamma.hpp"
#include "try/v2.0/transport/NBodyPhaseSpace.hpp"
#include "try/v2.0/transport/Evaporation.hpp"
#include "try/v2.0/transport/WeightedFunctionals.hpp"
#include "try/v2.0/fissionTransport/SimpleMaxwellianFission.hpp"
#include "try/v2.0/fissionTransport/Watt.hpp"
#include "try/v2.0/fissionTransport/MadlandNix.hpp"

namespace try {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Energy_uncorrelated
// -----------------------------------------------------------------------------

class Energy_uncorrelated : public Component<transport::Energy_uncorrelated> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Energy_uncorrelated"; }
   static auto FIELD() { return "energy"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         std::optional<unknownNamespace::XYs2d>{}
            / --Child<>("XYs2d") |
         std::optional<unknownNamespace::Regions2d>{}
            / --Child<>("regions2d") |
         std::optional<transport::GeneralEvaporation>{}
            / --Child<>("generalEvaporation") |
         std::optional<transport::DiscreteGamma>{}
            / --Child<>("discreteGamma") |
         std::optional<transport::PrimaryGamma>{}
            / --Child<>("primaryGamma") |
         std::optional<transport::NBodyPhaseSpace>{}
            / --Child<>("NBodyPhaseSpace") |
         std::optional<transport::Evaporation>{}
            / --Child<>("evaporation") |
         std::optional<transport::WeightedFunctionals>{}
            / --Child<>("weightedFunctionals") |
         std::optional<fissionTransport::SimpleMaxwellianFission>{}
            / --Child<>("simpleMaxwellianFission") |
         std::optional<fissionTransport::Watt>{}
            / --Child<>("Watt") |
         std::optional<fissionTransport::MadlandNix>{}
            / --Child<>("MadlandNix")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::optional<unknownNamespace::XYs2d>> XYs2d{this};
   Field<std::optional<unknownNamespace::Regions2d>> regions2d{this};
   Field<std::optional<transport::GeneralEvaporation>> generalEvaporation{this};
   Field<std::optional<transport::DiscreteGamma>> discreteGamma{this};
   Field<std::optional<transport::PrimaryGamma>> primaryGamma{this};
   Field<std::optional<transport::NBodyPhaseSpace>> NBodyPhaseSpace{this};
   Field<std::optional<transport::Evaporation>> evaporation{this};
   Field<std::optional<transport::WeightedFunctionals>> weightedFunctionals{this};
   Field<std::optional<fissionTransport::SimpleMaxwellianFission>> simpleMaxwellianFission{this};
   Field<std::optional<fissionTransport::Watt>> Watt{this};
   Field<std::optional<fissionTransport::MadlandNix>> MadlandNix{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->XYs2d, \
      this->regions2d, \
      this->generalEvaporation, \
      this->discreteGamma, \
      this->primaryGamma, \
      this->NBodyPhaseSpace, \
      this->evaporation, \
      this->weightedFunctionals, \
      this->simpleMaxwellianFission, \
      this->Watt, \
      this->MadlandNix)

   // default, and from fields
   explicit Energy_uncorrelated(
      const wrapper<std::optional<unknownNamespace::XYs2d>> &XYs2d = {},
      const wrapper<std::optional<unknownNamespace::Regions2d>> &regions2d = {},
      const wrapper<std::optional<transport::GeneralEvaporation>> &generalEvaporation = {},
      const wrapper<std::optional<transport::DiscreteGamma>> &discreteGamma = {},
      const wrapper<std::optional<transport::PrimaryGamma>> &primaryGamma = {},
      const wrapper<std::optional<transport::NBodyPhaseSpace>> &NBodyPhaseSpace = {},
      const wrapper<std::optional<transport::Evaporation>> &evaporation = {},
      const wrapper<std::optional<transport::WeightedFunctionals>> &weightedFunctionals = {},
      const wrapper<std::optional<fissionTransport::SimpleMaxwellianFission>> &simpleMaxwellianFission = {},
      const wrapper<std::optional<fissionTransport::Watt>> &Watt = {},
      const wrapper<std::optional<fissionTransport::MadlandNix>> &MadlandNix = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs2d(this,XYs2d),
      regions2d(this,regions2d),
      generalEvaporation(this,generalEvaporation),
      discreteGamma(this,discreteGamma),
      primaryGamma(this,primaryGamma),
      NBodyPhaseSpace(this,NBodyPhaseSpace),
      evaporation(this,evaporation),
      weightedFunctionals(this,weightedFunctionals),
      simpleMaxwellianFission(this,simpleMaxwellianFission),
      Watt(this,Watt),
      MadlandNix(this,MadlandNix)
   {
      Component::finish();
   }

   // from node
   explicit Energy_uncorrelated(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Energy_uncorrelated(const Energy_uncorrelated &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Energy_uncorrelated(Energy_uncorrelated &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Energy_uncorrelated &operator=(const Energy_uncorrelated &) = default;
   Energy_uncorrelated &operator=(Energy_uncorrelated &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/transport/Energy_uncorrelated/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Energy_uncorrelated

} // namespace transport
} // namespace v2_0
} // namespace try

#endif
