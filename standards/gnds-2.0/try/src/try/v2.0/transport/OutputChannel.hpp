
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_TRANSPORT_OUTPUTCHANNEL
#define TRY_V2_0_TRANSPORT_OUTPUTCHANNEL

#include "try/v2.0/ambiguousNamespace/Q.hpp"
#include "try/v2.0/ambiguousNamespace/Products.hpp"
#include "try/v2.0/fissionFragmentData/FissionFragmentData.hpp"

namespace try {
namespace v2_0 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class OutputChannel
// -----------------------------------------------------------------------------

class OutputChannel : public Component<transport::OutputChannel> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "OutputChannel"; }
   static auto FIELD() { return "outputChannel"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("genre") |
         std::optional<XMLName>{}
            / Meta<>("process") |
         // children
         std::optional<ambiguousNamespace::Q>{}
            / --Child<>("Q") |
         std::optional<ambiguousNamespace::Products>{}
            / --Child<>("products") |
         std::optional<fissionFragmentData::FissionFragmentData>{}
            / --Child<>("fissionFragmentData")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> genre{this};
   Field<std::optional<XMLName>> process{this};

   // children
   Field<std::optional<ambiguousNamespace::Q>> Q{this};
   Field<std::optional<ambiguousNamespace::Products>> products{this};
   Field<std::optional<fissionFragmentData::FissionFragmentData>> fissionFragmentData{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->genre, \
      this->process, \
      this->Q, \
      this->products, \
      this->fissionFragmentData)

   // default, and from fields
   explicit OutputChannel(
      const wrapper<std::optional<XMLName>> &genre = {},
      const wrapper<std::optional<XMLName>> &process = {},
      const wrapper<std::optional<ambiguousNamespace::Q>> &Q = {},
      const wrapper<std::optional<ambiguousNamespace::Products>> &products = {},
      const wrapper<std::optional<fissionFragmentData::FissionFragmentData>> &fissionFragmentData = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      genre(this,genre),
      process(this,process),
      Q(this,Q),
      products(this,products),
      fissionFragmentData(this,fissionFragmentData)
   {
      Component::finish();
   }

   // from node
   explicit OutputChannel(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   OutputChannel(const OutputChannel &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   OutputChannel(OutputChannel &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   OutputChannel &operator=(const OutputChannel &) = default;
   OutputChannel &operator=(OutputChannel &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/transport/OutputChannel/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class OutputChannel

} // namespace transport
} // namespace v2_0
} // namespace try

#endif
