
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_DOCUMENTATION_COMPUTERCODE
#define TRY_V2_0_DOCUMENTATION_COMPUTERCODE

#include "try/v2.0/documentation/ExecutionArguments.hpp"
#include "try/v2.0/documentation/CodeRepo.hpp"
#include "try/v2.0/documentation/Note.hpp"
#include "try/v2.0/documentation/InputDecks.hpp"
#include "try/v2.0/documentation/OutputDecks.hpp"

namespace try {
namespace v2_0 {
namespace documentation {

// -----------------------------------------------------------------------------
// documentation::
// class ComputerCode
// -----------------------------------------------------------------------------

class ComputerCode : public Component<documentation::ComputerCode> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "documentation"; }
   static auto CLASS() { return "ComputerCode"; }
   static auto FIELD() { return "computerCode"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         UTF8Text{}
            / Meta<>("name") |
         XMLName{}
            / Meta<>("version") |
         // children
         std::optional<documentation::ExecutionArguments>{}
            / --Child<>("executionArguments") |
         std::optional<documentation::CodeRepo>{}
            / --Child<>("codeRepo") |
         std::optional<documentation::Note>{}
            / --Child<>("note") |
         std::optional<documentation::InputDecks>{}
            / --Child<>("inputDecks") |
         std::optional<documentation::OutputDecks>{}
            / --Child<>("outputDecks")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> label{this};
   Field<UTF8Text> name{this};
   Field<XMLName> version{this};

   // children
   Field<std::optional<documentation::ExecutionArguments>> executionArguments{this};
   Field<std::optional<documentation::CodeRepo>> codeRepo{this};
   Field<std::optional<documentation::Note>> note{this};
   Field<std::optional<documentation::InputDecks>> inputDecks{this};
   Field<std::optional<documentation::OutputDecks>> outputDecks{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->name, \
      this->version, \
      this->executionArguments, \
      this->codeRepo, \
      this->note, \
      this->inputDecks, \
      this->outputDecks)

   // default, and from fields
   explicit ComputerCode(
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<UTF8Text> &name = {},
      const wrapper<XMLName> &version = {},
      const wrapper<std::optional<documentation::ExecutionArguments>> &executionArguments = {},
      const wrapper<std::optional<documentation::CodeRepo>> &codeRepo = {},
      const wrapper<std::optional<documentation::Note>> &note = {},
      const wrapper<std::optional<documentation::InputDecks>> &inputDecks = {},
      const wrapper<std::optional<documentation::OutputDecks>> &outputDecks = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      name(this,name),
      version(this,version),
      executionArguments(this,executionArguments),
      codeRepo(this,codeRepo),
      note(this,note),
      inputDecks(this,inputDecks),
      outputDecks(this,outputDecks)
   {
      Component::finish();
   }

   // from node
   explicit ComputerCode(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ComputerCode(const ComputerCode &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ComputerCode(ComputerCode &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ComputerCode &operator=(const ComputerCode &) = default;
   ComputerCode &operator=(ComputerCode &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/documentation/ComputerCode/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ComputerCode

} // namespace documentation
} // namespace v2_0
} // namespace try

#endif
