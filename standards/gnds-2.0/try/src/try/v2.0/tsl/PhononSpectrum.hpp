
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_TSL_PHONONSPECTRUM
#define TRY_V2_0_TSL_PHONONSPECTRUM

#include "try/v2.0/unknownNamespace/XYs1d.hpp"

namespace try {
namespace v2_0 {
namespace tsl {

// -----------------------------------------------------------------------------
// tsl::
// class PhononSpectrum
// -----------------------------------------------------------------------------

class PhononSpectrum : public Component<tsl::PhononSpectrum> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "tsl"; }
   static auto CLASS() { return "PhononSpectrum"; }
   static auto FIELD() { return "phononSpectrum"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         unknownNamespace::XYs1d{}
            / --Child<>("XYs1d")
      ;
   }

public:
   using Component::construct;

   // children
   Field<unknownNamespace::XYs1d> XYs1d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->XYs1d)

   // default, and from fields
   explicit PhononSpectrum(
      const wrapper<unknownNamespace::XYs1d> &XYs1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs1d(this,XYs1d)
   {
      Component::finish();
   }

   // from node
   explicit PhononSpectrum(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   PhononSpectrum(const PhononSpectrum &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   PhononSpectrum(PhononSpectrum &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   PhononSpectrum &operator=(const PhononSpectrum &) = default;
   PhononSpectrum &operator=(PhononSpectrum &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/tsl/PhononSpectrum/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class PhononSpectrum

} // namespace tsl
} // namespace v2_0
} // namespace try

#endif
