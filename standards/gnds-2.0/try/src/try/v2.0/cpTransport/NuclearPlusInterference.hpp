
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE
#define TRY_V2_0_CPTRANSPORT_NUCLEARPLUSINTERFERENCE

#include "try/v2.0/transport/CrossSection.hpp"
#include "try/v2.0/transport/Distribution.hpp"

namespace try {
namespace v2_0 {
namespace cpTransport {

// -----------------------------------------------------------------------------
// cpTransport::
// class NuclearPlusInterference
// -----------------------------------------------------------------------------

class NuclearPlusInterference : public Component<cpTransport::NuclearPlusInterference> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "cpTransport"; }
   static auto CLASS() { return "NuclearPlusInterference"; }
   static auto FIELD() { return "nuclearPlusInterference"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         Float64{}
            / Meta<>("muCutoff") |
         // children
         transport::CrossSection{}
            / --Child<>("crossSection") |
         transport::Distribution{}
            / --Child<>("distribution")
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<Float64> muCutoff{this};

   // children
   Field<transport::CrossSection> crossSection{this};
   Field<transport::Distribution> distribution{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->muCutoff, \
      this->crossSection, \
      this->distribution)

   // default, and from fields
   explicit NuclearPlusInterference(
      const wrapper<Float64> &muCutoff = {},
      const wrapper<transport::CrossSection> &crossSection = {},
      const wrapper<transport::Distribution> &distribution = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      muCutoff(this,muCutoff),
      crossSection(this,crossSection),
      distribution(this,distribution)
   {
      Component::finish();
   }

   // from node
   explicit NuclearPlusInterference(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   NuclearPlusInterference(const NuclearPlusInterference &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   NuclearPlusInterference(NuclearPlusInterference &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   NuclearPlusInterference &operator=(const NuclearPlusInterference &) = default;
   NuclearPlusInterference &operator=(NuclearPlusInterference &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/cpTransport/NuclearPlusInterference/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class NuclearPlusInterference

} // namespace cpTransport
} // namespace v2_0
} // namespace try

#endif
