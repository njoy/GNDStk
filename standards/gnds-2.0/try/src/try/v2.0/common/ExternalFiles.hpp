
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_COMMON_EXTERNALFILES
#define TRY_V2_0_COMMON_EXTERNALFILES

#include "try/v2.0/common/ExternalFile.hpp"

namespace try {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class ExternalFiles
// -----------------------------------------------------------------------------

class ExternalFiles : public Component<common::ExternalFiles> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "ExternalFiles"; }
   static auto FIELD() { return "externalFiles"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         common::ExternalFile{}
            / ++Child<>("externalFile")
      ;
   }

public:
   using Component::construct;

   // children
   Field<std::vector<common::ExternalFile>> externalFile{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->externalFile)

   // default, and from fields
   explicit ExternalFiles(
      const wrapper<std::vector<common::ExternalFile>> &externalFile = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      externalFile(this,externalFile)
   {
      Component::finish();
   }

   // from node
   explicit ExternalFiles(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ExternalFiles(const ExternalFiles &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   ExternalFiles(ExternalFiles &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   ExternalFiles &operator=(const ExternalFiles &) = default;
   ExternalFiles &operator=(ExternalFiles &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/common/ExternalFiles/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class ExternalFiles

} // namespace common
} // namespace v2_0
} // namespace try

#endif
