
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef TRY_V2_0_COMMON_Q
#define TRY_V2_0_COMMON_Q

#include "try/v2.0/documentation/Documentation.hpp"
#include "try/v2.0/pops/Uncertainty.hpp"
#include "try/v2.0/unknownNamespace/Constant1d.hpp"
#include "try/v2.0/unknownNamespace/XYs1d.hpp"
#include "try/v2.0/unknownNamespace/Regions1d.hpp"
#include "try/v2.0/unknownNamespace/Polynomial1d.hpp"
#include "try/v2.0/unknownNamespace/Gridded1d.hpp"

namespace try {
namespace v2_0 {
namespace common {

// -----------------------------------------------------------------------------
// common::
// class Q
// -----------------------------------------------------------------------------

class Q : public Component<common::Q> {
   friend class Component;

   using _t = std::variant<
      unknownNamespace::Constant1d,
      unknownNamespace::XYs1d,
      unknownNamespace::Regions1d,
      unknownNamespace::Polynomial1d,
      unknownNamespace::Gridded1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "common"; }
   static auto CLASS() { return "Q"; }
   static auto FIELD() { return "Q"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // metadata
         std::optional<XMLName>{}
            / Meta<>("label") |
         std::optional<XMLName>{}
            / Meta<>("unit") |
         XMLName{}
            / Meta<>("value") |
         // children
         std::optional<documentation::Documentation>{}
            / --Child<>("documentation") |
         std::optional<pops::Uncertainty>{}
            / --Child<>("uncertainty") |
         _t{}
            / --(Child<>("constant1d") || Child<>("XYs1d") || Child<>("regions1d") || Child<>("polynomial1d") || Child<>("gridded1d"))
      ;
   }

public:
   using Component::construct;

   // metadata
   Field<std::optional<XMLName>> label{this};
   Field<std::optional<XMLName>> unit{this};
   Field<XMLName> value{this};

   // children
   Field<std::optional<documentation::Documentation>> documentation{this};
   Field<std::optional<pops::Uncertainty>> uncertainty{this};

   // children - variant
   Field<_t> _constant1dXYs1dregions1dpolynomial1dgridded1d{this};
   FieldPart<decltype(_constant1dXYs1dregions1dpolynomial1dgridded1d),unknownNamespace::Constant1d> constant1d{_constant1dXYs1dregions1dpolynomial1dgridded1d};
   FieldPart<decltype(_constant1dXYs1dregions1dpolynomial1dgridded1d),unknownNamespace::XYs1d> XYs1d{_constant1dXYs1dregions1dpolynomial1dgridded1d};
   FieldPart<decltype(_constant1dXYs1dregions1dpolynomial1dgridded1d),unknownNamespace::Regions1d> regions1d{_constant1dXYs1dregions1dpolynomial1dgridded1d};
   FieldPart<decltype(_constant1dXYs1dregions1dpolynomial1dgridded1d),unknownNamespace::Polynomial1d> polynomial1d{_constant1dXYs1dregions1dpolynomial1dgridded1d};
   FieldPart<decltype(_constant1dXYs1dregions1dpolynomial1dgridded1d),unknownNamespace::Gridded1d> gridded1d{_constant1dXYs1dregions1dpolynomial1dgridded1d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->label, \
      this->unit, \
      this->value, \
      this->documentation, \
      this->uncertainty, \
      this->_constant1dXYs1dregions1dpolynomial1dgridded1d)

   // default, and from fields
   explicit Q(
      const wrapper<std::optional<XMLName>> &label = {},
      const wrapper<std::optional<XMLName>> &unit = {},
      const wrapper<XMLName> &value = {},
      const wrapper<std::optional<documentation::Documentation>> &documentation = {},
      const wrapper<std::optional<pops::Uncertainty>> &uncertainty = {},
      const wrapper<_t> &_constant1dXYs1dregions1dpolynomial1dgridded1d = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      unit(this,unit),
      value(this,value),
      documentation(this,documentation),
      uncertainty(this,uncertainty),
      _constant1dXYs1dregions1dpolynomial1dgridded1d(this,_constant1dXYs1dregions1dpolynomial1dgridded1d)
   {
      Component::finish();
   }

   // from node
   explicit Q(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Q(const Q &other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = other;
      Component::finish(other);
   }

   // move
   Q(Q &&other) :
      GNDSTK_COMPONENT(other.baseBlockData())
   {
      *this = std::move(other);
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Q &operator=(const Q &) = default;
   Q &operator=(Q &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "try/v2.0/common/Q/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Q

} // namespace common
} // namespace v2_0
} // namespace try

#endif
