
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Nucleus is the basic handle type in this file. Example:
//    // Create a default Nucleus object:
//    Nucleus handle = NucleusDefault();
// Functions involving Nucleus are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_POPS_NUCLEUS
#define C_INTERFACE_TRY_V2_0_POPS_NUCLEUS

#include "GNDStk.h"
#include "v2.0/pops/Charge.h"
#include "v2.0/pops/Energy.h"
#include "v2.0/pops/Halflife.h"
#include "v2.0/pops/Spin.h"
#include "v2.0/pops/Parity.h"
#include "v2.0/pops/DecayData.h"
#include "v2.0/fissionFragmentData/FissionFragmentData.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct NucleusClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Nucleus
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct NucleusClass *Nucleus;

// --- Const-aware handles.
typedef const struct NucleusClass *const ConstHandle2ConstNucleus;
typedef       struct NucleusClass *const ConstHandle2Nucleus;
typedef const struct NucleusClass *      Handle2ConstNucleus;
typedef       struct NucleusClass *      Handle2Nucleus;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstNucleus
NucleusDefaultConst();

// +++ Create, default
extern_c Handle2Nucleus
NucleusDefault();

// --- Create, general, const
extern_c Handle2ConstNucleus
NucleusCreateConst(
   const XMLName id,
   const Integer32 index,
   ConstHandle2ConstCharge charge,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstHalflife halflife,
   ConstHandle2ConstSpin spin,
   ConstHandle2ConstParity parity,
   ConstHandle2ConstDecayData decayData,
   ConstHandle2ConstFissionFragmentData fissionFragmentData
);

// +++ Create, general
extern_c Handle2Nucleus
NucleusCreate(
   const XMLName id,
   const Integer32 index,
   ConstHandle2ConstCharge charge,
   ConstHandle2ConstEnergy energy,
   ConstHandle2ConstHalflife halflife,
   ConstHandle2ConstSpin spin,
   ConstHandle2ConstParity parity,
   ConstHandle2ConstDecayData decayData,
   ConstHandle2ConstFissionFragmentData fissionFragmentData
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
NucleusAssign(ConstHandle2Nucleus This, ConstHandle2ConstNucleus from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
NucleusDelete(ConstHandle2ConstNucleus This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
NucleusRead(ConstHandle2Nucleus This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
NucleusWrite(ConstHandle2ConstNucleus This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
NucleusPrint(ConstHandle2ConstNucleus This);

// +++ Print to standard output, as XML
extern_c int
NucleusPrintXML(ConstHandle2ConstNucleus This);

// +++ Print to standard output, as JSON
extern_c int
NucleusPrintJSON(ConstHandle2ConstNucleus This);


// -----------------------------------------------------------------------------
// Metadatum: id
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusIdHas(ConstHandle2ConstNucleus This);

// +++ Get
// +++ Returns by value
extern_c XMLName
NucleusIdGet(ConstHandle2ConstNucleus This);

// +++ Set
extern_c void
NucleusIdSet(ConstHandle2Nucleus This, const XMLName id);


// -----------------------------------------------------------------------------
// Metadatum: index
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusIndexHas(ConstHandle2ConstNucleus This);

// +++ Get
// +++ Returns by value
extern_c Integer32
NucleusIndexGet(ConstHandle2ConstNucleus This);

// +++ Set
extern_c void
NucleusIndexSet(ConstHandle2Nucleus This, const Integer32 index);


// -----------------------------------------------------------------------------
// Child: charge
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusChargeHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstCharge
NucleusChargeGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2Charge
NucleusChargeGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusChargeSet(ConstHandle2Nucleus This, ConstHandle2ConstCharge charge);


// -----------------------------------------------------------------------------
// Child: energy
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusEnergyHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstEnergy
NucleusEnergyGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2Energy
NucleusEnergyGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusEnergySet(ConstHandle2Nucleus This, ConstHandle2ConstEnergy energy);


// -----------------------------------------------------------------------------
// Child: halflife
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusHalflifeHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstHalflife
NucleusHalflifeGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2Halflife
NucleusHalflifeGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusHalflifeSet(ConstHandle2Nucleus This, ConstHandle2ConstHalflife halflife);


// -----------------------------------------------------------------------------
// Child: spin
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusSpinHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstSpin
NucleusSpinGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2Spin
NucleusSpinGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusSpinSet(ConstHandle2Nucleus This, ConstHandle2ConstSpin spin);


// -----------------------------------------------------------------------------
// Child: parity
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusParityHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstParity
NucleusParityGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2Parity
NucleusParityGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusParitySet(ConstHandle2Nucleus This, ConstHandle2ConstParity parity);


// -----------------------------------------------------------------------------
// Child: decayData
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusDecayDataHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstDecayData
NucleusDecayDataGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2DecayData
NucleusDecayDataGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusDecayDataSet(ConstHandle2Nucleus This, ConstHandle2ConstDecayData decayData);


// -----------------------------------------------------------------------------
// Child: fissionFragmentData
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NucleusFissionFragmentDataHas(ConstHandle2ConstNucleus This);

// --- Get, const
extern_c Handle2ConstFissionFragmentData
NucleusFissionFragmentDataGetConst(ConstHandle2ConstNucleus This);

// +++ Get, non-const
extern_c Handle2FissionFragmentData
NucleusFissionFragmentDataGet(ConstHandle2Nucleus This);

// +++ Set
extern_c void
NucleusFissionFragmentDataSet(ConstHandle2Nucleus This, ConstHandle2ConstFissionFragmentData fissionFragmentData);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
