
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Nuclides is the basic handle type in this file. Example:
//    // Create a default Nuclides object:
//    Nuclides handle = NuclidesDefault();
// Functions involving Nuclides are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_POPS_NUCLIDES
#define C_INTERFACE_TRY_V2_0_POPS_NUCLIDES

#include "GNDStk.h"
#include "v2.0/pops/Nuclide.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct NuclidesClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Nuclides
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct NuclidesClass *Nuclides;

// --- Const-aware handles.
typedef const struct NuclidesClass *const ConstHandle2ConstNuclides;
typedef       struct NuclidesClass *const ConstHandle2Nuclides;
typedef const struct NuclidesClass *      Handle2ConstNuclides;
typedef       struct NuclidesClass *      Handle2Nuclides;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstNuclides
NuclidesDefaultConst();

// +++ Create, default
extern_c Handle2Nuclides
NuclidesDefault();

// --- Create, general, const
extern_c Handle2ConstNuclides
NuclidesCreateConst(
   ConstHandle2Nuclide *const nuclide, const size_t nuclideSize
);

// +++ Create, general
extern_c Handle2Nuclides
NuclidesCreate(
   ConstHandle2Nuclide *const nuclide, const size_t nuclideSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
NuclidesAssign(ConstHandle2Nuclides This, ConstHandle2ConstNuclides from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
NuclidesDelete(ConstHandle2ConstNuclides This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
NuclidesRead(ConstHandle2Nuclides This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
NuclidesWrite(ConstHandle2ConstNuclides This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
NuclidesPrint(ConstHandle2ConstNuclides This);

// +++ Print to standard output, as XML
extern_c int
NuclidesPrintXML(ConstHandle2ConstNuclides This);

// +++ Print to standard output, as JSON
extern_c int
NuclidesPrintJSON(ConstHandle2ConstNuclides This);


// -----------------------------------------------------------------------------
// Child: nuclide
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
NuclidesNuclideHas(ConstHandle2ConstNuclides This);

// +++ Clear
extern_c void
NuclidesNuclideClear(ConstHandle2Nuclides This);

// +++ Size
extern_c size_t
NuclidesNuclideSize(ConstHandle2ConstNuclides This);

// +++ Add
extern_c void
NuclidesNuclideAdd(ConstHandle2Nuclides This, ConstHandle2ConstNuclide nuclide);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstNuclide
NuclidesNuclideGetConst(ConstHandle2ConstNuclides This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Nuclide
NuclidesNuclideGet(ConstHandle2Nuclides This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
NuclidesNuclideSet(
   ConstHandle2Nuclides This,
   const size_t index_,
   ConstHandle2ConstNuclide nuclide
);

// +++ Has, by id
extern_c int
NuclidesNuclideHasById(
   ConstHandle2ConstNuclides This,
   const XMLName id
);

// --- Get, by id, const
extern_c Handle2ConstNuclide
NuclidesNuclideGetByIdConst(
   ConstHandle2ConstNuclides This,
   const XMLName id
);

// +++ Get, by id, non-const
extern_c Handle2Nuclide
NuclidesNuclideGetById(
   ConstHandle2Nuclides This,
   const XMLName id
);

// +++ Set, by id
extern_c void
NuclidesNuclideSetById(
   ConstHandle2Nuclides This,
   const XMLName id,
   ConstHandle2ConstNuclide nuclide
);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
