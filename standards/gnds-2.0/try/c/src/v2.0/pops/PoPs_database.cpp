
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/pops/PoPs_database.hpp"
#include "PoPs_database.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = PoPs_databaseClass;
using CPP = multigroup::PoPs_database;

static const std::string CLASSNAME = "PoPs_database";

namespace extract {
   static auto name = [](auto &obj) { return &obj.name; };
   static auto version = [](auto &obj) { return &obj.version; };
   static auto format = [](auto &obj) { return &obj.format; };
   static auto styles = [](auto &obj) { return &obj.styles; };
   static auto documentation = [](auto &obj) { return &obj.documentation; };
   static auto aliases = [](auto &obj) { return &obj.aliases; };
   static auto gaugeBosons = [](auto &obj) { return &obj.gaugeBosons; };
   static auto leptons = [](auto &obj) { return &obj.leptons; };
   static auto baryons = [](auto &obj) { return &obj.baryons; };
   static auto chemicalElements = [](auto &obj) { return &obj.chemicalElements; };
   static auto unorthodoxes = [](auto &obj) { return &obj.unorthodoxes; };
}

using CPPStyles = styles::Styles;
using CPPDocumentation = documentation::Documentation;
using CPPAliases = pops::Aliases;
using CPPGaugeBosons = pops::GaugeBosons;
using CPPLeptons = pops::Leptons;
using CPPBaryons = pops::Baryons;
using CPPChemicalElements = pops::ChemicalElements;
using CPPUnorthodoxes = pops::Unorthodoxes;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstPoPs_database
PoPs_databaseDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2PoPs_database
PoPs_databaseDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstPoPs_database
PoPs_databaseCreateConst(
   const XMLName name,
   const XMLName version,
   const XMLName format,
   ConstHandle2ConstStyles styles,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstAliases aliases,
   ConstHandle2ConstGaugeBosons gaugeBosons,
   ConstHandle2ConstLeptons leptons,
   ConstHandle2ConstBaryons baryons,
   ConstHandle2ConstChemicalElements chemicalElements,
   ConstHandle2ConstUnorthodoxes unorthodoxes
) {
   ConstHandle2PoPs_database handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      name,
      version,
      format,
      detail::tocpp<CPPStyles>(styles),
      detail::tocpp<CPPDocumentation>(documentation),
      detail::tocpp<CPPAliases>(aliases),
      detail::tocpp<CPPGaugeBosons>(gaugeBosons),
      detail::tocpp<CPPLeptons>(leptons),
      detail::tocpp<CPPBaryons>(baryons),
      detail::tocpp<CPPChemicalElements>(chemicalElements),
      detail::tocpp<CPPUnorthodoxes>(unorthodoxes)
   );
   return handle;
}

// Create, general
Handle2PoPs_database
PoPs_databaseCreate(
   const XMLName name,
   const XMLName version,
   const XMLName format,
   ConstHandle2ConstStyles styles,
   ConstHandle2ConstDocumentation documentation,
   ConstHandle2ConstAliases aliases,
   ConstHandle2ConstGaugeBosons gaugeBosons,
   ConstHandle2ConstLeptons leptons,
   ConstHandle2ConstBaryons baryons,
   ConstHandle2ConstChemicalElements chemicalElements,
   ConstHandle2ConstUnorthodoxes unorthodoxes
) {
   ConstHandle2PoPs_database handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      name,
      version,
      format,
      detail::tocpp<CPPStyles>(styles),
      detail::tocpp<CPPDocumentation>(documentation),
      detail::tocpp<CPPAliases>(aliases),
      detail::tocpp<CPPGaugeBosons>(gaugeBosons),
      detail::tocpp<CPPLeptons>(leptons),
      detail::tocpp<CPPBaryons>(baryons),
      detail::tocpp<CPPChemicalElements>(chemicalElements),
      detail::tocpp<CPPUnorthodoxes>(unorthodoxes)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
PoPs_databaseAssign(ConstHandle2PoPs_database This, ConstHandle2ConstPoPs_database from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
PoPs_databaseDelete(ConstHandle2ConstPoPs_database This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
PoPs_databaseRead(ConstHandle2PoPs_database This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
PoPs_databaseWrite(ConstHandle2ConstPoPs_database This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
PoPs_databasePrint(ConstHandle2ConstPoPs_database This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
PoPs_databasePrintXML(ConstHandle2ConstPoPs_database This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
PoPs_databasePrintJSON(ConstHandle2ConstPoPs_database This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseNameHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NameHas", This, extract::name);
}

// Get
// Returns by value
XMLName
PoPs_databaseNameGet(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NameGet", This, extract::name);
}

// Set
void
PoPs_databaseNameSet(ConstHandle2PoPs_database This, const XMLName name)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NameSet", This, extract::name, name);
}


// -----------------------------------------------------------------------------
// Metadatum: version
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseVersionHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"VersionHas", This, extract::version);
}

// Get
// Returns by value
XMLName
PoPs_databaseVersionGet(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"VersionGet", This, extract::version);
}

// Set
void
PoPs_databaseVersionSet(ConstHandle2PoPs_database This, const XMLName version)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"VersionSet", This, extract::version, version);
}


// -----------------------------------------------------------------------------
// Metadatum: format
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseFormatHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FormatHas", This, extract::format);
}

// Get
// Returns by value
XMLName
PoPs_databaseFormatGet(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FormatGet", This, extract::format);
}

// Set
void
PoPs_databaseFormatSet(ConstHandle2PoPs_database This, const XMLName format)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FormatSet", This, extract::format, format);
}


// -----------------------------------------------------------------------------
// Child: styles
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseStylesHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StylesHas", This, extract::styles);
}

// Get, const
Handle2ConstStyles
PoPs_databaseStylesGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstStyles>
      (CLASSNAME, CLASSNAME+"StylesGetConst", This, extract::styles);
}

// Get, non-const
Handle2Styles
PoPs_databaseStylesGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2Styles>
      (CLASSNAME, CLASSNAME+"StylesGet", This, extract::styles);
}

// Set
void
PoPs_databaseStylesSet(ConstHandle2PoPs_database This, ConstHandle2ConstStyles styles)
{
   detail::setField<CPP,CPPStyles>
      (CLASSNAME, CLASSNAME+"StylesSet", This, extract::styles, styles);
}


// -----------------------------------------------------------------------------
// Child: documentation
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseDocumentationHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DocumentationHas", This, extract::documentation);
}

// Get, const
Handle2ConstDocumentation
PoPs_databaseDocumentationGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstDocumentation>
      (CLASSNAME, CLASSNAME+"DocumentationGetConst", This, extract::documentation);
}

// Get, non-const
Handle2Documentation
PoPs_databaseDocumentationGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2Documentation>
      (CLASSNAME, CLASSNAME+"DocumentationGet", This, extract::documentation);
}

// Set
void
PoPs_databaseDocumentationSet(ConstHandle2PoPs_database This, ConstHandle2ConstDocumentation documentation)
{
   detail::setField<CPP,CPPDocumentation>
      (CLASSNAME, CLASSNAME+"DocumentationSet", This, extract::documentation, documentation);
}


// -----------------------------------------------------------------------------
// Child: aliases
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseAliasesHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AliasesHas", This, extract::aliases);
}

// Get, const
Handle2ConstAliases
PoPs_databaseAliasesGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstAliases>
      (CLASSNAME, CLASSNAME+"AliasesGetConst", This, extract::aliases);
}

// Get, non-const
Handle2Aliases
PoPs_databaseAliasesGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2Aliases>
      (CLASSNAME, CLASSNAME+"AliasesGet", This, extract::aliases);
}

// Set
void
PoPs_databaseAliasesSet(ConstHandle2PoPs_database This, ConstHandle2ConstAliases aliases)
{
   detail::setField<CPP,CPPAliases>
      (CLASSNAME, CLASSNAME+"AliasesSet", This, extract::aliases, aliases);
}


// -----------------------------------------------------------------------------
// Child: gaugeBosons
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseGaugeBosonsHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"GaugeBosonsHas", This, extract::gaugeBosons);
}

// Get, const
Handle2ConstGaugeBosons
PoPs_databaseGaugeBosonsGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstGaugeBosons>
      (CLASSNAME, CLASSNAME+"GaugeBosonsGetConst", This, extract::gaugeBosons);
}

// Get, non-const
Handle2GaugeBosons
PoPs_databaseGaugeBosonsGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2GaugeBosons>
      (CLASSNAME, CLASSNAME+"GaugeBosonsGet", This, extract::gaugeBosons);
}

// Set
void
PoPs_databaseGaugeBosonsSet(ConstHandle2PoPs_database This, ConstHandle2ConstGaugeBosons gaugeBosons)
{
   detail::setField<CPP,CPPGaugeBosons>
      (CLASSNAME, CLASSNAME+"GaugeBosonsSet", This, extract::gaugeBosons, gaugeBosons);
}


// -----------------------------------------------------------------------------
// Child: leptons
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseLeptonsHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LeptonsHas", This, extract::leptons);
}

// Get, const
Handle2ConstLeptons
PoPs_databaseLeptonsGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstLeptons>
      (CLASSNAME, CLASSNAME+"LeptonsGetConst", This, extract::leptons);
}

// Get, non-const
Handle2Leptons
PoPs_databaseLeptonsGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2Leptons>
      (CLASSNAME, CLASSNAME+"LeptonsGet", This, extract::leptons);
}

// Set
void
PoPs_databaseLeptonsSet(ConstHandle2PoPs_database This, ConstHandle2ConstLeptons leptons)
{
   detail::setField<CPP,CPPLeptons>
      (CLASSNAME, CLASSNAME+"LeptonsSet", This, extract::leptons, leptons);
}


// -----------------------------------------------------------------------------
// Child: baryons
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseBaryonsHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BaryonsHas", This, extract::baryons);
}

// Get, const
Handle2ConstBaryons
PoPs_databaseBaryonsGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstBaryons>
      (CLASSNAME, CLASSNAME+"BaryonsGetConst", This, extract::baryons);
}

// Get, non-const
Handle2Baryons
PoPs_databaseBaryonsGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2Baryons>
      (CLASSNAME, CLASSNAME+"BaryonsGet", This, extract::baryons);
}

// Set
void
PoPs_databaseBaryonsSet(ConstHandle2PoPs_database This, ConstHandle2ConstBaryons baryons)
{
   detail::setField<CPP,CPPBaryons>
      (CLASSNAME, CLASSNAME+"BaryonsSet", This, extract::baryons, baryons);
}


// -----------------------------------------------------------------------------
// Child: chemicalElements
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseChemicalElementsHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementsHas", This, extract::chemicalElements);
}

// Get, const
Handle2ConstChemicalElements
PoPs_databaseChemicalElementsGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstChemicalElements>
      (CLASSNAME, CLASSNAME+"ChemicalElementsGetConst", This, extract::chemicalElements);
}

// Get, non-const
Handle2ChemicalElements
PoPs_databaseChemicalElementsGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2ChemicalElements>
      (CLASSNAME, CLASSNAME+"ChemicalElementsGet", This, extract::chemicalElements);
}

// Set
void
PoPs_databaseChemicalElementsSet(ConstHandle2PoPs_database This, ConstHandle2ConstChemicalElements chemicalElements)
{
   detail::setField<CPP,CPPChemicalElements>
      (CLASSNAME, CLASSNAME+"ChemicalElementsSet", This, extract::chemicalElements, chemicalElements);
}


// -----------------------------------------------------------------------------
// Child: unorthodoxes
// -----------------------------------------------------------------------------

// Has
int
PoPs_databaseUnorthodoxesHas(ConstHandle2ConstPoPs_database This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnorthodoxesHas", This, extract::unorthodoxes);
}

// Get, const
Handle2ConstUnorthodoxes
PoPs_databaseUnorthodoxesGetConst(ConstHandle2ConstPoPs_database This)
{
   return detail::getField<CPP,Handle2ConstUnorthodoxes>
      (CLASSNAME, CLASSNAME+"UnorthodoxesGetConst", This, extract::unorthodoxes);
}

// Get, non-const
Handle2Unorthodoxes
PoPs_databaseUnorthodoxesGet(ConstHandle2PoPs_database This)
{
   return detail::getField<CPP,Handle2Unorthodoxes>
      (CLASSNAME, CLASSNAME+"UnorthodoxesGet", This, extract::unorthodoxes);
}

// Set
void
PoPs_databaseUnorthodoxesSet(ConstHandle2PoPs_database This, ConstHandle2ConstUnorthodoxes unorthodoxes)
{
   detail::setField<CPP,CPPUnorthodoxes>
      (CLASSNAME, CLASSNAME+"UnorthodoxesSet", This, extract::unorthodoxes, unorthodoxes);
}
