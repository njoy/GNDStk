
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/pops/DecayData.hpp"
#include "DecayData.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = DecayDataClass;
using CPP = multigroup::DecayData;

static const std::string CLASSNAME = "DecayData";

namespace extract {
   static auto decayModes = [](auto &obj) { return &obj.decayModes; };
   static auto averageEnergies = [](auto &obj) { return &obj.averageEnergies; };
}

using CPPDecayModes = pops::DecayModes;
using CPPAverageEnergies = pops::AverageEnergies;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDecayData
DecayDataDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2DecayData
DecayDataDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDecayData
DecayDataCreateConst(
   ConstHandle2ConstDecayModes decayModes,
   ConstHandle2ConstAverageEnergies averageEnergies
) {
   ConstHandle2DecayData handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPDecayModes>(decayModes),
      detail::tocpp<CPPAverageEnergies>(averageEnergies)
   );
   return handle;
}

// Create, general
Handle2DecayData
DecayDataCreate(
   ConstHandle2ConstDecayModes decayModes,
   ConstHandle2ConstAverageEnergies averageEnergies
) {
   ConstHandle2DecayData handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPDecayModes>(decayModes),
      detail::tocpp<CPPAverageEnergies>(averageEnergies)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DecayDataAssign(ConstHandle2DecayData This, ConstHandle2ConstDecayData from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DecayDataDelete(ConstHandle2ConstDecayData This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DecayDataRead(ConstHandle2DecayData This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DecayDataWrite(ConstHandle2ConstDecayData This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
DecayDataPrint(ConstHandle2ConstDecayData This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
DecayDataPrintXML(ConstHandle2ConstDecayData This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
DecayDataPrintJSON(ConstHandle2ConstDecayData This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: decayModes
// -----------------------------------------------------------------------------

// Has
int
DecayDataDecayModesHas(ConstHandle2ConstDecayData This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DecayModesHas", This, extract::decayModes);
}

// Get, const
Handle2ConstDecayModes
DecayDataDecayModesGetConst(ConstHandle2ConstDecayData This)
{
   return detail::getField<CPP,Handle2ConstDecayModes>
      (CLASSNAME, CLASSNAME+"DecayModesGetConst", This, extract::decayModes);
}

// Get, non-const
Handle2DecayModes
DecayDataDecayModesGet(ConstHandle2DecayData This)
{
   return detail::getField<CPP,Handle2DecayModes>
      (CLASSNAME, CLASSNAME+"DecayModesGet", This, extract::decayModes);
}

// Set
void
DecayDataDecayModesSet(ConstHandle2DecayData This, ConstHandle2ConstDecayModes decayModes)
{
   detail::setField<CPP,CPPDecayModes>
      (CLASSNAME, CLASSNAME+"DecayModesSet", This, extract::decayModes, decayModes);
}


// -----------------------------------------------------------------------------
// Child: averageEnergies
// -----------------------------------------------------------------------------

// Has
int
DecayDataAverageEnergiesHas(ConstHandle2ConstDecayData This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AverageEnergiesHas", This, extract::averageEnergies);
}

// Get, const
Handle2ConstAverageEnergies
DecayDataAverageEnergiesGetConst(ConstHandle2ConstDecayData This)
{
   return detail::getField<CPP,Handle2ConstAverageEnergies>
      (CLASSNAME, CLASSNAME+"AverageEnergiesGetConst", This, extract::averageEnergies);
}

// Get, non-const
Handle2AverageEnergies
DecayDataAverageEnergiesGet(ConstHandle2DecayData This)
{
   return detail::getField<CPP,Handle2AverageEnergies>
      (CLASSNAME, CLASSNAME+"AverageEnergiesGet", This, extract::averageEnergies);
}

// Set
void
DecayDataAverageEnergiesSet(ConstHandle2DecayData This, ConstHandle2ConstAverageEnergies averageEnergies)
{
   detail::setField<CPP,CPPAverageEnergies>
      (CLASSNAME, CLASSNAME+"AverageEnergiesSet", This, extract::averageEnergies, averageEnergies);
}
