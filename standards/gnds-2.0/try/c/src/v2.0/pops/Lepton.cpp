
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/pops/Lepton.hpp"
#include "Lepton.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = LeptonClass;
using CPP = multigroup::Lepton;

static const std::string CLASSNAME = "Lepton";

namespace extract {
   static auto generation = [](auto &obj) { return &obj.generation; };
   static auto id = [](auto &obj) { return &obj.id; };
   static auto charge = [](auto &obj) { return &obj.charge; };
   static auto halflife = [](auto &obj) { return &obj.halflife; };
   static auto mass = [](auto &obj) { return &obj.mass; };
   static auto spin = [](auto &obj) { return &obj.spin; };
   static auto parity = [](auto &obj) { return &obj.parity; };
   static auto decayData = [](auto &obj) { return &obj.decayData; };
}

using CPPCharge = pops::Charge;
using CPPHalflife = pops::Halflife;
using CPPMass = pops::Mass;
using CPPSpin = pops::Spin;
using CPPParity = pops::Parity;
using CPPDecayData = pops::DecayData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstLepton
LeptonDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Lepton
LeptonDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstLepton
LeptonCreateConst(
   const XMLName generation,
   const XMLName id,
   ConstHandle2ConstCharge charge,
   ConstHandle2ConstHalflife halflife,
   ConstHandle2ConstMass mass,
   ConstHandle2ConstSpin spin,
   ConstHandle2ConstParity parity,
   ConstHandle2ConstDecayData decayData
) {
   ConstHandle2Lepton handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      generation,
      id,
      detail::tocpp<CPPCharge>(charge),
      detail::tocpp<CPPHalflife>(halflife),
      detail::tocpp<CPPMass>(mass),
      detail::tocpp<CPPSpin>(spin),
      detail::tocpp<CPPParity>(parity),
      detail::tocpp<CPPDecayData>(decayData)
   );
   return handle;
}

// Create, general
Handle2Lepton
LeptonCreate(
   const XMLName generation,
   const XMLName id,
   ConstHandle2ConstCharge charge,
   ConstHandle2ConstHalflife halflife,
   ConstHandle2ConstMass mass,
   ConstHandle2ConstSpin spin,
   ConstHandle2ConstParity parity,
   ConstHandle2ConstDecayData decayData
) {
   ConstHandle2Lepton handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      generation,
      id,
      detail::tocpp<CPPCharge>(charge),
      detail::tocpp<CPPHalflife>(halflife),
      detail::tocpp<CPPMass>(mass),
      detail::tocpp<CPPSpin>(spin),
      detail::tocpp<CPPParity>(parity),
      detail::tocpp<CPPDecayData>(decayData)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
LeptonAssign(ConstHandle2Lepton This, ConstHandle2ConstLepton from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
LeptonDelete(ConstHandle2ConstLepton This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
LeptonRead(ConstHandle2Lepton This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
LeptonWrite(ConstHandle2ConstLepton This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
LeptonPrint(ConstHandle2ConstLepton This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
LeptonPrintXML(ConstHandle2ConstLepton This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
LeptonPrintJSON(ConstHandle2ConstLepton This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: generation
// -----------------------------------------------------------------------------

// Has
int
LeptonGenerationHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"GenerationHas", This, extract::generation);
}

// Get
// Returns by value
XMLName
LeptonGenerationGet(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"GenerationGet", This, extract::generation);
}

// Set
void
LeptonGenerationSet(ConstHandle2Lepton This, const XMLName generation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"GenerationSet", This, extract::generation, generation);
}


// -----------------------------------------------------------------------------
// Metadatum: id
// -----------------------------------------------------------------------------

// Has
int
LeptonIdHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IdHas", This, extract::id);
}

// Get
// Returns by value
XMLName
LeptonIdGet(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"IdGet", This, extract::id);
}

// Set
void
LeptonIdSet(ConstHandle2Lepton This, const XMLName id)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"IdSet", This, extract::id, id);
}


// -----------------------------------------------------------------------------
// Child: charge
// -----------------------------------------------------------------------------

// Has
int
LeptonChargeHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChargeHas", This, extract::charge);
}

// Get, const
Handle2ConstCharge
LeptonChargeGetConst(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP,Handle2ConstCharge>
      (CLASSNAME, CLASSNAME+"ChargeGetConst", This, extract::charge);
}

// Get, non-const
Handle2Charge
LeptonChargeGet(ConstHandle2Lepton This)
{
   return detail::getField<CPP,Handle2Charge>
      (CLASSNAME, CLASSNAME+"ChargeGet", This, extract::charge);
}

// Set
void
LeptonChargeSet(ConstHandle2Lepton This, ConstHandle2ConstCharge charge)
{
   detail::setField<CPP,CPPCharge>
      (CLASSNAME, CLASSNAME+"ChargeSet", This, extract::charge, charge);
}


// -----------------------------------------------------------------------------
// Child: halflife
// -----------------------------------------------------------------------------

// Has
int
LeptonHalflifeHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HalflifeHas", This, extract::halflife);
}

// Get, const
Handle2ConstHalflife
LeptonHalflifeGetConst(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP,Handle2ConstHalflife>
      (CLASSNAME, CLASSNAME+"HalflifeGetConst", This, extract::halflife);
}

// Get, non-const
Handle2Halflife
LeptonHalflifeGet(ConstHandle2Lepton This)
{
   return detail::getField<CPP,Handle2Halflife>
      (CLASSNAME, CLASSNAME+"HalflifeGet", This, extract::halflife);
}

// Set
void
LeptonHalflifeSet(ConstHandle2Lepton This, ConstHandle2ConstHalflife halflife)
{
   detail::setField<CPP,CPPHalflife>
      (CLASSNAME, CLASSNAME+"HalflifeSet", This, extract::halflife, halflife);
}


// -----------------------------------------------------------------------------
// Child: mass
// -----------------------------------------------------------------------------

// Has
int
LeptonMassHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"MassHas", This, extract::mass);
}

// Get, const
Handle2ConstMass
LeptonMassGetConst(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP,Handle2ConstMass>
      (CLASSNAME, CLASSNAME+"MassGetConst", This, extract::mass);
}

// Get, non-const
Handle2Mass
LeptonMassGet(ConstHandle2Lepton This)
{
   return detail::getField<CPP,Handle2Mass>
      (CLASSNAME, CLASSNAME+"MassGet", This, extract::mass);
}

// Set
void
LeptonMassSet(ConstHandle2Lepton This, ConstHandle2ConstMass mass)
{
   detail::setField<CPP,CPPMass>
      (CLASSNAME, CLASSNAME+"MassSet", This, extract::mass, mass);
}


// -----------------------------------------------------------------------------
// Child: spin
// -----------------------------------------------------------------------------

// Has
int
LeptonSpinHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SpinHas", This, extract::spin);
}

// Get, const
Handle2ConstSpin
LeptonSpinGetConst(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP,Handle2ConstSpin>
      (CLASSNAME, CLASSNAME+"SpinGetConst", This, extract::spin);
}

// Get, non-const
Handle2Spin
LeptonSpinGet(ConstHandle2Lepton This)
{
   return detail::getField<CPP,Handle2Spin>
      (CLASSNAME, CLASSNAME+"SpinGet", This, extract::spin);
}

// Set
void
LeptonSpinSet(ConstHandle2Lepton This, ConstHandle2ConstSpin spin)
{
   detail::setField<CPP,CPPSpin>
      (CLASSNAME, CLASSNAME+"SpinSet", This, extract::spin, spin);
}


// -----------------------------------------------------------------------------
// Child: parity
// -----------------------------------------------------------------------------

// Has
int
LeptonParityHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ParityHas", This, extract::parity);
}

// Get, const
Handle2ConstParity
LeptonParityGetConst(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP,Handle2ConstParity>
      (CLASSNAME, CLASSNAME+"ParityGetConst", This, extract::parity);
}

// Get, non-const
Handle2Parity
LeptonParityGet(ConstHandle2Lepton This)
{
   return detail::getField<CPP,Handle2Parity>
      (CLASSNAME, CLASSNAME+"ParityGet", This, extract::parity);
}

// Set
void
LeptonParitySet(ConstHandle2Lepton This, ConstHandle2ConstParity parity)
{
   detail::setField<CPP,CPPParity>
      (CLASSNAME, CLASSNAME+"ParitySet", This, extract::parity, parity);
}


// -----------------------------------------------------------------------------
// Child: decayData
// -----------------------------------------------------------------------------

// Has
int
LeptonDecayDataHas(ConstHandle2ConstLepton This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DecayDataHas", This, extract::decayData);
}

// Get, const
Handle2ConstDecayData
LeptonDecayDataGetConst(ConstHandle2ConstLepton This)
{
   return detail::getField<CPP,Handle2ConstDecayData>
      (CLASSNAME, CLASSNAME+"DecayDataGetConst", This, extract::decayData);
}

// Get, non-const
Handle2DecayData
LeptonDecayDataGet(ConstHandle2Lepton This)
{
   return detail::getField<CPP,Handle2DecayData>
      (CLASSNAME, CLASSNAME+"DecayDataGet", This, extract::decayData);
}

// Set
void
LeptonDecayDataSet(ConstHandle2Lepton This, ConstHandle2ConstDecayData decayData)
{
   detail::setField<CPP,CPPDecayData>
      (CLASSNAME, CLASSNAME+"DecayDataSet", This, extract::decayData, decayData);
}
