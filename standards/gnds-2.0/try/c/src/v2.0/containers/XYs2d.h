
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// XYs2d is the basic handle type in this file. Example:
//    // Create a default XYs2d object:
//    XYs2d handle = XYs2dDefault();
// Functions involving XYs2d are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_CONTAINERS_XYS2D
#define C_INTERFACE_TRY_V2_0_CONTAINERS_XYS2D

#include "GNDStk.h"
#include "v2.0/containers/Axes.h"
#include "v2.0/containers/Function1ds.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct XYs2dClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ XYs2d
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct XYs2dClass *XYs2d;

// --- Const-aware handles.
typedef const struct XYs2dClass *const ConstHandle2ConstXYs2d;
typedef       struct XYs2dClass *const ConstHandle2XYs2d;
typedef const struct XYs2dClass *      Handle2ConstXYs2d;
typedef       struct XYs2dClass *      Handle2XYs2d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstXYs2d
XYs2dDefaultConst();

// +++ Create, default
extern_c Handle2XYs2d
XYs2dDefault();

// --- Create, general, const
extern_c Handle2ConstXYs2d
XYs2dCreateConst(
   const Integer32 index,
   const enums::Interpolation interpolation,
   const XMLName interpolationQualifier,
   const Float64 outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction1ds function1ds
);

// +++ Create, general
extern_c Handle2XYs2d
XYs2dCreate(
   const Integer32 index,
   const enums::Interpolation interpolation,
   const XMLName interpolationQualifier,
   const Float64 outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction1ds function1ds
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
XYs2dAssign(ConstHandle2XYs2d This, ConstHandle2ConstXYs2d from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
XYs2dDelete(ConstHandle2ConstXYs2d This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
XYs2dRead(ConstHandle2XYs2d This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
XYs2dWrite(ConstHandle2ConstXYs2d This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
XYs2dPrint(ConstHandle2ConstXYs2d This);

// +++ Print to standard output, as XML
extern_c int
XYs2dPrintXML(ConstHandle2ConstXYs2d This);

// +++ Print to standard output, as JSON
extern_c int
XYs2dPrintJSON(ConstHandle2ConstXYs2d This);


// -----------------------------------------------------------------------------
// Metadatum: index
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
XYs2dIndexHas(ConstHandle2ConstXYs2d This);

// +++ Get
// +++ Returns by value
extern_c Integer32
XYs2dIndexGet(ConstHandle2ConstXYs2d This);

// +++ Set
extern_c void
XYs2dIndexSet(ConstHandle2XYs2d This, const Integer32 index);


// -----------------------------------------------------------------------------
// Metadatum: interpolation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
XYs2dInterpolationHas(ConstHandle2ConstXYs2d This);

// +++ Get
// +++ Returns by value
extern_c enums::Interpolation
XYs2dInterpolationGet(ConstHandle2ConstXYs2d This);

// +++ Set
extern_c void
XYs2dInterpolationSet(ConstHandle2XYs2d This, const enums::Interpolation interpolation);


// -----------------------------------------------------------------------------
// Metadatum: interpolationQualifier
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
XYs2dInterpolationQualifierHas(ConstHandle2ConstXYs2d This);

// +++ Get
// +++ Returns by value
extern_c XMLName
XYs2dInterpolationQualifierGet(ConstHandle2ConstXYs2d This);

// +++ Set
extern_c void
XYs2dInterpolationQualifierSet(ConstHandle2XYs2d This, const XMLName interpolationQualifier);


// -----------------------------------------------------------------------------
// Metadatum: outerDomainValue
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
XYs2dOuterDomainValueHas(ConstHandle2ConstXYs2d This);

// +++ Get
// +++ Returns by value
extern_c Float64
XYs2dOuterDomainValueGet(ConstHandle2ConstXYs2d This);

// +++ Set
extern_c void
XYs2dOuterDomainValueSet(ConstHandle2XYs2d This, const Float64 outerDomainValue);


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
XYs2dAxesHas(ConstHandle2ConstXYs2d This);

// --- Get, const
extern_c Handle2ConstAxes
XYs2dAxesGetConst(ConstHandle2ConstXYs2d This);

// +++ Get, non-const
extern_c Handle2Axes
XYs2dAxesGet(ConstHandle2XYs2d This);

// +++ Set
extern_c void
XYs2dAxesSet(ConstHandle2XYs2d This, ConstHandle2ConstAxes axes);


// -----------------------------------------------------------------------------
// Child: function1ds
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
XYs2dFunction1dsHas(ConstHandle2ConstXYs2d This);

// --- Get, const
extern_c Handle2ConstFunction1ds
XYs2dFunction1dsGetConst(ConstHandle2ConstXYs2d This);

// +++ Get, non-const
extern_c Handle2Function1ds
XYs2dFunction1dsGet(ConstHandle2XYs2d This);

// +++ Set
extern_c void
XYs2dFunction1dsSet(ConstHandle2XYs2d This, ConstHandle2ConstFunction1ds function1ds);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
