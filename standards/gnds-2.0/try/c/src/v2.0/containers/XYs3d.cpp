
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/containers/XYs3d.hpp"
#include "XYs3d.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = XYs3dClass;
using CPP = multigroup::XYs3d;

static const std::string CLASSNAME = "XYs3d";

namespace extract {
   static auto interpolation = [](auto &obj) { return &obj.interpolation; };
   static auto interpolationQualifier = [](auto &obj) { return &obj.interpolationQualifier; };
   static auto axes = [](auto &obj) { return &obj.axes; };
   static auto function2ds = [](auto &obj) { return &obj.function2ds; };
}

using CPPAxes = containers::Axes;
using CPPFunction2ds = containers::Function2ds;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstXYs3d
XYs3dDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2XYs3d
XYs3dDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstXYs3d
XYs3dCreateConst(
   const enums::Interpolation interpolation,
   const XMLName interpolationQualifier,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction2ds function2ds
) {
   ConstHandle2XYs3d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      interpolation,
      interpolationQualifier,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPFunction2ds>(function2ds)
   );
   return handle;
}

// Create, general
Handle2XYs3d
XYs3dCreate(
   const enums::Interpolation interpolation,
   const XMLName interpolationQualifier,
   ConstHandle2ConstAxes axes,
   ConstHandle2ConstFunction2ds function2ds
) {
   ConstHandle2XYs3d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      interpolation,
      interpolationQualifier,
      detail::tocpp<CPPAxes>(axes),
      detail::tocpp<CPPFunction2ds>(function2ds)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
XYs3dAssign(ConstHandle2XYs3d This, ConstHandle2ConstXYs3d from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
XYs3dDelete(ConstHandle2ConstXYs3d This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
XYs3dRead(ConstHandle2XYs3d This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
XYs3dWrite(ConstHandle2ConstXYs3d This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
XYs3dPrint(ConstHandle2ConstXYs3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
XYs3dPrintXML(ConstHandle2ConstXYs3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
XYs3dPrintJSON(ConstHandle2ConstXYs3d This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: interpolation
// -----------------------------------------------------------------------------

// Has
int
XYs3dInterpolationHas(ConstHandle2ConstXYs3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationHas", This, extract::interpolation);
}

// Get
// Returns by value
enums::Interpolation
XYs3dInterpolationGet(ConstHandle2ConstXYs3d This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationGet", This, extract::interpolation);
}

// Set
void
XYs3dInterpolationSet(ConstHandle2XYs3d This, const enums::Interpolation interpolation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationSet", This, extract::interpolation, interpolation);
}


// -----------------------------------------------------------------------------
// Metadatum: interpolationQualifier
// -----------------------------------------------------------------------------

// Has
int
XYs3dInterpolationQualifierHas(ConstHandle2ConstXYs3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationQualifierHas", This, extract::interpolationQualifier);
}

// Get
// Returns by value
XMLName
XYs3dInterpolationQualifierGet(ConstHandle2ConstXYs3d This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationQualifierGet", This, extract::interpolationQualifier);
}

// Set
void
XYs3dInterpolationQualifierSet(ConstHandle2XYs3d This, const XMLName interpolationQualifier)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationQualifierSet", This, extract::interpolationQualifier, interpolationQualifier);
}


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// Has
int
XYs3dAxesHas(ConstHandle2ConstXYs3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AxesHas", This, extract::axes);
}

// Get, const
Handle2ConstAxes
XYs3dAxesGetConst(ConstHandle2ConstXYs3d This)
{
   return detail::getField<CPP,Handle2ConstAxes>
      (CLASSNAME, CLASSNAME+"AxesGetConst", This, extract::axes);
}

// Get, non-const
Handle2Axes
XYs3dAxesGet(ConstHandle2XYs3d This)
{
   return detail::getField<CPP,Handle2Axes>
      (CLASSNAME, CLASSNAME+"AxesGet", This, extract::axes);
}

// Set
void
XYs3dAxesSet(ConstHandle2XYs3d This, ConstHandle2ConstAxes axes)
{
   detail::setField<CPP,CPPAxes>
      (CLASSNAME, CLASSNAME+"AxesSet", This, extract::axes, axes);
}


// -----------------------------------------------------------------------------
// Child: function2ds
// -----------------------------------------------------------------------------

// Has
int
XYs3dFunction2dsHas(ConstHandle2ConstXYs3d This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Function2dsHas", This, extract::function2ds);
}

// Get, const
Handle2ConstFunction2ds
XYs3dFunction2dsGetConst(ConstHandle2ConstXYs3d This)
{
   return detail::getField<CPP,Handle2ConstFunction2ds>
      (CLASSNAME, CLASSNAME+"Function2dsGetConst", This, extract::function2ds);
}

// Get, non-const
Handle2Function2ds
XYs3dFunction2dsGet(ConstHandle2XYs3d This)
{
   return detail::getField<CPP,Handle2Function2ds>
      (CLASSNAME, CLASSNAME+"Function2dsGet", This, extract::function2ds);
}

// Set
void
XYs3dFunction2dsSet(ConstHandle2XYs3d This, ConstHandle2ConstFunction2ds function2ds)
{
   detail::setField<CPP,CPPFunction2ds>
      (CLASSNAME, CLASSNAME+"Function2dsSet", This, extract::function2ds, function2ds);
}
