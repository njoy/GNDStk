
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/documentation/ExforDataSet.hpp"
#include "ExforDataSet.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = ExforDataSetClass;
using CPP = multigroup::ExforDataSet;

static const std::string CLASSNAME = "ExforDataSet";

namespace extract {
   static auto subentry = [](auto &obj) { return &obj.subentry; };
   static auto retrievalDate = [](auto &obj) { return &obj.retrievalDate; };
   static auto covarianceScript = [](auto &obj) { return &obj.covarianceScript; };
   static auto correctionScript = [](auto &obj) { return &obj.correctionScript; };
   static auto note = [](auto &obj) { return &obj.note; };
}

using CPPCovarianceScript = documentation::CovarianceScript;
using CPPCorrectionScript = documentation::CorrectionScript;
using CPPNote = documentation::Note;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstExforDataSet
ExforDataSetDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ExforDataSet
ExforDataSetDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstExforDataSet
ExforDataSetCreateConst(
   const XMLName subentry,
   const char *const retrievalDate,
   ConstHandle2ConstCovarianceScript covarianceScript,
   ConstHandle2ConstCorrectionScript correctionScript,
   ConstHandle2ConstNote note
) {
   ConstHandle2ExforDataSet handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      subentry,
      retrievalDate,
      detail::tocpp<CPPCovarianceScript>(covarianceScript),
      detail::tocpp<CPPCorrectionScript>(correctionScript),
      detail::tocpp<CPPNote>(note)
   );
   return handle;
}

// Create, general
Handle2ExforDataSet
ExforDataSetCreate(
   const XMLName subentry,
   const char *const retrievalDate,
   ConstHandle2ConstCovarianceScript covarianceScript,
   ConstHandle2ConstCorrectionScript correctionScript,
   ConstHandle2ConstNote note
) {
   ConstHandle2ExforDataSet handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      subentry,
      retrievalDate,
      detail::tocpp<CPPCovarianceScript>(covarianceScript),
      detail::tocpp<CPPCorrectionScript>(correctionScript),
      detail::tocpp<CPPNote>(note)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ExforDataSetAssign(ConstHandle2ExforDataSet This, ConstHandle2ConstExforDataSet from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ExforDataSetDelete(ConstHandle2ConstExforDataSet This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ExforDataSetRead(ConstHandle2ExforDataSet This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ExforDataSetWrite(ConstHandle2ConstExforDataSet This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ExforDataSetPrint(ConstHandle2ConstExforDataSet This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ExforDataSetPrintXML(ConstHandle2ConstExforDataSet This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ExforDataSetPrintJSON(ConstHandle2ConstExforDataSet This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: subentry
// -----------------------------------------------------------------------------

// Has
int
ExforDataSetSubentryHas(ConstHandle2ConstExforDataSet This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SubentryHas", This, extract::subentry);
}

// Get
// Returns by value
XMLName
ExforDataSetSubentryGet(ConstHandle2ConstExforDataSet This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"SubentryGet", This, extract::subentry);
}

// Set
void
ExforDataSetSubentrySet(ConstHandle2ExforDataSet This, const XMLName subentry)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"SubentrySet", This, extract::subentry, subentry);
}


// -----------------------------------------------------------------------------
// Metadatum: retrievalDate
// -----------------------------------------------------------------------------

// Has
int
ExforDataSetRetrievalDateHas(ConstHandle2ConstExforDataSet This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"RetrievalDateHas", This, extract::retrievalDate);
}

// Get
// Returns by value
const char *
ExforDataSetRetrievalDateGet(ConstHandle2ConstExforDataSet This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"RetrievalDateGet", This, extract::retrievalDate);
}

// Set
void
ExforDataSetRetrievalDateSet(ConstHandle2ExforDataSet This, const char *const retrievalDate)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"RetrievalDateSet", This, extract::retrievalDate, retrievalDate);
}


// -----------------------------------------------------------------------------
// Child: covarianceScript
// -----------------------------------------------------------------------------

// Has
int
ExforDataSetCovarianceScriptHas(ConstHandle2ConstExforDataSet This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceScriptHas", This, extract::covarianceScript);
}

// Get, const
Handle2ConstCovarianceScript
ExforDataSetCovarianceScriptGetConst(ConstHandle2ConstExforDataSet This)
{
   return detail::getField<CPP,Handle2ConstCovarianceScript>
      (CLASSNAME, CLASSNAME+"CovarianceScriptGetConst", This, extract::covarianceScript);
}

// Get, non-const
Handle2CovarianceScript
ExforDataSetCovarianceScriptGet(ConstHandle2ExforDataSet This)
{
   return detail::getField<CPP,Handle2CovarianceScript>
      (CLASSNAME, CLASSNAME+"CovarianceScriptGet", This, extract::covarianceScript);
}

// Set
void
ExforDataSetCovarianceScriptSet(ConstHandle2ExforDataSet This, ConstHandle2ConstCovarianceScript covarianceScript)
{
   detail::setField<CPP,CPPCovarianceScript>
      (CLASSNAME, CLASSNAME+"CovarianceScriptSet", This, extract::covarianceScript, covarianceScript);
}


// -----------------------------------------------------------------------------
// Child: correctionScript
// -----------------------------------------------------------------------------

// Has
int
ExforDataSetCorrectionScriptHas(ConstHandle2ConstExforDataSet This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CorrectionScriptHas", This, extract::correctionScript);
}

// Get, const
Handle2ConstCorrectionScript
ExforDataSetCorrectionScriptGetConst(ConstHandle2ConstExforDataSet This)
{
   return detail::getField<CPP,Handle2ConstCorrectionScript>
      (CLASSNAME, CLASSNAME+"CorrectionScriptGetConst", This, extract::correctionScript);
}

// Get, non-const
Handle2CorrectionScript
ExforDataSetCorrectionScriptGet(ConstHandle2ExforDataSet This)
{
   return detail::getField<CPP,Handle2CorrectionScript>
      (CLASSNAME, CLASSNAME+"CorrectionScriptGet", This, extract::correctionScript);
}

// Set
void
ExforDataSetCorrectionScriptSet(ConstHandle2ExforDataSet This, ConstHandle2ConstCorrectionScript correctionScript)
{
   detail::setField<CPP,CPPCorrectionScript>
      (CLASSNAME, CLASSNAME+"CorrectionScriptSet", This, extract::correctionScript, correctionScript);
}


// -----------------------------------------------------------------------------
// Child: note
// -----------------------------------------------------------------------------

// Has
int
ExforDataSetNoteHas(ConstHandle2ConstExforDataSet This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NoteHas", This, extract::note);
}

// Get, const
Handle2ConstNote
ExforDataSetNoteGetConst(ConstHandle2ConstExforDataSet This)
{
   return detail::getField<CPP,Handle2ConstNote>
      (CLASSNAME, CLASSNAME+"NoteGetConst", This, extract::note);
}

// Get, non-const
Handle2Note
ExforDataSetNoteGet(ConstHandle2ExforDataSet This)
{
   return detail::getField<CPP,Handle2Note>
      (CLASSNAME, CLASSNAME+"NoteGet", This, extract::note);
}

// Set
void
ExforDataSetNoteSet(ConstHandle2ExforDataSet This, ConstHandle2ConstNote note)
{
   detail::setField<CPP,CPPNote>
      (CLASSNAME, CLASSNAME+"NoteSet", This, extract::note, note);
}
