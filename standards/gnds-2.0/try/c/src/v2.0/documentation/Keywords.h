
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Keywords is the basic handle type in this file. Example:
//    // Create a default Keywords object:
//    Keywords handle = KeywordsDefault();
// Functions involving Keywords are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_DOCUMENTATION_KEYWORDS
#define C_INTERFACE_TRY_V2_0_DOCUMENTATION_KEYWORDS

#include "GNDStk.h"
#include "v2.0/documentation/Keyword.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct KeywordsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Keywords
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct KeywordsClass *Keywords;

// --- Const-aware handles.
typedef const struct KeywordsClass *const ConstHandle2ConstKeywords;
typedef       struct KeywordsClass *const ConstHandle2Keywords;
typedef const struct KeywordsClass *      Handle2ConstKeywords;
typedef       struct KeywordsClass *      Handle2Keywords;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstKeywords
KeywordsDefaultConst();

// +++ Create, default
extern_c Handle2Keywords
KeywordsDefault();

// --- Create, general, const
extern_c Handle2ConstKeywords
KeywordsCreateConst(
   ConstHandle2Keyword *const keyword, const size_t keywordSize
);

// +++ Create, general
extern_c Handle2Keywords
KeywordsCreate(
   ConstHandle2Keyword *const keyword, const size_t keywordSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
KeywordsAssign(ConstHandle2Keywords This, ConstHandle2ConstKeywords from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
KeywordsDelete(ConstHandle2ConstKeywords This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
KeywordsRead(ConstHandle2Keywords This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
KeywordsWrite(ConstHandle2ConstKeywords This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
KeywordsPrint(ConstHandle2ConstKeywords This);

// +++ Print to standard output, as XML
extern_c int
KeywordsPrintXML(ConstHandle2ConstKeywords This);

// +++ Print to standard output, as JSON
extern_c int
KeywordsPrintJSON(ConstHandle2ConstKeywords This);


// -----------------------------------------------------------------------------
// Child: keyword
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
KeywordsKeywordHas(ConstHandle2ConstKeywords This);

// +++ Clear
extern_c void
KeywordsKeywordClear(ConstHandle2Keywords This);

// +++ Size
extern_c size_t
KeywordsKeywordSize(ConstHandle2ConstKeywords This);

// +++ Add
extern_c void
KeywordsKeywordAdd(ConstHandle2Keywords This, ConstHandle2ConstKeyword keyword);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstKeyword
KeywordsKeywordGetConst(ConstHandle2ConstKeywords This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Keyword
KeywordsKeywordGet(ConstHandle2Keywords This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
KeywordsKeywordSet(
   ConstHandle2Keywords This,
   const size_t index_,
   ConstHandle2ConstKeyword keyword
);

// +++ Has, by encoding
extern_c int
KeywordsKeywordHasByEncoding(
   ConstHandle2ConstKeywords This,
   const XMLName encoding
);

// --- Get, by encoding, const
extern_c Handle2ConstKeyword
KeywordsKeywordGetByEncodingConst(
   ConstHandle2ConstKeywords This,
   const XMLName encoding
);

// +++ Get, by encoding, non-const
extern_c Handle2Keyword
KeywordsKeywordGetByEncoding(
   ConstHandle2Keywords This,
   const XMLName encoding
);

// +++ Set, by encoding
extern_c void
KeywordsKeywordSetByEncoding(
   ConstHandle2Keywords This,
   const XMLName encoding,
   ConstHandle2ConstKeyword keyword
);

// +++ Has, by markup
extern_c int
KeywordsKeywordHasByMarkup(
   ConstHandle2ConstKeywords This,
   const char *const markup
);

// --- Get, by markup, const
extern_c Handle2ConstKeyword
KeywordsKeywordGetByMarkupConst(
   ConstHandle2ConstKeywords This,
   const char *const markup
);

// +++ Get, by markup, non-const
extern_c Handle2Keyword
KeywordsKeywordGetByMarkup(
   ConstHandle2Keywords This,
   const char *const markup
);

// +++ Set, by markup
extern_c void
KeywordsKeywordSetByMarkup(
   ConstHandle2Keywords This,
   const char *const markup,
   ConstHandle2ConstKeyword keyword
);

// +++ Has, by label
extern_c int
KeywordsKeywordHasByLabel(
   ConstHandle2ConstKeywords This,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstKeyword
KeywordsKeywordGetByLabelConst(
   ConstHandle2ConstKeywords This,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2Keyword
KeywordsKeywordGetByLabel(
   ConstHandle2Keywords This,
   const XMLName label
);

// +++ Set, by label
extern_c void
KeywordsKeywordSetByLabel(
   ConstHandle2Keywords This,
   const XMLName label,
   ConstHandle2ConstKeyword keyword
);

// +++ Has, by type
extern_c int
KeywordsKeywordHasByType(
   ConstHandle2ConstKeywords This,
   const XMLName type
);

// --- Get, by type, const
extern_c Handle2ConstKeyword
KeywordsKeywordGetByTypeConst(
   ConstHandle2ConstKeywords This,
   const XMLName type
);

// +++ Get, by type, non-const
extern_c Handle2Keyword
KeywordsKeywordGetByType(
   ConstHandle2Keywords This,
   const XMLName type
);

// +++ Set, by type
extern_c void
KeywordsKeywordSetByType(
   ConstHandle2Keywords This,
   const XMLName type,
   ConstHandle2ConstKeyword keyword
);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
