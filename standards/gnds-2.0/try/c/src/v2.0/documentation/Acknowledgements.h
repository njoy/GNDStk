
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Acknowledgements is the basic handle type in this file. Example:
//    // Create a default Acknowledgements object:
//    Acknowledgements handle = AcknowledgementsDefault();
// Functions involving Acknowledgements are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_DOCUMENTATION_ACKNOWLEDGEMENTS
#define C_INTERFACE_TRY_V2_0_DOCUMENTATION_ACKNOWLEDGEMENTS

#include "GNDStk.h"
#include "v2.0/documentation/Acknowledgement.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct AcknowledgementsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Acknowledgements
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct AcknowledgementsClass *Acknowledgements;

// --- Const-aware handles.
typedef const struct AcknowledgementsClass *const ConstHandle2ConstAcknowledgements;
typedef       struct AcknowledgementsClass *const ConstHandle2Acknowledgements;
typedef const struct AcknowledgementsClass *      Handle2ConstAcknowledgements;
typedef       struct AcknowledgementsClass *      Handle2Acknowledgements;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstAcknowledgements
AcknowledgementsDefaultConst();

// +++ Create, default
extern_c Handle2Acknowledgements
AcknowledgementsDefault();

// --- Create, general, const
extern_c Handle2ConstAcknowledgements
AcknowledgementsCreateConst(
   ConstHandle2Acknowledgement *const acknowledgement, const size_t acknowledgementSize
);

// +++ Create, general
extern_c Handle2Acknowledgements
AcknowledgementsCreate(
   ConstHandle2Acknowledgement *const acknowledgement, const size_t acknowledgementSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
AcknowledgementsAssign(ConstHandle2Acknowledgements This, ConstHandle2ConstAcknowledgements from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
AcknowledgementsDelete(ConstHandle2ConstAcknowledgements This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
AcknowledgementsRead(ConstHandle2Acknowledgements This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
AcknowledgementsWrite(ConstHandle2ConstAcknowledgements This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
AcknowledgementsPrint(ConstHandle2ConstAcknowledgements This);

// +++ Print to standard output, as XML
extern_c int
AcknowledgementsPrintXML(ConstHandle2ConstAcknowledgements This);

// +++ Print to standard output, as JSON
extern_c int
AcknowledgementsPrintJSON(ConstHandle2ConstAcknowledgements This);


// -----------------------------------------------------------------------------
// Child: acknowledgement
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
AcknowledgementsAcknowledgementHas(ConstHandle2ConstAcknowledgements This);

// +++ Clear
extern_c void
AcknowledgementsAcknowledgementClear(ConstHandle2Acknowledgements This);

// +++ Size
extern_c size_t
AcknowledgementsAcknowledgementSize(ConstHandle2ConstAcknowledgements This);

// +++ Add
extern_c void
AcknowledgementsAcknowledgementAdd(ConstHandle2Acknowledgements This, ConstHandle2ConstAcknowledgement acknowledgement);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetConst(ConstHandle2ConstAcknowledgements This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Acknowledgement
AcknowledgementsAcknowledgementGet(ConstHandle2Acknowledgements This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
AcknowledgementsAcknowledgementSet(
   ConstHandle2Acknowledgements This,
   const size_t index_,
   ConstHandle2ConstAcknowledgement acknowledgement
);

// +++ Has, by encoding
extern_c int
AcknowledgementsAcknowledgementHasByEncoding(
   ConstHandle2ConstAcknowledgements This,
   const XMLName encoding
);

// --- Get, by encoding, const
extern_c Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByEncodingConst(
   ConstHandle2ConstAcknowledgements This,
   const XMLName encoding
);

// +++ Get, by encoding, non-const
extern_c Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByEncoding(
   ConstHandle2Acknowledgements This,
   const XMLName encoding
);

// +++ Set, by encoding
extern_c void
AcknowledgementsAcknowledgementSetByEncoding(
   ConstHandle2Acknowledgements This,
   const XMLName encoding,
   ConstHandle2ConstAcknowledgement acknowledgement
);

// +++ Has, by markup
extern_c int
AcknowledgementsAcknowledgementHasByMarkup(
   ConstHandle2ConstAcknowledgements This,
   const char *const markup
);

// --- Get, by markup, const
extern_c Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByMarkupConst(
   ConstHandle2ConstAcknowledgements This,
   const char *const markup
);

// +++ Get, by markup, non-const
extern_c Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByMarkup(
   ConstHandle2Acknowledgements This,
   const char *const markup
);

// +++ Set, by markup
extern_c void
AcknowledgementsAcknowledgementSetByMarkup(
   ConstHandle2Acknowledgements This,
   const char *const markup,
   ConstHandle2ConstAcknowledgement acknowledgement
);

// +++ Has, by label
extern_c int
AcknowledgementsAcknowledgementHasByLabel(
   ConstHandle2ConstAcknowledgements This,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByLabelConst(
   ConstHandle2ConstAcknowledgements This,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByLabel(
   ConstHandle2Acknowledgements This,
   const XMLName label
);

// +++ Set, by label
extern_c void
AcknowledgementsAcknowledgementSetByLabel(
   ConstHandle2Acknowledgements This,
   const XMLName label,
   ConstHandle2ConstAcknowledgement acknowledgement
);

// +++ Has, by label
extern_c int
AcknowledgementsAcknowledgementHasByLabel(
   ConstHandle2ConstAcknowledgements This,
   const XMLName label
);

// --- Get, by label, const
extern_c Handle2ConstAcknowledgement
AcknowledgementsAcknowledgementGetByLabelConst(
   ConstHandle2ConstAcknowledgements This,
   const XMLName label
);

// +++ Get, by label, non-const
extern_c Handle2Acknowledgement
AcknowledgementsAcknowledgementGetByLabel(
   ConstHandle2Acknowledgements This,
   const XMLName label
);

// +++ Set, by label
extern_c void
AcknowledgementsAcknowledgementSetByLabel(
   ConstHandle2Acknowledgements This,
   const XMLName label,
   ConstHandle2ConstAcknowledgement acknowledgement
);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
