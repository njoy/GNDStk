
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/covariance/ColumnSensitivity.hpp"
#include "ColumnSensitivity.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = ColumnSensitivityClass;
using CPP = multigroup::ColumnSensitivity;

static const std::string CLASSNAME = "ColumnSensitivity";

namespace extract {
   static auto array = [](auto &obj) { return &obj.array; };
}

using CPPArray = containers::Array;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstColumnSensitivity
ColumnSensitivityDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ColumnSensitivity
ColumnSensitivityDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstColumnSensitivity
ColumnSensitivityCreateConst(
   ConstHandle2ConstArray array
) {
   ConstHandle2ColumnSensitivity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPArray>(array)
   );
   return handle;
}

// Create, general
Handle2ColumnSensitivity
ColumnSensitivityCreate(
   ConstHandle2ConstArray array
) {
   ConstHandle2ColumnSensitivity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPArray>(array)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ColumnSensitivityAssign(ConstHandle2ColumnSensitivity This, ConstHandle2ConstColumnSensitivity from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ColumnSensitivityDelete(ConstHandle2ConstColumnSensitivity This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ColumnSensitivityRead(ConstHandle2ColumnSensitivity This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ColumnSensitivityWrite(ConstHandle2ConstColumnSensitivity This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ColumnSensitivityPrint(ConstHandle2ConstColumnSensitivity This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ColumnSensitivityPrintXML(ConstHandle2ConstColumnSensitivity This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ColumnSensitivityPrintJSON(ConstHandle2ConstColumnSensitivity This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: array
// -----------------------------------------------------------------------------

// Has
int
ColumnSensitivityArrayHas(ConstHandle2ConstColumnSensitivity This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ArrayHas", This, extract::array);
}

// Get, const
Handle2ConstArray
ColumnSensitivityArrayGetConst(ConstHandle2ConstColumnSensitivity This)
{
   return detail::getField<CPP,Handle2ConstArray>
      (CLASSNAME, CLASSNAME+"ArrayGetConst", This, extract::array);
}

// Get, non-const
Handle2Array
ColumnSensitivityArrayGet(ConstHandle2ColumnSensitivity This)
{
   return detail::getField<CPP,Handle2Array>
      (CLASSNAME, CLASSNAME+"ArrayGet", This, extract::array);
}

// Set
void
ColumnSensitivityArraySet(ConstHandle2ColumnSensitivity This, ConstHandle2ConstArray array)
{
   detail::setField<CPP,CPPArray>
      (CLASSNAME, CLASSNAME+"ArraySet", This, extract::array, array);
}
