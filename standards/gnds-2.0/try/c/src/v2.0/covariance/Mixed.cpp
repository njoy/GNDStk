
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/covariance/Mixed.hpp"
#include "Mixed.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = MixedClass;
using CPP = multigroup::Mixed;

static const std::string CLASSNAME = "Mixed";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto covarianceMatrix = [](auto &obj) { return &obj.covarianceMatrix; };
   static auto shortRangeSelfScalingVariance = [](auto &obj) { return &obj.shortRangeSelfScalingVariance; };
   static auto sum = [](auto &obj) { return &obj.sum; };
}

using CPPCovarianceMatrix = covariance::CovarianceMatrix;
using CPPShortRangeSelfScalingVariance = covariance::ShortRangeSelfScalingVariance;
using CPPSum = covariance::Sum;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstMixed
MixedDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Mixed
MixedDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstMixed
MixedCreateConst(
   const XMLName label,
   ConstHandle2CovarianceMatrix *const covarianceMatrix, const size_t covarianceMatrixSize,
   ConstHandle2ShortRangeSelfScalingVariance *const shortRangeSelfScalingVariance, const size_t shortRangeSelfScalingVarianceSize,
   ConstHandle2Sum *const sum, const size_t sumSize
) {
   ConstHandle2Mixed handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      std::vector<CPPCovarianceMatrix>{},
      std::vector<CPPShortRangeSelfScalingVariance>{},
      std::vector<CPPSum>{}
   );
   for (size_t CovarianceMatrixN = 0; CovarianceMatrixN < covarianceMatrixSize; ++CovarianceMatrixN)
      MixedCovarianceMatrixAdd(handle, covarianceMatrix[CovarianceMatrixN]);
   for (size_t ShortRangeSelfScalingVarianceN = 0; ShortRangeSelfScalingVarianceN < shortRangeSelfScalingVarianceSize; ++ShortRangeSelfScalingVarianceN)
      MixedShortRangeSelfScalingVarianceAdd(handle, shortRangeSelfScalingVariance[ShortRangeSelfScalingVarianceN]);
   for (size_t SumN = 0; SumN < sumSize; ++SumN)
      MixedSumAdd(handle, sum[SumN]);
   return handle;
}

// Create, general
Handle2Mixed
MixedCreate(
   const XMLName label,
   ConstHandle2CovarianceMatrix *const covarianceMatrix, const size_t covarianceMatrixSize,
   ConstHandle2ShortRangeSelfScalingVariance *const shortRangeSelfScalingVariance, const size_t shortRangeSelfScalingVarianceSize,
   ConstHandle2Sum *const sum, const size_t sumSize
) {
   ConstHandle2Mixed handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      std::vector<CPPCovarianceMatrix>{},
      std::vector<CPPShortRangeSelfScalingVariance>{},
      std::vector<CPPSum>{}
   );
   for (size_t CovarianceMatrixN = 0; CovarianceMatrixN < covarianceMatrixSize; ++CovarianceMatrixN)
      MixedCovarianceMatrixAdd(handle, covarianceMatrix[CovarianceMatrixN]);
   for (size_t ShortRangeSelfScalingVarianceN = 0; ShortRangeSelfScalingVarianceN < shortRangeSelfScalingVarianceSize; ++ShortRangeSelfScalingVarianceN)
      MixedShortRangeSelfScalingVarianceAdd(handle, shortRangeSelfScalingVariance[ShortRangeSelfScalingVarianceN]);
   for (size_t SumN = 0; SumN < sumSize; ++SumN)
      MixedSumAdd(handle, sum[SumN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
MixedAssign(ConstHandle2Mixed This, ConstHandle2ConstMixed from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
MixedDelete(ConstHandle2ConstMixed This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
MixedRead(ConstHandle2Mixed This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
MixedWrite(ConstHandle2ConstMixed This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
MixedPrint(ConstHandle2ConstMixed This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
MixedPrintXML(ConstHandle2ConstMixed This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
MixedPrintJSON(ConstHandle2ConstMixed This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
MixedLabelHas(ConstHandle2ConstMixed This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
MixedLabelGet(ConstHandle2ConstMixed This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
MixedLabelSet(ConstHandle2Mixed This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: covarianceMatrix
// -----------------------------------------------------------------------------

// Has
int
MixedCovarianceMatrixHas(ConstHandle2ConstMixed This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixHas", This, extract::covarianceMatrix);
}

// Clear
void
MixedCovarianceMatrixClear(ConstHandle2Mixed This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixClear", This, extract::covarianceMatrix);
}

// Size
size_t
MixedCovarianceMatrixSize(ConstHandle2ConstMixed This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixSize", This, extract::covarianceMatrix);
}

// Add
void
MixedCovarianceMatrixAdd(ConstHandle2Mixed This, ConstHandle2ConstCovarianceMatrix covarianceMatrix)
{
   detail::addToContainer<CPP,CPPCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixAdd", This, extract::covarianceMatrix, covarianceMatrix);
}

// Get, by index \in [0,size), const
Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetConst(ConstHandle2ConstMixed This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetConst", This, extract::covarianceMatrix, index_);
}

// Get, by index \in [0,size), non-const
Handle2CovarianceMatrix
MixedCovarianceMatrixGet(ConstHandle2Mixed This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2CovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGet", This, extract::covarianceMatrix, index_);
}

// Set, by index \in [0,size)
void
MixedCovarianceMatrixSet(
   ConstHandle2Mixed This,
   const size_t index_,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
) {
   detail::setByIndex<CPP,CPPCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixSet", This, extract::covarianceMatrix, index_, covarianceMatrix);
}

// Has, by label
int
MixedCovarianceMatrixHasByLabel(
   ConstHandle2ConstMixed This,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixHasByLabel",
       This, extract::covarianceMatrix, meta::label, label);
}

// Get, by label, const
Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetByLabelConst(
   ConstHandle2ConstMixed This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetByLabelConst",
       This, extract::covarianceMatrix, meta::label, label);
}

// Get, by label, non-const
Handle2CovarianceMatrix
MixedCovarianceMatrixGetByLabel(
   ConstHandle2Mixed This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2CovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetByLabel",
       This, extract::covarianceMatrix, meta::label, label);
}

// Set, by label
void
MixedCovarianceMatrixSetByLabel(
   ConstHandle2Mixed This,
   const XMLName label,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
) {
   detail::setByMetadatum<CPP,CPPCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixSetByLabel",
       This, extract::covarianceMatrix, meta::label, label, covarianceMatrix);
}

// Has, by productFrame
int
MixedCovarianceMatrixHasByProductFrame(
   ConstHandle2ConstMixed This,
   const enums::Frame productFrame
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixHasByProductFrame",
       This, extract::covarianceMatrix, meta::productFrame, productFrame);
}

// Get, by productFrame, const
Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetByProductFrameConst(
   ConstHandle2ConstMixed This,
   const enums::Frame productFrame
) {
   return detail::getByMetadatum<CPP,Handle2ConstCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetByProductFrameConst",
       This, extract::covarianceMatrix, meta::productFrame, productFrame);
}

// Get, by productFrame, non-const
Handle2CovarianceMatrix
MixedCovarianceMatrixGetByProductFrame(
   ConstHandle2Mixed This,
   const enums::Frame productFrame
) {
   return detail::getByMetadatum<CPP,Handle2CovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetByProductFrame",
       This, extract::covarianceMatrix, meta::productFrame, productFrame);
}

// Set, by productFrame
void
MixedCovarianceMatrixSetByProductFrame(
   ConstHandle2Mixed This,
   const enums::Frame productFrame,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
) {
   detail::setByMetadatum<CPP,CPPCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixSetByProductFrame",
       This, extract::covarianceMatrix, meta::productFrame, productFrame, covarianceMatrix);
}

// Has, by type
int
MixedCovarianceMatrixHasByType(
   ConstHandle2ConstMixed This,
   const XMLName type
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixHasByType",
       This, extract::covarianceMatrix, meta::type, type);
}

// Get, by type, const
Handle2ConstCovarianceMatrix
MixedCovarianceMatrixGetByTypeConst(
   ConstHandle2ConstMixed This,
   const XMLName type
) {
   return detail::getByMetadatum<CPP,Handle2ConstCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetByTypeConst",
       This, extract::covarianceMatrix, meta::type, type);
}

// Get, by type, non-const
Handle2CovarianceMatrix
MixedCovarianceMatrixGetByType(
   ConstHandle2Mixed This,
   const XMLName type
) {
   return detail::getByMetadatum<CPP,Handle2CovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixGetByType",
       This, extract::covarianceMatrix, meta::type, type);
}

// Set, by type
void
MixedCovarianceMatrixSetByType(
   ConstHandle2Mixed This,
   const XMLName type,
   ConstHandle2ConstCovarianceMatrix covarianceMatrix
) {
   detail::setByMetadatum<CPP,CPPCovarianceMatrix>
      (CLASSNAME, CLASSNAME+"CovarianceMatrixSetByType",
       This, extract::covarianceMatrix, meta::type, type, covarianceMatrix);
}


// -----------------------------------------------------------------------------
// Child: shortRangeSelfScalingVariance
// -----------------------------------------------------------------------------

// Has
int
MixedShortRangeSelfScalingVarianceHas(ConstHandle2ConstMixed This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceHas", This, extract::shortRangeSelfScalingVariance);
}

// Clear
void
MixedShortRangeSelfScalingVarianceClear(ConstHandle2Mixed This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceClear", This, extract::shortRangeSelfScalingVariance);
}

// Size
size_t
MixedShortRangeSelfScalingVarianceSize(ConstHandle2ConstMixed This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceSize", This, extract::shortRangeSelfScalingVariance);
}

// Add
void
MixedShortRangeSelfScalingVarianceAdd(ConstHandle2Mixed This, ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance)
{
   detail::addToContainer<CPP,CPPShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceAdd", This, extract::shortRangeSelfScalingVariance, shortRangeSelfScalingVariance);
}

// Get, by index \in [0,size), const
Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetConst(ConstHandle2ConstMixed This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetConst", This, extract::shortRangeSelfScalingVariance, index_);
}

// Get, by index \in [0,size), non-const
Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGet(ConstHandle2Mixed This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGet", This, extract::shortRangeSelfScalingVariance, index_);
}

// Set, by index \in [0,size)
void
MixedShortRangeSelfScalingVarianceSet(
   ConstHandle2Mixed This,
   const size_t index_,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
) {
   detail::setByIndex<CPP,CPPShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceSet", This, extract::shortRangeSelfScalingVariance, index_, shortRangeSelfScalingVariance);
}

// Has, by dependenceOnProcessedGroupWidth
int
MixedShortRangeSelfScalingVarianceHasByDependenceOnProcessedGroupWidth(
   ConstHandle2ConstMixed This,
   const XMLName dependenceOnProcessedGroupWidth
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceHasByDependenceOnProcessedGroupWidth",
       This, extract::shortRangeSelfScalingVariance, meta::dependenceOnProcessedGroupWidth, dependenceOnProcessedGroupWidth);
}

// Get, by dependenceOnProcessedGroupWidth, const
Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByDependenceOnProcessedGroupWidthConst(
   ConstHandle2ConstMixed This,
   const XMLName dependenceOnProcessedGroupWidth
) {
   return detail::getByMetadatum<CPP,Handle2ConstShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetByDependenceOnProcessedGroupWidthConst",
       This, extract::shortRangeSelfScalingVariance, meta::dependenceOnProcessedGroupWidth, dependenceOnProcessedGroupWidth);
}

// Get, by dependenceOnProcessedGroupWidth, non-const
Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByDependenceOnProcessedGroupWidth(
   ConstHandle2Mixed This,
   const XMLName dependenceOnProcessedGroupWidth
) {
   return detail::getByMetadatum<CPP,Handle2ShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetByDependenceOnProcessedGroupWidth",
       This, extract::shortRangeSelfScalingVariance, meta::dependenceOnProcessedGroupWidth, dependenceOnProcessedGroupWidth);
}

// Set, by dependenceOnProcessedGroupWidth
void
MixedShortRangeSelfScalingVarianceSetByDependenceOnProcessedGroupWidth(
   ConstHandle2Mixed This,
   const XMLName dependenceOnProcessedGroupWidth,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
) {
   detail::setByMetadatum<CPP,CPPShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceSetByDependenceOnProcessedGroupWidth",
       This, extract::shortRangeSelfScalingVariance, meta::dependenceOnProcessedGroupWidth, dependenceOnProcessedGroupWidth, shortRangeSelfScalingVariance);
}

// Has, by label
int
MixedShortRangeSelfScalingVarianceHasByLabel(
   ConstHandle2ConstMixed This,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceHasByLabel",
       This, extract::shortRangeSelfScalingVariance, meta::label, label);
}

// Get, by label, const
Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByLabelConst(
   ConstHandle2ConstMixed This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetByLabelConst",
       This, extract::shortRangeSelfScalingVariance, meta::label, label);
}

// Get, by label, non-const
Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByLabel(
   ConstHandle2Mixed This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetByLabel",
       This, extract::shortRangeSelfScalingVariance, meta::label, label);
}

// Set, by label
void
MixedShortRangeSelfScalingVarianceSetByLabel(
   ConstHandle2Mixed This,
   const XMLName label,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
) {
   detail::setByMetadatum<CPP,CPPShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceSetByLabel",
       This, extract::shortRangeSelfScalingVariance, meta::label, label, shortRangeSelfScalingVariance);
}

// Has, by type
int
MixedShortRangeSelfScalingVarianceHasByType(
   ConstHandle2ConstMixed This,
   const XMLName type
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceHasByType",
       This, extract::shortRangeSelfScalingVariance, meta::type, type);
}

// Get, by type, const
Handle2ConstShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByTypeConst(
   ConstHandle2ConstMixed This,
   const XMLName type
) {
   return detail::getByMetadatum<CPP,Handle2ConstShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetByTypeConst",
       This, extract::shortRangeSelfScalingVariance, meta::type, type);
}

// Get, by type, non-const
Handle2ShortRangeSelfScalingVariance
MixedShortRangeSelfScalingVarianceGetByType(
   ConstHandle2Mixed This,
   const XMLName type
) {
   return detail::getByMetadatum<CPP,Handle2ShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceGetByType",
       This, extract::shortRangeSelfScalingVariance, meta::type, type);
}

// Set, by type
void
MixedShortRangeSelfScalingVarianceSetByType(
   ConstHandle2Mixed This,
   const XMLName type,
   ConstHandle2ConstShortRangeSelfScalingVariance shortRangeSelfScalingVariance
) {
   detail::setByMetadatum<CPP,CPPShortRangeSelfScalingVariance>
      (CLASSNAME, CLASSNAME+"ShortRangeSelfScalingVarianceSetByType",
       This, extract::shortRangeSelfScalingVariance, meta::type, type, shortRangeSelfScalingVariance);
}


// -----------------------------------------------------------------------------
// Child: sum
// -----------------------------------------------------------------------------

// Has
int
MixedSumHas(ConstHandle2ConstMixed This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SumHas", This, extract::sum);
}

// Clear
void
MixedSumClear(ConstHandle2Mixed This)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"SumClear", This, extract::sum);
}

// Size
size_t
MixedSumSize(ConstHandle2ConstMixed This)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"SumSize", This, extract::sum);
}

// Add
void
MixedSumAdd(ConstHandle2Mixed This, ConstHandle2ConstSum sum)
{
   detail::addToContainer<CPP,CPPSum>
      (CLASSNAME, CLASSNAME+"SumAdd", This, extract::sum, sum);
}

// Get, by index \in [0,size), const
Handle2ConstSum
MixedSumGetConst(ConstHandle2ConstMixed This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstSum>
      (CLASSNAME, CLASSNAME+"SumGetConst", This, extract::sum, index_);
}

// Get, by index \in [0,size), non-const
Handle2Sum
MixedSumGet(ConstHandle2Mixed This, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Sum>
      (CLASSNAME, CLASSNAME+"SumGet", This, extract::sum, index_);
}

// Set, by index \in [0,size)
void
MixedSumSet(
   ConstHandle2Mixed This,
   const size_t index_,
   ConstHandle2ConstSum sum
) {
   detail::setByIndex<CPP,CPPSum>
      (CLASSNAME, CLASSNAME+"SumSet", This, extract::sum, index_, sum);
}

// Has, by domainMin
int
MixedSumHasByDomainMin(
   ConstHandle2ConstMixed This,
   const Float64 domainMin
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SumHasByDomainMin",
       This, extract::sum, meta::domainMin, domainMin);
}

// Get, by domainMin, const
Handle2ConstSum
MixedSumGetByDomainMinConst(
   ConstHandle2ConstMixed This,
   const Float64 domainMin
) {
   return detail::getByMetadatum<CPP,Handle2ConstSum>
      (CLASSNAME, CLASSNAME+"SumGetByDomainMinConst",
       This, extract::sum, meta::domainMin, domainMin);
}

// Get, by domainMin, non-const
Handle2Sum
MixedSumGetByDomainMin(
   ConstHandle2Mixed This,
   const Float64 domainMin
) {
   return detail::getByMetadatum<CPP,Handle2Sum>
      (CLASSNAME, CLASSNAME+"SumGetByDomainMin",
       This, extract::sum, meta::domainMin, domainMin);
}

// Set, by domainMin
void
MixedSumSetByDomainMin(
   ConstHandle2Mixed This,
   const Float64 domainMin,
   ConstHandle2ConstSum sum
) {
   detail::setByMetadatum<CPP,CPPSum>
      (CLASSNAME, CLASSNAME+"SumSetByDomainMin",
       This, extract::sum, meta::domainMin, domainMin, sum);
}

// Has, by domainMax
int
MixedSumHasByDomainMax(
   ConstHandle2ConstMixed This,
   const Float64 domainMax
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SumHasByDomainMax",
       This, extract::sum, meta::domainMax, domainMax);
}

// Get, by domainMax, const
Handle2ConstSum
MixedSumGetByDomainMaxConst(
   ConstHandle2ConstMixed This,
   const Float64 domainMax
) {
   return detail::getByMetadatum<CPP,Handle2ConstSum>
      (CLASSNAME, CLASSNAME+"SumGetByDomainMaxConst",
       This, extract::sum, meta::domainMax, domainMax);
}

// Get, by domainMax, non-const
Handle2Sum
MixedSumGetByDomainMax(
   ConstHandle2Mixed This,
   const Float64 domainMax
) {
   return detail::getByMetadatum<CPP,Handle2Sum>
      (CLASSNAME, CLASSNAME+"SumGetByDomainMax",
       This, extract::sum, meta::domainMax, domainMax);
}

// Set, by domainMax
void
MixedSumSetByDomainMax(
   ConstHandle2Mixed This,
   const Float64 domainMax,
   ConstHandle2ConstSum sum
) {
   detail::setByMetadatum<CPP,CPPSum>
      (CLASSNAME, CLASSNAME+"SumSetByDomainMax",
       This, extract::sum, meta::domainMax, domainMax, sum);
}

// Has, by domainUnit
int
MixedSumHasByDomainUnit(
   ConstHandle2ConstMixed This,
   const XMLName domainUnit
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SumHasByDomainUnit",
       This, extract::sum, meta::domainUnit, domainUnit);
}

// Get, by domainUnit, const
Handle2ConstSum
MixedSumGetByDomainUnitConst(
   ConstHandle2ConstMixed This,
   const XMLName domainUnit
) {
   return detail::getByMetadatum<CPP,Handle2ConstSum>
      (CLASSNAME, CLASSNAME+"SumGetByDomainUnitConst",
       This, extract::sum, meta::domainUnit, domainUnit);
}

// Get, by domainUnit, non-const
Handle2Sum
MixedSumGetByDomainUnit(
   ConstHandle2Mixed This,
   const XMLName domainUnit
) {
   return detail::getByMetadatum<CPP,Handle2Sum>
      (CLASSNAME, CLASSNAME+"SumGetByDomainUnit",
       This, extract::sum, meta::domainUnit, domainUnit);
}

// Set, by domainUnit
void
MixedSumSetByDomainUnit(
   ConstHandle2Mixed This,
   const XMLName domainUnit,
   ConstHandle2ConstSum sum
) {
   detail::setByMetadatum<CPP,CPPSum>
      (CLASSNAME, CLASSNAME+"SumSetByDomainUnit",
       This, extract::sum, meta::domainUnit, domainUnit, sum);
}

// Has, by label
int
MixedSumHasByLabel(
   ConstHandle2ConstMixed This,
   const XMLName label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"SumHasByLabel",
       This, extract::sum, meta::label, label);
}

// Get, by label, const
Handle2ConstSum
MixedSumGetByLabelConst(
   ConstHandle2ConstMixed This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2ConstSum>
      (CLASSNAME, CLASSNAME+"SumGetByLabelConst",
       This, extract::sum, meta::label, label);
}

// Get, by label, non-const
Handle2Sum
MixedSumGetByLabel(
   ConstHandle2Mixed This,
   const XMLName label
) {
   return detail::getByMetadatum<CPP,Handle2Sum>
      (CLASSNAME, CLASSNAME+"SumGetByLabel",
       This, extract::sum, meta::label, label);
}

// Set, by label
void
MixedSumSetByLabel(
   ConstHandle2Mixed This,
   const XMLName label,
   ConstHandle2ConstSum sum
) {
   detail::setByMetadatum<CPP,CPPSum>
      (CLASSNAME, CLASSNAME+"SumSetByLabel",
       This, extract::sum, meta::label, label, sum);
}
