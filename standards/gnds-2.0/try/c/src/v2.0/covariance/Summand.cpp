
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/covariance/Summand.hpp"
#include "Summand.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = SummandClass;
using CPP = multigroup::Summand;

static const std::string CLASSNAME = "Summand";

namespace extract {
   static auto ENDF_MFMT = [](auto &obj) { return &obj.ENDF_MFMT; };
   static auto coefficient = [](auto &obj) { return &obj.coefficient; };
   static auto href = [](auto &obj) { return &obj.href; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstSummand
SummandDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Summand
SummandDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstSummand
SummandCreateConst(
   const XMLName ENDF_MFMT,
   const Float64 coefficient,
   const char *const href
) {
   ConstHandle2Summand handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      ENDF_MFMT,
      coefficient,
      href
   );
   return handle;
}

// Create, general
Handle2Summand
SummandCreate(
   const XMLName ENDF_MFMT,
   const Float64 coefficient,
   const char *const href
) {
   ConstHandle2Summand handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      ENDF_MFMT,
      coefficient,
      href
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
SummandAssign(ConstHandle2Summand This, ConstHandle2ConstSummand from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
SummandDelete(ConstHandle2ConstSummand This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
SummandRead(ConstHandle2Summand This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
SummandWrite(ConstHandle2ConstSummand This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
SummandPrint(ConstHandle2ConstSummand This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
SummandPrintXML(ConstHandle2ConstSummand This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
SummandPrintJSON(ConstHandle2ConstSummand This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: ENDF_MFMT
// -----------------------------------------------------------------------------

// Has
int
SummandENDFMFMTHas(ConstHandle2ConstSummand This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ENDFMFMTHas", This, extract::ENDF_MFMT);
}

// Get
// Returns by value
XMLName
SummandENDFMFMTGet(ConstHandle2ConstSummand This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ENDFMFMTGet", This, extract::ENDF_MFMT);
}

// Set
void
SummandENDFMFMTSet(ConstHandle2Summand This, const XMLName ENDF_MFMT)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ENDFMFMTSet", This, extract::ENDF_MFMT, ENDF_MFMT);
}


// -----------------------------------------------------------------------------
// Metadatum: coefficient
// -----------------------------------------------------------------------------

// Has
int
SummandCoefficientHas(ConstHandle2ConstSummand This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CoefficientHas", This, extract::coefficient);
}

// Get
// Returns by value
Float64
SummandCoefficientGet(ConstHandle2ConstSummand This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CoefficientGet", This, extract::coefficient);
}

// Set
void
SummandCoefficientSet(ConstHandle2Summand This, const Float64 coefficient)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CoefficientSet", This, extract::coefficient, coefficient);
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
SummandHrefHas(ConstHandle2ConstSummand This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
const char *
SummandHrefGet(ConstHandle2ConstSummand This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
SummandHrefSet(ConstHandle2Summand This, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}
