
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// ResonanceParameters is the basic handle type in this file. Example:
//    // Create a default ResonanceParameters object:
//    ResonanceParameters handle = ResonanceParametersDefault();
// Functions involving ResonanceParameters are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_RESONANCES_RESONANCEPARAMETERS
#define C_INTERFACE_TRY_V2_0_RESONANCES_RESONANCEPARAMETERS

#include "GNDStk.h"
#include "v2.0/unknownNamespace/Table.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ResonanceParametersClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ResonanceParameters
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ResonanceParametersClass *ResonanceParameters;

// --- Const-aware handles.
typedef const struct ResonanceParametersClass *const ConstHandle2ConstResonanceParameters;
typedef       struct ResonanceParametersClass *const ConstHandle2ResonanceParameters;
typedef const struct ResonanceParametersClass *      Handle2ConstResonanceParameters;
typedef       struct ResonanceParametersClass *      Handle2ResonanceParameters;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstResonanceParameters
ResonanceParametersDefaultConst();

// +++ Create, default
extern_c Handle2ResonanceParameters
ResonanceParametersDefault();

// --- Create, general, const
extern_c Handle2ConstResonanceParameters
ResonanceParametersCreateConst(
   ConstHandle2ConstTable table
);

// +++ Create, general
extern_c Handle2ResonanceParameters
ResonanceParametersCreate(
   ConstHandle2ConstTable table
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ResonanceParametersAssign(ConstHandle2ResonanceParameters This, ConstHandle2ConstResonanceParameters from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ResonanceParametersDelete(ConstHandle2ConstResonanceParameters This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ResonanceParametersRead(ConstHandle2ResonanceParameters This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ResonanceParametersWrite(ConstHandle2ConstResonanceParameters This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ResonanceParametersPrint(ConstHandle2ConstResonanceParameters This);

// +++ Print to standard output, as XML
extern_c int
ResonanceParametersPrintXML(ConstHandle2ConstResonanceParameters This);

// +++ Print to standard output, as JSON
extern_c int
ResonanceParametersPrintJSON(ConstHandle2ConstResonanceParameters This);


// -----------------------------------------------------------------------------
// Child: table
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ResonanceParametersTableHas(ConstHandle2ConstResonanceParameters This);

// --- Get, const
extern_c Handle2ConstTable
ResonanceParametersTableGetConst(ConstHandle2ConstResonanceParameters This);

// +++ Get, non-const
extern_c Handle2Table
ResonanceParametersTableGet(ConstHandle2ResonanceParameters This);

// +++ Set
extern_c void
ResonanceParametersTableSet(ConstHandle2ResonanceParameters This, ConstHandle2ConstTable table);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
