
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Channel is the basic handle type in this file. Example:
//    // Create a default Channel object:
//    Channel handle = ChannelDefault();
// Functions involving Channel are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_RESONANCES_CHANNEL
#define C_INTERFACE_TRY_V2_0_RESONANCES_CHANNEL

#include "GNDStk.h"
#include "v2.0/resonances/ExternalRMatrix.h"
#include "v2.0/resonances/ScatteringRadius.h"
#include "v2.0/resonances/HardSphereRadius.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ChannelClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Channel
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ChannelClass *Channel;

// --- Const-aware handles.
typedef const struct ChannelClass *const ConstHandle2ConstChannel;
typedef       struct ChannelClass *const ConstHandle2Channel;
typedef const struct ChannelClass *      Handle2ConstChannel;
typedef       struct ChannelClass *      Handle2Channel;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstChannel
ChannelDefaultConst();

// +++ Create, default
extern_c Handle2Channel
ChannelDefault();

// --- Create, general, const
extern_c Handle2ConstChannel
ChannelCreateConst(
   const XMLName label,
   const char *const resonanceReaction,
   const Integer32 L,
   const Fraction32 channelSpin,
   const Float64 boundaryConditionValue,
   const Integer32 columnIndex,
   ConstHandle2ConstExternalRMatrix externalRMatrix,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstHardSphereRadius hardSphereRadius
);

// +++ Create, general
extern_c Handle2Channel
ChannelCreate(
   const XMLName label,
   const char *const resonanceReaction,
   const Integer32 L,
   const Fraction32 channelSpin,
   const Float64 boundaryConditionValue,
   const Integer32 columnIndex,
   ConstHandle2ConstExternalRMatrix externalRMatrix,
   ConstHandle2ConstScatteringRadius scatteringRadius,
   ConstHandle2ConstHardSphereRadius hardSphereRadius
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ChannelAssign(ConstHandle2Channel This, ConstHandle2ConstChannel from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ChannelDelete(ConstHandle2ConstChannel This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ChannelRead(ConstHandle2Channel This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ChannelWrite(ConstHandle2ConstChannel This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ChannelPrint(ConstHandle2ConstChannel This);

// +++ Print to standard output, as XML
extern_c int
ChannelPrintXML(ConstHandle2ConstChannel This);

// +++ Print to standard output, as JSON
extern_c int
ChannelPrintJSON(ConstHandle2ConstChannel This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelLabelHas(ConstHandle2ConstChannel This);

// +++ Get
// +++ Returns by value
extern_c XMLName
ChannelLabelGet(ConstHandle2ConstChannel This);

// +++ Set
extern_c void
ChannelLabelSet(ConstHandle2Channel This, const XMLName label);


// -----------------------------------------------------------------------------
// Metadatum: resonanceReaction
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelResonanceReactionHas(ConstHandle2ConstChannel This);

// +++ Get
// +++ Returns by value
extern_c const char *
ChannelResonanceReactionGet(ConstHandle2ConstChannel This);

// +++ Set
extern_c void
ChannelResonanceReactionSet(ConstHandle2Channel This, const char *const resonanceReaction);


// -----------------------------------------------------------------------------
// Metadatum: L
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelLHas(ConstHandle2ConstChannel This);

// +++ Get
// +++ Returns by value
extern_c Integer32
ChannelLGet(ConstHandle2ConstChannel This);

// +++ Set
extern_c void
ChannelLSet(ConstHandle2Channel This, const Integer32 L);


// -----------------------------------------------------------------------------
// Metadatum: channelSpin
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelChannelSpinHas(ConstHandle2ConstChannel This);

// +++ Get
// +++ Returns by value
extern_c Fraction32
ChannelChannelSpinGet(ConstHandle2ConstChannel This);

// +++ Set
extern_c void
ChannelChannelSpinSet(ConstHandle2Channel This, const Fraction32 channelSpin);


// -----------------------------------------------------------------------------
// Metadatum: boundaryConditionValue
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelBoundaryConditionValueHas(ConstHandle2ConstChannel This);

// +++ Get
// +++ Returns by value
extern_c Float64
ChannelBoundaryConditionValueGet(ConstHandle2ConstChannel This);

// +++ Set
extern_c void
ChannelBoundaryConditionValueSet(ConstHandle2Channel This, const Float64 boundaryConditionValue);


// -----------------------------------------------------------------------------
// Metadatum: columnIndex
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelColumnIndexHas(ConstHandle2ConstChannel This);

// +++ Get
// +++ Returns by value
extern_c Integer32
ChannelColumnIndexGet(ConstHandle2ConstChannel This);

// +++ Set
extern_c void
ChannelColumnIndexSet(ConstHandle2Channel This, const Integer32 columnIndex);


// -----------------------------------------------------------------------------
// Child: externalRMatrix
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelExternalRMatrixHas(ConstHandle2ConstChannel This);

// --- Get, const
extern_c Handle2ConstExternalRMatrix
ChannelExternalRMatrixGetConst(ConstHandle2ConstChannel This);

// +++ Get, non-const
extern_c Handle2ExternalRMatrix
ChannelExternalRMatrixGet(ConstHandle2Channel This);

// +++ Set
extern_c void
ChannelExternalRMatrixSet(ConstHandle2Channel This, ConstHandle2ConstExternalRMatrix externalRMatrix);


// -----------------------------------------------------------------------------
// Child: scatteringRadius
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelScatteringRadiusHas(ConstHandle2ConstChannel This);

// --- Get, const
extern_c Handle2ConstScatteringRadius
ChannelScatteringRadiusGetConst(ConstHandle2ConstChannel This);

// +++ Get, non-const
extern_c Handle2ScatteringRadius
ChannelScatteringRadiusGet(ConstHandle2Channel This);

// +++ Set
extern_c void
ChannelScatteringRadiusSet(ConstHandle2Channel This, ConstHandle2ConstScatteringRadius scatteringRadius);


// -----------------------------------------------------------------------------
// Child: hardSphereRadius
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ChannelHardSphereRadiusHas(ConstHandle2ConstChannel This);

// --- Get, const
extern_c Handle2ConstHardSphereRadius
ChannelHardSphereRadiusGetConst(ConstHandle2ConstChannel This);

// +++ Get, non-const
extern_c Handle2HardSphereRadius
ChannelHardSphereRadiusGet(ConstHandle2Channel This);

// +++ Set
extern_c void
ChannelHardSphereRadiusSet(ConstHandle2Channel This, ConstHandle2ConstHardSphereRadius hardSphereRadius);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
