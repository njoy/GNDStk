
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/resonances/Resolved.hpp"
#include "Resolved.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = ResolvedClass;
using CPP = multigroup::Resolved;

static const std::string CLASSNAME = "Resolved";

namespace extract {
   static auto domainMin = [](auto &obj) { return &obj.domainMin; };
   static auto domainMax = [](auto &obj) { return &obj.domainMax; };
   static auto domainUnit = [](auto &obj) { return &obj.domainUnit; };
}

using CPPRMatrix = resonances::RMatrix;
using CPPBreitWigner = resonances::BreitWigner;
using CPPEnergyIntervals = resonances::EnergyIntervals;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstResolved
ResolvedDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Resolved
ResolvedDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstResolved
ResolvedCreateConst(
   const Float64 domainMin,
   const Float64 domainMax,
   const XMLName domainUnit,
) {
   ConstHandle2Resolved handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      domainMin,
      domainMax,
      domainUnit
   );
   return handle;
}

// Create, general
Handle2Resolved
ResolvedCreate(
   const Float64 domainMin,
   const Float64 domainMax,
   const XMLName domainUnit,
) {
   ConstHandle2Resolved handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      domainMin,
      domainMax,
      domainUnit
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ResolvedAssign(ConstHandle2Resolved This, ConstHandle2ConstResolved from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ResolvedDelete(ConstHandle2ConstResolved This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ResolvedRead(ConstHandle2Resolved This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ResolvedWrite(ConstHandle2ConstResolved This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ResolvedPrint(ConstHandle2ConstResolved This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ResolvedPrintXML(ConstHandle2ConstResolved This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ResolvedPrintJSON(ConstHandle2ConstResolved This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: domainMin
// -----------------------------------------------------------------------------

// Has
int
ResolvedDomainMinHas(ConstHandle2ConstResolved This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinHas", This, extract::domainMin);
}

// Get
// Returns by value
Float64
ResolvedDomainMinGet(ConstHandle2ConstResolved This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinGet", This, extract::domainMin);
}

// Set
void
ResolvedDomainMinSet(ConstHandle2Resolved This, const Float64 domainMin)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMinSet", This, extract::domainMin, domainMin);
}


// -----------------------------------------------------------------------------
// Metadatum: domainMax
// -----------------------------------------------------------------------------

// Has
int
ResolvedDomainMaxHas(ConstHandle2ConstResolved This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxHas", This, extract::domainMax);
}

// Get
// Returns by value
Float64
ResolvedDomainMaxGet(ConstHandle2ConstResolved This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxGet", This, extract::domainMax);
}

// Set
void
ResolvedDomainMaxSet(ConstHandle2Resolved This, const Float64 domainMax)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainMaxSet", This, extract::domainMax, domainMax);
}


// -----------------------------------------------------------------------------
// Metadatum: domainUnit
// -----------------------------------------------------------------------------

// Has
int
ResolvedDomainUnitHas(ConstHandle2ConstResolved This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DomainUnitHas", This, extract::domainUnit);
}

// Get
// Returns by value
XMLName
ResolvedDomainUnitGet(ConstHandle2ConstResolved This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"DomainUnitGet", This, extract::domainUnit);
}

// Set
void
ResolvedDomainUnitSet(ConstHandle2Resolved This, const XMLName domainUnit)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"DomainUnitSet", This, extract::domainUnit, domainUnit);
}
