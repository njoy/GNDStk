
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/transport/ReactionSuite.hpp"
#include "ReactionSuite.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = ReactionSuiteClass;
using CPP = multigroup::ReactionSuite;

static const std::string CLASSNAME = "ReactionSuite";

namespace extract {
   static auto evaluation = [](auto &obj) { return &obj.evaluation; };
   static auto format = [](auto &obj) { return &obj.format; };
   static auto projectile = [](auto &obj) { return &obj.projectile; };
   static auto projectileFrame = [](auto &obj) { return &obj.projectileFrame; };
   static auto target = [](auto &obj) { return &obj.target; };
   static auto interaction = [](auto &obj) { return &obj.interaction; };
   static auto externalFiles = [](auto &obj) { return &obj.externalFiles; };
   static auto styles = [](auto &obj) { return &obj.styles; };
   static auto PoPs = [](auto &obj) { return &obj.PoPs; };
   static auto resonances = [](auto &obj) { return &obj.resonances; };
   static auto reactions = [](auto &obj) { return &obj.reactions; };
   static auto orphanProducts = [](auto &obj) { return &obj.orphanProducts; };
   static auto sums = [](auto &obj) { return &obj.sums; };
   static auto fissionComponents = [](auto &obj) { return &obj.fissionComponents; };
   static auto productions = [](auto &obj) { return &obj.productions; };
   static auto incompleteReactions = [](auto &obj) { return &obj.incompleteReactions; };
   static auto applicationData = [](auto &obj) { return &obj.applicationData; };
}

using CPPExternalFiles = common::ExternalFiles;
using CPPStyles = styles::Styles;
using CPPPoPs = unknownNamespace::PoPs;
using CPPResonances = resonances::Resonances;
using CPPReactions = transport::Reactions;
using CPPOrphanProducts = transport::OrphanProducts;
using CPPSums = transport::Sums;
using CPPFissionComponents = fissionTransport::FissionComponents;
using CPPProductions = transport::Productions;
using CPPIncompleteReactions = transport::IncompleteReactions;
using CPPApplicationData = appData::ApplicationData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstReactionSuite
ReactionSuiteDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ReactionSuite
ReactionSuiteDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstReactionSuite
ReactionSuiteCreateConst(
   const XMLName evaluation,
   const XMLName format,
   const XMLName projectile,
   const enums::Frame projectileFrame,
   const XMLName target,
   const enums::Interaction interaction,
   ConstHandle2ConstExternalFiles externalFiles,
   ConstHandle2ConstStyles styles,
   ConstHandle2ConstPoPs PoPs,
   ConstHandle2ConstResonances resonances,
   ConstHandle2ConstReactions reactions,
   ConstHandle2ConstOrphanProducts orphanProducts,
   ConstHandle2ConstSums sums,
   ConstHandle2ConstFissionComponents fissionComponents,
   ConstHandle2ConstProductions productions,
   ConstHandle2ConstIncompleteReactions incompleteReactions,
   ConstHandle2ConstApplicationData applicationData
) {
   ConstHandle2ReactionSuite handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      evaluation,
      format,
      projectile,
      projectileFrame,
      target,
      interaction,
      detail::tocpp<CPPExternalFiles>(externalFiles),
      detail::tocpp<CPPStyles>(styles),
      detail::tocpp<CPPPoPs>(PoPs),
      detail::tocpp<CPPResonances>(resonances),
      detail::tocpp<CPPReactions>(reactions),
      detail::tocpp<CPPOrphanProducts>(orphanProducts),
      detail::tocpp<CPPSums>(sums),
      detail::tocpp<CPPFissionComponents>(fissionComponents),
      detail::tocpp<CPPProductions>(productions),
      detail::tocpp<CPPIncompleteReactions>(incompleteReactions),
      detail::tocpp<CPPApplicationData>(applicationData)
   );
   return handle;
}

// Create, general
Handle2ReactionSuite
ReactionSuiteCreate(
   const XMLName evaluation,
   const XMLName format,
   const XMLName projectile,
   const enums::Frame projectileFrame,
   const XMLName target,
   const enums::Interaction interaction,
   ConstHandle2ConstExternalFiles externalFiles,
   ConstHandle2ConstStyles styles,
   ConstHandle2ConstPoPs PoPs,
   ConstHandle2ConstResonances resonances,
   ConstHandle2ConstReactions reactions,
   ConstHandle2ConstOrphanProducts orphanProducts,
   ConstHandle2ConstSums sums,
   ConstHandle2ConstFissionComponents fissionComponents,
   ConstHandle2ConstProductions productions,
   ConstHandle2ConstIncompleteReactions incompleteReactions,
   ConstHandle2ConstApplicationData applicationData
) {
   ConstHandle2ReactionSuite handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      evaluation,
      format,
      projectile,
      projectileFrame,
      target,
      interaction,
      detail::tocpp<CPPExternalFiles>(externalFiles),
      detail::tocpp<CPPStyles>(styles),
      detail::tocpp<CPPPoPs>(PoPs),
      detail::tocpp<CPPResonances>(resonances),
      detail::tocpp<CPPReactions>(reactions),
      detail::tocpp<CPPOrphanProducts>(orphanProducts),
      detail::tocpp<CPPSums>(sums),
      detail::tocpp<CPPFissionComponents>(fissionComponents),
      detail::tocpp<CPPProductions>(productions),
      detail::tocpp<CPPIncompleteReactions>(incompleteReactions),
      detail::tocpp<CPPApplicationData>(applicationData)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ReactionSuiteAssign(ConstHandle2ReactionSuite This, ConstHandle2ConstReactionSuite from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ReactionSuiteDelete(ConstHandle2ConstReactionSuite This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ReactionSuiteRead(ConstHandle2ReactionSuite This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ReactionSuiteWrite(ConstHandle2ConstReactionSuite This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ReactionSuitePrint(ConstHandle2ConstReactionSuite This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ReactionSuitePrintXML(ConstHandle2ConstReactionSuite This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ReactionSuitePrintJSON(ConstHandle2ConstReactionSuite This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: evaluation
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteEvaluationHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluationHas", This, extract::evaluation);
}

// Get
// Returns by value
XMLName
ReactionSuiteEvaluationGet(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluationGet", This, extract::evaluation);
}

// Set
void
ReactionSuiteEvaluationSet(ConstHandle2ReactionSuite This, const XMLName evaluation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluationSet", This, extract::evaluation, evaluation);
}


// -----------------------------------------------------------------------------
// Metadatum: format
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteFormatHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FormatHas", This, extract::format);
}

// Get
// Returns by value
XMLName
ReactionSuiteFormatGet(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FormatGet", This, extract::format);
}

// Set
void
ReactionSuiteFormatSet(ConstHandle2ReactionSuite This, const XMLName format)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FormatSet", This, extract::format, format);
}


// -----------------------------------------------------------------------------
// Metadatum: projectile
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteProjectileHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileHas", This, extract::projectile);
}

// Get
// Returns by value
XMLName
ReactionSuiteProjectileGet(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileGet", This, extract::projectile);
}

// Set
void
ReactionSuiteProjectileSet(ConstHandle2ReactionSuite This, const XMLName projectile)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileSet", This, extract::projectile, projectile);
}


// -----------------------------------------------------------------------------
// Metadatum: projectileFrame
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteProjectileFrameHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileFrameHas", This, extract::projectileFrame);
}

// Get
// Returns by value
enums::Frame
ReactionSuiteProjectileFrameGet(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileFrameGet", This, extract::projectileFrame);
}

// Set
void
ReactionSuiteProjectileFrameSet(ConstHandle2ReactionSuite This, const enums::Frame projectileFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileFrameSet", This, extract::projectileFrame, projectileFrame);
}


// -----------------------------------------------------------------------------
// Metadatum: target
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteTargetHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TargetHas", This, extract::target);
}

// Get
// Returns by value
XMLName
ReactionSuiteTargetGet(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"TargetGet", This, extract::target);
}

// Set
void
ReactionSuiteTargetSet(ConstHandle2ReactionSuite This, const XMLName target)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"TargetSet", This, extract::target, target);
}


// -----------------------------------------------------------------------------
// Metadatum: interaction
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteInteractionHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InteractionHas", This, extract::interaction);
}

// Get
// Returns by value
enums::Interaction
ReactionSuiteInteractionGet(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"InteractionGet", This, extract::interaction);
}

// Set
void
ReactionSuiteInteractionSet(ConstHandle2ReactionSuite This, const enums::Interaction interaction)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"InteractionSet", This, extract::interaction, interaction);
}


// -----------------------------------------------------------------------------
// Child: externalFiles
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteExternalFilesHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ExternalFilesHas", This, extract::externalFiles);
}

// Get, const
Handle2ConstExternalFiles
ReactionSuiteExternalFilesGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstExternalFiles>
      (CLASSNAME, CLASSNAME+"ExternalFilesGetConst", This, extract::externalFiles);
}

// Get, non-const
Handle2ExternalFiles
ReactionSuiteExternalFilesGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2ExternalFiles>
      (CLASSNAME, CLASSNAME+"ExternalFilesGet", This, extract::externalFiles);
}

// Set
void
ReactionSuiteExternalFilesSet(ConstHandle2ReactionSuite This, ConstHandle2ConstExternalFiles externalFiles)
{
   detail::setField<CPP,CPPExternalFiles>
      (CLASSNAME, CLASSNAME+"ExternalFilesSet", This, extract::externalFiles, externalFiles);
}


// -----------------------------------------------------------------------------
// Child: styles
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteStylesHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StylesHas", This, extract::styles);
}

// Get, const
Handle2ConstStyles
ReactionSuiteStylesGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstStyles>
      (CLASSNAME, CLASSNAME+"StylesGetConst", This, extract::styles);
}

// Get, non-const
Handle2Styles
ReactionSuiteStylesGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2Styles>
      (CLASSNAME, CLASSNAME+"StylesGet", This, extract::styles);
}

// Set
void
ReactionSuiteStylesSet(ConstHandle2ReactionSuite This, ConstHandle2ConstStyles styles)
{
   detail::setField<CPP,CPPStyles>
      (CLASSNAME, CLASSNAME+"StylesSet", This, extract::styles, styles);
}


// -----------------------------------------------------------------------------
// Child: PoPs
// -----------------------------------------------------------------------------

// Has
int
ReactionSuitePoPsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PoPsHas", This, extract::PoPs);
}

// Get, const
Handle2ConstPoPs
ReactionSuitePoPsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstPoPs>
      (CLASSNAME, CLASSNAME+"PoPsGetConst", This, extract::PoPs);
}

// Get, non-const
Handle2PoPs
ReactionSuitePoPsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2PoPs>
      (CLASSNAME, CLASSNAME+"PoPsGet", This, extract::PoPs);
}

// Set
void
ReactionSuitePoPsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstPoPs PoPs)
{
   detail::setField<CPP,CPPPoPs>
      (CLASSNAME, CLASSNAME+"PoPsSet", This, extract::PoPs, PoPs);
}


// -----------------------------------------------------------------------------
// Child: resonances
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteResonancesHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResonancesHas", This, extract::resonances);
}

// Get, const
Handle2ConstResonances
ReactionSuiteResonancesGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstResonances>
      (CLASSNAME, CLASSNAME+"ResonancesGetConst", This, extract::resonances);
}

// Get, non-const
Handle2Resonances
ReactionSuiteResonancesGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2Resonances>
      (CLASSNAME, CLASSNAME+"ResonancesGet", This, extract::resonances);
}

// Set
void
ReactionSuiteResonancesSet(ConstHandle2ReactionSuite This, ConstHandle2ConstResonances resonances)
{
   detail::setField<CPP,CPPResonances>
      (CLASSNAME, CLASSNAME+"ResonancesSet", This, extract::resonances, resonances);
}


// -----------------------------------------------------------------------------
// Child: reactions
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteReactionsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ReactionsHas", This, extract::reactions);
}

// Get, const
Handle2ConstReactions
ReactionSuiteReactionsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstReactions>
      (CLASSNAME, CLASSNAME+"ReactionsGetConst", This, extract::reactions);
}

// Get, non-const
Handle2Reactions
ReactionSuiteReactionsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2Reactions>
      (CLASSNAME, CLASSNAME+"ReactionsGet", This, extract::reactions);
}

// Set
void
ReactionSuiteReactionsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstReactions reactions)
{
   detail::setField<CPP,CPPReactions>
      (CLASSNAME, CLASSNAME+"ReactionsSet", This, extract::reactions, reactions);
}


// -----------------------------------------------------------------------------
// Child: orphanProducts
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteOrphanProductsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OrphanProductsHas", This, extract::orphanProducts);
}

// Get, const
Handle2ConstOrphanProducts
ReactionSuiteOrphanProductsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstOrphanProducts>
      (CLASSNAME, CLASSNAME+"OrphanProductsGetConst", This, extract::orphanProducts);
}

// Get, non-const
Handle2OrphanProducts
ReactionSuiteOrphanProductsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2OrphanProducts>
      (CLASSNAME, CLASSNAME+"OrphanProductsGet", This, extract::orphanProducts);
}

// Set
void
ReactionSuiteOrphanProductsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstOrphanProducts orphanProducts)
{
   detail::setField<CPP,CPPOrphanProducts>
      (CLASSNAME, CLASSNAME+"OrphanProductsSet", This, extract::orphanProducts, orphanProducts);
}


// -----------------------------------------------------------------------------
// Child: sums
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteSumsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SumsHas", This, extract::sums);
}

// Get, const
Handle2ConstSums
ReactionSuiteSumsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstSums>
      (CLASSNAME, CLASSNAME+"SumsGetConst", This, extract::sums);
}

// Get, non-const
Handle2Sums
ReactionSuiteSumsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2Sums>
      (CLASSNAME, CLASSNAME+"SumsGet", This, extract::sums);
}

// Set
void
ReactionSuiteSumsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstSums sums)
{
   detail::setField<CPP,CPPSums>
      (CLASSNAME, CLASSNAME+"SumsSet", This, extract::sums, sums);
}


// -----------------------------------------------------------------------------
// Child: fissionComponents
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteFissionComponentsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FissionComponentsHas", This, extract::fissionComponents);
}

// Get, const
Handle2ConstFissionComponents
ReactionSuiteFissionComponentsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstFissionComponents>
      (CLASSNAME, CLASSNAME+"FissionComponentsGetConst", This, extract::fissionComponents);
}

// Get, non-const
Handle2FissionComponents
ReactionSuiteFissionComponentsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2FissionComponents>
      (CLASSNAME, CLASSNAME+"FissionComponentsGet", This, extract::fissionComponents);
}

// Set
void
ReactionSuiteFissionComponentsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstFissionComponents fissionComponents)
{
   detail::setField<CPP,CPPFissionComponents>
      (CLASSNAME, CLASSNAME+"FissionComponentsSet", This, extract::fissionComponents, fissionComponents);
}


// -----------------------------------------------------------------------------
// Child: productions
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteProductionsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductionsHas", This, extract::productions);
}

// Get, const
Handle2ConstProductions
ReactionSuiteProductionsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstProductions>
      (CLASSNAME, CLASSNAME+"ProductionsGetConst", This, extract::productions);
}

// Get, non-const
Handle2Productions
ReactionSuiteProductionsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2Productions>
      (CLASSNAME, CLASSNAME+"ProductionsGet", This, extract::productions);
}

// Set
void
ReactionSuiteProductionsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstProductions productions)
{
   detail::setField<CPP,CPPProductions>
      (CLASSNAME, CLASSNAME+"ProductionsSet", This, extract::productions, productions);
}


// -----------------------------------------------------------------------------
// Child: incompleteReactions
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteIncompleteReactionsHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IncompleteReactionsHas", This, extract::incompleteReactions);
}

// Get, const
Handle2ConstIncompleteReactions
ReactionSuiteIncompleteReactionsGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstIncompleteReactions>
      (CLASSNAME, CLASSNAME+"IncompleteReactionsGetConst", This, extract::incompleteReactions);
}

// Get, non-const
Handle2IncompleteReactions
ReactionSuiteIncompleteReactionsGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2IncompleteReactions>
      (CLASSNAME, CLASSNAME+"IncompleteReactionsGet", This, extract::incompleteReactions);
}

// Set
void
ReactionSuiteIncompleteReactionsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstIncompleteReactions incompleteReactions)
{
   detail::setField<CPP,CPPIncompleteReactions>
      (CLASSNAME, CLASSNAME+"IncompleteReactionsSet", This, extract::incompleteReactions, incompleteReactions);
}


// -----------------------------------------------------------------------------
// Child: applicationData
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteApplicationDataHas(ConstHandle2ConstReactionSuite This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ApplicationDataHas", This, extract::applicationData);
}

// Get, const
Handle2ConstApplicationData
ReactionSuiteApplicationDataGetConst(ConstHandle2ConstReactionSuite This)
{
   return detail::getField<CPP,Handle2ConstApplicationData>
      (CLASSNAME, CLASSNAME+"ApplicationDataGetConst", This, extract::applicationData);
}

// Get, non-const
Handle2ApplicationData
ReactionSuiteApplicationDataGet(ConstHandle2ReactionSuite This)
{
   return detail::getField<CPP,Handle2ApplicationData>
      (CLASSNAME, CLASSNAME+"ApplicationDataGet", This, extract::applicationData);
}

// Set
void
ReactionSuiteApplicationDataSet(ConstHandle2ReactionSuite This, ConstHandle2ConstApplicationData applicationData)
{
   detail::setField<CPP,CPPApplicationData>
      (CLASSNAME, CLASSNAME+"ApplicationDataSet", This, extract::applicationData, applicationData);
}
