
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/map/Import.hpp"
#include "Import.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = ImportClass;
using CPP = multigroup::Import;

static const std::string CLASSNAME = "Import";

namespace extract {
   static auto path = [](auto &obj) { return &obj.path; };
   static auto checksum = [](auto &obj) { return &obj.checksum; };
   static auto algorithm = [](auto &obj) { return &obj.algorithm; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstImport
ImportDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Import
ImportDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstImport
ImportCreateConst(
   const XMLName path,
   const checksum checksum,
   const algorithm algorithm
) {
   ConstHandle2Import handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      path,
      checksum,
      algorithm
   );
   return handle;
}

// Create, general
Handle2Import
ImportCreate(
   const XMLName path,
   const checksum checksum,
   const algorithm algorithm
) {
   ConstHandle2Import handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      path,
      checksum,
      algorithm
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ImportAssign(ConstHandle2Import This, ConstHandle2ConstImport from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ImportDelete(ConstHandle2ConstImport This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ImportRead(ConstHandle2Import This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ImportWrite(ConstHandle2ConstImport This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
ImportPrint(ConstHandle2ConstImport This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
ImportPrintXML(ConstHandle2ConstImport This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
ImportPrintJSON(ConstHandle2ConstImport This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: path
// -----------------------------------------------------------------------------

// Has
int
ImportPathHas(ConstHandle2ConstImport This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PathHas", This, extract::path);
}

// Get
// Returns by value
XMLName
ImportPathGet(ConstHandle2ConstImport This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PathGet", This, extract::path);
}

// Set
void
ImportPathSet(ConstHandle2Import This, const XMLName path)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PathSet", This, extract::path, path);
}


// -----------------------------------------------------------------------------
// Metadatum: checksum
// -----------------------------------------------------------------------------

// Has
int
ImportChecksumHas(ConstHandle2ConstImport This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumHas", This, extract::checksum);
}

// Get
// Returns by value
checksum
ImportChecksumGet(ConstHandle2ConstImport This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumGet", This, extract::checksum);
}

// Set
void
ImportChecksumSet(ConstHandle2Import This, const checksum checksum)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ChecksumSet", This, extract::checksum, checksum);
}


// -----------------------------------------------------------------------------
// Metadatum: algorithm
// -----------------------------------------------------------------------------

// Has
int
ImportAlgorithmHas(ConstHandle2ConstImport This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmHas", This, extract::algorithm);
}

// Get
// Returns by value
algorithm
ImportAlgorithmGet(ConstHandle2ConstImport This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmGet", This, extract::algorithm);
}

// Set
void
ImportAlgorithmSet(ConstHandle2Import This, const algorithm algorithm)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"AlgorithmSet", This, extract::algorithm, algorithm);
}
