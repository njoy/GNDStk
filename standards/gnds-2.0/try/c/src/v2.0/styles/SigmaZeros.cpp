
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/styles/SigmaZeros.hpp"
#include "SigmaZeros.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = SigmaZerosClass;
using CPP = multigroup::SigmaZeros;

static const std::string CLASSNAME = "SigmaZeros";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto values = [](auto &obj) { return &obj.values; };
}

using CPPValues = unknownNamespace::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstSigmaZeros
SigmaZerosDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2SigmaZeros
SigmaZerosDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstSigmaZeros
SigmaZerosCreateConst(
   const XMLName label,
   ConstHandle2ConstValues values
) {
   ConstHandle2SigmaZeros handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Create, general
Handle2SigmaZeros
SigmaZerosCreate(
   const XMLName label,
   ConstHandle2ConstValues values
) {
   ConstHandle2SigmaZeros handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
SigmaZerosAssign(ConstHandle2SigmaZeros This, ConstHandle2ConstSigmaZeros from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
SigmaZerosDelete(ConstHandle2ConstSigmaZeros This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
SigmaZerosRead(ConstHandle2SigmaZeros This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
SigmaZerosWrite(ConstHandle2ConstSigmaZeros This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
SigmaZerosPrint(ConstHandle2ConstSigmaZeros This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
SigmaZerosPrintXML(ConstHandle2ConstSigmaZeros This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
SigmaZerosPrintJSON(ConstHandle2ConstSigmaZeros This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
SigmaZerosLabelHas(ConstHandle2ConstSigmaZeros This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
SigmaZerosLabelGet(ConstHandle2ConstSigmaZeros This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
SigmaZerosLabelSet(ConstHandle2SigmaZeros This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
SigmaZerosValuesHas(ConstHandle2ConstSigmaZeros This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", This, extract::values);
}

// Get, const
Handle2ConstValues
SigmaZerosValuesGetConst(ConstHandle2ConstSigmaZeros This)
{
   return detail::getField<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", This, extract::values);
}

// Get, non-const
Handle2Values
SigmaZerosValuesGet(ConstHandle2SigmaZeros This)
{
   return detail::getField<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", This, extract::values);
}

// Set
void
SigmaZerosValuesSet(ConstHandle2SigmaZeros This, ConstHandle2ConstValues values)
{
   detail::setField<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", This, extract::values, values);
}
