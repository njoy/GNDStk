
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// InverseSpeed is the basic handle type in this file. Example:
//    // Create a default InverseSpeed object:
//    InverseSpeed handle = InverseSpeedDefault();
// Functions involving InverseSpeed are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_TRY_V2_0_STYLES_INVERSESPEED
#define C_INTERFACE_TRY_V2_0_STYLES_INVERSESPEED

#include "GNDStk.h"
#include "v2.0/containers/Gridded1d.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct InverseSpeedClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ InverseSpeed
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct InverseSpeedClass *InverseSpeed;

// --- Const-aware handles.
typedef const struct InverseSpeedClass *const ConstHandle2ConstInverseSpeed;
typedef       struct InverseSpeedClass *const ConstHandle2InverseSpeed;
typedef const struct InverseSpeedClass *      Handle2ConstInverseSpeed;
typedef       struct InverseSpeedClass *      Handle2InverseSpeed;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstInverseSpeed
InverseSpeedDefaultConst();

// +++ Create, default
extern_c Handle2InverseSpeed
InverseSpeedDefault();

// --- Create, general, const
extern_c Handle2ConstInverseSpeed
InverseSpeedCreateConst(
   const XMLName label,
   ConstHandle2ConstGridded1d gridded1d
);

// +++ Create, general
extern_c Handle2InverseSpeed
InverseSpeedCreate(
   const XMLName label,
   ConstHandle2ConstGridded1d gridded1d
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
InverseSpeedAssign(ConstHandle2InverseSpeed This, ConstHandle2ConstInverseSpeed from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
InverseSpeedDelete(ConstHandle2ConstInverseSpeed This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
InverseSpeedRead(ConstHandle2InverseSpeed This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
InverseSpeedWrite(ConstHandle2ConstInverseSpeed This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
InverseSpeedPrint(ConstHandle2ConstInverseSpeed This);

// +++ Print to standard output, as XML
extern_c int
InverseSpeedPrintXML(ConstHandle2ConstInverseSpeed This);

// +++ Print to standard output, as JSON
extern_c int
InverseSpeedPrintJSON(ConstHandle2ConstInverseSpeed This);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
InverseSpeedLabelHas(ConstHandle2ConstInverseSpeed This);

// +++ Get
// +++ Returns by value
extern_c XMLName
InverseSpeedLabelGet(ConstHandle2ConstInverseSpeed This);

// +++ Set
extern_c void
InverseSpeedLabelSet(ConstHandle2InverseSpeed This, const XMLName label);


// -----------------------------------------------------------------------------
// Child: gridded1d
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
InverseSpeedGridded1dHas(ConstHandle2ConstInverseSpeed This);

// --- Get, const
extern_c Handle2ConstGridded1d
InverseSpeedGridded1dGetConst(ConstHandle2ConstInverseSpeed This);

// +++ Get, non-const
extern_c Handle2Gridded1d
InverseSpeedGridded1dGet(ConstHandle2InverseSpeed This);

// +++ Set
extern_c void
InverseSpeedGridded1dSet(ConstHandle2InverseSpeed This, ConstHandle2ConstGridded1d gridded1d);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
