
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/atomic/CoherentPhotonScattering.hpp"
#include "CoherentPhotonScattering.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = CoherentPhotonScatteringClass;
using CPP = multigroup::CoherentPhotonScattering;

static const std::string CLASSNAME = "CoherentPhotonScattering";

namespace extract {
   static auto href = [](auto &obj) { return &obj.href; };
   static auto label = [](auto &obj) { return &obj.label; };
   static auto pid = [](auto &obj) { return &obj.pid; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto formFactor = [](auto &obj) { return &obj.formFactor; };
   static auto realAnomalousFactor = [](auto &obj) { return &obj.realAnomalousFactor; };
   static auto imaginaryAnomalousFactor = [](auto &obj) { return &obj.imaginaryAnomalousFactor; };
}

using CPPFormFactor = atomic::FormFactor;
using CPPRealAnomalousFactor = atomic::RealAnomalousFactor;
using CPPImaginaryAnomalousFactor = atomic::ImaginaryAnomalousFactor;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstCoherentPhotonScattering
CoherentPhotonScatteringDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2CoherentPhotonScattering
CoherentPhotonScatteringDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstCoherentPhotonScattering
CoherentPhotonScatteringCreateConst(
   const char *const href,
   const XMLName label,
   const XMLName pid,
   const enums::Frame productFrame,
   ConstHandle2ConstFormFactor formFactor,
   ConstHandle2ConstRealAnomalousFactor realAnomalousFactor,
   ConstHandle2ConstImaginaryAnomalousFactor imaginaryAnomalousFactor
) {
   ConstHandle2CoherentPhotonScattering handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      href,
      label,
      pid,
      productFrame,
      detail::tocpp<CPPFormFactor>(formFactor),
      detail::tocpp<CPPRealAnomalousFactor>(realAnomalousFactor),
      detail::tocpp<CPPImaginaryAnomalousFactor>(imaginaryAnomalousFactor)
   );
   return handle;
}

// Create, general
Handle2CoherentPhotonScattering
CoherentPhotonScatteringCreate(
   const char *const href,
   const XMLName label,
   const XMLName pid,
   const enums::Frame productFrame,
   ConstHandle2ConstFormFactor formFactor,
   ConstHandle2ConstRealAnomalousFactor realAnomalousFactor,
   ConstHandle2ConstImaginaryAnomalousFactor imaginaryAnomalousFactor
) {
   ConstHandle2CoherentPhotonScattering handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      href,
      label,
      pid,
      productFrame,
      detail::tocpp<CPPFormFactor>(formFactor),
      detail::tocpp<CPPRealAnomalousFactor>(realAnomalousFactor),
      detail::tocpp<CPPImaginaryAnomalousFactor>(imaginaryAnomalousFactor)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
CoherentPhotonScatteringAssign(ConstHandle2CoherentPhotonScattering This, ConstHandle2ConstCoherentPhotonScattering from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
CoherentPhotonScatteringDelete(ConstHandle2ConstCoherentPhotonScattering This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
CoherentPhotonScatteringRead(ConstHandle2CoherentPhotonScattering This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
CoherentPhotonScatteringWrite(ConstHandle2ConstCoherentPhotonScattering This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
CoherentPhotonScatteringPrint(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
CoherentPhotonScatteringPrintXML(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
CoherentPhotonScatteringPrintJSON(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringHrefHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", This, extract::href);
}

// Get
// Returns by value
const char *
CoherentPhotonScatteringHrefGet(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", This, extract::href);
}

// Set
void
CoherentPhotonScatteringHrefSet(ConstHandle2CoherentPhotonScattering This, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", This, extract::href, href);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringLabelHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", This, extract::label);
}

// Get
// Returns by value
XMLName
CoherentPhotonScatteringLabelGet(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", This, extract::label);
}

// Set
void
CoherentPhotonScatteringLabelSet(ConstHandle2CoherentPhotonScattering This, const XMLName label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", This, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringPidHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PidHas", This, extract::pid);
}

// Get
// Returns by value
XMLName
CoherentPhotonScatteringPidGet(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PidGet", This, extract::pid);
}

// Set
void
CoherentPhotonScatteringPidSet(ConstHandle2CoherentPhotonScattering This, const XMLName pid)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PidSet", This, extract::pid, pid);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringProductFrameHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", This, extract::productFrame);
}

// Get
// Returns by value
enums::Frame
CoherentPhotonScatteringProductFrameGet(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", This, extract::productFrame);
}

// Set
void
CoherentPhotonScatteringProductFrameSet(ConstHandle2CoherentPhotonScattering This, const enums::Frame productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", This, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: formFactor
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringFormFactorHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FormFactorHas", This, extract::formFactor);
}

// Get, const
Handle2ConstFormFactor
CoherentPhotonScatteringFormFactorGetConst(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP,Handle2ConstFormFactor>
      (CLASSNAME, CLASSNAME+"FormFactorGetConst", This, extract::formFactor);
}

// Get, non-const
Handle2FormFactor
CoherentPhotonScatteringFormFactorGet(ConstHandle2CoherentPhotonScattering This)
{
   return detail::getField<CPP,Handle2FormFactor>
      (CLASSNAME, CLASSNAME+"FormFactorGet", This, extract::formFactor);
}

// Set
void
CoherentPhotonScatteringFormFactorSet(ConstHandle2CoherentPhotonScattering This, ConstHandle2ConstFormFactor formFactor)
{
   detail::setField<CPP,CPPFormFactor>
      (CLASSNAME, CLASSNAME+"FormFactorSet", This, extract::formFactor, formFactor);
}


// -----------------------------------------------------------------------------
// Child: realAnomalousFactor
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringRealAnomalousFactorHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"RealAnomalousFactorHas", This, extract::realAnomalousFactor);
}

// Get, const
Handle2ConstRealAnomalousFactor
CoherentPhotonScatteringRealAnomalousFactorGetConst(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP,Handle2ConstRealAnomalousFactor>
      (CLASSNAME, CLASSNAME+"RealAnomalousFactorGetConst", This, extract::realAnomalousFactor);
}

// Get, non-const
Handle2RealAnomalousFactor
CoherentPhotonScatteringRealAnomalousFactorGet(ConstHandle2CoherentPhotonScattering This)
{
   return detail::getField<CPP,Handle2RealAnomalousFactor>
      (CLASSNAME, CLASSNAME+"RealAnomalousFactorGet", This, extract::realAnomalousFactor);
}

// Set
void
CoherentPhotonScatteringRealAnomalousFactorSet(ConstHandle2CoherentPhotonScattering This, ConstHandle2ConstRealAnomalousFactor realAnomalousFactor)
{
   detail::setField<CPP,CPPRealAnomalousFactor>
      (CLASSNAME, CLASSNAME+"RealAnomalousFactorSet", This, extract::realAnomalousFactor, realAnomalousFactor);
}


// -----------------------------------------------------------------------------
// Child: imaginaryAnomalousFactor
// -----------------------------------------------------------------------------

// Has
int
CoherentPhotonScatteringImaginaryAnomalousFactorHas(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ImaginaryAnomalousFactorHas", This, extract::imaginaryAnomalousFactor);
}

// Get, const
Handle2ConstImaginaryAnomalousFactor
CoherentPhotonScatteringImaginaryAnomalousFactorGetConst(ConstHandle2ConstCoherentPhotonScattering This)
{
   return detail::getField<CPP,Handle2ConstImaginaryAnomalousFactor>
      (CLASSNAME, CLASSNAME+"ImaginaryAnomalousFactorGetConst", This, extract::imaginaryAnomalousFactor);
}

// Get, non-const
Handle2ImaginaryAnomalousFactor
CoherentPhotonScatteringImaginaryAnomalousFactorGet(ConstHandle2CoherentPhotonScattering This)
{
   return detail::getField<CPP,Handle2ImaginaryAnomalousFactor>
      (CLASSNAME, CLASSNAME+"ImaginaryAnomalousFactorGet", This, extract::imaginaryAnomalousFactor);
}

// Set
void
CoherentPhotonScatteringImaginaryAnomalousFactorSet(ConstHandle2CoherentPhotonScattering This, ConstHandle2ConstImaginaryAnomalousFactor imaginaryAnomalousFactor)
{
   detail::setField<CPP,CPPImaginaryAnomalousFactor>
      (CLASSNAME, CLASSNAME+"ImaginaryAnomalousFactorSet", This, extract::imaginaryAnomalousFactor, imaginaryAnomalousFactor);
}
