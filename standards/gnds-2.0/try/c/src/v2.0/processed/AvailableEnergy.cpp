
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "try/v2_0/processed/AvailableEnergy.hpp"
#include "AvailableEnergy.h"

using namespace njoy::GNDStk;
using namespace try::v2_0;

using C = AvailableEnergyClass;
using CPP = multigroup::AvailableEnergy;

static const std::string CLASSNAME = "AvailableEnergy";

namespace extract {
   static auto XYs1d = [](auto &obj) { return &obj.XYs1d; };
   static auto gridded1d = [](auto &obj) { return &obj.gridded1d; };
}

using CPPXYs1d = containers::XYs1d;
using CPPGridded1d = containers::Gridded1d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstAvailableEnergy
AvailableEnergyDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2AvailableEnergy
AvailableEnergyDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstAvailableEnergy
AvailableEnergyCreateConst(
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstGridded1d gridded1d
) {
   ConstHandle2AvailableEnergy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPXYs1d>(XYs1d),
      detail::tocpp<CPPGridded1d>(gridded1d)
   );
   return handle;
}

// Create, general
Handle2AvailableEnergy
AvailableEnergyCreate(
   ConstHandle2ConstXYs1d XYs1d,
   ConstHandle2ConstGridded1d gridded1d
) {
   ConstHandle2AvailableEnergy handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPXYs1d>(XYs1d),
      detail::tocpp<CPPGridded1d>(gridded1d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
AvailableEnergyAssign(ConstHandle2AvailableEnergy This, ConstHandle2ConstAvailableEnergy from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", This, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
AvailableEnergyDelete(ConstHandle2ConstAvailableEnergy This)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", This);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
AvailableEnergyRead(ConstHandle2AvailableEnergy This, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", This, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
AvailableEnergyWrite(ConstHandle2ConstAvailableEnergy This, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", This, filename);
}

// Print to standard output, in our prettyprinting format
int
AvailableEnergyPrint(ConstHandle2ConstAvailableEnergy This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", This);
}

// Print to standard output, as XML
int
AvailableEnergyPrintXML(ConstHandle2ConstAvailableEnergy This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", This, "XML");
}

// Print to standard output, as JSON
int
AvailableEnergyPrintJSON(ConstHandle2ConstAvailableEnergy This)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", This, "JSON");
}


// -----------------------------------------------------------------------------
// Child: XYs1d
// -----------------------------------------------------------------------------

// Has
int
AvailableEnergyXYs1dHas(ConstHandle2ConstAvailableEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHas", This, extract::XYs1d);
}

// Get, const
Handle2ConstXYs1d
AvailableEnergyXYs1dGetConst(ConstHandle2ConstAvailableEnergy This)
{
   return detail::getField<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetConst", This, extract::XYs1d);
}

// Get, non-const
Handle2XYs1d
AvailableEnergyXYs1dGet(ConstHandle2AvailableEnergy This)
{
   return detail::getField<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGet", This, extract::XYs1d);
}

// Set
void
AvailableEnergyXYs1dSet(ConstHandle2AvailableEnergy This, ConstHandle2ConstXYs1d XYs1d)
{
   detail::setField<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSet", This, extract::XYs1d, XYs1d);
}


// -----------------------------------------------------------------------------
// Child: gridded1d
// -----------------------------------------------------------------------------

// Has
int
AvailableEnergyGridded1dHas(ConstHandle2ConstAvailableEnergy This)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Gridded1dHas", This, extract::gridded1d);
}

// Get, const
Handle2ConstGridded1d
AvailableEnergyGridded1dGetConst(ConstHandle2ConstAvailableEnergy This)
{
   return detail::getField<CPP,Handle2ConstGridded1d>
      (CLASSNAME, CLASSNAME+"Gridded1dGetConst", This, extract::gridded1d);
}

// Get, non-const
Handle2Gridded1d
AvailableEnergyGridded1dGet(ConstHandle2AvailableEnergy This)
{
   return detail::getField<CPP,Handle2Gridded1d>
      (CLASSNAME, CLASSNAME+"Gridded1dGet", This, extract::gridded1d);
}

// Set
void
AvailableEnergyGridded1dSet(ConstHandle2AvailableEnergy This, ConstHandle2ConstGridded1d gridded1d)
{
   detail::setField<CPP,CPPGridded1d>
      (CLASSNAME, CLASSNAME+"Gridded1dSet", This, extract::gridded1d, gridded1d);
}
