
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// ProjectileEnergyDomain is the basic handle type in this file. Example:
//    // Create a default ProjectileEnergyDomain object:
//    ProjectileEnergyDomain handle = ProjectileEnergyDomainDefault();
// Functions involving ProjectileEnergyDomain are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_ALPHA_V2_0_GENERAL_PROJECTILEENERGYDOMAIN
#define C_INTERFACE_ALPHA_V2_0_GENERAL_PROJECTILEENERGYDOMAIN

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ProjectileEnergyDomainClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ProjectileEnergyDomain
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ProjectileEnergyDomainClass *ProjectileEnergyDomain;

// --- Const-aware handles.
typedef const struct ProjectileEnergyDomainClass *const ConstHandle2ConstProjectileEnergyDomain;
typedef       struct ProjectileEnergyDomainClass *const ConstHandle2ProjectileEnergyDomain;
typedef const struct ProjectileEnergyDomainClass *      Handle2ConstProjectileEnergyDomain;
typedef       struct ProjectileEnergyDomainClass *      Handle2ProjectileEnergyDomain;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstProjectileEnergyDomain
ProjectileEnergyDomainDefaultConst();

// +++ Create, default
extern_c Handle2ProjectileEnergyDomain
ProjectileEnergyDomainDefault();

// --- Create, general, const
extern_c Handle2ConstProjectileEnergyDomain
ProjectileEnergyDomainCreateConst(
   const double min,
   const double max,
   const char *const unit
);

// +++ Create, general
extern_c Handle2ProjectileEnergyDomain
ProjectileEnergyDomainCreate(
   const double min,
   const double max,
   const char *const unit
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ProjectileEnergyDomainAssign(ConstHandle2ProjectileEnergyDomain self, ConstHandle2ConstProjectileEnergyDomain from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ProjectileEnergyDomainDelete(ConstHandle2ConstProjectileEnergyDomain self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ProjectileEnergyDomainRead(ConstHandle2ProjectileEnergyDomain self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ProjectileEnergyDomainWrite(ConstHandle2ConstProjectileEnergyDomain self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ProjectileEnergyDomainPrint(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Print to standard output, as XML
extern_c int
ProjectileEnergyDomainPrintXML(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Print to standard output, as JSON
extern_c int
ProjectileEnergyDomainPrintJSON(ConstHandle2ConstProjectileEnergyDomain self);


// -----------------------------------------------------------------------------
// Metadatum: min
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProjectileEnergyDomainMinHas(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Get
// +++ Returns by value
extern_c double
ProjectileEnergyDomainMinGet(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Set
extern_c void
ProjectileEnergyDomainMinSet(ConstHandle2ProjectileEnergyDomain self, const double min);


// -----------------------------------------------------------------------------
// Metadatum: max
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProjectileEnergyDomainMaxHas(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Get
// +++ Returns by value
extern_c double
ProjectileEnergyDomainMaxGet(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Set
extern_c void
ProjectileEnergyDomainMaxSet(ConstHandle2ProjectileEnergyDomain self, const double max);


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ProjectileEnergyDomainUnitHas(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Get
// +++ Returns by value
extern_c const char *
ProjectileEnergyDomainUnitGet(ConstHandle2ConstProjectileEnergyDomain self);

// +++ Set
extern_c void
ProjectileEnergyDomainUnitSet(ConstHandle2ProjectileEnergyDomain self, const char *const unit);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ProjectileEnergyDomain/src/custom.h"

#undef extern_c
#endif
