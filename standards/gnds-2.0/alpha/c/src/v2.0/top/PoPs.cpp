
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2.0/top/PoPs.hpp"
#include "PoPs.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = PoPsClass;
using CPP = multigroup::PoPs;

static const std::string CLASSNAME = "PoPs";

namespace extract {
   static auto name = [](auto &obj) { return &obj.name; };
   static auto version = [](auto &obj) { return &obj.version; };
   static auto format = [](auto &obj) { return &obj.format; };
   static auto aliases = [](auto &obj) { return &obj.aliases; };
   static auto baryons = [](auto &obj) { return &obj.baryons; };
   static auto chemicalElements = [](auto &obj) { return &obj.chemicalElements; };
   static auto styles = [](auto &obj) { return &obj.styles; };
   static auto unorthodoxes = [](auto &obj) { return &obj.unorthodoxes; };
   static auto gaugeBosons = [](auto &obj) { return &obj.gaugeBosons; };
   static auto leptons = [](auto &obj) { return &obj.leptons; };
}

using CPPAliases = general::Aliases;
using CPPBaryons = general::Baryons;
using CPPChemicalElements = general::ChemicalElements;
using CPPStyles = general::Styles;
using CPPUnorthodoxes = general::Unorthodoxes;
using CPPGaugeBosons = general::GaugeBosons;
using CPPLeptons = general::Leptons;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstPoPs
PoPsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2PoPs
PoPsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstPoPs
PoPsCreateConst(
   const char *const name,
   const char *const version,
   const char *const format,
   ConstHandle2ConstAliases aliases,
   ConstHandle2ConstBaryons baryons,
   ConstHandle2ConstChemicalElements chemicalElements,
   ConstHandle2ConstStyles styles,
   ConstHandle2ConstUnorthodoxes unorthodoxes,
   ConstHandle2ConstGaugeBosons gaugeBosons,
   ConstHandle2ConstLeptons leptons
) {
   ConstHandle2PoPs handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      name,
      version,
      format,
      detail::tocpp<CPPAliases>(aliases),
      detail::tocpp<CPPBaryons>(baryons),
      detail::tocpp<CPPChemicalElements>(chemicalElements),
      detail::tocpp<CPPStyles>(styles),
      detail::tocpp<CPPUnorthodoxes>(unorthodoxes),
      detail::tocpp<CPPGaugeBosons>(gaugeBosons),
      detail::tocpp<CPPLeptons>(leptons)
   );
   return handle;
}

// Create, general
Handle2PoPs
PoPsCreate(
   const char *const name,
   const char *const version,
   const char *const format,
   ConstHandle2ConstAliases aliases,
   ConstHandle2ConstBaryons baryons,
   ConstHandle2ConstChemicalElements chemicalElements,
   ConstHandle2ConstStyles styles,
   ConstHandle2ConstUnorthodoxes unorthodoxes,
   ConstHandle2ConstGaugeBosons gaugeBosons,
   ConstHandle2ConstLeptons leptons
) {
   ConstHandle2PoPs handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      name,
      version,
      format,
      detail::tocpp<CPPAliases>(aliases),
      detail::tocpp<CPPBaryons>(baryons),
      detail::tocpp<CPPChemicalElements>(chemicalElements),
      detail::tocpp<CPPStyles>(styles),
      detail::tocpp<CPPUnorthodoxes>(unorthodoxes),
      detail::tocpp<CPPGaugeBosons>(gaugeBosons),
      detail::tocpp<CPPLeptons>(leptons)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
PoPsAssign(ConstHandle2PoPs self, ConstHandle2ConstPoPs from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
PoPsDelete(ConstHandle2ConstPoPs self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
PoPsRead(ConstHandle2PoPs self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
PoPsWrite(ConstHandle2ConstPoPs self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
PoPsPrint(ConstHandle2ConstPoPs self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
PoPsPrintXML(ConstHandle2ConstPoPs self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
PoPsPrintJSON(ConstHandle2ConstPoPs self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: name
// -----------------------------------------------------------------------------

// Has
int
PoPsNameHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NameHas", self, extract::name);
}

// Get
// Returns by value
const char *
PoPsNameGet(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"NameGet", self, extract::name);
}

// Set
void
PoPsNameSet(ConstHandle2PoPs self, const char *const name)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"NameSet", self, extract::name, name);
}


// -----------------------------------------------------------------------------
// Metadatum: version
// -----------------------------------------------------------------------------

// Has
int
PoPsVersionHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"VersionHas", self, extract::version);
}

// Get
// Returns by value
const char *
PoPsVersionGet(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"VersionGet", self, extract::version);
}

// Set
void
PoPsVersionSet(ConstHandle2PoPs self, const char *const version)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"VersionSet", self, extract::version, version);
}


// -----------------------------------------------------------------------------
// Metadatum: format
// -----------------------------------------------------------------------------

// Has
int
PoPsFormatHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FormatHas", self, extract::format);
}

// Get
// Returns by value
const char *
PoPsFormatGet(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FormatGet", self, extract::format);
}

// Set
void
PoPsFormatSet(ConstHandle2PoPs self, const char *const format)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FormatSet", self, extract::format, format);
}


// -----------------------------------------------------------------------------
// Child: aliases
// -----------------------------------------------------------------------------

// Has
int
PoPsAliasesHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AliasesHas", self, extract::aliases);
}

// Get, const
Handle2ConstAliases
PoPsAliasesGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstAliases>
      (CLASSNAME, CLASSNAME+"AliasesGetConst", self, extract::aliases);
}

// Get, non-const
Handle2Aliases
PoPsAliasesGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2Aliases>
      (CLASSNAME, CLASSNAME+"AliasesGet", self, extract::aliases);
}

// Set
void
PoPsAliasesSet(ConstHandle2PoPs self, ConstHandle2ConstAliases aliases)
{
   detail::setField<CPP,CPPAliases>
      (CLASSNAME, CLASSNAME+"AliasesSet", self, extract::aliases, aliases);
}


// -----------------------------------------------------------------------------
// Child: baryons
// -----------------------------------------------------------------------------

// Has
int
PoPsBaryonsHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BaryonsHas", self, extract::baryons);
}

// Get, const
Handle2ConstBaryons
PoPsBaryonsGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstBaryons>
      (CLASSNAME, CLASSNAME+"BaryonsGetConst", self, extract::baryons);
}

// Get, non-const
Handle2Baryons
PoPsBaryonsGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2Baryons>
      (CLASSNAME, CLASSNAME+"BaryonsGet", self, extract::baryons);
}

// Set
void
PoPsBaryonsSet(ConstHandle2PoPs self, ConstHandle2ConstBaryons baryons)
{
   detail::setField<CPP,CPPBaryons>
      (CLASSNAME, CLASSNAME+"BaryonsSet", self, extract::baryons, baryons);
}


// -----------------------------------------------------------------------------
// Child: chemicalElements
// -----------------------------------------------------------------------------

// Has
int
PoPsChemicalElementsHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementsHas", self, extract::chemicalElements);
}

// Get, const
Handle2ConstChemicalElements
PoPsChemicalElementsGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstChemicalElements>
      (CLASSNAME, CLASSNAME+"ChemicalElementsGetConst", self, extract::chemicalElements);
}

// Get, non-const
Handle2ChemicalElements
PoPsChemicalElementsGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2ChemicalElements>
      (CLASSNAME, CLASSNAME+"ChemicalElementsGet", self, extract::chemicalElements);
}

// Set
void
PoPsChemicalElementsSet(ConstHandle2PoPs self, ConstHandle2ConstChemicalElements chemicalElements)
{
   detail::setField<CPP,CPPChemicalElements>
      (CLASSNAME, CLASSNAME+"ChemicalElementsSet", self, extract::chemicalElements, chemicalElements);
}


// -----------------------------------------------------------------------------
// Child: styles
// -----------------------------------------------------------------------------

// Has
int
PoPsStylesHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StylesHas", self, extract::styles);
}

// Get, const
Handle2ConstStyles
PoPsStylesGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstStyles>
      (CLASSNAME, CLASSNAME+"StylesGetConst", self, extract::styles);
}

// Get, non-const
Handle2Styles
PoPsStylesGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2Styles>
      (CLASSNAME, CLASSNAME+"StylesGet", self, extract::styles);
}

// Set
void
PoPsStylesSet(ConstHandle2PoPs self, ConstHandle2ConstStyles styles)
{
   detail::setField<CPP,CPPStyles>
      (CLASSNAME, CLASSNAME+"StylesSet", self, extract::styles, styles);
}


// -----------------------------------------------------------------------------
// Child: unorthodoxes
// -----------------------------------------------------------------------------

// Has
int
PoPsUnorthodoxesHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnorthodoxesHas", self, extract::unorthodoxes);
}

// Get, const
Handle2ConstUnorthodoxes
PoPsUnorthodoxesGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstUnorthodoxes>
      (CLASSNAME, CLASSNAME+"UnorthodoxesGetConst", self, extract::unorthodoxes);
}

// Get, non-const
Handle2Unorthodoxes
PoPsUnorthodoxesGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2Unorthodoxes>
      (CLASSNAME, CLASSNAME+"UnorthodoxesGet", self, extract::unorthodoxes);
}

// Set
void
PoPsUnorthodoxesSet(ConstHandle2PoPs self, ConstHandle2ConstUnorthodoxes unorthodoxes)
{
   detail::setField<CPP,CPPUnorthodoxes>
      (CLASSNAME, CLASSNAME+"UnorthodoxesSet", self, extract::unorthodoxes, unorthodoxes);
}


// -----------------------------------------------------------------------------
// Child: gaugeBosons
// -----------------------------------------------------------------------------

// Has
int
PoPsGaugeBosonsHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"GaugeBosonsHas", self, extract::gaugeBosons);
}

// Get, const
Handle2ConstGaugeBosons
PoPsGaugeBosonsGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstGaugeBosons>
      (CLASSNAME, CLASSNAME+"GaugeBosonsGetConst", self, extract::gaugeBosons);
}

// Get, non-const
Handle2GaugeBosons
PoPsGaugeBosonsGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2GaugeBosons>
      (CLASSNAME, CLASSNAME+"GaugeBosonsGet", self, extract::gaugeBosons);
}

// Set
void
PoPsGaugeBosonsSet(ConstHandle2PoPs self, ConstHandle2ConstGaugeBosons gaugeBosons)
{
   detail::setField<CPP,CPPGaugeBosons>
      (CLASSNAME, CLASSNAME+"GaugeBosonsSet", self, extract::gaugeBosons, gaugeBosons);
}


// -----------------------------------------------------------------------------
// Child: leptons
// -----------------------------------------------------------------------------

// Has
int
PoPsLeptonsHas(ConstHandle2ConstPoPs self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LeptonsHas", self, extract::leptons);
}

// Get, const
Handle2ConstLeptons
PoPsLeptonsGetConst(ConstHandle2ConstPoPs self)
{
   return detail::getField<CPP,Handle2ConstLeptons>
      (CLASSNAME, CLASSNAME+"LeptonsGetConst", self, extract::leptons);
}

// Get, non-const
Handle2Leptons
PoPsLeptonsGet(ConstHandle2PoPs self)
{
   return detail::getField<CPP,Handle2Leptons>
      (CLASSNAME, CLASSNAME+"LeptonsGet", self, extract::leptons);
}

// Set
void
PoPsLeptonsSet(ConstHandle2PoPs self, ConstHandle2ConstLeptons leptons)
{
   detail::setField<CPP,CPPLeptons>
      (CLASSNAME, CLASSNAME+"LeptonsSet", self, extract::leptons, leptons);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/top/PoPs/src/custom.cpp"
