
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_MADLANDNIX
#define GNDS_V2_0_GENERAL_MADLANDNIX

#include "gnds/v2.0/general/EFL.hpp"
#include "gnds/v2.0/general/EFH.hpp"
#include "gnds/v2.0/general/T_M.hpp"

namespace gnds {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class MadlandNix
// -----------------------------------------------------------------------------

class MadlandNix :
   public Component<general::MadlandNix>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "MadlandNix"; }
   static auto NODENAME() { return "MadlandNix"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<general::EFL>
            ("EFL") |
         --Child<general::EFH>
            ("EFH") |
         --Child<general::T_M>
            ("T_M")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "EFL",
         "EFH",
         "T_M"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "efl",
         "efh",
         "t_m"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<general::EFL>
      EFL{this};
   Field<general::EFH>
      EFH{this};
   Field<general::T_M>
      T_M{this};

   // shortcuts
   #define GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   GNDSTK_SHORTCUT(T_M(),XYs1d);
   GNDSTK_SHORTCUT(T_M().XYs1d(),axes);
   GNDSTK_SHORTCUT(T_M().XYs1d(),uncertainty);
   GNDSTK_SHORTCUT(T_M().XYs1d(),values);
   #undef GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->EFL, \
      this->EFH, \
      this->T_M \
   )

   // default
   MadlandNix() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit MadlandNix(
      const wrapper<general::EFL>
         &EFL,
      const wrapper<general::EFH>
         &EFH = {},
      const wrapper<general::T_M>
         &T_M = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      EFL(this,EFL),
      EFH(this,EFH),
      T_M(this,T_M)
   {
      Component::finish();
   }

   // from node
   explicit MadlandNix(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   MadlandNix(const MadlandNix &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      EFL(this,other.EFL),
      EFH(this,other.EFH),
      T_M(this,other.T_M)
   {
      Component::finish(other);
   }

   // move
   MadlandNix(MadlandNix &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      EFL(this,std::move(other.EFL)),
      EFH(this,std::move(other.EFH)),
      T_M(this,std::move(other.T_M))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   MadlandNix &operator=(const MadlandNix &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         EFL = other.EFL;
         EFH = other.EFH;
         T_M = other.T_M;
      }
      return *this;
   }

   // move
   MadlandNix &operator=(MadlandNix &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         EFL = std::move(other.EFL);
         EFH = std::move(other.EFH);
         T_M = std::move(other.T_M);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "gnds/v2.0/general/MadlandNix/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class MadlandNix

} // namespace general
} // namespace v2_0
} // namespace gnds

#endif
