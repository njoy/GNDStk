
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "gnds/v2.0/general/Yields.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::Yields
void wrapYields(py::module &module)
{
   using namespace gnds;
   using namespace gnds::v2_0;

   // type aliases
   using cppCLASS = general::Yields;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Yields",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const reduced::Nuclides &,
         const general::Values &,
         const general::Uncertainty &
      >(),
      py::arg("nuclides"),
      py::arg("values"),
      py::arg("uncertainty"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set nuclides
   object.def_property(
      "nuclides",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.nuclides();
      },
      [](cppCLASS &self, const reduced::Nuclides &value)
      {
         self.nuclides() = value;
      },
      cppCLASS::component_t::documentation("nuclides").data()
   );

   // get/set values
   object.def_property(
      "values",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.values();
      },
      [](cppCLASS &self, const general::Values &value)
      {
         self.values() = value;
      },
      cppCLASS::component_t::documentation("values").data()
   );

   // get/set uncertainty
   object.def_property(
      "uncertainty",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.uncertainty();
      },
      [](cppCLASS &self, const general::Uncertainty &value)
      {
         self.uncertainty() = value;
      },
      cppCLASS::component_t::documentation("uncertainty").data()
   );

   // shortcut: get/set listOfCovariances
   object.def_property(
      "list_of_covariances",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.listOfCovariances();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.listOfCovariances())> &value)
      {
         self.listOfCovariances() = value;
      },
      cppCLASS::component_t::documentation("list_of_covariances").data()
   );

   // shortcut: get/set polynomial1d
   object.def_property(
      "polynomial1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.polynomial1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.polynomial1d())> &value)
      {
         self.polynomial1d() = value;
      },
      cppCLASS::component_t::documentation("polynomial1d").data()
   );

   // shortcut: get/set standard
   object.def_property(
      "standard",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.standard();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.standard())> &value)
      {
         self.standard() = value;
      },
      cppCLASS::component_t::documentation("standard").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
