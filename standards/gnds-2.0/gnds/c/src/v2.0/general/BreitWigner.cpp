
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/BreitWigner.hpp"
#include "BreitWigner.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = BreitWignerClass;
using CPP = multigroup::BreitWigner;

static const std::string CLASSNAME = "BreitWigner";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto approximation = [](auto &obj) { return &obj.approximation; };
   static auto calculateChannelRadius = [](auto &obj) { return &obj.calculateChannelRadius; };
   static auto resonanceParameters = [](auto &obj) { return &obj.resonanceParameters; };
   static auto PoPs = [](auto &obj) { return &obj.PoPs; };
   static auto scatteringRadius = [](auto &obj) { return &obj.scatteringRadius; };
}

using CPPResonanceParameters = general::ResonanceParameters;
using CPPPoPs = top::PoPs;
using CPPScatteringRadius = general::ScatteringRadius;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstBreitWigner
BreitWignerDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2BreitWigner
BreitWignerDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstBreitWigner
BreitWignerCreateConst(
   const char *const label,
   const char *const approximation,
   const bool calculateChannelRadius,
   ConstHandle2ConstResonanceParameters resonanceParameters,
   ConstHandle2ConstPoPs PoPs,
   ConstHandle2ConstScatteringRadius scatteringRadius
) {
   ConstHandle2BreitWigner handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      approximation,
      calculateChannelRadius,
      detail::tocpp<CPPResonanceParameters>(resonanceParameters),
      detail::tocpp<CPPPoPs>(PoPs),
      detail::tocpp<CPPScatteringRadius>(scatteringRadius)
   );
   return handle;
}

// Create, general
Handle2BreitWigner
BreitWignerCreate(
   const char *const label,
   const char *const approximation,
   const bool calculateChannelRadius,
   ConstHandle2ConstResonanceParameters resonanceParameters,
   ConstHandle2ConstPoPs PoPs,
   ConstHandle2ConstScatteringRadius scatteringRadius
) {
   ConstHandle2BreitWigner handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      approximation,
      calculateChannelRadius,
      detail::tocpp<CPPResonanceParameters>(resonanceParameters),
      detail::tocpp<CPPPoPs>(PoPs),
      detail::tocpp<CPPScatteringRadius>(scatteringRadius)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
BreitWignerAssign(ConstHandle2BreitWigner self, ConstHandle2ConstBreitWigner from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
BreitWignerDelete(ConstHandle2ConstBreitWigner self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
BreitWignerRead(ConstHandle2BreitWigner self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
BreitWignerWrite(ConstHandle2ConstBreitWigner self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
BreitWignerPrint(ConstHandle2ConstBreitWigner self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
BreitWignerPrintXML(ConstHandle2ConstBreitWigner self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
BreitWignerPrintJSON(ConstHandle2ConstBreitWigner self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
BreitWignerLabelHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
BreitWignerLabelGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
BreitWignerLabelSet(ConstHandle2BreitWigner self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: approximation
// -----------------------------------------------------------------------------

// Has
int
BreitWignerApproximationHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ApproximationHas", self, extract::approximation);
}

// Get
// Returns by value
const char *
BreitWignerApproximationGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ApproximationGet", self, extract::approximation);
}

// Set
void
BreitWignerApproximationSet(ConstHandle2BreitWigner self, const char *const approximation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ApproximationSet", self, extract::approximation, approximation);
}


// -----------------------------------------------------------------------------
// Metadatum: calculateChannelRadius
// -----------------------------------------------------------------------------

// Has
int
BreitWignerCalculateChannelRadiusHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"CalculateChannelRadiusHas", self, extract::calculateChannelRadius);
}

// Get
// Returns by value
bool
BreitWignerCalculateChannelRadiusGet(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"CalculateChannelRadiusGet", self, extract::calculateChannelRadius);
}

// Set
void
BreitWignerCalculateChannelRadiusSet(ConstHandle2BreitWigner self, const bool calculateChannelRadius)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"CalculateChannelRadiusSet", self, extract::calculateChannelRadius, calculateChannelRadius);
}


// -----------------------------------------------------------------------------
// Child: resonanceParameters
// -----------------------------------------------------------------------------

// Has
int
BreitWignerResonanceParametersHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceParametersHas", self, extract::resonanceParameters);
}

// Get, const
Handle2ConstResonanceParameters
BreitWignerResonanceParametersGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersGetConst", self, extract::resonanceParameters);
}

// Get, non-const
Handle2ResonanceParameters
BreitWignerResonanceParametersGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2ResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersGet", self, extract::resonanceParameters);
}

// Set
void
BreitWignerResonanceParametersSet(ConstHandle2BreitWigner self, ConstHandle2ConstResonanceParameters resonanceParameters)
{
   detail::setField<CPP,CPPResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersSet", self, extract::resonanceParameters, resonanceParameters);
}


// -----------------------------------------------------------------------------
// Child: PoPs
// -----------------------------------------------------------------------------

// Has
int
BreitWignerPoPsHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PoPsHas", self, extract::PoPs);
}

// Get, const
Handle2ConstPoPs
BreitWignerPoPsGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstPoPs>
      (CLASSNAME, CLASSNAME+"PoPsGetConst", self, extract::PoPs);
}

// Get, non-const
Handle2PoPs
BreitWignerPoPsGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2PoPs>
      (CLASSNAME, CLASSNAME+"PoPsGet", self, extract::PoPs);
}

// Set
void
BreitWignerPoPsSet(ConstHandle2BreitWigner self, ConstHandle2ConstPoPs PoPs)
{
   detail::setField<CPP,CPPPoPs>
      (CLASSNAME, CLASSNAME+"PoPsSet", self, extract::PoPs, PoPs);
}


// -----------------------------------------------------------------------------
// Child: scatteringRadius
// -----------------------------------------------------------------------------

// Has
int
BreitWignerScatteringRadiusHas(ConstHandle2ConstBreitWigner self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusHas", self, extract::scatteringRadius);
}

// Get, const
Handle2ConstScatteringRadius
BreitWignerScatteringRadiusGetConst(ConstHandle2ConstBreitWigner self)
{
   return detail::getField<CPP,Handle2ConstScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGetConst", self, extract::scatteringRadius);
}

// Get, non-const
Handle2ScatteringRadius
BreitWignerScatteringRadiusGet(ConstHandle2BreitWigner self)
{
   return detail::getField<CPP,Handle2ScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusGet", self, extract::scatteringRadius);
}

// Set
void
BreitWignerScatteringRadiusSet(ConstHandle2BreitWigner self, ConstHandle2ConstScatteringRadius scatteringRadius)
{
   detail::setField<CPP,CPPScatteringRadius>
      (CLASSNAME, CLASSNAME+"ScatteringRadiusSet", self, extract::scatteringRadius, scatteringRadius);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/BreitWigner/src/custom.cpp"
