
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/SpinGroup.hpp"
#include "SpinGroup.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = SpinGroupClass;
using CPP = multigroup::SpinGroup;

static const std::string CLASSNAME = "SpinGroup";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto spin = [](auto &obj) { return &obj.spin; };
   static auto parity = [](auto &obj) { return &obj.parity; };
   static auto channels = [](auto &obj) { return &obj.channels; };
   static auto resonanceParameters = [](auto &obj) { return &obj.resonanceParameters; };
}

using CPPChannels = general::Channels;
using CPPResonanceParameters = general::ResonanceParameters;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstSpinGroup
SpinGroupDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2SpinGroup
SpinGroupDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstSpinGroup
SpinGroupCreateConst(
   const char *const label,
   const int spin,
   const int parity,
   ConstHandle2ConstChannels channels,
   ConstHandle2ConstResonanceParameters resonanceParameters
) {
   ConstHandle2SpinGroup handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      spin,
      parity,
      detail::tocpp<CPPChannels>(channels),
      detail::tocpp<CPPResonanceParameters>(resonanceParameters)
   );
   return handle;
}

// Create, general
Handle2SpinGroup
SpinGroupCreate(
   const char *const label,
   const int spin,
   const int parity,
   ConstHandle2ConstChannels channels,
   ConstHandle2ConstResonanceParameters resonanceParameters
) {
   ConstHandle2SpinGroup handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      spin,
      parity,
      detail::tocpp<CPPChannels>(channels),
      detail::tocpp<CPPResonanceParameters>(resonanceParameters)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
SpinGroupAssign(ConstHandle2SpinGroup self, ConstHandle2ConstSpinGroup from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
SpinGroupDelete(ConstHandle2ConstSpinGroup self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
SpinGroupRead(ConstHandle2SpinGroup self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
SpinGroupWrite(ConstHandle2ConstSpinGroup self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
SpinGroupPrint(ConstHandle2ConstSpinGroup self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
SpinGroupPrintXML(ConstHandle2ConstSpinGroup self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
SpinGroupPrintJSON(ConstHandle2ConstSpinGroup self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
SpinGroupLabelHas(ConstHandle2ConstSpinGroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
SpinGroupLabelGet(ConstHandle2ConstSpinGroup self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
SpinGroupLabelSet(ConstHandle2SpinGroup self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: spin
// -----------------------------------------------------------------------------

// Has
int
SpinGroupSpinHas(ConstHandle2ConstSpinGroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SpinHas", self, extract::spin);
}

// Get
// Returns by value
int
SpinGroupSpinGet(ConstHandle2ConstSpinGroup self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"SpinGet", self, extract::spin);
}

// Set
void
SpinGroupSpinSet(ConstHandle2SpinGroup self, const int spin)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"SpinSet", self, extract::spin, spin);
}


// -----------------------------------------------------------------------------
// Metadatum: parity
// -----------------------------------------------------------------------------

// Has
int
SpinGroupParityHas(ConstHandle2ConstSpinGroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ParityHas", self, extract::parity);
}

// Get
// Returns by value
int
SpinGroupParityGet(ConstHandle2ConstSpinGroup self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ParityGet", self, extract::parity);
}

// Set
void
SpinGroupParitySet(ConstHandle2SpinGroup self, const int parity)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ParitySet", self, extract::parity, parity);
}


// -----------------------------------------------------------------------------
// Child: channels
// -----------------------------------------------------------------------------

// Has
int
SpinGroupChannelsHas(ConstHandle2ConstSpinGroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChannelsHas", self, extract::channels);
}

// Get, const
Handle2ConstChannels
SpinGroupChannelsGetConst(ConstHandle2ConstSpinGroup self)
{
   return detail::getField<CPP,Handle2ConstChannels>
      (CLASSNAME, CLASSNAME+"ChannelsGetConst", self, extract::channels);
}

// Get, non-const
Handle2Channels
SpinGroupChannelsGet(ConstHandle2SpinGroup self)
{
   return detail::getField<CPP,Handle2Channels>
      (CLASSNAME, CLASSNAME+"ChannelsGet", self, extract::channels);
}

// Set
void
SpinGroupChannelsSet(ConstHandle2SpinGroup self, ConstHandle2ConstChannels channels)
{
   detail::setField<CPP,CPPChannels>
      (CLASSNAME, CLASSNAME+"ChannelsSet", self, extract::channels, channels);
}


// -----------------------------------------------------------------------------
// Child: resonanceParameters
// -----------------------------------------------------------------------------

// Has
int
SpinGroupResonanceParametersHas(ConstHandle2ConstSpinGroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceParametersHas", self, extract::resonanceParameters);
}

// Get, const
Handle2ConstResonanceParameters
SpinGroupResonanceParametersGetConst(ConstHandle2ConstSpinGroup self)
{
   return detail::getField<CPP,Handle2ConstResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersGetConst", self, extract::resonanceParameters);
}

// Get, non-const
Handle2ResonanceParameters
SpinGroupResonanceParametersGet(ConstHandle2SpinGroup self)
{
   return detail::getField<CPP,Handle2ResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersGet", self, extract::resonanceParameters);
}

// Set
void
SpinGroupResonanceParametersSet(ConstHandle2SpinGroup self, ConstHandle2ConstResonanceParameters resonanceParameters)
{
   detail::setField<CPP,CPPResonanceParameters>
      (CLASSNAME, CLASSNAME+"ResonanceParametersSet", self, extract::resonanceParameters, resonanceParameters);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/SpinGroup/src/custom.cpp"
