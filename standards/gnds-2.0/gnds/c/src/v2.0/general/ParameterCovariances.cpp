
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "alpha/v2.0/general/ParameterCovariances.hpp"
#include "ParameterCovariances.h"

using namespace njoy::GNDStk;
using namespace alpha::v2_0;

using C = ParameterCovariancesClass;
using CPP = multigroup::ParameterCovariances;

static const std::string CLASSNAME = "ParameterCovariances";

namespace extract {
   static auto parameterCovariance = [](auto &obj) { return &obj.parameterCovariance; };
   static auto averageParameterCovariance = [](auto &obj) { return &obj.averageParameterCovariance; };
}

using CPPParameterCovariance = general::ParameterCovariance;
using CPPAverageParameterCovariance = general::AverageParameterCovariance;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstParameterCovariances
ParameterCovariancesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ParameterCovariances
ParameterCovariancesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstParameterCovariances
ParameterCovariancesCreateConst(
   ConstHandle2ParameterCovariance *const parameterCovariance, const size_t parameterCovarianceSize,
   ConstHandle2AverageParameterCovariance *const averageParameterCovariance, const size_t averageParameterCovarianceSize
) {
   ConstHandle2ParameterCovariances handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPParameterCovariance>{},
      std::vector<CPPAverageParameterCovariance>{}
   );
   for (size_t ParameterCovarianceN = 0; ParameterCovarianceN < parameterCovarianceSize; ++ParameterCovarianceN)
      ParameterCovariancesParameterCovarianceAdd(handle, parameterCovariance[ParameterCovarianceN]);
   for (size_t AverageParameterCovarianceN = 0; AverageParameterCovarianceN < averageParameterCovarianceSize; ++AverageParameterCovarianceN)
      ParameterCovariancesAverageParameterCovarianceAdd(handle, averageParameterCovariance[AverageParameterCovarianceN]);
   return handle;
}

// Create, general
Handle2ParameterCovariances
ParameterCovariancesCreate(
   ConstHandle2ParameterCovariance *const parameterCovariance, const size_t parameterCovarianceSize,
   ConstHandle2AverageParameterCovariance *const averageParameterCovariance, const size_t averageParameterCovarianceSize
) {
   ConstHandle2ParameterCovariances handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPParameterCovariance>{},
      std::vector<CPPAverageParameterCovariance>{}
   );
   for (size_t ParameterCovarianceN = 0; ParameterCovarianceN < parameterCovarianceSize; ++ParameterCovarianceN)
      ParameterCovariancesParameterCovarianceAdd(handle, parameterCovariance[ParameterCovarianceN]);
   for (size_t AverageParameterCovarianceN = 0; AverageParameterCovarianceN < averageParameterCovarianceSize; ++AverageParameterCovarianceN)
      ParameterCovariancesAverageParameterCovarianceAdd(handle, averageParameterCovariance[AverageParameterCovarianceN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ParameterCovariancesAssign(ConstHandle2ParameterCovariances self, ConstHandle2ConstParameterCovariances from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ParameterCovariancesDelete(ConstHandle2ConstParameterCovariances self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ParameterCovariancesRead(ConstHandle2ParameterCovariances self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ParameterCovariancesWrite(ConstHandle2ConstParameterCovariances self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ParameterCovariancesPrint(ConstHandle2ConstParameterCovariances self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ParameterCovariancesPrintXML(ConstHandle2ConstParameterCovariances self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ParameterCovariancesPrintJSON(ConstHandle2ConstParameterCovariances self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: parameterCovariance
// -----------------------------------------------------------------------------

// Has
int
ParameterCovariancesParameterCovarianceHas(ConstHandle2ConstParameterCovariances self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceHas", self, extract::parameterCovariance);
}

// Clear
void
ParameterCovariancesParameterCovarianceClear(ConstHandle2ParameterCovariances self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceClear", self, extract::parameterCovariance);
}

// Size
size_t
ParameterCovariancesParameterCovarianceSize(ConstHandle2ConstParameterCovariances self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceSize", self, extract::parameterCovariance);
}

// Add
void
ParameterCovariancesParameterCovarianceAdd(ConstHandle2ParameterCovariances self, ConstHandle2ConstParameterCovariance parameterCovariance)
{
   detail::addToContainer<CPP,CPPParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceAdd", self, extract::parameterCovariance, parameterCovariance);
}

// Get, by index \in [0,size), const
Handle2ConstParameterCovariance
ParameterCovariancesParameterCovarianceGetConst(ConstHandle2ConstParameterCovariances self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceGetConst", self, extract::parameterCovariance, index_);
}

// Get, by index \in [0,size), non-const
Handle2ParameterCovariance
ParameterCovariancesParameterCovarianceGet(ConstHandle2ParameterCovariances self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceGet", self, extract::parameterCovariance, index_);
}

// Set, by index \in [0,size)
void
ParameterCovariancesParameterCovarianceSet(
   ConstHandle2ParameterCovariances self,
   const size_t index_,
   ConstHandle2ConstParameterCovariance parameterCovariance
) {
   detail::setByIndex<CPP,CPPParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceSet", self, extract::parameterCovariance, index_, parameterCovariance);
}

// Has, by label
int
ParameterCovariancesParameterCovarianceHasByLabel(
   ConstHandle2ConstParameterCovariances self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceHasByLabel",
       self, extract::parameterCovariance, meta::label, label);
}

// Get, by label, const
Handle2ConstParameterCovariance
ParameterCovariancesParameterCovarianceGetByLabelConst(
   ConstHandle2ConstParameterCovariances self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceGetByLabelConst",
       self, extract::parameterCovariance, meta::label, label);
}

// Get, by label, non-const
Handle2ParameterCovariance
ParameterCovariancesParameterCovarianceGetByLabel(
   ConstHandle2ParameterCovariances self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceGetByLabel",
       self, extract::parameterCovariance, meta::label, label);
}

// Set, by label
void
ParameterCovariancesParameterCovarianceSetByLabel(
   ConstHandle2ParameterCovariances self,
   const char *const label,
   ConstHandle2ConstParameterCovariance parameterCovariance
) {
   detail::setByMetadatum<CPP,CPPParameterCovariance>
      (CLASSNAME, CLASSNAME+"ParameterCovarianceSetByLabel",
       self, extract::parameterCovariance, meta::label, label, parameterCovariance);
}


// -----------------------------------------------------------------------------
// Child: averageParameterCovariance
// -----------------------------------------------------------------------------

// Has
int
ParameterCovariancesAverageParameterCovarianceHas(ConstHandle2ConstParameterCovariances self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceHas", self, extract::averageParameterCovariance);
}

// Clear
void
ParameterCovariancesAverageParameterCovarianceClear(ConstHandle2ParameterCovariances self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceClear", self, extract::averageParameterCovariance);
}

// Size
size_t
ParameterCovariancesAverageParameterCovarianceSize(ConstHandle2ConstParameterCovariances self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceSize", self, extract::averageParameterCovariance);
}

// Add
void
ParameterCovariancesAverageParameterCovarianceAdd(ConstHandle2ParameterCovariances self, ConstHandle2ConstAverageParameterCovariance averageParameterCovariance)
{
   detail::addToContainer<CPP,CPPAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceAdd", self, extract::averageParameterCovariance, averageParameterCovariance);
}

// Get, by index \in [0,size), const
Handle2ConstAverageParameterCovariance
ParameterCovariancesAverageParameterCovarianceGetConst(ConstHandle2ConstParameterCovariances self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceGetConst", self, extract::averageParameterCovariance, index_);
}

// Get, by index \in [0,size), non-const
Handle2AverageParameterCovariance
ParameterCovariancesAverageParameterCovarianceGet(ConstHandle2ParameterCovariances self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2AverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceGet", self, extract::averageParameterCovariance, index_);
}

// Set, by index \in [0,size)
void
ParameterCovariancesAverageParameterCovarianceSet(
   ConstHandle2ParameterCovariances self,
   const size_t index_,
   ConstHandle2ConstAverageParameterCovariance averageParameterCovariance
) {
   detail::setByIndex<CPP,CPPAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceSet", self, extract::averageParameterCovariance, index_, averageParameterCovariance);
}

// Has, by label
int
ParameterCovariancesAverageParameterCovarianceHasByLabel(
   ConstHandle2ConstParameterCovariances self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceHasByLabel",
       self, extract::averageParameterCovariance, meta::label, label);
}

// Get, by label, const
Handle2ConstAverageParameterCovariance
ParameterCovariancesAverageParameterCovarianceGetByLabelConst(
   ConstHandle2ConstParameterCovariances self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceGetByLabelConst",
       self, extract::averageParameterCovariance, meta::label, label);
}

// Get, by label, non-const
Handle2AverageParameterCovariance
ParameterCovariancesAverageParameterCovarianceGetByLabel(
   ConstHandle2ParameterCovariances self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2AverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceGetByLabel",
       self, extract::averageParameterCovariance, meta::label, label);
}

// Set, by label
void
ParameterCovariancesAverageParameterCovarianceSetByLabel(
   ConstHandle2ParameterCovariances self,
   const char *const label,
   ConstHandle2ConstAverageParameterCovariance averageParameterCovariance
) {
   detail::setByMetadatum<CPP,CPPAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceSetByLabel",
       self, extract::averageParameterCovariance, meta::label, label, averageParameterCovariance);
}

// Has, by crossTerm
int
ParameterCovariancesAverageParameterCovarianceHasByCrossTerm(
   ConstHandle2ConstParameterCovariances self,
   const bool crossTerm
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceHasByCrossTerm",
       self, extract::averageParameterCovariance, meta::crossTerm, crossTerm);
}

// Get, by crossTerm, const
Handle2ConstAverageParameterCovariance
ParameterCovariancesAverageParameterCovarianceGetByCrossTermConst(
   ConstHandle2ConstParameterCovariances self,
   const bool crossTerm
) {
   return detail::getByMetadatum<CPP,Handle2ConstAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceGetByCrossTermConst",
       self, extract::averageParameterCovariance, meta::crossTerm, crossTerm);
}

// Get, by crossTerm, non-const
Handle2AverageParameterCovariance
ParameterCovariancesAverageParameterCovarianceGetByCrossTerm(
   ConstHandle2ParameterCovariances self,
   const bool crossTerm
) {
   return detail::getByMetadatum<CPP,Handle2AverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceGetByCrossTerm",
       self, extract::averageParameterCovariance, meta::crossTerm, crossTerm);
}

// Set, by crossTerm
void
ParameterCovariancesAverageParameterCovarianceSetByCrossTerm(
   ConstHandle2ParameterCovariances self,
   const bool crossTerm,
   ConstHandle2ConstAverageParameterCovariance averageParameterCovariance
) {
   detail::setByMetadatum<CPP,CPPAverageParameterCovariance>
      (CLASSNAME, CLASSNAME+"AverageParameterCovarianceSetByCrossTerm",
       self, extract::averageParameterCovariance, meta::crossTerm, crossTerm, averageParameterCovariance);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ParameterCovariances/src/custom.cpp"
