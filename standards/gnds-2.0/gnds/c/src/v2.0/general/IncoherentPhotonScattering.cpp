
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/IncoherentPhotonScattering.hpp"
#include "IncoherentPhotonScattering.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = IncoherentPhotonScatteringClass;
using CPP = multigroup::IncoherentPhotonScattering;

static const std::string CLASSNAME = "IncoherentPhotonScattering";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto href = [](auto &obj) { return &obj.href; };
   static auto pid = [](auto &obj) { return &obj.pid; };
   static auto productFrame = [](auto &obj) { return &obj.productFrame; };
   static auto scatteringFactor = [](auto &obj) { return &obj.scatteringFactor; };
}

using CPPScatteringFactor = general::ScatteringFactor;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstIncoherentPhotonScattering
IncoherentPhotonScatteringDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2IncoherentPhotonScattering
IncoherentPhotonScatteringDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstIncoherentPhotonScattering
IncoherentPhotonScatteringCreateConst(
   const char *const label,
   const char *const href,
   const char *const pid,
   const char *const productFrame,
   ConstHandle2ConstScatteringFactor scatteringFactor
) {
   ConstHandle2IncoherentPhotonScattering handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      href,
      pid,
      productFrame,
      detail::tocpp<CPPScatteringFactor>(scatteringFactor)
   );
   return handle;
}

// Create, general
Handle2IncoherentPhotonScattering
IncoherentPhotonScatteringCreate(
   const char *const label,
   const char *const href,
   const char *const pid,
   const char *const productFrame,
   ConstHandle2ConstScatteringFactor scatteringFactor
) {
   ConstHandle2IncoherentPhotonScattering handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      href,
      pid,
      productFrame,
      detail::tocpp<CPPScatteringFactor>(scatteringFactor)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
IncoherentPhotonScatteringAssign(ConstHandle2IncoherentPhotonScattering self, ConstHandle2ConstIncoherentPhotonScattering from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
IncoherentPhotonScatteringDelete(ConstHandle2ConstIncoherentPhotonScattering self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
IncoherentPhotonScatteringRead(ConstHandle2IncoherentPhotonScattering self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
IncoherentPhotonScatteringWrite(ConstHandle2ConstIncoherentPhotonScattering self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
IncoherentPhotonScatteringPrint(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
IncoherentPhotonScatteringPrintXML(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
IncoherentPhotonScatteringPrintJSON(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
IncoherentPhotonScatteringLabelHas(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
IncoherentPhotonScatteringLabelGet(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
IncoherentPhotonScatteringLabelSet(ConstHandle2IncoherentPhotonScattering self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
IncoherentPhotonScatteringHrefHas(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", self, extract::href);
}

// Get
// Returns by value
const char *
IncoherentPhotonScatteringHrefGet(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", self, extract::href);
}

// Set
void
IncoherentPhotonScatteringHrefSet(ConstHandle2IncoherentPhotonScattering self, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", self, extract::href, href);
}


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// Has
int
IncoherentPhotonScatteringPidHas(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"PidHas", self, extract::pid);
}

// Get
// Returns by value
const char *
IncoherentPhotonScatteringPidGet(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"PidGet", self, extract::pid);
}

// Set
void
IncoherentPhotonScatteringPidSet(ConstHandle2IncoherentPhotonScattering self, const char *const pid)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"PidSet", self, extract::pid, pid);
}


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// Has
int
IncoherentPhotonScatteringProductFrameHas(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameHas", self, extract::productFrame);
}

// Get
// Returns by value
const char *
IncoherentPhotonScatteringProductFrameGet(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameGet", self, extract::productFrame);
}

// Set
void
IncoherentPhotonScatteringProductFrameSet(ConstHandle2IncoherentPhotonScattering self, const char *const productFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProductFrameSet", self, extract::productFrame, productFrame);
}


// -----------------------------------------------------------------------------
// Child: scatteringFactor
// -----------------------------------------------------------------------------

// Has
int
IncoherentPhotonScatteringScatteringFactorHas(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ScatteringFactorHas", self, extract::scatteringFactor);
}

// Get, const
Handle2ConstScatteringFactor
IncoherentPhotonScatteringScatteringFactorGetConst(ConstHandle2ConstIncoherentPhotonScattering self)
{
   return detail::getField<CPP,Handle2ConstScatteringFactor>
      (CLASSNAME, CLASSNAME+"ScatteringFactorGetConst", self, extract::scatteringFactor);
}

// Get, non-const
Handle2ScatteringFactor
IncoherentPhotonScatteringScatteringFactorGet(ConstHandle2IncoherentPhotonScattering self)
{
   return detail::getField<CPP,Handle2ScatteringFactor>
      (CLASSNAME, CLASSNAME+"ScatteringFactorGet", self, extract::scatteringFactor);
}

// Set
void
IncoherentPhotonScatteringScatteringFactorSet(ConstHandle2IncoherentPhotonScattering self, ConstHandle2ConstScatteringFactor scatteringFactor)
{
   detail::setField<CPP,CPPScatteringFactor>
      (CLASSNAME, CLASSNAME+"ScatteringFactorSet", self, extract::scatteringFactor, scatteringFactor);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/IncoherentPhotonScattering/src/custom.cpp"
