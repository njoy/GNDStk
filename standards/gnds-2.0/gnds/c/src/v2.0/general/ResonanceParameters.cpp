
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/ResonanceParameters.hpp"
#include "ResonanceParameters.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = ResonanceParametersClass;
using CPP = multigroup::ResonanceParameters;

static const std::string CLASSNAME = "ResonanceParameters";

namespace extract {
   static auto table = [](auto &obj) { return &obj.table; };
}

using CPPTable = general::Table;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstResonanceParameters
ResonanceParametersDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ResonanceParameters
ResonanceParametersDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstResonanceParameters
ResonanceParametersCreateConst(
   ConstHandle2ConstTable table
) {
   ConstHandle2ResonanceParameters handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPTable>(table)
   );
   return handle;
}

// Create, general
Handle2ResonanceParameters
ResonanceParametersCreate(
   ConstHandle2ConstTable table
) {
   ConstHandle2ResonanceParameters handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPTable>(table)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ResonanceParametersAssign(ConstHandle2ResonanceParameters self, ConstHandle2ConstResonanceParameters from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ResonanceParametersDelete(ConstHandle2ConstResonanceParameters self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ResonanceParametersRead(ConstHandle2ResonanceParameters self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ResonanceParametersWrite(ConstHandle2ConstResonanceParameters self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ResonanceParametersPrint(ConstHandle2ConstResonanceParameters self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ResonanceParametersPrintXML(ConstHandle2ConstResonanceParameters self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ResonanceParametersPrintJSON(ConstHandle2ConstResonanceParameters self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: table
// -----------------------------------------------------------------------------

// Has
int
ResonanceParametersTableHas(ConstHandle2ConstResonanceParameters self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TableHas", self, extract::table);
}

// Get, const
Handle2ConstTable
ResonanceParametersTableGetConst(ConstHandle2ConstResonanceParameters self)
{
   return detail::getField<CPP,Handle2ConstTable>
      (CLASSNAME, CLASSNAME+"TableGetConst", self, extract::table);
}

// Get, non-const
Handle2Table
ResonanceParametersTableGet(ConstHandle2ResonanceParameters self)
{
   return detail::getField<CPP,Handle2Table>
      (CLASSNAME, CLASSNAME+"TableGet", self, extract::table);
}

// Set
void
ResonanceParametersTableSet(ConstHandle2ResonanceParameters self, ConstHandle2ConstTable table)
{
   detail::setField<CPP,CPPTable>
      (CLASSNAME, CLASSNAME+"TableSet", self, extract::table, table);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ResonanceParameters/src/custom.cpp"
