
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// FissionComponents is the basic handle type in this file. Example:
//    // Create a default FissionComponents object:
//    FissionComponents handle = FissionComponentsDefault();
// Functions involving FissionComponents are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_FISSIONCOMPONENTS
#define C_INTERFACE_GNDS_V2_0_GENERAL_FISSIONCOMPONENTS

#include "GNDStk.h"
#include "v2.0/general/FissionComponent.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct FissionComponentsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ FissionComponents
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct FissionComponentsClass *FissionComponents;

// --- Const-aware handles.
typedef const struct FissionComponentsClass *const ConstHandle2ConstFissionComponents;
typedef       struct FissionComponentsClass *const ConstHandle2FissionComponents;
typedef const struct FissionComponentsClass *      Handle2ConstFissionComponents;
typedef       struct FissionComponentsClass *      Handle2FissionComponents;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstFissionComponents
FissionComponentsDefaultConst();

// +++ Create, default
extern_c Handle2FissionComponents
FissionComponentsDefault();

// --- Create, general, const
extern_c Handle2ConstFissionComponents
FissionComponentsCreateConst(
   ConstHandle2FissionComponent *const fissionComponent, const size_t fissionComponentSize
);

// +++ Create, general
extern_c Handle2FissionComponents
FissionComponentsCreate(
   ConstHandle2FissionComponent *const fissionComponent, const size_t fissionComponentSize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
FissionComponentsAssign(ConstHandle2FissionComponents self, ConstHandle2ConstFissionComponents from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
FissionComponentsDelete(ConstHandle2ConstFissionComponents self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
FissionComponentsRead(ConstHandle2FissionComponents self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
FissionComponentsWrite(ConstHandle2ConstFissionComponents self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
FissionComponentsPrint(ConstHandle2ConstFissionComponents self);

// +++ Print to standard output, as XML
extern_c int
FissionComponentsPrintXML(ConstHandle2ConstFissionComponents self);

// +++ Print to standard output, as JSON
extern_c int
FissionComponentsPrintJSON(ConstHandle2ConstFissionComponents self);


// -----------------------------------------------------------------------------
// Child: fissionComponent
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
FissionComponentsFissionComponentHas(ConstHandle2ConstFissionComponents self);

// +++ Clear
extern_c void
FissionComponentsFissionComponentClear(ConstHandle2FissionComponents self);

// +++ Size
extern_c size_t
FissionComponentsFissionComponentSize(ConstHandle2ConstFissionComponents self);

// +++ Add
extern_c void
FissionComponentsFissionComponentAdd(ConstHandle2FissionComponents self, ConstHandle2ConstFissionComponent fissionComponent);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstFissionComponent
FissionComponentsFissionComponentGetConst(ConstHandle2ConstFissionComponents self, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2FissionComponent
FissionComponentsFissionComponentGet(ConstHandle2FissionComponents self, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
FissionComponentsFissionComponentSet(
   ConstHandle2FissionComponents self,
   const size_t index_,
   ConstHandle2ConstFissionComponent fissionComponent
);

// +++ Has, by label
extern_c int
FissionComponentsFissionComponentHasByLabel(
   ConstHandle2ConstFissionComponents self,
   const char *const label
);

// --- Get, by label, const
extern_c Handle2ConstFissionComponent
FissionComponentsFissionComponentGetByLabelConst(
   ConstHandle2ConstFissionComponents self,
   const char *const label
);

// +++ Get, by label, non-const
extern_c Handle2FissionComponent
FissionComponentsFissionComponentGetByLabel(
   ConstHandle2FissionComponents self,
   const char *const label
);

// +++ Set, by label
extern_c void
FissionComponentsFissionComponentSetByLabel(
   ConstHandle2FissionComponents self,
   const char *const label,
   ConstHandle2ConstFissionComponent fissionComponent
);

// +++ Has, by ENDF_MT
extern_c int
FissionComponentsFissionComponentHasByENDFMT(
   ConstHandle2ConstFissionComponents self,
   const int ENDF_MT
);

// --- Get, by ENDF_MT, const
extern_c Handle2ConstFissionComponent
FissionComponentsFissionComponentGetByENDFMTConst(
   ConstHandle2ConstFissionComponents self,
   const int ENDF_MT
);

// +++ Get, by ENDF_MT, non-const
extern_c Handle2FissionComponent
FissionComponentsFissionComponentGetByENDFMT(
   ConstHandle2FissionComponents self,
   const int ENDF_MT
);

// +++ Set, by ENDF_MT
extern_c void
FissionComponentsFissionComponentSetByENDFMT(
   ConstHandle2FissionComponents self,
   const int ENDF_MT,
   ConstHandle2ConstFissionComponent fissionComponent
);

// +++ Has, by fissionGenre
extern_c int
FissionComponentsFissionComponentHasByFissionGenre(
   ConstHandle2ConstFissionComponents self,
   const char *const fissionGenre
);

// --- Get, by fissionGenre, const
extern_c Handle2ConstFissionComponent
FissionComponentsFissionComponentGetByFissionGenreConst(
   ConstHandle2ConstFissionComponents self,
   const char *const fissionGenre
);

// +++ Get, by fissionGenre, non-const
extern_c Handle2FissionComponent
FissionComponentsFissionComponentGetByFissionGenre(
   ConstHandle2FissionComponents self,
   const char *const fissionGenre
);

// +++ Set, by fissionGenre
extern_c void
FissionComponentsFissionComponentSetByFissionGenre(
   ConstHandle2FissionComponents self,
   const char *const fissionGenre,
   ConstHandle2ConstFissionComponent fissionComponent
);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/FissionComponents/src/custom.h"

#undef extern_c
#endif
