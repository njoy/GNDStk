
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/Parity.hpp"
#include "Parity.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = ParityClass;
using CPP = multigroup::Parity;

static const std::string CLASSNAME = "Parity";

namespace extract {
   static auto integer = [](auto &obj) { return &obj.integer; };
}

using CPPInteger = general::Integer;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstParity
ParityDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Parity
ParityDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstParity
ParityCreateConst(
   ConstHandle2ConstInteger integer
) {
   ConstHandle2Parity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPInteger>(integer)
   );
   return handle;
}

// Create, general
Handle2Parity
ParityCreate(
   ConstHandle2ConstInteger integer
) {
   ConstHandle2Parity handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPInteger>(integer)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ParityAssign(ConstHandle2Parity self, ConstHandle2ConstParity from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ParityDelete(ConstHandle2ConstParity self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ParityRead(ConstHandle2Parity self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ParityWrite(ConstHandle2ConstParity self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ParityPrint(ConstHandle2ConstParity self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ParityPrintXML(ConstHandle2ConstParity self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ParityPrintJSON(ConstHandle2ConstParity self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: integer
// -----------------------------------------------------------------------------

// Has
int
ParityIntegerHas(ConstHandle2ConstParity self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IntegerHas", self, extract::integer);
}

// Get, const
Handle2ConstInteger
ParityIntegerGetConst(ConstHandle2ConstParity self)
{
   return detail::getField<CPP,Handle2ConstInteger>
      (CLASSNAME, CLASSNAME+"IntegerGetConst", self, extract::integer);
}

// Get, non-const
Handle2Integer
ParityIntegerGet(ConstHandle2Parity self)
{
   return detail::getField<CPP,Handle2Integer>
      (CLASSNAME, CLASSNAME+"IntegerGet", self, extract::integer);
}

// Set
void
ParityIntegerSet(ConstHandle2Parity self, ConstHandle2ConstInteger integer)
{
   detail::setField<CPP,CPPInteger>
      (CLASSNAME, CLASSNAME+"IntegerSet", self, extract::integer, integer);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Parity/src/custom.cpp"
