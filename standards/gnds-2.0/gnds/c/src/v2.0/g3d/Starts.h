
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Starts is the basic handle type in this file. Example:
//    // Create a default Starts object:
//    Starts handle = StartsDefault();
// Functions involving Starts are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_ALPHA_V2_0_G3D_STARTS
#define C_INTERFACE_ALPHA_V2_0_G3D_STARTS

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct StartsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Starts
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct StartsClass *Starts;

// --- Const-aware handles.
typedef const struct StartsClass *const ConstHandle2ConstStarts;
typedef       struct StartsClass *const ConstHandle2Starts;
typedef const struct StartsClass *      Handle2ConstStarts;
typedef       struct StartsClass *      Handle2Starts;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstStarts
StartsDefaultConst();

// +++ Create, default
extern_c Handle2Starts
StartsDefault();

// --- Create, general, const
extern_c Handle2ConstStarts
StartsCreateConst(
   const char *const valueType,
   const char *const label
);

// +++ Create, general
extern_c Handle2Starts
StartsCreate(
   const char *const valueType,
   const char *const label
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
StartsAssign(ConstHandle2Starts self, ConstHandle2ConstStarts from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
StartsDelete(ConstHandle2ConstStarts self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
StartsRead(ConstHandle2Starts self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
StartsWrite(ConstHandle2ConstStarts self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
StartsPrint(ConstHandle2ConstStarts self);

// +++ Print to standard output, as XML
extern_c int
StartsPrintXML(ConstHandle2ConstStarts self);

// +++ Print to standard output, as JSON
extern_c int
StartsPrintJSON(ConstHandle2ConstStarts self);


// -----------------------------------------------------------------------------
// Data vector
// -----------------------------------------------------------------------------

// +++ Clear
extern_c void
StartsIntsClear(ConstHandle2Starts self);

// +++ Get size
extern_c size_t
StartsIntsSize(ConstHandle2ConstStarts self);

// +++ Get value
// +++ By index \in [0,size)
extern_c int
StartsIntsGet(ConstHandle2ConstStarts self, const size_t index);

// +++ Set value
// +++ By index \in [0,size)
extern_c void
StartsIntsSet(ConstHandle2Starts self, const size_t index, const int value);

// --- Get pointer to existing values, const
extern_c const int *
StartsIntsGetArrayConst(ConstHandle2ConstStarts self);

// +++ Get pointer to existing values, non-const
extern_c int *
StartsIntsGetArray(ConstHandle2Starts self);

// +++ Set completely new values and size
extern_c void
StartsIntsSetArray(ConstHandle2Starts self, const int *const values, const size_t size);


// -----------------------------------------------------------------------------
// Metadatum: valueType
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
StartsValueTypeHas(ConstHandle2ConstStarts self);

// +++ Get
// +++ Returns by value
extern_c const char *
StartsValueTypeGet(ConstHandle2ConstStarts self);

// +++ Set
extern_c void
StartsValueTypeSet(ConstHandle2Starts self, const char *const valueType);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
StartsLabelHas(ConstHandle2ConstStarts self);

// +++ Get
// +++ Returns by value
extern_c const char *
StartsLabelGet(ConstHandle2ConstStarts self);

// +++ Set
extern_c void
StartsLabelSet(ConstHandle2Starts self, const char *const label);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/g3d/Starts/src/custom.h"

#undef extern_c
#endif
