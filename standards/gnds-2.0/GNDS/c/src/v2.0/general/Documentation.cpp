
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/Documentation.hpp"
#include "Documentation.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = DocumentationClass;
using CPP = multigroup::Documentation;

static const std::string CLASSNAME = "Documentation";

namespace extract {
   static auto authors = [](auto &obj) { return &obj.authors; };
   static auto dates = [](auto &obj) { return &obj.dates; };
   static auto title = [](auto &obj) { return &obj.title; };
   static auto body = [](auto &obj) { return &obj.body; };
   static auto endfCompatible = [](auto &obj) { return &obj.endfCompatible; };
}

using CPPAuthors = general::Authors;
using CPPDates = general::Dates;
using CPPTitle = general::Title;
using CPPBody = general::Body;
using CPPEndfCompatible = general::EndfCompatible;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDocumentation
DocumentationDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Documentation
DocumentationDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDocumentation
DocumentationCreateConst(
   ConstHandle2ConstAuthors authors,
   ConstHandle2ConstDates dates,
   ConstHandle2ConstTitle title,
   ConstHandle2ConstBody body,
   ConstHandle2ConstEndfCompatible endfCompatible
) {
   ConstHandle2Documentation handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPAuthors>(authors),
      detail::tocpp<CPPDates>(dates),
      detail::tocpp<CPPTitle>(title),
      detail::tocpp<CPPBody>(body),
      detail::tocpp<CPPEndfCompatible>(endfCompatible)
   );
   return handle;
}

// Create, general
Handle2Documentation
DocumentationCreate(
   ConstHandle2ConstAuthors authors,
   ConstHandle2ConstDates dates,
   ConstHandle2ConstTitle title,
   ConstHandle2ConstBody body,
   ConstHandle2ConstEndfCompatible endfCompatible
) {
   ConstHandle2Documentation handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPAuthors>(authors),
      detail::tocpp<CPPDates>(dates),
      detail::tocpp<CPPTitle>(title),
      detail::tocpp<CPPBody>(body),
      detail::tocpp<CPPEndfCompatible>(endfCompatible)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DocumentationAssign(ConstHandle2Documentation self, ConstHandle2ConstDocumentation from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DocumentationDelete(ConstHandle2ConstDocumentation self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DocumentationRead(ConstHandle2Documentation self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DocumentationWrite(ConstHandle2ConstDocumentation self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
DocumentationPrint(ConstHandle2ConstDocumentation self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
DocumentationPrintXML(ConstHandle2ConstDocumentation self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
DocumentationPrintJSON(ConstHandle2ConstDocumentation self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: authors
// -----------------------------------------------------------------------------

// Has
int
DocumentationAuthorsHas(ConstHandle2ConstDocumentation self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AuthorsHas", self, extract::authors);
}

// Get, const
Handle2ConstAuthors
DocumentationAuthorsGetConst(ConstHandle2ConstDocumentation self)
{
   return detail::getField<CPP,Handle2ConstAuthors>
      (CLASSNAME, CLASSNAME+"AuthorsGetConst", self, extract::authors);
}

// Get, non-const
Handle2Authors
DocumentationAuthorsGet(ConstHandle2Documentation self)
{
   return detail::getField<CPP,Handle2Authors>
      (CLASSNAME, CLASSNAME+"AuthorsGet", self, extract::authors);
}

// Set
void
DocumentationAuthorsSet(ConstHandle2Documentation self, ConstHandle2ConstAuthors authors)
{
   detail::setField<CPP,CPPAuthors>
      (CLASSNAME, CLASSNAME+"AuthorsSet", self, extract::authors, authors);
}


// -----------------------------------------------------------------------------
// Child: dates
// -----------------------------------------------------------------------------

// Has
int
DocumentationDatesHas(ConstHandle2ConstDocumentation self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DatesHas", self, extract::dates);
}

// Get, const
Handle2ConstDates
DocumentationDatesGetConst(ConstHandle2ConstDocumentation self)
{
   return detail::getField<CPP,Handle2ConstDates>
      (CLASSNAME, CLASSNAME+"DatesGetConst", self, extract::dates);
}

// Get, non-const
Handle2Dates
DocumentationDatesGet(ConstHandle2Documentation self)
{
   return detail::getField<CPP,Handle2Dates>
      (CLASSNAME, CLASSNAME+"DatesGet", self, extract::dates);
}

// Set
void
DocumentationDatesSet(ConstHandle2Documentation self, ConstHandle2ConstDates dates)
{
   detail::setField<CPP,CPPDates>
      (CLASSNAME, CLASSNAME+"DatesSet", self, extract::dates, dates);
}


// -----------------------------------------------------------------------------
// Child: title
// -----------------------------------------------------------------------------

// Has
int
DocumentationTitleHas(ConstHandle2ConstDocumentation self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TitleHas", self, extract::title);
}

// Get, const
Handle2ConstTitle
DocumentationTitleGetConst(ConstHandle2ConstDocumentation self)
{
   return detail::getField<CPP,Handle2ConstTitle>
      (CLASSNAME, CLASSNAME+"TitleGetConst", self, extract::title);
}

// Get, non-const
Handle2Title
DocumentationTitleGet(ConstHandle2Documentation self)
{
   return detail::getField<CPP,Handle2Title>
      (CLASSNAME, CLASSNAME+"TitleGet", self, extract::title);
}

// Set
void
DocumentationTitleSet(ConstHandle2Documentation self, ConstHandle2ConstTitle title)
{
   detail::setField<CPP,CPPTitle>
      (CLASSNAME, CLASSNAME+"TitleSet", self, extract::title, title);
}


// -----------------------------------------------------------------------------
// Child: body
// -----------------------------------------------------------------------------

// Has
int
DocumentationBodyHas(ConstHandle2ConstDocumentation self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"BodyHas", self, extract::body);
}

// Get, const
Handle2ConstBody
DocumentationBodyGetConst(ConstHandle2ConstDocumentation self)
{
   return detail::getField<CPP,Handle2ConstBody>
      (CLASSNAME, CLASSNAME+"BodyGetConst", self, extract::body);
}

// Get, non-const
Handle2Body
DocumentationBodyGet(ConstHandle2Documentation self)
{
   return detail::getField<CPP,Handle2Body>
      (CLASSNAME, CLASSNAME+"BodyGet", self, extract::body);
}

// Set
void
DocumentationBodySet(ConstHandle2Documentation self, ConstHandle2ConstBody body)
{
   detail::setField<CPP,CPPBody>
      (CLASSNAME, CLASSNAME+"BodySet", self, extract::body, body);
}


// -----------------------------------------------------------------------------
// Child: endfCompatible
// -----------------------------------------------------------------------------

// Has
int
DocumentationEndfCompatibleHas(ConstHandle2ConstDocumentation self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EndfCompatibleHas", self, extract::endfCompatible);
}

// Get, const
Handle2ConstEndfCompatible
DocumentationEndfCompatibleGetConst(ConstHandle2ConstDocumentation self)
{
   return detail::getField<CPP,Handle2ConstEndfCompatible>
      (CLASSNAME, CLASSNAME+"EndfCompatibleGetConst", self, extract::endfCompatible);
}

// Get, non-const
Handle2EndfCompatible
DocumentationEndfCompatibleGet(ConstHandle2Documentation self)
{
   return detail::getField<CPP,Handle2EndfCompatible>
      (CLASSNAME, CLASSNAME+"EndfCompatibleGet", self, extract::endfCompatible);
}

// Set
void
DocumentationEndfCompatibleSet(ConstHandle2Documentation self, ConstHandle2ConstEndfCompatible endfCompatible)
{
   detail::setField<CPP,CPPEndfCompatible>
      (CLASSNAME, CLASSNAME+"EndfCompatibleSet", self, extract::endfCompatible, endfCompatible);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Documentation/src/custom.cpp"
