
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/Legendre.hpp"
#include "Legendre.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = LegendreClass;
using CPP = multigroup::Legendre;

static const std::string CLASSNAME = "Legendre";

namespace extract {
   static auto outerDomainValue = [](auto &obj) { return &obj.outerDomainValue; };
   static auto values = [](auto &obj) { return &obj.values; };
}

using CPPValues = general::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstLegendre
LegendreDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Legendre
LegendreDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstLegendre
LegendreCreateConst(
   const double outerDomainValue,
   ConstHandle2ConstValues values
) {
   ConstHandle2Legendre handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      outerDomainValue,
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Create, general
Handle2Legendre
LegendreCreate(
   const double outerDomainValue,
   ConstHandle2ConstValues values
) {
   ConstHandle2Legendre handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      outerDomainValue,
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
LegendreAssign(ConstHandle2Legendre self, ConstHandle2ConstLegendre from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
LegendreDelete(ConstHandle2ConstLegendre self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
LegendreRead(ConstHandle2Legendre self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
LegendreWrite(ConstHandle2ConstLegendre self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
LegendrePrint(ConstHandle2ConstLegendre self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
LegendrePrintXML(ConstHandle2ConstLegendre self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
LegendrePrintJSON(ConstHandle2ConstLegendre self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: outerDomainValue
// -----------------------------------------------------------------------------

// Has
int
LegendreOuterDomainValueHas(ConstHandle2ConstLegendre self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueHas", self, extract::outerDomainValue);
}

// Get
// Returns by value
double
LegendreOuterDomainValueGet(ConstHandle2ConstLegendre self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueGet", self, extract::outerDomainValue);
}

// Set
void
LegendreOuterDomainValueSet(ConstHandle2Legendre self, const double outerDomainValue)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueSet", self, extract::outerDomainValue, outerDomainValue);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
LegendreValuesHas(ConstHandle2ConstLegendre self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", self, extract::values);
}

// Get, const
Handle2ConstValues
LegendreValuesGetConst(ConstHandle2ConstLegendre self)
{
   return detail::getField<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", self, extract::values);
}

// Get, non-const
Handle2Values
LegendreValuesGet(ConstHandle2Legendre self)
{
   return detail::getField<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", self, extract::values);
}

// Set
void
LegendreValuesSet(ConstHandle2Legendre self, ConstHandle2ConstValues values)
{
   detail::setField<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", self, extract::values, values);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Legendre/src/custom.cpp"
