
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/Conversion.hpp"
#include "Conversion.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = ConversionClass;
using CPP = multigroup::Conversion;

static const std::string CLASSNAME = "Conversion";

namespace extract {
   static auto flags = [](auto &obj) { return &obj.flags; };
   static auto href = [](auto &obj) { return &obj.href; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstConversion
ConversionDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Conversion
ConversionDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstConversion
ConversionCreateConst(
   const char *const flags,
   const char *const href
) {
   ConstHandle2Conversion handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      flags,
      href
   );
   return handle;
}

// Create, general
Handle2Conversion
ConversionCreate(
   const char *const flags,
   const char *const href
) {
   ConstHandle2Conversion handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      flags,
      href
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ConversionAssign(ConstHandle2Conversion self, ConstHandle2ConstConversion from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ConversionDelete(ConstHandle2ConstConversion self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ConversionRead(ConstHandle2Conversion self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ConversionWrite(ConstHandle2ConstConversion self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ConversionPrint(ConstHandle2ConstConversion self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ConversionPrintXML(ConstHandle2ConstConversion self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ConversionPrintJSON(ConstHandle2ConstConversion self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: flags
// -----------------------------------------------------------------------------

// Has
int
ConversionFlagsHas(ConstHandle2ConstConversion self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FlagsHas", self, extract::flags);
}

// Get
// Returns by value
const char *
ConversionFlagsGet(ConstHandle2ConstConversion self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FlagsGet", self, extract::flags);
}

// Set
void
ConversionFlagsSet(ConstHandle2Conversion self, const char *const flags)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FlagsSet", self, extract::flags, flags);
}


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// Has
int
ConversionHrefHas(ConstHandle2ConstConversion self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"HrefHas", self, extract::href);
}

// Get
// Returns by value
const char *
ConversionHrefGet(ConstHandle2ConstConversion self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"HrefGet", self, extract::href);
}

// Set
void
ConversionHrefSet(ConstHandle2Conversion self, const char *const href)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"HrefSet", self, extract::href, href);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Conversion/src/custom.cpp"
