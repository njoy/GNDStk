
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "gnds/v2.0/general/BoundAtomCrossSection.hpp"
#include "BoundAtomCrossSection.h"

using namespace njoy::GNDStk;
using namespace gnds::v2_0;

using C = BoundAtomCrossSectionClass;
using CPP = multigroup::BoundAtomCrossSection;

static const std::string CLASSNAME = "BoundAtomCrossSection";

namespace extract {
   static auto value = [](auto &obj) { return &obj.value; };
   static auto unit = [](auto &obj) { return &obj.unit; };
}


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstBoundAtomCrossSection
BoundAtomCrossSectionDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2BoundAtomCrossSection
BoundAtomCrossSectionDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstBoundAtomCrossSection
BoundAtomCrossSectionCreateConst(
   const double value,
   const char *const unit
) {
   ConstHandle2BoundAtomCrossSection handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      value,
      unit
   );
   return handle;
}

// Create, general
Handle2BoundAtomCrossSection
BoundAtomCrossSectionCreate(
   const double value,
   const char *const unit
) {
   ConstHandle2BoundAtomCrossSection handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      value,
      unit
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
BoundAtomCrossSectionAssign(ConstHandle2BoundAtomCrossSection self, ConstHandle2ConstBoundAtomCrossSection from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
BoundAtomCrossSectionDelete(ConstHandle2ConstBoundAtomCrossSection self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
BoundAtomCrossSectionRead(ConstHandle2BoundAtomCrossSection self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
BoundAtomCrossSectionWrite(ConstHandle2ConstBoundAtomCrossSection self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
BoundAtomCrossSectionPrint(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
BoundAtomCrossSectionPrintXML(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
BoundAtomCrossSectionPrintJSON(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// Has
int
BoundAtomCrossSectionValueHas(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValueHas", self, extract::value);
}

// Get
// Returns by value
double
BoundAtomCrossSectionValueGet(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ValueGet", self, extract::value);
}

// Set
void
BoundAtomCrossSectionValueSet(ConstHandle2BoundAtomCrossSection self, const double value)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ValueSet", self, extract::value, value);
}


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// Has
int
BoundAtomCrossSectionUnitHas(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnitHas", self, extract::unit);
}

// Get
// Returns by value
const char *
BoundAtomCrossSectionUnitGet(ConstHandle2ConstBoundAtomCrossSection self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"UnitGet", self, extract::unit);
}

// Set
void
BoundAtomCrossSectionUnitSet(ConstHandle2BoundAtomCrossSection self, const char *const unit)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"UnitSet", self, extract::unit, unit);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/BoundAtomCrossSection/src/custom.cpp"
