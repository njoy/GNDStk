
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "gnds/v2.0/general/Product.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v2_0 {
namespace python_general {

// wrapper for general::Product
void wrapProduct(py::module &module)
{
   using namespace gnds;
   using namespace gnds::v2_0;

   // type aliases
   using cppCLASS = general::Product;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Product",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const std::optional<general::Multiplicity> &,
         const std::optional<general::Distribution> &,
         const std::optional<reduced::OutputChannel> &,
         const std::optional<general::AverageProductEnergy> &
      >(),
      py::arg("label"),
      py::arg("pid"),
      py::arg("multiplicity") = std::nullopt,
      py::arg("distribution") = std::nullopt,
      py::arg("output_channel") = std::nullopt,
      py::arg("average_product_energy") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set pid
   object.def_property(
      "pid",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.pid();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.pid() = value;
      },
      cppCLASS::component_t::documentation("pid").data()
   );

   // get/set multiplicity
   object.def_property(
      "multiplicity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.multiplicity();
      },
      [](cppCLASS &self, const std::optional<general::Multiplicity> &value)
      {
         self.multiplicity() = value;
      },
      cppCLASS::component_t::documentation("multiplicity").data()
   );

   // get/set distribution
   object.def_property(
      "distribution",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.distribution();
      },
      [](cppCLASS &self, const std::optional<general::Distribution> &value)
      {
         self.distribution() = value;
      },
      cppCLASS::component_t::documentation("distribution").data()
   );

   // get/set outputChannel
   object.def_property(
      "output_channel",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.outputChannel();
      },
      [](cppCLASS &self, const std::optional<reduced::OutputChannel> &value)
      {
         self.outputChannel() = value;
      },
      cppCLASS::component_t::documentation("output_channel").data()
   );

   // get/set averageProductEnergy
   object.def_property(
      "average_product_energy",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.averageProductEnergy();
      },
      [](cppCLASS &self, const std::optional<general::AverageProductEnergy> &value)
      {
         self.averageProductEnergy() = value;
      },
      cppCLASS::component_t::documentation("average_product_energy").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
