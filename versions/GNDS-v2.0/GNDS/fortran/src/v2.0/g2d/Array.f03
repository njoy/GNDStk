
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module g2dArray
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ArrayDefaultConst() &
      bind(C, name='ArrayDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ArrayDefaultConst
end function ArrayDefaultConst

!! Create, default, non-const
function ArrayDefault() &
      bind(C, name='ArrayDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ArrayDefault
end function ArrayDefault

!! Create, general, const
function ArrayCreateConst( &
   shape, &
   compression, &
   symmetry, &
   values, &
   shapeSize, &
   compressionSize, &
   symmetrySize &
) &
      bind(C, name='ArrayCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: shapeSize
   character(c_char), intent(in) :: shape(shapeSize)
   integer(c_size_t), intent(in), value :: compressionSize
   character(c_char), intent(in) :: compression(compressionSize)
   integer(c_size_t), intent(in), value :: symmetrySize
   character(c_char), intent(in) :: symmetry(symmetrySize)
   type(c_ptr), intent(in), value :: values
   type(c_ptr) :: ArrayCreateConst
end function ArrayCreateConst

!! Create, general, non-const
function ArrayCreate( &
   shape, &
   compression, &
   symmetry, &
   values, &
   shapeSize, &
   compressionSize, &
   symmetrySize &
) &
      bind(C, name='ArrayCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: shapeSize
   character(c_char), intent(in) :: shape(shapeSize)
   integer(c_size_t), intent(in), value :: compressionSize
   character(c_char), intent(in) :: compression(compressionSize)
   integer(c_size_t), intent(in), value :: symmetrySize
   character(c_char), intent(in) :: symmetry(symmetrySize)
   type(c_ptr), intent(in), value :: values
   type(c_ptr) :: ArrayCreate
end function ArrayCreate

!! Assign
subroutine ArrayAssign(handleLHS, handleRHS) &
      bind(C, name='ArrayAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ArrayAssign

!! Delete
subroutine ArrayDelete(handle) &
      bind(C, name='ArrayDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ArrayDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ArrayRead(handle, filename, filenameSize) &
      bind(C, name='ArrayRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ArrayRead
end function ArrayRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ArrayWrite(handle, filename, filenameSize) &
      bind(C, name='ArrayWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ArrayWrite
end function ArrayWrite

!! Print to standard output, in our prettyprinting format
function ArrayPrint(handle) &
      bind(C, name='ArrayPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArrayPrint
end function ArrayPrint

!! Print to standard output, as XML
function ArrayPrintXML(handle) &
      bind(C, name='ArrayPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArrayPrintXML
end function ArrayPrintXML

!! Print to standard output, as JSON
function ArrayPrintJSON(handle) &
      bind(C, name='ArrayPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArrayPrintJSON
end function ArrayPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: shape
!! -----------------------------------------------------------------------------

!! Has
function ArrayShapeHas(handle) &
      bind(C, name='ArrayShapeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArrayShapeHas
end function ArrayShapeHas

!! Get
function ArrayShapeGet(handle) &
      bind(C, name='ArrayShapeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ArrayShapeGet
end function ArrayShapeGet

!! Set
subroutine ArrayShapeSet(handle, shape, shapeSize) &
      bind(C, name='ArrayShapeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: shapeSize
   character(c_char), intent(in) :: shape(shapeSize)
end subroutine ArrayShapeSet


!! -----------------------------------------------------------------------------
!! Metadatum: compression
!! -----------------------------------------------------------------------------

!! Has
function ArrayCompressionHas(handle) &
      bind(C, name='ArrayCompressionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArrayCompressionHas
end function ArrayCompressionHas

!! Get
function ArrayCompressionGet(handle) &
      bind(C, name='ArrayCompressionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ArrayCompressionGet
end function ArrayCompressionGet

!! Set
subroutine ArrayCompressionSet(handle, compression, compressionSize) &
      bind(C, name='ArrayCompressionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: compressionSize
   character(c_char), intent(in) :: compression(compressionSize)
end subroutine ArrayCompressionSet


!! -----------------------------------------------------------------------------
!! Metadatum: symmetry
!! -----------------------------------------------------------------------------

!! Has
function ArraySymmetryHas(handle) &
      bind(C, name='ArraySymmetryHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArraySymmetryHas
end function ArraySymmetryHas

!! Get
function ArraySymmetryGet(handle) &
      bind(C, name='ArraySymmetryGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ArraySymmetryGet
end function ArraySymmetryGet

!! Set
subroutine ArraySymmetrySet(handle, symmetry, symmetrySize) &
      bind(C, name='ArraySymmetrySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: symmetrySize
   character(c_char), intent(in) :: symmetry(symmetrySize)
end subroutine ArraySymmetrySet


!! -----------------------------------------------------------------------------
!! Child: values
!! -----------------------------------------------------------------------------

!! Has
function ArrayValuesHas(handle) &
      bind(C, name='ArrayValuesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ArrayValuesHas
end function ArrayValuesHas

!! Get, const
function ArrayValuesGetConst(handle) &
      bind(C, name='ArrayValuesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ArrayValuesGetConst
end function ArrayValuesGetConst

!! Get, non-const
function ArrayValuesGet(handle) &
      bind(C, name='ArrayValuesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ArrayValuesGet
end function ArrayValuesGet

!! Set
subroutine ArrayValuesSet(handle, fieldHandle) &
      bind(C, name='ArrayValuesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ArrayValuesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module g2dArray
