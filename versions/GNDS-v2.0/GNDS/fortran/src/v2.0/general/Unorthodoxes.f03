
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalUnorthodoxes
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function UnorthodoxesDefaultConst() &
      bind(C, name='UnorthodoxesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function UnorthodoxesDefaultConst

!! Create, default
function UnorthodoxesDefault() &
      bind(C, name='UnorthodoxesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function UnorthodoxesDefault

!! Create, general, const
function UnorthodoxesCreateConst( &
   unorthodox, unorthodoxSize &
) &
      bind(C, name='UnorthodoxesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: unorthodoxSize
   type(c_ptr) :: unorthodox(unorthodoxSize)
   type(c_ptr) :: handle
end function UnorthodoxesCreateConst

!! Create, general
function UnorthodoxesCreate( &
   unorthodox, unorthodoxSize &
) &
      bind(C, name='UnorthodoxesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: unorthodoxSize
   type(c_ptr) :: unorthodox(unorthodoxSize)
   type(c_ptr) :: handle
end function UnorthodoxesCreate

!! Assign
subroutine UnorthodoxesAssign(handleLHS, handleRHS) &
      bind(C, name='UnorthodoxesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine UnorthodoxesAssign

!! Delete
subroutine UnorthodoxesDelete(handle) &
      bind(C, name='UnorthodoxesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UnorthodoxesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function UnorthodoxesRead(handle, filename, filenameSize) &
      bind(C, name='UnorthodoxesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function UnorthodoxesRead

!! Write to file
function UnorthodoxesWrite(handle, filename, filenameSize) &
      bind(C, name='UnorthodoxesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function UnorthodoxesWrite

!! Print to standard output, in our prettyprinting format
function UnorthodoxesPrint(handle) &
      bind(C, name='UnorthodoxesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UnorthodoxesPrint

!! Print to standard output, as XML
function UnorthodoxesPrintXML(handle) &
      bind(C, name='UnorthodoxesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UnorthodoxesPrintXML

!! Print to standard output, as JSON
function UnorthodoxesPrintJSON(handle) &
      bind(C, name='UnorthodoxesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UnorthodoxesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: unorthodox
!! -----------------------------------------------------------------------------

!! Has
function UnorthodoxesUnorthodoxHas(handle) &
      bind(C, name='UnorthodoxesUnorthodoxHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UnorthodoxesUnorthodoxHas

!! Clear
subroutine UnorthodoxesUnorthodoxClear(handle) &
      bind(C, name='UnorthodoxesUnorthodoxClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UnorthodoxesUnorthodoxClear

!! Size
function UnorthodoxesUnorthodoxSize(handle) &
      bind(C, name='UnorthodoxesUnorthodoxSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function UnorthodoxesUnorthodoxSize

!! Add
subroutine UnorthodoxesUnorthodoxAdd(handle, fieldHandle) &
      bind(C, name='UnorthodoxesUnorthodoxAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine UnorthodoxesUnorthodoxAdd

!! Get, by index \in [0,size), const
function UnorthodoxesUnorthodoxGetConst(handle, index) &
      bind(C, name='UnorthodoxesUnorthodoxGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function UnorthodoxesUnorthodoxGetConst

!! Get, by index \in [0,size)
function UnorthodoxesUnorthodoxGet(handle, index) &
      bind(C, name='UnorthodoxesUnorthodoxGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function UnorthodoxesUnorthodoxGet

!! Set, by index \in [0,size)
subroutine UnorthodoxesUnorthodoxSet(handle, index, fieldHandle) &
      bind(C, name='UnorthodoxesUnorthodoxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine UnorthodoxesUnorthodoxSet

!! ------------------------
!! Re: metadatum id
!! ------------------------

!! Has, by id
function UnorthodoxesUnorthodoxHasById(handle, meta, metaSize) &
      bind(C, name='UnorthodoxesUnorthodoxHasById') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function UnorthodoxesUnorthodoxHasById

!! Get, by id, const
function UnorthodoxesUnorthodoxGetByIdConst(handle, meta, metaSize) &
      bind(C, name='UnorthodoxesUnorthodoxGetByIdConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function UnorthodoxesUnorthodoxGetByIdConst

!! Get, by id
function UnorthodoxesUnorthodoxGetById(handle, meta, metaSize) &
      bind(C, name='UnorthodoxesUnorthodoxGetById') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function UnorthodoxesUnorthodoxGetById

!! Set, by id
subroutine UnorthodoxesUnorthodoxSetById(handle, meta, metaSize, fieldHandle) &
      bind(C, name='UnorthodoxesUnorthodoxSetById')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine UnorthodoxesUnorthodoxSetById


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalUnorthodoxes
