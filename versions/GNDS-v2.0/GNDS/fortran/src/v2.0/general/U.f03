
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalU
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function UDefaultConst() &
      bind(C, name='UDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function UDefaultConst

!! Create, default
function UDefault() &
      bind(C, name='UDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function UDefault

!! Create, general, const
function UCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='UCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function UCreateConst

!! Create, general
function UCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='UCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function UCreate

!! Assign
subroutine UAssign(handleLHS, handleRHS) &
      bind(C, name='UAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine UAssign

!! Delete
subroutine UDelete(handle) &
      bind(C, name='UDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function URead(handle, filename, filenameSize) &
      bind(C, name='URead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function URead

!! Write to file
function UWrite(handle, filename, filenameSize) &
      bind(C, name='UWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function UWrite

!! Print to standard output, in our prettyprinting format
function UPrint(handle) &
      bind(C, name='UPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UPrint

!! Print to standard output, as XML
function UPrintXML(handle) &
      bind(C, name='UPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UPrintXML

!! Print to standard output, as JSON
function UPrintJSON(handle) &
      bind(C, name='UPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function UValueHas(handle) &
      bind(C, name='UValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UValueHas

!! Get
function UValueGet(handle) &
      bind(C, name='UValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function UValueGet

!! Set
subroutine UValueSet(handle, value, valueSize) &
      bind(C, name='UValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine UValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function UUnitHas(handle) &
      bind(C, name='UUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UUnitHas

!! Get
function UUnitGet(handle) &
      bind(C, name='UUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function UUnitGet

!! Set
subroutine UUnitSet(handle, unit, unitSize) &
      bind(C, name='UUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine UUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalU
