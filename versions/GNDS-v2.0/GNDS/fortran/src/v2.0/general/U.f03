
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalU
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function UDefaultConst() &
      bind(C, name='UDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: UDefaultConst
end function UDefaultConst

!! Create, default, non-const
function UDefault() &
      bind(C, name='UDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: UDefault
end function UDefault

!! Create, general, const
function UCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='UCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: UCreateConst
end function UCreateConst

!! Create, general, non-const
function UCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='UCreate')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: UCreate
end function UCreate

!! Assign
subroutine UAssign(handleLHS, handleRHS) &
      bind(C, name='UAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine UAssign

!! Delete
subroutine UDelete(handle) &
      bind(C, name='UDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function URead(handle, filename, filenameSize) &
      bind(C, name='URead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: URead
end function URead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function UWrite(handle, filename, filenameSize) &
      bind(C, name='UWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: UWrite
end function UWrite

!! Print to standard output, in our prettyprinting format
function UPrint(handle) &
      bind(C, name='UPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UPrint
end function UPrint

!! Print to standard output, as XML
function UPrintXML(handle) &
      bind(C, name='UPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UPrintXML
end function UPrintXML

!! Print to standard output, as JSON
function UPrintJSON(handle) &
      bind(C, name='UPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UPrintJSON
end function UPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function UValueHas(handle) &
      bind(C, name='UValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UValueHas
end function UValueHas

!! Get
function UValueGet(handle) &
      bind(C, name='UValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: UValueGet
end function UValueGet

!! Set
subroutine UValueSet(handle, value) &
      bind(C, name='UValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: value
end subroutine UValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function UUnitHas(handle) &
      bind(C, name='UUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UUnitHas
end function UUnitHas

!! Get
function UUnitGet(handle) &
      bind(C, name='UUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UUnitGet
end function UUnitGet

!! Set
subroutine UUnitSet(handle, unit, unitSize) &
      bind(C, name='UUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine UUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalU
