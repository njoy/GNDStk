
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAdd
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AddDefaultConst() &
      bind(C, name='AddDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AddDefaultConst
end function AddDefaultConst

!! Create, default
function AddDefault() &
      bind(C, name='AddDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AddDefault
end function AddDefault

!! Create, general, const
function AddCreateConst( &
   href, &
   hrefSize &
) &
      bind(C, name='AddCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: AddCreateConst
end function AddCreateConst

!! Create, general
function AddCreate( &
   href, &
   hrefSize &
) &
      bind(C, name='AddCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: AddCreate
end function AddCreate

!! Assign
subroutine AddAssign(handleLHS, handleRHS) &
      bind(C, name='AddAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AddAssign

!! Delete
subroutine AddDelete(handle) &
      bind(C, name='AddDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AddDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AddRead(handle, filename, filenameSize) &
      bind(C, name='AddRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AddRead
end function AddRead

!! Write to file
function AddWrite(handle, filename, filenameSize) &
      bind(C, name='AddWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AddWrite
end function AddWrite

!! Print to standard output, in our prettyprinting format
function AddPrint(handle) &
      bind(C, name='AddPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AddPrint
end function AddPrint

!! Print to standard output, as XML
function AddPrintXML(handle) &
      bind(C, name='AddPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AddPrintXML
end function AddPrintXML

!! Print to standard output, as JSON
function AddPrintJSON(handle) &
      bind(C, name='AddPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AddPrintJSON
end function AddPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function AddHrefHas(handle) &
      bind(C, name='AddHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AddHrefHas
end function AddHrefHas

!! Get
function AddHrefGet(handle) &
      bind(C, name='AddHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AddHrefGet
end function AddHrefGet

!! Set
subroutine AddHrefSet(handle, href, hrefSize) &
      bind(C, name='AddHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine AddHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAdd
