
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalYields
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function YieldsDefaultConst() &
      bind(C, name='YieldsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function YieldsDefaultConst

!! Create, default
function YieldsDefault() &
      bind(C, name='YieldsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function YieldsDefault

!! Create, general, const
function YieldsCreateConst( &
   nuclides, &
   values, &
   uncertainty &
) &
      bind(C, name='YieldsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: nuclides
   type(c_ptr), value :: values
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function YieldsCreateConst

!! Create, general
function YieldsCreate( &
   nuclides, &
   values, &
   uncertainty &
) &
      bind(C, name='YieldsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: nuclides
   type(c_ptr), value :: values
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function YieldsCreate

!! Assign
subroutine YieldsAssign(handleLHS, handleRHS) &
      bind(C, name='YieldsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine YieldsAssign

!! Delete
subroutine YieldsDelete(handle) &
      bind(C, name='YieldsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine YieldsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function YieldsRead(handle, filename, filenameSize) &
      bind(C, name='YieldsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function YieldsRead

!! Write to file
function YieldsWrite(handle, filename, filenameSize) &
      bind(C, name='YieldsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function YieldsWrite

!! Print to standard output, in our prettyprinting format
function YieldsPrint(handle) &
      bind(C, name='YieldsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function YieldsPrint

!! Print to standard output, as XML
function YieldsPrintXML(handle) &
      bind(C, name='YieldsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function YieldsPrintXML

!! Print to standard output, as JSON
function YieldsPrintJSON(handle) &
      bind(C, name='YieldsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function YieldsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: nuclides
!! -----------------------------------------------------------------------------

!! Has
function YieldsNuclidesHas(handle) &
      bind(C, name='YieldsNuclidesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function YieldsNuclidesHas

!! Get, const
function YieldsNuclidesGetConst(handle) &
      bind(C, name='YieldsNuclidesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function YieldsNuclidesGetConst

!! Get
function YieldsNuclidesGet(handle) &
      bind(C, name='YieldsNuclidesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function YieldsNuclidesGet

!! Set
subroutine YieldsNuclidesSet(handle, fieldHandle) &
      bind(C, name='YieldsNuclidesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine YieldsNuclidesSet


!! -----------------------------------------------------------------------------
!! Child: values
!! -----------------------------------------------------------------------------

!! Has
function YieldsValuesHas(handle) &
      bind(C, name='YieldsValuesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function YieldsValuesHas

!! Get, const
function YieldsValuesGetConst(handle) &
      bind(C, name='YieldsValuesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function YieldsValuesGetConst

!! Get
function YieldsValuesGet(handle) &
      bind(C, name='YieldsValuesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function YieldsValuesGet

!! Set
subroutine YieldsValuesSet(handle, fieldHandle) &
      bind(C, name='YieldsValuesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine YieldsValuesSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function YieldsUncertaintyHas(handle) &
      bind(C, name='YieldsUncertaintyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function YieldsUncertaintyHas

!! Get, const
function YieldsUncertaintyGetConst(handle) &
      bind(C, name='YieldsUncertaintyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function YieldsUncertaintyGetConst

!! Get
function YieldsUncertaintyGet(handle) &
      bind(C, name='YieldsUncertaintyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function YieldsUncertaintyGet

!! Set
subroutine YieldsUncertaintySet(handle, fieldHandle) &
      bind(C, name='YieldsUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine YieldsUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalYields
