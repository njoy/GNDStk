
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGaugeBosons
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GaugeBosonsDefaultConst() &
      bind(C, name='GaugeBosonsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GaugeBosonsDefaultConst

!! Create, default
function GaugeBosonsDefault() &
      bind(C, name='GaugeBosonsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GaugeBosonsDefault

!! Create, general, const
function GaugeBosonsCreateConst( &
   gaugeBoson, gaugeBosonSize &
) &
      bind(C, name='GaugeBosonsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: gaugeBosonSize
   type(c_ptr) :: gaugeBoson(gaugeBosonSize)
   type(c_ptr) :: handle
end function GaugeBosonsCreateConst

!! Create, general
function GaugeBosonsCreate( &
   gaugeBoson, gaugeBosonSize &
) &
      bind(C, name='GaugeBosonsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: gaugeBosonSize
   type(c_ptr) :: gaugeBoson(gaugeBosonSize)
   type(c_ptr) :: handle
end function GaugeBosonsCreate

!! Assign
subroutine GaugeBosonsAssign(handleLHS, handleRHS) &
      bind(C, name='GaugeBosonsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine GaugeBosonsAssign

!! Delete
subroutine GaugeBosonsDelete(handle) &
      bind(C, name='GaugeBosonsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GaugeBosonsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function GaugeBosonsRead(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GaugeBosonsRead

!! Write to file
function GaugeBosonsWrite(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GaugeBosonsWrite

!! Print to standard output, in our prettyprinting format
function GaugeBosonsPrint(handle) &
      bind(C, name='GaugeBosonsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GaugeBosonsPrint

!! Print to standard output, as XML
function GaugeBosonsPrintXML(handle) &
      bind(C, name='GaugeBosonsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GaugeBosonsPrintXML

!! Print to standard output, as JSON
function GaugeBosonsPrintJSON(handle) &
      bind(C, name='GaugeBosonsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GaugeBosonsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: gaugeBoson
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonsGaugeBosonHas(handle) &
      bind(C, name='GaugeBosonsGaugeBosonHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonsGaugeBosonHas

!! Clear
subroutine GaugeBosonsGaugeBosonClear(handle) &
      bind(C, name='GaugeBosonsGaugeBosonClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GaugeBosonsGaugeBosonClear

!! Size
function GaugeBosonsGaugeBosonSize(handle) &
      bind(C, name='GaugeBosonsGaugeBosonSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function GaugeBosonsGaugeBosonSize

!! Add
subroutine GaugeBosonsGaugeBosonAdd(handle, fieldHandle) &
      bind(C, name='GaugeBosonsGaugeBosonAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonsGaugeBosonAdd

!! Get, by index \in [0,size), const
function GaugeBosonsGaugeBosonGetConst(handle, index) &
      bind(C, name='GaugeBosonsGaugeBosonGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function GaugeBosonsGaugeBosonGetConst

!! Get, by index \in [0,size)
function GaugeBosonsGaugeBosonGet(handle, index) &
      bind(C, name='GaugeBosonsGaugeBosonGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function GaugeBosonsGaugeBosonGet

!! Set, by index \in [0,size)
subroutine GaugeBosonsGaugeBosonSet(handle, index, fieldHandle) &
      bind(C, name='GaugeBosonsGaugeBosonSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonsGaugeBosonSet

!! ------------------------
!! Re: metadatum id
!! ------------------------

!! Has, by id
function GaugeBosonsGaugeBosonHasById(handle, meta, metaSize) &
      bind(C, name='GaugeBosonsGaugeBosonHasById') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function GaugeBosonsGaugeBosonHasById

!! Get, by id, const
function GaugeBosonsGaugeBosonGetByIdConst(handle, meta, metaSize) &
      bind(C, name='GaugeBosonsGaugeBosonGetByIdConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function GaugeBosonsGaugeBosonGetByIdConst

!! Get, by id
function GaugeBosonsGaugeBosonGetById(handle, meta, metaSize) &
      bind(C, name='GaugeBosonsGaugeBosonGetById') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function GaugeBosonsGaugeBosonGetById

!! Set, by id
subroutine GaugeBosonsGaugeBosonSetById(handle, meta, metaSize, fieldHandle) &
      bind(C, name='GaugeBosonsGaugeBosonSetById')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonsGaugeBosonSetById


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGaugeBosons
