
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGaugeBosons
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GaugeBosonsDefaultConst() &
      bind(C, name='GaugeBosonsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: GaugeBosonsDefaultConst
end function GaugeBosonsDefaultConst

!! Create, default, non-const
function GaugeBosonsDefault() &
      bind(C, name='GaugeBosonsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: GaugeBosonsDefault
end function GaugeBosonsDefault

!! Create, general, const
function GaugeBosonsCreateConst( &
   gaugeBoson, gaugeBosonSize &
) &
      bind(C, name='GaugeBosonsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: gaugeBosonSize
   type(c_ptr), intent(in) :: gaugeBoson(gaugeBosonSize)
   type(c_ptr) :: GaugeBosonsCreateConst
end function GaugeBosonsCreateConst

!! Create, general, non-const
function GaugeBosonsCreate( &
   gaugeBoson, gaugeBosonSize &
) &
      bind(C, name='GaugeBosonsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: gaugeBosonSize
   type(c_ptr), intent(in) :: gaugeBoson(gaugeBosonSize)
   type(c_ptr) :: GaugeBosonsCreate
end function GaugeBosonsCreate

!! Assign
subroutine GaugeBosonsAssign(handleLHS, handleRHS) &
      bind(C, name='GaugeBosonsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine GaugeBosonsAssign

!! Delete
subroutine GaugeBosonsDelete(handle) &
      bind(C, name='GaugeBosonsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GaugeBosonsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function GaugeBosonsRead(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: GaugeBosonsRead
end function GaugeBosonsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function GaugeBosonsWrite(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: GaugeBosonsWrite
end function GaugeBosonsWrite

!! Print to standard output, in our prettyprinting format
function GaugeBosonsPrint(handle) &
      bind(C, name='GaugeBosonsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonsPrint
end function GaugeBosonsPrint

!! Print to standard output, as XML
function GaugeBosonsPrintXML(handle) &
      bind(C, name='GaugeBosonsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonsPrintXML
end function GaugeBosonsPrintXML

!! Print to standard output, as JSON
function GaugeBosonsPrintJSON(handle) &
      bind(C, name='GaugeBosonsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonsPrintJSON
end function GaugeBosonsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: gaugeBoson
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonsGaugeBosonHas(handle) &
      bind(C, name='GaugeBosonsGaugeBosonHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonsGaugeBosonHas
end function GaugeBosonsGaugeBosonHas

!! Clear
subroutine GaugeBosonsGaugeBosonClear(handle) &
      bind(C, name='GaugeBosonsGaugeBosonClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GaugeBosonsGaugeBosonClear

!! Size
function GaugeBosonsGaugeBosonSize(handle) &
      bind(C, name='GaugeBosonsGaugeBosonSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: GaugeBosonsGaugeBosonSize
end function GaugeBosonsGaugeBosonSize

!! Add
subroutine GaugeBosonsGaugeBosonAdd(handle, fieldHandle) &
      bind(C, name='GaugeBosonsGaugeBosonAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonsGaugeBosonAdd

!! Get, by index \in [0,size), const
function GaugeBosonsGaugeBosonGetConst(handle, index) &
      bind(C, name='GaugeBosonsGaugeBosonGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: GaugeBosonsGaugeBosonGetConst
end function GaugeBosonsGaugeBosonGetConst

!! Get, by index \in [0,size), non-const
function GaugeBosonsGaugeBosonGet(handle, index) &
      bind(C, name='GaugeBosonsGaugeBosonGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: GaugeBosonsGaugeBosonGet
end function GaugeBosonsGaugeBosonGet

!! Set, by index \in [0,size)
subroutine GaugeBosonsGaugeBosonSet(handle, index, fieldHandle) &
      bind(C, name='GaugeBosonsGaugeBosonSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonsGaugeBosonSet

!! ------------------------
!! Re: metadatum id
!! ------------------------

!! Has, by id
function GaugeBosonsGaugeBosonHasById(handle, meta, metaSize) &
      bind(C, name='GaugeBosonsGaugeBosonHasById')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: GaugeBosonsGaugeBosonHasById
end function GaugeBosonsGaugeBosonHasById

!! Get, by id, const
function GaugeBosonsGaugeBosonGetByIdConst(handle, meta, metaSize) &
      bind(C, name='GaugeBosonsGaugeBosonGetByIdConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: GaugeBosonsGaugeBosonGetByIdConst
end function GaugeBosonsGaugeBosonGetByIdConst

!! Get, by id, non-const
function GaugeBosonsGaugeBosonGetById(handle, meta, metaSize) &
      bind(C, name='GaugeBosonsGaugeBosonGetById')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: GaugeBosonsGaugeBosonGetById
end function GaugeBosonsGaugeBosonGetById

!! Set, by id
subroutine GaugeBosonsGaugeBosonSetById(handle, meta, metaSize, fieldHandle) &
      bind(C, name='GaugeBosonsGaugeBosonSetById')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonsGaugeBosonSetById


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGaugeBosons
