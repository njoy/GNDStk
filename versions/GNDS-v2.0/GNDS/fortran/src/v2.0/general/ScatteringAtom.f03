
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalScatteringAtom
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ScatteringAtomDefaultConst() &
      bind(C, name='ScatteringAtomDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ScatteringAtomDefaultConst

!! Create, default
function ScatteringAtomDefault() &
      bind(C, name='ScatteringAtomDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ScatteringAtomDefault

!! Create, general, const
function ScatteringAtomCreateConst( &
   pid, &
   numberPerMolecule, &
   primaryScatterer, &
   mass, &
   e_critical, &
   e_max, &
   boundAtomCrossSection, &
   selfScatteringKernel, &
   T_effective, &
   pidSize &
) &
      bind(C, name='ScatteringAtomCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_int), value, intent(in) :: numberPerMolecule
   integer(c_bool), value, intent(in) :: primaryScatterer
   type(c_ptr), value :: mass
   type(c_ptr), value :: e_critical
   type(c_ptr), value :: e_max
   type(c_ptr), value :: boundAtomCrossSection
   type(c_ptr), value :: selfScatteringKernel
   type(c_ptr), value :: T_effective
   type(c_ptr) :: handle
end function ScatteringAtomCreateConst

!! Create, general
function ScatteringAtomCreate( &
   pid, &
   numberPerMolecule, &
   primaryScatterer, &
   mass, &
   e_critical, &
   e_max, &
   boundAtomCrossSection, &
   selfScatteringKernel, &
   T_effective, &
   pidSize &
) &
      bind(C, name='ScatteringAtomCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_int), value, intent(in) :: numberPerMolecule
   integer(c_bool), value, intent(in) :: primaryScatterer
   type(c_ptr), value :: mass
   type(c_ptr), value :: e_critical
   type(c_ptr), value :: e_max
   type(c_ptr), value :: boundAtomCrossSection
   type(c_ptr), value :: selfScatteringKernel
   type(c_ptr), value :: T_effective
   type(c_ptr) :: handle
end function ScatteringAtomCreate

!! Assign
subroutine ScatteringAtomAssign(handleLHS, handleRHS) &
      bind(C, name='ScatteringAtomAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ScatteringAtomAssign

!! Delete
subroutine ScatteringAtomDelete(handle) &
      bind(C, name='ScatteringAtomDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringAtomDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ScatteringAtomRead(handle, filename, filenameSize) &
      bind(C, name='ScatteringAtomRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ScatteringAtomRead

!! Write to file
function ScatteringAtomWrite(handle, filename, filenameSize) &
      bind(C, name='ScatteringAtomWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ScatteringAtomWrite

!! Print to standard output, in our prettyprinting format
function ScatteringAtomPrint(handle) &
      bind(C, name='ScatteringAtomPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringAtomPrint

!! Print to standard output, as XML
function ScatteringAtomPrintXML(handle) &
      bind(C, name='ScatteringAtomPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringAtomPrintXML

!! Print to standard output, as JSON
function ScatteringAtomPrintJSON(handle) &
      bind(C, name='ScatteringAtomPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringAtomPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: pid
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomPidHas(handle) &
      bind(C, name='ScatteringAtomPidHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomPidHas

!! Get
function ScatteringAtomPidGet(handle) &
      bind(C, name='ScatteringAtomPidGet') &
      result(pid)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: pid
end function ScatteringAtomPidGet

!! Set
subroutine ScatteringAtomPidSet(handle, pid, pidSize) &
      bind(C, name='ScatteringAtomPidSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
end subroutine ScatteringAtomPidSet


!! -----------------------------------------------------------------------------
!! Metadatum: numberPerMolecule
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomNumberPerMoleculeHas(handle) &
      bind(C, name='ScatteringAtomNumberPerMoleculeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomNumberPerMoleculeHas

!! Get
function ScatteringAtomNumberPerMoleculeGet(handle) &
      bind(C, name='ScatteringAtomNumberPerMoleculeGet') &
      result(numberPerMolecule)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: numberPerMolecule
end function ScatteringAtomNumberPerMoleculeGet

!! Set
subroutine ScatteringAtomNumberPerMoleculeSet(handle, numberPerMolecule, numberPerMoleculeSize) &
      bind(C, name='ScatteringAtomNumberPerMoleculeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: numberPerMoleculeSize
   character(c_char), intent(in) :: numberPerMolecule(numberPerMoleculeSize)
end subroutine ScatteringAtomNumberPerMoleculeSet


!! -----------------------------------------------------------------------------
!! Metadatum: primaryScatterer
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomPrimaryScattererHas(handle) &
      bind(C, name='ScatteringAtomPrimaryScattererHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomPrimaryScattererHas

!! Get
function ScatteringAtomPrimaryScattererGet(handle) &
      bind(C, name='ScatteringAtomPrimaryScattererGet') &
      result(primaryScatterer)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_bool) :: primaryScatterer
end function ScatteringAtomPrimaryScattererGet

!! Set
subroutine ScatteringAtomPrimaryScattererSet(handle, primaryScatterer, primaryScattererSize) &
      bind(C, name='ScatteringAtomPrimaryScattererSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: primaryScattererSize
   character(c_char), intent(in) :: primaryScatterer(primaryScattererSize)
end subroutine ScatteringAtomPrimaryScattererSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomMassHas(handle) &
      bind(C, name='ScatteringAtomMassHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomMassHas

!! Get, const
function ScatteringAtomMassGetConst(handle) &
      bind(C, name='ScatteringAtomMassGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomMassGetConst

!! Get
function ScatteringAtomMassGet(handle) &
      bind(C, name='ScatteringAtomMassGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomMassGet

!! Set
subroutine ScatteringAtomMassSet(handle, fieldHandle) &
      bind(C, name='ScatteringAtomMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringAtomMassSet


!! -----------------------------------------------------------------------------
!! Child: e_critical
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomE_criticalHas(handle) &
      bind(C, name='ScatteringAtomE_criticalHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomE_criticalHas

!! Get, const
function ScatteringAtomE_criticalGetConst(handle) &
      bind(C, name='ScatteringAtomE_criticalGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomE_criticalGetConst

!! Get
function ScatteringAtomE_criticalGet(handle) &
      bind(C, name='ScatteringAtomE_criticalGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomE_criticalGet

!! Set
subroutine ScatteringAtomE_criticalSet(handle, fieldHandle) &
      bind(C, name='ScatteringAtomE_criticalSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringAtomE_criticalSet


!! -----------------------------------------------------------------------------
!! Child: e_max
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomE_maxHas(handle) &
      bind(C, name='ScatteringAtomE_maxHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomE_maxHas

!! Get, const
function ScatteringAtomE_maxGetConst(handle) &
      bind(C, name='ScatteringAtomE_maxGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomE_maxGetConst

!! Get
function ScatteringAtomE_maxGet(handle) &
      bind(C, name='ScatteringAtomE_maxGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomE_maxGet

!! Set
subroutine ScatteringAtomE_maxSet(handle, fieldHandle) &
      bind(C, name='ScatteringAtomE_maxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringAtomE_maxSet


!! -----------------------------------------------------------------------------
!! Child: boundAtomCrossSection
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomBoundAtomCrossSectionHas(handle) &
      bind(C, name='ScatteringAtomBoundAtomCrossSectionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomBoundAtomCrossSectionHas

!! Get, const
function ScatteringAtomBoundAtomCrossSectionGetConst(handle) &
      bind(C, name='ScatteringAtomBoundAtomCrossSectionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomBoundAtomCrossSectionGetConst

!! Get
function ScatteringAtomBoundAtomCrossSectionGet(handle) &
      bind(C, name='ScatteringAtomBoundAtomCrossSectionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomBoundAtomCrossSectionGet

!! Set
subroutine ScatteringAtomBoundAtomCrossSectionSet(handle, fieldHandle) &
      bind(C, name='ScatteringAtomBoundAtomCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringAtomBoundAtomCrossSectionSet


!! -----------------------------------------------------------------------------
!! Child: selfScatteringKernel
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomSelfScatteringKernelHas(handle) &
      bind(C, name='ScatteringAtomSelfScatteringKernelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomSelfScatteringKernelHas

!! Get, const
function ScatteringAtomSelfScatteringKernelGetConst(handle) &
      bind(C, name='ScatteringAtomSelfScatteringKernelGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomSelfScatteringKernelGetConst

!! Get
function ScatteringAtomSelfScatteringKernelGet(handle) &
      bind(C, name='ScatteringAtomSelfScatteringKernelGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomSelfScatteringKernelGet

!! Set
subroutine ScatteringAtomSelfScatteringKernelSet(handle, fieldHandle) &
      bind(C, name='ScatteringAtomSelfScatteringKernelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringAtomSelfScatteringKernelSet


!! -----------------------------------------------------------------------------
!! Child: T_effective
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomT_effectiveHas(handle) &
      bind(C, name='ScatteringAtomT_effectiveHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomT_effectiveHas

!! Get, const
function ScatteringAtomT_effectiveGetConst(handle) &
      bind(C, name='ScatteringAtomT_effectiveGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomT_effectiveGetConst

!! Get
function ScatteringAtomT_effectiveGet(handle) &
      bind(C, name='ScatteringAtomT_effectiveGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringAtomT_effectiveGet

!! Set
subroutine ScatteringAtomT_effectiveSet(handle, fieldHandle) &
      bind(C, name='ScatteringAtomT_effectiveSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringAtomT_effectiveSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalScatteringAtom
