
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBranching3d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Branching3dDefaultConst() &
      bind(C, name='Branching3dDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function Branching3dDefaultConst

!! Create, default
function Branching3dDefault() &
      bind(C, name='Branching3dDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function Branching3dDefault

!! Create, general, const
function Branching3dCreateConst( &
   label, &
   productFrame, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='Branching3dCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr) :: handle
end function Branching3dCreateConst

!! Create, general
function Branching3dCreate( &
   label, &
   productFrame, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='Branching3dCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr) :: handle
end function Branching3dCreate

!! Assign
subroutine Branching3dAssign(handleLHS, handleRHS) &
      bind(C, name='Branching3dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine Branching3dAssign

!! Delete
subroutine Branching3dDelete(handle) &
      bind(C, name='Branching3dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Branching3dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function Branching3dRead(handle, filename, filenameSize) &
      bind(C, name='Branching3dRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function Branching3dRead

!! Write to file
function Branching3dWrite(handle, filename, filenameSize) &
      bind(C, name='Branching3dWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function Branching3dWrite

!! Print to standard output, in our prettyprinting format
function Branching3dPrint(handle) &
      bind(C, name='Branching3dPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function Branching3dPrint

!! Print to standard output, as XML
function Branching3dPrintXML(handle) &
      bind(C, name='Branching3dPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function Branching3dPrintXML

!! Print to standard output, as JSON
function Branching3dPrintJSON(handle) &
      bind(C, name='Branching3dPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function Branching3dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function Branching3dLabelHas(handle) &
      bind(C, name='Branching3dLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function Branching3dLabelHas

!! Get
function Branching3dLabelGet(handle) &
      bind(C, name='Branching3dLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function Branching3dLabelGet

!! Set
subroutine Branching3dLabelSet(handle, label, labelSize) &
      bind(C, name='Branching3dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine Branching3dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function Branching3dProductFrameHas(handle) &
      bind(C, name='Branching3dProductFrameHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function Branching3dProductFrameHas

!! Get
function Branching3dProductFrameGet(handle) &
      bind(C, name='Branching3dProductFrameGet') &
      result(productFrame)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: productFrame
end function Branching3dProductFrameGet

!! Set
subroutine Branching3dProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='Branching3dProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine Branching3dProductFrameSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBranching3d
