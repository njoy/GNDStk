
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIncidentEnergies
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IncidentEnergiesDefaultConst() &
      bind(C, name='IncidentEnergiesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IncidentEnergiesDefaultConst
end function IncidentEnergiesDefaultConst

!! Create, default, non-const
function IncidentEnergiesDefault() &
      bind(C, name='IncidentEnergiesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IncidentEnergiesDefault
end function IncidentEnergiesDefault

!! Create, general, const
function IncidentEnergiesCreateConst( &
   incidentEnergy, incidentEnergySize &
) &
      bind(C, name='IncidentEnergiesCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: incidentEnergySize
   type(c_ptr), intent(in) :: incidentEnergy(incidentEnergySize)
   type(c_ptr) :: IncidentEnergiesCreateConst
end function IncidentEnergiesCreateConst

!! Create, general, non-const
function IncidentEnergiesCreate( &
   incidentEnergy, incidentEnergySize &
) &
      bind(C, name='IncidentEnergiesCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: incidentEnergySize
   type(c_ptr), intent(in) :: incidentEnergy(incidentEnergySize)
   type(c_ptr) :: IncidentEnergiesCreate
end function IncidentEnergiesCreate

!! Assign
subroutine IncidentEnergiesAssign(handleLHS, handleRHS) &
      bind(C, name='IncidentEnergiesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine IncidentEnergiesAssign

!! Delete
subroutine IncidentEnergiesDelete(handle) &
      bind(C, name='IncidentEnergiesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IncidentEnergiesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function IncidentEnergiesRead(handle, filename, filenameSize) &
      bind(C, name='IncidentEnergiesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IncidentEnergiesRead
end function IncidentEnergiesRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function IncidentEnergiesWrite(handle, filename, filenameSize) &
      bind(C, name='IncidentEnergiesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IncidentEnergiesWrite
end function IncidentEnergiesWrite

!! Print to standard output, in our prettyprinting format
function IncidentEnergiesPrint(handle) &
      bind(C, name='IncidentEnergiesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IncidentEnergiesPrint
end function IncidentEnergiesPrint

!! Print to standard output, as XML
function IncidentEnergiesPrintXML(handle) &
      bind(C, name='IncidentEnergiesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IncidentEnergiesPrintXML
end function IncidentEnergiesPrintXML

!! Print to standard output, as JSON
function IncidentEnergiesPrintJSON(handle) &
      bind(C, name='IncidentEnergiesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IncidentEnergiesPrintJSON
end function IncidentEnergiesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: incidentEnergy
!! -----------------------------------------------------------------------------

!! Has
function IncidentEnergiesIncidentEnergyHas(handle) &
      bind(C, name='IncidentEnergiesIncidentEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IncidentEnergiesIncidentEnergyHas
end function IncidentEnergiesIncidentEnergyHas

!! Clear
subroutine IncidentEnergiesIncidentEnergyClear(handle) &
      bind(C, name='IncidentEnergiesIncidentEnergyClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IncidentEnergiesIncidentEnergyClear

!! Size
function IncidentEnergiesIncidentEnergySize(handle) &
      bind(C, name='IncidentEnergiesIncidentEnergySize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: IncidentEnergiesIncidentEnergySize
end function IncidentEnergiesIncidentEnergySize

!! Add
subroutine IncidentEnergiesIncidentEnergyAdd(handle, fieldHandle) &
      bind(C, name='IncidentEnergiesIncidentEnergyAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IncidentEnergiesIncidentEnergyAdd

!! Get, by index \in [0,size), const
function IncidentEnergiesIncidentEnergyGetConst(handle, index) &
      bind(C, name='IncidentEnergiesIncidentEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: IncidentEnergiesIncidentEnergyGetConst
end function IncidentEnergiesIncidentEnergyGetConst

!! Get, by index \in [0,size), non-const
function IncidentEnergiesIncidentEnergyGet(handle, index) &
      bind(C, name='IncidentEnergiesIncidentEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: IncidentEnergiesIncidentEnergyGet
end function IncidentEnergiesIncidentEnergyGet

!! Set, by index \in [0,size)
subroutine IncidentEnergiesIncidentEnergySet(handle, index, fieldHandle) &
      bind(C, name='IncidentEnergiesIncidentEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IncidentEnergiesIncidentEnergySet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function IncidentEnergiesIncidentEnergyHasByLabel(handle, meta, metaSize) &
      bind(C, name='IncidentEnergiesIncidentEnergyHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: IncidentEnergiesIncidentEnergyHasByLabel
end function IncidentEnergiesIncidentEnergyHasByLabel

!! Get, by label, const
function IncidentEnergiesIncidentEnergyGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='IncidentEnergiesIncidentEnergyGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: IncidentEnergiesIncidentEnergyGetByLabelConst
end function IncidentEnergiesIncidentEnergyGetByLabelConst

!! Get, by label, non-const
function IncidentEnergiesIncidentEnergyGetByLabel(handle, meta, metaSize) &
      bind(C, name='IncidentEnergiesIncidentEnergyGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: IncidentEnergiesIncidentEnergyGetByLabel
end function IncidentEnergiesIncidentEnergyGetByLabel

!! Set, by label
subroutine IncidentEnergiesIncidentEnergySetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='IncidentEnergiesIncidentEnergySetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IncidentEnergiesIncidentEnergySetByLabel


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIncidentEnergies
