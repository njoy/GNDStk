
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIncidentEnergies
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IncidentEnergiesDefaultConst() &
      bind(C, name='IncidentEnergiesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IncidentEnergiesDefaultConst

!! Create, default
function IncidentEnergiesDefault() &
      bind(C, name='IncidentEnergiesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IncidentEnergiesDefault

!! Create, general, const
function IncidentEnergiesCreateConst( &
   incidentEnergy, incidentEnergySize &
) &
      bind(C, name='IncidentEnergiesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: incidentEnergySize
   type(c_ptr) :: incidentEnergy(incidentEnergySize)
   type(c_ptr) :: handle
end function IncidentEnergiesCreateConst

!! Create, general
function IncidentEnergiesCreate( &
   incidentEnergy, incidentEnergySize &
) &
      bind(C, name='IncidentEnergiesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: incidentEnergySize
   type(c_ptr) :: incidentEnergy(incidentEnergySize)
   type(c_ptr) :: handle
end function IncidentEnergiesCreate

!! Assign
subroutine IncidentEnergiesAssign(handleLHS, handleRHS) &
      bind(C, name='IncidentEnergiesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine IncidentEnergiesAssign

!! Delete
subroutine IncidentEnergiesDelete(handle) &
      bind(C, name='IncidentEnergiesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IncidentEnergiesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function IncidentEnergiesRead(handle, filename, filenameSize) &
      bind(C, name='IncidentEnergiesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IncidentEnergiesRead

!! Write to file
function IncidentEnergiesWrite(handle, filename, filenameSize) &
      bind(C, name='IncidentEnergiesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IncidentEnergiesWrite

!! Print to standard output, in our prettyprinting format
function IncidentEnergiesPrint(handle) &
      bind(C, name='IncidentEnergiesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IncidentEnergiesPrint

!! Print to standard output, as XML
function IncidentEnergiesPrintXML(handle) &
      bind(C, name='IncidentEnergiesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IncidentEnergiesPrintXML

!! Print to standard output, as JSON
function IncidentEnergiesPrintJSON(handle) &
      bind(C, name='IncidentEnergiesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IncidentEnergiesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: incidentEnergy
!! -----------------------------------------------------------------------------

!! Has
function IncidentEnergiesIncidentEnergyHas(handle) &
      bind(C, name='IncidentEnergiesIncidentEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IncidentEnergiesIncidentEnergyHas

!! Clear
subroutine IncidentEnergiesIncidentEnergyClear(handle) &
      bind(C, name='IncidentEnergiesIncidentEnergyClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IncidentEnergiesIncidentEnergyClear

!! Size
function IncidentEnergiesIncidentEnergySize(handle) &
      bind(C, name='IncidentEnergiesIncidentEnergySize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function IncidentEnergiesIncidentEnergySize

!! Add
subroutine IncidentEnergiesIncidentEnergyAdd(handle, fieldHandle) &
      bind(C, name='IncidentEnergiesIncidentEnergyAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IncidentEnergiesIncidentEnergyAdd

!! Get, by index \in [0,size), const
function IncidentEnergiesIncidentEnergyGetConst(handle, index) &
      bind(C, name='IncidentEnergiesIncidentEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function IncidentEnergiesIncidentEnergyGetConst

!! Get, by index \in [0,size)
function IncidentEnergiesIncidentEnergyGet(handle, index) &
      bind(C, name='IncidentEnergiesIncidentEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function IncidentEnergiesIncidentEnergyGet

!! Set, by index \in [0,size)
subroutine IncidentEnergiesIncidentEnergySet(handle, index, fieldHandle) &
      bind(C, name='IncidentEnergiesIncidentEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IncidentEnergiesIncidentEnergySet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function IncidentEnergiesIncidentEnergyHasByLabel(handle, meta, metaSize) &
      bind(C, name='IncidentEnergiesIncidentEnergyHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function IncidentEnergiesIncidentEnergyHasByLabel

!! Get, by label, const
function IncidentEnergiesIncidentEnergyGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='IncidentEnergiesIncidentEnergyGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function IncidentEnergiesIncidentEnergyGetByLabelConst

!! Get, by label
function IncidentEnergiesIncidentEnergyGetByLabel(handle, meta, metaSize) &
      bind(C, name='IncidentEnergiesIncidentEnergyGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function IncidentEnergiesIncidentEnergyGetByLabel

!! Set, by label
subroutine IncidentEnergiesIncidentEnergySetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='IncidentEnergiesIncidentEnergySetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IncidentEnergiesIncidentEnergySetByLabel


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIncidentEnergies
