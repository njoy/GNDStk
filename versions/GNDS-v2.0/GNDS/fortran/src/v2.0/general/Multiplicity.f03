
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalMultiplicity
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function MultiplicityDefaultConst() &
      bind(C, name='MultiplicityDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MultiplicityDefaultConst
end function MultiplicityDefaultConst

!! Create, default
function MultiplicityDefault() &
      bind(C, name='MultiplicityDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MultiplicityDefault
end function MultiplicityDefault

!! Create, general, const
function MultiplicityCreateConst( &
   constant1d, &
   XYs1d, &
   regions1d, &
   polynomial1d, &
   reference, &
   branching1d, &
   branching3d, &
   unspecified &
) &
      bind(C, name='MultiplicityCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: constant1d
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: reference
   type(c_ptr), value :: branching1d
   type(c_ptr), value :: branching3d
   type(c_ptr), value :: unspecified
   type(c_ptr) :: MultiplicityCreateConst
end function MultiplicityCreateConst

!! Create, general
function MultiplicityCreate( &
   constant1d, &
   XYs1d, &
   regions1d, &
   polynomial1d, &
   reference, &
   branching1d, &
   branching3d, &
   unspecified &
) &
      bind(C, name='MultiplicityCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: constant1d
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: reference
   type(c_ptr), value :: branching1d
   type(c_ptr), value :: branching3d
   type(c_ptr), value :: unspecified
   type(c_ptr) :: MultiplicityCreate
end function MultiplicityCreate

!! Assign
subroutine MultiplicityAssign(handleLHS, handleRHS) &
      bind(C, name='MultiplicityAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine MultiplicityAssign

!! Delete
subroutine MultiplicityDelete(handle) &
      bind(C, name='MultiplicityDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MultiplicityDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function MultiplicityRead(handle, filename, filenameSize) &
      bind(C, name='MultiplicityRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MultiplicityRead
end function MultiplicityRead

!! Write to file
function MultiplicityWrite(handle, filename, filenameSize) &
      bind(C, name='MultiplicityWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MultiplicityWrite
end function MultiplicityWrite

!! Print to standard output, in our prettyprinting format
function MultiplicityPrint(handle) &
      bind(C, name='MultiplicityPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityPrint
end function MultiplicityPrint

!! Print to standard output, as XML
function MultiplicityPrintXML(handle) &
      bind(C, name='MultiplicityPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityPrintXML
end function MultiplicityPrintXML

!! Print to standard output, as JSON
function MultiplicityPrintJSON(handle) &
      bind(C, name='MultiplicityPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityPrintJSON
end function MultiplicityPrintJSON


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityConstant1dHas(handle) &
      bind(C, name='MultiplicityConstant1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityConstant1dHas
end function MultiplicityConstant1dHas

!! Get, const
function MultiplicityConstant1dGetConst(handle) &
      bind(C, name='MultiplicityConstant1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityConstant1dGetConst
end function MultiplicityConstant1dGetConst

!! Get
function MultiplicityConstant1dGet(handle) &
      bind(C, name='MultiplicityConstant1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityConstant1dGet
end function MultiplicityConstant1dGet

!! Set
subroutine MultiplicityConstant1dSet(handle, fieldHandle) &
      bind(C, name='MultiplicityConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityConstant1dSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityXYs1dHas(handle) &
      bind(C, name='MultiplicityXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityXYs1dHas
end function MultiplicityXYs1dHas

!! Get, const
function MultiplicityXYs1dGetConst(handle) &
      bind(C, name='MultiplicityXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityXYs1dGetConst
end function MultiplicityXYs1dGetConst

!! Get
function MultiplicityXYs1dGet(handle) &
      bind(C, name='MultiplicityXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityXYs1dGet
end function MultiplicityXYs1dGet

!! Set
subroutine MultiplicityXYs1dSet(handle, fieldHandle) &
      bind(C, name='MultiplicityXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityRegions1dHas(handle) &
      bind(C, name='MultiplicityRegions1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityRegions1dHas
end function MultiplicityRegions1dHas

!! Get, const
function MultiplicityRegions1dGetConst(handle) &
      bind(C, name='MultiplicityRegions1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityRegions1dGetConst
end function MultiplicityRegions1dGetConst

!! Get
function MultiplicityRegions1dGet(handle) &
      bind(C, name='MultiplicityRegions1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityRegions1dGet
end function MultiplicityRegions1dGet

!! Set
subroutine MultiplicityRegions1dSet(handle, fieldHandle) &
      bind(C, name='MultiplicityRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityRegions1dSet


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityPolynomial1dHas(handle) &
      bind(C, name='MultiplicityPolynomial1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityPolynomial1dHas
end function MultiplicityPolynomial1dHas

!! Get, const
function MultiplicityPolynomial1dGetConst(handle) &
      bind(C, name='MultiplicityPolynomial1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityPolynomial1dGetConst
end function MultiplicityPolynomial1dGetConst

!! Get
function MultiplicityPolynomial1dGet(handle) &
      bind(C, name='MultiplicityPolynomial1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityPolynomial1dGet
end function MultiplicityPolynomial1dGet

!! Set
subroutine MultiplicityPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='MultiplicityPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityPolynomial1dSet


!! -----------------------------------------------------------------------------
!! Child: reference
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityReferenceHas(handle) &
      bind(C, name='MultiplicityReferenceHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityReferenceHas
end function MultiplicityReferenceHas

!! Get, const
function MultiplicityReferenceGetConst(handle) &
      bind(C, name='MultiplicityReferenceGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityReferenceGetConst
end function MultiplicityReferenceGetConst

!! Get
function MultiplicityReferenceGet(handle) &
      bind(C, name='MultiplicityReferenceGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityReferenceGet
end function MultiplicityReferenceGet

!! Set
subroutine MultiplicityReferenceSet(handle, fieldHandle) &
      bind(C, name='MultiplicityReferenceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityReferenceSet


!! -----------------------------------------------------------------------------
!! Child: branching1d
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityBranching1dHas(handle) &
      bind(C, name='MultiplicityBranching1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityBranching1dHas
end function MultiplicityBranching1dHas

!! Get, const
function MultiplicityBranching1dGetConst(handle) &
      bind(C, name='MultiplicityBranching1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityBranching1dGetConst
end function MultiplicityBranching1dGetConst

!! Get
function MultiplicityBranching1dGet(handle) &
      bind(C, name='MultiplicityBranching1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityBranching1dGet
end function MultiplicityBranching1dGet

!! Set
subroutine MultiplicityBranching1dSet(handle, fieldHandle) &
      bind(C, name='MultiplicityBranching1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityBranching1dSet


!! -----------------------------------------------------------------------------
!! Child: branching3d
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityBranching3dHas(handle) &
      bind(C, name='MultiplicityBranching3dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityBranching3dHas
end function MultiplicityBranching3dHas

!! Get, const
function MultiplicityBranching3dGetConst(handle) &
      bind(C, name='MultiplicityBranching3dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityBranching3dGetConst
end function MultiplicityBranching3dGetConst

!! Get
function MultiplicityBranching3dGet(handle) &
      bind(C, name='MultiplicityBranching3dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityBranching3dGet
end function MultiplicityBranching3dGet

!! Set
subroutine MultiplicityBranching3dSet(handle, fieldHandle) &
      bind(C, name='MultiplicityBranching3dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityBranching3dSet


!! -----------------------------------------------------------------------------
!! Child: unspecified
!! -----------------------------------------------------------------------------

!! Has
function MultiplicityUnspecifiedHas(handle) &
      bind(C, name='MultiplicityUnspecifiedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MultiplicityUnspecifiedHas
end function MultiplicityUnspecifiedHas

!! Get, const
function MultiplicityUnspecifiedGetConst(handle) &
      bind(C, name='MultiplicityUnspecifiedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityUnspecifiedGetConst
end function MultiplicityUnspecifiedGetConst

!! Get
function MultiplicityUnspecifiedGet(handle) &
      bind(C, name='MultiplicityUnspecifiedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MultiplicityUnspecifiedGet
end function MultiplicityUnspecifiedGet

!! Set
subroutine MultiplicityUnspecifiedSet(handle, fieldHandle) &
      bind(C, name='MultiplicityUnspecifiedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MultiplicityUnspecifiedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalMultiplicity
