
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBackground
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BackgroundDefaultConst() &
      bind(C, name='BackgroundDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function BackgroundDefaultConst

!! Create, default
function BackgroundDefault() &
      bind(C, name='BackgroundDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function BackgroundDefault

!! Create, general, const
function BackgroundCreateConst( &
   resolvedRegion, &
   fastRegion, &
   unresolvedRegion &
) &
      bind(C, name='BackgroundCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: resolvedRegion
   type(c_ptr), value :: fastRegion
   type(c_ptr), value :: unresolvedRegion
   type(c_ptr) :: handle
end function BackgroundCreateConst

!! Create, general
function BackgroundCreate( &
   resolvedRegion, &
   fastRegion, &
   unresolvedRegion &
) &
      bind(C, name='BackgroundCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: resolvedRegion
   type(c_ptr), value :: fastRegion
   type(c_ptr), value :: unresolvedRegion
   type(c_ptr) :: handle
end function BackgroundCreate

!! Assign
subroutine BackgroundAssign(handleLHS, handleRHS) &
      bind(C, name='BackgroundAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine BackgroundAssign

!! Delete
subroutine BackgroundDelete(handle) &
      bind(C, name='BackgroundDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BackgroundDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function BackgroundRead(handle, filename, filenameSize) &
      bind(C, name='BackgroundRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function BackgroundRead

!! Write to file
function BackgroundWrite(handle, filename, filenameSize) &
      bind(C, name='BackgroundWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function BackgroundWrite

!! Print to standard output, in our prettyprinting format
function BackgroundPrint(handle) &
      bind(C, name='BackgroundPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function BackgroundPrint

!! Print to standard output, as XML
function BackgroundPrintXML(handle) &
      bind(C, name='BackgroundPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function BackgroundPrintXML

!! Print to standard output, as JSON
function BackgroundPrintJSON(handle) &
      bind(C, name='BackgroundPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function BackgroundPrintJSON


!! -----------------------------------------------------------------------------
!! Child: resolvedRegion
!! -----------------------------------------------------------------------------

!! Has
function BackgroundResolvedRegionHas(handle) &
      bind(C, name='BackgroundResolvedRegionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function BackgroundResolvedRegionHas

!! Get, const
function BackgroundResolvedRegionGetConst(handle) &
      bind(C, name='BackgroundResolvedRegionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function BackgroundResolvedRegionGetConst

!! Get
function BackgroundResolvedRegionGet(handle) &
      bind(C, name='BackgroundResolvedRegionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function BackgroundResolvedRegionGet

!! Set
subroutine BackgroundResolvedRegionSet(handle, fieldHandle) &
      bind(C, name='BackgroundResolvedRegionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine BackgroundResolvedRegionSet


!! -----------------------------------------------------------------------------
!! Child: fastRegion
!! -----------------------------------------------------------------------------

!! Has
function BackgroundFastRegionHas(handle) &
      bind(C, name='BackgroundFastRegionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function BackgroundFastRegionHas

!! Get, const
function BackgroundFastRegionGetConst(handle) &
      bind(C, name='BackgroundFastRegionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function BackgroundFastRegionGetConst

!! Get
function BackgroundFastRegionGet(handle) &
      bind(C, name='BackgroundFastRegionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function BackgroundFastRegionGet

!! Set
subroutine BackgroundFastRegionSet(handle, fieldHandle) &
      bind(C, name='BackgroundFastRegionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine BackgroundFastRegionSet


!! -----------------------------------------------------------------------------
!! Child: unresolvedRegion
!! -----------------------------------------------------------------------------

!! Has
function BackgroundUnresolvedRegionHas(handle) &
      bind(C, name='BackgroundUnresolvedRegionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function BackgroundUnresolvedRegionHas

!! Get, const
function BackgroundUnresolvedRegionGetConst(handle) &
      bind(C, name='BackgroundUnresolvedRegionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function BackgroundUnresolvedRegionGetConst

!! Get
function BackgroundUnresolvedRegionGet(handle) &
      bind(C, name='BackgroundUnresolvedRegionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function BackgroundUnresolvedRegionGet

!! Set
subroutine BackgroundUnresolvedRegionSet(handle, fieldHandle) &
      bind(C, name='BackgroundUnresolvedRegionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine BackgroundUnresolvedRegionSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBackground
