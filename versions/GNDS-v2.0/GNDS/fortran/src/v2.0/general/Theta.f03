
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalTheta
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ThetaDefaultConst() &
      bind(C, name='ThetaDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ThetaDefaultConst
end function ThetaDefaultConst

!! Create, default
function ThetaDefault() &
      bind(C, name='ThetaDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ThetaDefault
end function ThetaDefault

!! Create, general, const
function ThetaCreateConst( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ThetaCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: ThetaCreateConst
end function ThetaCreateConst

!! Create, general
function ThetaCreate( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ThetaCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: ThetaCreate
end function ThetaCreate

!! Assign
subroutine ThetaAssign(handleLHS, handleRHS) &
      bind(C, name='ThetaAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ThetaAssign

!! Delete
subroutine ThetaDelete(handle) &
      bind(C, name='ThetaDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ThetaDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ThetaRead(handle, filename, filenameSize) &
      bind(C, name='ThetaRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ThetaRead
end function ThetaRead

!! Write to file
function ThetaWrite(handle, filename, filenameSize) &
      bind(C, name='ThetaWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ThetaWrite
end function ThetaWrite

!! Print to standard output, in our prettyprinting format
function ThetaPrint(handle) &
      bind(C, name='ThetaPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThetaPrint
end function ThetaPrint

!! Print to standard output, as XML
function ThetaPrintXML(handle) &
      bind(C, name='ThetaPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThetaPrintXML
end function ThetaPrintXML

!! Print to standard output, as JSON
function ThetaPrintJSON(handle) &
      bind(C, name='ThetaPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThetaPrintJSON
end function ThetaPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ThetaXYs1dHas(handle) &
      bind(C, name='ThetaXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThetaXYs1dHas
end function ThetaXYs1dHas

!! Get, const
function ThetaXYs1dGetConst(handle) &
      bind(C, name='ThetaXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ThetaXYs1dGetConst
end function ThetaXYs1dGetConst

!! Get
function ThetaXYs1dGet(handle) &
      bind(C, name='ThetaXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ThetaXYs1dGet
end function ThetaXYs1dGet

!! Set
subroutine ThetaXYs1dSet(handle, fieldHandle) &
      bind(C, name='ThetaXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ThetaXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function ThetaRegions1dHas(handle) &
      bind(C, name='ThetaRegions1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThetaRegions1dHas
end function ThetaRegions1dHas

!! Get, const
function ThetaRegions1dGetConst(handle) &
      bind(C, name='ThetaRegions1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ThetaRegions1dGetConst
end function ThetaRegions1dGetConst

!! Get
function ThetaRegions1dGet(handle) &
      bind(C, name='ThetaRegions1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ThetaRegions1dGet
end function ThetaRegions1dGet

!! Set
subroutine ThetaRegions1dSet(handle, fieldHandle) &
      bind(C, name='ThetaRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ThetaRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalTheta
