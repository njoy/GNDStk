
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalTheta
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ThetaDefaultConst() &
      bind(C, name='ThetaDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ThetaDefaultConst

!! Create, default
function ThetaDefault() &
      bind(C, name='ThetaDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ThetaDefault

!! Create, general, const
function ThetaCreateConst( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ThetaCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function ThetaCreateConst

!! Create, general
function ThetaCreate( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ThetaCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function ThetaCreate

!! Assign
subroutine ThetaAssign(handleLHS, handleRHS) &
      bind(C, name='ThetaAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ThetaAssign

!! Delete
subroutine ThetaDelete(handle) &
      bind(C, name='ThetaDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ThetaDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ThetaRead(handle, filename, filenameSize) &
      bind(C, name='ThetaRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ThetaRead

!! Write to file
function ThetaWrite(handle, filename, filenameSize) &
      bind(C, name='ThetaWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ThetaWrite

!! Print to standard output, in our prettyprinting format
function ThetaPrint(handle) &
      bind(C, name='ThetaPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThetaPrint

!! Print to standard output, as XML
function ThetaPrintXML(handle) &
      bind(C, name='ThetaPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThetaPrintXML

!! Print to standard output, as JSON
function ThetaPrintJSON(handle) &
      bind(C, name='ThetaPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThetaPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ThetaXYs1dHas(handle) &
      bind(C, name='ThetaXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThetaXYs1dHas

!! Get, const
function ThetaXYs1dGetConst(handle) &
      bind(C, name='ThetaXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ThetaXYs1dGetConst

!! Get
function ThetaXYs1dGet(handle) &
      bind(C, name='ThetaXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ThetaXYs1dGet

!! Set
subroutine ThetaXYs1dSet(handle, fieldHandle) &
      bind(C, name='ThetaXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ThetaXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function ThetaRegions1dHas(handle) &
      bind(C, name='ThetaRegions1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThetaRegions1dHas

!! Get, const
function ThetaRegions1dGetConst(handle) &
      bind(C, name='ThetaRegions1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ThetaRegions1dGetConst

!! Get
function ThetaRegions1dGet(handle) &
      bind(C, name='ThetaRegions1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ThetaRegions1dGet

!! Set
subroutine ThetaRegions1dSet(handle, fieldHandle) &
      bind(C, name='ThetaRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ThetaRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalTheta
