
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSums
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SumsDefaultConst() &
      bind(C, name='SumsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SumsDefaultConst

!! Create, default
function SumsDefault() &
      bind(C, name='SumsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SumsDefault

!! Create, general, const
function SumsCreateConst( &
   crossSectionSums, &
   multiplicitySums &
) &
      bind(C, name='SumsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: crossSectionSums
   type(c_ptr), value :: multiplicitySums
   type(c_ptr) :: handle
end function SumsCreateConst

!! Create, general
function SumsCreate( &
   crossSectionSums, &
   multiplicitySums &
) &
      bind(C, name='SumsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: crossSectionSums
   type(c_ptr), value :: multiplicitySums
   type(c_ptr) :: handle
end function SumsCreate

!! Assign
subroutine SumsAssign(handleLHS, handleRHS) &
      bind(C, name='SumsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine SumsAssign

!! Delete
subroutine SumsDelete(handle) &
      bind(C, name='SumsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SumsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SumsRead(handle, filename, filenameSize) &
      bind(C, name='SumsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SumsRead

!! Write to file
function SumsWrite(handle, filename, filenameSize) &
      bind(C, name='SumsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SumsWrite

!! Print to standard output, in our prettyprinting format
function SumsPrint(handle) &
      bind(C, name='SumsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SumsPrint

!! Print to standard output, as XML
function SumsPrintXML(handle) &
      bind(C, name='SumsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SumsPrintXML

!! Print to standard output, as JSON
function SumsPrintJSON(handle) &
      bind(C, name='SumsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SumsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: crossSectionSums
!! -----------------------------------------------------------------------------

!! Has
function SumsCrossSectionSumsHas(handle) &
      bind(C, name='SumsCrossSectionSumsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SumsCrossSectionSumsHas

!! Get, const
function SumsCrossSectionSumsGetConst(handle) &
      bind(C, name='SumsCrossSectionSumsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SumsCrossSectionSumsGetConst

!! Get
function SumsCrossSectionSumsGet(handle) &
      bind(C, name='SumsCrossSectionSumsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SumsCrossSectionSumsGet

!! Set
subroutine SumsCrossSectionSumsSet(handle, fieldHandle) &
      bind(C, name='SumsCrossSectionSumsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine SumsCrossSectionSumsSet


!! -----------------------------------------------------------------------------
!! Child: multiplicitySums
!! -----------------------------------------------------------------------------

!! Has
function SumsMultiplicitySumsHas(handle) &
      bind(C, name='SumsMultiplicitySumsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SumsMultiplicitySumsHas

!! Get, const
function SumsMultiplicitySumsGetConst(handle) &
      bind(C, name='SumsMultiplicitySumsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SumsMultiplicitySumsGetConst

!! Get
function SumsMultiplicitySumsGet(handle) &
      bind(C, name='SumsMultiplicitySumsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SumsMultiplicitySumsGet

!! Set
subroutine SumsMultiplicitySumsSet(handle, fieldHandle) &
      bind(C, name='SumsMultiplicitySumsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine SumsMultiplicitySumsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSums
