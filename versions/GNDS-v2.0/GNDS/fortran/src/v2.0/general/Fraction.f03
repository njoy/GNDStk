
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFraction
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FractionDefaultConst() &
      bind(C, name='FractionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FractionDefaultConst

!! Create, default
function FractionDefault() &
      bind(C, name='FractionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FractionDefault

!! Create, general, const
function FractionCreateConst( &
   label, &
   value, &
   unit, &
   labelSize, &
   valueSize, &
   unitSize &
) &
      bind(C, name='FractionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function FractionCreateConst

!! Create, general
function FractionCreate( &
   label, &
   value, &
   unit, &
   labelSize, &
   valueSize, &
   unitSize &
) &
      bind(C, name='FractionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function FractionCreate

!! Assign
subroutine FractionAssign(handleLHS, handleRHS) &
      bind(C, name='FractionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FractionAssign

!! Delete
subroutine FractionDelete(handle) &
      bind(C, name='FractionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FractionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FractionRead(handle, filename, filenameSize) &
      bind(C, name='FractionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FractionRead

!! Write to file
function FractionWrite(handle, filename, filenameSize) &
      bind(C, name='FractionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FractionWrite

!! Print to standard output, in our prettyprinting format
function FractionPrint(handle) &
      bind(C, name='FractionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FractionPrint

!! Print to standard output, as XML
function FractionPrintXML(handle) &
      bind(C, name='FractionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FractionPrintXML

!! Print to standard output, as JSON
function FractionPrintJSON(handle) &
      bind(C, name='FractionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FractionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function FractionLabelHas(handle) &
      bind(C, name='FractionLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FractionLabelHas

!! Get
function FractionLabelGet(handle) &
      bind(C, name='FractionLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function FractionLabelGet

!! Set
subroutine FractionLabelSet(handle, label, labelSize) &
      bind(C, name='FractionLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine FractionLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function FractionValueHas(handle) &
      bind(C, name='FractionValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FractionValueHas

!! Get
function FractionValueGet(handle) &
      bind(C, name='FractionValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: value
end function FractionValueGet

!! Set
subroutine FractionValueSet(handle, value, valueSize) &
      bind(C, name='FractionValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine FractionValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function FractionUnitHas(handle) &
      bind(C, name='FractionUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FractionUnitHas

!! Get
function FractionUnitGet(handle) &
      bind(C, name='FractionUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function FractionUnitGet

!! Set
subroutine FractionUnitSet(handle, unit, unitSize) &
      bind(C, name='FractionUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine FractionUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFraction
