
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNucleus
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NucleusDefaultConst() &
      bind(C, name='NucleusDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NucleusDefaultConst

!! Create, default
function NucleusDefault() &
      bind(C, name='NucleusDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NucleusDefault

!! Create, general, const
function NucleusCreateConst( &
   id, &
   index, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   energy, &
   decayData, &
   idSize &
) &
      bind(C, name='NucleusCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   integer(c_int), value, intent(in) :: index
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr), value :: energy
   type(c_ptr), value :: decayData
   type(c_ptr) :: handle
end function NucleusCreateConst

!! Create, general
function NucleusCreate( &
   id, &
   index, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   energy, &
   decayData, &
   idSize &
) &
      bind(C, name='NucleusCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   integer(c_int), value, intent(in) :: index
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr), value :: energy
   type(c_ptr), value :: decayData
   type(c_ptr) :: handle
end function NucleusCreate

!! Assign
subroutine NucleusAssign(handleLHS, handleRHS) &
      bind(C, name='NucleusAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NucleusAssign

!! Delete
subroutine NucleusDelete(handle) &
      bind(C, name='NucleusDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NucleusDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NucleusRead(handle, filename, filenameSize) &
      bind(C, name='NucleusRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NucleusRead

!! Write to file
function NucleusWrite(handle, filename, filenameSize) &
      bind(C, name='NucleusWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NucleusWrite

!! Print to standard output, in our prettyprinting format
function NucleusPrint(handle) &
      bind(C, name='NucleusPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NucleusPrint

!! Print to standard output, as XML
function NucleusPrintXML(handle) &
      bind(C, name='NucleusPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NucleusPrintXML

!! Print to standard output, as JSON
function NucleusPrintJSON(handle) &
      bind(C, name='NucleusPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NucleusPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function NucleusIdHas(handle) &
      bind(C, name='NucleusIdHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusIdHas

!! Get
function NucleusIdGet(handle) &
      bind(C, name='NucleusIdGet') &
      result(id)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: id
end function NucleusIdGet

!! Set
subroutine NucleusIdSet(handle, id, idSize) &
      bind(C, name='NucleusIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine NucleusIdSet


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function NucleusIndexHas(handle) &
      bind(C, name='NucleusIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusIndexHas

!! Get
function NucleusIndexGet(handle) &
      bind(C, name='NucleusIndexGet') &
      result(index)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: index
end function NucleusIndexGet

!! Set
subroutine NucleusIndexSet(handle, index, indexSize) &
      bind(C, name='NucleusIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine NucleusIndexSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function NucleusMassHas(handle) &
      bind(C, name='NucleusMassHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusMassHas

!! Get, const
function NucleusMassGetConst(handle) &
      bind(C, name='NucleusMassGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusMassGetConst

!! Get
function NucleusMassGet(handle) &
      bind(C, name='NucleusMassGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusMassGet

!! Set
subroutine NucleusMassSet(handle, fieldHandle) &
      bind(C, name='NucleusMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusMassSet


!! -----------------------------------------------------------------------------
!! Child: spin
!! -----------------------------------------------------------------------------

!! Has
function NucleusSpinHas(handle) &
      bind(C, name='NucleusSpinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusSpinHas

!! Get, const
function NucleusSpinGetConst(handle) &
      bind(C, name='NucleusSpinGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusSpinGetConst

!! Get
function NucleusSpinGet(handle) &
      bind(C, name='NucleusSpinGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusSpinGet

!! Set
subroutine NucleusSpinSet(handle, fieldHandle) &
      bind(C, name='NucleusSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusSpinSet


!! -----------------------------------------------------------------------------
!! Child: parity
!! -----------------------------------------------------------------------------

!! Has
function NucleusParityHas(handle) &
      bind(C, name='NucleusParityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusParityHas

!! Get, const
function NucleusParityGetConst(handle) &
      bind(C, name='NucleusParityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusParityGetConst

!! Get
function NucleusParityGet(handle) &
      bind(C, name='NucleusParityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusParityGet

!! Set
subroutine NucleusParitySet(handle, fieldHandle) &
      bind(C, name='NucleusParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusParitySet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function NucleusChargeHas(handle) &
      bind(C, name='NucleusChargeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusChargeHas

!! Get, const
function NucleusChargeGetConst(handle) &
      bind(C, name='NucleusChargeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusChargeGetConst

!! Get
function NucleusChargeGet(handle) &
      bind(C, name='NucleusChargeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusChargeGet

!! Set
subroutine NucleusChargeSet(handle, fieldHandle) &
      bind(C, name='NucleusChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusChargeSet


!! -----------------------------------------------------------------------------
!! Child: halflife
!! -----------------------------------------------------------------------------

!! Has
function NucleusHalflifeHas(handle) &
      bind(C, name='NucleusHalflifeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusHalflifeHas

!! Get, const
function NucleusHalflifeGetConst(handle) &
      bind(C, name='NucleusHalflifeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusHalflifeGetConst

!! Get
function NucleusHalflifeGet(handle) &
      bind(C, name='NucleusHalflifeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusHalflifeGet

!! Set
subroutine NucleusHalflifeSet(handle, fieldHandle) &
      bind(C, name='NucleusHalflifeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusHalflifeSet


!! -----------------------------------------------------------------------------
!! Child: energy
!! -----------------------------------------------------------------------------

!! Has
function NucleusEnergyHas(handle) &
      bind(C, name='NucleusEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusEnergyHas

!! Get, const
function NucleusEnergyGetConst(handle) &
      bind(C, name='NucleusEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusEnergyGetConst

!! Get
function NucleusEnergyGet(handle) &
      bind(C, name='NucleusEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusEnergyGet

!! Set
subroutine NucleusEnergySet(handle, fieldHandle) &
      bind(C, name='NucleusEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusEnergySet


!! -----------------------------------------------------------------------------
!! Child: decayData
!! -----------------------------------------------------------------------------

!! Has
function NucleusDecayDataHas(handle) &
      bind(C, name='NucleusDecayDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NucleusDecayDataHas

!! Get, const
function NucleusDecayDataGetConst(handle) &
      bind(C, name='NucleusDecayDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusDecayDataGetConst

!! Get
function NucleusDecayDataGet(handle) &
      bind(C, name='NucleusDecayDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NucleusDecayDataGet

!! Set
subroutine NucleusDecayDataSet(handle, fieldHandle) &
      bind(C, name='NucleusDecayDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusDecayDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNucleus
