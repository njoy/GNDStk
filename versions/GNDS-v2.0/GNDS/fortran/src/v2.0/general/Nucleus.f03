
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNucleus
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NucleusDefaultConst() &
      bind(C, name='NucleusDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NucleusDefaultConst
end function NucleusDefaultConst

!! Create, default
function NucleusDefault() &
      bind(C, name='NucleusDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NucleusDefault
end function NucleusDefault

!! Create, general, const
function NucleusCreateConst( &
   id, &
   index, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   energy, &
   decayData, &
   idSize &
) &
      bind(C, name='NucleusCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   integer(c_int), value, intent(in) :: index
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr), value :: energy
   type(c_ptr), value :: decayData
   type(c_ptr) :: NucleusCreateConst
end function NucleusCreateConst

!! Create, general
function NucleusCreate( &
   id, &
   index, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   energy, &
   decayData, &
   idSize &
) &
      bind(C, name='NucleusCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   integer(c_int), value, intent(in) :: index
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr), value :: energy
   type(c_ptr), value :: decayData
   type(c_ptr) :: NucleusCreate
end function NucleusCreate

!! Assign
subroutine NucleusAssign(handleLHS, handleRHS) &
      bind(C, name='NucleusAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NucleusAssign

!! Delete
subroutine NucleusDelete(handle) &
      bind(C, name='NucleusDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NucleusDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NucleusRead(handle, filename, filenameSize) &
      bind(C, name='NucleusRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NucleusRead
end function NucleusRead

!! Write to file
function NucleusWrite(handle, filename, filenameSize) &
      bind(C, name='NucleusWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NucleusWrite
end function NucleusWrite

!! Print to standard output, in our prettyprinting format
function NucleusPrint(handle) &
      bind(C, name='NucleusPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusPrint
end function NucleusPrint

!! Print to standard output, as XML
function NucleusPrintXML(handle) &
      bind(C, name='NucleusPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusPrintXML
end function NucleusPrintXML

!! Print to standard output, as JSON
function NucleusPrintJSON(handle) &
      bind(C, name='NucleusPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusPrintJSON
end function NucleusPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function NucleusIdHas(handle) &
      bind(C, name='NucleusIdHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusIdHas
end function NucleusIdHas

!! Get
function NucleusIdGet(handle) &
      bind(C, name='NucleusIdGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusIdGet
end function NucleusIdGet

!! Set
subroutine NucleusIdSet(handle, id, idSize) &
      bind(C, name='NucleusIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine NucleusIdSet


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function NucleusIndexHas(handle) &
      bind(C, name='NucleusIndexHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusIndexHas
end function NucleusIndexHas

!! Get
function NucleusIndexGet(handle) &
      bind(C, name='NucleusIndexGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusIndexGet
end function NucleusIndexGet

!! Set
subroutine NucleusIndexSet(handle, index, indexSize) &
      bind(C, name='NucleusIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine NucleusIndexSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function NucleusMassHas(handle) &
      bind(C, name='NucleusMassHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusMassHas
end function NucleusMassHas

!! Get, const
function NucleusMassGetConst(handle) &
      bind(C, name='NucleusMassGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusMassGetConst
end function NucleusMassGetConst

!! Get
function NucleusMassGet(handle) &
      bind(C, name='NucleusMassGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusMassGet
end function NucleusMassGet

!! Set
subroutine NucleusMassSet(handle, fieldHandle) &
      bind(C, name='NucleusMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusMassSet


!! -----------------------------------------------------------------------------
!! Child: spin
!! -----------------------------------------------------------------------------

!! Has
function NucleusSpinHas(handle) &
      bind(C, name='NucleusSpinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusSpinHas
end function NucleusSpinHas

!! Get, const
function NucleusSpinGetConst(handle) &
      bind(C, name='NucleusSpinGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusSpinGetConst
end function NucleusSpinGetConst

!! Get
function NucleusSpinGet(handle) &
      bind(C, name='NucleusSpinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusSpinGet
end function NucleusSpinGet

!! Set
subroutine NucleusSpinSet(handle, fieldHandle) &
      bind(C, name='NucleusSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusSpinSet


!! -----------------------------------------------------------------------------
!! Child: parity
!! -----------------------------------------------------------------------------

!! Has
function NucleusParityHas(handle) &
      bind(C, name='NucleusParityHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusParityHas
end function NucleusParityHas

!! Get, const
function NucleusParityGetConst(handle) &
      bind(C, name='NucleusParityGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusParityGetConst
end function NucleusParityGetConst

!! Get
function NucleusParityGet(handle) &
      bind(C, name='NucleusParityGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusParityGet
end function NucleusParityGet

!! Set
subroutine NucleusParitySet(handle, fieldHandle) &
      bind(C, name='NucleusParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusParitySet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function NucleusChargeHas(handle) &
      bind(C, name='NucleusChargeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusChargeHas
end function NucleusChargeHas

!! Get, const
function NucleusChargeGetConst(handle) &
      bind(C, name='NucleusChargeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusChargeGetConst
end function NucleusChargeGetConst

!! Get
function NucleusChargeGet(handle) &
      bind(C, name='NucleusChargeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusChargeGet
end function NucleusChargeGet

!! Set
subroutine NucleusChargeSet(handle, fieldHandle) &
      bind(C, name='NucleusChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusChargeSet


!! -----------------------------------------------------------------------------
!! Child: halflife
!! -----------------------------------------------------------------------------

!! Has
function NucleusHalflifeHas(handle) &
      bind(C, name='NucleusHalflifeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusHalflifeHas
end function NucleusHalflifeHas

!! Get, const
function NucleusHalflifeGetConst(handle) &
      bind(C, name='NucleusHalflifeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusHalflifeGetConst
end function NucleusHalflifeGetConst

!! Get
function NucleusHalflifeGet(handle) &
      bind(C, name='NucleusHalflifeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusHalflifeGet
end function NucleusHalflifeGet

!! Set
subroutine NucleusHalflifeSet(handle, fieldHandle) &
      bind(C, name='NucleusHalflifeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusHalflifeSet


!! -----------------------------------------------------------------------------
!! Child: energy
!! -----------------------------------------------------------------------------

!! Has
function NucleusEnergyHas(handle) &
      bind(C, name='NucleusEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusEnergyHas
end function NucleusEnergyHas

!! Get, const
function NucleusEnergyGetConst(handle) &
      bind(C, name='NucleusEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusEnergyGetConst
end function NucleusEnergyGetConst

!! Get
function NucleusEnergyGet(handle) &
      bind(C, name='NucleusEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusEnergyGet
end function NucleusEnergyGet

!! Set
subroutine NucleusEnergySet(handle, fieldHandle) &
      bind(C, name='NucleusEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusEnergySet


!! -----------------------------------------------------------------------------
!! Child: decayData
!! -----------------------------------------------------------------------------

!! Has
function NucleusDecayDataHas(handle) &
      bind(C, name='NucleusDecayDataHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NucleusDecayDataHas
end function NucleusDecayDataHas

!! Get, const
function NucleusDecayDataGetConst(handle) &
      bind(C, name='NucleusDecayDataGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusDecayDataGetConst
end function NucleusDecayDataGetConst

!! Get
function NucleusDecayDataGet(handle) &
      bind(C, name='NucleusDecayDataGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NucleusDecayDataGet
end function NucleusDecayDataGet

!! Set
subroutine NucleusDecayDataSet(handle, fieldHandle) &
      bind(C, name='NucleusDecayDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NucleusDecayDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNucleus
