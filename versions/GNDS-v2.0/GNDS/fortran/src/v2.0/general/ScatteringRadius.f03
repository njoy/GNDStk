
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalScatteringRadius
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ScatteringRadiusDefaultConst() &
      bind(C, name='ScatteringRadiusDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ScatteringRadiusDefaultConst
end function ScatteringRadiusDefaultConst

!! Create, default
function ScatteringRadiusDefault() &
      bind(C, name='ScatteringRadiusDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ScatteringRadiusDefault
end function ScatteringRadiusDefault

!! Create, general, const
function ScatteringRadiusCreateConst( &
   constant1d, &
   XYs1d &
) &
      bind(C, name='ScatteringRadiusCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr) :: ScatteringRadiusCreateConst
end function ScatteringRadiusCreateConst

!! Create, general
function ScatteringRadiusCreate( &
   constant1d, &
   XYs1d &
) &
      bind(C, name='ScatteringRadiusCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr) :: ScatteringRadiusCreate
end function ScatteringRadiusCreate

!! Assign
subroutine ScatteringRadiusAssign(handleLHS, handleRHS) &
      bind(C, name='ScatteringRadiusAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ScatteringRadiusAssign

!! Delete
subroutine ScatteringRadiusDelete(handle) &
      bind(C, name='ScatteringRadiusDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringRadiusDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ScatteringRadiusRead(handle, filename, filenameSize) &
      bind(C, name='ScatteringRadiusRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ScatteringRadiusRead
end function ScatteringRadiusRead

!! Write to file
function ScatteringRadiusWrite(handle, filename, filenameSize) &
      bind(C, name='ScatteringRadiusWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ScatteringRadiusWrite
end function ScatteringRadiusWrite

!! Print to standard output, in our prettyprinting format
function ScatteringRadiusPrint(handle) &
      bind(C, name='ScatteringRadiusPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringRadiusPrint
end function ScatteringRadiusPrint

!! Print to standard output, as XML
function ScatteringRadiusPrintXML(handle) &
      bind(C, name='ScatteringRadiusPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringRadiusPrintXML
end function ScatteringRadiusPrintXML

!! Print to standard output, as JSON
function ScatteringRadiusPrintJSON(handle) &
      bind(C, name='ScatteringRadiusPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringRadiusPrintJSON
end function ScatteringRadiusPrintJSON


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function ScatteringRadiusConstant1dHas(handle) &
      bind(C, name='ScatteringRadiusConstant1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringRadiusConstant1dHas
end function ScatteringRadiusConstant1dHas

!! Get, const
function ScatteringRadiusConstant1dGetConst(handle) &
      bind(C, name='ScatteringRadiusConstant1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ScatteringRadiusConstant1dGetConst
end function ScatteringRadiusConstant1dGetConst

!! Get
function ScatteringRadiusConstant1dGet(handle) &
      bind(C, name='ScatteringRadiusConstant1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ScatteringRadiusConstant1dGet
end function ScatteringRadiusConstant1dGet

!! Set
subroutine ScatteringRadiusConstant1dSet(handle, fieldHandle) &
      bind(C, name='ScatteringRadiusConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringRadiusConstant1dSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ScatteringRadiusXYs1dHas(handle) &
      bind(C, name='ScatteringRadiusXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringRadiusXYs1dHas
end function ScatteringRadiusXYs1dHas

!! Get, const
function ScatteringRadiusXYs1dGetConst(handle) &
      bind(C, name='ScatteringRadiusXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ScatteringRadiusXYs1dGetConst
end function ScatteringRadiusXYs1dGetConst

!! Get
function ScatteringRadiusXYs1dGet(handle) &
      bind(C, name='ScatteringRadiusXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ScatteringRadiusXYs1dGet
end function ScatteringRadiusXYs1dGet

!! Set
subroutine ScatteringRadiusXYs1dSet(handle, fieldHandle) &
      bind(C, name='ScatteringRadiusXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringRadiusXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalScatteringRadius
