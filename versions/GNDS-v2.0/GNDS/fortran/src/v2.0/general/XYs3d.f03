
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalXYs3d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function XYs3dDefaultConst() &
      bind(C, name='XYs3dDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function XYs3dDefaultConst

!! Create, default
function XYs3dDefault() &
      bind(C, name='XYs3dDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function XYs3dDefault

!! Create, general, const
function XYs3dCreateConst( &
   interpolationQualifier, &
   axes, &
   function2ds, function2dsSize, &
   interpolationQualifierSize &
) &
      bind(C, name='XYs3dCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: interpolationQualifierSize
   character(c_char), intent(in) :: interpolationQualifier(interpolationQualifierSize)
   type(c_ptr), value :: axes
   integer(c_size_t), value :: function2dsSize
   type(c_ptr) :: function2ds(function2dsSize)
   type(c_ptr) :: handle
end function XYs3dCreateConst

!! Create, general
function XYs3dCreate( &
   interpolationQualifier, &
   axes, &
   function2ds, function2dsSize, &
   interpolationQualifierSize &
) &
      bind(C, name='XYs3dCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: interpolationQualifierSize
   character(c_char), intent(in) :: interpolationQualifier(interpolationQualifierSize)
   type(c_ptr), value :: axes
   integer(c_size_t), value :: function2dsSize
   type(c_ptr) :: function2ds(function2dsSize)
   type(c_ptr) :: handle
end function XYs3dCreate

!! Assign
subroutine XYs3dAssign(handleLHS, handleRHS) &
      bind(C, name='XYs3dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine XYs3dAssign

!! Delete
subroutine XYs3dDelete(handle) &
      bind(C, name='XYs3dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine XYs3dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function XYs3dRead(handle, filename, filenameSize) &
      bind(C, name='XYs3dRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function XYs3dRead

!! Write to file
function XYs3dWrite(handle, filename, filenameSize) &
      bind(C, name='XYs3dWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function XYs3dWrite

!! Print to standard output, in our prettyprinting format
function XYs3dPrint(handle) &
      bind(C, name='XYs3dPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function XYs3dPrint

!! Print to standard output, as XML
function XYs3dPrintXML(handle) &
      bind(C, name='XYs3dPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function XYs3dPrintXML

!! Print to standard output, as JSON
function XYs3dPrintJSON(handle) &
      bind(C, name='XYs3dPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function XYs3dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: interpolationQualifier
!! -----------------------------------------------------------------------------

!! Has
function XYs3dInterpolationQualifierHas(handle) &
      bind(C, name='XYs3dInterpolationQualifierHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs3dInterpolationQualifierHas

!! Get
function XYs3dInterpolationQualifierGet(handle) &
      bind(C, name='XYs3dInterpolationQualifierGet') &
      result(interpolationQualifier)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: interpolationQualifier
end function XYs3dInterpolationQualifierGet

!! Set
subroutine XYs3dInterpolationQualifierSet(handle, interpolationQualifier, interpolationQualifierSize) &
      bind(C, name='XYs3dInterpolationQualifierSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: interpolationQualifierSize
   character(c_char), intent(in) :: interpolationQualifier(interpolationQualifierSize)
end subroutine XYs3dInterpolationQualifierSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function XYs3dAxesHas(handle) &
      bind(C, name='XYs3dAxesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs3dAxesHas

!! Get, const
function XYs3dAxesGetConst(handle) &
      bind(C, name='XYs3dAxesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs3dAxesGetConst

!! Get
function XYs3dAxesGet(handle) &
      bind(C, name='XYs3dAxesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs3dAxesGet

!! Set
subroutine XYs3dAxesSet(handle, fieldHandle) &
      bind(C, name='XYs3dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine XYs3dAxesSet


!! -----------------------------------------------------------------------------
!! Child: function2ds
!! -----------------------------------------------------------------------------

!! Has
function XYs3dFunction2dsHas(handle) &
      bind(C, name='XYs3dFunction2dsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs3dFunction2dsHas

!! Clear
subroutine XYs3dFunction2dsClear(handle) &
      bind(C, name='XYs3dFunction2dsClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine XYs3dFunction2dsClear

!! Size
function XYs3dFunction2dsSize(handle) &
      bind(C, name='XYs3dFunction2dsSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function XYs3dFunction2dsSize

!! Add
subroutine XYs3dFunction2dsAdd(handle, fieldHandle) &
      bind(C, name='XYs3dFunction2dsAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine XYs3dFunction2dsAdd

!! Get, by index \in [0,size), const
function XYs3dFunction2dsGetConst(handle, index) &
      bind(C, name='XYs3dFunction2dsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function XYs3dFunction2dsGetConst

!! Get, by index \in [0,size)
function XYs3dFunction2dsGet(handle, index) &
      bind(C, name='XYs3dFunction2dsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function XYs3dFunction2dsGet

!! Set, by index \in [0,size)
subroutine XYs3dFunction2dsSet(handle, index, fieldHandle) &
      bind(C, name='XYs3dFunction2dsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine XYs3dFunction2dsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalXYs3d
