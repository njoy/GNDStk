
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalConstant1d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Constant1dDefaultConst() &
      bind(C, name='Constant1dDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Constant1dDefaultConst
end function Constant1dDefaultConst

!! Create, default
function Constant1dDefault() &
      bind(C, name='Constant1dDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Constant1dDefault
end function Constant1dDefault

!! Create, general, const
function Constant1dCreateConst( &
   label, &
   value, &
   domainMin, &
   domainMax, &
   axes, &
   labelSize &
) &
      bind(C, name='Constant1dCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: value
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   type(c_ptr), value :: axes
   type(c_ptr) :: Constant1dCreateConst
end function Constant1dCreateConst

!! Create, general
function Constant1dCreate( &
   label, &
   value, &
   domainMin, &
   domainMax, &
   axes, &
   labelSize &
) &
      bind(C, name='Constant1dCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: value
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   type(c_ptr), value :: axes
   type(c_ptr) :: Constant1dCreate
end function Constant1dCreate

!! Assign
subroutine Constant1dAssign(handleLHS, handleRHS) &
      bind(C, name='Constant1dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine Constant1dAssign

!! Delete
subroutine Constant1dDelete(handle) &
      bind(C, name='Constant1dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Constant1dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function Constant1dRead(handle, filename, filenameSize) &
      bind(C, name='Constant1dRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Constant1dRead
end function Constant1dRead

!! Write to file
function Constant1dWrite(handle, filename, filenameSize) &
      bind(C, name='Constant1dWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Constant1dWrite
end function Constant1dWrite

!! Print to standard output, in our prettyprinting format
function Constant1dPrint(handle) &
      bind(C, name='Constant1dPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dPrint
end function Constant1dPrint

!! Print to standard output, as XML
function Constant1dPrintXML(handle) &
      bind(C, name='Constant1dPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dPrintXML
end function Constant1dPrintXML

!! Print to standard output, as JSON
function Constant1dPrintJSON(handle) &
      bind(C, name='Constant1dPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dPrintJSON
end function Constant1dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function Constant1dLabelHas(handle) &
      bind(C, name='Constant1dLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dLabelHas
end function Constant1dLabelHas

!! Get
function Constant1dLabelGet(handle) &
      bind(C, name='Constant1dLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Constant1dLabelGet
end function Constant1dLabelGet

!! Set
subroutine Constant1dLabelSet(handle, label, labelSize) &
      bind(C, name='Constant1dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine Constant1dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function Constant1dValueHas(handle) &
      bind(C, name='Constant1dValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dValueHas
end function Constant1dValueHas

!! Get
function Constant1dValueGet(handle) &
      bind(C, name='Constant1dValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: Constant1dValueGet
end function Constant1dValueGet

!! Set
subroutine Constant1dValueSet(handle, value, valueSize) &
      bind(C, name='Constant1dValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine Constant1dValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMin
!! -----------------------------------------------------------------------------

!! Has
function Constant1dDomainMinHas(handle) &
      bind(C, name='Constant1dDomainMinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dDomainMinHas
end function Constant1dDomainMinHas

!! Get
function Constant1dDomainMinGet(handle) &
      bind(C, name='Constant1dDomainMinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: Constant1dDomainMinGet
end function Constant1dDomainMinGet

!! Set
subroutine Constant1dDomainMinSet(handle, domainMin, domainMinSize) &
      bind(C, name='Constant1dDomainMinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMinSize
   character(c_char), intent(in) :: domainMin(domainMinSize)
end subroutine Constant1dDomainMinSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMax
!! -----------------------------------------------------------------------------

!! Has
function Constant1dDomainMaxHas(handle) &
      bind(C, name='Constant1dDomainMaxHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dDomainMaxHas
end function Constant1dDomainMaxHas

!! Get
function Constant1dDomainMaxGet(handle) &
      bind(C, name='Constant1dDomainMaxGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: Constant1dDomainMaxGet
end function Constant1dDomainMaxGet

!! Set
subroutine Constant1dDomainMaxSet(handle, domainMax, domainMaxSize) &
      bind(C, name='Constant1dDomainMaxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMaxSize
   character(c_char), intent(in) :: domainMax(domainMaxSize)
end subroutine Constant1dDomainMaxSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function Constant1dAxesHas(handle) &
      bind(C, name='Constant1dAxesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Constant1dAxesHas
end function Constant1dAxesHas

!! Get, const
function Constant1dAxesGetConst(handle) &
      bind(C, name='Constant1dAxesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Constant1dAxesGetConst
end function Constant1dAxesGetConst

!! Get
function Constant1dAxesGet(handle) &
      bind(C, name='Constant1dAxesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Constant1dAxesGet
end function Constant1dAxesGet

!! Set
subroutine Constant1dAxesSet(handle, fieldHandle) &
      bind(C, name='Constant1dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Constant1dAxesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalConstant1d
