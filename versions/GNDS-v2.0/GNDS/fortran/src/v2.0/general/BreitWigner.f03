
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBreitWigner
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BreitWignerDefaultConst() &
      bind(C, name='BreitWignerDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BreitWignerDefaultConst
end function BreitWignerDefaultConst

!! Create, default
function BreitWignerDefault() &
      bind(C, name='BreitWignerDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BreitWignerDefault
end function BreitWignerDefault

!! Create, general, const
function BreitWignerCreateConst( &
   label, &
   approximation, &
   calculateChannelRadius, &
   resonanceParameters, &
   PoPs, &
   scatteringRadius, &
   labelSize, &
   approximationSize &
) &
      bind(C, name='BreitWignerCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: approximationSize
   character(c_char), intent(in) :: approximation(approximationSize)
   logical(c_bool), value, intent(in) :: calculateChannelRadius
   type(c_ptr), value :: resonanceParameters
   type(c_ptr), value :: PoPs
   type(c_ptr), value :: scatteringRadius
   type(c_ptr) :: BreitWignerCreateConst
end function BreitWignerCreateConst

!! Create, general
function BreitWignerCreate( &
   label, &
   approximation, &
   calculateChannelRadius, &
   resonanceParameters, &
   PoPs, &
   scatteringRadius, &
   labelSize, &
   approximationSize &
) &
      bind(C, name='BreitWignerCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: approximationSize
   character(c_char), intent(in) :: approximation(approximationSize)
   logical(c_bool), value, intent(in) :: calculateChannelRadius
   type(c_ptr), value :: resonanceParameters
   type(c_ptr), value :: PoPs
   type(c_ptr), value :: scatteringRadius
   type(c_ptr) :: BreitWignerCreate
end function BreitWignerCreate

!! Assign
subroutine BreitWignerAssign(handleLHS, handleRHS) &
      bind(C, name='BreitWignerAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine BreitWignerAssign

!! Delete
subroutine BreitWignerDelete(handle) &
      bind(C, name='BreitWignerDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BreitWignerDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function BreitWignerRead(handle, filename, filenameSize) &
      bind(C, name='BreitWignerRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BreitWignerRead
end function BreitWignerRead

!! Write to file
function BreitWignerWrite(handle, filename, filenameSize) &
      bind(C, name='BreitWignerWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BreitWignerWrite
end function BreitWignerWrite

!! Print to standard output, in our prettyprinting format
function BreitWignerPrint(handle) &
      bind(C, name='BreitWignerPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerPrint
end function BreitWignerPrint

!! Print to standard output, as XML
function BreitWignerPrintXML(handle) &
      bind(C, name='BreitWignerPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerPrintXML
end function BreitWignerPrintXML

!! Print to standard output, as JSON
function BreitWignerPrintJSON(handle) &
      bind(C, name='BreitWignerPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerPrintJSON
end function BreitWignerPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function BreitWignerLabelHas(handle) &
      bind(C, name='BreitWignerLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerLabelHas
end function BreitWignerLabelHas

!! Get
function BreitWignerLabelGet(handle) &
      bind(C, name='BreitWignerLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerLabelGet
end function BreitWignerLabelGet

!! Set
subroutine BreitWignerLabelSet(handle, label, labelSize) &
      bind(C, name='BreitWignerLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine BreitWignerLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: approximation
!! -----------------------------------------------------------------------------

!! Has
function BreitWignerApproximationHas(handle) &
      bind(C, name='BreitWignerApproximationHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerApproximationHas
end function BreitWignerApproximationHas

!! Get
function BreitWignerApproximationGet(handle) &
      bind(C, name='BreitWignerApproximationGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerApproximationGet
end function BreitWignerApproximationGet

!! Set
subroutine BreitWignerApproximationSet(handle, approximation, approximationSize) &
      bind(C, name='BreitWignerApproximationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: approximationSize
   character(c_char), intent(in) :: approximation(approximationSize)
end subroutine BreitWignerApproximationSet


!! -----------------------------------------------------------------------------
!! Metadatum: calculateChannelRadius
!! -----------------------------------------------------------------------------

!! Has
function BreitWignerCalculateChannelRadiusHas(handle) &
      bind(C, name='BreitWignerCalculateChannelRadiusHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerCalculateChannelRadiusHas
end function BreitWignerCalculateChannelRadiusHas

!! Get
function BreitWignerCalculateChannelRadiusGet(handle) &
      bind(C, name='BreitWignerCalculateChannelRadiusGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: BreitWignerCalculateChannelRadiusGet
end function BreitWignerCalculateChannelRadiusGet

!! Set
subroutine BreitWignerCalculateChannelRadiusSet(handle, calculateChannelRadius, calculateChannelRadiusSize) &
      bind(C, name='BreitWignerCalculateChannelRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: calculateChannelRadiusSize
   character(c_char), intent(in) :: calculateChannelRadius(calculateChannelRadiusSize)
end subroutine BreitWignerCalculateChannelRadiusSet


!! -----------------------------------------------------------------------------
!! Child: resonanceParameters
!! -----------------------------------------------------------------------------

!! Has
function BreitWignerResonanceParametersHas(handle) &
      bind(C, name='BreitWignerResonanceParametersHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerResonanceParametersHas
end function BreitWignerResonanceParametersHas

!! Get, const
function BreitWignerResonanceParametersGetConst(handle) &
      bind(C, name='BreitWignerResonanceParametersGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerResonanceParametersGetConst
end function BreitWignerResonanceParametersGetConst

!! Get
function BreitWignerResonanceParametersGet(handle) &
      bind(C, name='BreitWignerResonanceParametersGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerResonanceParametersGet
end function BreitWignerResonanceParametersGet

!! Set
subroutine BreitWignerResonanceParametersSet(handle, fieldHandle) &
      bind(C, name='BreitWignerResonanceParametersSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine BreitWignerResonanceParametersSet


!! -----------------------------------------------------------------------------
!! Child: PoPs
!! -----------------------------------------------------------------------------

!! Has
function BreitWignerPoPsHas(handle) &
      bind(C, name='BreitWignerPoPsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerPoPsHas
end function BreitWignerPoPsHas

!! Get, const
function BreitWignerPoPsGetConst(handle) &
      bind(C, name='BreitWignerPoPsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerPoPsGetConst
end function BreitWignerPoPsGetConst

!! Get
function BreitWignerPoPsGet(handle) &
      bind(C, name='BreitWignerPoPsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerPoPsGet
end function BreitWignerPoPsGet

!! Set
subroutine BreitWignerPoPsSet(handle, fieldHandle) &
      bind(C, name='BreitWignerPoPsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine BreitWignerPoPsSet


!! -----------------------------------------------------------------------------
!! Child: scatteringRadius
!! -----------------------------------------------------------------------------

!! Has
function BreitWignerScatteringRadiusHas(handle) &
      bind(C, name='BreitWignerScatteringRadiusHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BreitWignerScatteringRadiusHas
end function BreitWignerScatteringRadiusHas

!! Get, const
function BreitWignerScatteringRadiusGetConst(handle) &
      bind(C, name='BreitWignerScatteringRadiusGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerScatteringRadiusGetConst
end function BreitWignerScatteringRadiusGetConst

!! Get
function BreitWignerScatteringRadiusGet(handle) &
      bind(C, name='BreitWignerScatteringRadiusGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BreitWignerScatteringRadiusGet
end function BreitWignerScatteringRadiusGet

!! Set
subroutine BreitWignerScatteringRadiusSet(handle, fieldHandle) &
      bind(C, name='BreitWignerScatteringRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine BreitWignerScatteringRadiusSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBreitWigner
