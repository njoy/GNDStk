
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGridded2d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Gridded2dDefaultConst() &
      bind(C, name='Gridded2dDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Gridded2dDefaultConst
end function Gridded2dDefaultConst

!! Create, default
function Gridded2dDefault() &
      bind(C, name='Gridded2dDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Gridded2dDefault
end function Gridded2dDefault

!! Create, general, const
function Gridded2dCreateConst( &
   axes, &
   array &
) &
      bind(C, name='Gridded2dCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: axes
   type(c_ptr), value :: array
   type(c_ptr) :: Gridded2dCreateConst
end function Gridded2dCreateConst

!! Create, general
function Gridded2dCreate( &
   axes, &
   array &
) &
      bind(C, name='Gridded2dCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: axes
   type(c_ptr), value :: array
   type(c_ptr) :: Gridded2dCreate
end function Gridded2dCreate

!! Assign
subroutine Gridded2dAssign(handleLHS, handleRHS) &
      bind(C, name='Gridded2dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine Gridded2dAssign

!! Delete
subroutine Gridded2dDelete(handle) &
      bind(C, name='Gridded2dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Gridded2dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function Gridded2dRead(handle, filename, filenameSize) &
      bind(C, name='Gridded2dRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Gridded2dRead
end function Gridded2dRead

!! Write to file
function Gridded2dWrite(handle, filename, filenameSize) &
      bind(C, name='Gridded2dWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Gridded2dWrite
end function Gridded2dWrite

!! Print to standard output, in our prettyprinting format
function Gridded2dPrint(handle) &
      bind(C, name='Gridded2dPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded2dPrint
end function Gridded2dPrint

!! Print to standard output, as XML
function Gridded2dPrintXML(handle) &
      bind(C, name='Gridded2dPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded2dPrintXML
end function Gridded2dPrintXML

!! Print to standard output, as JSON
function Gridded2dPrintJSON(handle) &
      bind(C, name='Gridded2dPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded2dPrintJSON
end function Gridded2dPrintJSON


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function Gridded2dAxesHas(handle) &
      bind(C, name='Gridded2dAxesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded2dAxesHas
end function Gridded2dAxesHas

!! Get, const
function Gridded2dAxesGetConst(handle) &
      bind(C, name='Gridded2dAxesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded2dAxesGetConst
end function Gridded2dAxesGetConst

!! Get
function Gridded2dAxesGet(handle) &
      bind(C, name='Gridded2dAxesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded2dAxesGet
end function Gridded2dAxesGet

!! Set
subroutine Gridded2dAxesSet(handle, fieldHandle) &
      bind(C, name='Gridded2dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Gridded2dAxesSet


!! -----------------------------------------------------------------------------
!! Child: array
!! -----------------------------------------------------------------------------

!! Has
function Gridded2dArrayHas(handle) &
      bind(C, name='Gridded2dArrayHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded2dArrayHas
end function Gridded2dArrayHas

!! Get, const
function Gridded2dArrayGetConst(handle) &
      bind(C, name='Gridded2dArrayGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded2dArrayGetConst
end function Gridded2dArrayGetConst

!! Get
function Gridded2dArrayGet(handle) &
      bind(C, name='Gridded2dArrayGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded2dArrayGet
end function Gridded2dArrayGet

!! Set
subroutine Gridded2dArraySet(handle, fieldHandle) &
      bind(C, name='Gridded2dArraySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Gridded2dArraySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGridded2d
