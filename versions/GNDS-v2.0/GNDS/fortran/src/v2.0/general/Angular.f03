
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAngular
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AngularDefaultConst() &
      bind(C, name='AngularDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AngularDefaultConst
end function AngularDefaultConst

!! Create, default, non-const
function AngularDefault() &
      bind(C, name='AngularDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AngularDefault
end function AngularDefault

!! Create, general, const
function AngularCreateConst( &
   isotropic2d, &
   XYs2d &
) &
      bind(C, name='AngularCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: isotropic2d
   type(c_ptr), intent(in), value :: XYs2d
   type(c_ptr) :: AngularCreateConst
end function AngularCreateConst

!! Create, general, non-const
function AngularCreate( &
   isotropic2d, &
   XYs2d &
) &
      bind(C, name='AngularCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: isotropic2d
   type(c_ptr), intent(in), value :: XYs2d
   type(c_ptr) :: AngularCreate
end function AngularCreate

!! Assign
subroutine AngularAssign(handleLHS, handleRHS) &
      bind(C, name='AngularAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AngularAssign

!! Delete
subroutine AngularDelete(handle) &
      bind(C, name='AngularDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AngularDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function AngularRead(handle, filename, filenameSize) &
      bind(C, name='AngularRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AngularRead
end function AngularRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function AngularWrite(handle, filename, filenameSize) &
      bind(C, name='AngularWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AngularWrite
end function AngularWrite

!! Print to standard output, in our prettyprinting format
function AngularPrint(handle) &
      bind(C, name='AngularPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularPrint
end function AngularPrint

!! Print to standard output, as XML
function AngularPrintXML(handle) &
      bind(C, name='AngularPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularPrintXML
end function AngularPrintXML

!! Print to standard output, as JSON
function AngularPrintJSON(handle) &
      bind(C, name='AngularPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularPrintJSON
end function AngularPrintJSON


!! -----------------------------------------------------------------------------
!! Child: isotropic2d
!! -----------------------------------------------------------------------------

!! Has
function AngularIsotropic2dHas(handle) &
      bind(C, name='AngularIsotropic2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularIsotropic2dHas
end function AngularIsotropic2dHas

!! Get, const
function AngularIsotropic2dGetConst(handle) &
      bind(C, name='AngularIsotropic2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AngularIsotropic2dGetConst
end function AngularIsotropic2dGetConst

!! Get, non-const
function AngularIsotropic2dGet(handle) &
      bind(C, name='AngularIsotropic2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: AngularIsotropic2dGet
end function AngularIsotropic2dGet

!! Set
subroutine AngularIsotropic2dSet(handle, fieldHandle) &
      bind(C, name='AngularIsotropic2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AngularIsotropic2dSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function AngularXYs2dHas(handle) &
      bind(C, name='AngularXYs2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularXYs2dHas
end function AngularXYs2dHas

!! Get, const
function AngularXYs2dGetConst(handle) &
      bind(C, name='AngularXYs2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AngularXYs2dGetConst
end function AngularXYs2dGetConst

!! Get, non-const
function AngularXYs2dGet(handle) &
      bind(C, name='AngularXYs2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: AngularXYs2dGet
end function AngularXYs2dGet

!! Set
subroutine AngularXYs2dSet(handle, fieldHandle) &
      bind(C, name='AngularXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AngularXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAngular
