
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAngular
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AngularDefaultConst() &
      bind(C, name='AngularDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AngularDefaultConst

!! Create, default
function AngularDefault() &
      bind(C, name='AngularDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AngularDefault

!! Create, general, const
function AngularCreateConst( &
   isotropic2d, &
   XYs2d &
) &
      bind(C, name='AngularCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: isotropic2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function AngularCreateConst

!! Create, general
function AngularCreate( &
   isotropic2d, &
   XYs2d &
) &
      bind(C, name='AngularCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: isotropic2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function AngularCreate

!! Assign
subroutine AngularAssign(handleLHS, handleRHS) &
      bind(C, name='AngularAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AngularAssign

!! Delete
subroutine AngularDelete(handle) &
      bind(C, name='AngularDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AngularDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AngularRead(handle, filename, filenameSize) &
      bind(C, name='AngularRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AngularRead

!! Write to file
function AngularWrite(handle, filename, filenameSize) &
      bind(C, name='AngularWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AngularWrite

!! Print to standard output, in our prettyprinting format
function AngularPrint(handle) &
      bind(C, name='AngularPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AngularPrint

!! Print to standard output, as XML
function AngularPrintXML(handle) &
      bind(C, name='AngularPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AngularPrintXML

!! Print to standard output, as JSON
function AngularPrintJSON(handle) &
      bind(C, name='AngularPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AngularPrintJSON


!! -----------------------------------------------------------------------------
!! Child: isotropic2d
!! -----------------------------------------------------------------------------

!! Has
function AngularIsotropic2dHas(handle) &
      bind(C, name='AngularIsotropic2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AngularIsotropic2dHas

!! Get, const
function AngularIsotropic2dGetConst(handle) &
      bind(C, name='AngularIsotropic2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AngularIsotropic2dGetConst

!! Get
function AngularIsotropic2dGet(handle) &
      bind(C, name='AngularIsotropic2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AngularIsotropic2dGet

!! Set
subroutine AngularIsotropic2dSet(handle, fieldHandle) &
      bind(C, name='AngularIsotropic2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine AngularIsotropic2dSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function AngularXYs2dHas(handle) &
      bind(C, name='AngularXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AngularXYs2dHas

!! Get, const
function AngularXYs2dGetConst(handle) &
      bind(C, name='AngularXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AngularXYs2dGetConst

!! Get
function AngularXYs2dGet(handle) &
      bind(C, name='AngularXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AngularXYs2dGet

!! Set
subroutine AngularXYs2dSet(handle, fieldHandle) &
      bind(C, name='AngularXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine AngularXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAngular
