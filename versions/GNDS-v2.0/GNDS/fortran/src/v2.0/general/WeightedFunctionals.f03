
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalWeightedFunctionals
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function WeightedFunctionalsDefaultConst() &
      bind(C, name='WeightedFunctionalsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function WeightedFunctionalsDefaultConst

!! Create, default
function WeightedFunctionalsDefault() &
      bind(C, name='WeightedFunctionalsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function WeightedFunctionalsDefault

!! Create, general, const
function WeightedFunctionalsCreateConst( &
   weighted, weightedSize &
) &
      bind(C, name='WeightedFunctionalsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: weightedSize
   type(c_ptr) :: weighted(weightedSize)
   type(c_ptr) :: handle
end function WeightedFunctionalsCreateConst

!! Create, general
function WeightedFunctionalsCreate( &
   weighted, weightedSize &
) &
      bind(C, name='WeightedFunctionalsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: weightedSize
   type(c_ptr) :: weighted(weightedSize)
   type(c_ptr) :: handle
end function WeightedFunctionalsCreate

!! Assign
subroutine WeightedFunctionalsAssign(handleLHS, handleRHS) &
      bind(C, name='WeightedFunctionalsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine WeightedFunctionalsAssign

!! Delete
subroutine WeightedFunctionalsDelete(handle) &
      bind(C, name='WeightedFunctionalsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine WeightedFunctionalsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function WeightedFunctionalsRead(handle, filename, filenameSize) &
      bind(C, name='WeightedFunctionalsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function WeightedFunctionalsRead

!! Write to file
function WeightedFunctionalsWrite(handle, filename, filenameSize) &
      bind(C, name='WeightedFunctionalsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function WeightedFunctionalsWrite

!! Print to standard output, in our prettyprinting format
function WeightedFunctionalsPrint(handle) &
      bind(C, name='WeightedFunctionalsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function WeightedFunctionalsPrint

!! Print to standard output, as XML
function WeightedFunctionalsPrintXML(handle) &
      bind(C, name='WeightedFunctionalsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function WeightedFunctionalsPrintXML

!! Print to standard output, as JSON
function WeightedFunctionalsPrintJSON(handle) &
      bind(C, name='WeightedFunctionalsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function WeightedFunctionalsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: weighted
!! -----------------------------------------------------------------------------

!! Has
function WeightedFunctionalsWeightedHas(handle) &
      bind(C, name='WeightedFunctionalsWeightedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WeightedFunctionalsWeightedHas

!! Clear
subroutine WeightedFunctionalsWeightedClear(handle) &
      bind(C, name='WeightedFunctionalsWeightedClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine WeightedFunctionalsWeightedClear

!! Size
function WeightedFunctionalsWeightedSize(handle) &
      bind(C, name='WeightedFunctionalsWeightedSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function WeightedFunctionalsWeightedSize

!! Add
subroutine WeightedFunctionalsWeightedAdd(handle, fieldHandle) &
      bind(C, name='WeightedFunctionalsWeightedAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WeightedFunctionalsWeightedAdd

!! Get, by index \in [0,size), const
function WeightedFunctionalsWeightedGetConst(handle, index) &
      bind(C, name='WeightedFunctionalsWeightedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function WeightedFunctionalsWeightedGetConst

!! Get, by index \in [0,size)
function WeightedFunctionalsWeightedGet(handle, index) &
      bind(C, name='WeightedFunctionalsWeightedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function WeightedFunctionalsWeightedGet

!! Set, by index \in [0,size)
subroutine WeightedFunctionalsWeightedSet(handle, index, fieldHandle) &
      bind(C, name='WeightedFunctionalsWeightedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WeightedFunctionalsWeightedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalWeightedFunctionals
