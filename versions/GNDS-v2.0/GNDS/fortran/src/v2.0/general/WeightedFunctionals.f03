
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalWeightedFunctionals
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function WeightedFunctionalsDefaultConst() &
      bind(C, name='WeightedFunctionalsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: WeightedFunctionalsDefaultConst
end function WeightedFunctionalsDefaultConst

!! Create, default, non-const
function WeightedFunctionalsDefault() &
      bind(C, name='WeightedFunctionalsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: WeightedFunctionalsDefault
end function WeightedFunctionalsDefault

!! Create, general, const
function WeightedFunctionalsCreateConst( &
   weighted, weightedSize &
) &
      bind(C, name='WeightedFunctionalsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: weightedSize
   type(c_ptr), intent(in) :: weighted(weightedSize)
   type(c_ptr) :: WeightedFunctionalsCreateConst
end function WeightedFunctionalsCreateConst

!! Create, general, non-const
function WeightedFunctionalsCreate( &
   weighted, weightedSize &
) &
      bind(C, name='WeightedFunctionalsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: weightedSize
   type(c_ptr), intent(in) :: weighted(weightedSize)
   type(c_ptr) :: WeightedFunctionalsCreate
end function WeightedFunctionalsCreate

!! Assign
subroutine WeightedFunctionalsAssign(handleLHS, handleRHS) &
      bind(C, name='WeightedFunctionalsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine WeightedFunctionalsAssign

!! Delete
subroutine WeightedFunctionalsDelete(handle) &
      bind(C, name='WeightedFunctionalsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine WeightedFunctionalsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function WeightedFunctionalsRead(handle, filename, filenameSize) &
      bind(C, name='WeightedFunctionalsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: WeightedFunctionalsRead
end function WeightedFunctionalsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function WeightedFunctionalsWrite(handle, filename, filenameSize) &
      bind(C, name='WeightedFunctionalsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: WeightedFunctionalsWrite
end function WeightedFunctionalsWrite

!! Print to standard output, in our prettyprinting format
function WeightedFunctionalsPrint(handle) &
      bind(C, name='WeightedFunctionalsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WeightedFunctionalsPrint
end function WeightedFunctionalsPrint

!! Print to standard output, as XML
function WeightedFunctionalsPrintXML(handle) &
      bind(C, name='WeightedFunctionalsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WeightedFunctionalsPrintXML
end function WeightedFunctionalsPrintXML

!! Print to standard output, as JSON
function WeightedFunctionalsPrintJSON(handle) &
      bind(C, name='WeightedFunctionalsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WeightedFunctionalsPrintJSON
end function WeightedFunctionalsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: weighted
!! -----------------------------------------------------------------------------

!! Has
function WeightedFunctionalsWeightedHas(handle) &
      bind(C, name='WeightedFunctionalsWeightedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WeightedFunctionalsWeightedHas
end function WeightedFunctionalsWeightedHas

!! Clear
subroutine WeightedFunctionalsWeightedClear(handle) &
      bind(C, name='WeightedFunctionalsWeightedClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine WeightedFunctionalsWeightedClear

!! Size
function WeightedFunctionalsWeightedSize(handle) &
      bind(C, name='WeightedFunctionalsWeightedSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: WeightedFunctionalsWeightedSize
end function WeightedFunctionalsWeightedSize

!! Add
subroutine WeightedFunctionalsWeightedAdd(handle, fieldHandle) &
      bind(C, name='WeightedFunctionalsWeightedAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WeightedFunctionalsWeightedAdd

!! Get, by index \in [0,size), const
function WeightedFunctionalsWeightedGetConst(handle, index) &
      bind(C, name='WeightedFunctionalsWeightedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: WeightedFunctionalsWeightedGetConst
end function WeightedFunctionalsWeightedGetConst

!! Get, by index \in [0,size), non-const
function WeightedFunctionalsWeightedGet(handle, index) &
      bind(C, name='WeightedFunctionalsWeightedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: WeightedFunctionalsWeightedGet
end function WeightedFunctionalsWeightedGet

!! Set, by index \in [0,size)
subroutine WeightedFunctionalsWeightedSet(handle, index, fieldHandle) &
      bind(C, name='WeightedFunctionalsWeightedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WeightedFunctionalsWeightedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalWeightedFunctionals
