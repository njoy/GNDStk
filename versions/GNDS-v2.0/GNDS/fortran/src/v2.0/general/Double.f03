
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDouble
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DoubleDefaultConst() &
      bind(C, name='DoubleDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DoubleDefaultConst
end function DoubleDefaultConst

!! Create, default
function DoubleDefault() &
      bind(C, name='DoubleDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DoubleDefault
end function DoubleDefault

!! Create, general, const
function DoubleCreateConst( &
   label, &
   value, &
   unit, &
   uncertainty, &
   labelSize, &
   unitSize &
) &
      bind(C, name='DoubleCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: DoubleCreateConst
end function DoubleCreateConst

!! Create, general
function DoubleCreate( &
   label, &
   value, &
   unit, &
   uncertainty, &
   labelSize, &
   unitSize &
) &
      bind(C, name='DoubleCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: DoubleCreate
end function DoubleCreate

!! Assign
subroutine DoubleAssign(handleLHS, handleRHS) &
      bind(C, name='DoubleAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DoubleAssign

!! Delete
subroutine DoubleDelete(handle) &
      bind(C, name='DoubleDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DoubleDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DoubleRead(handle, filename, filenameSize) &
      bind(C, name='DoubleRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DoubleRead
end function DoubleRead

!! Write to file
function DoubleWrite(handle, filename, filenameSize) &
      bind(C, name='DoubleWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DoubleWrite
end function DoubleWrite

!! Print to standard output, in our prettyprinting format
function DoublePrint(handle) &
      bind(C, name='DoublePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoublePrint
end function DoublePrint

!! Print to standard output, as XML
function DoublePrintXML(handle) &
      bind(C, name='DoublePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoublePrintXML
end function DoublePrintXML

!! Print to standard output, as JSON
function DoublePrintJSON(handle) &
      bind(C, name='DoublePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoublePrintJSON
end function DoublePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function DoubleLabelHas(handle) &
      bind(C, name='DoubleLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleLabelHas
end function DoubleLabelHas

!! Get
function DoubleLabelGet(handle) &
      bind(C, name='DoubleLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleLabelGet
end function DoubleLabelGet

!! Set
subroutine DoubleLabelSet(handle, label, labelSize) &
      bind(C, name='DoubleLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine DoubleLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function DoubleValueHas(handle) &
      bind(C, name='DoubleValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleValueHas
end function DoubleValueHas

!! Get
function DoubleValueGet(handle) &
      bind(C, name='DoubleValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: DoubleValueGet
end function DoubleValueGet

!! Set
subroutine DoubleValueSet(handle, value, valueSize) &
      bind(C, name='DoubleValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine DoubleValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function DoubleUnitHas(handle) &
      bind(C, name='DoubleUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleUnitHas
end function DoubleUnitHas

!! Get
function DoubleUnitGet(handle) &
      bind(C, name='DoubleUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleUnitGet
end function DoubleUnitGet

!! Set
subroutine DoubleUnitSet(handle, unit, unitSize) &
      bind(C, name='DoubleUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine DoubleUnitSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function DoubleUncertaintyHas(handle) &
      bind(C, name='DoubleUncertaintyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleUncertaintyHas
end function DoubleUncertaintyHas

!! Get, const
function DoubleUncertaintyGetConst(handle) &
      bind(C, name='DoubleUncertaintyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleUncertaintyGetConst
end function DoubleUncertaintyGetConst

!! Get
function DoubleUncertaintyGet(handle) &
      bind(C, name='DoubleUncertaintyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleUncertaintyGet
end function DoubleUncertaintyGet

!! Set
subroutine DoubleUncertaintySet(handle, fieldHandle) &
      bind(C, name='DoubleUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDouble
