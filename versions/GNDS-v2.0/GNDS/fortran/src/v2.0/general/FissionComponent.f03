
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFissionComponent
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionComponentDefaultConst() &
      bind(C, name='FissionComponentDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionComponentDefaultConst

!! Create, default
function FissionComponentDefault() &
      bind(C, name='FissionComponentDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionComponentDefault

!! Create, general, const
function FissionComponentCreateConst( &
   label, &
   ENDF_MT, &
   fissionGenre, &
   crossSection, &
   outputChannel, &
   labelSize, &
   fissionGenreSize &
) &
      bind(C, name='FissionComponentCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: ENDF_MT
   integer(c_size_t), intent(in), value :: fissionGenreSize
   character(c_char), intent(in) :: fissionGenre(fissionGenreSize)
   type(c_ptr), value :: crossSection
   type(c_ptr), value :: outputChannel
   type(c_ptr) :: handle
end function FissionComponentCreateConst

!! Create, general
function FissionComponentCreate( &
   label, &
   ENDF_MT, &
   fissionGenre, &
   crossSection, &
   outputChannel, &
   labelSize, &
   fissionGenreSize &
) &
      bind(C, name='FissionComponentCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: ENDF_MT
   integer(c_size_t), intent(in), value :: fissionGenreSize
   character(c_char), intent(in) :: fissionGenre(fissionGenreSize)
   type(c_ptr), value :: crossSection
   type(c_ptr), value :: outputChannel
   type(c_ptr) :: handle
end function FissionComponentCreate

!! Assign
subroutine FissionComponentAssign(handleLHS, handleRHS) &
      bind(C, name='FissionComponentAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FissionComponentAssign

!! Delete
subroutine FissionComponentDelete(handle) &
      bind(C, name='FissionComponentDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionComponentDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FissionComponentRead(handle, filename, filenameSize) &
      bind(C, name='FissionComponentRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionComponentRead

!! Write to file
function FissionComponentWrite(handle, filename, filenameSize) &
      bind(C, name='FissionComponentWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionComponentWrite

!! Print to standard output, in our prettyprinting format
function FissionComponentPrint(handle) &
      bind(C, name='FissionComponentPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionComponentPrint

!! Print to standard output, as XML
function FissionComponentPrintXML(handle) &
      bind(C, name='FissionComponentPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionComponentPrintXML

!! Print to standard output, as JSON
function FissionComponentPrintJSON(handle) &
      bind(C, name='FissionComponentPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionComponentPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentLabelHas(handle) &
      bind(C, name='FissionComponentLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionComponentLabelHas

!! Get
function FissionComponentLabelGet(handle) &
      bind(C, name='FissionComponentLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function FissionComponentLabelGet

!! Set
subroutine FissionComponentLabelSet(handle, label, labelSize) &
      bind(C, name='FissionComponentLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine FissionComponentLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MT
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentENDFMTHas(handle) &
      bind(C, name='FissionComponentENDFMTHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionComponentENDFMTHas

!! Get
function FissionComponentENDFMTGet(handle) &
      bind(C, name='FissionComponentENDFMTGet') &
      result(ENDF_MT)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ENDF_MT
end function FissionComponentENDFMTGet

!! Set
subroutine FissionComponentENDFMTSet(handle, ENDF_MT, ENDF_MTSize) &
      bind(C, name='FissionComponentENDFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ENDF_MTSize
   character(c_char), intent(in) :: ENDF_MT(ENDF_MTSize)
end subroutine FissionComponentENDFMTSet


!! -----------------------------------------------------------------------------
!! Metadatum: fissionGenre
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentFissionGenreHas(handle) &
      bind(C, name='FissionComponentFissionGenreHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionComponentFissionGenreHas

!! Get
function FissionComponentFissionGenreGet(handle) &
      bind(C, name='FissionComponentFissionGenreGet') &
      result(fissionGenre)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: fissionGenre
end function FissionComponentFissionGenreGet

!! Set
subroutine FissionComponentFissionGenreSet(handle, fissionGenre, fissionGenreSize) &
      bind(C, name='FissionComponentFissionGenreSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: fissionGenreSize
   character(c_char), intent(in) :: fissionGenre(fissionGenreSize)
end subroutine FissionComponentFissionGenreSet


!! -----------------------------------------------------------------------------
!! Child: crossSection
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentCrossSectionHas(handle) &
      bind(C, name='FissionComponentCrossSectionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionComponentCrossSectionHas

!! Get, const
function FissionComponentCrossSectionGetConst(handle) &
      bind(C, name='FissionComponentCrossSectionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionComponentCrossSectionGetConst

!! Get
function FissionComponentCrossSectionGet(handle) &
      bind(C, name='FissionComponentCrossSectionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionComponentCrossSectionGet

!! Set
subroutine FissionComponentCrossSectionSet(handle, fieldHandle) &
      bind(C, name='FissionComponentCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionComponentCrossSectionSet


!! -----------------------------------------------------------------------------
!! Child: outputChannel
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentOutputChannelHas(handle) &
      bind(C, name='FissionComponentOutputChannelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionComponentOutputChannelHas

!! Get, const
function FissionComponentOutputChannelGetConst(handle) &
      bind(C, name='FissionComponentOutputChannelGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionComponentOutputChannelGetConst

!! Get
function FissionComponentOutputChannelGet(handle) &
      bind(C, name='FissionComponentOutputChannelGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionComponentOutputChannelGet

!! Set
subroutine FissionComponentOutputChannelSet(handle, fieldHandle) &
      bind(C, name='FissionComponentOutputChannelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionComponentOutputChannelSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFissionComponent
