
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFissionComponent
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionComponentDefaultConst() &
      bind(C, name='FissionComponentDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionComponentDefaultConst
end function FissionComponentDefaultConst

!! Create, default, non-const
function FissionComponentDefault() &
      bind(C, name='FissionComponentDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionComponentDefault
end function FissionComponentDefault

!! Create, general, const
function FissionComponentCreateConst( &
   label, &
   ENDF_MT, &
   fissionGenre, &
   crossSection, &
   outputChannel, &
   labelSize, &
   fissionGenreSize &
) &
      bind(C, name='FissionComponentCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), intent(in), value :: ENDF_MT
   integer(c_size_t), intent(in), value :: fissionGenreSize
   character(c_char), intent(in) :: fissionGenre(fissionGenreSize)
   type(c_ptr), intent(in), value :: crossSection
   type(c_ptr), intent(in), value :: outputChannel
   type(c_ptr) :: FissionComponentCreateConst
end function FissionComponentCreateConst

!! Create, general, non-const
function FissionComponentCreate( &
   label, &
   ENDF_MT, &
   fissionGenre, &
   crossSection, &
   outputChannel, &
   labelSize, &
   fissionGenreSize &
) &
      bind(C, name='FissionComponentCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), intent(in), value :: ENDF_MT
   integer(c_size_t), intent(in), value :: fissionGenreSize
   character(c_char), intent(in) :: fissionGenre(fissionGenreSize)
   type(c_ptr), intent(in), value :: crossSection
   type(c_ptr), intent(in), value :: outputChannel
   type(c_ptr) :: FissionComponentCreate
end function FissionComponentCreate

!! Assign
subroutine FissionComponentAssign(handleLHS, handleRHS) &
      bind(C, name='FissionComponentAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine FissionComponentAssign

!! Delete
subroutine FissionComponentDelete(handle) &
      bind(C, name='FissionComponentDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionComponentDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function FissionComponentRead(handle, filename, filenameSize) &
      bind(C, name='FissionComponentRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionComponentRead
end function FissionComponentRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function FissionComponentWrite(handle, filename, filenameSize) &
      bind(C, name='FissionComponentWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionComponentWrite
end function FissionComponentWrite

!! Print to standard output, in our prettyprinting format
function FissionComponentPrint(handle) &
      bind(C, name='FissionComponentPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentPrint
end function FissionComponentPrint

!! Print to standard output, as XML
function FissionComponentPrintXML(handle) &
      bind(C, name='FissionComponentPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentPrintXML
end function FissionComponentPrintXML

!! Print to standard output, as JSON
function FissionComponentPrintJSON(handle) &
      bind(C, name='FissionComponentPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentPrintJSON
end function FissionComponentPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentLabelHas(handle) &
      bind(C, name='FissionComponentLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentLabelHas
end function FissionComponentLabelHas

!! Get
function FissionComponentLabelGet(handle) &
      bind(C, name='FissionComponentLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionComponentLabelGet
end function FissionComponentLabelGet

!! Set
subroutine FissionComponentLabelSet(handle, label, labelSize) &
      bind(C, name='FissionComponentLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine FissionComponentLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MT
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentENDFMTHas(handle) &
      bind(C, name='FissionComponentENDFMTHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentENDFMTHas
end function FissionComponentENDFMTHas

!! Get
function FissionComponentENDFMTGet(handle) &
      bind(C, name='FissionComponentENDFMTGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentENDFMTGet
end function FissionComponentENDFMTGet

!! Set
subroutine FissionComponentENDFMTSet(handle, ENDF_MT) &
      bind(C, name='FissionComponentENDFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: ENDF_MT
end subroutine FissionComponentENDFMTSet


!! -----------------------------------------------------------------------------
!! Metadatum: fissionGenre
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentFissionGenreHas(handle) &
      bind(C, name='FissionComponentFissionGenreHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentFissionGenreHas
end function FissionComponentFissionGenreHas

!! Get
function FissionComponentFissionGenreGet(handle) &
      bind(C, name='FissionComponentFissionGenreGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionComponentFissionGenreGet
end function FissionComponentFissionGenreGet

!! Set
subroutine FissionComponentFissionGenreSet(handle, fissionGenre, fissionGenreSize) &
      bind(C, name='FissionComponentFissionGenreSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: fissionGenreSize
   character(c_char), intent(in) :: fissionGenre(fissionGenreSize)
end subroutine FissionComponentFissionGenreSet


!! -----------------------------------------------------------------------------
!! Child: crossSection
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentCrossSectionHas(handle) &
      bind(C, name='FissionComponentCrossSectionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentCrossSectionHas
end function FissionComponentCrossSectionHas

!! Get, const
function FissionComponentCrossSectionGetConst(handle) &
      bind(C, name='FissionComponentCrossSectionGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionComponentCrossSectionGetConst
end function FissionComponentCrossSectionGetConst

!! Get, non-const
function FissionComponentCrossSectionGet(handle) &
      bind(C, name='FissionComponentCrossSectionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionComponentCrossSectionGet
end function FissionComponentCrossSectionGet

!! Set
subroutine FissionComponentCrossSectionSet(handle, fieldHandle) &
      bind(C, name='FissionComponentCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentCrossSectionSet


!! -----------------------------------------------------------------------------
!! Child: outputChannel
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentOutputChannelHas(handle) &
      bind(C, name='FissionComponentOutputChannelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentOutputChannelHas
end function FissionComponentOutputChannelHas

!! Get, const
function FissionComponentOutputChannelGetConst(handle) &
      bind(C, name='FissionComponentOutputChannelGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionComponentOutputChannelGetConst
end function FissionComponentOutputChannelGetConst

!! Get, non-const
function FissionComponentOutputChannelGet(handle) &
      bind(C, name='FissionComponentOutputChannelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionComponentOutputChannelGet
end function FissionComponentOutputChannelGet

!! Set
subroutine FissionComponentOutputChannelSet(handle, fieldHandle) &
      bind(C, name='FissionComponentOutputChannelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentOutputChannelSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFissionComponent
