
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalR
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function RDefaultConst() &
      bind(C, name='RDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function RDefaultConst

!! Create, default
function RDefault() &
      bind(C, name='RDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function RDefault

!! Create, general, const
function RCreateConst( &
   XYs2d &
) &
      bind(C, name='RCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function RCreateConst

!! Create, general
function RCreate( &
   XYs2d &
) &
      bind(C, name='RCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function RCreate

!! Assign
subroutine RAssign(handleLHS, handleRHS) &
      bind(C, name='RAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine RAssign

!! Delete
subroutine RDelete(handle) &
      bind(C, name='RDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine RDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function RRead(handle, filename, filenameSize) &
      bind(C, name='RRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function RRead

!! Write to file
function RWrite(handle, filename, filenameSize) &
      bind(C, name='RWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function RWrite

!! Print to standard output, in our prettyprinting format
function RPrint(handle) &
      bind(C, name='RPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RPrint

!! Print to standard output, as XML
function RPrintXML(handle) &
      bind(C, name='RPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RPrintXML

!! Print to standard output, as JSON
function RPrintJSON(handle) &
      bind(C, name='RPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function RXYs2dHas(handle) &
      bind(C, name='RXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RXYs2dHas

!! Get, const
function RXYs2dGetConst(handle) &
      bind(C, name='RXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RXYs2dGetConst

!! Get
function RXYs2dGet(handle) &
      bind(C, name='RXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RXYs2dGet

!! Set
subroutine RXYs2dSet(handle, fieldHandle) &
      bind(C, name='RXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine RXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalR
