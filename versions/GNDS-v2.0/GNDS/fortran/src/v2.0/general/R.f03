
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalR
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function RDefaultConst() &
      bind(C, name='RDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: RDefaultConst
end function RDefaultConst

!! Create, default, non-const
function RDefault() &
      bind(C, name='RDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: RDefault
end function RDefault

!! Create, general, const
function RCreateConst( &
   XYs2d &
) &
      bind(C, name='RCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs2d
   type(c_ptr) :: RCreateConst
end function RCreateConst

!! Create, general, non-const
function RCreate( &
   XYs2d &
) &
      bind(C, name='RCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs2d
   type(c_ptr) :: RCreate
end function RCreate

!! Assign
subroutine RAssign(handleLHS, handleRHS) &
      bind(C, name='RAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine RAssign

!! Delete
subroutine RDelete(handle) &
      bind(C, name='RDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine RDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function RRead(handle, filename, filenameSize) &
      bind(C, name='RRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: RRead
end function RRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function RWrite(handle, filename, filenameSize) &
      bind(C, name='RWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: RWrite
end function RWrite

!! Print to standard output, in our prettyprinting format
function RPrint(handle) &
      bind(C, name='RPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RPrint
end function RPrint

!! Print to standard output, as XML
function RPrintXML(handle) &
      bind(C, name='RPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RPrintXML
end function RPrintXML

!! Print to standard output, as JSON
function RPrintJSON(handle) &
      bind(C, name='RPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RPrintJSON
end function RPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function RXYs2dHas(handle) &
      bind(C, name='RXYs2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RXYs2dHas
end function RXYs2dHas

!! Get, const
function RXYs2dGetConst(handle) &
      bind(C, name='RXYs2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: RXYs2dGetConst
end function RXYs2dGetConst

!! Get, non-const
function RXYs2dGet(handle) &
      bind(C, name='RXYs2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: RXYs2dGet
end function RXYs2dGet

!! Set
subroutine RXYs2dSet(handle, fieldHandle) &
      bind(C, name='RXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine RXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalR
