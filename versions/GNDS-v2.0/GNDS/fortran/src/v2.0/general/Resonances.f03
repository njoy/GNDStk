
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResonances
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResonancesDefaultConst() &
      bind(C, name='ResonancesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ResonancesDefaultConst
end function ResonancesDefaultConst

!! Create, default, non-const
function ResonancesDefault() &
      bind(C, name='ResonancesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ResonancesDefault
end function ResonancesDefault

!! Create, general, const
function ResonancesCreateConst( &
   href, &
   scatteringRadius, &
   resolved, &
   unresolved, &
   hrefSize &
) &
      bind(C, name='ResonancesCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), intent(in), value :: scatteringRadius
   type(c_ptr), intent(in), value :: resolved
   type(c_ptr), intent(in), value :: unresolved
   type(c_ptr) :: ResonancesCreateConst
end function ResonancesCreateConst

!! Create, general, non-const
function ResonancesCreate( &
   href, &
   scatteringRadius, &
   resolved, &
   unresolved, &
   hrefSize &
) &
      bind(C, name='ResonancesCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), intent(in), value :: scatteringRadius
   type(c_ptr), intent(in), value :: resolved
   type(c_ptr), intent(in), value :: unresolved
   type(c_ptr) :: ResonancesCreate
end function ResonancesCreate

!! Assign
subroutine ResonancesAssign(handleLHS, handleRHS) &
      bind(C, name='ResonancesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ResonancesAssign

!! Delete
subroutine ResonancesDelete(handle) &
      bind(C, name='ResonancesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonancesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ResonancesRead(handle, filename, filenameSize) &
      bind(C, name='ResonancesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ResonancesRead
end function ResonancesRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ResonancesWrite(handle, filename, filenameSize) &
      bind(C, name='ResonancesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ResonancesWrite
end function ResonancesWrite

!! Print to standard output, in our prettyprinting format
function ResonancesPrint(handle) &
      bind(C, name='ResonancesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesPrint
end function ResonancesPrint

!! Print to standard output, as XML
function ResonancesPrintXML(handle) &
      bind(C, name='ResonancesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesPrintXML
end function ResonancesPrintXML

!! Print to standard output, as JSON
function ResonancesPrintJSON(handle) &
      bind(C, name='ResonancesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesPrintJSON
end function ResonancesPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ResonancesHrefHas(handle) &
      bind(C, name='ResonancesHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesHrefHas
end function ResonancesHrefHas

!! Get
function ResonancesHrefGet(handle) &
      bind(C, name='ResonancesHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ResonancesHrefGet
end function ResonancesHrefGet

!! Set
subroutine ResonancesHrefSet(handle, href, hrefSize) &
      bind(C, name='ResonancesHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ResonancesHrefSet


!! -----------------------------------------------------------------------------
!! Child: scatteringRadius
!! -----------------------------------------------------------------------------

!! Has
function ResonancesScatteringRadiusHas(handle) &
      bind(C, name='ResonancesScatteringRadiusHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesScatteringRadiusHas
end function ResonancesScatteringRadiusHas

!! Get, const
function ResonancesScatteringRadiusGetConst(handle) &
      bind(C, name='ResonancesScatteringRadiusGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ResonancesScatteringRadiusGetConst
end function ResonancesScatteringRadiusGetConst

!! Get, non-const
function ResonancesScatteringRadiusGet(handle) &
      bind(C, name='ResonancesScatteringRadiusGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ResonancesScatteringRadiusGet
end function ResonancesScatteringRadiusGet

!! Set
subroutine ResonancesScatteringRadiusSet(handle, fieldHandle) &
      bind(C, name='ResonancesScatteringRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonancesScatteringRadiusSet


!! -----------------------------------------------------------------------------
!! Child: resolved
!! -----------------------------------------------------------------------------

!! Has
function ResonancesResolvedHas(handle) &
      bind(C, name='ResonancesResolvedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesResolvedHas
end function ResonancesResolvedHas

!! Get, const
function ResonancesResolvedGetConst(handle) &
      bind(C, name='ResonancesResolvedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ResonancesResolvedGetConst
end function ResonancesResolvedGetConst

!! Get, non-const
function ResonancesResolvedGet(handle) &
      bind(C, name='ResonancesResolvedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ResonancesResolvedGet
end function ResonancesResolvedGet

!! Set
subroutine ResonancesResolvedSet(handle, fieldHandle) &
      bind(C, name='ResonancesResolvedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonancesResolvedSet


!! -----------------------------------------------------------------------------
!! Child: unresolved
!! -----------------------------------------------------------------------------

!! Has
function ResonancesUnresolvedHas(handle) &
      bind(C, name='ResonancesUnresolvedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResonancesUnresolvedHas
end function ResonancesUnresolvedHas

!! Get, const
function ResonancesUnresolvedGetConst(handle) &
      bind(C, name='ResonancesUnresolvedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ResonancesUnresolvedGetConst
end function ResonancesUnresolvedGetConst

!! Get, non-const
function ResonancesUnresolvedGet(handle) &
      bind(C, name='ResonancesUnresolvedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ResonancesUnresolvedGet
end function ResonancesUnresolvedGet

!! Set
subroutine ResonancesUnresolvedSet(handle, fieldHandle) &
      bind(C, name='ResonancesUnresolvedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonancesUnresolvedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResonances
