
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResonances
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResonancesDefaultConst() &
      bind(C, name='ResonancesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonancesDefaultConst

!! Create, default
function ResonancesDefault() &
      bind(C, name='ResonancesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonancesDefault

!! Create, general, const
function ResonancesCreateConst( &
   href, &
   scatteringRadius, &
   resolved, &
   unresolved, &
   hrefSize &
) &
      bind(C, name='ResonancesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), value :: scatteringRadius
   type(c_ptr), value :: resolved
   type(c_ptr), value :: unresolved
   type(c_ptr) :: handle
end function ResonancesCreateConst

!! Create, general
function ResonancesCreate( &
   href, &
   scatteringRadius, &
   resolved, &
   unresolved, &
   hrefSize &
) &
      bind(C, name='ResonancesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), value :: scatteringRadius
   type(c_ptr), value :: resolved
   type(c_ptr), value :: unresolved
   type(c_ptr) :: handle
end function ResonancesCreate

!! Assign
subroutine ResonancesAssign(handleLHS, handleRHS) &
      bind(C, name='ResonancesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResonancesAssign

!! Delete
subroutine ResonancesDelete(handle) &
      bind(C, name='ResonancesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonancesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResonancesRead(handle, filename, filenameSize) &
      bind(C, name='ResonancesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonancesRead

!! Write to file
function ResonancesWrite(handle, filename, filenameSize) &
      bind(C, name='ResonancesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonancesWrite

!! Print to standard output, in our prettyprinting format
function ResonancesPrint(handle) &
      bind(C, name='ResonancesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonancesPrint

!! Print to standard output, as XML
function ResonancesPrintXML(handle) &
      bind(C, name='ResonancesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonancesPrintXML

!! Print to standard output, as JSON
function ResonancesPrintJSON(handle) &
      bind(C, name='ResonancesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonancesPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ResonancesHrefHas(handle) &
      bind(C, name='ResonancesHrefHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesHrefHas

!! Get
function ResonancesHrefGet(handle) &
      bind(C, name='ResonancesHrefGet') &
      result(href)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: href
end function ResonancesHrefGet

!! Set
subroutine ResonancesHrefSet(handle, href, hrefSize) &
      bind(C, name='ResonancesHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ResonancesHrefSet


!! -----------------------------------------------------------------------------
!! Child: scatteringRadius
!! -----------------------------------------------------------------------------

!! Has
function ResonancesScatteringRadiusHas(handle) &
      bind(C, name='ResonancesScatteringRadiusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesScatteringRadiusHas

!! Get, const
function ResonancesScatteringRadiusGetConst(handle) &
      bind(C, name='ResonancesScatteringRadiusGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesScatteringRadiusGetConst

!! Get
function ResonancesScatteringRadiusGet(handle) &
      bind(C, name='ResonancesScatteringRadiusGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesScatteringRadiusGet

!! Set
subroutine ResonancesScatteringRadiusSet(handle, fieldHandle) &
      bind(C, name='ResonancesScatteringRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonancesScatteringRadiusSet


!! -----------------------------------------------------------------------------
!! Child: resolved
!! -----------------------------------------------------------------------------

!! Has
function ResonancesResolvedHas(handle) &
      bind(C, name='ResonancesResolvedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesResolvedHas

!! Get, const
function ResonancesResolvedGetConst(handle) &
      bind(C, name='ResonancesResolvedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesResolvedGetConst

!! Get
function ResonancesResolvedGet(handle) &
      bind(C, name='ResonancesResolvedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesResolvedGet

!! Set
subroutine ResonancesResolvedSet(handle, fieldHandle) &
      bind(C, name='ResonancesResolvedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonancesResolvedSet


!! -----------------------------------------------------------------------------
!! Child: unresolved
!! -----------------------------------------------------------------------------

!! Has
function ResonancesUnresolvedHas(handle) &
      bind(C, name='ResonancesUnresolvedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesUnresolvedHas

!! Get, const
function ResonancesUnresolvedGetConst(handle) &
      bind(C, name='ResonancesUnresolvedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesUnresolvedGetConst

!! Get
function ResonancesUnresolvedGet(handle) &
      bind(C, name='ResonancesUnresolvedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesUnresolvedGet

!! Set
subroutine ResonancesUnresolvedSet(handle, fieldHandle) &
      bind(C, name='ResonancesUnresolvedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonancesUnresolvedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResonances
