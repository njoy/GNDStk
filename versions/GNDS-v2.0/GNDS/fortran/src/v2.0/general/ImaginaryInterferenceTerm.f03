
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalImaginaryInterferenceTerm
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ImaginaryInterferenceTermDefaultConst() &
      bind(C, name='ImaginaryInterferenceTermDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ImaginaryInterferenceTermDefaultConst

!! Create, default
function ImaginaryInterferenceTermDefault() &
      bind(C, name='ImaginaryInterferenceTermDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ImaginaryInterferenceTermDefault

!! Create, general, const
function ImaginaryInterferenceTermCreateConst( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='ImaginaryInterferenceTermCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: regions2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function ImaginaryInterferenceTermCreateConst

!! Create, general
function ImaginaryInterferenceTermCreate( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='ImaginaryInterferenceTermCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: regions2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function ImaginaryInterferenceTermCreate

!! Assign
subroutine ImaginaryInterferenceTermAssign(handleLHS, handleRHS) &
      bind(C, name='ImaginaryInterferenceTermAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ImaginaryInterferenceTermAssign

!! Delete
subroutine ImaginaryInterferenceTermDelete(handle) &
      bind(C, name='ImaginaryInterferenceTermDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ImaginaryInterferenceTermDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ImaginaryInterferenceTermRead(handle, filename, filenameSize) &
      bind(C, name='ImaginaryInterferenceTermRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ImaginaryInterferenceTermRead

!! Write to file
function ImaginaryInterferenceTermWrite(handle, filename, filenameSize) &
      bind(C, name='ImaginaryInterferenceTermWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ImaginaryInterferenceTermWrite

!! Print to standard output, in our prettyprinting format
function ImaginaryInterferenceTermPrint(handle) &
      bind(C, name='ImaginaryInterferenceTermPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ImaginaryInterferenceTermPrint

!! Print to standard output, as XML
function ImaginaryInterferenceTermPrintXML(handle) &
      bind(C, name='ImaginaryInterferenceTermPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ImaginaryInterferenceTermPrintXML

!! Print to standard output, as JSON
function ImaginaryInterferenceTermPrintJSON(handle) &
      bind(C, name='ImaginaryInterferenceTermPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ImaginaryInterferenceTermPrintJSON


!! -----------------------------------------------------------------------------
!! Child: regions2d
!! -----------------------------------------------------------------------------

!! Has
function ImaginaryInterferenceTermRegions2dHas(handle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ImaginaryInterferenceTermRegions2dHas

!! Get, const
function ImaginaryInterferenceTermRegions2dGetConst(handle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ImaginaryInterferenceTermRegions2dGetConst

!! Get
function ImaginaryInterferenceTermRegions2dGet(handle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ImaginaryInterferenceTermRegions2dGet

!! Set
subroutine ImaginaryInterferenceTermRegions2dSet(handle, fieldHandle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ImaginaryInterferenceTermRegions2dSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function ImaginaryInterferenceTermXYs2dHas(handle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ImaginaryInterferenceTermXYs2dHas

!! Get, const
function ImaginaryInterferenceTermXYs2dGetConst(handle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ImaginaryInterferenceTermXYs2dGetConst

!! Get
function ImaginaryInterferenceTermXYs2dGet(handle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ImaginaryInterferenceTermXYs2dGet

!! Set
subroutine ImaginaryInterferenceTermXYs2dSet(handle, fieldHandle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ImaginaryInterferenceTermXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalImaginaryInterferenceTerm
