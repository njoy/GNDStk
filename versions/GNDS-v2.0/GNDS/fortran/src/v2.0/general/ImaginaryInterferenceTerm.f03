
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalImaginaryInterferenceTerm
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ImaginaryInterferenceTermDefaultConst() &
      bind(C, name='ImaginaryInterferenceTermDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ImaginaryInterferenceTermDefaultConst
end function ImaginaryInterferenceTermDefaultConst

!! Create, default, non-const
function ImaginaryInterferenceTermDefault() &
      bind(C, name='ImaginaryInterferenceTermDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ImaginaryInterferenceTermDefault
end function ImaginaryInterferenceTermDefault

!! Create, general, const
function ImaginaryInterferenceTermCreateConst( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='ImaginaryInterferenceTermCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: regions2d
   type(c_ptr), intent(in), value :: XYs2d
   type(c_ptr) :: ImaginaryInterferenceTermCreateConst
end function ImaginaryInterferenceTermCreateConst

!! Create, general, non-const
function ImaginaryInterferenceTermCreate( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='ImaginaryInterferenceTermCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: regions2d
   type(c_ptr), intent(in), value :: XYs2d
   type(c_ptr) :: ImaginaryInterferenceTermCreate
end function ImaginaryInterferenceTermCreate

!! Assign
subroutine ImaginaryInterferenceTermAssign(handleLHS, handleRHS) &
      bind(C, name='ImaginaryInterferenceTermAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ImaginaryInterferenceTermAssign

!! Delete
subroutine ImaginaryInterferenceTermDelete(handle) &
      bind(C, name='ImaginaryInterferenceTermDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ImaginaryInterferenceTermDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ImaginaryInterferenceTermRead(handle, filename, filenameSize) &
      bind(C, name='ImaginaryInterferenceTermRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ImaginaryInterferenceTermRead
end function ImaginaryInterferenceTermRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ImaginaryInterferenceTermWrite(handle, filename, filenameSize) &
      bind(C, name='ImaginaryInterferenceTermWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ImaginaryInterferenceTermWrite
end function ImaginaryInterferenceTermWrite

!! Print to standard output, in our prettyprinting format
function ImaginaryInterferenceTermPrint(handle) &
      bind(C, name='ImaginaryInterferenceTermPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ImaginaryInterferenceTermPrint
end function ImaginaryInterferenceTermPrint

!! Print to standard output, as XML
function ImaginaryInterferenceTermPrintXML(handle) &
      bind(C, name='ImaginaryInterferenceTermPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ImaginaryInterferenceTermPrintXML
end function ImaginaryInterferenceTermPrintXML

!! Print to standard output, as JSON
function ImaginaryInterferenceTermPrintJSON(handle) &
      bind(C, name='ImaginaryInterferenceTermPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ImaginaryInterferenceTermPrintJSON
end function ImaginaryInterferenceTermPrintJSON


!! -----------------------------------------------------------------------------
!! Child: regions2d
!! -----------------------------------------------------------------------------

!! Has
function ImaginaryInterferenceTermRegions2dHas(handle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ImaginaryInterferenceTermRegions2dHas
end function ImaginaryInterferenceTermRegions2dHas

!! Get, const
function ImaginaryInterferenceTermRegions2dGetConst(handle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ImaginaryInterferenceTermRegions2dGetConst
end function ImaginaryInterferenceTermRegions2dGetConst

!! Get, non-const
function ImaginaryInterferenceTermRegions2dGet(handle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ImaginaryInterferenceTermRegions2dGet
end function ImaginaryInterferenceTermRegions2dGet

!! Set
subroutine ImaginaryInterferenceTermRegions2dSet(handle, fieldHandle) &
      bind(C, name='ImaginaryInterferenceTermRegions2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ImaginaryInterferenceTermRegions2dSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function ImaginaryInterferenceTermXYs2dHas(handle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ImaginaryInterferenceTermXYs2dHas
end function ImaginaryInterferenceTermXYs2dHas

!! Get, const
function ImaginaryInterferenceTermXYs2dGetConst(handle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ImaginaryInterferenceTermXYs2dGetConst
end function ImaginaryInterferenceTermXYs2dGetConst

!! Get, non-const
function ImaginaryInterferenceTermXYs2dGet(handle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ImaginaryInterferenceTermXYs2dGet
end function ImaginaryInterferenceTermXYs2dGet

!! Set
subroutine ImaginaryInterferenceTermXYs2dSet(handle, fieldHandle) &
      bind(C, name='ImaginaryInterferenceTermXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ImaginaryInterferenceTermXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalImaginaryInterferenceTerm
