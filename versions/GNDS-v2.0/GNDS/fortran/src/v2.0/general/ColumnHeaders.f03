
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalColumnHeaders
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ColumnHeadersDefaultConst() &
      bind(C, name='ColumnHeadersDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ColumnHeadersDefaultConst

!! Create, default
function ColumnHeadersDefault() &
      bind(C, name='ColumnHeadersDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ColumnHeadersDefault

!! Create, general, const
function ColumnHeadersCreateConst( &
   column, columnSize &
) &
      bind(C, name='ColumnHeadersCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: columnSize
   type(c_ptr) :: column(columnSize)
   type(c_ptr) :: handle
end function ColumnHeadersCreateConst

!! Create, general
function ColumnHeadersCreate( &
   column, columnSize &
) &
      bind(C, name='ColumnHeadersCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: columnSize
   type(c_ptr) :: column(columnSize)
   type(c_ptr) :: handle
end function ColumnHeadersCreate

!! Assign
subroutine ColumnHeadersAssign(handleLHS, handleRHS) &
      bind(C, name='ColumnHeadersAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ColumnHeadersAssign

!! Delete
subroutine ColumnHeadersDelete(handle) &
      bind(C, name='ColumnHeadersDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ColumnHeadersDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ColumnHeadersRead(handle, filename, filenameSize) &
      bind(C, name='ColumnHeadersRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ColumnHeadersRead

!! Write to file
function ColumnHeadersWrite(handle, filename, filenameSize) &
      bind(C, name='ColumnHeadersWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ColumnHeadersWrite

!! Print to standard output, in our prettyprinting format
function ColumnHeadersPrint(handle) &
      bind(C, name='ColumnHeadersPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnHeadersPrint

!! Print to standard output, as XML
function ColumnHeadersPrintXML(handle) &
      bind(C, name='ColumnHeadersPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnHeadersPrintXML

!! Print to standard output, as JSON
function ColumnHeadersPrintJSON(handle) &
      bind(C, name='ColumnHeadersPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnHeadersPrintJSON


!! -----------------------------------------------------------------------------
!! Child: column
!! -----------------------------------------------------------------------------

!! Has
function ColumnHeadersColumnHas(handle) &
      bind(C, name='ColumnHeadersColumnHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnHeadersColumnHas

!! Clear
subroutine ColumnHeadersColumnClear(handle) &
      bind(C, name='ColumnHeadersColumnClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ColumnHeadersColumnClear

!! Size
function ColumnHeadersColumnSize(handle) &
      bind(C, name='ColumnHeadersColumnSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function ColumnHeadersColumnSize

!! Add
subroutine ColumnHeadersColumnAdd(handle, fieldHandle) &
      bind(C, name='ColumnHeadersColumnAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ColumnHeadersColumnAdd

!! Get, by index \in [0,size), const
function ColumnHeadersColumnGetConst(handle, index) &
      bind(C, name='ColumnHeadersColumnGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetConst

!! Get, by index \in [0,size)
function ColumnHeadersColumnGet(handle, index) &
      bind(C, name='ColumnHeadersColumnGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGet

!! Set, by index \in [0,size)
subroutine ColumnHeadersColumnSet(handle, index, fieldHandle) &
      bind(C, name='ColumnHeadersColumnSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ColumnHeadersColumnSet

!! ------------------------
!! Re: metadatum index
!! ------------------------

!! Has, by index
function ColumnHeadersColumnHasByIndex(handle, meta) &
      bind(C, name='ColumnHeadersColumnHasByIndex') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function ColumnHeadersColumnHasByIndex

!! Get, by index, const
function ColumnHeadersColumnGetByIndexConst(handle, meta) &
      bind(C, name='ColumnHeadersColumnGetByIndexConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetByIndexConst

!! Get, by index
function ColumnHeadersColumnGetByIndex(handle, meta) &
      bind(C, name='ColumnHeadersColumnGetByIndex') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetByIndex

!! Set, by index
subroutine ColumnHeadersColumnSetByIndex(handle, meta, fieldHandle) &
      bind(C, name='ColumnHeadersColumnSetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ColumnHeadersColumnSetByIndex

!! ------------------------
!! Re: metadatum name
!! ------------------------

!! Has, by name
function ColumnHeadersColumnHasByName(handle, meta, metaSize) &
      bind(C, name='ColumnHeadersColumnHasByName') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ColumnHeadersColumnHasByName

!! Get, by name, const
function ColumnHeadersColumnGetByNameConst(handle, meta, metaSize) &
      bind(C, name='ColumnHeadersColumnGetByNameConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetByNameConst

!! Get, by name
function ColumnHeadersColumnGetByName(handle, meta, metaSize) &
      bind(C, name='ColumnHeadersColumnGetByName') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetByName

!! Set, by name
subroutine ColumnHeadersColumnSetByName(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ColumnHeadersColumnSetByName')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ColumnHeadersColumnSetByName

!! ------------------------
!! Re: metadatum unit
!! ------------------------

!! Has, by unit
function ColumnHeadersColumnHasByUnit(handle, meta, metaSize) &
      bind(C, name='ColumnHeadersColumnHasByUnit') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ColumnHeadersColumnHasByUnit

!! Get, by unit, const
function ColumnHeadersColumnGetByUnitConst(handle, meta, metaSize) &
      bind(C, name='ColumnHeadersColumnGetByUnitConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetByUnitConst

!! Get, by unit
function ColumnHeadersColumnGetByUnit(handle, meta, metaSize) &
      bind(C, name='ColumnHeadersColumnGetByUnit') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ColumnHeadersColumnGetByUnit

!! Set, by unit
subroutine ColumnHeadersColumnSetByUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ColumnHeadersColumnSetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ColumnHeadersColumnSetByUnit


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalColumnHeaders
