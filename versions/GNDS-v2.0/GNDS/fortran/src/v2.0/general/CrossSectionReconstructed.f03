
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCrossSectionReconstructed
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CrossSectionReconstructedDefaultConst() &
      bind(C, name='CrossSectionReconstructedDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionReconstructedDefaultConst
end function CrossSectionReconstructedDefaultConst

!! Create, default, non-const
function CrossSectionReconstructedDefault() &
      bind(C, name='CrossSectionReconstructedDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionReconstructedDefault
end function CrossSectionReconstructedDefault

!! Create, general, const
function CrossSectionReconstructedCreateConst( &
   label, &
   derivedFrom, &
   date, &
   labelSize, &
   derivedFromSize, &
   dateSize &
) &
      bind(C, name='CrossSectionReconstructedCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: derivedFromSize
   character(c_char), intent(in) :: derivedFrom(derivedFromSize)
   integer(c_size_t), intent(in), value :: dateSize
   character(c_char), intent(in) :: date(dateSize)
   type(c_ptr) :: CrossSectionReconstructedCreateConst
end function CrossSectionReconstructedCreateConst

!! Create, general, non-const
function CrossSectionReconstructedCreate( &
   label, &
   derivedFrom, &
   date, &
   labelSize, &
   derivedFromSize, &
   dateSize &
) &
      bind(C, name='CrossSectionReconstructedCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: derivedFromSize
   character(c_char), intent(in) :: derivedFrom(derivedFromSize)
   integer(c_size_t), intent(in), value :: dateSize
   character(c_char), intent(in) :: date(dateSize)
   type(c_ptr) :: CrossSectionReconstructedCreate
end function CrossSectionReconstructedCreate

!! Assign
subroutine CrossSectionReconstructedAssign(handleLHS, handleRHS) &
      bind(C, name='CrossSectionReconstructedAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine CrossSectionReconstructedAssign

!! Delete
subroutine CrossSectionReconstructedDelete(handle) &
      bind(C, name='CrossSectionReconstructedDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionReconstructedDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function CrossSectionReconstructedRead(handle, filename, filenameSize) &
      bind(C, name='CrossSectionReconstructedRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionReconstructedRead
end function CrossSectionReconstructedRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function CrossSectionReconstructedWrite(handle, filename, filenameSize) &
      bind(C, name='CrossSectionReconstructedWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionReconstructedWrite
end function CrossSectionReconstructedWrite

!! Print to standard output, in our prettyprinting format
function CrossSectionReconstructedPrint(handle) &
      bind(C, name='CrossSectionReconstructedPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReconstructedPrint
end function CrossSectionReconstructedPrint

!! Print to standard output, as XML
function CrossSectionReconstructedPrintXML(handle) &
      bind(C, name='CrossSectionReconstructedPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReconstructedPrintXML
end function CrossSectionReconstructedPrintXML

!! Print to standard output, as JSON
function CrossSectionReconstructedPrintJSON(handle) &
      bind(C, name='CrossSectionReconstructedPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReconstructedPrintJSON
end function CrossSectionReconstructedPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionReconstructedLabelHas(handle) &
      bind(C, name='CrossSectionReconstructedLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReconstructedLabelHas
end function CrossSectionReconstructedLabelHas

!! Get
function CrossSectionReconstructedLabelGet(handle) &
      bind(C, name='CrossSectionReconstructedLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionReconstructedLabelGet
end function CrossSectionReconstructedLabelGet

!! Set
subroutine CrossSectionReconstructedLabelSet(handle, label, labelSize) &
      bind(C, name='CrossSectionReconstructedLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CrossSectionReconstructedLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: derivedFrom
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionReconstructedDerivedFromHas(handle) &
      bind(C, name='CrossSectionReconstructedDerivedFromHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReconstructedDerivedFromHas
end function CrossSectionReconstructedDerivedFromHas

!! Get
function CrossSectionReconstructedDerivedFromGet(handle) &
      bind(C, name='CrossSectionReconstructedDerivedFromGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionReconstructedDerivedFromGet
end function CrossSectionReconstructedDerivedFromGet

!! Set
subroutine CrossSectionReconstructedDerivedFromSet(handle, derivedFrom, derivedFromSize) &
      bind(C, name='CrossSectionReconstructedDerivedFromSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: derivedFromSize
   character(c_char), intent(in) :: derivedFrom(derivedFromSize)
end subroutine CrossSectionReconstructedDerivedFromSet


!! -----------------------------------------------------------------------------
!! Metadatum: date
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionReconstructedDateHas(handle) &
      bind(C, name='CrossSectionReconstructedDateHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReconstructedDateHas
end function CrossSectionReconstructedDateHas

!! Get
function CrossSectionReconstructedDateGet(handle) &
      bind(C, name='CrossSectionReconstructedDateGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionReconstructedDateGet
end function CrossSectionReconstructedDateGet

!! Set
subroutine CrossSectionReconstructedDateSet(handle, date, dateSize) &
      bind(C, name='CrossSectionReconstructedDateSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: dateSize
   character(c_char), intent(in) :: date(dateSize)
end subroutine CrossSectionReconstructedDateSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCrossSectionReconstructed
