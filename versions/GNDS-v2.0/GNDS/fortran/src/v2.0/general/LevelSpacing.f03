
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalLevelSpacing
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function LevelSpacingDefaultConst() &
      bind(C, name='LevelSpacingDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function LevelSpacingDefaultConst

!! Create, default
function LevelSpacingDefault() &
      bind(C, name='LevelSpacingDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function LevelSpacingDefault

!! Create, general, const
function LevelSpacingCreateConst( &
   XYs1d, &
   constant1d &
) &
      bind(C, name='LevelSpacingCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: constant1d
   type(c_ptr) :: handle
end function LevelSpacingCreateConst

!! Create, general
function LevelSpacingCreate( &
   XYs1d, &
   constant1d &
) &
      bind(C, name='LevelSpacingCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: constant1d
   type(c_ptr) :: handle
end function LevelSpacingCreate

!! Assign
subroutine LevelSpacingAssign(handleLHS, handleRHS) &
      bind(C, name='LevelSpacingAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine LevelSpacingAssign

!! Delete
subroutine LevelSpacingDelete(handle) &
      bind(C, name='LevelSpacingDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine LevelSpacingDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function LevelSpacingRead(handle, filename, filenameSize) &
      bind(C, name='LevelSpacingRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function LevelSpacingRead

!! Write to file
function LevelSpacingWrite(handle, filename, filenameSize) &
      bind(C, name='LevelSpacingWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function LevelSpacingWrite

!! Print to standard output, in our prettyprinting format
function LevelSpacingPrint(handle) &
      bind(C, name='LevelSpacingPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LevelSpacingPrint

!! Print to standard output, as XML
function LevelSpacingPrintXML(handle) &
      bind(C, name='LevelSpacingPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LevelSpacingPrintXML

!! Print to standard output, as JSON
function LevelSpacingPrintJSON(handle) &
      bind(C, name='LevelSpacingPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LevelSpacingPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function LevelSpacingXYs1dHas(handle) &
      bind(C, name='LevelSpacingXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LevelSpacingXYs1dHas

!! Get, const
function LevelSpacingXYs1dGetConst(handle) &
      bind(C, name='LevelSpacingXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LevelSpacingXYs1dGetConst

!! Get
function LevelSpacingXYs1dGet(handle) &
      bind(C, name='LevelSpacingXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LevelSpacingXYs1dGet

!! Set
subroutine LevelSpacingXYs1dSet(handle, fieldHandle) &
      bind(C, name='LevelSpacingXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LevelSpacingXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function LevelSpacingConstant1dHas(handle) &
      bind(C, name='LevelSpacingConstant1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LevelSpacingConstant1dHas

!! Get, const
function LevelSpacingConstant1dGetConst(handle) &
      bind(C, name='LevelSpacingConstant1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LevelSpacingConstant1dGetConst

!! Get
function LevelSpacingConstant1dGet(handle) &
      bind(C, name='LevelSpacingConstant1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LevelSpacingConstant1dGet

!! Set
subroutine LevelSpacingConstant1dSet(handle, fieldHandle) &
      bind(C, name='LevelSpacingConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LevelSpacingConstant1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalLevelSpacing
