
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalLevelSpacing
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function LevelSpacingDefaultConst() &
      bind(C, name='LevelSpacingDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: LevelSpacingDefaultConst
end function LevelSpacingDefaultConst

!! Create, default, non-const
function LevelSpacingDefault() &
      bind(C, name='LevelSpacingDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: LevelSpacingDefault
end function LevelSpacingDefault

!! Create, general, const
function LevelSpacingCreateConst( &
   XYs1d, &
   constant1d &
) &
      bind(C, name='LevelSpacingCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr) :: LevelSpacingCreateConst
end function LevelSpacingCreateConst

!! Create, general, non-const
function LevelSpacingCreate( &
   XYs1d, &
   constant1d &
) &
      bind(C, name='LevelSpacingCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr) :: LevelSpacingCreate
end function LevelSpacingCreate

!! Assign
subroutine LevelSpacingAssign(handleLHS, handleRHS) &
      bind(C, name='LevelSpacingAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine LevelSpacingAssign

!! Delete
subroutine LevelSpacingDelete(handle) &
      bind(C, name='LevelSpacingDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine LevelSpacingDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function LevelSpacingRead(handle, filename, filenameSize) &
      bind(C, name='LevelSpacingRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: LevelSpacingRead
end function LevelSpacingRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function LevelSpacingWrite(handle, filename, filenameSize) &
      bind(C, name='LevelSpacingWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: LevelSpacingWrite
end function LevelSpacingWrite

!! Print to standard output, in our prettyprinting format
function LevelSpacingPrint(handle) &
      bind(C, name='LevelSpacingPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LevelSpacingPrint
end function LevelSpacingPrint

!! Print to standard output, as XML
function LevelSpacingPrintXML(handle) &
      bind(C, name='LevelSpacingPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LevelSpacingPrintXML
end function LevelSpacingPrintXML

!! Print to standard output, as JSON
function LevelSpacingPrintJSON(handle) &
      bind(C, name='LevelSpacingPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LevelSpacingPrintJSON
end function LevelSpacingPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function LevelSpacingXYs1dHas(handle) &
      bind(C, name='LevelSpacingXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LevelSpacingXYs1dHas
end function LevelSpacingXYs1dHas

!! Get, const
function LevelSpacingXYs1dGetConst(handle) &
      bind(C, name='LevelSpacingXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: LevelSpacingXYs1dGetConst
end function LevelSpacingXYs1dGetConst

!! Get, non-const
function LevelSpacingXYs1dGet(handle) &
      bind(C, name='LevelSpacingXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: LevelSpacingXYs1dGet
end function LevelSpacingXYs1dGet

!! Set
subroutine LevelSpacingXYs1dSet(handle, fieldHandle) &
      bind(C, name='LevelSpacingXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine LevelSpacingXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function LevelSpacingConstant1dHas(handle) &
      bind(C, name='LevelSpacingConstant1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LevelSpacingConstant1dHas
end function LevelSpacingConstant1dHas

!! Get, const
function LevelSpacingConstant1dGetConst(handle) &
      bind(C, name='LevelSpacingConstant1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: LevelSpacingConstant1dGetConst
end function LevelSpacingConstant1dGetConst

!! Get, non-const
function LevelSpacingConstant1dGet(handle) &
      bind(C, name='LevelSpacingConstant1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: LevelSpacingConstant1dGet
end function LevelSpacingConstant1dGet

!! Set
subroutine LevelSpacingConstant1dSet(handle, fieldHandle) &
      bind(C, name='LevelSpacingConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine LevelSpacingConstant1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalLevelSpacing
