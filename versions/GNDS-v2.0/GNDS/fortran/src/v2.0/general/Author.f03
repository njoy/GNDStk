
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAuthor
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AuthorDefaultConst() &
      bind(C, name='AuthorDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AuthorDefaultConst
end function AuthorDefaultConst

!! Create, default
function AuthorDefault() &
      bind(C, name='AuthorDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AuthorDefault
end function AuthorDefault

!! Create, general, const
function AuthorCreateConst( &
   name, &
   nameSize &
) &
      bind(C, name='AuthorCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: nameSize
   character(c_char), intent(in) :: name(nameSize)
   type(c_ptr) :: AuthorCreateConst
end function AuthorCreateConst

!! Create, general
function AuthorCreate( &
   name, &
   nameSize &
) &
      bind(C, name='AuthorCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: nameSize
   character(c_char), intent(in) :: name(nameSize)
   type(c_ptr) :: AuthorCreate
end function AuthorCreate

!! Assign
subroutine AuthorAssign(handleLHS, handleRHS) &
      bind(C, name='AuthorAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AuthorAssign

!! Delete
subroutine AuthorDelete(handle) &
      bind(C, name='AuthorDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AuthorDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AuthorRead(handle, filename, filenameSize) &
      bind(C, name='AuthorRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AuthorRead
end function AuthorRead

!! Write to file
function AuthorWrite(handle, filename, filenameSize) &
      bind(C, name='AuthorWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AuthorWrite
end function AuthorWrite

!! Print to standard output, in our prettyprinting format
function AuthorPrint(handle) &
      bind(C, name='AuthorPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AuthorPrint
end function AuthorPrint

!! Print to standard output, as XML
function AuthorPrintXML(handle) &
      bind(C, name='AuthorPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AuthorPrintXML
end function AuthorPrintXML

!! Print to standard output, as JSON
function AuthorPrintJSON(handle) &
      bind(C, name='AuthorPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AuthorPrintJSON
end function AuthorPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: name
!! -----------------------------------------------------------------------------

!! Has
function AuthorNameHas(handle) &
      bind(C, name='AuthorNameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AuthorNameHas
end function AuthorNameHas

!! Get
function AuthorNameGet(handle) &
      bind(C, name='AuthorNameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AuthorNameGet
end function AuthorNameGet

!! Set
subroutine AuthorNameSet(handle, name, nameSize) &
      bind(C, name='AuthorNameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: nameSize
   character(c_char), intent(in) :: name(nameSize)
end subroutine AuthorNameSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAuthor
