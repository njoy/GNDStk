
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAxis
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AxisDefaultConst() &
      bind(C, name='AxisDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AxisDefaultConst
end function AxisDefaultConst

!! Create, default, non-const
function AxisDefault() &
      bind(C, name='AxisDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AxisDefault
end function AxisDefault

!! Create, general, const
function AxisCreateConst( &
   index, &
   label, &
   unit, &
   labelSize, &
   unitSize &
) &
      bind(C, name='AxisCreateConst')
   use iso_c_binding
   implicit none
   integer(c_int), intent(in), value :: index
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: AxisCreateConst
end function AxisCreateConst

!! Create, general, non-const
function AxisCreate( &
   index, &
   label, &
   unit, &
   labelSize, &
   unitSize &
) &
      bind(C, name='AxisCreate')
   use iso_c_binding
   implicit none
   integer(c_int), intent(in), value :: index
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: AxisCreate
end function AxisCreate

!! Assign
subroutine AxisAssign(handleLHS, handleRHS) &
      bind(C, name='AxisAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AxisAssign

!! Delete
subroutine AxisDelete(handle) &
      bind(C, name='AxisDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxisDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function AxisRead(handle, filename, filenameSize) &
      bind(C, name='AxisRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AxisRead
end function AxisRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function AxisWrite(handle, filename, filenameSize) &
      bind(C, name='AxisWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AxisWrite
end function AxisWrite

!! Print to standard output, in our prettyprinting format
function AxisPrint(handle) &
      bind(C, name='AxisPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisPrint
end function AxisPrint

!! Print to standard output, as XML
function AxisPrintXML(handle) &
      bind(C, name='AxisPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisPrintXML
end function AxisPrintXML

!! Print to standard output, as JSON
function AxisPrintJSON(handle) &
      bind(C, name='AxisPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisPrintJSON
end function AxisPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function AxisIndexHas(handle) &
      bind(C, name='AxisIndexHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisIndexHas
end function AxisIndexHas

!! Get
function AxisIndexGet(handle) &
      bind(C, name='AxisIndexGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisIndexGet
end function AxisIndexGet

!! Set
subroutine AxisIndexSet(handle, index) &
      bind(C, name='AxisIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: index
end subroutine AxisIndexSet


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function AxisLabelHas(handle) &
      bind(C, name='AxisLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisLabelHas
end function AxisLabelHas

!! Get
function AxisLabelGet(handle) &
      bind(C, name='AxisLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AxisLabelGet
end function AxisLabelGet

!! Set
subroutine AxisLabelSet(handle, label, labelSize) &
      bind(C, name='AxisLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine AxisLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function AxisUnitHas(handle) &
      bind(C, name='AxisUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxisUnitHas
end function AxisUnitHas

!! Get
function AxisUnitGet(handle) &
      bind(C, name='AxisUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AxisUnitGet
end function AxisUnitGet

!! Set
subroutine AxisUnitSet(handle, unit, unitSize) &
      bind(C, name='AxisUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine AxisUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAxis
