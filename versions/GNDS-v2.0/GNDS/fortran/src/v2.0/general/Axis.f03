
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAxis
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AxisDefaultConst() &
      bind(C, name='AxisDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AxisDefaultConst

!! Create, default
function AxisDefault() &
      bind(C, name='AxisDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AxisDefault

!! Create, general, const
function AxisCreateConst( &
   index, &
   label, &
   unit, &
   labelSize, &
   unitSize &
) &
      bind(C, name='AxisCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function AxisCreateConst

!! Create, general
function AxisCreate( &
   index, &
   label, &
   unit, &
   labelSize, &
   unitSize &
) &
      bind(C, name='AxisCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function AxisCreate

!! Assign
subroutine AxisAssign(handleLHS, handleRHS) &
      bind(C, name='AxisAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AxisAssign

!! Delete
subroutine AxisDelete(handle) &
      bind(C, name='AxisDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxisDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AxisRead(handle, filename, filenameSize) &
      bind(C, name='AxisRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AxisRead

!! Write to file
function AxisWrite(handle, filename, filenameSize) &
      bind(C, name='AxisWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AxisWrite

!! Print to standard output, in our prettyprinting format
function AxisPrint(handle) &
      bind(C, name='AxisPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AxisPrint

!! Print to standard output, as XML
function AxisPrintXML(handle) &
      bind(C, name='AxisPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AxisPrintXML

!! Print to standard output, as JSON
function AxisPrintJSON(handle) &
      bind(C, name='AxisPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AxisPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function AxisIndexHas(handle) &
      bind(C, name='AxisIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AxisIndexHas

!! Get
function AxisIndexGet(handle) &
      bind(C, name='AxisIndexGet') &
      result(index)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: index
end function AxisIndexGet

!! Set
subroutine AxisIndexSet(handle, index, indexSize) &
      bind(C, name='AxisIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine AxisIndexSet


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function AxisLabelHas(handle) &
      bind(C, name='AxisLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AxisLabelHas

!! Get
function AxisLabelGet(handle) &
      bind(C, name='AxisLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function AxisLabelGet

!! Set
subroutine AxisLabelSet(handle, label, labelSize) &
      bind(C, name='AxisLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine AxisLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function AxisUnitHas(handle) &
      bind(C, name='AxisUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AxisUnitHas

!! Get
function AxisUnitGet(handle) &
      bind(C, name='AxisUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function AxisUnitGet

!! Set
subroutine AxisUnitSet(handle, unit, unitSize) &
      bind(C, name='AxisUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine AxisUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAxis
