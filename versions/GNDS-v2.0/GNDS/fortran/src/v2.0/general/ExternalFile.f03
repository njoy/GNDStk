
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalExternalFile
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ExternalFileDefaultConst() &
      bind(C, name='ExternalFileDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ExternalFileDefaultConst

!! Create, default
function ExternalFileDefault() &
      bind(C, name='ExternalFileDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ExternalFileDefault

!! Create, general, const
function ExternalFileCreateConst( &
   label, &
   path, &
   checksum, &
   algorithm, &
   labelSize, &
   pathSize, &
   checksumSize, &
   algorithmSize &
) &
      bind(C, name='ExternalFileCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pathSize
   character(c_char), intent(in) :: path(pathSize)
   integer(c_size_t), intent(in), value :: checksumSize
   character(c_char), intent(in) :: checksum(checksumSize)
   integer(c_size_t), intent(in), value :: algorithmSize
   character(c_char), intent(in) :: algorithm(algorithmSize)
   type(c_ptr) :: handle
end function ExternalFileCreateConst

!! Create, general
function ExternalFileCreate( &
   label, &
   path, &
   checksum, &
   algorithm, &
   labelSize, &
   pathSize, &
   checksumSize, &
   algorithmSize &
) &
      bind(C, name='ExternalFileCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pathSize
   character(c_char), intent(in) :: path(pathSize)
   integer(c_size_t), intent(in), value :: checksumSize
   character(c_char), intent(in) :: checksum(checksumSize)
   integer(c_size_t), intent(in), value :: algorithmSize
   character(c_char), intent(in) :: algorithm(algorithmSize)
   type(c_ptr) :: handle
end function ExternalFileCreate

!! Assign
subroutine ExternalFileAssign(handleLHS, handleRHS) &
      bind(C, name='ExternalFileAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ExternalFileAssign

!! Delete
subroutine ExternalFileDelete(handle) &
      bind(C, name='ExternalFileDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ExternalFileDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ExternalFileRead(handle, filename, filenameSize) &
      bind(C, name='ExternalFileRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ExternalFileRead

!! Write to file
function ExternalFileWrite(handle, filename, filenameSize) &
      bind(C, name='ExternalFileWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ExternalFileWrite

!! Print to standard output, in our prettyprinting format
function ExternalFilePrint(handle) &
      bind(C, name='ExternalFilePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ExternalFilePrint

!! Print to standard output, as XML
function ExternalFilePrintXML(handle) &
      bind(C, name='ExternalFilePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ExternalFilePrintXML

!! Print to standard output, as JSON
function ExternalFilePrintJSON(handle) &
      bind(C, name='ExternalFilePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ExternalFilePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ExternalFileLabelHas(handle) &
      bind(C, name='ExternalFileLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ExternalFileLabelHas

!! Get
function ExternalFileLabelGet(handle) &
      bind(C, name='ExternalFileLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ExternalFileLabelGet

!! Set
subroutine ExternalFileLabelSet(handle, label, labelSize) &
      bind(C, name='ExternalFileLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ExternalFileLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: path
!! -----------------------------------------------------------------------------

!! Has
function ExternalFilePathHas(handle) &
      bind(C, name='ExternalFilePathHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ExternalFilePathHas

!! Get
function ExternalFilePathGet(handle) &
      bind(C, name='ExternalFilePathGet') &
      result(path)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: path
end function ExternalFilePathGet

!! Set
subroutine ExternalFilePathSet(handle, path, pathSize) &
      bind(C, name='ExternalFilePathSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: pathSize
   character(c_char), intent(in) :: path(pathSize)
end subroutine ExternalFilePathSet


!! -----------------------------------------------------------------------------
!! Metadatum: checksum
!! -----------------------------------------------------------------------------

!! Has
function ExternalFileChecksumHas(handle) &
      bind(C, name='ExternalFileChecksumHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ExternalFileChecksumHas

!! Get
function ExternalFileChecksumGet(handle) &
      bind(C, name='ExternalFileChecksumGet') &
      result(checksum)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: checksum
end function ExternalFileChecksumGet

!! Set
subroutine ExternalFileChecksumSet(handle, checksum, checksumSize) &
      bind(C, name='ExternalFileChecksumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: checksumSize
   character(c_char), intent(in) :: checksum(checksumSize)
end subroutine ExternalFileChecksumSet


!! -----------------------------------------------------------------------------
!! Metadatum: algorithm
!! -----------------------------------------------------------------------------

!! Has
function ExternalFileAlgorithmHas(handle) &
      bind(C, name='ExternalFileAlgorithmHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ExternalFileAlgorithmHas

!! Get
function ExternalFileAlgorithmGet(handle) &
      bind(C, name='ExternalFileAlgorithmGet') &
      result(algorithm)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: algorithm
end function ExternalFileAlgorithmGet

!! Set
subroutine ExternalFileAlgorithmSet(handle, algorithm, algorithmSize) &
      bind(C, name='ExternalFileAlgorithmSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: algorithmSize
   character(c_char), intent(in) :: algorithm(algorithmSize)
end subroutine ExternalFileAlgorithmSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalExternalFile
