
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIsotopes
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IsotopesDefaultConst() &
      bind(C, name='IsotopesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IsotopesDefaultConst
end function IsotopesDefaultConst

!! Create, default, non-const
function IsotopesDefault() &
      bind(C, name='IsotopesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IsotopesDefault
end function IsotopesDefault

!! Create, general, const
function IsotopesCreateConst( &
   isotope, isotopeSize &
) &
      bind(C, name='IsotopesCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: isotopeSize
   type(c_ptr), intent(in) :: isotope(isotopeSize)
   type(c_ptr) :: IsotopesCreateConst
end function IsotopesCreateConst

!! Create, general, non-const
function IsotopesCreate( &
   isotope, isotopeSize &
) &
      bind(C, name='IsotopesCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: isotopeSize
   type(c_ptr), intent(in) :: isotope(isotopeSize)
   type(c_ptr) :: IsotopesCreate
end function IsotopesCreate

!! Assign
subroutine IsotopesAssign(handleLHS, handleRHS) &
      bind(C, name='IsotopesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine IsotopesAssign

!! Delete
subroutine IsotopesDelete(handle) &
      bind(C, name='IsotopesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IsotopesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function IsotopesRead(handle, filename, filenameSize) &
      bind(C, name='IsotopesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IsotopesRead
end function IsotopesRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function IsotopesWrite(handle, filename, filenameSize) &
      bind(C, name='IsotopesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IsotopesWrite
end function IsotopesWrite

!! Print to standard output, in our prettyprinting format
function IsotopesPrint(handle) &
      bind(C, name='IsotopesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IsotopesPrint
end function IsotopesPrint

!! Print to standard output, as XML
function IsotopesPrintXML(handle) &
      bind(C, name='IsotopesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IsotopesPrintXML
end function IsotopesPrintXML

!! Print to standard output, as JSON
function IsotopesPrintJSON(handle) &
      bind(C, name='IsotopesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IsotopesPrintJSON
end function IsotopesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: isotope
!! -----------------------------------------------------------------------------

!! Has
function IsotopesIsotopeHas(handle) &
      bind(C, name='IsotopesIsotopeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IsotopesIsotopeHas
end function IsotopesIsotopeHas

!! Clear
subroutine IsotopesIsotopeClear(handle) &
      bind(C, name='IsotopesIsotopeClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IsotopesIsotopeClear

!! Size
function IsotopesIsotopeSize(handle) &
      bind(C, name='IsotopesIsotopeSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: IsotopesIsotopeSize
end function IsotopesIsotopeSize

!! Add
subroutine IsotopesIsotopeAdd(handle, fieldHandle) &
      bind(C, name='IsotopesIsotopeAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeAdd

!! Get, by index \in [0,size), const
function IsotopesIsotopeGetConst(handle, index) &
      bind(C, name='IsotopesIsotopeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: IsotopesIsotopeGetConst
end function IsotopesIsotopeGetConst

!! Get, by index \in [0,size), non-const
function IsotopesIsotopeGet(handle, index) &
      bind(C, name='IsotopesIsotopeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: IsotopesIsotopeGet
end function IsotopesIsotopeGet

!! Set, by index \in [0,size)
subroutine IsotopesIsotopeSet(handle, index, fieldHandle) &
      bind(C, name='IsotopesIsotopeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeSet

!! ------------------------
!! Re: metadatum symbol
!! ------------------------

!! Has, by symbol
function IsotopesIsotopeHasBySymbol(handle, meta, metaSize) &
      bind(C, name='IsotopesIsotopeHasBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: IsotopesIsotopeHasBySymbol
end function IsotopesIsotopeHasBySymbol

!! Get, by symbol, const
function IsotopesIsotopeGetBySymbolConst(handle, meta, metaSize) &
      bind(C, name='IsotopesIsotopeGetBySymbolConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: IsotopesIsotopeGetBySymbolConst
end function IsotopesIsotopeGetBySymbolConst

!! Get, by symbol, non-const
function IsotopesIsotopeGetBySymbol(handle, meta, metaSize) &
      bind(C, name='IsotopesIsotopeGetBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: IsotopesIsotopeGetBySymbol
end function IsotopesIsotopeGetBySymbol

!! Set, by symbol
subroutine IsotopesIsotopeSetBySymbol(handle, meta, metaSize, fieldHandle) &
      bind(C, name='IsotopesIsotopeSetBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeSetBySymbol

!! ------------------------
!! Re: metadatum A
!! ------------------------

!! Has, by A
function IsotopesIsotopeHasByA(handle, meta) &
      bind(C, name='IsotopesIsotopeHasByA')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   integer(c_int) :: IsotopesIsotopeHasByA
end function IsotopesIsotopeHasByA

!! Get, by A, const
function IsotopesIsotopeGetByAConst(handle, meta) &
      bind(C, name='IsotopesIsotopeGetByAConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: IsotopesIsotopeGetByAConst
end function IsotopesIsotopeGetByAConst

!! Get, by A, non-const
function IsotopesIsotopeGetByA(handle, meta) &
      bind(C, name='IsotopesIsotopeGetByA')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: IsotopesIsotopeGetByA
end function IsotopesIsotopeGetByA

!! Set, by A
subroutine IsotopesIsotopeSetByA(handle, meta, fieldHandle) &
      bind(C, name='IsotopesIsotopeSetByA')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeSetByA


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIsotopes
