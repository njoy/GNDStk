
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIsotopes
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IsotopesDefaultConst() &
      bind(C, name='IsotopesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IsotopesDefaultConst

!! Create, default
function IsotopesDefault() &
      bind(C, name='IsotopesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IsotopesDefault

!! Create, general, const
function IsotopesCreateConst( &
   isotope, isotopeSize &
) &
      bind(C, name='IsotopesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: isotopeSize
   type(c_ptr) :: isotope(isotopeSize)
   type(c_ptr) :: handle
end function IsotopesCreateConst

!! Create, general
function IsotopesCreate( &
   isotope, isotopeSize &
) &
      bind(C, name='IsotopesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: isotopeSize
   type(c_ptr) :: isotope(isotopeSize)
   type(c_ptr) :: handle
end function IsotopesCreate

!! Assign
subroutine IsotopesAssign(handleLHS, handleRHS) &
      bind(C, name='IsotopesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine IsotopesAssign

!! Delete
subroutine IsotopesDelete(handle) &
      bind(C, name='IsotopesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IsotopesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function IsotopesRead(handle, filename, filenameSize) &
      bind(C, name='IsotopesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IsotopesRead

!! Write to file
function IsotopesWrite(handle, filename, filenameSize) &
      bind(C, name='IsotopesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IsotopesWrite

!! Print to standard output, in our prettyprinting format
function IsotopesPrint(handle) &
      bind(C, name='IsotopesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IsotopesPrint

!! Print to standard output, as XML
function IsotopesPrintXML(handle) &
      bind(C, name='IsotopesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IsotopesPrintXML

!! Print to standard output, as JSON
function IsotopesPrintJSON(handle) &
      bind(C, name='IsotopesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IsotopesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: isotope
!! -----------------------------------------------------------------------------

!! Has
function IsotopesIsotopeHas(handle) &
      bind(C, name='IsotopesIsotopeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IsotopesIsotopeHas

!! Clear
subroutine IsotopesIsotopeClear(handle) &
      bind(C, name='IsotopesIsotopeClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IsotopesIsotopeClear

!! Size
function IsotopesIsotopeSize(handle) &
      bind(C, name='IsotopesIsotopeSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function IsotopesIsotopeSize

!! Add
subroutine IsotopesIsotopeAdd(handle, fieldHandle) &
      bind(C, name='IsotopesIsotopeAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeAdd

!! Get, by index \in [0,size), const
function IsotopesIsotopeGetConst(handle, index) &
      bind(C, name='IsotopesIsotopeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function IsotopesIsotopeGetConst

!! Get, by index \in [0,size)
function IsotopesIsotopeGet(handle, index) &
      bind(C, name='IsotopesIsotopeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function IsotopesIsotopeGet

!! Set, by index \in [0,size)
subroutine IsotopesIsotopeSet(handle, index, fieldHandle) &
      bind(C, name='IsotopesIsotopeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeSet

!! ------------------------
!! Re: metadatum symbol
!! ------------------------

!! Has, by symbol
function IsotopesIsotopeHasBySymbol(handle, meta, metaSize) &
      bind(C, name='IsotopesIsotopeHasBySymbol') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function IsotopesIsotopeHasBySymbol

!! Get, by symbol, const
function IsotopesIsotopeGetBySymbolConst(handle, meta, metaSize) &
      bind(C, name='IsotopesIsotopeGetBySymbolConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function IsotopesIsotopeGetBySymbolConst

!! Get, by symbol
function IsotopesIsotopeGetBySymbol(handle, meta, metaSize) &
      bind(C, name='IsotopesIsotopeGetBySymbol') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function IsotopesIsotopeGetBySymbol

!! Set, by symbol
subroutine IsotopesIsotopeSetBySymbol(handle, meta, metaSize, fieldHandle) &
      bind(C, name='IsotopesIsotopeSetBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeSetBySymbol

!! ------------------------
!! Re: metadatum A
!! ------------------------

!! Has, by A
function IsotopesIsotopeHasByA(handle, meta) &
      bind(C, name='IsotopesIsotopeHasByA') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function IsotopesIsotopeHasByA

!! Get, by A, const
function IsotopesIsotopeGetByAConst(handle, meta) &
      bind(C, name='IsotopesIsotopeGetByAConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function IsotopesIsotopeGetByAConst

!! Get, by A
function IsotopesIsotopeGetByA(handle, meta) &
      bind(C, name='IsotopesIsotopeGetByA') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function IsotopesIsotopeGetByA

!! Set, by A
subroutine IsotopesIsotopeSetByA(handle, meta, fieldHandle) &
      bind(C, name='IsotopesIsotopeSetByA')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine IsotopesIsotopeSetByA


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIsotopes
