
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResonanceReactions
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResonanceReactionsDefaultConst() &
      bind(C, name='ResonanceReactionsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonanceReactionsDefaultConst

!! Create, default
function ResonanceReactionsDefault() &
      bind(C, name='ResonanceReactionsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonanceReactionsDefault

!! Create, general, const
function ResonanceReactionsCreateConst( &
   resonanceReaction, resonanceReactionSize &
) &
      bind(C, name='ResonanceReactionsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: resonanceReactionSize
   type(c_ptr) :: resonanceReaction(resonanceReactionSize)
   type(c_ptr) :: handle
end function ResonanceReactionsCreateConst

!! Create, general
function ResonanceReactionsCreate( &
   resonanceReaction, resonanceReactionSize &
) &
      bind(C, name='ResonanceReactionsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: resonanceReactionSize
   type(c_ptr) :: resonanceReaction(resonanceReactionSize)
   type(c_ptr) :: handle
end function ResonanceReactionsCreate

!! Assign
subroutine ResonanceReactionsAssign(handleLHS, handleRHS) &
      bind(C, name='ResonanceReactionsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResonanceReactionsAssign

!! Delete
subroutine ResonanceReactionsDelete(handle) &
      bind(C, name='ResonanceReactionsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonanceReactionsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResonanceReactionsRead(handle, filename, filenameSize) &
      bind(C, name='ResonanceReactionsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonanceReactionsRead

!! Write to file
function ResonanceReactionsWrite(handle, filename, filenameSize) &
      bind(C, name='ResonanceReactionsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonanceReactionsWrite

!! Print to standard output, in our prettyprinting format
function ResonanceReactionsPrint(handle) &
      bind(C, name='ResonanceReactionsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceReactionsPrint

!! Print to standard output, as XML
function ResonanceReactionsPrintXML(handle) &
      bind(C, name='ResonanceReactionsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceReactionsPrintXML

!! Print to standard output, as JSON
function ResonanceReactionsPrintJSON(handle) &
      bind(C, name='ResonanceReactionsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceReactionsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: resonanceReaction
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionsResonanceReactionHas(handle) &
      bind(C, name='ResonanceReactionsResonanceReactionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionsResonanceReactionHas

!! Clear
subroutine ResonanceReactionsResonanceReactionClear(handle) &
      bind(C, name='ResonanceReactionsResonanceReactionClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonanceReactionsResonanceReactionClear

!! Size
function ResonanceReactionsResonanceReactionSize(handle) &
      bind(C, name='ResonanceReactionsResonanceReactionSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function ResonanceReactionsResonanceReactionSize

!! Add
subroutine ResonanceReactionsResonanceReactionAdd(handle, fieldHandle) &
      bind(C, name='ResonanceReactionsResonanceReactionAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonanceReactionsResonanceReactionAdd

!! Get, by index \in [0,size), const
function ResonanceReactionsResonanceReactionGetConst(handle, index) &
      bind(C, name='ResonanceReactionsResonanceReactionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetConst

!! Get, by index \in [0,size)
function ResonanceReactionsResonanceReactionGet(handle, index) &
      bind(C, name='ResonanceReactionsResonanceReactionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGet

!! Set, by index \in [0,size)
subroutine ResonanceReactionsResonanceReactionSet(handle, index, fieldHandle) &
      bind(C, name='ResonanceReactionsResonanceReactionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonanceReactionsResonanceReactionSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function ResonanceReactionsResonanceReactionHasByLabel(handle, meta, metaSize) &
      bind(C, name='ResonanceReactionsResonanceReactionHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ResonanceReactionsResonanceReactionHasByLabel

!! Get, by label, const
function ResonanceReactionsResonanceReactionGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='ResonanceReactionsResonanceReactionGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetByLabelConst

!! Get, by label
function ResonanceReactionsResonanceReactionGetByLabel(handle, meta, metaSize) &
      bind(C, name='ResonanceReactionsResonanceReactionGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetByLabel

!! Set, by label
subroutine ResonanceReactionsResonanceReactionSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ResonanceReactionsResonanceReactionSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonanceReactionsResonanceReactionSetByLabel

!! ------------------------
!! Re: metadatum ejectile
!! ------------------------

!! Has, by ejectile
function ResonanceReactionsResonanceReactionHasByEjectile(handle, meta, metaSize) &
      bind(C, name='ResonanceReactionsResonanceReactionHasByEjectile') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ResonanceReactionsResonanceReactionHasByEjectile

!! Get, by ejectile, const
function ResonanceReactionsResonanceReactionGetByEjectileConst(handle, meta, metaSize) &
      bind(C, name='ResonanceReactionsResonanceReactionGetByEjectileConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetByEjectileConst

!! Get, by ejectile
function ResonanceReactionsResonanceReactionGetByEjectile(handle, meta, metaSize) &
      bind(C, name='ResonanceReactionsResonanceReactionGetByEjectile') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetByEjectile

!! Set, by ejectile
subroutine ResonanceReactionsResonanceReactionSetByEjectile(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ResonanceReactionsResonanceReactionSetByEjectile')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonanceReactionsResonanceReactionSetByEjectile

!! ------------------------
!! Re: metadatum eliminated
!! ------------------------

!! Has, by eliminated
function ResonanceReactionsResonanceReactionHasByEliminated(handle, meta) &
      bind(C, name='ResonanceReactionsResonanceReactionHasByEliminated') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), value, intent(in) :: meta
   integer(c_int) :: has
end function ResonanceReactionsResonanceReactionHasByEliminated

!! Get, by eliminated, const
function ResonanceReactionsResonanceReactionGetByEliminatedConst(handle, meta) &
      bind(C, name='ResonanceReactionsResonanceReactionGetByEliminatedConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetByEliminatedConst

!! Get, by eliminated
function ResonanceReactionsResonanceReactionGetByEliminated(handle, meta) &
      bind(C, name='ResonanceReactionsResonanceReactionGetByEliminated') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   logical(c_bool), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ResonanceReactionsResonanceReactionGetByEliminated

!! Set, by eliminated
subroutine ResonanceReactionsResonanceReactionSetByEliminated(handle, meta, fieldHandle) &
      bind(C, name='ResonanceReactionsResonanceReactionSetByEliminated')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResonanceReactionsResonanceReactionSetByEliminated


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResonanceReactions
