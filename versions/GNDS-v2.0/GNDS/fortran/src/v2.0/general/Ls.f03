
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalLs
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function LsDefaultConst() &
      bind(C, name='LsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function LsDefaultConst

!! Create, default
function LsDefault() &
      bind(C, name='LsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function LsDefault

!! Create, general, const
function LsCreateConst( &
   L, LSize &
) &
      bind(C, name='LsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: LSize
   type(c_ptr) :: L(LSize)
   type(c_ptr) :: handle
end function LsCreateConst

!! Create, general
function LsCreate( &
   L, LSize &
) &
      bind(C, name='LsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: LSize
   type(c_ptr) :: L(LSize)
   type(c_ptr) :: handle
end function LsCreate

!! Assign
subroutine LsAssign(handleLHS, handleRHS) &
      bind(C, name='LsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine LsAssign

!! Delete
subroutine LsDelete(handle) &
      bind(C, name='LsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine LsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function LsRead(handle, filename, filenameSize) &
      bind(C, name='LsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function LsRead

!! Write to file
function LsWrite(handle, filename, filenameSize) &
      bind(C, name='LsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function LsWrite

!! Print to standard output, in our prettyprinting format
function LsPrint(handle) &
      bind(C, name='LsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LsPrint

!! Print to standard output, as XML
function LsPrintXML(handle) &
      bind(C, name='LsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LsPrintXML

!! Print to standard output, as JSON
function LsPrintJSON(handle) &
      bind(C, name='LsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: L
!! -----------------------------------------------------------------------------

!! Has
function LsLHas(handle) &
      bind(C, name='LsLHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LsLHas

!! Clear
subroutine LsLClear(handle) &
      bind(C, name='LsLClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine LsLClear

!! Size
function LsLSize(handle) &
      bind(C, name='LsLSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function LsLSize

!! Add
subroutine LsLAdd(handle, fieldHandle) &
      bind(C, name='LsLAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine LsLAdd

!! Get, by index \in [0,size), const
function LsLGetConst(handle, index) &
      bind(C, name='LsLGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function LsLGetConst

!! Get, by index \in [0,size)
function LsLGet(handle, index) &
      bind(C, name='LsLGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function LsLGet

!! Set, by index \in [0,size)
subroutine LsLSet(handle, index, fieldHandle) &
      bind(C, name='LsLSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine LsLSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function LsLHasByLabel(handle, meta, metaSize) &
      bind(C, name='LsLHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function LsLHasByLabel

!! Get, by label, const
function LsLGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='LsLGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function LsLGetByLabelConst

!! Get, by label
function LsLGetByLabel(handle, meta, metaSize) &
      bind(C, name='LsLGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function LsLGetByLabel

!! Set, by label
subroutine LsLSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='LsLSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine LsLSetByLabel

!! ------------------------
!! Re: metadatum value
!! ------------------------

!! Has, by value
function LsLHasByValue(handle, meta) &
      bind(C, name='LsLHasByValue') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function LsLHasByValue

!! Get, by value, const
function LsLGetByValueConst(handle, meta) &
      bind(C, name='LsLGetByValueConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function LsLGetByValueConst

!! Get, by value
function LsLGetByValue(handle, meta) &
      bind(C, name='LsLGetByValue') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function LsLGetByValue

!! Set, by value
subroutine LsLSetByValue(handle, meta, fieldHandle) &
      bind(C, name='LsLSetByValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine LsLSetByValue


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalLs
