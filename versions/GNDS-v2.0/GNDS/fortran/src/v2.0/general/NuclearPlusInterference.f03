
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNuclearPlusInterference
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NuclearPlusInterferenceDefaultConst() &
      bind(C, name='NuclearPlusInterferenceDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NuclearPlusInterferenceDefaultConst

!! Create, default
function NuclearPlusInterferenceDefault() &
      bind(C, name='NuclearPlusInterferenceDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NuclearPlusInterferenceDefault

!! Create, general, const
function NuclearPlusInterferenceCreateConst( &
   muCutoff, &
   crossSection, &
   distribution &
) &
      bind(C, name='NuclearPlusInterferenceCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: muCutoff
   type(c_ptr), value :: crossSection
   type(c_ptr), value :: distribution
   type(c_ptr) :: handle
end function NuclearPlusInterferenceCreateConst

!! Create, general
function NuclearPlusInterferenceCreate( &
   muCutoff, &
   crossSection, &
   distribution &
) &
      bind(C, name='NuclearPlusInterferenceCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: muCutoff
   type(c_ptr), value :: crossSection
   type(c_ptr), value :: distribution
   type(c_ptr) :: handle
end function NuclearPlusInterferenceCreate

!! Assign
subroutine NuclearPlusInterferenceAssign(handleLHS, handleRHS) &
      bind(C, name='NuclearPlusInterferenceAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NuclearPlusInterferenceAssign

!! Delete
subroutine NuclearPlusInterferenceDelete(handle) &
      bind(C, name='NuclearPlusInterferenceDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclearPlusInterferenceDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NuclearPlusInterferenceRead(handle, filename, filenameSize) &
      bind(C, name='NuclearPlusInterferenceRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NuclearPlusInterferenceRead

!! Write to file
function NuclearPlusInterferenceWrite(handle, filename, filenameSize) &
      bind(C, name='NuclearPlusInterferenceWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NuclearPlusInterferenceWrite

!! Print to standard output, in our prettyprinting format
function NuclearPlusInterferencePrint(handle) &
      bind(C, name='NuclearPlusInterferencePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclearPlusInterferencePrint

!! Print to standard output, as XML
function NuclearPlusInterferencePrintXML(handle) &
      bind(C, name='NuclearPlusInterferencePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclearPlusInterferencePrintXML

!! Print to standard output, as JSON
function NuclearPlusInterferencePrintJSON(handle) &
      bind(C, name='NuclearPlusInterferencePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclearPlusInterferencePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: muCutoff
!! -----------------------------------------------------------------------------

!! Has
function NuclearPlusInterferenceMuCutoffHas(handle) &
      bind(C, name='NuclearPlusInterferenceMuCutoffHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclearPlusInterferenceMuCutoffHas

!! Get
function NuclearPlusInterferenceMuCutoffGet(handle) &
      bind(C, name='NuclearPlusInterferenceMuCutoffGet') &
      result(muCutoff)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: muCutoff
end function NuclearPlusInterferenceMuCutoffGet

!! Set
subroutine NuclearPlusInterferenceMuCutoffSet(handle, muCutoff, muCutoffSize) &
      bind(C, name='NuclearPlusInterferenceMuCutoffSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: muCutoffSize
   character(c_char), intent(in) :: muCutoff(muCutoffSize)
end subroutine NuclearPlusInterferenceMuCutoffSet


!! -----------------------------------------------------------------------------
!! Child: crossSection
!! -----------------------------------------------------------------------------

!! Has
function NuclearPlusInterferenceCrossSectionHas(handle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclearPlusInterferenceCrossSectionHas

!! Get, const
function NuclearPlusInterferenceCrossSectionGetConst(handle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearPlusInterferenceCrossSectionGetConst

!! Get
function NuclearPlusInterferenceCrossSectionGet(handle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearPlusInterferenceCrossSectionGet

!! Set
subroutine NuclearPlusInterferenceCrossSectionSet(handle, fieldHandle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearPlusInterferenceCrossSectionSet


!! -----------------------------------------------------------------------------
!! Child: distribution
!! -----------------------------------------------------------------------------

!! Has
function NuclearPlusInterferenceDistributionHas(handle) &
      bind(C, name='NuclearPlusInterferenceDistributionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclearPlusInterferenceDistributionHas

!! Get, const
function NuclearPlusInterferenceDistributionGetConst(handle) &
      bind(C, name='NuclearPlusInterferenceDistributionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearPlusInterferenceDistributionGetConst

!! Get
function NuclearPlusInterferenceDistributionGet(handle) &
      bind(C, name='NuclearPlusInterferenceDistributionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearPlusInterferenceDistributionGet

!! Set
subroutine NuclearPlusInterferenceDistributionSet(handle, fieldHandle) &
      bind(C, name='NuclearPlusInterferenceDistributionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearPlusInterferenceDistributionSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNuclearPlusInterference
