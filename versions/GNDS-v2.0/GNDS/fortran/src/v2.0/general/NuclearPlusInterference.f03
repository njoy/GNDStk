
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNuclearPlusInterference
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NuclearPlusInterferenceDefaultConst() &
      bind(C, name='NuclearPlusInterferenceDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NuclearPlusInterferenceDefaultConst
end function NuclearPlusInterferenceDefaultConst

!! Create, default
function NuclearPlusInterferenceDefault() &
      bind(C, name='NuclearPlusInterferenceDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NuclearPlusInterferenceDefault
end function NuclearPlusInterferenceDefault

!! Create, general, const
function NuclearPlusInterferenceCreateConst( &
   muCutoff, &
   crossSection, &
   distribution &
) &
      bind(C, name='NuclearPlusInterferenceCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: muCutoff
   type(c_ptr), intent(in), value :: crossSection
   type(c_ptr), intent(in), value :: distribution
   type(c_ptr) :: NuclearPlusInterferenceCreateConst
end function NuclearPlusInterferenceCreateConst

!! Create, general
function NuclearPlusInterferenceCreate( &
   muCutoff, &
   crossSection, &
   distribution &
) &
      bind(C, name='NuclearPlusInterferenceCreate')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: muCutoff
   type(c_ptr), intent(in), value :: crossSection
   type(c_ptr), intent(in), value :: distribution
   type(c_ptr) :: NuclearPlusInterferenceCreate
end function NuclearPlusInterferenceCreate

!! Assign
subroutine NuclearPlusInterferenceAssign(handleLHS, handleRHS) &
      bind(C, name='NuclearPlusInterferenceAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine NuclearPlusInterferenceAssign

!! Delete
subroutine NuclearPlusInterferenceDelete(handle) &
      bind(C, name='NuclearPlusInterferenceDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclearPlusInterferenceDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NuclearPlusInterferenceRead(handle, filename, filenameSize) &
      bind(C, name='NuclearPlusInterferenceRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NuclearPlusInterferenceRead
end function NuclearPlusInterferenceRead

!! Write to file
function NuclearPlusInterferenceWrite(handle, filename, filenameSize) &
      bind(C, name='NuclearPlusInterferenceWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NuclearPlusInterferenceWrite
end function NuclearPlusInterferenceWrite

!! Print to standard output, in our prettyprinting format
function NuclearPlusInterferencePrint(handle) &
      bind(C, name='NuclearPlusInterferencePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearPlusInterferencePrint
end function NuclearPlusInterferencePrint

!! Print to standard output, as XML
function NuclearPlusInterferencePrintXML(handle) &
      bind(C, name='NuclearPlusInterferencePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearPlusInterferencePrintXML
end function NuclearPlusInterferencePrintXML

!! Print to standard output, as JSON
function NuclearPlusInterferencePrintJSON(handle) &
      bind(C, name='NuclearPlusInterferencePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearPlusInterferencePrintJSON
end function NuclearPlusInterferencePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: muCutoff
!! -----------------------------------------------------------------------------

!! Has
function NuclearPlusInterferenceMuCutoffHas(handle) &
      bind(C, name='NuclearPlusInterferenceMuCutoffHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearPlusInterferenceMuCutoffHas
end function NuclearPlusInterferenceMuCutoffHas

!! Get
function NuclearPlusInterferenceMuCutoffGet(handle) &
      bind(C, name='NuclearPlusInterferenceMuCutoffGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: NuclearPlusInterferenceMuCutoffGet
end function NuclearPlusInterferenceMuCutoffGet

!! Set
subroutine NuclearPlusInterferenceMuCutoffSet(handle, muCutoff) &
      bind(C, name='NuclearPlusInterferenceMuCutoffSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: muCutoff
end subroutine NuclearPlusInterferenceMuCutoffSet


!! -----------------------------------------------------------------------------
!! Child: crossSection
!! -----------------------------------------------------------------------------

!! Has
function NuclearPlusInterferenceCrossSectionHas(handle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearPlusInterferenceCrossSectionHas
end function NuclearPlusInterferenceCrossSectionHas

!! Get, const
function NuclearPlusInterferenceCrossSectionGetConst(handle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclearPlusInterferenceCrossSectionGetConst
end function NuclearPlusInterferenceCrossSectionGetConst

!! Get
function NuclearPlusInterferenceCrossSectionGet(handle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: NuclearPlusInterferenceCrossSectionGet
end function NuclearPlusInterferenceCrossSectionGet

!! Set
subroutine NuclearPlusInterferenceCrossSectionSet(handle, fieldHandle) &
      bind(C, name='NuclearPlusInterferenceCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine NuclearPlusInterferenceCrossSectionSet


!! -----------------------------------------------------------------------------
!! Child: distribution
!! -----------------------------------------------------------------------------

!! Has
function NuclearPlusInterferenceDistributionHas(handle) &
      bind(C, name='NuclearPlusInterferenceDistributionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearPlusInterferenceDistributionHas
end function NuclearPlusInterferenceDistributionHas

!! Get, const
function NuclearPlusInterferenceDistributionGetConst(handle) &
      bind(C, name='NuclearPlusInterferenceDistributionGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclearPlusInterferenceDistributionGetConst
end function NuclearPlusInterferenceDistributionGetConst

!! Get
function NuclearPlusInterferenceDistributionGet(handle) &
      bind(C, name='NuclearPlusInterferenceDistributionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: NuclearPlusInterferenceDistributionGet
end function NuclearPlusInterferenceDistributionGet

!! Set
subroutine NuclearPlusInterferenceDistributionSet(handle, fieldHandle) &
      bind(C, name='NuclearPlusInterferenceDistributionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine NuclearPlusInterferenceDistributionSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNuclearPlusInterference
