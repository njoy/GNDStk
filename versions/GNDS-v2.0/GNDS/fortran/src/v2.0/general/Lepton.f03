
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalLepton
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function LeptonDefaultConst() &
      bind(C, name='LeptonDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function LeptonDefaultConst

!! Create, default
function LeptonDefault() &
      bind(C, name='LeptonDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function LeptonDefault

!! Create, general, const
function LeptonCreateConst( &
   id, &
   generation, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   idSize, &
   generationSize &
) &
      bind(C, name='LeptonCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   integer(c_size_t), intent(in), value :: generationSize
   character(c_char), intent(in) :: generation(generationSize)
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr) :: handle
end function LeptonCreateConst

!! Create, general
function LeptonCreate( &
   id, &
   generation, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   idSize, &
   generationSize &
) &
      bind(C, name='LeptonCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   integer(c_size_t), intent(in), value :: generationSize
   character(c_char), intent(in) :: generation(generationSize)
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr) :: handle
end function LeptonCreate

!! Assign
subroutine LeptonAssign(handleLHS, handleRHS) &
      bind(C, name='LeptonAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine LeptonAssign

!! Delete
subroutine LeptonDelete(handle) &
      bind(C, name='LeptonDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine LeptonDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function LeptonRead(handle, filename, filenameSize) &
      bind(C, name='LeptonRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function LeptonRead

!! Write to file
function LeptonWrite(handle, filename, filenameSize) &
      bind(C, name='LeptonWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function LeptonWrite

!! Print to standard output, in our prettyprinting format
function LeptonPrint(handle) &
      bind(C, name='LeptonPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LeptonPrint

!! Print to standard output, as XML
function LeptonPrintXML(handle) &
      bind(C, name='LeptonPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LeptonPrintXML

!! Print to standard output, as JSON
function LeptonPrintJSON(handle) &
      bind(C, name='LeptonPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function LeptonPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function LeptonIdHas(handle) &
      bind(C, name='LeptonIdHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonIdHas

!! Get
function LeptonIdGet(handle) &
      bind(C, name='LeptonIdGet') &
      result(id)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: id
end function LeptonIdGet

!! Set
subroutine LeptonIdSet(handle, id, idSize) &
      bind(C, name='LeptonIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine LeptonIdSet


!! -----------------------------------------------------------------------------
!! Metadatum: generation
!! -----------------------------------------------------------------------------

!! Has
function LeptonGenerationHas(handle) &
      bind(C, name='LeptonGenerationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonGenerationHas

!! Get
function LeptonGenerationGet(handle) &
      bind(C, name='LeptonGenerationGet') &
      result(generation)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: generation
end function LeptonGenerationGet

!! Set
subroutine LeptonGenerationSet(handle, generation, generationSize) &
      bind(C, name='LeptonGenerationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: generationSize
   character(c_char), intent(in) :: generation(generationSize)
end subroutine LeptonGenerationSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function LeptonMassHas(handle) &
      bind(C, name='LeptonMassHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonMassHas

!! Get, const
function LeptonMassGetConst(handle) &
      bind(C, name='LeptonMassGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonMassGetConst

!! Get
function LeptonMassGet(handle) &
      bind(C, name='LeptonMassGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonMassGet

!! Set
subroutine LeptonMassSet(handle, fieldHandle) &
      bind(C, name='LeptonMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LeptonMassSet


!! -----------------------------------------------------------------------------
!! Child: spin
!! -----------------------------------------------------------------------------

!! Has
function LeptonSpinHas(handle) &
      bind(C, name='LeptonSpinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonSpinHas

!! Get, const
function LeptonSpinGetConst(handle) &
      bind(C, name='LeptonSpinGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonSpinGetConst

!! Get
function LeptonSpinGet(handle) &
      bind(C, name='LeptonSpinGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonSpinGet

!! Set
subroutine LeptonSpinSet(handle, fieldHandle) &
      bind(C, name='LeptonSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LeptonSpinSet


!! -----------------------------------------------------------------------------
!! Child: parity
!! -----------------------------------------------------------------------------

!! Has
function LeptonParityHas(handle) &
      bind(C, name='LeptonParityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonParityHas

!! Get, const
function LeptonParityGetConst(handle) &
      bind(C, name='LeptonParityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonParityGetConst

!! Get
function LeptonParityGet(handle) &
      bind(C, name='LeptonParityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonParityGet

!! Set
subroutine LeptonParitySet(handle, fieldHandle) &
      bind(C, name='LeptonParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LeptonParitySet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function LeptonChargeHas(handle) &
      bind(C, name='LeptonChargeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonChargeHas

!! Get, const
function LeptonChargeGetConst(handle) &
      bind(C, name='LeptonChargeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonChargeGetConst

!! Get
function LeptonChargeGet(handle) &
      bind(C, name='LeptonChargeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonChargeGet

!! Set
subroutine LeptonChargeSet(handle, fieldHandle) &
      bind(C, name='LeptonChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LeptonChargeSet


!! -----------------------------------------------------------------------------
!! Child: halflife
!! -----------------------------------------------------------------------------

!! Has
function LeptonHalflifeHas(handle) &
      bind(C, name='LeptonHalflifeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function LeptonHalflifeHas

!! Get, const
function LeptonHalflifeGetConst(handle) &
      bind(C, name='LeptonHalflifeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonHalflifeGetConst

!! Get
function LeptonHalflifeGet(handle) &
      bind(C, name='LeptonHalflifeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function LeptonHalflifeGet

!! Set
subroutine LeptonHalflifeSet(handle, fieldHandle) &
      bind(C, name='LeptonHalflifeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine LeptonHalflifeSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalLepton
