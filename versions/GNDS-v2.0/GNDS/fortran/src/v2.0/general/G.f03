
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalG
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GDefaultConst() &
      bind(C, name='GDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: GDefaultConst
end function GDefaultConst

!! Create, default, non-const
function GDefault() &
      bind(C, name='GDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: GDefault
end function GDefault

!! Create, general, const
function GCreateConst( &
   XYs1d &
) &
      bind(C, name='GCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr) :: GCreateConst
end function GCreateConst

!! Create, general, non-const
function GCreate( &
   XYs1d &
) &
      bind(C, name='GCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr) :: GCreate
end function GCreate

!! Assign
subroutine GAssign(handleLHS, handleRHS) &
      bind(C, name='GAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine GAssign

!! Delete
subroutine GDelete(handle) &
      bind(C, name='GDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function GRead(handle, filename, filenameSize) &
      bind(C, name='GRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: GRead
end function GRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function GWrite(handle, filename, filenameSize) &
      bind(C, name='GWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: GWrite
end function GWrite

!! Print to standard output, in our prettyprinting format
function GPrint(handle) &
      bind(C, name='GPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GPrint
end function GPrint

!! Print to standard output, as XML
function GPrintXML(handle) &
      bind(C, name='GPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GPrintXML
end function GPrintXML

!! Print to standard output, as JSON
function GPrintJSON(handle) &
      bind(C, name='GPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GPrintJSON
end function GPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function GXYs1dHas(handle) &
      bind(C, name='GXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GXYs1dHas
end function GXYs1dHas

!! Get, const
function GXYs1dGetConst(handle) &
      bind(C, name='GXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GXYs1dGetConst
end function GXYs1dGetConst

!! Get, non-const
function GXYs1dGet(handle) &
      bind(C, name='GXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: GXYs1dGet
end function GXYs1dGet

!! Set
subroutine GXYs1dSet(handle, fieldHandle) &
      bind(C, name='GXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalG
