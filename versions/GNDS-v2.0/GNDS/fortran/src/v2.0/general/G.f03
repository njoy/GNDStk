
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalG
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GDefaultConst() &
      bind(C, name='GDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GDefaultConst

!! Create, default
function GDefault() &
      bind(C, name='GDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GDefault

!! Create, general, const
function GCreateConst( &
   XYs1d &
) &
      bind(C, name='GCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function GCreateConst

!! Create, general
function GCreate( &
   XYs1d &
) &
      bind(C, name='GCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function GCreate

!! Assign
subroutine GAssign(handleLHS, handleRHS) &
      bind(C, name='GAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine GAssign

!! Delete
subroutine GDelete(handle) &
      bind(C, name='GDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function GRead(handle, filename, filenameSize) &
      bind(C, name='GRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GRead

!! Write to file
function GWrite(handle, filename, filenameSize) &
      bind(C, name='GWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GWrite

!! Print to standard output, in our prettyprinting format
function GPrint(handle) &
      bind(C, name='GPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GPrint

!! Print to standard output, as XML
function GPrintXML(handle) &
      bind(C, name='GPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GPrintXML

!! Print to standard output, as JSON
function GPrintJSON(handle) &
      bind(C, name='GPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function GXYs1dHas(handle) &
      bind(C, name='GXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GXYs1dHas

!! Get, const
function GXYs1dGetConst(handle) &
      bind(C, name='GXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GXYs1dGetConst

!! Get
function GXYs1dGet(handle) &
      bind(C, name='GXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GXYs1dGet

!! Set
subroutine GXYs1dSet(handle, fieldHandle) &
      bind(C, name='GXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalG
