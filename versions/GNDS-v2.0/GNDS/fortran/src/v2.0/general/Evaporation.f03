
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEvaporation
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EvaporationDefaultConst() &
      bind(C, name='EvaporationDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EvaporationDefaultConst
end function EvaporationDefaultConst

!! Create, default, non-const
function EvaporationDefault() &
      bind(C, name='EvaporationDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EvaporationDefault
end function EvaporationDefault

!! Create, general, const
function EvaporationCreateConst( &
   U, &
   theta &
) &
      bind(C, name='EvaporationCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: U
   type(c_ptr), intent(in), value :: theta
   type(c_ptr) :: EvaporationCreateConst
end function EvaporationCreateConst

!! Create, general, non-const
function EvaporationCreate( &
   U, &
   theta &
) &
      bind(C, name='EvaporationCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: U
   type(c_ptr), intent(in), value :: theta
   type(c_ptr) :: EvaporationCreate
end function EvaporationCreate

!! Assign
subroutine EvaporationAssign(handleLHS, handleRHS) &
      bind(C, name='EvaporationAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine EvaporationAssign

!! Delete
subroutine EvaporationDelete(handle) &
      bind(C, name='EvaporationDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EvaporationDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function EvaporationRead(handle, filename, filenameSize) &
      bind(C, name='EvaporationRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EvaporationRead
end function EvaporationRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function EvaporationWrite(handle, filename, filenameSize) &
      bind(C, name='EvaporationWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EvaporationWrite
end function EvaporationWrite

!! Print to standard output, in our prettyprinting format
function EvaporationPrint(handle) &
      bind(C, name='EvaporationPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EvaporationPrint
end function EvaporationPrint

!! Print to standard output, as XML
function EvaporationPrintXML(handle) &
      bind(C, name='EvaporationPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EvaporationPrintXML
end function EvaporationPrintXML

!! Print to standard output, as JSON
function EvaporationPrintJSON(handle) &
      bind(C, name='EvaporationPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EvaporationPrintJSON
end function EvaporationPrintJSON


!! -----------------------------------------------------------------------------
!! Child: U
!! -----------------------------------------------------------------------------

!! Has
function EvaporationUHas(handle) &
      bind(C, name='EvaporationUHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EvaporationUHas
end function EvaporationUHas

!! Get, const
function EvaporationUGetConst(handle) &
      bind(C, name='EvaporationUGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EvaporationUGetConst
end function EvaporationUGetConst

!! Get, non-const
function EvaporationUGet(handle) &
      bind(C, name='EvaporationUGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: EvaporationUGet
end function EvaporationUGet

!! Set
subroutine EvaporationUSet(handle, fieldHandle) &
      bind(C, name='EvaporationUSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine EvaporationUSet


!! -----------------------------------------------------------------------------
!! Child: theta
!! -----------------------------------------------------------------------------

!! Has
function EvaporationThetaHas(handle) &
      bind(C, name='EvaporationThetaHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EvaporationThetaHas
end function EvaporationThetaHas

!! Get, const
function EvaporationThetaGetConst(handle) &
      bind(C, name='EvaporationThetaGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EvaporationThetaGetConst
end function EvaporationThetaGetConst

!! Get, non-const
function EvaporationThetaGet(handle) &
      bind(C, name='EvaporationThetaGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: EvaporationThetaGet
end function EvaporationThetaGet

!! Set
subroutine EvaporationThetaSet(handle, fieldHandle) &
      bind(C, name='EvaporationThetaSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine EvaporationThetaSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEvaporation
