
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEvaporation
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EvaporationDefaultConst() &
      bind(C, name='EvaporationDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EvaporationDefaultConst

!! Create, default
function EvaporationDefault() &
      bind(C, name='EvaporationDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EvaporationDefault

!! Create, general, const
function EvaporationCreateConst( &
   U, &
   theta &
) &
      bind(C, name='EvaporationCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: U
   type(c_ptr), value :: theta
   type(c_ptr) :: handle
end function EvaporationCreateConst

!! Create, general
function EvaporationCreate( &
   U, &
   theta &
) &
      bind(C, name='EvaporationCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: U
   type(c_ptr), value :: theta
   type(c_ptr) :: handle
end function EvaporationCreate

!! Assign
subroutine EvaporationAssign(handleLHS, handleRHS) &
      bind(C, name='EvaporationAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine EvaporationAssign

!! Delete
subroutine EvaporationDelete(handle) &
      bind(C, name='EvaporationDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EvaporationDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function EvaporationRead(handle, filename, filenameSize) &
      bind(C, name='EvaporationRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EvaporationRead

!! Write to file
function EvaporationWrite(handle, filename, filenameSize) &
      bind(C, name='EvaporationWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EvaporationWrite

!! Print to standard output, in our prettyprinting format
function EvaporationPrint(handle) &
      bind(C, name='EvaporationPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EvaporationPrint

!! Print to standard output, as XML
function EvaporationPrintXML(handle) &
      bind(C, name='EvaporationPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EvaporationPrintXML

!! Print to standard output, as JSON
function EvaporationPrintJSON(handle) &
      bind(C, name='EvaporationPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EvaporationPrintJSON


!! -----------------------------------------------------------------------------
!! Child: U
!! -----------------------------------------------------------------------------

!! Has
function EvaporationUHas(handle) &
      bind(C, name='EvaporationUHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EvaporationUHas

!! Get, const
function EvaporationUGetConst(handle) &
      bind(C, name='EvaporationUGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EvaporationUGetConst

!! Get
function EvaporationUGet(handle) &
      bind(C, name='EvaporationUGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EvaporationUGet

!! Set
subroutine EvaporationUSet(handle, fieldHandle) &
      bind(C, name='EvaporationUSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EvaporationUSet


!! -----------------------------------------------------------------------------
!! Child: theta
!! -----------------------------------------------------------------------------

!! Has
function EvaporationThetaHas(handle) &
      bind(C, name='EvaporationThetaHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EvaporationThetaHas

!! Get, const
function EvaporationThetaGetConst(handle) &
      bind(C, name='EvaporationThetaGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EvaporationThetaGetConst

!! Get
function EvaporationThetaGet(handle) &
      bind(C, name='EvaporationThetaGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EvaporationThetaGet

!! Set
subroutine EvaporationThetaSet(handle, fieldHandle) &
      bind(C, name='EvaporationThetaSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EvaporationThetaSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEvaporation
