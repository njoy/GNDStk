
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAverageParameterCovariance
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AverageParameterCovarianceDefaultConst() &
      bind(C, name='AverageParameterCovarianceDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AverageParameterCovarianceDefaultConst

!! Create, default
function AverageParameterCovarianceDefault() &
      bind(C, name='AverageParameterCovarianceDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AverageParameterCovarianceDefault

!! Create, general, const
function AverageParameterCovarianceCreateConst( &
   label, &
   crossTerm, &
   covarianceMatrix, &
   rowData, &
   columnData, &
   labelSize &
) &
      bind(C, name='AverageParameterCovarianceCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   logical(c_bool), value, intent(in) :: crossTerm
   type(c_ptr), value :: covarianceMatrix
   type(c_ptr), value :: rowData
   type(c_ptr), value :: columnData
   type(c_ptr) :: handle
end function AverageParameterCovarianceCreateConst

!! Create, general
function AverageParameterCovarianceCreate( &
   label, &
   crossTerm, &
   covarianceMatrix, &
   rowData, &
   columnData, &
   labelSize &
) &
      bind(C, name='AverageParameterCovarianceCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   logical(c_bool), value, intent(in) :: crossTerm
   type(c_ptr), value :: covarianceMatrix
   type(c_ptr), value :: rowData
   type(c_ptr), value :: columnData
   type(c_ptr) :: handle
end function AverageParameterCovarianceCreate

!! Assign
subroutine AverageParameterCovarianceAssign(handleLHS, handleRHS) &
      bind(C, name='AverageParameterCovarianceAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AverageParameterCovarianceAssign

!! Delete
subroutine AverageParameterCovarianceDelete(handle) &
      bind(C, name='AverageParameterCovarianceDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AverageParameterCovarianceDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AverageParameterCovarianceRead(handle, filename, filenameSize) &
      bind(C, name='AverageParameterCovarianceRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AverageParameterCovarianceRead

!! Write to file
function AverageParameterCovarianceWrite(handle, filename, filenameSize) &
      bind(C, name='AverageParameterCovarianceWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AverageParameterCovarianceWrite

!! Print to standard output, in our prettyprinting format
function AverageParameterCovariancePrint(handle) &
      bind(C, name='AverageParameterCovariancePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AverageParameterCovariancePrint

!! Print to standard output, as XML
function AverageParameterCovariancePrintXML(handle) &
      bind(C, name='AverageParameterCovariancePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AverageParameterCovariancePrintXML

!! Print to standard output, as JSON
function AverageParameterCovariancePrintJSON(handle) &
      bind(C, name='AverageParameterCovariancePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AverageParameterCovariancePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function AverageParameterCovarianceLabelHas(handle) &
      bind(C, name='AverageParameterCovarianceLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AverageParameterCovarianceLabelHas

!! Get
function AverageParameterCovarianceLabelGet(handle) &
      bind(C, name='AverageParameterCovarianceLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function AverageParameterCovarianceLabelGet

!! Set
subroutine AverageParameterCovarianceLabelSet(handle, label, labelSize) &
      bind(C, name='AverageParameterCovarianceLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine AverageParameterCovarianceLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: crossTerm
!! -----------------------------------------------------------------------------

!! Has
function AverageParameterCovarianceCrossTermHas(handle) &
      bind(C, name='AverageParameterCovarianceCrossTermHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AverageParameterCovarianceCrossTermHas

!! Get
function AverageParameterCovarianceCrossTermGet(handle) &
      bind(C, name='AverageParameterCovarianceCrossTermGet') &
      result(crossTerm)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: crossTerm
end function AverageParameterCovarianceCrossTermGet

!! Set
subroutine AverageParameterCovarianceCrossTermSet(handle, crossTerm, crossTermSize) &
      bind(C, name='AverageParameterCovarianceCrossTermSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: crossTermSize
   character(c_char), intent(in) :: crossTerm(crossTermSize)
end subroutine AverageParameterCovarianceCrossTermSet


!! -----------------------------------------------------------------------------
!! Child: covarianceMatrix
!! -----------------------------------------------------------------------------

!! Has
function AverageParameterCovarianceCovarianceMatrixHas(handle) &
      bind(C, name='AverageParameterCovarianceCovarianceMatrixHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AverageParameterCovarianceCovarianceMatrixHas

!! Get, const
function AverageParameterCovarianceCovarianceMatrixGetConst(handle) &
      bind(C, name='AverageParameterCovarianceCovarianceMatrixGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AverageParameterCovarianceCovarianceMatrixGetConst

!! Get
function AverageParameterCovarianceCovarianceMatrixGet(handle) &
      bind(C, name='AverageParameterCovarianceCovarianceMatrixGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AverageParameterCovarianceCovarianceMatrixGet

!! Set
subroutine AverageParameterCovarianceCovarianceMatrixSet(handle, fieldHandle) &
      bind(C, name='AverageParameterCovarianceCovarianceMatrixSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine AverageParameterCovarianceCovarianceMatrixSet


!! -----------------------------------------------------------------------------
!! Child: rowData
!! -----------------------------------------------------------------------------

!! Has
function AverageParameterCovarianceRowDataHas(handle) &
      bind(C, name='AverageParameterCovarianceRowDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AverageParameterCovarianceRowDataHas

!! Get, const
function AverageParameterCovarianceRowDataGetConst(handle) &
      bind(C, name='AverageParameterCovarianceRowDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AverageParameterCovarianceRowDataGetConst

!! Get
function AverageParameterCovarianceRowDataGet(handle) &
      bind(C, name='AverageParameterCovarianceRowDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AverageParameterCovarianceRowDataGet

!! Set
subroutine AverageParameterCovarianceRowDataSet(handle, fieldHandle) &
      bind(C, name='AverageParameterCovarianceRowDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine AverageParameterCovarianceRowDataSet


!! -----------------------------------------------------------------------------
!! Child: columnData
!! -----------------------------------------------------------------------------

!! Has
function AverageParameterCovarianceColumnDataHas(handle) &
      bind(C, name='AverageParameterCovarianceColumnDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AverageParameterCovarianceColumnDataHas

!! Get, const
function AverageParameterCovarianceColumnDataGetConst(handle) &
      bind(C, name='AverageParameterCovarianceColumnDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AverageParameterCovarianceColumnDataGetConst

!! Get
function AverageParameterCovarianceColumnDataGet(handle) &
      bind(C, name='AverageParameterCovarianceColumnDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AverageParameterCovarianceColumnDataGet

!! Set
subroutine AverageParameterCovarianceColumnDataSet(handle, fieldHandle) &
      bind(C, name='AverageParameterCovarianceColumnDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine AverageParameterCovarianceColumnDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAverageParameterCovariance
