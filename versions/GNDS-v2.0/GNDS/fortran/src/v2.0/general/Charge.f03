
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCharge
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ChargeDefaultConst() &
      bind(C, name='ChargeDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ChargeDefaultConst

!! Create, default
function ChargeDefault() &
      bind(C, name='ChargeDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ChargeDefault

!! Create, general, const
function ChargeCreateConst( &
   integer &
) &
      bind(C, name='ChargeCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: integer
   type(c_ptr) :: handle
end function ChargeCreateConst

!! Create, general
function ChargeCreate( &
   integer &
) &
      bind(C, name='ChargeCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: integer
   type(c_ptr) :: handle
end function ChargeCreate

!! Assign
subroutine ChargeAssign(handleLHS, handleRHS) &
      bind(C, name='ChargeAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ChargeAssign

!! Delete
subroutine ChargeDelete(handle) &
      bind(C, name='ChargeDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChargeDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ChargeRead(handle, filename, filenameSize) &
      bind(C, name='ChargeRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ChargeRead

!! Write to file
function ChargeWrite(handle, filename, filenameSize) &
      bind(C, name='ChargeWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ChargeWrite

!! Print to standard output, in our prettyprinting format
function ChargePrint(handle) &
      bind(C, name='ChargePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChargePrint

!! Print to standard output, as XML
function ChargePrintXML(handle) &
      bind(C, name='ChargePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChargePrintXML

!! Print to standard output, as JSON
function ChargePrintJSON(handle) &
      bind(C, name='ChargePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChargePrintJSON


!! -----------------------------------------------------------------------------
!! Child: integer
!! -----------------------------------------------------------------------------

!! Has
function ChargeIntegerHas(handle) &
      bind(C, name='ChargeIntegerHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChargeIntegerHas

!! Get, const
function ChargeIntegerGetConst(handle) &
      bind(C, name='ChargeIntegerGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ChargeIntegerGetConst

!! Get
function ChargeIntegerGet(handle) &
      bind(C, name='ChargeIntegerGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ChargeIntegerGet

!! Set
subroutine ChargeIntegerSet(handle, fieldHandle) &
      bind(C, name='ChargeIntegerSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ChargeIntegerSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCharge
