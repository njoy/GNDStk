
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCharge
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ChargeDefaultConst() &
      bind(C, name='ChargeDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ChargeDefaultConst
end function ChargeDefaultConst

!! Create, default, non-const
function ChargeDefault() &
      bind(C, name='ChargeDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ChargeDefault
end function ChargeDefault

!! Create, general, const
function ChargeCreateConst( &
   integer &
) &
      bind(C, name='ChargeCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: integer
   type(c_ptr) :: ChargeCreateConst
end function ChargeCreateConst

!! Create, general, non-const
function ChargeCreate( &
   integer &
) &
      bind(C, name='ChargeCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: integer
   type(c_ptr) :: ChargeCreate
end function ChargeCreate

!! Assign
subroutine ChargeAssign(handleLHS, handleRHS) &
      bind(C, name='ChargeAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ChargeAssign

!! Delete
subroutine ChargeDelete(handle) &
      bind(C, name='ChargeDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChargeDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ChargeRead(handle, filename, filenameSize) &
      bind(C, name='ChargeRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ChargeRead
end function ChargeRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ChargeWrite(handle, filename, filenameSize) &
      bind(C, name='ChargeWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ChargeWrite
end function ChargeWrite

!! Print to standard output, in our prettyprinting format
function ChargePrint(handle) &
      bind(C, name='ChargePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChargePrint
end function ChargePrint

!! Print to standard output, as XML
function ChargePrintXML(handle) &
      bind(C, name='ChargePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChargePrintXML
end function ChargePrintXML

!! Print to standard output, as JSON
function ChargePrintJSON(handle) &
      bind(C, name='ChargePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChargePrintJSON
end function ChargePrintJSON


!! -----------------------------------------------------------------------------
!! Child: integer
!! -----------------------------------------------------------------------------

!! Has
function ChargeIntegerHas(handle) &
      bind(C, name='ChargeIntegerHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChargeIntegerHas
end function ChargeIntegerHas

!! Get, const
function ChargeIntegerGetConst(handle) &
      bind(C, name='ChargeIntegerGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ChargeIntegerGetConst
end function ChargeIntegerGetConst

!! Get, non-const
function ChargeIntegerGet(handle) &
      bind(C, name='ChargeIntegerGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ChargeIntegerGet
end function ChargeIntegerGet

!! Set
subroutine ChargeIntegerSet(handle, fieldHandle) &
      bind(C, name='ChargeIntegerSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChargeIntegerSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCharge
