
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalProjectileEnergyDomain
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ProjectileEnergyDomainDefaultConst() &
      bind(C, name='ProjectileEnergyDomainDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ProjectileEnergyDomainDefaultConst
end function ProjectileEnergyDomainDefaultConst

!! Create, default
function ProjectileEnergyDomainDefault() &
      bind(C, name='ProjectileEnergyDomainDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ProjectileEnergyDomainDefault
end function ProjectileEnergyDomainDefault

!! Create, general, const
function ProjectileEnergyDomainCreateConst( &
   min, &
   max, &
   unit, &
   unitSize &
) &
      bind(C, name='ProjectileEnergyDomainCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: min
   real(c_double), value, intent(in) :: max
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: ProjectileEnergyDomainCreateConst
end function ProjectileEnergyDomainCreateConst

!! Create, general
function ProjectileEnergyDomainCreate( &
   min, &
   max, &
   unit, &
   unitSize &
) &
      bind(C, name='ProjectileEnergyDomainCreate')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: min
   real(c_double), value, intent(in) :: max
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: ProjectileEnergyDomainCreate
end function ProjectileEnergyDomainCreate

!! Assign
subroutine ProjectileEnergyDomainAssign(handleLHS, handleRHS) &
      bind(C, name='ProjectileEnergyDomainAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ProjectileEnergyDomainAssign

!! Delete
subroutine ProjectileEnergyDomainDelete(handle) &
      bind(C, name='ProjectileEnergyDomainDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProjectileEnergyDomainDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ProjectileEnergyDomainRead(handle, filename, filenameSize) &
      bind(C, name='ProjectileEnergyDomainRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ProjectileEnergyDomainRead
end function ProjectileEnergyDomainRead

!! Write to file
function ProjectileEnergyDomainWrite(handle, filename, filenameSize) &
      bind(C, name='ProjectileEnergyDomainWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ProjectileEnergyDomainWrite
end function ProjectileEnergyDomainWrite

!! Print to standard output, in our prettyprinting format
function ProjectileEnergyDomainPrint(handle) &
      bind(C, name='ProjectileEnergyDomainPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProjectileEnergyDomainPrint
end function ProjectileEnergyDomainPrint

!! Print to standard output, as XML
function ProjectileEnergyDomainPrintXML(handle) &
      bind(C, name='ProjectileEnergyDomainPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProjectileEnergyDomainPrintXML
end function ProjectileEnergyDomainPrintXML

!! Print to standard output, as JSON
function ProjectileEnergyDomainPrintJSON(handle) &
      bind(C, name='ProjectileEnergyDomainPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProjectileEnergyDomainPrintJSON
end function ProjectileEnergyDomainPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: min
!! -----------------------------------------------------------------------------

!! Has
function ProjectileEnergyDomainMinHas(handle) &
      bind(C, name='ProjectileEnergyDomainMinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProjectileEnergyDomainMinHas
end function ProjectileEnergyDomainMinHas

!! Get
function ProjectileEnergyDomainMinGet(handle) &
      bind(C, name='ProjectileEnergyDomainMinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: ProjectileEnergyDomainMinGet
end function ProjectileEnergyDomainMinGet

!! Set
subroutine ProjectileEnergyDomainMinSet(handle, min, minSize) &
      bind(C, name='ProjectileEnergyDomainMinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: minSize
   character(c_char), intent(in) :: min(minSize)
end subroutine ProjectileEnergyDomainMinSet


!! -----------------------------------------------------------------------------
!! Metadatum: max
!! -----------------------------------------------------------------------------

!! Has
function ProjectileEnergyDomainMaxHas(handle) &
      bind(C, name='ProjectileEnergyDomainMaxHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProjectileEnergyDomainMaxHas
end function ProjectileEnergyDomainMaxHas

!! Get
function ProjectileEnergyDomainMaxGet(handle) &
      bind(C, name='ProjectileEnergyDomainMaxGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: ProjectileEnergyDomainMaxGet
end function ProjectileEnergyDomainMaxGet

!! Set
subroutine ProjectileEnergyDomainMaxSet(handle, max, maxSize) &
      bind(C, name='ProjectileEnergyDomainMaxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: maxSize
   character(c_char), intent(in) :: max(maxSize)
end subroutine ProjectileEnergyDomainMaxSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function ProjectileEnergyDomainUnitHas(handle) &
      bind(C, name='ProjectileEnergyDomainUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProjectileEnergyDomainUnitHas
end function ProjectileEnergyDomainUnitHas

!! Get
function ProjectileEnergyDomainUnitGet(handle) &
      bind(C, name='ProjectileEnergyDomainUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ProjectileEnergyDomainUnitGet
end function ProjectileEnergyDomainUnitGet

!! Set
subroutine ProjectileEnergyDomainUnitSet(handle, unit, unitSize) &
      bind(C, name='ProjectileEnergyDomainUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine ProjectileEnergyDomainUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalProjectileEnergyDomain
