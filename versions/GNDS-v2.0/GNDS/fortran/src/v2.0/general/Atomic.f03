
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAtomic
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AtomicDefaultConst() &
      bind(C, name='AtomicDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AtomicDefaultConst

!! Create, default
function AtomicDefault() &
      bind(C, name='AtomicDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AtomicDefault

!! Create, general, const
function AtomicCreateConst( &
   configurations &
) &
      bind(C, name='AtomicCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: configurations
   type(c_ptr) :: handle
end function AtomicCreateConst

!! Create, general
function AtomicCreate( &
   configurations &
) &
      bind(C, name='AtomicCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: configurations
   type(c_ptr) :: handle
end function AtomicCreate

!! Assign
subroutine AtomicAssign(handleLHS, handleRHS) &
      bind(C, name='AtomicAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AtomicAssign

!! Delete
subroutine AtomicDelete(handle) &
      bind(C, name='AtomicDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AtomicDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AtomicRead(handle, filename, filenameSize) &
      bind(C, name='AtomicRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AtomicRead

!! Write to file
function AtomicWrite(handle, filename, filenameSize) &
      bind(C, name='AtomicWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AtomicWrite

!! Print to standard output, in our prettyprinting format
function AtomicPrint(handle) &
      bind(C, name='AtomicPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AtomicPrint

!! Print to standard output, as XML
function AtomicPrintXML(handle) &
      bind(C, name='AtomicPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AtomicPrintXML

!! Print to standard output, as JSON
function AtomicPrintJSON(handle) &
      bind(C, name='AtomicPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AtomicPrintJSON


!! -----------------------------------------------------------------------------
!! Child: configurations
!! -----------------------------------------------------------------------------

!! Has
function AtomicConfigurationsHas(handle) &
      bind(C, name='AtomicConfigurationsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AtomicConfigurationsHas

!! Get, const
function AtomicConfigurationsGetConst(handle) &
      bind(C, name='AtomicConfigurationsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AtomicConfigurationsGetConst

!! Get
function AtomicConfigurationsGet(handle) &
      bind(C, name='AtomicConfigurationsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function AtomicConfigurationsGet

!! Set
subroutine AtomicConfigurationsSet(handle, fieldHandle) &
      bind(C, name='AtomicConfigurationsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine AtomicConfigurationsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAtomic
