
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalT_M
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function T_MDefaultConst() &
      bind(C, name='T_MDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function T_MDefaultConst

!! Create, default
function T_MDefault() &
      bind(C, name='T_MDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function T_MDefault

!! Create, general, const
function T_MCreateConst( &
   XYs1d &
) &
      bind(C, name='T_MCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function T_MCreateConst

!! Create, general
function T_MCreate( &
   XYs1d &
) &
      bind(C, name='T_MCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function T_MCreate

!! Assign
subroutine T_MAssign(handleLHS, handleRHS) &
      bind(C, name='T_MAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine T_MAssign

!! Delete
subroutine T_MDelete(handle) &
      bind(C, name='T_MDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine T_MDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function T_MRead(handle, filename, filenameSize) &
      bind(C, name='T_MRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function T_MRead

!! Write to file
function T_MWrite(handle, filename, filenameSize) &
      bind(C, name='T_MWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function T_MWrite

!! Print to standard output, in our prettyprinting format
function T_MPrint(handle) &
      bind(C, name='T_MPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function T_MPrint

!! Print to standard output, as XML
function T_MPrintXML(handle) &
      bind(C, name='T_MPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function T_MPrintXML

!! Print to standard output, as JSON
function T_MPrintJSON(handle) &
      bind(C, name='T_MPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function T_MPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function T_MXYs1dHas(handle) &
      bind(C, name='T_MXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function T_MXYs1dHas

!! Get, const
function T_MXYs1dGetConst(handle) &
      bind(C, name='T_MXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function T_MXYs1dGetConst

!! Get
function T_MXYs1dGet(handle) &
      bind(C, name='T_MXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function T_MXYs1dGet

!! Set
subroutine T_MXYs1dSet(handle, fieldHandle) &
      bind(C, name='T_MXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine T_MXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalT_M
