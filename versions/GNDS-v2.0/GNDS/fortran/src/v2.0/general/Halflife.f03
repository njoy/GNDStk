
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalHalflife
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function HalflifeDefaultConst() &
      bind(C, name='HalflifeDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: HalflifeDefaultConst
end function HalflifeDefaultConst

!! Create, default
function HalflifeDefault() &
      bind(C, name='HalflifeDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: HalflifeDefault
end function HalflifeDefault

!! Create, general, const
function HalflifeCreateConst( &
   string, &
   Double &
) &
      bind(C, name='HalflifeCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: string
   type(c_ptr), intent(in), value :: Double
   type(c_ptr) :: HalflifeCreateConst
end function HalflifeCreateConst

!! Create, general
function HalflifeCreate( &
   string, &
   Double &
) &
      bind(C, name='HalflifeCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: string
   type(c_ptr), intent(in), value :: Double
   type(c_ptr) :: HalflifeCreate
end function HalflifeCreate

!! Assign
subroutine HalflifeAssign(handleLHS, handleRHS) &
      bind(C, name='HalflifeAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine HalflifeAssign

!! Delete
subroutine HalflifeDelete(handle) &
      bind(C, name='HalflifeDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine HalflifeDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function HalflifeRead(handle, filename, filenameSize) &
      bind(C, name='HalflifeRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: HalflifeRead
end function HalflifeRead

!! Write to file
function HalflifeWrite(handle, filename, filenameSize) &
      bind(C, name='HalflifeWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: HalflifeWrite
end function HalflifeWrite

!! Print to standard output, in our prettyprinting format
function HalflifePrint(handle) &
      bind(C, name='HalflifePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HalflifePrint
end function HalflifePrint

!! Print to standard output, as XML
function HalflifePrintXML(handle) &
      bind(C, name='HalflifePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HalflifePrintXML
end function HalflifePrintXML

!! Print to standard output, as JSON
function HalflifePrintJSON(handle) &
      bind(C, name='HalflifePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HalflifePrintJSON
end function HalflifePrintJSON


!! -----------------------------------------------------------------------------
!! Child: string
!! -----------------------------------------------------------------------------

!! Has
function HalflifeStringHas(handle) &
      bind(C, name='HalflifeStringHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HalflifeStringHas
end function HalflifeStringHas

!! Get, const
function HalflifeStringGetConst(handle) &
      bind(C, name='HalflifeStringGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: HalflifeStringGetConst
end function HalflifeStringGetConst

!! Get
function HalflifeStringGet(handle) &
      bind(C, name='HalflifeStringGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: HalflifeStringGet
end function HalflifeStringGet

!! Set
subroutine HalflifeStringSet(handle, fieldHandle) &
      bind(C, name='HalflifeStringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine HalflifeStringSet


!! -----------------------------------------------------------------------------
!! Child: Double
!! -----------------------------------------------------------------------------

!! Has
function HalflifeDoubleHas(handle) &
      bind(C, name='HalflifeDoubleHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HalflifeDoubleHas
end function HalflifeDoubleHas

!! Get, const
function HalflifeDoubleGetConst(handle) &
      bind(C, name='HalflifeDoubleGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: HalflifeDoubleGetConst
end function HalflifeDoubleGetConst

!! Get
function HalflifeDoubleGet(handle) &
      bind(C, name='HalflifeDoubleGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: HalflifeDoubleGet
end function HalflifeDoubleGet

!! Set
subroutine HalflifeDoubleSet(handle, fieldHandle) &
      bind(C, name='HalflifeDoubleSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine HalflifeDoubleSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalHalflife
