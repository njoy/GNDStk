
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAverageEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AverageEnergyDefaultConst() &
      bind(C, name='AverageEnergyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AverageEnergyDefaultConst
end function AverageEnergyDefaultConst

!! Create, default
function AverageEnergyDefault() &
      bind(C, name='AverageEnergyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AverageEnergyDefault
end function AverageEnergyDefault

!! Create, general, const
function AverageEnergyCreateConst( &
   label, &
   value, &
   unit, &
   uncertainty, &
   labelSize, &
   unitSize &
) &
      bind(C, name='AverageEnergyCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), intent(in), value :: uncertainty
   type(c_ptr) :: AverageEnergyCreateConst
end function AverageEnergyCreateConst

!! Create, general
function AverageEnergyCreate( &
   label, &
   value, &
   unit, &
   uncertainty, &
   labelSize, &
   unitSize &
) &
      bind(C, name='AverageEnergyCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), intent(in), value :: uncertainty
   type(c_ptr) :: AverageEnergyCreate
end function AverageEnergyCreate

!! Assign
subroutine AverageEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='AverageEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AverageEnergyAssign

!! Delete
subroutine AverageEnergyDelete(handle) &
      bind(C, name='AverageEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AverageEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AverageEnergyRead(handle, filename, filenameSize) &
      bind(C, name='AverageEnergyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AverageEnergyRead
end function AverageEnergyRead

!! Write to file
function AverageEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='AverageEnergyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AverageEnergyWrite
end function AverageEnergyWrite

!! Print to standard output, in our prettyprinting format
function AverageEnergyPrint(handle) &
      bind(C, name='AverageEnergyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyPrint
end function AverageEnergyPrint

!! Print to standard output, as XML
function AverageEnergyPrintXML(handle) &
      bind(C, name='AverageEnergyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyPrintXML
end function AverageEnergyPrintXML

!! Print to standard output, as JSON
function AverageEnergyPrintJSON(handle) &
      bind(C, name='AverageEnergyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyPrintJSON
end function AverageEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function AverageEnergyLabelHas(handle) &
      bind(C, name='AverageEnergyLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyLabelHas
end function AverageEnergyLabelHas

!! Get
function AverageEnergyLabelGet(handle) &
      bind(C, name='AverageEnergyLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AverageEnergyLabelGet
end function AverageEnergyLabelGet

!! Set
subroutine AverageEnergyLabelSet(handle, label, labelSize) &
      bind(C, name='AverageEnergyLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine AverageEnergyLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function AverageEnergyValueHas(handle) &
      bind(C, name='AverageEnergyValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyValueHas
end function AverageEnergyValueHas

!! Get
function AverageEnergyValueGet(handle) &
      bind(C, name='AverageEnergyValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: AverageEnergyValueGet
end function AverageEnergyValueGet

!! Set
subroutine AverageEnergyValueSet(handle, value) &
      bind(C, name='AverageEnergyValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: value
end subroutine AverageEnergyValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function AverageEnergyUnitHas(handle) &
      bind(C, name='AverageEnergyUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyUnitHas
end function AverageEnergyUnitHas

!! Get
function AverageEnergyUnitGet(handle) &
      bind(C, name='AverageEnergyUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AverageEnergyUnitGet
end function AverageEnergyUnitGet

!! Set
subroutine AverageEnergyUnitSet(handle, unit, unitSize) &
      bind(C, name='AverageEnergyUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine AverageEnergyUnitSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function AverageEnergyUncertaintyHas(handle) &
      bind(C, name='AverageEnergyUncertaintyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AverageEnergyUncertaintyHas
end function AverageEnergyUncertaintyHas

!! Get, const
function AverageEnergyUncertaintyGetConst(handle) &
      bind(C, name='AverageEnergyUncertaintyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AverageEnergyUncertaintyGetConst
end function AverageEnergyUncertaintyGetConst

!! Get
function AverageEnergyUncertaintyGet(handle) &
      bind(C, name='AverageEnergyUncertaintyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: AverageEnergyUncertaintyGet
end function AverageEnergyUncertaintyGet

!! Set
subroutine AverageEnergyUncertaintySet(handle, fieldHandle) &
      bind(C, name='AverageEnergyUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AverageEnergyUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAverageEnergy
