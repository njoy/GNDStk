
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNuclide
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NuclideDefaultConst() &
      bind(C, name='NuclideDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NuclideDefaultConst

!! Create, default
function NuclideDefault() &
      bind(C, name='NuclideDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NuclideDefault

!! Create, general, const
function NuclideCreateConst( &
   id, &
   mass, &
   charge, &
   nucleus, &
   decayData, &
   fissionFragmentData, &
   idSize &
) &
      bind(C, name='NuclideCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), value :: mass
   type(c_ptr), value :: charge
   type(c_ptr), value :: nucleus
   type(c_ptr), value :: decayData
   type(c_ptr), value :: fissionFragmentData
   type(c_ptr) :: handle
end function NuclideCreateConst

!! Create, general
function NuclideCreate( &
   id, &
   mass, &
   charge, &
   nucleus, &
   decayData, &
   fissionFragmentData, &
   idSize &
) &
      bind(C, name='NuclideCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), value :: mass
   type(c_ptr), value :: charge
   type(c_ptr), value :: nucleus
   type(c_ptr), value :: decayData
   type(c_ptr), value :: fissionFragmentData
   type(c_ptr) :: handle
end function NuclideCreate

!! Assign
subroutine NuclideAssign(handleLHS, handleRHS) &
      bind(C, name='NuclideAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NuclideAssign

!! Delete
subroutine NuclideDelete(handle) &
      bind(C, name='NuclideDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclideDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NuclideRead(handle, filename, filenameSize) &
      bind(C, name='NuclideRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NuclideRead

!! Write to file
function NuclideWrite(handle, filename, filenameSize) &
      bind(C, name='NuclideWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NuclideWrite

!! Print to standard output, in our prettyprinting format
function NuclidePrint(handle) &
      bind(C, name='NuclidePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclidePrint

!! Print to standard output, as XML
function NuclidePrintXML(handle) &
      bind(C, name='NuclidePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclidePrintXML

!! Print to standard output, as JSON
function NuclidePrintJSON(handle) &
      bind(C, name='NuclidePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclidePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function NuclideIdHas(handle) &
      bind(C, name='NuclideIdHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclideIdHas

!! Get
function NuclideIdGet(handle) &
      bind(C, name='NuclideIdGet') &
      result(id)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: id
end function NuclideIdGet

!! Set
subroutine NuclideIdSet(handle, id, idSize) &
      bind(C, name='NuclideIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine NuclideIdSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function NuclideMassHas(handle) &
      bind(C, name='NuclideMassHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclideMassHas

!! Get, const
function NuclideMassGetConst(handle) &
      bind(C, name='NuclideMassGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideMassGetConst

!! Get
function NuclideMassGet(handle) &
      bind(C, name='NuclideMassGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideMassGet

!! Set
subroutine NuclideMassSet(handle, fieldHandle) &
      bind(C, name='NuclideMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclideMassSet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function NuclideChargeHas(handle) &
      bind(C, name='NuclideChargeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclideChargeHas

!! Get, const
function NuclideChargeGetConst(handle) &
      bind(C, name='NuclideChargeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideChargeGetConst

!! Get
function NuclideChargeGet(handle) &
      bind(C, name='NuclideChargeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideChargeGet

!! Set
subroutine NuclideChargeSet(handle, fieldHandle) &
      bind(C, name='NuclideChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclideChargeSet


!! -----------------------------------------------------------------------------
!! Child: nucleus
!! -----------------------------------------------------------------------------

!! Has
function NuclideNucleusHas(handle) &
      bind(C, name='NuclideNucleusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclideNucleusHas

!! Get, const
function NuclideNucleusGetConst(handle) &
      bind(C, name='NuclideNucleusGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideNucleusGetConst

!! Get
function NuclideNucleusGet(handle) &
      bind(C, name='NuclideNucleusGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideNucleusGet

!! Set
subroutine NuclideNucleusSet(handle, fieldHandle) &
      bind(C, name='NuclideNucleusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclideNucleusSet


!! -----------------------------------------------------------------------------
!! Child: decayData
!! -----------------------------------------------------------------------------

!! Has
function NuclideDecayDataHas(handle) &
      bind(C, name='NuclideDecayDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclideDecayDataHas

!! Get, const
function NuclideDecayDataGetConst(handle) &
      bind(C, name='NuclideDecayDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideDecayDataGetConst

!! Get
function NuclideDecayDataGet(handle) &
      bind(C, name='NuclideDecayDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideDecayDataGet

!! Set
subroutine NuclideDecayDataSet(handle, fieldHandle) &
      bind(C, name='NuclideDecayDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclideDecayDataSet


!! -----------------------------------------------------------------------------
!! Child: fissionFragmentData
!! -----------------------------------------------------------------------------

!! Has
function NuclideFissionFragmentDataHas(handle) &
      bind(C, name='NuclideFissionFragmentDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclideFissionFragmentDataHas

!! Get, const
function NuclideFissionFragmentDataGetConst(handle) &
      bind(C, name='NuclideFissionFragmentDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideFissionFragmentDataGetConst

!! Get
function NuclideFissionFragmentDataGet(handle) &
      bind(C, name='NuclideFissionFragmentDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclideFissionFragmentDataGet

!! Set
subroutine NuclideFissionFragmentDataSet(handle, fieldHandle) &
      bind(C, name='NuclideFissionFragmentDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclideFissionFragmentDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNuclide
