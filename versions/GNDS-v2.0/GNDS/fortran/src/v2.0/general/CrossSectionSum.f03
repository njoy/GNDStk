
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCrossSectionSum
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CrossSectionSumDefaultConst() &
      bind(C, name='CrossSectionSumDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionSumDefaultConst
end function CrossSectionSumDefaultConst

!! Create, default
function CrossSectionSumDefault() &
      bind(C, name='CrossSectionSumDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionSumDefault
end function CrossSectionSumDefault

!! Create, general, const
function CrossSectionSumCreateConst( &
   label, &
   ENDF_MT, &
   summands, &
   Q, &
   crossSection, &
   labelSize &
) &
      bind(C, name='CrossSectionSumCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: ENDF_MT
   type(c_ptr), value :: summands
   type(c_ptr), value :: Q
   type(c_ptr), value :: crossSection
   type(c_ptr) :: CrossSectionSumCreateConst
end function CrossSectionSumCreateConst

!! Create, general
function CrossSectionSumCreate( &
   label, &
   ENDF_MT, &
   summands, &
   Q, &
   crossSection, &
   labelSize &
) &
      bind(C, name='CrossSectionSumCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: ENDF_MT
   type(c_ptr), value :: summands
   type(c_ptr), value :: Q
   type(c_ptr), value :: crossSection
   type(c_ptr) :: CrossSectionSumCreate
end function CrossSectionSumCreate

!! Assign
subroutine CrossSectionSumAssign(handleLHS, handleRHS) &
      bind(C, name='CrossSectionSumAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CrossSectionSumAssign

!! Delete
subroutine CrossSectionSumDelete(handle) &
      bind(C, name='CrossSectionSumDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionSumDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CrossSectionSumRead(handle, filename, filenameSize) &
      bind(C, name='CrossSectionSumRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionSumRead
end function CrossSectionSumRead

!! Write to file
function CrossSectionSumWrite(handle, filename, filenameSize) &
      bind(C, name='CrossSectionSumWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionSumWrite
end function CrossSectionSumWrite

!! Print to standard output, in our prettyprinting format
function CrossSectionSumPrint(handle) &
      bind(C, name='CrossSectionSumPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumPrint
end function CrossSectionSumPrint

!! Print to standard output, as XML
function CrossSectionSumPrintXML(handle) &
      bind(C, name='CrossSectionSumPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumPrintXML
end function CrossSectionSumPrintXML

!! Print to standard output, as JSON
function CrossSectionSumPrintJSON(handle) &
      bind(C, name='CrossSectionSumPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumPrintJSON
end function CrossSectionSumPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionSumLabelHas(handle) &
      bind(C, name='CrossSectionSumLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumLabelHas
end function CrossSectionSumLabelHas

!! Get
function CrossSectionSumLabelGet(handle) &
      bind(C, name='CrossSectionSumLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumLabelGet
end function CrossSectionSumLabelGet

!! Set
subroutine CrossSectionSumLabelSet(handle, label, labelSize) &
      bind(C, name='CrossSectionSumLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CrossSectionSumLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MT
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionSumENDFMTHas(handle) &
      bind(C, name='CrossSectionSumENDFMTHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumENDFMTHas
end function CrossSectionSumENDFMTHas

!! Get
function CrossSectionSumENDFMTGet(handle) &
      bind(C, name='CrossSectionSumENDFMTGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumENDFMTGet
end function CrossSectionSumENDFMTGet

!! Set
subroutine CrossSectionSumENDFMTSet(handle, ENDF_MT, ENDF_MTSize) &
      bind(C, name='CrossSectionSumENDFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ENDF_MTSize
   character(c_char), intent(in) :: ENDF_MT(ENDF_MTSize)
end subroutine CrossSectionSumENDFMTSet


!! -----------------------------------------------------------------------------
!! Child: summands
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionSumSummandsHas(handle) &
      bind(C, name='CrossSectionSumSummandsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumSummandsHas
end function CrossSectionSumSummandsHas

!! Get, const
function CrossSectionSumSummandsGetConst(handle) &
      bind(C, name='CrossSectionSumSummandsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumSummandsGetConst
end function CrossSectionSumSummandsGetConst

!! Get
function CrossSectionSumSummandsGet(handle) &
      bind(C, name='CrossSectionSumSummandsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumSummandsGet
end function CrossSectionSumSummandsGet

!! Set
subroutine CrossSectionSumSummandsSet(handle, fieldHandle) &
      bind(C, name='CrossSectionSumSummandsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionSumSummandsSet


!! -----------------------------------------------------------------------------
!! Child: Q
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionSumQHas(handle) &
      bind(C, name='CrossSectionSumQHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumQHas
end function CrossSectionSumQHas

!! Get, const
function CrossSectionSumQGetConst(handle) &
      bind(C, name='CrossSectionSumQGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumQGetConst
end function CrossSectionSumQGetConst

!! Get
function CrossSectionSumQGet(handle) &
      bind(C, name='CrossSectionSumQGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumQGet
end function CrossSectionSumQGet

!! Set
subroutine CrossSectionSumQSet(handle, fieldHandle) &
      bind(C, name='CrossSectionSumQSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionSumQSet


!! -----------------------------------------------------------------------------
!! Child: crossSection
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionSumCrossSectionHas(handle) &
      bind(C, name='CrossSectionSumCrossSectionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionSumCrossSectionHas
end function CrossSectionSumCrossSectionHas

!! Get, const
function CrossSectionSumCrossSectionGetConst(handle) &
      bind(C, name='CrossSectionSumCrossSectionGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumCrossSectionGetConst
end function CrossSectionSumCrossSectionGetConst

!! Get
function CrossSectionSumCrossSectionGet(handle) &
      bind(C, name='CrossSectionSumCrossSectionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionSumCrossSectionGet
end function CrossSectionSumCrossSectionGet

!! Set
subroutine CrossSectionSumCrossSectionSet(handle, fieldHandle) &
      bind(C, name='CrossSectionSumCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionSumCrossSectionSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCrossSectionSum
