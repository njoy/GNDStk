
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAuthors
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AuthorsDefaultConst() &
      bind(C, name='AuthorsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AuthorsDefaultConst

!! Create, default
function AuthorsDefault() &
      bind(C, name='AuthorsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AuthorsDefault

!! Create, general, const
function AuthorsCreateConst( &
   author, authorSize &
) &
      bind(C, name='AuthorsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: authorSize
   type(c_ptr) :: author(authorSize)
   type(c_ptr) :: handle
end function AuthorsCreateConst

!! Create, general
function AuthorsCreate( &
   author, authorSize &
) &
      bind(C, name='AuthorsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: authorSize
   type(c_ptr) :: author(authorSize)
   type(c_ptr) :: handle
end function AuthorsCreate

!! Assign
subroutine AuthorsAssign(handleLHS, handleRHS) &
      bind(C, name='AuthorsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AuthorsAssign

!! Delete
subroutine AuthorsDelete(handle) &
      bind(C, name='AuthorsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AuthorsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AuthorsRead(handle, filename, filenameSize) &
      bind(C, name='AuthorsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AuthorsRead

!! Write to file
function AuthorsWrite(handle, filename, filenameSize) &
      bind(C, name='AuthorsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AuthorsWrite

!! Print to standard output, in our prettyprinting format
function AuthorsPrint(handle) &
      bind(C, name='AuthorsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AuthorsPrint

!! Print to standard output, as XML
function AuthorsPrintXML(handle) &
      bind(C, name='AuthorsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AuthorsPrintXML

!! Print to standard output, as JSON
function AuthorsPrintJSON(handle) &
      bind(C, name='AuthorsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AuthorsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: author
!! -----------------------------------------------------------------------------

!! Has
function AuthorsAuthorHas(handle) &
      bind(C, name='AuthorsAuthorHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AuthorsAuthorHas

!! Clear
subroutine AuthorsAuthorClear(handle) &
      bind(C, name='AuthorsAuthorClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AuthorsAuthorClear

!! Size
function AuthorsAuthorSize(handle) &
      bind(C, name='AuthorsAuthorSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function AuthorsAuthorSize

!! Add
subroutine AuthorsAuthorAdd(handle, fieldHandle) &
      bind(C, name='AuthorsAuthorAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AuthorsAuthorAdd

!! Get, by index \in [0,size), const
function AuthorsAuthorGetConst(handle, index) &
      bind(C, name='AuthorsAuthorGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AuthorsAuthorGetConst

!! Get, by index \in [0,size)
function AuthorsAuthorGet(handle, index) &
      bind(C, name='AuthorsAuthorGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AuthorsAuthorGet

!! Set, by index \in [0,size)
subroutine AuthorsAuthorSet(handle, index, fieldHandle) &
      bind(C, name='AuthorsAuthorSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AuthorsAuthorSet

!! ------------------------
!! Re: metadatum name
!! ------------------------

!! Has, by name
function AuthorsAuthorHasByName(handle, meta, metaSize) &
      bind(C, name='AuthorsAuthorHasByName') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AuthorsAuthorHasByName

!! Get, by name, const
function AuthorsAuthorGetByNameConst(handle, meta, metaSize) &
      bind(C, name='AuthorsAuthorGetByNameConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AuthorsAuthorGetByNameConst

!! Get, by name
function AuthorsAuthorGetByName(handle, meta, metaSize) &
      bind(C, name='AuthorsAuthorGetByName') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AuthorsAuthorGetByName

!! Set, by name
subroutine AuthorsAuthorSetByName(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AuthorsAuthorSetByName')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AuthorsAuthorSetByName


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAuthors
