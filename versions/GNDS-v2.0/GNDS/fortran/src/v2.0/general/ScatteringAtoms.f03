
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalScatteringAtoms
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ScatteringAtomsDefaultConst() &
      bind(C, name='ScatteringAtomsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ScatteringAtomsDefaultConst

!! Create, default
function ScatteringAtomsDefault() &
      bind(C, name='ScatteringAtomsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ScatteringAtomsDefault

!! Create, general, const
function ScatteringAtomsCreateConst( &
   scatteringAtom, scatteringAtomSize &
) &
      bind(C, name='ScatteringAtomsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: scatteringAtomSize
   type(c_ptr) :: scatteringAtom(scatteringAtomSize)
   type(c_ptr) :: handle
end function ScatteringAtomsCreateConst

!! Create, general
function ScatteringAtomsCreate( &
   scatteringAtom, scatteringAtomSize &
) &
      bind(C, name='ScatteringAtomsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: scatteringAtomSize
   type(c_ptr) :: scatteringAtom(scatteringAtomSize)
   type(c_ptr) :: handle
end function ScatteringAtomsCreate

!! Assign
subroutine ScatteringAtomsAssign(handleLHS, handleRHS) &
      bind(C, name='ScatteringAtomsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ScatteringAtomsAssign

!! Delete
subroutine ScatteringAtomsDelete(handle) &
      bind(C, name='ScatteringAtomsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringAtomsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ScatteringAtomsRead(handle, filename, filenameSize) &
      bind(C, name='ScatteringAtomsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ScatteringAtomsRead

!! Write to file
function ScatteringAtomsWrite(handle, filename, filenameSize) &
      bind(C, name='ScatteringAtomsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ScatteringAtomsWrite

!! Print to standard output, in our prettyprinting format
function ScatteringAtomsPrint(handle) &
      bind(C, name='ScatteringAtomsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringAtomsPrint

!! Print to standard output, as XML
function ScatteringAtomsPrintXML(handle) &
      bind(C, name='ScatteringAtomsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringAtomsPrintXML

!! Print to standard output, as JSON
function ScatteringAtomsPrintJSON(handle) &
      bind(C, name='ScatteringAtomsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringAtomsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: scatteringAtom
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomsScatteringAtomHas(handle) &
      bind(C, name='ScatteringAtomsScatteringAtomHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringAtomsScatteringAtomHas

!! Clear
subroutine ScatteringAtomsScatteringAtomClear(handle) &
      bind(C, name='ScatteringAtomsScatteringAtomClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringAtomsScatteringAtomClear

!! Size
function ScatteringAtomsScatteringAtomSize(handle) &
      bind(C, name='ScatteringAtomsScatteringAtomSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function ScatteringAtomsScatteringAtomSize

!! Add
subroutine ScatteringAtomsScatteringAtomAdd(handle, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomAdd

!! Get, by index \in [0,size), const
function ScatteringAtomsScatteringAtomGetConst(handle, index) &
      bind(C, name='ScatteringAtomsScatteringAtomGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetConst

!! Get, by index \in [0,size)
function ScatteringAtomsScatteringAtomGet(handle, index) &
      bind(C, name='ScatteringAtomsScatteringAtomGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGet

!! Set, by index \in [0,size)
subroutine ScatteringAtomsScatteringAtomSet(handle, index, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSet

!! ------------------------
!! Re: metadatum pid
!! ------------------------

!! Has, by pid
function ScatteringAtomsScatteringAtomHasByPid(handle, meta, metaSize) &
      bind(C, name='ScatteringAtomsScatteringAtomHasByPid') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ScatteringAtomsScatteringAtomHasByPid

!! Get, by pid, const
function ScatteringAtomsScatteringAtomGetByPidConst(handle, meta, metaSize) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPidConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetByPidConst

!! Get, by pid
function ScatteringAtomsScatteringAtomGetByPid(handle, meta, metaSize) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPid') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetByPid

!! Set, by pid
subroutine ScatteringAtomsScatteringAtomSetByPid(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSetByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSetByPid

!! ------------------------
!! Re: metadatum numberPerMolecule
!! ------------------------

!! Has, by numberPerMolecule
function ScatteringAtomsScatteringAtomHasByNumberPerMolecule(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomHasByNumberPerMolecule') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function ScatteringAtomsScatteringAtomHasByNumberPerMolecule

!! Get, by numberPerMolecule, const
function ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst

!! Get, by numberPerMolecule
function ScatteringAtomsScatteringAtomGetByNumberPerMolecule(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByNumberPerMolecule') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetByNumberPerMolecule

!! Set, by numberPerMolecule
subroutine ScatteringAtomsScatteringAtomSetByNumberPerMolecule(handle, meta, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSetByNumberPerMolecule')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSetByNumberPerMolecule

!! ------------------------
!! Re: metadatum primaryScatterer
!! ------------------------

!! Has, by primaryScatterer
function ScatteringAtomsScatteringAtomHasByPrimaryScatterer(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomHasByPrimaryScatterer') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType, value, intent(in) :: meta
   integer(c_int) :: has
end function ScatteringAtomsScatteringAtomHasByPrimaryScatterer

!! Get, by primaryScatterer, const
function ScatteringAtomsScatteringAtomGetByPrimaryScattererConst(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPrimaryScattererConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType, value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetByPrimaryScattererConst

!! Get, by primaryScatterer
function ScatteringAtomsScatteringAtomGetByPrimaryScatterer(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPrimaryScatterer') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   unknownType, value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ScatteringAtomsScatteringAtomGetByPrimaryScatterer

!! Set, by primaryScatterer
subroutine ScatteringAtomsScatteringAtomSetByPrimaryScatterer(handle, meta, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSetByPrimaryScatterer')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType, value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSetByPrimaryScatterer


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalScatteringAtoms
