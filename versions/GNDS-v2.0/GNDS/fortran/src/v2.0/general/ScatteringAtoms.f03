
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalScatteringAtoms
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ScatteringAtomsDefaultConst() &
      bind(C, name='ScatteringAtomsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ScatteringAtomsDefaultConst
end function ScatteringAtomsDefaultConst

!! Create, default, non-const
function ScatteringAtomsDefault() &
      bind(C, name='ScatteringAtomsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ScatteringAtomsDefault
end function ScatteringAtomsDefault

!! Create, general, const
function ScatteringAtomsCreateConst( &
   scatteringAtom, scatteringAtomSize &
) &
      bind(C, name='ScatteringAtomsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: scatteringAtomSize
   type(c_ptr), intent(in) :: scatteringAtom(scatteringAtomSize)
   type(c_ptr) :: ScatteringAtomsCreateConst
end function ScatteringAtomsCreateConst

!! Create, general, non-const
function ScatteringAtomsCreate( &
   scatteringAtom, scatteringAtomSize &
) &
      bind(C, name='ScatteringAtomsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: scatteringAtomSize
   type(c_ptr), intent(in) :: scatteringAtom(scatteringAtomSize)
   type(c_ptr) :: ScatteringAtomsCreate
end function ScatteringAtomsCreate

!! Assign
subroutine ScatteringAtomsAssign(handleLHS, handleRHS) &
      bind(C, name='ScatteringAtomsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ScatteringAtomsAssign

!! Delete
subroutine ScatteringAtomsDelete(handle) &
      bind(C, name='ScatteringAtomsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringAtomsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ScatteringAtomsRead(handle, filename, filenameSize) &
      bind(C, name='ScatteringAtomsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ScatteringAtomsRead
end function ScatteringAtomsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ScatteringAtomsWrite(handle, filename, filenameSize) &
      bind(C, name='ScatteringAtomsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ScatteringAtomsWrite
end function ScatteringAtomsWrite

!! Print to standard output, in our prettyprinting format
function ScatteringAtomsPrint(handle) &
      bind(C, name='ScatteringAtomsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringAtomsPrint
end function ScatteringAtomsPrint

!! Print to standard output, as XML
function ScatteringAtomsPrintXML(handle) &
      bind(C, name='ScatteringAtomsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringAtomsPrintXML
end function ScatteringAtomsPrintXML

!! Print to standard output, as JSON
function ScatteringAtomsPrintJSON(handle) &
      bind(C, name='ScatteringAtomsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringAtomsPrintJSON
end function ScatteringAtomsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: scatteringAtom
!! -----------------------------------------------------------------------------

!! Has
function ScatteringAtomsScatteringAtomHas(handle) &
      bind(C, name='ScatteringAtomsScatteringAtomHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ScatteringAtomsScatteringAtomHas
end function ScatteringAtomsScatteringAtomHas

!! Clear
subroutine ScatteringAtomsScatteringAtomClear(handle) &
      bind(C, name='ScatteringAtomsScatteringAtomClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringAtomsScatteringAtomClear

!! Size
function ScatteringAtomsScatteringAtomSize(handle) &
      bind(C, name='ScatteringAtomsScatteringAtomSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: ScatteringAtomsScatteringAtomSize
end function ScatteringAtomsScatteringAtomSize

!! Add
subroutine ScatteringAtomsScatteringAtomAdd(handle, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomAdd

!! Get, by index \in [0,size), const
function ScatteringAtomsScatteringAtomGetConst(handle, index) &
      bind(C, name='ScatteringAtomsScatteringAtomGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetConst
end function ScatteringAtomsScatteringAtomGetConst

!! Get, by index \in [0,size), non-const
function ScatteringAtomsScatteringAtomGet(handle, index) &
      bind(C, name='ScatteringAtomsScatteringAtomGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ScatteringAtomsScatteringAtomGet
end function ScatteringAtomsScatteringAtomGet

!! Set, by index \in [0,size)
subroutine ScatteringAtomsScatteringAtomSet(handle, index, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSet

!! ------------------------
!! Re: metadatum pid
!! ------------------------

!! Has, by pid
function ScatteringAtomsScatteringAtomHasByPid(handle, meta, metaSize) &
      bind(C, name='ScatteringAtomsScatteringAtomHasByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: ScatteringAtomsScatteringAtomHasByPid
end function ScatteringAtomsScatteringAtomHasByPid

!! Get, by pid, const
function ScatteringAtomsScatteringAtomGetByPidConst(handle, meta, metaSize) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPidConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetByPidConst
end function ScatteringAtomsScatteringAtomGetByPidConst

!! Get, by pid, non-const
function ScatteringAtomsScatteringAtomGetByPid(handle, meta, metaSize) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetByPid
end function ScatteringAtomsScatteringAtomGetByPid

!! Set, by pid
subroutine ScatteringAtomsScatteringAtomSetByPid(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSetByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSetByPid

!! ------------------------
!! Re: metadatum numberPerMolecule
!! ------------------------

!! Has, by numberPerMolecule
function ScatteringAtomsScatteringAtomHasByNumberPerMolecule(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomHasByNumberPerMolecule')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   integer(c_int) :: ScatteringAtomsScatteringAtomHasByNumberPerMolecule
end function ScatteringAtomsScatteringAtomHasByNumberPerMolecule

!! Get, by numberPerMolecule, const
function ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst
end function ScatteringAtomsScatteringAtomGetByNumberPerMoleculeConst

!! Get, by numberPerMolecule, non-const
function ScatteringAtomsScatteringAtomGetByNumberPerMolecule(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByNumberPerMolecule')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetByNumberPerMolecule
end function ScatteringAtomsScatteringAtomGetByNumberPerMolecule

!! Set, by numberPerMolecule
subroutine ScatteringAtomsScatteringAtomSetByNumberPerMolecule(handle, meta, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSetByNumberPerMolecule')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSetByNumberPerMolecule

!! ------------------------
!! Re: metadatum primaryScatterer
!! ------------------------

!! Has, by primaryScatterer
function ScatteringAtomsScatteringAtomHasByPrimaryScatterer(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomHasByPrimaryScatterer')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), intent(in), value :: meta
   integer(c_int) :: ScatteringAtomsScatteringAtomHasByPrimaryScatterer
end function ScatteringAtomsScatteringAtomHasByPrimaryScatterer

!! Get, by primaryScatterer, const
function ScatteringAtomsScatteringAtomGetByPrimaryScattererConst(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPrimaryScattererConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), intent(in), value :: meta
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetByPrimaryScattererConst
end function ScatteringAtomsScatteringAtomGetByPrimaryScattererConst

!! Get, by primaryScatterer, non-const
function ScatteringAtomsScatteringAtomGetByPrimaryScatterer(handle, meta) &
      bind(C, name='ScatteringAtomsScatteringAtomGetByPrimaryScatterer')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   logical(c_bool), intent(in), value :: meta
   type(c_ptr) :: ScatteringAtomsScatteringAtomGetByPrimaryScatterer
end function ScatteringAtomsScatteringAtomGetByPrimaryScatterer

!! Set, by primaryScatterer
subroutine ScatteringAtomsScatteringAtomSetByPrimaryScatterer(handle, meta, fieldHandle) &
      bind(C, name='ScatteringAtomsScatteringAtomSetByPrimaryScatterer')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   logical(c_bool), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ScatteringAtomsScatteringAtomSetByPrimaryScatterer


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalScatteringAtoms
