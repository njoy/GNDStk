
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalColumn
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ColumnDefaultConst() &
      bind(C, name='ColumnDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ColumnDefaultConst

!! Create, default
function ColumnDefault() &
      bind(C, name='ColumnDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ColumnDefault

!! Create, general, const
function ColumnCreateConst( &
   index, &
   name, &
   unit, &
   nameSize, &
   unitSize &
) &
      bind(C, name='ColumnCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: nameSize
   character(c_char), intent(in) :: name(nameSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function ColumnCreateConst

!! Create, general
function ColumnCreate( &
   index, &
   name, &
   unit, &
   nameSize, &
   unitSize &
) &
      bind(C, name='ColumnCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: nameSize
   character(c_char), intent(in) :: name(nameSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function ColumnCreate

!! Assign
subroutine ColumnAssign(handleLHS, handleRHS) &
      bind(C, name='ColumnAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ColumnAssign

!! Delete
subroutine ColumnDelete(handle) &
      bind(C, name='ColumnDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ColumnDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ColumnRead(handle, filename, filenameSize) &
      bind(C, name='ColumnRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ColumnRead

!! Write to file
function ColumnWrite(handle, filename, filenameSize) &
      bind(C, name='ColumnWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ColumnWrite

!! Print to standard output, in our prettyprinting format
function ColumnPrint(handle) &
      bind(C, name='ColumnPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnPrint

!! Print to standard output, as XML
function ColumnPrintXML(handle) &
      bind(C, name='ColumnPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnPrintXML

!! Print to standard output, as JSON
function ColumnPrintJSON(handle) &
      bind(C, name='ColumnPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function ColumnIndexHas(handle) &
      bind(C, name='ColumnIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnIndexHas

!! Get
function ColumnIndexGet(handle) &
      bind(C, name='ColumnIndexGet') &
      result(index)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: index
end function ColumnIndexGet

!! Set
subroutine ColumnIndexSet(handle, index, indexSize) &
      bind(C, name='ColumnIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine ColumnIndexSet


!! -----------------------------------------------------------------------------
!! Metadatum: name
!! -----------------------------------------------------------------------------

!! Has
function ColumnNameHas(handle) &
      bind(C, name='ColumnNameHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnNameHas

!! Get
function ColumnNameGet(handle) &
      bind(C, name='ColumnNameGet') &
      result(name)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: name
end function ColumnNameGet

!! Set
subroutine ColumnNameSet(handle, name, nameSize) &
      bind(C, name='ColumnNameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: nameSize
   character(c_char), intent(in) :: name(nameSize)
end subroutine ColumnNameSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function ColumnUnitHas(handle) &
      bind(C, name='ColumnUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnUnitHas

!! Get
function ColumnUnitGet(handle) &
      bind(C, name='ColumnUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function ColumnUnitGet

!! Set
subroutine ColumnUnitSet(handle, unit, unitSize) &
      bind(C, name='ColumnUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine ColumnUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalColumn
