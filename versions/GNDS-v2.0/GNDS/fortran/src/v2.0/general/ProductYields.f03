
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalProductYields
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ProductYieldsDefaultConst() &
      bind(C, name='ProductYieldsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ProductYieldsDefaultConst

!! Create, default
function ProductYieldsDefault() &
      bind(C, name='ProductYieldsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ProductYieldsDefault

!! Create, general, const
function ProductYieldsCreateConst( &
   productYield, productYieldSize &
) &
      bind(C, name='ProductYieldsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: productYieldSize
   type(c_ptr) :: productYield(productYieldSize)
   type(c_ptr) :: handle
end function ProductYieldsCreateConst

!! Create, general
function ProductYieldsCreate( &
   productYield, productYieldSize &
) &
      bind(C, name='ProductYieldsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: productYieldSize
   type(c_ptr) :: productYield(productYieldSize)
   type(c_ptr) :: handle
end function ProductYieldsCreate

!! Assign
subroutine ProductYieldsAssign(handleLHS, handleRHS) &
      bind(C, name='ProductYieldsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ProductYieldsAssign

!! Delete
subroutine ProductYieldsDelete(handle) &
      bind(C, name='ProductYieldsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProductYieldsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ProductYieldsRead(handle, filename, filenameSize) &
      bind(C, name='ProductYieldsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ProductYieldsRead

!! Write to file
function ProductYieldsWrite(handle, filename, filenameSize) &
      bind(C, name='ProductYieldsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ProductYieldsWrite

!! Print to standard output, in our prettyprinting format
function ProductYieldsPrint(handle) &
      bind(C, name='ProductYieldsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductYieldsPrint

!! Print to standard output, as XML
function ProductYieldsPrintXML(handle) &
      bind(C, name='ProductYieldsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductYieldsPrintXML

!! Print to standard output, as JSON
function ProductYieldsPrintJSON(handle) &
      bind(C, name='ProductYieldsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductYieldsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: productYield
!! -----------------------------------------------------------------------------

!! Has
function ProductYieldsProductYieldHas(handle) &
      bind(C, name='ProductYieldsProductYieldHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductYieldsProductYieldHas

!! Clear
subroutine ProductYieldsProductYieldClear(handle) &
      bind(C, name='ProductYieldsProductYieldClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProductYieldsProductYieldClear

!! Size
function ProductYieldsProductYieldSize(handle) &
      bind(C, name='ProductYieldsProductYieldSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function ProductYieldsProductYieldSize

!! Add
subroutine ProductYieldsProductYieldAdd(handle, fieldHandle) &
      bind(C, name='ProductYieldsProductYieldAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductYieldsProductYieldAdd

!! Get, by index \in [0,size), const
function ProductYieldsProductYieldGetConst(handle, index) &
      bind(C, name='ProductYieldsProductYieldGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ProductYieldsProductYieldGetConst

!! Get, by index \in [0,size)
function ProductYieldsProductYieldGet(handle, index) &
      bind(C, name='ProductYieldsProductYieldGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ProductYieldsProductYieldGet

!! Set, by index \in [0,size)
subroutine ProductYieldsProductYieldSet(handle, index, fieldHandle) &
      bind(C, name='ProductYieldsProductYieldSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductYieldsProductYieldSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function ProductYieldsProductYieldHasByLabel(handle, meta, metaSize) &
      bind(C, name='ProductYieldsProductYieldHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ProductYieldsProductYieldHasByLabel

!! Get, by label, const
function ProductYieldsProductYieldGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='ProductYieldsProductYieldGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ProductYieldsProductYieldGetByLabelConst

!! Get, by label
function ProductYieldsProductYieldGetByLabel(handle, meta, metaSize) &
      bind(C, name='ProductYieldsProductYieldGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ProductYieldsProductYieldGetByLabel

!! Set, by label
subroutine ProductYieldsProductYieldSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ProductYieldsProductYieldSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductYieldsProductYieldSetByLabel


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalProductYields
