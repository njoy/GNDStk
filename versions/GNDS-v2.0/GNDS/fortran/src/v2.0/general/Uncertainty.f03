
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalUncertainty
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function UncertaintyDefaultConst() &
      bind(C, name='UncertaintyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function UncertaintyDefaultConst

!! Create, default
function UncertaintyDefault() &
      bind(C, name='UncertaintyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function UncertaintyDefault

!! Create, general, const
function UncertaintyCreateConst( &
   covariance, &
   standard, &
   listOfCovariances, &
   polynomial1d &
) &
      bind(C, name='UncertaintyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: covariance
   type(c_ptr), value :: standard
   type(c_ptr), value :: listOfCovariances
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function UncertaintyCreateConst

!! Create, general
function UncertaintyCreate( &
   covariance, &
   standard, &
   listOfCovariances, &
   polynomial1d &
) &
      bind(C, name='UncertaintyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: covariance
   type(c_ptr), value :: standard
   type(c_ptr), value :: listOfCovariances
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function UncertaintyCreate

!! Assign
subroutine UncertaintyAssign(handleLHS, handleRHS) &
      bind(C, name='UncertaintyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine UncertaintyAssign

!! Delete
subroutine UncertaintyDelete(handle) &
      bind(C, name='UncertaintyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UncertaintyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function UncertaintyRead(handle, filename, filenameSize) &
      bind(C, name='UncertaintyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function UncertaintyRead

!! Write to file
function UncertaintyWrite(handle, filename, filenameSize) &
      bind(C, name='UncertaintyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function UncertaintyWrite

!! Print to standard output, in our prettyprinting format
function UncertaintyPrint(handle) &
      bind(C, name='UncertaintyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UncertaintyPrint

!! Print to standard output, as XML
function UncertaintyPrintXML(handle) &
      bind(C, name='UncertaintyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UncertaintyPrintXML

!! Print to standard output, as JSON
function UncertaintyPrintJSON(handle) &
      bind(C, name='UncertaintyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function UncertaintyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: covariance
!! -----------------------------------------------------------------------------

!! Has
function UncertaintyCovarianceHas(handle) &
      bind(C, name='UncertaintyCovarianceHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UncertaintyCovarianceHas

!! Get, const
function UncertaintyCovarianceGetConst(handle) &
      bind(C, name='UncertaintyCovarianceGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyCovarianceGetConst

!! Get
function UncertaintyCovarianceGet(handle) &
      bind(C, name='UncertaintyCovarianceGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyCovarianceGet

!! Set
subroutine UncertaintyCovarianceSet(handle, fieldHandle) &
      bind(C, name='UncertaintyCovarianceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine UncertaintyCovarianceSet


!! -----------------------------------------------------------------------------
!! Child: standard
!! -----------------------------------------------------------------------------

!! Has
function UncertaintyStandardHas(handle) &
      bind(C, name='UncertaintyStandardHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UncertaintyStandardHas

!! Get, const
function UncertaintyStandardGetConst(handle) &
      bind(C, name='UncertaintyStandardGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyStandardGetConst

!! Get
function UncertaintyStandardGet(handle) &
      bind(C, name='UncertaintyStandardGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyStandardGet

!! Set
subroutine UncertaintyStandardSet(handle, fieldHandle) &
      bind(C, name='UncertaintyStandardSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine UncertaintyStandardSet


!! -----------------------------------------------------------------------------
!! Child: listOfCovariances
!! -----------------------------------------------------------------------------

!! Has
function UncertaintyListOfCovariancesHas(handle) &
      bind(C, name='UncertaintyListOfCovariancesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UncertaintyListOfCovariancesHas

!! Get, const
function UncertaintyListOfCovariancesGetConst(handle) &
      bind(C, name='UncertaintyListOfCovariancesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyListOfCovariancesGetConst

!! Get
function UncertaintyListOfCovariancesGet(handle) &
      bind(C, name='UncertaintyListOfCovariancesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyListOfCovariancesGet

!! Set
subroutine UncertaintyListOfCovariancesSet(handle, fieldHandle) &
      bind(C, name='UncertaintyListOfCovariancesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine UncertaintyListOfCovariancesSet


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function UncertaintyPolynomial1dHas(handle) &
      bind(C, name='UncertaintyPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function UncertaintyPolynomial1dHas

!! Get, const
function UncertaintyPolynomial1dGetConst(handle) &
      bind(C, name='UncertaintyPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyPolynomial1dGetConst

!! Get
function UncertaintyPolynomial1dGet(handle) &
      bind(C, name='UncertaintyPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function UncertaintyPolynomial1dGet

!! Set
subroutine UncertaintyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='UncertaintyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine UncertaintyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalUncertainty
