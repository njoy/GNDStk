
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalUnresolvedRegion
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function UnresolvedRegionDefaultConst() &
      bind(C, name='UnresolvedRegionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: UnresolvedRegionDefaultConst
end function UnresolvedRegionDefaultConst

!! Create, default
function UnresolvedRegionDefault() &
      bind(C, name='UnresolvedRegionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: UnresolvedRegionDefault
end function UnresolvedRegionDefault

!! Create, general, const
function UnresolvedRegionCreateConst( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='UnresolvedRegionCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: UnresolvedRegionCreateConst
end function UnresolvedRegionCreateConst

!! Create, general
function UnresolvedRegionCreate( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='UnresolvedRegionCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: UnresolvedRegionCreate
end function UnresolvedRegionCreate

!! Assign
subroutine UnresolvedRegionAssign(handleLHS, handleRHS) &
      bind(C, name='UnresolvedRegionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine UnresolvedRegionAssign

!! Delete
subroutine UnresolvedRegionDelete(handle) &
      bind(C, name='UnresolvedRegionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UnresolvedRegionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function UnresolvedRegionRead(handle, filename, filenameSize) &
      bind(C, name='UnresolvedRegionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: UnresolvedRegionRead
end function UnresolvedRegionRead

!! Write to file
function UnresolvedRegionWrite(handle, filename, filenameSize) &
      bind(C, name='UnresolvedRegionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: UnresolvedRegionWrite
end function UnresolvedRegionWrite

!! Print to standard output, in our prettyprinting format
function UnresolvedRegionPrint(handle) &
      bind(C, name='UnresolvedRegionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UnresolvedRegionPrint
end function UnresolvedRegionPrint

!! Print to standard output, as XML
function UnresolvedRegionPrintXML(handle) &
      bind(C, name='UnresolvedRegionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UnresolvedRegionPrintXML
end function UnresolvedRegionPrintXML

!! Print to standard output, as JSON
function UnresolvedRegionPrintJSON(handle) &
      bind(C, name='UnresolvedRegionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UnresolvedRegionPrintJSON
end function UnresolvedRegionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function UnresolvedRegionXYs1dHas(handle) &
      bind(C, name='UnresolvedRegionXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UnresolvedRegionXYs1dHas
end function UnresolvedRegionXYs1dHas

!! Get, const
function UnresolvedRegionXYs1dGetConst(handle) &
      bind(C, name='UnresolvedRegionXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UnresolvedRegionXYs1dGetConst
end function UnresolvedRegionXYs1dGetConst

!! Get
function UnresolvedRegionXYs1dGet(handle) &
      bind(C, name='UnresolvedRegionXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: UnresolvedRegionXYs1dGet
end function UnresolvedRegionXYs1dGet

!! Set
subroutine UnresolvedRegionXYs1dSet(handle, fieldHandle) &
      bind(C, name='UnresolvedRegionXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine UnresolvedRegionXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function UnresolvedRegionRegions1dHas(handle) &
      bind(C, name='UnresolvedRegionRegions1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UnresolvedRegionRegions1dHas
end function UnresolvedRegionRegions1dHas

!! Get, const
function UnresolvedRegionRegions1dGetConst(handle) &
      bind(C, name='UnresolvedRegionRegions1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UnresolvedRegionRegions1dGetConst
end function UnresolvedRegionRegions1dGetConst

!! Get
function UnresolvedRegionRegions1dGet(handle) &
      bind(C, name='UnresolvedRegionRegions1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: UnresolvedRegionRegions1dGet
end function UnresolvedRegionRegions1dGet

!! Set
subroutine UnresolvedRegionRegions1dSet(handle, fieldHandle) &
      bind(C, name='UnresolvedRegionRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine UnresolvedRegionRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalUnresolvedRegion
