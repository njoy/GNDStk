
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNuclearAmplitudeExpansion
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NuclearAmplitudeExpansionDefaultConst() &
      bind(C, name='NuclearAmplitudeExpansionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NuclearAmplitudeExpansionDefaultConst

!! Create, default
function NuclearAmplitudeExpansionDefault() &
      bind(C, name='NuclearAmplitudeExpansionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NuclearAmplitudeExpansionDefault

!! Create, general, const
function NuclearAmplitudeExpansionCreateConst( &
   nuclearTerm, &
   realInterferenceTerm, &
   imaginaryInterferenceTerm &
) &
      bind(C, name='NuclearAmplitudeExpansionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: nuclearTerm
   type(c_ptr), value :: realInterferenceTerm
   type(c_ptr), value :: imaginaryInterferenceTerm
   type(c_ptr) :: handle
end function NuclearAmplitudeExpansionCreateConst

!! Create, general
function NuclearAmplitudeExpansionCreate( &
   nuclearTerm, &
   realInterferenceTerm, &
   imaginaryInterferenceTerm &
) &
      bind(C, name='NuclearAmplitudeExpansionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: nuclearTerm
   type(c_ptr), value :: realInterferenceTerm
   type(c_ptr), value :: imaginaryInterferenceTerm
   type(c_ptr) :: handle
end function NuclearAmplitudeExpansionCreate

!! Assign
subroutine NuclearAmplitudeExpansionAssign(handleLHS, handleRHS) &
      bind(C, name='NuclearAmplitudeExpansionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NuclearAmplitudeExpansionAssign

!! Delete
subroutine NuclearAmplitudeExpansionDelete(handle) &
      bind(C, name='NuclearAmplitudeExpansionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclearAmplitudeExpansionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NuclearAmplitudeExpansionRead(handle, filename, filenameSize) &
      bind(C, name='NuclearAmplitudeExpansionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NuclearAmplitudeExpansionRead

!! Write to file
function NuclearAmplitudeExpansionWrite(handle, filename, filenameSize) &
      bind(C, name='NuclearAmplitudeExpansionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NuclearAmplitudeExpansionWrite

!! Print to standard output, in our prettyprinting format
function NuclearAmplitudeExpansionPrint(handle) &
      bind(C, name='NuclearAmplitudeExpansionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclearAmplitudeExpansionPrint

!! Print to standard output, as XML
function NuclearAmplitudeExpansionPrintXML(handle) &
      bind(C, name='NuclearAmplitudeExpansionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclearAmplitudeExpansionPrintXML

!! Print to standard output, as JSON
function NuclearAmplitudeExpansionPrintJSON(handle) &
      bind(C, name='NuclearAmplitudeExpansionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NuclearAmplitudeExpansionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: nuclearTerm
!! -----------------------------------------------------------------------------

!! Has
function NuclearAmplitudeExpansionNuclearTermHas(handle) &
      bind(C, name='NuclearAmplitudeExpansionNuclearTermHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclearAmplitudeExpansionNuclearTermHas

!! Get, const
function NuclearAmplitudeExpansionNuclearTermGetConst(handle) &
      bind(C, name='NuclearAmplitudeExpansionNuclearTermGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearAmplitudeExpansionNuclearTermGetConst

!! Get
function NuclearAmplitudeExpansionNuclearTermGet(handle) &
      bind(C, name='NuclearAmplitudeExpansionNuclearTermGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearAmplitudeExpansionNuclearTermGet

!! Set
subroutine NuclearAmplitudeExpansionNuclearTermSet(handle, fieldHandle) &
      bind(C, name='NuclearAmplitudeExpansionNuclearTermSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearAmplitudeExpansionNuclearTermSet


!! -----------------------------------------------------------------------------
!! Child: realInterferenceTerm
!! -----------------------------------------------------------------------------

!! Has
function NuclearAmplitudeExpansionRealInterferenceTermHas(handle) &
      bind(C, name='NuclearAmplitudeExpansionRealInterferenceTermHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclearAmplitudeExpansionRealInterferenceTermHas

!! Get, const
function NuclearAmplitudeExpansionRealInterferenceTermGetConst(handle) &
      bind(C, name='NuclearAmplitudeExpansionRealInterferenceTermGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearAmplitudeExpansionRealInterferenceTermGetConst

!! Get
function NuclearAmplitudeExpansionRealInterferenceTermGet(handle) &
      bind(C, name='NuclearAmplitudeExpansionRealInterferenceTermGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearAmplitudeExpansionRealInterferenceTermGet

!! Set
subroutine NuclearAmplitudeExpansionRealInterferenceTermSet(handle, fieldHandle) &
      bind(C, name='NuclearAmplitudeExpansionRealInterferenceTermSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearAmplitudeExpansionRealInterferenceTermSet


!! -----------------------------------------------------------------------------
!! Child: imaginaryInterferenceTerm
!! -----------------------------------------------------------------------------

!! Has
function NuclearAmplitudeExpansionImaginaryInterferenceTermHas(handle) &
      bind(C, name='NuclearAmplitudeExpansionImaginaryInterferenceTermHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NuclearAmplitudeExpansionImaginaryInterferenceTermHas

!! Get, const
function NuclearAmplitudeExpansionImaginaryInterferenceTermGetConst(handle) &
      bind(C, name='NuclearAmplitudeExpansionImaginaryInterferenceTermGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearAmplitudeExpansionImaginaryInterferenceTermGetConst

!! Get
function NuclearAmplitudeExpansionImaginaryInterferenceTermGet(handle) &
      bind(C, name='NuclearAmplitudeExpansionImaginaryInterferenceTermGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NuclearAmplitudeExpansionImaginaryInterferenceTermGet

!! Set
subroutine NuclearAmplitudeExpansionImaginaryInterferenceTermSet(handle, fieldHandle) &
      bind(C, name='NuclearAmplitudeExpansionImaginaryInterferenceTermSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearAmplitudeExpansionImaginaryInterferenceTermSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNuclearAmplitudeExpansion
