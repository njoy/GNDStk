
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSpectrum
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SpectrumDefaultConst() &
      bind(C, name='SpectrumDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: SpectrumDefaultConst
end function SpectrumDefaultConst

!! Create, default
function SpectrumDefault() &
      bind(C, name='SpectrumDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: SpectrumDefault
end function SpectrumDefault

!! Create, general, const
function SpectrumCreateConst( &
   label, &
   pid, &
   discrete, discreteSize, &
   continuum, &
   labelSize, &
   pidSize &
) &
      bind(C, name='SpectrumCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_size_t), intent(in), value :: discreteSize
   type(c_ptr), intent(in) :: discrete(discreteSize)
   type(c_ptr), intent(in), value :: continuum
   type(c_ptr) :: SpectrumCreateConst
end function SpectrumCreateConst

!! Create, general
function SpectrumCreate( &
   label, &
   pid, &
   discrete, discreteSize, &
   continuum, &
   labelSize, &
   pidSize &
) &
      bind(C, name='SpectrumCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_size_t), intent(in), value :: discreteSize
   type(c_ptr), intent(in) :: discrete(discreteSize)
   type(c_ptr), intent(in), value :: continuum
   type(c_ptr) :: SpectrumCreate
end function SpectrumCreate

!! Assign
subroutine SpectrumAssign(handleLHS, handleRHS) &
      bind(C, name='SpectrumAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine SpectrumAssign

!! Delete
subroutine SpectrumDelete(handle) &
      bind(C, name='SpectrumDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpectrumDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SpectrumRead(handle, filename, filenameSize) &
      bind(C, name='SpectrumRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: SpectrumRead
end function SpectrumRead

!! Write to file
function SpectrumWrite(handle, filename, filenameSize) &
      bind(C, name='SpectrumWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: SpectrumWrite
end function SpectrumWrite

!! Print to standard output, in our prettyprinting format
function SpectrumPrint(handle) &
      bind(C, name='SpectrumPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumPrint
end function SpectrumPrint

!! Print to standard output, as XML
function SpectrumPrintXML(handle) &
      bind(C, name='SpectrumPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumPrintXML
end function SpectrumPrintXML

!! Print to standard output, as JSON
function SpectrumPrintJSON(handle) &
      bind(C, name='SpectrumPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumPrintJSON
end function SpectrumPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function SpectrumLabelHas(handle) &
      bind(C, name='SpectrumLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumLabelHas
end function SpectrumLabelHas

!! Get
function SpectrumLabelGet(handle) &
      bind(C, name='SpectrumLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: SpectrumLabelGet
end function SpectrumLabelGet

!! Set
subroutine SpectrumLabelSet(handle, label, labelSize) &
      bind(C, name='SpectrumLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine SpectrumLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: pid
!! -----------------------------------------------------------------------------

!! Has
function SpectrumPidHas(handle) &
      bind(C, name='SpectrumPidHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumPidHas
end function SpectrumPidHas

!! Get
function SpectrumPidGet(handle) &
      bind(C, name='SpectrumPidGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: SpectrumPidGet
end function SpectrumPidGet

!! Set
subroutine SpectrumPidSet(handle, pid, pidSize) &
      bind(C, name='SpectrumPidSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
end subroutine SpectrumPidSet


!! -----------------------------------------------------------------------------
!! Child: discrete
!! -----------------------------------------------------------------------------

!! Has
function SpectrumDiscreteHas(handle) &
      bind(C, name='SpectrumDiscreteHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumDiscreteHas
end function SpectrumDiscreteHas

!! Clear
subroutine SpectrumDiscreteClear(handle) &
      bind(C, name='SpectrumDiscreteClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpectrumDiscreteClear

!! Size
function SpectrumDiscreteSize(handle) &
      bind(C, name='SpectrumDiscreteSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: SpectrumDiscreteSize
end function SpectrumDiscreteSize

!! Add
subroutine SpectrumDiscreteAdd(handle, fieldHandle) &
      bind(C, name='SpectrumDiscreteAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectrumDiscreteAdd

!! Get, by index \in [0,size), const
function SpectrumDiscreteGetConst(handle, index) &
      bind(C, name='SpectrumDiscreteGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: SpectrumDiscreteGetConst
end function SpectrumDiscreteGetConst

!! Get, by index \in [0,size)
function SpectrumDiscreteGet(handle, index) &
      bind(C, name='SpectrumDiscreteGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: SpectrumDiscreteGet
end function SpectrumDiscreteGet

!! Set, by index \in [0,size)
subroutine SpectrumDiscreteSet(handle, index, fieldHandle) &
      bind(C, name='SpectrumDiscreteSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectrumDiscreteSet

!! ------------------------
!! Re: metadatum type
!! ------------------------

!! Has, by type
function SpectrumDiscreteHasByType(handle, meta, metaSize) &
      bind(C, name='SpectrumDiscreteHasByType')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: SpectrumDiscreteHasByType
end function SpectrumDiscreteHasByType

!! Get, by type, const
function SpectrumDiscreteGetByTypeConst(handle, meta, metaSize) &
      bind(C, name='SpectrumDiscreteGetByTypeConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: SpectrumDiscreteGetByTypeConst
end function SpectrumDiscreteGetByTypeConst

!! Get, by type
function SpectrumDiscreteGetByType(handle, meta, metaSize) &
      bind(C, name='SpectrumDiscreteGetByType')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: SpectrumDiscreteGetByType
end function SpectrumDiscreteGetByType

!! Set, by type
subroutine SpectrumDiscreteSetByType(handle, meta, metaSize, fieldHandle) &
      bind(C, name='SpectrumDiscreteSetByType')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectrumDiscreteSetByType


!! -----------------------------------------------------------------------------
!! Child: continuum
!! -----------------------------------------------------------------------------

!! Has
function SpectrumContinuumHas(handle) &
      bind(C, name='SpectrumContinuumHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpectrumContinuumHas
end function SpectrumContinuumHas

!! Get, const
function SpectrumContinuumGetConst(handle) &
      bind(C, name='SpectrumContinuumGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: SpectrumContinuumGetConst
end function SpectrumContinuumGetConst

!! Get
function SpectrumContinuumGet(handle) &
      bind(C, name='SpectrumContinuumGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: SpectrumContinuumGet
end function SpectrumContinuumGet

!! Set
subroutine SpectrumContinuumSet(handle, fieldHandle) &
      bind(C, name='SpectrumContinuumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectrumContinuumSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSpectrum
