
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSpectra
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SpectraDefaultConst() &
      bind(C, name='SpectraDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SpectraDefaultConst

!! Create, default
function SpectraDefault() &
      bind(C, name='SpectraDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SpectraDefault

!! Create, general, const
function SpectraCreateConst( &
   spectrum, spectrumSize &
) &
      bind(C, name='SpectraCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: spectrumSize
   type(c_ptr) :: spectrum(spectrumSize)
   type(c_ptr) :: handle
end function SpectraCreateConst

!! Create, general
function SpectraCreate( &
   spectrum, spectrumSize &
) &
      bind(C, name='SpectraCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: spectrumSize
   type(c_ptr) :: spectrum(spectrumSize)
   type(c_ptr) :: handle
end function SpectraCreate

!! Assign
subroutine SpectraAssign(handleLHS, handleRHS) &
      bind(C, name='SpectraAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine SpectraAssign

!! Delete
subroutine SpectraDelete(handle) &
      bind(C, name='SpectraDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpectraDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SpectraRead(handle, filename, filenameSize) &
      bind(C, name='SpectraRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SpectraRead

!! Write to file
function SpectraWrite(handle, filename, filenameSize) &
      bind(C, name='SpectraWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SpectraWrite

!! Print to standard output, in our prettyprinting format
function SpectraPrint(handle) &
      bind(C, name='SpectraPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpectraPrint

!! Print to standard output, as XML
function SpectraPrintXML(handle) &
      bind(C, name='SpectraPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpectraPrintXML

!! Print to standard output, as JSON
function SpectraPrintJSON(handle) &
      bind(C, name='SpectraPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpectraPrintJSON


!! -----------------------------------------------------------------------------
!! Child: spectrum
!! -----------------------------------------------------------------------------

!! Has
function SpectraSpectrumHas(handle) &
      bind(C, name='SpectraSpectrumHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpectraSpectrumHas

!! Clear
subroutine SpectraSpectrumClear(handle) &
      bind(C, name='SpectraSpectrumClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpectraSpectrumClear

!! Size
function SpectraSpectrumSize(handle) &
      bind(C, name='SpectraSpectrumSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function SpectraSpectrumSize

!! Add
subroutine SpectraSpectrumAdd(handle, fieldHandle) &
      bind(C, name='SpectraSpectrumAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectraSpectrumAdd

!! Get, by index \in [0,size), const
function SpectraSpectrumGetConst(handle, index) &
      bind(C, name='SpectraSpectrumGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function SpectraSpectrumGetConst

!! Get, by index \in [0,size)
function SpectraSpectrumGet(handle, index) &
      bind(C, name='SpectraSpectrumGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function SpectraSpectrumGet

!! Set, by index \in [0,size)
subroutine SpectraSpectrumSet(handle, index, fieldHandle) &
      bind(C, name='SpectraSpectrumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectraSpectrumSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function SpectraSpectrumHasByLabel(handle, meta, metaSize) &
      bind(C, name='SpectraSpectrumHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function SpectraSpectrumHasByLabel

!! Get, by label, const
function SpectraSpectrumGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='SpectraSpectrumGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SpectraSpectrumGetByLabelConst

!! Get, by label
function SpectraSpectrumGetByLabel(handle, meta, metaSize) &
      bind(C, name='SpectraSpectrumGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SpectraSpectrumGetByLabel

!! Set, by label
subroutine SpectraSpectrumSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='SpectraSpectrumSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectraSpectrumSetByLabel

!! ------------------------
!! Re: metadatum pid
!! ------------------------

!! Has, by pid
function SpectraSpectrumHasByPid(handle, meta, metaSize) &
      bind(C, name='SpectraSpectrumHasByPid') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function SpectraSpectrumHasByPid

!! Get, by pid, const
function SpectraSpectrumGetByPidConst(handle, meta, metaSize) &
      bind(C, name='SpectraSpectrumGetByPidConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SpectraSpectrumGetByPidConst

!! Get, by pid
function SpectraSpectrumGetByPid(handle, meta, metaSize) &
      bind(C, name='SpectraSpectrumGetByPid') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SpectraSpectrumGetByPid

!! Set, by pid
subroutine SpectraSpectrumSetByPid(handle, meta, metaSize, fieldHandle) &
      bind(C, name='SpectraSpectrumSetByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpectraSpectrumSetByPid


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSpectra
