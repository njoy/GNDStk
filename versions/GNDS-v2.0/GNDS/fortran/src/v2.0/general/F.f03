
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalF
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FDefaultConst() &
      bind(C, name='FDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FDefaultConst

!! Create, default
function FDefault() &
      bind(C, name='FDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FDefault

!! Create, general, const
function FCreateConst( &
   XYs2d &
) &
      bind(C, name='FCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function FCreateConst

!! Create, general
function FCreate( &
   XYs2d &
) &
      bind(C, name='FCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function FCreate

!! Assign
subroutine FAssign(handleLHS, handleRHS) &
      bind(C, name='FAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FAssign

!! Delete
subroutine FDelete(handle) &
      bind(C, name='FDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FRead(handle, filename, filenameSize) &
      bind(C, name='FRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FRead

!! Write to file
function FWrite(handle, filename, filenameSize) &
      bind(C, name='FWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FWrite

!! Print to standard output, in our prettyprinting format
function FPrint(handle) &
      bind(C, name='FPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FPrint

!! Print to standard output, as XML
function FPrintXML(handle) &
      bind(C, name='FPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FPrintXML

!! Print to standard output, as JSON
function FPrintJSON(handle) &
      bind(C, name='FPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function FXYs2dHas(handle) &
      bind(C, name='FXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FXYs2dHas

!! Get, const
function FXYs2dGetConst(handle) &
      bind(C, name='FXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FXYs2dGetConst

!! Get
function FXYs2dGet(handle) &
      bind(C, name='FXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FXYs2dGet

!! Set
subroutine FXYs2dSet(handle, fieldHandle) &
      bind(C, name='FXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalF
