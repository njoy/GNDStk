
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAngularEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AngularEnergyDefaultConst() &
      bind(C, name='AngularEnergyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AngularEnergyDefaultConst
end function AngularEnergyDefaultConst

!! Create, default
function AngularEnergyDefault() &
      bind(C, name='AngularEnergyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AngularEnergyDefault
end function AngularEnergyDefault

!! Create, general, const
function AngularEnergyCreateConst( &
   label, &
   productFrame, &
   XYs3d, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='AngularEnergyCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), intent(in), value :: XYs3d
   type(c_ptr) :: AngularEnergyCreateConst
end function AngularEnergyCreateConst

!! Create, general
function AngularEnergyCreate( &
   label, &
   productFrame, &
   XYs3d, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='AngularEnergyCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), intent(in), value :: XYs3d
   type(c_ptr) :: AngularEnergyCreate
end function AngularEnergyCreate

!! Assign
subroutine AngularEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='AngularEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AngularEnergyAssign

!! Delete
subroutine AngularEnergyDelete(handle) &
      bind(C, name='AngularEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AngularEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AngularEnergyRead(handle, filename, filenameSize) &
      bind(C, name='AngularEnergyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AngularEnergyRead
end function AngularEnergyRead

!! Write to file
function AngularEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='AngularEnergyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AngularEnergyWrite
end function AngularEnergyWrite

!! Print to standard output, in our prettyprinting format
function AngularEnergyPrint(handle) &
      bind(C, name='AngularEnergyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularEnergyPrint
end function AngularEnergyPrint

!! Print to standard output, as XML
function AngularEnergyPrintXML(handle) &
      bind(C, name='AngularEnergyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularEnergyPrintXML
end function AngularEnergyPrintXML

!! Print to standard output, as JSON
function AngularEnergyPrintJSON(handle) &
      bind(C, name='AngularEnergyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularEnergyPrintJSON
end function AngularEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function AngularEnergyLabelHas(handle) &
      bind(C, name='AngularEnergyLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularEnergyLabelHas
end function AngularEnergyLabelHas

!! Get
function AngularEnergyLabelGet(handle) &
      bind(C, name='AngularEnergyLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AngularEnergyLabelGet
end function AngularEnergyLabelGet

!! Set
subroutine AngularEnergyLabelSet(handle, label, labelSize) &
      bind(C, name='AngularEnergyLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine AngularEnergyLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function AngularEnergyProductFrameHas(handle) &
      bind(C, name='AngularEnergyProductFrameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularEnergyProductFrameHas
end function AngularEnergyProductFrameHas

!! Get
function AngularEnergyProductFrameGet(handle) &
      bind(C, name='AngularEnergyProductFrameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AngularEnergyProductFrameGet
end function AngularEnergyProductFrameGet

!! Set
subroutine AngularEnergyProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='AngularEnergyProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine AngularEnergyProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: XYs3d
!! -----------------------------------------------------------------------------

!! Has
function AngularEnergyXYs3dHas(handle) &
      bind(C, name='AngularEnergyXYs3dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AngularEnergyXYs3dHas
end function AngularEnergyXYs3dHas

!! Get, const
function AngularEnergyXYs3dGetConst(handle) &
      bind(C, name='AngularEnergyXYs3dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: AngularEnergyXYs3dGetConst
end function AngularEnergyXYs3dGetConst

!! Get
function AngularEnergyXYs3dGet(handle) &
      bind(C, name='AngularEnergyXYs3dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: AngularEnergyXYs3dGet
end function AngularEnergyXYs3dGet

!! Set
subroutine AngularEnergyXYs3dSet(handle, fieldHandle) &
      bind(C, name='AngularEnergyXYs3dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AngularEnergyXYs3dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAngularEnergy
