
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNuclearTerm
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NuclearTermDefaultConst() &
      bind(C, name='NuclearTermDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NuclearTermDefaultConst
end function NuclearTermDefaultConst

!! Create, default
function NuclearTermDefault() &
      bind(C, name='NuclearTermDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NuclearTermDefault
end function NuclearTermDefault

!! Create, general, const
function NuclearTermCreateConst( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='NuclearTermCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: regions2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: NuclearTermCreateConst
end function NuclearTermCreateConst

!! Create, general
function NuclearTermCreate( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='NuclearTermCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: regions2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: NuclearTermCreate
end function NuclearTermCreate

!! Assign
subroutine NuclearTermAssign(handleLHS, handleRHS) &
      bind(C, name='NuclearTermAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NuclearTermAssign

!! Delete
subroutine NuclearTermDelete(handle) &
      bind(C, name='NuclearTermDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclearTermDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NuclearTermRead(handle, filename, filenameSize) &
      bind(C, name='NuclearTermRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NuclearTermRead
end function NuclearTermRead

!! Write to file
function NuclearTermWrite(handle, filename, filenameSize) &
      bind(C, name='NuclearTermWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NuclearTermWrite
end function NuclearTermWrite

!! Print to standard output, in our prettyprinting format
function NuclearTermPrint(handle) &
      bind(C, name='NuclearTermPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearTermPrint
end function NuclearTermPrint

!! Print to standard output, as XML
function NuclearTermPrintXML(handle) &
      bind(C, name='NuclearTermPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearTermPrintXML
end function NuclearTermPrintXML

!! Print to standard output, as JSON
function NuclearTermPrintJSON(handle) &
      bind(C, name='NuclearTermPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearTermPrintJSON
end function NuclearTermPrintJSON


!! -----------------------------------------------------------------------------
!! Child: regions2d
!! -----------------------------------------------------------------------------

!! Has
function NuclearTermRegions2dHas(handle) &
      bind(C, name='NuclearTermRegions2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearTermRegions2dHas
end function NuclearTermRegions2dHas

!! Get, const
function NuclearTermRegions2dGetConst(handle) &
      bind(C, name='NuclearTermRegions2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclearTermRegions2dGetConst
end function NuclearTermRegions2dGetConst

!! Get
function NuclearTermRegions2dGet(handle) &
      bind(C, name='NuclearTermRegions2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclearTermRegions2dGet
end function NuclearTermRegions2dGet

!! Set
subroutine NuclearTermRegions2dSet(handle, fieldHandle) &
      bind(C, name='NuclearTermRegions2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearTermRegions2dSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function NuclearTermXYs2dHas(handle) &
      bind(C, name='NuclearTermXYs2dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclearTermXYs2dHas
end function NuclearTermXYs2dHas

!! Get, const
function NuclearTermXYs2dGetConst(handle) &
      bind(C, name='NuclearTermXYs2dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclearTermXYs2dGetConst
end function NuclearTermXYs2dGetConst

!! Get
function NuclearTermXYs2dGet(handle) &
      bind(C, name='NuclearTermXYs2dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclearTermXYs2dGet
end function NuclearTermXYs2dGet

!! Set
subroutine NuclearTermXYs2dSet(handle, fieldHandle) &
      bind(C, name='NuclearTermXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NuclearTermXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNuclearTerm
