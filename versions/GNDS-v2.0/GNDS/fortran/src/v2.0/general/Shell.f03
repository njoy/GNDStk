
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalShell
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ShellDefaultConst() &
      bind(C, name='ShellDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ShellDefaultConst

!! Create, default
function ShellDefault() &
      bind(C, name='ShellDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ShellDefault

!! Create, general, const
function ShellCreateConst( &
   label, &
   value, &
   uncertainty, &
   labelSize &
) &
      bind(C, name='ShellCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: value
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function ShellCreateConst

!! Create, general
function ShellCreate( &
   label, &
   value, &
   uncertainty, &
   labelSize &
) &
      bind(C, name='ShellCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: value
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function ShellCreate

!! Assign
subroutine ShellAssign(handleLHS, handleRHS) &
      bind(C, name='ShellAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ShellAssign

!! Delete
subroutine ShellDelete(handle) &
      bind(C, name='ShellDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ShellDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ShellRead(handle, filename, filenameSize) &
      bind(C, name='ShellRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ShellRead

!! Write to file
function ShellWrite(handle, filename, filenameSize) &
      bind(C, name='ShellWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ShellWrite

!! Print to standard output, in our prettyprinting format
function ShellPrint(handle) &
      bind(C, name='ShellPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ShellPrint

!! Print to standard output, as XML
function ShellPrintXML(handle) &
      bind(C, name='ShellPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ShellPrintXML

!! Print to standard output, as JSON
function ShellPrintJSON(handle) &
      bind(C, name='ShellPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ShellPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ShellLabelHas(handle) &
      bind(C, name='ShellLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ShellLabelHas

!! Get
function ShellLabelGet(handle) &
      bind(C, name='ShellLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ShellLabelGet

!! Set
subroutine ShellLabelSet(handle, label, labelSize) &
      bind(C, name='ShellLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ShellLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function ShellValueHas(handle) &
      bind(C, name='ShellValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ShellValueHas

!! Get
function ShellValueGet(handle) &
      bind(C, name='ShellValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function ShellValueGet

!! Set
subroutine ShellValueSet(handle, value, valueSize) &
      bind(C, name='ShellValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine ShellValueSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function ShellUncertaintyHas(handle) &
      bind(C, name='ShellUncertaintyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ShellUncertaintyHas

!! Get, const
function ShellUncertaintyGetConst(handle) &
      bind(C, name='ShellUncertaintyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ShellUncertaintyGetConst

!! Get
function ShellUncertaintyGet(handle) &
      bind(C, name='ShellUncertaintyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ShellUncertaintyGet

!! Set
subroutine ShellUncertaintySet(handle, fieldHandle) &
      bind(C, name='ShellUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ShellUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalShell
