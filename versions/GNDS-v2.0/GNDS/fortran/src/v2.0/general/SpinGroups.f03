
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSpinGroups
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SpinGroupsDefaultConst() &
      bind(C, name='SpinGroupsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: SpinGroupsDefaultConst
end function SpinGroupsDefaultConst

!! Create, default
function SpinGroupsDefault() &
      bind(C, name='SpinGroupsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: SpinGroupsDefault
end function SpinGroupsDefault

!! Create, general, const
function SpinGroupsCreateConst( &
   spinGroup, spinGroupSize &
) &
      bind(C, name='SpinGroupsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: spinGroupSize
   type(c_ptr) :: spinGroup(spinGroupSize)
   type(c_ptr) :: SpinGroupsCreateConst
end function SpinGroupsCreateConst

!! Create, general
function SpinGroupsCreate( &
   spinGroup, spinGroupSize &
) &
      bind(C, name='SpinGroupsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: spinGroupSize
   type(c_ptr) :: spinGroup(spinGroupSize)
   type(c_ptr) :: SpinGroupsCreate
end function SpinGroupsCreate

!! Assign
subroutine SpinGroupsAssign(handleLHS, handleRHS) &
      bind(C, name='SpinGroupsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine SpinGroupsAssign

!! Delete
subroutine SpinGroupsDelete(handle) &
      bind(C, name='SpinGroupsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpinGroupsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SpinGroupsRead(handle, filename, filenameSize) &
      bind(C, name='SpinGroupsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: SpinGroupsRead
end function SpinGroupsRead

!! Write to file
function SpinGroupsWrite(handle, filename, filenameSize) &
      bind(C, name='SpinGroupsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: SpinGroupsWrite
end function SpinGroupsWrite

!! Print to standard output, in our prettyprinting format
function SpinGroupsPrint(handle) &
      bind(C, name='SpinGroupsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupsPrint
end function SpinGroupsPrint

!! Print to standard output, as XML
function SpinGroupsPrintXML(handle) &
      bind(C, name='SpinGroupsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupsPrintXML
end function SpinGroupsPrintXML

!! Print to standard output, as JSON
function SpinGroupsPrintJSON(handle) &
      bind(C, name='SpinGroupsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupsPrintJSON
end function SpinGroupsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: spinGroup
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupsSpinGroupHas(handle) &
      bind(C, name='SpinGroupsSpinGroupHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupsSpinGroupHas
end function SpinGroupsSpinGroupHas

!! Clear
subroutine SpinGroupsSpinGroupClear(handle) &
      bind(C, name='SpinGroupsSpinGroupClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpinGroupsSpinGroupClear

!! Size
function SpinGroupsSpinGroupSize(handle) &
      bind(C, name='SpinGroupsSpinGroupSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: SpinGroupsSpinGroupSize
end function SpinGroupsSpinGroupSize

!! Add
subroutine SpinGroupsSpinGroupAdd(handle, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupAdd

!! Get, by index \in [0,size), const
function SpinGroupsSpinGroupGetConst(handle, index) &
      bind(C, name='SpinGroupsSpinGroupGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: SpinGroupsSpinGroupGetConst
end function SpinGroupsSpinGroupGetConst

!! Get, by index \in [0,size)
function SpinGroupsSpinGroupGet(handle, index) &
      bind(C, name='SpinGroupsSpinGroupGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: SpinGroupsSpinGroupGet
end function SpinGroupsSpinGroupGet

!! Set, by index \in [0,size)
subroutine SpinGroupsSpinGroupSet(handle, index, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function SpinGroupsSpinGroupHasByLabel(handle, meta, metaSize) &
      bind(C, name='SpinGroupsSpinGroupHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: SpinGroupsSpinGroupHasByLabel
end function SpinGroupsSpinGroupHasByLabel

!! Get, by label, const
function SpinGroupsSpinGroupGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='SpinGroupsSpinGroupGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: SpinGroupsSpinGroupGetByLabelConst
end function SpinGroupsSpinGroupGetByLabelConst

!! Get, by label
function SpinGroupsSpinGroupGetByLabel(handle, meta, metaSize) &
      bind(C, name='SpinGroupsSpinGroupGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: SpinGroupsSpinGroupGetByLabel
end function SpinGroupsSpinGroupGetByLabel

!! Set, by label
subroutine SpinGroupsSpinGroupSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSetByLabel

!! ------------------------
!! Re: metadatum spin
!! ------------------------

!! Has, by spin
function SpinGroupsSpinGroupHasBySpin(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupHasBySpin')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: SpinGroupsSpinGroupHasBySpin
end function SpinGroupsSpinGroupHasBySpin

!! Get, by spin, const
function SpinGroupsSpinGroupGetBySpinConst(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetBySpinConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: SpinGroupsSpinGroupGetBySpinConst
end function SpinGroupsSpinGroupGetBySpinConst

!! Get, by spin
function SpinGroupsSpinGroupGetBySpin(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetBySpin')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: SpinGroupsSpinGroupGetBySpin
end function SpinGroupsSpinGroupGetBySpin

!! Set, by spin
subroutine SpinGroupsSpinGroupSetBySpin(handle, meta, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSetBySpin')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSetBySpin

!! ------------------------
!! Re: metadatum parity
!! ------------------------

!! Has, by parity
function SpinGroupsSpinGroupHasByParity(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupHasByParity')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: SpinGroupsSpinGroupHasByParity
end function SpinGroupsSpinGroupHasByParity

!! Get, by parity, const
function SpinGroupsSpinGroupGetByParityConst(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetByParityConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: SpinGroupsSpinGroupGetByParityConst
end function SpinGroupsSpinGroupGetByParityConst

!! Get, by parity
function SpinGroupsSpinGroupGetByParity(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetByParity')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: SpinGroupsSpinGroupGetByParity
end function SpinGroupsSpinGroupGetByParity

!! Set, by parity
subroutine SpinGroupsSpinGroupSetByParity(handle, meta, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSetByParity')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSetByParity


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSpinGroups
