
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSpinGroups
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SpinGroupsDefaultConst() &
      bind(C, name='SpinGroupsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SpinGroupsDefaultConst

!! Create, default
function SpinGroupsDefault() &
      bind(C, name='SpinGroupsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SpinGroupsDefault

!! Create, general, const
function SpinGroupsCreateConst( &
   spinGroup, spinGroupSize &
) &
      bind(C, name='SpinGroupsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: spinGroupSize
   type(c_ptr) :: spinGroup(spinGroupSize)
   type(c_ptr) :: handle
end function SpinGroupsCreateConst

!! Create, general
function SpinGroupsCreate( &
   spinGroup, spinGroupSize &
) &
      bind(C, name='SpinGroupsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: spinGroupSize
   type(c_ptr) :: spinGroup(spinGroupSize)
   type(c_ptr) :: handle
end function SpinGroupsCreate

!! Assign
subroutine SpinGroupsAssign(handleLHS, handleRHS) &
      bind(C, name='SpinGroupsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine SpinGroupsAssign

!! Delete
subroutine SpinGroupsDelete(handle) &
      bind(C, name='SpinGroupsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpinGroupsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SpinGroupsRead(handle, filename, filenameSize) &
      bind(C, name='SpinGroupsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SpinGroupsRead

!! Write to file
function SpinGroupsWrite(handle, filename, filenameSize) &
      bind(C, name='SpinGroupsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SpinGroupsWrite

!! Print to standard output, in our prettyprinting format
function SpinGroupsPrint(handle) &
      bind(C, name='SpinGroupsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpinGroupsPrint

!! Print to standard output, as XML
function SpinGroupsPrintXML(handle) &
      bind(C, name='SpinGroupsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpinGroupsPrintXML

!! Print to standard output, as JSON
function SpinGroupsPrintJSON(handle) &
      bind(C, name='SpinGroupsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpinGroupsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: spinGroup
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupsSpinGroupHas(handle) &
      bind(C, name='SpinGroupsSpinGroupHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpinGroupsSpinGroupHas

!! Clear
subroutine SpinGroupsSpinGroupClear(handle) &
      bind(C, name='SpinGroupsSpinGroupClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpinGroupsSpinGroupClear

!! Size
function SpinGroupsSpinGroupSize(handle) &
      bind(C, name='SpinGroupsSpinGroupSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function SpinGroupsSpinGroupSize

!! Add
subroutine SpinGroupsSpinGroupAdd(handle, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupAdd

!! Get, by index \in [0,size), const
function SpinGroupsSpinGroupGetConst(handle, index) &
      bind(C, name='SpinGroupsSpinGroupGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetConst

!! Get, by index \in [0,size)
function SpinGroupsSpinGroupGet(handle, index) &
      bind(C, name='SpinGroupsSpinGroupGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGet

!! Set, by index \in [0,size)
subroutine SpinGroupsSpinGroupSet(handle, index, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function SpinGroupsSpinGroupHasByLabel(handle, meta, metaSize) &
      bind(C, name='SpinGroupsSpinGroupHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function SpinGroupsSpinGroupHasByLabel

!! Get, by label, const
function SpinGroupsSpinGroupGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='SpinGroupsSpinGroupGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetByLabelConst

!! Get, by label
function SpinGroupsSpinGroupGetByLabel(handle, meta, metaSize) &
      bind(C, name='SpinGroupsSpinGroupGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetByLabel

!! Set, by label
subroutine SpinGroupsSpinGroupSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSetByLabel

!! ------------------------
!! Re: metadatum spin
!! ------------------------

!! Has, by spin
function SpinGroupsSpinGroupHasBySpin(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupHasBySpin') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function SpinGroupsSpinGroupHasBySpin

!! Get, by spin, const
function SpinGroupsSpinGroupGetBySpinConst(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetBySpinConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetBySpinConst

!! Get, by spin
function SpinGroupsSpinGroupGetBySpin(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetBySpin') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetBySpin

!! Set, by spin
subroutine SpinGroupsSpinGroupSetBySpin(handle, meta, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSetBySpin')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSetBySpin

!! ------------------------
!! Re: metadatum parity
!! ------------------------

!! Has, by parity
function SpinGroupsSpinGroupHasByParity(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupHasByParity') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function SpinGroupsSpinGroupHasByParity

!! Get, by parity, const
function SpinGroupsSpinGroupGetByParityConst(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetByParityConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetByParityConst

!! Get, by parity
function SpinGroupsSpinGroupGetByParity(handle, meta) &
      bind(C, name='SpinGroupsSpinGroupGetByParity') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SpinGroupsSpinGroupGetByParity

!! Set, by parity
subroutine SpinGroupsSpinGroupSetByParity(handle, meta, fieldHandle) &
      bind(C, name='SpinGroupsSpinGroupSetByParity')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupsSpinGroupSetByParity


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSpinGroups
