
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResonanceReaction
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResonanceReactionDefaultConst() &
      bind(C, name='ResonanceReactionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonanceReactionDefaultConst

!! Create, default
function ResonanceReactionDefault() &
      bind(C, name='ResonanceReactionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonanceReactionDefault

!! Create, general, const
function ResonanceReactionCreateConst( &
   label, &
   ejectile, &
   eliminated, &
   link, &
   hardSphereRadius, &
   Q, &
   scatteringRadius, &
   labelSize, &
   ejectileSize &
) &
      bind(C, name='ResonanceReactionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: ejectileSize
   character(c_char), intent(in) :: ejectile(ejectileSize)
   logical(c_bool), value, intent(in) :: eliminated
   type(c_ptr), value :: link
   type(c_ptr), value :: hardSphereRadius
   type(c_ptr), value :: Q
   type(c_ptr), value :: scatteringRadius
   type(c_ptr) :: handle
end function ResonanceReactionCreateConst

!! Create, general
function ResonanceReactionCreate( &
   label, &
   ejectile, &
   eliminated, &
   link, &
   hardSphereRadius, &
   Q, &
   scatteringRadius, &
   labelSize, &
   ejectileSize &
) &
      bind(C, name='ResonanceReactionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: ejectileSize
   character(c_char), intent(in) :: ejectile(ejectileSize)
   logical(c_bool), value, intent(in) :: eliminated
   type(c_ptr), value :: link
   type(c_ptr), value :: hardSphereRadius
   type(c_ptr), value :: Q
   type(c_ptr), value :: scatteringRadius
   type(c_ptr) :: handle
end function ResonanceReactionCreate

!! Assign
subroutine ResonanceReactionAssign(handleLHS, handleRHS) &
      bind(C, name='ResonanceReactionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResonanceReactionAssign

!! Delete
subroutine ResonanceReactionDelete(handle) &
      bind(C, name='ResonanceReactionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonanceReactionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResonanceReactionRead(handle, filename, filenameSize) &
      bind(C, name='ResonanceReactionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonanceReactionRead

!! Write to file
function ResonanceReactionWrite(handle, filename, filenameSize) &
      bind(C, name='ResonanceReactionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonanceReactionWrite

!! Print to standard output, in our prettyprinting format
function ResonanceReactionPrint(handle) &
      bind(C, name='ResonanceReactionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceReactionPrint

!! Print to standard output, as XML
function ResonanceReactionPrintXML(handle) &
      bind(C, name='ResonanceReactionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceReactionPrintXML

!! Print to standard output, as JSON
function ResonanceReactionPrintJSON(handle) &
      bind(C, name='ResonanceReactionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceReactionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionLabelHas(handle) &
      bind(C, name='ResonanceReactionLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionLabelHas

!! Get
function ResonanceReactionLabelGet(handle) &
      bind(C, name='ResonanceReactionLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ResonanceReactionLabelGet

!! Set
subroutine ResonanceReactionLabelSet(handle, label, labelSize) &
      bind(C, name='ResonanceReactionLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ResonanceReactionLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: ejectile
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionEjectileHas(handle) &
      bind(C, name='ResonanceReactionEjectileHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionEjectileHas

!! Get
function ResonanceReactionEjectileGet(handle) &
      bind(C, name='ResonanceReactionEjectileGet') &
      result(ejectile)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ejectile
end function ResonanceReactionEjectileGet

!! Set
subroutine ResonanceReactionEjectileSet(handle, ejectile, ejectileSize) &
      bind(C, name='ResonanceReactionEjectileSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ejectileSize
   character(c_char), intent(in) :: ejectile(ejectileSize)
end subroutine ResonanceReactionEjectileSet


!! -----------------------------------------------------------------------------
!! Metadatum: eliminated
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionEliminatedHas(handle) &
      bind(C, name='ResonanceReactionEliminatedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionEliminatedHas

!! Get
function ResonanceReactionEliminatedGet(handle) &
      bind(C, name='ResonanceReactionEliminatedGet') &
      result(eliminated)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: eliminated
end function ResonanceReactionEliminatedGet

!! Set
subroutine ResonanceReactionEliminatedSet(handle, eliminated, eliminatedSize) &
      bind(C, name='ResonanceReactionEliminatedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: eliminatedSize
   character(c_char), intent(in) :: eliminated(eliminatedSize)
end subroutine ResonanceReactionEliminatedSet


!! -----------------------------------------------------------------------------
!! Child: link
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionLinkHas(handle) &
      bind(C, name='ResonanceReactionLinkHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionLinkHas

!! Get, const
function ResonanceReactionLinkGetConst(handle) &
      bind(C, name='ResonanceReactionLinkGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionLinkGetConst

!! Get
function ResonanceReactionLinkGet(handle) &
      bind(C, name='ResonanceReactionLinkGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionLinkGet

!! Set
subroutine ResonanceReactionLinkSet(handle, fieldHandle) &
      bind(C, name='ResonanceReactionLinkSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonanceReactionLinkSet


!! -----------------------------------------------------------------------------
!! Child: hardSphereRadius
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionHardSphereRadiusHas(handle) &
      bind(C, name='ResonanceReactionHardSphereRadiusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionHardSphereRadiusHas

!! Get, const
function ResonanceReactionHardSphereRadiusGetConst(handle) &
      bind(C, name='ResonanceReactionHardSphereRadiusGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionHardSphereRadiusGetConst

!! Get
function ResonanceReactionHardSphereRadiusGet(handle) &
      bind(C, name='ResonanceReactionHardSphereRadiusGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionHardSphereRadiusGet

!! Set
subroutine ResonanceReactionHardSphereRadiusSet(handle, fieldHandle) &
      bind(C, name='ResonanceReactionHardSphereRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonanceReactionHardSphereRadiusSet


!! -----------------------------------------------------------------------------
!! Child: Q
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionQHas(handle) &
      bind(C, name='ResonanceReactionQHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionQHas

!! Get, const
function ResonanceReactionQGetConst(handle) &
      bind(C, name='ResonanceReactionQGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionQGetConst

!! Get
function ResonanceReactionQGet(handle) &
      bind(C, name='ResonanceReactionQGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionQGet

!! Set
subroutine ResonanceReactionQSet(handle, fieldHandle) &
      bind(C, name='ResonanceReactionQSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonanceReactionQSet


!! -----------------------------------------------------------------------------
!! Child: scatteringRadius
!! -----------------------------------------------------------------------------

!! Has
function ResonanceReactionScatteringRadiusHas(handle) &
      bind(C, name='ResonanceReactionScatteringRadiusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceReactionScatteringRadiusHas

!! Get, const
function ResonanceReactionScatteringRadiusGetConst(handle) &
      bind(C, name='ResonanceReactionScatteringRadiusGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionScatteringRadiusGetConst

!! Get
function ResonanceReactionScatteringRadiusGet(handle) &
      bind(C, name='ResonanceReactionScatteringRadiusGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceReactionScatteringRadiusGet

!! Set
subroutine ResonanceReactionScatteringRadiusSet(handle, fieldHandle) &
      bind(C, name='ResonanceReactionScatteringRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonanceReactionScatteringRadiusSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResonanceReaction
