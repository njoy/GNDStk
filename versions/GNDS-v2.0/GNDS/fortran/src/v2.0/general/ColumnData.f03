
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalColumnData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ColumnDataDefaultConst() &
      bind(C, name='ColumnDataDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ColumnDataDefaultConst
end function ColumnDataDefaultConst

!! Create, default, non-const
function ColumnDataDefault() &
      bind(C, name='ColumnDataDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ColumnDataDefault
end function ColumnDataDefault

!! Create, general, const
function ColumnDataCreateConst( &
   ENDF_MFMT, &
   href, &
   slices, &
   ENDF_MFMTSize, &
   hrefSize &
) &
      bind(C, name='ColumnDataCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), intent(in), value :: slices
   type(c_ptr) :: ColumnDataCreateConst
end function ColumnDataCreateConst

!! Create, general, non-const
function ColumnDataCreate( &
   ENDF_MFMT, &
   href, &
   slices, &
   ENDF_MFMTSize, &
   hrefSize &
) &
      bind(C, name='ColumnDataCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), intent(in), value :: slices
   type(c_ptr) :: ColumnDataCreate
end function ColumnDataCreate

!! Assign
subroutine ColumnDataAssign(handleLHS, handleRHS) &
      bind(C, name='ColumnDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ColumnDataAssign

!! Delete
subroutine ColumnDataDelete(handle) &
      bind(C, name='ColumnDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ColumnDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ColumnDataRead(handle, filename, filenameSize) &
      bind(C, name='ColumnDataRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ColumnDataRead
end function ColumnDataRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ColumnDataWrite(handle, filename, filenameSize) &
      bind(C, name='ColumnDataWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ColumnDataWrite
end function ColumnDataWrite

!! Print to standard output, in our prettyprinting format
function ColumnDataPrint(handle) &
      bind(C, name='ColumnDataPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ColumnDataPrint
end function ColumnDataPrint

!! Print to standard output, as XML
function ColumnDataPrintXML(handle) &
      bind(C, name='ColumnDataPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ColumnDataPrintXML
end function ColumnDataPrintXML

!! Print to standard output, as JSON
function ColumnDataPrintJSON(handle) &
      bind(C, name='ColumnDataPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ColumnDataPrintJSON
end function ColumnDataPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MFMT
!! -----------------------------------------------------------------------------

!! Has
function ColumnDataENDFMFMTHas(handle) &
      bind(C, name='ColumnDataENDFMFMTHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ColumnDataENDFMFMTHas
end function ColumnDataENDFMFMTHas

!! Get
function ColumnDataENDFMFMTGet(handle) &
      bind(C, name='ColumnDataENDFMFMTGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ColumnDataENDFMFMTGet
end function ColumnDataENDFMFMTGet

!! Set
subroutine ColumnDataENDFMFMTSet(handle, ENDF_MFMT, ENDF_MFMTSize) &
      bind(C, name='ColumnDataENDFMFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
end subroutine ColumnDataENDFMFMTSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ColumnDataHrefHas(handle) &
      bind(C, name='ColumnDataHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ColumnDataHrefHas
end function ColumnDataHrefHas

!! Get
function ColumnDataHrefGet(handle) &
      bind(C, name='ColumnDataHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ColumnDataHrefGet
end function ColumnDataHrefGet

!! Set
subroutine ColumnDataHrefSet(handle, href, hrefSize) &
      bind(C, name='ColumnDataHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ColumnDataHrefSet


!! -----------------------------------------------------------------------------
!! Child: slices
!! -----------------------------------------------------------------------------

!! Has
function ColumnDataSlicesHas(handle) &
      bind(C, name='ColumnDataSlicesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ColumnDataSlicesHas
end function ColumnDataSlicesHas

!! Get, const
function ColumnDataSlicesGetConst(handle) &
      bind(C, name='ColumnDataSlicesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ColumnDataSlicesGetConst
end function ColumnDataSlicesGetConst

!! Get, non-const
function ColumnDataSlicesGet(handle) &
      bind(C, name='ColumnDataSlicesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ColumnDataSlicesGet
end function ColumnDataSlicesGet

!! Set
subroutine ColumnDataSlicesSet(handle, fieldHandle) &
      bind(C, name='ColumnDataSlicesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ColumnDataSlicesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalColumnData
