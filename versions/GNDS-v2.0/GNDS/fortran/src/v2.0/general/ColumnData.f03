
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalColumnData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ColumnDataDefaultConst() &
      bind(C, name='ColumnDataDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ColumnDataDefaultConst

!! Create, default
function ColumnDataDefault() &
      bind(C, name='ColumnDataDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ColumnDataDefault

!! Create, general, const
function ColumnDataCreateConst( &
   ENDF_MFMT, &
   href, &
   slices, &
   ENDF_MFMTSize, &
   hrefSize &
) &
      bind(C, name='ColumnDataCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), value :: slices
   type(c_ptr) :: handle
end function ColumnDataCreateConst

!! Create, general
function ColumnDataCreate( &
   ENDF_MFMT, &
   href, &
   slices, &
   ENDF_MFMTSize, &
   hrefSize &
) &
      bind(C, name='ColumnDataCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), value :: slices
   type(c_ptr) :: handle
end function ColumnDataCreate

!! Assign
subroutine ColumnDataAssign(handleLHS, handleRHS) &
      bind(C, name='ColumnDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ColumnDataAssign

!! Delete
subroutine ColumnDataDelete(handle) &
      bind(C, name='ColumnDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ColumnDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ColumnDataRead(handle, filename, filenameSize) &
      bind(C, name='ColumnDataRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ColumnDataRead

!! Write to file
function ColumnDataWrite(handle, filename, filenameSize) &
      bind(C, name='ColumnDataWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ColumnDataWrite

!! Print to standard output, in our prettyprinting format
function ColumnDataPrint(handle) &
      bind(C, name='ColumnDataPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnDataPrint

!! Print to standard output, as XML
function ColumnDataPrintXML(handle) &
      bind(C, name='ColumnDataPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnDataPrintXML

!! Print to standard output, as JSON
function ColumnDataPrintJSON(handle) &
      bind(C, name='ColumnDataPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ColumnDataPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MFMT
!! -----------------------------------------------------------------------------

!! Has
function ColumnDataENDFMFMTHas(handle) &
      bind(C, name='ColumnDataENDFMFMTHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnDataENDFMFMTHas

!! Get
function ColumnDataENDFMFMTGet(handle) &
      bind(C, name='ColumnDataENDFMFMTGet') &
      result(ENDF_MFMT)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ENDF_MFMT
end function ColumnDataENDFMFMTGet

!! Set
subroutine ColumnDataENDFMFMTSet(handle, ENDF_MFMT, ENDF_MFMTSize) &
      bind(C, name='ColumnDataENDFMFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
end subroutine ColumnDataENDFMFMTSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ColumnDataHrefHas(handle) &
      bind(C, name='ColumnDataHrefHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnDataHrefHas

!! Get
function ColumnDataHrefGet(handle) &
      bind(C, name='ColumnDataHrefGet') &
      result(href)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: href
end function ColumnDataHrefGet

!! Set
subroutine ColumnDataHrefSet(handle, href, hrefSize) &
      bind(C, name='ColumnDataHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ColumnDataHrefSet


!! -----------------------------------------------------------------------------
!! Child: slices
!! -----------------------------------------------------------------------------

!! Has
function ColumnDataSlicesHas(handle) &
      bind(C, name='ColumnDataSlicesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ColumnDataSlicesHas

!! Get, const
function ColumnDataSlicesGetConst(handle) &
      bind(C, name='ColumnDataSlicesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ColumnDataSlicesGetConst

!! Get
function ColumnDataSlicesGet(handle) &
      bind(C, name='ColumnDataSlicesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ColumnDataSlicesGet

!! Set
subroutine ColumnDataSlicesSet(handle, fieldHandle) &
      bind(C, name='ColumnDataSlicesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ColumnDataSlicesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalColumnData
