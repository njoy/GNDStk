
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNBodyPhaseSpace
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NBodyPhaseSpaceDefaultConst() &
      bind(C, name='NBodyPhaseSpaceDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NBodyPhaseSpaceDefaultConst
end function NBodyPhaseSpaceDefaultConst

!! Create, default, non-const
function NBodyPhaseSpaceDefault() &
      bind(C, name='NBodyPhaseSpaceDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NBodyPhaseSpaceDefault
end function NBodyPhaseSpaceDefault

!! Create, general, const
function NBodyPhaseSpaceCreateConst( &
   numberOfProducts, &
   mass &
) &
      bind(C, name='NBodyPhaseSpaceCreateConst')
   use iso_c_binding
   implicit none
   integer(c_int), intent(in), value :: numberOfProducts
   type(c_ptr), intent(in), value :: mass
   type(c_ptr) :: NBodyPhaseSpaceCreateConst
end function NBodyPhaseSpaceCreateConst

!! Create, general, non-const
function NBodyPhaseSpaceCreate( &
   numberOfProducts, &
   mass &
) &
      bind(C, name='NBodyPhaseSpaceCreate')
   use iso_c_binding
   implicit none
   integer(c_int), intent(in), value :: numberOfProducts
   type(c_ptr), intent(in), value :: mass
   type(c_ptr) :: NBodyPhaseSpaceCreate
end function NBodyPhaseSpaceCreate

!! Assign
subroutine NBodyPhaseSpaceAssign(handleLHS, handleRHS) &
      bind(C, name='NBodyPhaseSpaceAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine NBodyPhaseSpaceAssign

!! Delete
subroutine NBodyPhaseSpaceDelete(handle) &
      bind(C, name='NBodyPhaseSpaceDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NBodyPhaseSpaceDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function NBodyPhaseSpaceRead(handle, filename, filenameSize) &
      bind(C, name='NBodyPhaseSpaceRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NBodyPhaseSpaceRead
end function NBodyPhaseSpaceRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function NBodyPhaseSpaceWrite(handle, filename, filenameSize) &
      bind(C, name='NBodyPhaseSpaceWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NBodyPhaseSpaceWrite
end function NBodyPhaseSpaceWrite

!! Print to standard output, in our prettyprinting format
function NBodyPhaseSpacePrint(handle) &
      bind(C, name='NBodyPhaseSpacePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NBodyPhaseSpacePrint
end function NBodyPhaseSpacePrint

!! Print to standard output, as XML
function NBodyPhaseSpacePrintXML(handle) &
      bind(C, name='NBodyPhaseSpacePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NBodyPhaseSpacePrintXML
end function NBodyPhaseSpacePrintXML

!! Print to standard output, as JSON
function NBodyPhaseSpacePrintJSON(handle) &
      bind(C, name='NBodyPhaseSpacePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NBodyPhaseSpacePrintJSON
end function NBodyPhaseSpacePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: numberOfProducts
!! -----------------------------------------------------------------------------

!! Has
function NBodyPhaseSpaceNumberOfProductsHas(handle) &
      bind(C, name='NBodyPhaseSpaceNumberOfProductsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NBodyPhaseSpaceNumberOfProductsHas
end function NBodyPhaseSpaceNumberOfProductsHas

!! Get
function NBodyPhaseSpaceNumberOfProductsGet(handle) &
      bind(C, name='NBodyPhaseSpaceNumberOfProductsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NBodyPhaseSpaceNumberOfProductsGet
end function NBodyPhaseSpaceNumberOfProductsGet

!! Set
subroutine NBodyPhaseSpaceNumberOfProductsSet(handle, numberOfProducts) &
      bind(C, name='NBodyPhaseSpaceNumberOfProductsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: numberOfProducts
end subroutine NBodyPhaseSpaceNumberOfProductsSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function NBodyPhaseSpaceMassHas(handle) &
      bind(C, name='NBodyPhaseSpaceMassHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NBodyPhaseSpaceMassHas
end function NBodyPhaseSpaceMassHas

!! Get, const
function NBodyPhaseSpaceMassGetConst(handle) &
      bind(C, name='NBodyPhaseSpaceMassGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NBodyPhaseSpaceMassGetConst
end function NBodyPhaseSpaceMassGetConst

!! Get, non-const
function NBodyPhaseSpaceMassGet(handle) &
      bind(C, name='NBodyPhaseSpaceMassGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: NBodyPhaseSpaceMassGet
end function NBodyPhaseSpaceMassGet

!! Set
subroutine NBodyPhaseSpaceMassSet(handle, fieldHandle) &
      bind(C, name='NBodyPhaseSpaceMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine NBodyPhaseSpaceMassSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNBodyPhaseSpace
