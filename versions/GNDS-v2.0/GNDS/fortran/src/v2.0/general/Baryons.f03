
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBaryons
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BaryonsDefaultConst() &
      bind(C, name='BaryonsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BaryonsDefaultConst
end function BaryonsDefaultConst

!! Create, default, non-const
function BaryonsDefault() &
      bind(C, name='BaryonsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BaryonsDefault
end function BaryonsDefault

!! Create, general, const
function BaryonsCreateConst( &
   baryon, baryonSize &
) &
      bind(C, name='BaryonsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: baryonSize
   type(c_ptr), intent(in) :: baryon(baryonSize)
   type(c_ptr) :: BaryonsCreateConst
end function BaryonsCreateConst

!! Create, general, non-const
function BaryonsCreate( &
   baryon, baryonSize &
) &
      bind(C, name='BaryonsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: baryonSize
   type(c_ptr), intent(in) :: baryon(baryonSize)
   type(c_ptr) :: BaryonsCreate
end function BaryonsCreate

!! Assign
subroutine BaryonsAssign(handleLHS, handleRHS) &
      bind(C, name='BaryonsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine BaryonsAssign

!! Delete
subroutine BaryonsDelete(handle) &
      bind(C, name='BaryonsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BaryonsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function BaryonsRead(handle, filename, filenameSize) &
      bind(C, name='BaryonsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BaryonsRead
end function BaryonsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function BaryonsWrite(handle, filename, filenameSize) &
      bind(C, name='BaryonsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BaryonsWrite
end function BaryonsWrite

!! Print to standard output, in our prettyprinting format
function BaryonsPrint(handle) &
      bind(C, name='BaryonsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonsPrint
end function BaryonsPrint

!! Print to standard output, as XML
function BaryonsPrintXML(handle) &
      bind(C, name='BaryonsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonsPrintXML
end function BaryonsPrintXML

!! Print to standard output, as JSON
function BaryonsPrintJSON(handle) &
      bind(C, name='BaryonsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonsPrintJSON
end function BaryonsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: baryon
!! -----------------------------------------------------------------------------

!! Has
function BaryonsBaryonHas(handle) &
      bind(C, name='BaryonsBaryonHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonsBaryonHas
end function BaryonsBaryonHas

!! Clear
subroutine BaryonsBaryonClear(handle) &
      bind(C, name='BaryonsBaryonClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BaryonsBaryonClear

!! Size
function BaryonsBaryonSize(handle) &
      bind(C, name='BaryonsBaryonSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: BaryonsBaryonSize
end function BaryonsBaryonSize

!! Add
subroutine BaryonsBaryonAdd(handle, fieldHandle) &
      bind(C, name='BaryonsBaryonAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonsBaryonAdd

!! Get, by index \in [0,size), const
function BaryonsBaryonGetConst(handle, index) &
      bind(C, name='BaryonsBaryonGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: BaryonsBaryonGetConst
end function BaryonsBaryonGetConst

!! Get, by index \in [0,size), non-const
function BaryonsBaryonGet(handle, index) &
      bind(C, name='BaryonsBaryonGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: BaryonsBaryonGet
end function BaryonsBaryonGet

!! Set, by index \in [0,size)
subroutine BaryonsBaryonSet(handle, index, fieldHandle) &
      bind(C, name='BaryonsBaryonSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonsBaryonSet

!! ------------------------
!! Re: metadatum id
!! ------------------------

!! Has, by id
function BaryonsBaryonHasById(handle, meta, metaSize) &
      bind(C, name='BaryonsBaryonHasById')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: BaryonsBaryonHasById
end function BaryonsBaryonHasById

!! Get, by id, const
function BaryonsBaryonGetByIdConst(handle, meta, metaSize) &
      bind(C, name='BaryonsBaryonGetByIdConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: BaryonsBaryonGetByIdConst
end function BaryonsBaryonGetByIdConst

!! Get, by id, non-const
function BaryonsBaryonGetById(handle, meta, metaSize) &
      bind(C, name='BaryonsBaryonGetById')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: BaryonsBaryonGetById
end function BaryonsBaryonGetById

!! Set, by id
subroutine BaryonsBaryonSetById(handle, meta, metaSize, fieldHandle) &
      bind(C, name='BaryonsBaryonSetById')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonsBaryonSetById


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBaryons
