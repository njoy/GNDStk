
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalRMatrix
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function RMatrixDefaultConst() &
      bind(C, name='RMatrixDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function RMatrixDefaultConst

!! Create, default
function RMatrixDefault() &
      bind(C, name='RMatrixDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function RMatrixDefault

!! Create, general, const
function RMatrixCreateConst( &
   label, &
   approximation, &
   boundaryCondition, &
   calculateChannelRadius, &
   supportsAngularReconstruction, &
   PoPs, &
   resonanceReactions, &
   spinGroups, &
   labelSize, &
   approximationSize, &
   boundaryConditionSize &
) &
      bind(C, name='RMatrixCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: approximationSize
   character(c_char), intent(in) :: approximation(approximationSize)
   integer(c_size_t), intent(in), value :: boundaryConditionSize
   character(c_char), intent(in) :: boundaryCondition(boundaryConditionSize)
   logical(c_bool), value, intent(in) :: calculateChannelRadius
   logical(c_bool), value, intent(in) :: supportsAngularReconstruction
   type(c_ptr), value :: PoPs
   type(c_ptr), value :: resonanceReactions
   type(c_ptr), value :: spinGroups
   type(c_ptr) :: handle
end function RMatrixCreateConst

!! Create, general
function RMatrixCreate( &
   label, &
   approximation, &
   boundaryCondition, &
   calculateChannelRadius, &
   supportsAngularReconstruction, &
   PoPs, &
   resonanceReactions, &
   spinGroups, &
   labelSize, &
   approximationSize, &
   boundaryConditionSize &
) &
      bind(C, name='RMatrixCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: approximationSize
   character(c_char), intent(in) :: approximation(approximationSize)
   integer(c_size_t), intent(in), value :: boundaryConditionSize
   character(c_char), intent(in) :: boundaryCondition(boundaryConditionSize)
   logical(c_bool), value, intent(in) :: calculateChannelRadius
   logical(c_bool), value, intent(in) :: supportsAngularReconstruction
   type(c_ptr), value :: PoPs
   type(c_ptr), value :: resonanceReactions
   type(c_ptr), value :: spinGroups
   type(c_ptr) :: handle
end function RMatrixCreate

!! Assign
subroutine RMatrixAssign(handleLHS, handleRHS) &
      bind(C, name='RMatrixAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine RMatrixAssign

!! Delete
subroutine RMatrixDelete(handle) &
      bind(C, name='RMatrixDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine RMatrixDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function RMatrixRead(handle, filename, filenameSize) &
      bind(C, name='RMatrixRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function RMatrixRead

!! Write to file
function RMatrixWrite(handle, filename, filenameSize) &
      bind(C, name='RMatrixWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function RMatrixWrite

!! Print to standard output, in our prettyprinting format
function RMatrixPrint(handle) &
      bind(C, name='RMatrixPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RMatrixPrint

!! Print to standard output, as XML
function RMatrixPrintXML(handle) &
      bind(C, name='RMatrixPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RMatrixPrintXML

!! Print to standard output, as JSON
function RMatrixPrintJSON(handle) &
      bind(C, name='RMatrixPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RMatrixPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function RMatrixLabelHas(handle) &
      bind(C, name='RMatrixLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixLabelHas

!! Get
function RMatrixLabelGet(handle) &
      bind(C, name='RMatrixLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function RMatrixLabelGet

!! Set
subroutine RMatrixLabelSet(handle, label, labelSize) &
      bind(C, name='RMatrixLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine RMatrixLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: approximation
!! -----------------------------------------------------------------------------

!! Has
function RMatrixApproximationHas(handle) &
      bind(C, name='RMatrixApproximationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixApproximationHas

!! Get
function RMatrixApproximationGet(handle) &
      bind(C, name='RMatrixApproximationGet') &
      result(approximation)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: approximation
end function RMatrixApproximationGet

!! Set
subroutine RMatrixApproximationSet(handle, approximation, approximationSize) &
      bind(C, name='RMatrixApproximationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: approximationSize
   character(c_char), intent(in) :: approximation(approximationSize)
end subroutine RMatrixApproximationSet


!! -----------------------------------------------------------------------------
!! Metadatum: boundaryCondition
!! -----------------------------------------------------------------------------

!! Has
function RMatrixBoundaryConditionHas(handle) &
      bind(C, name='RMatrixBoundaryConditionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixBoundaryConditionHas

!! Get
function RMatrixBoundaryConditionGet(handle) &
      bind(C, name='RMatrixBoundaryConditionGet') &
      result(boundaryCondition)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: boundaryCondition
end function RMatrixBoundaryConditionGet

!! Set
subroutine RMatrixBoundaryConditionSet(handle, boundaryCondition, boundaryConditionSize) &
      bind(C, name='RMatrixBoundaryConditionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: boundaryConditionSize
   character(c_char), intent(in) :: boundaryCondition(boundaryConditionSize)
end subroutine RMatrixBoundaryConditionSet


!! -----------------------------------------------------------------------------
!! Metadatum: calculateChannelRadius
!! -----------------------------------------------------------------------------

!! Has
function RMatrixCalculateChannelRadiusHas(handle) &
      bind(C, name='RMatrixCalculateChannelRadiusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixCalculateChannelRadiusHas

!! Get
function RMatrixCalculateChannelRadiusGet(handle) &
      bind(C, name='RMatrixCalculateChannelRadiusGet') &
      result(calculateChannelRadius)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: calculateChannelRadius
end function RMatrixCalculateChannelRadiusGet

!! Set
subroutine RMatrixCalculateChannelRadiusSet(handle, calculateChannelRadius, calculateChannelRadiusSize) &
      bind(C, name='RMatrixCalculateChannelRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: calculateChannelRadiusSize
   character(c_char), intent(in) :: calculateChannelRadius(calculateChannelRadiusSize)
end subroutine RMatrixCalculateChannelRadiusSet


!! -----------------------------------------------------------------------------
!! Metadatum: supportsAngularReconstruction
!! -----------------------------------------------------------------------------

!! Has
function RMatrixSupportsAngularReconstructionHas(handle) &
      bind(C, name='RMatrixSupportsAngularReconstructionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixSupportsAngularReconstructionHas

!! Get
function RMatrixSupportsAngularReconstructionGet(handle) &
      bind(C, name='RMatrixSupportsAngularReconstructionGet') &
      result(supportsAngularReconstruction)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: supportsAngularReconstruction
end function RMatrixSupportsAngularReconstructionGet

!! Set
subroutine RMatrixSupportsAngularReconstructionSet(handle, supportsAngularReconstruction, supportsAngularReconstructionSize) &
      bind(C, name='RMatrixSupportsAngularReconstructionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: supportsAngularReconstructionSize
   character(c_char), intent(in) :: supportsAngularReconstruction(supportsAngularReconstructionSize)
end subroutine RMatrixSupportsAngularReconstructionSet


!! -----------------------------------------------------------------------------
!! Child: PoPs
!! -----------------------------------------------------------------------------

!! Has
function RMatrixPoPsHas(handle) &
      bind(C, name='RMatrixPoPsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixPoPsHas

!! Get, const
function RMatrixPoPsGetConst(handle) &
      bind(C, name='RMatrixPoPsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RMatrixPoPsGetConst

!! Get
function RMatrixPoPsGet(handle) &
      bind(C, name='RMatrixPoPsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RMatrixPoPsGet

!! Set
subroutine RMatrixPoPsSet(handle, fieldHandle) &
      bind(C, name='RMatrixPoPsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine RMatrixPoPsSet


!! -----------------------------------------------------------------------------
!! Child: resonanceReactions
!! -----------------------------------------------------------------------------

!! Has
function RMatrixResonanceReactionsHas(handle) &
      bind(C, name='RMatrixResonanceReactionsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixResonanceReactionsHas

!! Get, const
function RMatrixResonanceReactionsGetConst(handle) &
      bind(C, name='RMatrixResonanceReactionsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RMatrixResonanceReactionsGetConst

!! Get
function RMatrixResonanceReactionsGet(handle) &
      bind(C, name='RMatrixResonanceReactionsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RMatrixResonanceReactionsGet

!! Set
subroutine RMatrixResonanceReactionsSet(handle, fieldHandle) &
      bind(C, name='RMatrixResonanceReactionsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine RMatrixResonanceReactionsSet


!! -----------------------------------------------------------------------------
!! Child: spinGroups
!! -----------------------------------------------------------------------------

!! Has
function RMatrixSpinGroupsHas(handle) &
      bind(C, name='RMatrixSpinGroupsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RMatrixSpinGroupsHas

!! Get, const
function RMatrixSpinGroupsGetConst(handle) &
      bind(C, name='RMatrixSpinGroupsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RMatrixSpinGroupsGetConst

!! Get
function RMatrixSpinGroupsGet(handle) &
      bind(C, name='RMatrixSpinGroupsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RMatrixSpinGroupsGet

!! Set
subroutine RMatrixSpinGroupsSet(handle, fieldHandle) &
      bind(C, name='RMatrixSpinGroupsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine RMatrixSpinGroupsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalRMatrix
