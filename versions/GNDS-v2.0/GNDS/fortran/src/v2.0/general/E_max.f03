
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalE_max
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function E_maxDefaultConst() &
      bind(C, name='E_maxDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function E_maxDefaultConst

!! Create, default
function E_maxDefault() &
      bind(C, name='E_maxDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function E_maxDefault

!! Create, general, const
function E_maxCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='E_maxCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function E_maxCreateConst

!! Create, general
function E_maxCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='E_maxCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function E_maxCreate

!! Assign
subroutine E_maxAssign(handleLHS, handleRHS) &
      bind(C, name='E_maxAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine E_maxAssign

!! Delete
subroutine E_maxDelete(handle) &
      bind(C, name='E_maxDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine E_maxDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function E_maxRead(handle, filename, filenameSize) &
      bind(C, name='E_maxRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function E_maxRead

!! Write to file
function E_maxWrite(handle, filename, filenameSize) &
      bind(C, name='E_maxWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function E_maxWrite

!! Print to standard output, in our prettyprinting format
function E_maxPrint(handle) &
      bind(C, name='E_maxPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function E_maxPrint

!! Print to standard output, as XML
function E_maxPrintXML(handle) &
      bind(C, name='E_maxPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function E_maxPrintXML

!! Print to standard output, as JSON
function E_maxPrintJSON(handle) &
      bind(C, name='E_maxPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function E_maxPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function E_maxValueHas(handle) &
      bind(C, name='E_maxValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function E_maxValueHas

!! Get
function E_maxValueGet(handle) &
      bind(C, name='E_maxValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function E_maxValueGet

!! Set
subroutine E_maxValueSet(handle, value, valueSize) &
      bind(C, name='E_maxValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine E_maxValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function E_maxUnitHas(handle) &
      bind(C, name='E_maxUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function E_maxUnitHas

!! Get
function E_maxUnitGet(handle) &
      bind(C, name='E_maxUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function E_maxUnitGet

!! Set
subroutine E_maxUnitSet(handle, unit, unitSize) &
      bind(C, name='E_maxUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine E_maxUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalE_max
