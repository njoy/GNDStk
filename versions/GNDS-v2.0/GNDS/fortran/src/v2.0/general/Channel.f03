
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalChannel
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ChannelDefaultConst() &
      bind(C, name='ChannelDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ChannelDefaultConst
end function ChannelDefaultConst

!! Create, default, non-const
function ChannelDefault() &
      bind(C, name='ChannelDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ChannelDefault
end function ChannelDefault

!! Create, general, const
function ChannelCreateConst( &
   label, &
   resonanceReaction, &
   L, &
   channelSpin, &
   columnIndex, &
   scatteringRadius, &
   hardSphereRadius, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='ChannelCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), intent(in), value :: L
   integer(c_int), intent(in), value :: channelSpin
   integer(c_int), intent(in), value :: columnIndex
   type(c_ptr), intent(in), value :: scatteringRadius
   type(c_ptr), intent(in), value :: hardSphereRadius
   type(c_ptr) :: ChannelCreateConst
end function ChannelCreateConst

!! Create, general, non-const
function ChannelCreate( &
   label, &
   resonanceReaction, &
   L, &
   channelSpin, &
   columnIndex, &
   scatteringRadius, &
   hardSphereRadius, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='ChannelCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), intent(in), value :: L
   integer(c_int), intent(in), value :: channelSpin
   integer(c_int), intent(in), value :: columnIndex
   type(c_ptr), intent(in), value :: scatteringRadius
   type(c_ptr), intent(in), value :: hardSphereRadius
   type(c_ptr) :: ChannelCreate
end function ChannelCreate

!! Assign
subroutine ChannelAssign(handleLHS, handleRHS) &
      bind(C, name='ChannelAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ChannelAssign

!! Delete
subroutine ChannelDelete(handle) &
      bind(C, name='ChannelDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChannelDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ChannelRead(handle, filename, filenameSize) &
      bind(C, name='ChannelRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ChannelRead
end function ChannelRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ChannelWrite(handle, filename, filenameSize) &
      bind(C, name='ChannelWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ChannelWrite
end function ChannelWrite

!! Print to standard output, in our prettyprinting format
function ChannelPrint(handle) &
      bind(C, name='ChannelPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelPrint
end function ChannelPrint

!! Print to standard output, as XML
function ChannelPrintXML(handle) &
      bind(C, name='ChannelPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelPrintXML
end function ChannelPrintXML

!! Print to standard output, as JSON
function ChannelPrintJSON(handle) &
      bind(C, name='ChannelPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelPrintJSON
end function ChannelPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ChannelLabelHas(handle) &
      bind(C, name='ChannelLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelLabelHas
end function ChannelLabelHas

!! Get
function ChannelLabelGet(handle) &
      bind(C, name='ChannelLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ChannelLabelGet
end function ChannelLabelGet

!! Set
subroutine ChannelLabelSet(handle, label, labelSize) &
      bind(C, name='ChannelLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ChannelLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: resonanceReaction
!! -----------------------------------------------------------------------------

!! Has
function ChannelResonanceReactionHas(handle) &
      bind(C, name='ChannelResonanceReactionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelResonanceReactionHas
end function ChannelResonanceReactionHas

!! Get
function ChannelResonanceReactionGet(handle) &
      bind(C, name='ChannelResonanceReactionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ChannelResonanceReactionGet
end function ChannelResonanceReactionGet

!! Set
subroutine ChannelResonanceReactionSet(handle, resonanceReaction, resonanceReactionSize) &
      bind(C, name='ChannelResonanceReactionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
end subroutine ChannelResonanceReactionSet


!! -----------------------------------------------------------------------------
!! Metadatum: L
!! -----------------------------------------------------------------------------

!! Has
function ChannelLHas(handle) &
      bind(C, name='ChannelLHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelLHas
end function ChannelLHas

!! Get
function ChannelLGet(handle) &
      bind(C, name='ChannelLGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelLGet
end function ChannelLGet

!! Set
subroutine ChannelLSet(handle, L) &
      bind(C, name='ChannelLSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: L
end subroutine ChannelLSet


!! -----------------------------------------------------------------------------
!! Metadatum: channelSpin
!! -----------------------------------------------------------------------------

!! Has
function ChannelChannelSpinHas(handle) &
      bind(C, name='ChannelChannelSpinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelChannelSpinHas
end function ChannelChannelSpinHas

!! Get
function ChannelChannelSpinGet(handle) &
      bind(C, name='ChannelChannelSpinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelChannelSpinGet
end function ChannelChannelSpinGet

!! Set
subroutine ChannelChannelSpinSet(handle, channelSpin) &
      bind(C, name='ChannelChannelSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: channelSpin
end subroutine ChannelChannelSpinSet


!! -----------------------------------------------------------------------------
!! Metadatum: columnIndex
!! -----------------------------------------------------------------------------

!! Has
function ChannelColumnIndexHas(handle) &
      bind(C, name='ChannelColumnIndexHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelColumnIndexHas
end function ChannelColumnIndexHas

!! Get
function ChannelColumnIndexGet(handle) &
      bind(C, name='ChannelColumnIndexGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelColumnIndexGet
end function ChannelColumnIndexGet

!! Set
subroutine ChannelColumnIndexSet(handle, columnIndex) &
      bind(C, name='ChannelColumnIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: columnIndex
end subroutine ChannelColumnIndexSet


!! -----------------------------------------------------------------------------
!! Child: scatteringRadius
!! -----------------------------------------------------------------------------

!! Has
function ChannelScatteringRadiusHas(handle) &
      bind(C, name='ChannelScatteringRadiusHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelScatteringRadiusHas
end function ChannelScatteringRadiusHas

!! Get, const
function ChannelScatteringRadiusGetConst(handle) &
      bind(C, name='ChannelScatteringRadiusGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ChannelScatteringRadiusGetConst
end function ChannelScatteringRadiusGetConst

!! Get, non-const
function ChannelScatteringRadiusGet(handle) &
      bind(C, name='ChannelScatteringRadiusGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ChannelScatteringRadiusGet
end function ChannelScatteringRadiusGet

!! Set
subroutine ChannelScatteringRadiusSet(handle, fieldHandle) &
      bind(C, name='ChannelScatteringRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChannelScatteringRadiusSet


!! -----------------------------------------------------------------------------
!! Child: hardSphereRadius
!! -----------------------------------------------------------------------------

!! Has
function ChannelHardSphereRadiusHas(handle) &
      bind(C, name='ChannelHardSphereRadiusHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChannelHardSphereRadiusHas
end function ChannelHardSphereRadiusHas

!! Get, const
function ChannelHardSphereRadiusGetConst(handle) &
      bind(C, name='ChannelHardSphereRadiusGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ChannelHardSphereRadiusGetConst
end function ChannelHardSphereRadiusGetConst

!! Get, non-const
function ChannelHardSphereRadiusGet(handle) &
      bind(C, name='ChannelHardSphereRadiusGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ChannelHardSphereRadiusGet
end function ChannelHardSphereRadiusGet

!! Set
subroutine ChannelHardSphereRadiusSet(handle, fieldHandle) &
      bind(C, name='ChannelHardSphereRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChannelHardSphereRadiusSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalChannel
