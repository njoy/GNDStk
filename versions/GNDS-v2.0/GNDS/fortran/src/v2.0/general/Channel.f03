
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalChannel
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ChannelDefaultConst() &
      bind(C, name='ChannelDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ChannelDefaultConst

!! Create, default
function ChannelDefault() &
      bind(C, name='ChannelDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ChannelDefault

!! Create, general, const
function ChannelCreateConst( &
   label, &
   resonanceReaction, &
   L, &
   channelSpin, &
   columnIndex, &
   scatteringRadius, &
   hardSphereRadius, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='ChannelCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), value, intent(in) :: L
   integer(c_int), value, intent(in) :: channelSpin
   integer(c_int), value, intent(in) :: columnIndex
   type(c_ptr), value :: scatteringRadius
   type(c_ptr), value :: hardSphereRadius
   type(c_ptr) :: handle
end function ChannelCreateConst

!! Create, general
function ChannelCreate( &
   label, &
   resonanceReaction, &
   L, &
   channelSpin, &
   columnIndex, &
   scatteringRadius, &
   hardSphereRadius, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='ChannelCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), value, intent(in) :: L
   integer(c_int), value, intent(in) :: channelSpin
   integer(c_int), value, intent(in) :: columnIndex
   type(c_ptr), value :: scatteringRadius
   type(c_ptr), value :: hardSphereRadius
   type(c_ptr) :: handle
end function ChannelCreate

!! Assign
subroutine ChannelAssign(handleLHS, handleRHS) &
      bind(C, name='ChannelAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ChannelAssign

!! Delete
subroutine ChannelDelete(handle) &
      bind(C, name='ChannelDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChannelDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ChannelRead(handle, filename, filenameSize) &
      bind(C, name='ChannelRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ChannelRead

!! Write to file
function ChannelWrite(handle, filename, filenameSize) &
      bind(C, name='ChannelWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ChannelWrite

!! Print to standard output, in our prettyprinting format
function ChannelPrint(handle) &
      bind(C, name='ChannelPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChannelPrint

!! Print to standard output, as XML
function ChannelPrintXML(handle) &
      bind(C, name='ChannelPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChannelPrintXML

!! Print to standard output, as JSON
function ChannelPrintJSON(handle) &
      bind(C, name='ChannelPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChannelPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ChannelLabelHas(handle) &
      bind(C, name='ChannelLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelLabelHas

!! Get
function ChannelLabelGet(handle) &
      bind(C, name='ChannelLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ChannelLabelGet

!! Set
subroutine ChannelLabelSet(handle, label, labelSize) &
      bind(C, name='ChannelLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ChannelLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: resonanceReaction
!! -----------------------------------------------------------------------------

!! Has
function ChannelResonanceReactionHas(handle) &
      bind(C, name='ChannelResonanceReactionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelResonanceReactionHas

!! Get
function ChannelResonanceReactionGet(handle) &
      bind(C, name='ChannelResonanceReactionGet') &
      result(resonanceReaction)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resonanceReaction
end function ChannelResonanceReactionGet

!! Set
subroutine ChannelResonanceReactionSet(handle, resonanceReaction, resonanceReactionSize) &
      bind(C, name='ChannelResonanceReactionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
end subroutine ChannelResonanceReactionSet


!! -----------------------------------------------------------------------------
!! Metadatum: L
!! -----------------------------------------------------------------------------

!! Has
function ChannelLHas(handle) &
      bind(C, name='ChannelLHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelLHas

!! Get
function ChannelLGet(handle) &
      bind(C, name='ChannelLGet') &
      result(L)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: L
end function ChannelLGet

!! Set
subroutine ChannelLSet(handle, L, LSize) &
      bind(C, name='ChannelLSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: LSize
   character(c_char), intent(in) :: L(LSize)
end subroutine ChannelLSet


!! -----------------------------------------------------------------------------
!! Metadatum: channelSpin
!! -----------------------------------------------------------------------------

!! Has
function ChannelChannelSpinHas(handle) &
      bind(C, name='ChannelChannelSpinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelChannelSpinHas

!! Get
function ChannelChannelSpinGet(handle) &
      bind(C, name='ChannelChannelSpinGet') &
      result(channelSpin)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: channelSpin
end function ChannelChannelSpinGet

!! Set
subroutine ChannelChannelSpinSet(handle, channelSpin, channelSpinSize) &
      bind(C, name='ChannelChannelSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: channelSpinSize
   character(c_char), intent(in) :: channelSpin(channelSpinSize)
end subroutine ChannelChannelSpinSet


!! -----------------------------------------------------------------------------
!! Metadatum: columnIndex
!! -----------------------------------------------------------------------------

!! Has
function ChannelColumnIndexHas(handle) &
      bind(C, name='ChannelColumnIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelColumnIndexHas

!! Get
function ChannelColumnIndexGet(handle) &
      bind(C, name='ChannelColumnIndexGet') &
      result(columnIndex)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: columnIndex
end function ChannelColumnIndexGet

!! Set
subroutine ChannelColumnIndexSet(handle, columnIndex, columnIndexSize) &
      bind(C, name='ChannelColumnIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: columnIndexSize
   character(c_char), intent(in) :: columnIndex(columnIndexSize)
end subroutine ChannelColumnIndexSet


!! -----------------------------------------------------------------------------
!! Child: scatteringRadius
!! -----------------------------------------------------------------------------

!! Has
function ChannelScatteringRadiusHas(handle) &
      bind(C, name='ChannelScatteringRadiusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelScatteringRadiusHas

!! Get, const
function ChannelScatteringRadiusGetConst(handle) &
      bind(C, name='ChannelScatteringRadiusGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ChannelScatteringRadiusGetConst

!! Get
function ChannelScatteringRadiusGet(handle) &
      bind(C, name='ChannelScatteringRadiusGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ChannelScatteringRadiusGet

!! Set
subroutine ChannelScatteringRadiusSet(handle, fieldHandle) &
      bind(C, name='ChannelScatteringRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ChannelScatteringRadiusSet


!! -----------------------------------------------------------------------------
!! Child: hardSphereRadius
!! -----------------------------------------------------------------------------

!! Has
function ChannelHardSphereRadiusHas(handle) &
      bind(C, name='ChannelHardSphereRadiusHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChannelHardSphereRadiusHas

!! Get, const
function ChannelHardSphereRadiusGetConst(handle) &
      bind(C, name='ChannelHardSphereRadiusGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ChannelHardSphereRadiusGetConst

!! Get
function ChannelHardSphereRadiusGet(handle) &
      bind(C, name='ChannelHardSphereRadiusGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ChannelHardSphereRadiusGet

!! Set
subroutine ChannelHardSphereRadiusSet(handle, fieldHandle) &
      bind(C, name='ChannelHardSphereRadiusSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ChannelHardSphereRadiusSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalChannel
