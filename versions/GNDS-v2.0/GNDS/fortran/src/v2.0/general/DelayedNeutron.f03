
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedNeutron
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedNeutronDefaultConst() &
      bind(C, name='DelayedNeutronDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedNeutronDefaultConst

!! Create, default
function DelayedNeutronDefault() &
      bind(C, name='DelayedNeutronDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedNeutronDefault

!! Create, general, const
function DelayedNeutronCreateConst( &
   label, &
   rate, &
   product, &
   labelSize &
) &
      bind(C, name='DelayedNeutronCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: rate
   type(c_ptr), value :: product
   type(c_ptr) :: handle
end function DelayedNeutronCreateConst

!! Create, general
function DelayedNeutronCreate( &
   label, &
   rate, &
   product, &
   labelSize &
) &
      bind(C, name='DelayedNeutronCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: rate
   type(c_ptr), value :: product
   type(c_ptr) :: handle
end function DelayedNeutronCreate

!! Assign
subroutine DelayedNeutronAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedNeutronAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DelayedNeutronAssign

!! Delete
subroutine DelayedNeutronDelete(handle) &
      bind(C, name='DelayedNeutronDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedNeutronDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DelayedNeutronRead(handle, filename, filenameSize) &
      bind(C, name='DelayedNeutronRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedNeutronRead

!! Write to file
function DelayedNeutronWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedNeutronWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedNeutronWrite

!! Print to standard output, in our prettyprinting format
function DelayedNeutronPrint(handle) &
      bind(C, name='DelayedNeutronPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronPrint

!! Print to standard output, as XML
function DelayedNeutronPrintXML(handle) &
      bind(C, name='DelayedNeutronPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronPrintXML

!! Print to standard output, as JSON
function DelayedNeutronPrintJSON(handle) &
      bind(C, name='DelayedNeutronPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function DelayedNeutronLabelHas(handle) &
      bind(C, name='DelayedNeutronLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedNeutronLabelHas

!! Get
function DelayedNeutronLabelGet(handle) &
      bind(C, name='DelayedNeutronLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function DelayedNeutronLabelGet

!! Set
subroutine DelayedNeutronLabelSet(handle, label, labelSize) &
      bind(C, name='DelayedNeutronLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine DelayedNeutronLabelSet


!! -----------------------------------------------------------------------------
!! Child: rate
!! -----------------------------------------------------------------------------

!! Has
function DelayedNeutronRateHas(handle) &
      bind(C, name='DelayedNeutronRateHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedNeutronRateHas

!! Get, const
function DelayedNeutronRateGetConst(handle) &
      bind(C, name='DelayedNeutronRateGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronRateGetConst

!! Get
function DelayedNeutronRateGet(handle) &
      bind(C, name='DelayedNeutronRateGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronRateGet

!! Set
subroutine DelayedNeutronRateSet(handle, fieldHandle) &
      bind(C, name='DelayedNeutronRateSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DelayedNeutronRateSet


!! -----------------------------------------------------------------------------
!! Child: product
!! -----------------------------------------------------------------------------

!! Has
function DelayedNeutronProductHas(handle) &
      bind(C, name='DelayedNeutronProductHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedNeutronProductHas

!! Get, const
function DelayedNeutronProductGetConst(handle) &
      bind(C, name='DelayedNeutronProductGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronProductGetConst

!! Get
function DelayedNeutronProductGet(handle) &
      bind(C, name='DelayedNeutronProductGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronProductGet

!! Set
subroutine DelayedNeutronProductSet(handle, fieldHandle) &
      bind(C, name='DelayedNeutronProductSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DelayedNeutronProductSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedNeutron
