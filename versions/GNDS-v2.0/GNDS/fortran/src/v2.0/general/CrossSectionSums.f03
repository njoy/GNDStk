
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCrossSectionSums
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CrossSectionSumsDefaultConst() &
      bind(C, name='CrossSectionSumsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CrossSectionSumsDefaultConst

!! Create, default
function CrossSectionSumsDefault() &
      bind(C, name='CrossSectionSumsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CrossSectionSumsDefault

!! Create, general, const
function CrossSectionSumsCreateConst( &
   crossSectionSum, crossSectionSumSize &
) &
      bind(C, name='CrossSectionSumsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: crossSectionSumSize
   type(c_ptr) :: crossSectionSum(crossSectionSumSize)
   type(c_ptr) :: handle
end function CrossSectionSumsCreateConst

!! Create, general
function CrossSectionSumsCreate( &
   crossSectionSum, crossSectionSumSize &
) &
      bind(C, name='CrossSectionSumsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: crossSectionSumSize
   type(c_ptr) :: crossSectionSum(crossSectionSumSize)
   type(c_ptr) :: handle
end function CrossSectionSumsCreate

!! Assign
subroutine CrossSectionSumsAssign(handleLHS, handleRHS) &
      bind(C, name='CrossSectionSumsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CrossSectionSumsAssign

!! Delete
subroutine CrossSectionSumsDelete(handle) &
      bind(C, name='CrossSectionSumsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionSumsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CrossSectionSumsRead(handle, filename, filenameSize) &
      bind(C, name='CrossSectionSumsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CrossSectionSumsRead

!! Write to file
function CrossSectionSumsWrite(handle, filename, filenameSize) &
      bind(C, name='CrossSectionSumsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CrossSectionSumsWrite

!! Print to standard output, in our prettyprinting format
function CrossSectionSumsPrint(handle) &
      bind(C, name='CrossSectionSumsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CrossSectionSumsPrint

!! Print to standard output, as XML
function CrossSectionSumsPrintXML(handle) &
      bind(C, name='CrossSectionSumsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CrossSectionSumsPrintXML

!! Print to standard output, as JSON
function CrossSectionSumsPrintJSON(handle) &
      bind(C, name='CrossSectionSumsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CrossSectionSumsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: crossSectionSum
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionSumsCrossSectionSumHas(handle) &
      bind(C, name='CrossSectionSumsCrossSectionSumHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionSumsCrossSectionSumHas

!! Clear
subroutine CrossSectionSumsCrossSectionSumClear(handle) &
      bind(C, name='CrossSectionSumsCrossSectionSumClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionSumsCrossSectionSumClear

!! Size
function CrossSectionSumsCrossSectionSumSize(handle) &
      bind(C, name='CrossSectionSumsCrossSectionSumSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function CrossSectionSumsCrossSectionSumSize

!! Add
subroutine CrossSectionSumsCrossSectionSumAdd(handle, fieldHandle) &
      bind(C, name='CrossSectionSumsCrossSectionSumAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionSumsCrossSectionSumAdd

!! Get, by index \in [0,size), const
function CrossSectionSumsCrossSectionSumGetConst(handle, index) &
      bind(C, name='CrossSectionSumsCrossSectionSumGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function CrossSectionSumsCrossSectionSumGetConst

!! Get, by index \in [0,size)
function CrossSectionSumsCrossSectionSumGet(handle, index) &
      bind(C, name='CrossSectionSumsCrossSectionSumGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function CrossSectionSumsCrossSectionSumGet

!! Set, by index \in [0,size)
subroutine CrossSectionSumsCrossSectionSumSet(handle, index, fieldHandle) &
      bind(C, name='CrossSectionSumsCrossSectionSumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionSumsCrossSectionSumSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function CrossSectionSumsCrossSectionSumHasByLabel(handle, meta, metaSize) &
      bind(C, name='CrossSectionSumsCrossSectionSumHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function CrossSectionSumsCrossSectionSumHasByLabel

!! Get, by label, const
function CrossSectionSumsCrossSectionSumGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='CrossSectionSumsCrossSectionSumGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function CrossSectionSumsCrossSectionSumGetByLabelConst

!! Get, by label
function CrossSectionSumsCrossSectionSumGetByLabel(handle, meta, metaSize) &
      bind(C, name='CrossSectionSumsCrossSectionSumGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function CrossSectionSumsCrossSectionSumGetByLabel

!! Set, by label
subroutine CrossSectionSumsCrossSectionSumSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='CrossSectionSumsCrossSectionSumSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionSumsCrossSectionSumSetByLabel

!! ------------------------
!! Re: metadatum ENDF_MT
!! ------------------------

!! Has, by ENDF_MT
function CrossSectionSumsCrossSectionSumHasByENDFMT(handle, meta) &
      bind(C, name='CrossSectionSumsCrossSectionSumHasByENDFMT') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function CrossSectionSumsCrossSectionSumHasByENDFMT

!! Get, by ENDF_MT, const
function CrossSectionSumsCrossSectionSumGetByENDFMTConst(handle, meta) &
      bind(C, name='CrossSectionSumsCrossSectionSumGetByENDFMTConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function CrossSectionSumsCrossSectionSumGetByENDFMTConst

!! Get, by ENDF_MT
function CrossSectionSumsCrossSectionSumGetByENDFMT(handle, meta) &
      bind(C, name='CrossSectionSumsCrossSectionSumGetByENDFMT') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function CrossSectionSumsCrossSectionSumGetByENDFMT

!! Set, by ENDF_MT
subroutine CrossSectionSumsCrossSectionSumSetByENDFMT(handle, meta, fieldHandle) &
      bind(C, name='CrossSectionSumsCrossSectionSumSetByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionSumsCrossSectionSumSetByENDFMT


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCrossSectionSums
