
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEnergyAngular
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EnergyAngularDefaultConst() &
      bind(C, name='EnergyAngularDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EnergyAngularDefaultConst
end function EnergyAngularDefaultConst

!! Create, default
function EnergyAngularDefault() &
      bind(C, name='EnergyAngularDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EnergyAngularDefault
end function EnergyAngularDefault

!! Create, general, const
function EnergyAngularCreateConst( &
   label, &
   productFrame, &
   XYs3d, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='EnergyAngularCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: XYs3d
   type(c_ptr) :: EnergyAngularCreateConst
end function EnergyAngularCreateConst

!! Create, general
function EnergyAngularCreate( &
   label, &
   productFrame, &
   XYs3d, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='EnergyAngularCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: XYs3d
   type(c_ptr) :: EnergyAngularCreate
end function EnergyAngularCreate

!! Assign
subroutine EnergyAngularAssign(handleLHS, handleRHS) &
      bind(C, name='EnergyAngularAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine EnergyAngularAssign

!! Delete
subroutine EnergyAngularDelete(handle) &
      bind(C, name='EnergyAngularDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EnergyAngularDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function EnergyAngularRead(handle, filename, filenameSize) &
      bind(C, name='EnergyAngularRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EnergyAngularRead
end function EnergyAngularRead

!! Write to file
function EnergyAngularWrite(handle, filename, filenameSize) &
      bind(C, name='EnergyAngularWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EnergyAngularWrite
end function EnergyAngularWrite

!! Print to standard output, in our prettyprinting format
function EnergyAngularPrint(handle) &
      bind(C, name='EnergyAngularPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EnergyAngularPrint
end function EnergyAngularPrint

!! Print to standard output, as XML
function EnergyAngularPrintXML(handle) &
      bind(C, name='EnergyAngularPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EnergyAngularPrintXML
end function EnergyAngularPrintXML

!! Print to standard output, as JSON
function EnergyAngularPrintJSON(handle) &
      bind(C, name='EnergyAngularPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EnergyAngularPrintJSON
end function EnergyAngularPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function EnergyAngularLabelHas(handle) &
      bind(C, name='EnergyAngularLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EnergyAngularLabelHas
end function EnergyAngularLabelHas

!! Get
function EnergyAngularLabelGet(handle) &
      bind(C, name='EnergyAngularLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EnergyAngularLabelGet
end function EnergyAngularLabelGet

!! Set
subroutine EnergyAngularLabelSet(handle, label, labelSize) &
      bind(C, name='EnergyAngularLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine EnergyAngularLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function EnergyAngularProductFrameHas(handle) &
      bind(C, name='EnergyAngularProductFrameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EnergyAngularProductFrameHas
end function EnergyAngularProductFrameHas

!! Get
function EnergyAngularProductFrameGet(handle) &
      bind(C, name='EnergyAngularProductFrameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EnergyAngularProductFrameGet
end function EnergyAngularProductFrameGet

!! Set
subroutine EnergyAngularProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='EnergyAngularProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine EnergyAngularProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: XYs3d
!! -----------------------------------------------------------------------------

!! Has
function EnergyAngularXYs3dHas(handle) &
      bind(C, name='EnergyAngularXYs3dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EnergyAngularXYs3dHas
end function EnergyAngularXYs3dHas

!! Get, const
function EnergyAngularXYs3dGetConst(handle) &
      bind(C, name='EnergyAngularXYs3dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EnergyAngularXYs3dGetConst
end function EnergyAngularXYs3dGetConst

!! Get
function EnergyAngularXYs3dGet(handle) &
      bind(C, name='EnergyAngularXYs3dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EnergyAngularXYs3dGet
end function EnergyAngularXYs3dGet

!! Set
subroutine EnergyAngularXYs3dSet(handle, fieldHandle) &
      bind(C, name='EnergyAngularXYs3dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyAngularXYs3dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEnergyAngular
