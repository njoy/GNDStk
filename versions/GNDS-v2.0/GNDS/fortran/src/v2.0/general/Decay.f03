
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDecay
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DecayDefaultConst() &
      bind(C, name='DecayDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DecayDefaultConst

!! Create, default
function DecayDefault() &
      bind(C, name='DecayDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DecayDefault

!! Create, general, const
function DecayCreateConst( &
   index, &
   mode, &
   complete, &
   products, &
   modeSize &
) &
      bind(C, name='DecayCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: modeSize
   character(c_char), intent(in) :: mode(modeSize)
   logical(c_bool), value, intent(in) :: complete
   type(c_ptr), value :: products
   type(c_ptr) :: handle
end function DecayCreateConst

!! Create, general
function DecayCreate( &
   index, &
   mode, &
   complete, &
   products, &
   modeSize &
) &
      bind(C, name='DecayCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: modeSize
   character(c_char), intent(in) :: mode(modeSize)
   logical(c_bool), value, intent(in) :: complete
   type(c_ptr), value :: products
   type(c_ptr) :: handle
end function DecayCreate

!! Assign
subroutine DecayAssign(handleLHS, handleRHS) &
      bind(C, name='DecayAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DecayAssign

!! Delete
subroutine DecayDelete(handle) &
      bind(C, name='DecayDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DecayDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DecayRead(handle, filename, filenameSize) &
      bind(C, name='DecayRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DecayRead

!! Write to file
function DecayWrite(handle, filename, filenameSize) &
      bind(C, name='DecayWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DecayWrite

!! Print to standard output, in our prettyprinting format
function DecayPrint(handle) &
      bind(C, name='DecayPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayPrint

!! Print to standard output, as XML
function DecayPrintXML(handle) &
      bind(C, name='DecayPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayPrintXML

!! Print to standard output, as JSON
function DecayPrintJSON(handle) &
      bind(C, name='DecayPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function DecayIndexHas(handle) &
      bind(C, name='DecayIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayIndexHas

!! Get
function DecayIndexGet(handle) &
      bind(C, name='DecayIndexGet') &
      result(index)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: index
end function DecayIndexGet

!! Set
subroutine DecayIndexSet(handle, index, indexSize) &
      bind(C, name='DecayIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine DecayIndexSet


!! -----------------------------------------------------------------------------
!! Metadatum: mode
!! -----------------------------------------------------------------------------

!! Has
function DecayModeHas(handle) &
      bind(C, name='DecayModeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeHas

!! Get
function DecayModeGet(handle) &
      bind(C, name='DecayModeGet') &
      result(mode)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: mode
end function DecayModeGet

!! Set
subroutine DecayModeSet(handle, mode, modeSize) &
      bind(C, name='DecayModeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: modeSize
   character(c_char), intent(in) :: mode(modeSize)
end subroutine DecayModeSet


!! -----------------------------------------------------------------------------
!! Metadatum: complete
!! -----------------------------------------------------------------------------

!! Has
function DecayCompleteHas(handle) &
      bind(C, name='DecayCompleteHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayCompleteHas

!! Get
function DecayCompleteGet(handle) &
      bind(C, name='DecayCompleteGet') &
      result(complete)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: complete
end function DecayCompleteGet

!! Set
subroutine DecayCompleteSet(handle, complete, completeSize) &
      bind(C, name='DecayCompleteSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: completeSize
   character(c_char), intent(in) :: complete(completeSize)
end subroutine DecayCompleteSet


!! -----------------------------------------------------------------------------
!! Child: products
!! -----------------------------------------------------------------------------

!! Has
function DecayProductsHas(handle) &
      bind(C, name='DecayProductsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayProductsHas

!! Get, const
function DecayProductsGetConst(handle) &
      bind(C, name='DecayProductsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayProductsGetConst

!! Get
function DecayProductsGet(handle) &
      bind(C, name='DecayProductsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayProductsGet

!! Set
subroutine DecayProductsSet(handle, fieldHandle) &
      bind(C, name='DecayProductsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayProductsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDecay
