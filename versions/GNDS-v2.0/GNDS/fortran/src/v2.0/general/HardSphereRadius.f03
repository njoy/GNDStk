
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalHardSphereRadius
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function HardSphereRadiusDefaultConst() &
      bind(C, name='HardSphereRadiusDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: HardSphereRadiusDefaultConst
end function HardSphereRadiusDefaultConst

!! Create, default, non-const
function HardSphereRadiusDefault() &
      bind(C, name='HardSphereRadiusDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: HardSphereRadiusDefault
end function HardSphereRadiusDefault

!! Create, general, const
function HardSphereRadiusCreateConst( &
   constant1d &
) &
      bind(C, name='HardSphereRadiusCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr) :: HardSphereRadiusCreateConst
end function HardSphereRadiusCreateConst

!! Create, general, non-const
function HardSphereRadiusCreate( &
   constant1d &
) &
      bind(C, name='HardSphereRadiusCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr) :: HardSphereRadiusCreate
end function HardSphereRadiusCreate

!! Assign
subroutine HardSphereRadiusAssign(handleLHS, handleRHS) &
      bind(C, name='HardSphereRadiusAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine HardSphereRadiusAssign

!! Delete
subroutine HardSphereRadiusDelete(handle) &
      bind(C, name='HardSphereRadiusDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine HardSphereRadiusDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function HardSphereRadiusRead(handle, filename, filenameSize) &
      bind(C, name='HardSphereRadiusRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: HardSphereRadiusRead
end function HardSphereRadiusRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function HardSphereRadiusWrite(handle, filename, filenameSize) &
      bind(C, name='HardSphereRadiusWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: HardSphereRadiusWrite
end function HardSphereRadiusWrite

!! Print to standard output, in our prettyprinting format
function HardSphereRadiusPrint(handle) &
      bind(C, name='HardSphereRadiusPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HardSphereRadiusPrint
end function HardSphereRadiusPrint

!! Print to standard output, as XML
function HardSphereRadiusPrintXML(handle) &
      bind(C, name='HardSphereRadiusPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HardSphereRadiusPrintXML
end function HardSphereRadiusPrintXML

!! Print to standard output, as JSON
function HardSphereRadiusPrintJSON(handle) &
      bind(C, name='HardSphereRadiusPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HardSphereRadiusPrintJSON
end function HardSphereRadiusPrintJSON


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function HardSphereRadiusConstant1dHas(handle) &
      bind(C, name='HardSphereRadiusConstant1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: HardSphereRadiusConstant1dHas
end function HardSphereRadiusConstant1dHas

!! Get, const
function HardSphereRadiusConstant1dGetConst(handle) &
      bind(C, name='HardSphereRadiusConstant1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: HardSphereRadiusConstant1dGetConst
end function HardSphereRadiusConstant1dGetConst

!! Get, non-const
function HardSphereRadiusConstant1dGet(handle) &
      bind(C, name='HardSphereRadiusConstant1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: HardSphereRadiusConstant1dGet
end function HardSphereRadiusConstant1dGet

!! Set
subroutine HardSphereRadiusConstant1dSet(handle, fieldHandle) &
      bind(C, name='HardSphereRadiusConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine HardSphereRadiusConstant1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalHardSphereRadius
