
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalHardSphereRadius
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function HardSphereRadiusDefaultConst() &
      bind(C, name='HardSphereRadiusDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function HardSphereRadiusDefaultConst

!! Create, default
function HardSphereRadiusDefault() &
      bind(C, name='HardSphereRadiusDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function HardSphereRadiusDefault

!! Create, general, const
function HardSphereRadiusCreateConst( &
   constant1d &
) &
      bind(C, name='HardSphereRadiusCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: constant1d
   type(c_ptr) :: handle
end function HardSphereRadiusCreateConst

!! Create, general
function HardSphereRadiusCreate( &
   constant1d &
) &
      bind(C, name='HardSphereRadiusCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: constant1d
   type(c_ptr) :: handle
end function HardSphereRadiusCreate

!! Assign
subroutine HardSphereRadiusAssign(handleLHS, handleRHS) &
      bind(C, name='HardSphereRadiusAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine HardSphereRadiusAssign

!! Delete
subroutine HardSphereRadiusDelete(handle) &
      bind(C, name='HardSphereRadiusDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine HardSphereRadiusDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function HardSphereRadiusRead(handle, filename, filenameSize) &
      bind(C, name='HardSphereRadiusRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function HardSphereRadiusRead

!! Write to file
function HardSphereRadiusWrite(handle, filename, filenameSize) &
      bind(C, name='HardSphereRadiusWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function HardSphereRadiusWrite

!! Print to standard output, in our prettyprinting format
function HardSphereRadiusPrint(handle) &
      bind(C, name='HardSphereRadiusPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function HardSphereRadiusPrint

!! Print to standard output, as XML
function HardSphereRadiusPrintXML(handle) &
      bind(C, name='HardSphereRadiusPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function HardSphereRadiusPrintXML

!! Print to standard output, as JSON
function HardSphereRadiusPrintJSON(handle) &
      bind(C, name='HardSphereRadiusPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function HardSphereRadiusPrintJSON


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function HardSphereRadiusConstant1dHas(handle) &
      bind(C, name='HardSphereRadiusConstant1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function HardSphereRadiusConstant1dHas

!! Get, const
function HardSphereRadiusConstant1dGetConst(handle) &
      bind(C, name='HardSphereRadiusConstant1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function HardSphereRadiusConstant1dGetConst

!! Get
function HardSphereRadiusConstant1dGet(handle) &
      bind(C, name='HardSphereRadiusConstant1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function HardSphereRadiusConstant1dGet

!! Set
subroutine HardSphereRadiusConstant1dSet(handle, fieldHandle) &
      bind(C, name='HardSphereRadiusConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine HardSphereRadiusConstant1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalHardSphereRadius
