
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalConversion
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ConversionDefaultConst() &
      bind(C, name='ConversionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ConversionDefaultConst
end function ConversionDefaultConst

!! Create, default, non-const
function ConversionDefault() &
      bind(C, name='ConversionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ConversionDefault
end function ConversionDefault

!! Create, general, const
function ConversionCreateConst( &
   flags, &
   href, &
   flagsSize, &
   hrefSize &
) &
      bind(C, name='ConversionCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: flagsSize
   character(c_char), intent(in) :: flags(flagsSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: ConversionCreateConst
end function ConversionCreateConst

!! Create, general, non-const
function ConversionCreate( &
   flags, &
   href, &
   flagsSize, &
   hrefSize &
) &
      bind(C, name='ConversionCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: flagsSize
   character(c_char), intent(in) :: flags(flagsSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: ConversionCreate
end function ConversionCreate

!! Assign
subroutine ConversionAssign(handleLHS, handleRHS) &
      bind(C, name='ConversionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ConversionAssign

!! Delete
subroutine ConversionDelete(handle) &
      bind(C, name='ConversionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ConversionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ConversionRead(handle, filename, filenameSize) &
      bind(C, name='ConversionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ConversionRead
end function ConversionRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ConversionWrite(handle, filename, filenameSize) &
      bind(C, name='ConversionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ConversionWrite
end function ConversionWrite

!! Print to standard output, in our prettyprinting format
function ConversionPrint(handle) &
      bind(C, name='ConversionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ConversionPrint
end function ConversionPrint

!! Print to standard output, as XML
function ConversionPrintXML(handle) &
      bind(C, name='ConversionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ConversionPrintXML
end function ConversionPrintXML

!! Print to standard output, as JSON
function ConversionPrintJSON(handle) &
      bind(C, name='ConversionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ConversionPrintJSON
end function ConversionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: flags
!! -----------------------------------------------------------------------------

!! Has
function ConversionFlagsHas(handle) &
      bind(C, name='ConversionFlagsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ConversionFlagsHas
end function ConversionFlagsHas

!! Get
function ConversionFlagsGet(handle) &
      bind(C, name='ConversionFlagsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ConversionFlagsGet
end function ConversionFlagsGet

!! Set
subroutine ConversionFlagsSet(handle, flags, flagsSize) &
      bind(C, name='ConversionFlagsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: flagsSize
   character(c_char), intent(in) :: flags(flagsSize)
end subroutine ConversionFlagsSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ConversionHrefHas(handle) &
      bind(C, name='ConversionHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ConversionHrefHas
end function ConversionHrefHas

!! Get
function ConversionHrefGet(handle) &
      bind(C, name='ConversionHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ConversionHrefGet
end function ConversionHrefGet

!! Set
subroutine ConversionHrefSet(handle, href, hrefSize) &
      bind(C, name='ConversionHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ConversionHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalConversion
