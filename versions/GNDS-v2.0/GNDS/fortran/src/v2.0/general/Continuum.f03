
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalContinuum
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ContinuumDefaultConst() &
      bind(C, name='ContinuumDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ContinuumDefaultConst
end function ContinuumDefaultConst

!! Create, default
function ContinuumDefault() &
      bind(C, name='ContinuumDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ContinuumDefault
end function ContinuumDefault

!! Create, general, const
function ContinuumCreateConst( &
   XYs1d &
) &
      bind(C, name='ContinuumCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: ContinuumCreateConst
end function ContinuumCreateConst

!! Create, general
function ContinuumCreate( &
   XYs1d &
) &
      bind(C, name='ContinuumCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: ContinuumCreate
end function ContinuumCreate

!! Assign
subroutine ContinuumAssign(handleLHS, handleRHS) &
      bind(C, name='ContinuumAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ContinuumAssign

!! Delete
subroutine ContinuumDelete(handle) &
      bind(C, name='ContinuumDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ContinuumDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ContinuumRead(handle, filename, filenameSize) &
      bind(C, name='ContinuumRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ContinuumRead
end function ContinuumRead

!! Write to file
function ContinuumWrite(handle, filename, filenameSize) &
      bind(C, name='ContinuumWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ContinuumWrite
end function ContinuumWrite

!! Print to standard output, in our prettyprinting format
function ContinuumPrint(handle) &
      bind(C, name='ContinuumPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ContinuumPrint
end function ContinuumPrint

!! Print to standard output, as XML
function ContinuumPrintXML(handle) &
      bind(C, name='ContinuumPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ContinuumPrintXML
end function ContinuumPrintXML

!! Print to standard output, as JSON
function ContinuumPrintJSON(handle) &
      bind(C, name='ContinuumPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ContinuumPrintJSON
end function ContinuumPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ContinuumXYs1dHas(handle) &
      bind(C, name='ContinuumXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ContinuumXYs1dHas
end function ContinuumXYs1dHas

!! Get, const
function ContinuumXYs1dGetConst(handle) &
      bind(C, name='ContinuumXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ContinuumXYs1dGetConst
end function ContinuumXYs1dGetConst

!! Get
function ContinuumXYs1dGet(handle) &
      bind(C, name='ContinuumXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ContinuumXYs1dGet
end function ContinuumXYs1dGet

!! Set
subroutine ContinuumXYs1dSet(handle, fieldHandle) &
      bind(C, name='ContinuumXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ContinuumXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalContinuum
