
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalReference
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ReferenceDefaultConst() &
      bind(C, name='ReferenceDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ReferenceDefaultConst

!! Create, default
function ReferenceDefault() &
      bind(C, name='ReferenceDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ReferenceDefault

!! Create, general, const
function ReferenceCreateConst( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ReferenceCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: handle
end function ReferenceCreateConst

!! Create, general
function ReferenceCreate( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ReferenceCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: handle
end function ReferenceCreate

!! Assign
subroutine ReferenceAssign(handleLHS, handleRHS) &
      bind(C, name='ReferenceAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ReferenceAssign

!! Delete
subroutine ReferenceDelete(handle) &
      bind(C, name='ReferenceDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ReferenceDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ReferenceRead(handle, filename, filenameSize) &
      bind(C, name='ReferenceRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ReferenceRead

!! Write to file
function ReferenceWrite(handle, filename, filenameSize) &
      bind(C, name='ReferenceWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ReferenceWrite

!! Print to standard output, in our prettyprinting format
function ReferencePrint(handle) &
      bind(C, name='ReferencePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ReferencePrint

!! Print to standard output, as XML
function ReferencePrintXML(handle) &
      bind(C, name='ReferencePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ReferencePrintXML

!! Print to standard output, as JSON
function ReferencePrintJSON(handle) &
      bind(C, name='ReferencePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ReferencePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ReferenceLabelHas(handle) &
      bind(C, name='ReferenceLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReferenceLabelHas

!! Get
function ReferenceLabelGet(handle) &
      bind(C, name='ReferenceLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ReferenceLabelGet

!! Set
subroutine ReferenceLabelSet(handle, label, labelSize) &
      bind(C, name='ReferenceLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ReferenceLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ReferenceHrefHas(handle) &
      bind(C, name='ReferenceHrefHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReferenceHrefHas

!! Get
function ReferenceHrefGet(handle) &
      bind(C, name='ReferenceHrefGet') &
      result(href)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: href
end function ReferenceHrefGet

!! Set
subroutine ReferenceHrefSet(handle, href, hrefSize) &
      bind(C, name='ReferenceHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ReferenceHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalReference
