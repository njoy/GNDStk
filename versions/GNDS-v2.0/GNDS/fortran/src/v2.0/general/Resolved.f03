
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResolved
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResolvedDefaultConst() &
      bind(C, name='ResolvedDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResolvedDefaultConst

!! Create, default
function ResolvedDefault() &
      bind(C, name='ResolvedDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResolvedDefault

!! Create, general, const
function ResolvedCreateConst( &
   domainMin, &
   domainMax, &
   domainUnit, &
   BreitWigner, &
   RMatrix, &
   domainUnitSize &
) &
      bind(C, name='ResolvedCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   integer(c_size_t), intent(in), value :: domainUnitSize
   character(c_char), intent(in) :: domainUnit(domainUnitSize)
   type(c_ptr), value :: BreitWigner
   type(c_ptr), value :: RMatrix
   type(c_ptr) :: handle
end function ResolvedCreateConst

!! Create, general
function ResolvedCreate( &
   domainMin, &
   domainMax, &
   domainUnit, &
   BreitWigner, &
   RMatrix, &
   domainUnitSize &
) &
      bind(C, name='ResolvedCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   integer(c_size_t), intent(in), value :: domainUnitSize
   character(c_char), intent(in) :: domainUnit(domainUnitSize)
   type(c_ptr), value :: BreitWigner
   type(c_ptr), value :: RMatrix
   type(c_ptr) :: handle
end function ResolvedCreate

!! Assign
subroutine ResolvedAssign(handleLHS, handleRHS) &
      bind(C, name='ResolvedAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResolvedAssign

!! Delete
subroutine ResolvedDelete(handle) &
      bind(C, name='ResolvedDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResolvedDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResolvedRead(handle, filename, filenameSize) &
      bind(C, name='ResolvedRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResolvedRead

!! Write to file
function ResolvedWrite(handle, filename, filenameSize) &
      bind(C, name='ResolvedWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResolvedWrite

!! Print to standard output, in our prettyprinting format
function ResolvedPrint(handle) &
      bind(C, name='ResolvedPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResolvedPrint

!! Print to standard output, as XML
function ResolvedPrintXML(handle) &
      bind(C, name='ResolvedPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResolvedPrintXML

!! Print to standard output, as JSON
function ResolvedPrintJSON(handle) &
      bind(C, name='ResolvedPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResolvedPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: domainMin
!! -----------------------------------------------------------------------------

!! Has
function ResolvedDomainMinHas(handle) &
      bind(C, name='ResolvedDomainMinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedDomainMinHas

!! Get
function ResolvedDomainMinGet(handle) &
      bind(C, name='ResolvedDomainMinGet') &
      result(domainMin)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: domainMin
end function ResolvedDomainMinGet

!! Set
subroutine ResolvedDomainMinSet(handle, domainMin, domainMinSize) &
      bind(C, name='ResolvedDomainMinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMinSize
   character(c_char), intent(in) :: domainMin(domainMinSize)
end subroutine ResolvedDomainMinSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMax
!! -----------------------------------------------------------------------------

!! Has
function ResolvedDomainMaxHas(handle) &
      bind(C, name='ResolvedDomainMaxHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedDomainMaxHas

!! Get
function ResolvedDomainMaxGet(handle) &
      bind(C, name='ResolvedDomainMaxGet') &
      result(domainMax)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: domainMax
end function ResolvedDomainMaxGet

!! Set
subroutine ResolvedDomainMaxSet(handle, domainMax, domainMaxSize) &
      bind(C, name='ResolvedDomainMaxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMaxSize
   character(c_char), intent(in) :: domainMax(domainMaxSize)
end subroutine ResolvedDomainMaxSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainUnit
!! -----------------------------------------------------------------------------

!! Has
function ResolvedDomainUnitHas(handle) &
      bind(C, name='ResolvedDomainUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedDomainUnitHas

!! Get
function ResolvedDomainUnitGet(handle) &
      bind(C, name='ResolvedDomainUnitGet') &
      result(domainUnit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: domainUnit
end function ResolvedDomainUnitGet

!! Set
subroutine ResolvedDomainUnitSet(handle, domainUnit, domainUnitSize) &
      bind(C, name='ResolvedDomainUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainUnitSize
   character(c_char), intent(in) :: domainUnit(domainUnitSize)
end subroutine ResolvedDomainUnitSet


!! -----------------------------------------------------------------------------
!! Child: BreitWigner
!! -----------------------------------------------------------------------------

!! Has
function ResolvedBreitWignerHas(handle) &
      bind(C, name='ResolvedBreitWignerHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedBreitWignerHas

!! Get, const
function ResolvedBreitWignerGetConst(handle) &
      bind(C, name='ResolvedBreitWignerGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedBreitWignerGetConst

!! Get
function ResolvedBreitWignerGet(handle) &
      bind(C, name='ResolvedBreitWignerGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedBreitWignerGet

!! Set
subroutine ResolvedBreitWignerSet(handle, fieldHandle) &
      bind(C, name='ResolvedBreitWignerSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResolvedBreitWignerSet


!! -----------------------------------------------------------------------------
!! Child: RMatrix
!! -----------------------------------------------------------------------------

!! Has
function ResolvedRMatrixHas(handle) &
      bind(C, name='ResolvedRMatrixHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedRMatrixHas

!! Get, const
function ResolvedRMatrixGetConst(handle) &
      bind(C, name='ResolvedRMatrixGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedRMatrixGetConst

!! Get
function ResolvedRMatrixGet(handle) &
      bind(C, name='ResolvedRMatrixGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedRMatrixGet

!! Set
subroutine ResolvedRMatrixSet(handle, fieldHandle) &
      bind(C, name='ResolvedRMatrixSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResolvedRMatrixSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResolved
