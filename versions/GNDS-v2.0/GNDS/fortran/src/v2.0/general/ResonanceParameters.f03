
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResonanceParameters
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResonanceParametersDefaultConst() &
      bind(C, name='ResonanceParametersDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonanceParametersDefaultConst

!! Create, default
function ResonanceParametersDefault() &
      bind(C, name='ResonanceParametersDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonanceParametersDefault

!! Create, general, const
function ResonanceParametersCreateConst( &
   table &
) &
      bind(C, name='ResonanceParametersCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: table
   type(c_ptr) :: handle
end function ResonanceParametersCreateConst

!! Create, general
function ResonanceParametersCreate( &
   table &
) &
      bind(C, name='ResonanceParametersCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: table
   type(c_ptr) :: handle
end function ResonanceParametersCreate

!! Assign
subroutine ResonanceParametersAssign(handleLHS, handleRHS) &
      bind(C, name='ResonanceParametersAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResonanceParametersAssign

!! Delete
subroutine ResonanceParametersDelete(handle) &
      bind(C, name='ResonanceParametersDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonanceParametersDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResonanceParametersRead(handle, filename, filenameSize) &
      bind(C, name='ResonanceParametersRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonanceParametersRead

!! Write to file
function ResonanceParametersWrite(handle, filename, filenameSize) &
      bind(C, name='ResonanceParametersWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonanceParametersWrite

!! Print to standard output, in our prettyprinting format
function ResonanceParametersPrint(handle) &
      bind(C, name='ResonanceParametersPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceParametersPrint

!! Print to standard output, as XML
function ResonanceParametersPrintXML(handle) &
      bind(C, name='ResonanceParametersPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceParametersPrintXML

!! Print to standard output, as JSON
function ResonanceParametersPrintJSON(handle) &
      bind(C, name='ResonanceParametersPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonanceParametersPrintJSON


!! -----------------------------------------------------------------------------
!! Child: table
!! -----------------------------------------------------------------------------

!! Has
function ResonanceParametersTableHas(handle) &
      bind(C, name='ResonanceParametersTableHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonanceParametersTableHas

!! Get, const
function ResonanceParametersTableGetConst(handle) &
      bind(C, name='ResonanceParametersTableGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceParametersTableGetConst

!! Get
function ResonanceParametersTableGet(handle) &
      bind(C, name='ResonanceParametersTableGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonanceParametersTableGet

!! Set
subroutine ResonanceParametersTableSet(handle, fieldHandle) &
      bind(C, name='ResonanceParametersTableSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonanceParametersTableSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResonanceParameters
