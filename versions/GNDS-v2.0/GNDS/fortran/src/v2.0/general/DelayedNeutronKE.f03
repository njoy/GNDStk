
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedNeutronKE
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedNeutronKEDefaultConst() &
      bind(C, name='DelayedNeutronKEDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedNeutronKEDefaultConst

!! Create, default
function DelayedNeutronKEDefault() &
      bind(C, name='DelayedNeutronKEDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedNeutronKEDefault

!! Create, general, const
function DelayedNeutronKECreateConst( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='DelayedNeutronKECreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function DelayedNeutronKECreateConst

!! Create, general
function DelayedNeutronKECreate( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='DelayedNeutronKECreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function DelayedNeutronKECreate

!! Assign
subroutine DelayedNeutronKEAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedNeutronKEAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DelayedNeutronKEAssign

!! Delete
subroutine DelayedNeutronKEDelete(handle) &
      bind(C, name='DelayedNeutronKEDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedNeutronKEDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DelayedNeutronKERead(handle, filename, filenameSize) &
      bind(C, name='DelayedNeutronKERead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedNeutronKERead

!! Write to file
function DelayedNeutronKEWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedNeutronKEWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedNeutronKEWrite

!! Print to standard output, in our prettyprinting format
function DelayedNeutronKEPrint(handle) &
      bind(C, name='DelayedNeutronKEPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronKEPrint

!! Print to standard output, as XML
function DelayedNeutronKEPrintXML(handle) &
      bind(C, name='DelayedNeutronKEPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronKEPrintXML

!! Print to standard output, as JSON
function DelayedNeutronKEPrintJSON(handle) &
      bind(C, name='DelayedNeutronKEPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronKEPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function DelayedNeutronKEPolynomial1dHas(handle) &
      bind(C, name='DelayedNeutronKEPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedNeutronKEPolynomial1dHas

!! Get, const
function DelayedNeutronKEPolynomial1dGetConst(handle) &
      bind(C, name='DelayedNeutronKEPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronKEPolynomial1dGetConst

!! Get
function DelayedNeutronKEPolynomial1dGet(handle) &
      bind(C, name='DelayedNeutronKEPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronKEPolynomial1dGet

!! Set
subroutine DelayedNeutronKEPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='DelayedNeutronKEPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DelayedNeutronKEPolynomial1dSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function DelayedNeutronKEXYs1dHas(handle) &
      bind(C, name='DelayedNeutronKEXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedNeutronKEXYs1dHas

!! Get, const
function DelayedNeutronKEXYs1dGetConst(handle) &
      bind(C, name='DelayedNeutronKEXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronKEXYs1dGetConst

!! Get
function DelayedNeutronKEXYs1dGet(handle) &
      bind(C, name='DelayedNeutronKEXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedNeutronKEXYs1dGet

!! Set
subroutine DelayedNeutronKEXYs1dSet(handle, fieldHandle) &
      bind(C, name='DelayedNeutronKEXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DelayedNeutronKEXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedNeutronKE
