
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFissionEnergyReleases
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionEnergyReleasesDefaultConst() &
      bind(C, name='FissionEnergyReleasesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionEnergyReleasesDefaultConst

!! Create, default
function FissionEnergyReleasesDefault() &
      bind(C, name='FissionEnergyReleasesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionEnergyReleasesDefault

!! Create, general, const
function FissionEnergyReleasesCreateConst( &
   fissionEnergyRelease, fissionEnergyReleaseSize &
) &
      bind(C, name='FissionEnergyReleasesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: fissionEnergyReleaseSize
   type(c_ptr) :: fissionEnergyRelease(fissionEnergyReleaseSize)
   type(c_ptr) :: handle
end function FissionEnergyReleasesCreateConst

!! Create, general
function FissionEnergyReleasesCreate( &
   fissionEnergyRelease, fissionEnergyReleaseSize &
) &
      bind(C, name='FissionEnergyReleasesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: fissionEnergyReleaseSize
   type(c_ptr) :: fissionEnergyRelease(fissionEnergyReleaseSize)
   type(c_ptr) :: handle
end function FissionEnergyReleasesCreate

!! Assign
subroutine FissionEnergyReleasesAssign(handleLHS, handleRHS) &
      bind(C, name='FissionEnergyReleasesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FissionEnergyReleasesAssign

!! Delete
subroutine FissionEnergyReleasesDelete(handle) &
      bind(C, name='FissionEnergyReleasesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionEnergyReleasesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FissionEnergyReleasesRead(handle, filename, filenameSize) &
      bind(C, name='FissionEnergyReleasesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionEnergyReleasesRead

!! Write to file
function FissionEnergyReleasesWrite(handle, filename, filenameSize) &
      bind(C, name='FissionEnergyReleasesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionEnergyReleasesWrite

!! Print to standard output, in our prettyprinting format
function FissionEnergyReleasesPrint(handle) &
      bind(C, name='FissionEnergyReleasesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionEnergyReleasesPrint

!! Print to standard output, as XML
function FissionEnergyReleasesPrintXML(handle) &
      bind(C, name='FissionEnergyReleasesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionEnergyReleasesPrintXML

!! Print to standard output, as JSON
function FissionEnergyReleasesPrintJSON(handle) &
      bind(C, name='FissionEnergyReleasesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionEnergyReleasesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: fissionEnergyRelease
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasesFissionEnergyReleaseHas(handle) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleasesFissionEnergyReleaseHas

!! Clear
subroutine FissionEnergyReleasesFissionEnergyReleaseClear(handle) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionEnergyReleasesFissionEnergyReleaseClear

!! Size
function FissionEnergyReleasesFissionEnergyReleaseSize(handle) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function FissionEnergyReleasesFissionEnergyReleaseSize

!! Add
subroutine FissionEnergyReleasesFissionEnergyReleaseAdd(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleasesFissionEnergyReleaseAdd

!! Get, by index \in [0,size), const
function FissionEnergyReleasesFissionEnergyReleaseGetConst(handle, index) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasesFissionEnergyReleaseGetConst

!! Get, by index \in [0,size)
function FissionEnergyReleasesFissionEnergyReleaseGet(handle, index) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasesFissionEnergyReleaseGet

!! Set, by index \in [0,size)
subroutine FissionEnergyReleasesFissionEnergyReleaseSet(handle, index, fieldHandle) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleasesFissionEnergyReleaseSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function FissionEnergyReleasesFissionEnergyReleaseHasByLabel(handle, meta, metaSize) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function FissionEnergyReleasesFissionEnergyReleaseHasByLabel

!! Get, by label, const
function FissionEnergyReleasesFissionEnergyReleaseGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasesFissionEnergyReleaseGetByLabelConst

!! Get, by label
function FissionEnergyReleasesFissionEnergyReleaseGetByLabel(handle, meta, metaSize) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasesFissionEnergyReleaseGetByLabel

!! Set, by label
subroutine FissionEnergyReleasesFissionEnergyReleaseSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='FissionEnergyReleasesFissionEnergyReleaseSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleasesFissionEnergyReleaseSetByLabel


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFissionEnergyReleases
