
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNonNeutrinoEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NonNeutrinoEnergyDefaultConst() &
      bind(C, name='NonNeutrinoEnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NonNeutrinoEnergyDefaultConst

!! Create, default
function NonNeutrinoEnergyDefault() &
      bind(C, name='NonNeutrinoEnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NonNeutrinoEnergyDefault

!! Create, general, const
function NonNeutrinoEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='NonNeutrinoEnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function NonNeutrinoEnergyCreateConst

!! Create, general
function NonNeutrinoEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='NonNeutrinoEnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function NonNeutrinoEnergyCreate

!! Assign
subroutine NonNeutrinoEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='NonNeutrinoEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NonNeutrinoEnergyAssign

!! Delete
subroutine NonNeutrinoEnergyDelete(handle) &
      bind(C, name='NonNeutrinoEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NonNeutrinoEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NonNeutrinoEnergyRead(handle, filename, filenameSize) &
      bind(C, name='NonNeutrinoEnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NonNeutrinoEnergyRead

!! Write to file
function NonNeutrinoEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='NonNeutrinoEnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NonNeutrinoEnergyWrite

!! Print to standard output, in our prettyprinting format
function NonNeutrinoEnergyPrint(handle) &
      bind(C, name='NonNeutrinoEnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NonNeutrinoEnergyPrint

!! Print to standard output, as XML
function NonNeutrinoEnergyPrintXML(handle) &
      bind(C, name='NonNeutrinoEnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NonNeutrinoEnergyPrintXML

!! Print to standard output, as JSON
function NonNeutrinoEnergyPrintJSON(handle) &
      bind(C, name='NonNeutrinoEnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NonNeutrinoEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function NonNeutrinoEnergyPolynomial1dHas(handle) &
      bind(C, name='NonNeutrinoEnergyPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NonNeutrinoEnergyPolynomial1dHas

!! Get, const
function NonNeutrinoEnergyPolynomial1dGetConst(handle) &
      bind(C, name='NonNeutrinoEnergyPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NonNeutrinoEnergyPolynomial1dGetConst

!! Get
function NonNeutrinoEnergyPolynomial1dGet(handle) &
      bind(C, name='NonNeutrinoEnergyPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NonNeutrinoEnergyPolynomial1dGet

!! Set
subroutine NonNeutrinoEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='NonNeutrinoEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NonNeutrinoEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNonNeutrinoEnergy
