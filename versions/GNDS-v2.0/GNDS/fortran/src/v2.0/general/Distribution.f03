
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDistribution
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DistributionDefaultConst() &
      bind(C, name='DistributionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DistributionDefaultConst
end function DistributionDefaultConst

!! Create, default, non-const
function DistributionDefault() &
      bind(C, name='DistributionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DistributionDefault
end function DistributionDefault

!! Create, general, const
function DistributionCreateConst( &
   thermalNeutronScatteringLaw, &
   uncorrelated, &
   unspecified, &
   branching3d, &
   angularTwoBody, &
   energyAngular, &
   KalbachMann, &
   angularEnergy, &
   CoulombPlusNuclearElastic, &
   coherentPhotonScattering, &
   incoherentPhotonScattering &
) &
      bind(C, name='DistributionCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw
   type(c_ptr), intent(in), value :: uncorrelated
   type(c_ptr), intent(in), value :: unspecified
   type(c_ptr), intent(in), value :: branching3d
   type(c_ptr), intent(in), value :: angularTwoBody
   type(c_ptr), intent(in), value :: energyAngular
   type(c_ptr), intent(in), value :: KalbachMann
   type(c_ptr), intent(in), value :: angularEnergy
   type(c_ptr), intent(in), value :: CoulombPlusNuclearElastic
   type(c_ptr), intent(in), value :: coherentPhotonScattering
   type(c_ptr), intent(in), value :: incoherentPhotonScattering
   type(c_ptr) :: DistributionCreateConst
end function DistributionCreateConst

!! Create, general, non-const
function DistributionCreate( &
   thermalNeutronScatteringLaw, &
   uncorrelated, &
   unspecified, &
   branching3d, &
   angularTwoBody, &
   energyAngular, &
   KalbachMann, &
   angularEnergy, &
   CoulombPlusNuclearElastic, &
   coherentPhotonScattering, &
   incoherentPhotonScattering &
) &
      bind(C, name='DistributionCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw
   type(c_ptr), intent(in), value :: uncorrelated
   type(c_ptr), intent(in), value :: unspecified
   type(c_ptr), intent(in), value :: branching3d
   type(c_ptr), intent(in), value :: angularTwoBody
   type(c_ptr), intent(in), value :: energyAngular
   type(c_ptr), intent(in), value :: KalbachMann
   type(c_ptr), intent(in), value :: angularEnergy
   type(c_ptr), intent(in), value :: CoulombPlusNuclearElastic
   type(c_ptr), intent(in), value :: coherentPhotonScattering
   type(c_ptr), intent(in), value :: incoherentPhotonScattering
   type(c_ptr) :: DistributionCreate
end function DistributionCreate

!! Assign
subroutine DistributionAssign(handleLHS, handleRHS) &
      bind(C, name='DistributionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine DistributionAssign

!! Delete
subroutine DistributionDelete(handle) &
      bind(C, name='DistributionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DistributionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function DistributionRead(handle, filename, filenameSize) &
      bind(C, name='DistributionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DistributionRead
end function DistributionRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function DistributionWrite(handle, filename, filenameSize) &
      bind(C, name='DistributionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DistributionWrite
end function DistributionWrite

!! Print to standard output, in our prettyprinting format
function DistributionPrint(handle) &
      bind(C, name='DistributionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionPrint
end function DistributionPrint

!! Print to standard output, as XML
function DistributionPrintXML(handle) &
      bind(C, name='DistributionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionPrintXML
end function DistributionPrintXML

!! Print to standard output, as JSON
function DistributionPrintJSON(handle) &
      bind(C, name='DistributionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionPrintJSON
end function DistributionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw
!! -----------------------------------------------------------------------------

!! Has
function DistributionThermalNeutronScatteringLawHas(handle) &
      bind(C, name='DistributionThermalNeutronScatteringLawHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionThermalNeutronScatteringLawHas
end function DistributionThermalNeutronScatteringLawHas

!! Get, const
function DistributionThermalNeutronScatteringLawGetConst(handle) &
      bind(C, name='DistributionThermalNeutronScatteringLawGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionThermalNeutronScatteringLawGetConst
end function DistributionThermalNeutronScatteringLawGetConst

!! Get, non-const
function DistributionThermalNeutronScatteringLawGet(handle) &
      bind(C, name='DistributionThermalNeutronScatteringLawGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionThermalNeutronScatteringLawGet
end function DistributionThermalNeutronScatteringLawGet

!! Set
subroutine DistributionThermalNeutronScatteringLawSet(handle, fieldHandle) &
      bind(C, name='DistributionThermalNeutronScatteringLawSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionThermalNeutronScatteringLawSet


!! -----------------------------------------------------------------------------
!! Child: uncorrelated
!! -----------------------------------------------------------------------------

!! Has
function DistributionUncorrelatedHas(handle) &
      bind(C, name='DistributionUncorrelatedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionUncorrelatedHas
end function DistributionUncorrelatedHas

!! Get, const
function DistributionUncorrelatedGetConst(handle) &
      bind(C, name='DistributionUncorrelatedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionUncorrelatedGetConst
end function DistributionUncorrelatedGetConst

!! Get, non-const
function DistributionUncorrelatedGet(handle) &
      bind(C, name='DistributionUncorrelatedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionUncorrelatedGet
end function DistributionUncorrelatedGet

!! Set
subroutine DistributionUncorrelatedSet(handle, fieldHandle) &
      bind(C, name='DistributionUncorrelatedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionUncorrelatedSet


!! -----------------------------------------------------------------------------
!! Child: unspecified
!! -----------------------------------------------------------------------------

!! Has
function DistributionUnspecifiedHas(handle) &
      bind(C, name='DistributionUnspecifiedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionUnspecifiedHas
end function DistributionUnspecifiedHas

!! Get, const
function DistributionUnspecifiedGetConst(handle) &
      bind(C, name='DistributionUnspecifiedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionUnspecifiedGetConst
end function DistributionUnspecifiedGetConst

!! Get, non-const
function DistributionUnspecifiedGet(handle) &
      bind(C, name='DistributionUnspecifiedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionUnspecifiedGet
end function DistributionUnspecifiedGet

!! Set
subroutine DistributionUnspecifiedSet(handle, fieldHandle) &
      bind(C, name='DistributionUnspecifiedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionUnspecifiedSet


!! -----------------------------------------------------------------------------
!! Child: branching3d
!! -----------------------------------------------------------------------------

!! Has
function DistributionBranching3dHas(handle) &
      bind(C, name='DistributionBranching3dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionBranching3dHas
end function DistributionBranching3dHas

!! Get, const
function DistributionBranching3dGetConst(handle) &
      bind(C, name='DistributionBranching3dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionBranching3dGetConst
end function DistributionBranching3dGetConst

!! Get, non-const
function DistributionBranching3dGet(handle) &
      bind(C, name='DistributionBranching3dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionBranching3dGet
end function DistributionBranching3dGet

!! Set
subroutine DistributionBranching3dSet(handle, fieldHandle) &
      bind(C, name='DistributionBranching3dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionBranching3dSet


!! -----------------------------------------------------------------------------
!! Child: angularTwoBody
!! -----------------------------------------------------------------------------

!! Has
function DistributionAngularTwoBodyHas(handle) &
      bind(C, name='DistributionAngularTwoBodyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionAngularTwoBodyHas
end function DistributionAngularTwoBodyHas

!! Get, const
function DistributionAngularTwoBodyGetConst(handle) &
      bind(C, name='DistributionAngularTwoBodyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionAngularTwoBodyGetConst
end function DistributionAngularTwoBodyGetConst

!! Get, non-const
function DistributionAngularTwoBodyGet(handle) &
      bind(C, name='DistributionAngularTwoBodyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionAngularTwoBodyGet
end function DistributionAngularTwoBodyGet

!! Set
subroutine DistributionAngularTwoBodySet(handle, fieldHandle) &
      bind(C, name='DistributionAngularTwoBodySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionAngularTwoBodySet


!! -----------------------------------------------------------------------------
!! Child: energyAngular
!! -----------------------------------------------------------------------------

!! Has
function DistributionEnergyAngularHas(handle) &
      bind(C, name='DistributionEnergyAngularHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionEnergyAngularHas
end function DistributionEnergyAngularHas

!! Get, const
function DistributionEnergyAngularGetConst(handle) &
      bind(C, name='DistributionEnergyAngularGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionEnergyAngularGetConst
end function DistributionEnergyAngularGetConst

!! Get, non-const
function DistributionEnergyAngularGet(handle) &
      bind(C, name='DistributionEnergyAngularGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionEnergyAngularGet
end function DistributionEnergyAngularGet

!! Set
subroutine DistributionEnergyAngularSet(handle, fieldHandle) &
      bind(C, name='DistributionEnergyAngularSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionEnergyAngularSet


!! -----------------------------------------------------------------------------
!! Child: KalbachMann
!! -----------------------------------------------------------------------------

!! Has
function DistributionKalbachMannHas(handle) &
      bind(C, name='DistributionKalbachMannHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionKalbachMannHas
end function DistributionKalbachMannHas

!! Get, const
function DistributionKalbachMannGetConst(handle) &
      bind(C, name='DistributionKalbachMannGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionKalbachMannGetConst
end function DistributionKalbachMannGetConst

!! Get, non-const
function DistributionKalbachMannGet(handle) &
      bind(C, name='DistributionKalbachMannGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionKalbachMannGet
end function DistributionKalbachMannGet

!! Set
subroutine DistributionKalbachMannSet(handle, fieldHandle) &
      bind(C, name='DistributionKalbachMannSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionKalbachMannSet


!! -----------------------------------------------------------------------------
!! Child: angularEnergy
!! -----------------------------------------------------------------------------

!! Has
function DistributionAngularEnergyHas(handle) &
      bind(C, name='DistributionAngularEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionAngularEnergyHas
end function DistributionAngularEnergyHas

!! Get, const
function DistributionAngularEnergyGetConst(handle) &
      bind(C, name='DistributionAngularEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionAngularEnergyGetConst
end function DistributionAngularEnergyGetConst

!! Get, non-const
function DistributionAngularEnergyGet(handle) &
      bind(C, name='DistributionAngularEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionAngularEnergyGet
end function DistributionAngularEnergyGet

!! Set
subroutine DistributionAngularEnergySet(handle, fieldHandle) &
      bind(C, name='DistributionAngularEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionAngularEnergySet


!! -----------------------------------------------------------------------------
!! Child: CoulombPlusNuclearElastic
!! -----------------------------------------------------------------------------

!! Has
function DistributionCoulombPlusNuclearElasticHas(handle) &
      bind(C, name='DistributionCoulombPlusNuclearElasticHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionCoulombPlusNuclearElasticHas
end function DistributionCoulombPlusNuclearElasticHas

!! Get, const
function DistributionCoulombPlusNuclearElasticGetConst(handle) &
      bind(C, name='DistributionCoulombPlusNuclearElasticGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionCoulombPlusNuclearElasticGetConst
end function DistributionCoulombPlusNuclearElasticGetConst

!! Get, non-const
function DistributionCoulombPlusNuclearElasticGet(handle) &
      bind(C, name='DistributionCoulombPlusNuclearElasticGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionCoulombPlusNuclearElasticGet
end function DistributionCoulombPlusNuclearElasticGet

!! Set
subroutine DistributionCoulombPlusNuclearElasticSet(handle, fieldHandle) &
      bind(C, name='DistributionCoulombPlusNuclearElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionCoulombPlusNuclearElasticSet


!! -----------------------------------------------------------------------------
!! Child: coherentPhotonScattering
!! -----------------------------------------------------------------------------

!! Has
function DistributionCoherentPhotonScatteringHas(handle) &
      bind(C, name='DistributionCoherentPhotonScatteringHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionCoherentPhotonScatteringHas
end function DistributionCoherentPhotonScatteringHas

!! Get, const
function DistributionCoherentPhotonScatteringGetConst(handle) &
      bind(C, name='DistributionCoherentPhotonScatteringGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionCoherentPhotonScatteringGetConst
end function DistributionCoherentPhotonScatteringGetConst

!! Get, non-const
function DistributionCoherentPhotonScatteringGet(handle) &
      bind(C, name='DistributionCoherentPhotonScatteringGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionCoherentPhotonScatteringGet
end function DistributionCoherentPhotonScatteringGet

!! Set
subroutine DistributionCoherentPhotonScatteringSet(handle, fieldHandle) &
      bind(C, name='DistributionCoherentPhotonScatteringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionCoherentPhotonScatteringSet


!! -----------------------------------------------------------------------------
!! Child: incoherentPhotonScattering
!! -----------------------------------------------------------------------------

!! Has
function DistributionIncoherentPhotonScatteringHas(handle) &
      bind(C, name='DistributionIncoherentPhotonScatteringHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DistributionIncoherentPhotonScatteringHas
end function DistributionIncoherentPhotonScatteringHas

!! Get, const
function DistributionIncoherentPhotonScatteringGetConst(handle) &
      bind(C, name='DistributionIncoherentPhotonScatteringGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DistributionIncoherentPhotonScatteringGetConst
end function DistributionIncoherentPhotonScatteringGetConst

!! Get, non-const
function DistributionIncoherentPhotonScatteringGet(handle) &
      bind(C, name='DistributionIncoherentPhotonScatteringGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DistributionIncoherentPhotonScatteringGet
end function DistributionIncoherentPhotonScatteringGet

!! Set
subroutine DistributionIncoherentPhotonScatteringSet(handle, fieldHandle) &
      bind(C, name='DistributionIncoherentPhotonScatteringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DistributionIncoherentPhotonScatteringSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDistribution
