
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIsotope
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IsotopeDefaultConst() &
      bind(C, name='IsotopeDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IsotopeDefaultConst

!! Create, default
function IsotopeDefault() &
      bind(C, name='IsotopeDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IsotopeDefault

!! Create, general, const
function IsotopeCreateConst( &
   symbol, &
   A, &
   nuclides, &
   symbolSize &
) &
      bind(C, name='IsotopeCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: symbolSize
   character(c_char), intent(in) :: symbol(symbolSize)
   integer(c_int), value, intent(in) :: A
   type(c_ptr), value :: nuclides
   type(c_ptr) :: handle
end function IsotopeCreateConst

!! Create, general
function IsotopeCreate( &
   symbol, &
   A, &
   nuclides, &
   symbolSize &
) &
      bind(C, name='IsotopeCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: symbolSize
   character(c_char), intent(in) :: symbol(symbolSize)
   integer(c_int), value, intent(in) :: A
   type(c_ptr), value :: nuclides
   type(c_ptr) :: handle
end function IsotopeCreate

!! Assign
subroutine IsotopeAssign(handleLHS, handleRHS) &
      bind(C, name='IsotopeAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine IsotopeAssign

!! Delete
subroutine IsotopeDelete(handle) &
      bind(C, name='IsotopeDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IsotopeDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function IsotopeRead(handle, filename, filenameSize) &
      bind(C, name='IsotopeRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IsotopeRead

!! Write to file
function IsotopeWrite(handle, filename, filenameSize) &
      bind(C, name='IsotopeWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IsotopeWrite

!! Print to standard output, in our prettyprinting format
function IsotopePrint(handle) &
      bind(C, name='IsotopePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IsotopePrint

!! Print to standard output, as XML
function IsotopePrintXML(handle) &
      bind(C, name='IsotopePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IsotopePrintXML

!! Print to standard output, as JSON
function IsotopePrintJSON(handle) &
      bind(C, name='IsotopePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IsotopePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: symbol
!! -----------------------------------------------------------------------------

!! Has
function IsotopeSymbolHas(handle) &
      bind(C, name='IsotopeSymbolHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IsotopeSymbolHas

!! Get
function IsotopeSymbolGet(handle) &
      bind(C, name='IsotopeSymbolGet') &
      result(symbol)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: symbol
end function IsotopeSymbolGet

!! Set
subroutine IsotopeSymbolSet(handle, symbol, symbolSize) &
      bind(C, name='IsotopeSymbolSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: symbolSize
   character(c_char), intent(in) :: symbol(symbolSize)
end subroutine IsotopeSymbolSet


!! -----------------------------------------------------------------------------
!! Metadatum: A
!! -----------------------------------------------------------------------------

!! Has
function IsotopeAHas(handle) &
      bind(C, name='IsotopeAHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IsotopeAHas

!! Get
function IsotopeAGet(handle) &
      bind(C, name='IsotopeAGet') &
      result(A)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: A
end function IsotopeAGet

!! Set
subroutine IsotopeASet(handle, A, ASize) &
      bind(C, name='IsotopeASet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ASize
   character(c_char), intent(in) :: A(ASize)
end subroutine IsotopeASet


!! -----------------------------------------------------------------------------
!! Child: nuclides
!! -----------------------------------------------------------------------------

!! Has
function IsotopeNuclidesHas(handle) &
      bind(C, name='IsotopeNuclidesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IsotopeNuclidesHas

!! Get, const
function IsotopeNuclidesGetConst(handle) &
      bind(C, name='IsotopeNuclidesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function IsotopeNuclidesGetConst

!! Get
function IsotopeNuclidesGet(handle) &
      bind(C, name='IsotopeNuclidesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function IsotopeNuclidesGet

!! Set
subroutine IsotopeNuclidesSet(handle, fieldHandle) &
      bind(C, name='IsotopeNuclidesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine IsotopeNuclidesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIsotope
