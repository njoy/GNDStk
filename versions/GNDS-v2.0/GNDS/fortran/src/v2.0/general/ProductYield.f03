
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalProductYield
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ProductYieldDefaultConst() &
      bind(C, name='ProductYieldDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ProductYieldDefaultConst

!! Create, default
function ProductYieldDefault() &
      bind(C, name='ProductYieldDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ProductYieldDefault

!! Create, general, const
function ProductYieldCreateConst( &
   label, &
   nuclides, &
   elapsedTimes, &
   labelSize &
) &
      bind(C, name='ProductYieldCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: nuclides
   type(c_ptr), value :: elapsedTimes
   type(c_ptr) :: handle
end function ProductYieldCreateConst

!! Create, general
function ProductYieldCreate( &
   label, &
   nuclides, &
   elapsedTimes, &
   labelSize &
) &
      bind(C, name='ProductYieldCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: nuclides
   type(c_ptr), value :: elapsedTimes
   type(c_ptr) :: handle
end function ProductYieldCreate

!! Assign
subroutine ProductYieldAssign(handleLHS, handleRHS) &
      bind(C, name='ProductYieldAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ProductYieldAssign

!! Delete
subroutine ProductYieldDelete(handle) &
      bind(C, name='ProductYieldDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProductYieldDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ProductYieldRead(handle, filename, filenameSize) &
      bind(C, name='ProductYieldRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ProductYieldRead

!! Write to file
function ProductYieldWrite(handle, filename, filenameSize) &
      bind(C, name='ProductYieldWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ProductYieldWrite

!! Print to standard output, in our prettyprinting format
function ProductYieldPrint(handle) &
      bind(C, name='ProductYieldPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductYieldPrint

!! Print to standard output, as XML
function ProductYieldPrintXML(handle) &
      bind(C, name='ProductYieldPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductYieldPrintXML

!! Print to standard output, as JSON
function ProductYieldPrintJSON(handle) &
      bind(C, name='ProductYieldPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductYieldPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ProductYieldLabelHas(handle) &
      bind(C, name='ProductYieldLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductYieldLabelHas

!! Get
function ProductYieldLabelGet(handle) &
      bind(C, name='ProductYieldLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ProductYieldLabelGet

!! Set
subroutine ProductYieldLabelSet(handle, label, labelSize) &
      bind(C, name='ProductYieldLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ProductYieldLabelSet


!! -----------------------------------------------------------------------------
!! Child: nuclides
!! -----------------------------------------------------------------------------

!! Has
function ProductYieldNuclidesHas(handle) &
      bind(C, name='ProductYieldNuclidesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductYieldNuclidesHas

!! Get, const
function ProductYieldNuclidesGetConst(handle) &
      bind(C, name='ProductYieldNuclidesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductYieldNuclidesGetConst

!! Get
function ProductYieldNuclidesGet(handle) &
      bind(C, name='ProductYieldNuclidesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductYieldNuclidesGet

!! Set
subroutine ProductYieldNuclidesSet(handle, fieldHandle) &
      bind(C, name='ProductYieldNuclidesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ProductYieldNuclidesSet


!! -----------------------------------------------------------------------------
!! Child: elapsedTimes
!! -----------------------------------------------------------------------------

!! Has
function ProductYieldElapsedTimesHas(handle) &
      bind(C, name='ProductYieldElapsedTimesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductYieldElapsedTimesHas

!! Get, const
function ProductYieldElapsedTimesGetConst(handle) &
      bind(C, name='ProductYieldElapsedTimesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductYieldElapsedTimesGetConst

!! Get
function ProductYieldElapsedTimesGet(handle) &
      bind(C, name='ProductYieldElapsedTimesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductYieldElapsedTimesGet

!! Set
subroutine ProductYieldElapsedTimesSet(handle, fieldHandle) &
      bind(C, name='ProductYieldElapsedTimesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ProductYieldElapsedTimesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalProductYield
