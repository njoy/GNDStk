
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAverageEnergies
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AverageEnergiesDefaultConst() &
      bind(C, name='AverageEnergiesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AverageEnergiesDefaultConst

!! Create, default
function AverageEnergiesDefault() &
      bind(C, name='AverageEnergiesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AverageEnergiesDefault

!! Create, general, const
function AverageEnergiesCreateConst( &
   averageEnergy, averageEnergySize &
) &
      bind(C, name='AverageEnergiesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: averageEnergySize
   type(c_ptr) :: averageEnergy(averageEnergySize)
   type(c_ptr) :: handle
end function AverageEnergiesCreateConst

!! Create, general
function AverageEnergiesCreate( &
   averageEnergy, averageEnergySize &
) &
      bind(C, name='AverageEnergiesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: averageEnergySize
   type(c_ptr) :: averageEnergy(averageEnergySize)
   type(c_ptr) :: handle
end function AverageEnergiesCreate

!! Assign
subroutine AverageEnergiesAssign(handleLHS, handleRHS) &
      bind(C, name='AverageEnergiesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AverageEnergiesAssign

!! Delete
subroutine AverageEnergiesDelete(handle) &
      bind(C, name='AverageEnergiesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AverageEnergiesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AverageEnergiesRead(handle, filename, filenameSize) &
      bind(C, name='AverageEnergiesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AverageEnergiesRead

!! Write to file
function AverageEnergiesWrite(handle, filename, filenameSize) &
      bind(C, name='AverageEnergiesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AverageEnergiesWrite

!! Print to standard output, in our prettyprinting format
function AverageEnergiesPrint(handle) &
      bind(C, name='AverageEnergiesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AverageEnergiesPrint

!! Print to standard output, as XML
function AverageEnergiesPrintXML(handle) &
      bind(C, name='AverageEnergiesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AverageEnergiesPrintXML

!! Print to standard output, as JSON
function AverageEnergiesPrintJSON(handle) &
      bind(C, name='AverageEnergiesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AverageEnergiesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: averageEnergy
!! -----------------------------------------------------------------------------

!! Has
function AverageEnergiesAverageEnergyHas(handle) &
      bind(C, name='AverageEnergiesAverageEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AverageEnergiesAverageEnergyHas

!! Clear
subroutine AverageEnergiesAverageEnergyClear(handle) &
      bind(C, name='AverageEnergiesAverageEnergyClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AverageEnergiesAverageEnergyClear

!! Size
function AverageEnergiesAverageEnergySize(handle) &
      bind(C, name='AverageEnergiesAverageEnergySize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function AverageEnergiesAverageEnergySize

!! Add
subroutine AverageEnergiesAverageEnergyAdd(handle, fieldHandle) &
      bind(C, name='AverageEnergiesAverageEnergyAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AverageEnergiesAverageEnergyAdd

!! Get, by index \in [0,size), const
function AverageEnergiesAverageEnergyGetConst(handle, index) &
      bind(C, name='AverageEnergiesAverageEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetConst

!! Get, by index \in [0,size)
function AverageEnergiesAverageEnergyGet(handle, index) &
      bind(C, name='AverageEnergiesAverageEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGet

!! Set, by index \in [0,size)
subroutine AverageEnergiesAverageEnergySet(handle, index, fieldHandle) &
      bind(C, name='AverageEnergiesAverageEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AverageEnergiesAverageEnergySet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function AverageEnergiesAverageEnergyHasByLabel(handle, meta, metaSize) &
      bind(C, name='AverageEnergiesAverageEnergyHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AverageEnergiesAverageEnergyHasByLabel

!! Get, by label, const
function AverageEnergiesAverageEnergyGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='AverageEnergiesAverageEnergyGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetByLabelConst

!! Get, by label
function AverageEnergiesAverageEnergyGetByLabel(handle, meta, metaSize) &
      bind(C, name='AverageEnergiesAverageEnergyGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetByLabel

!! Set, by label
subroutine AverageEnergiesAverageEnergySetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AverageEnergiesAverageEnergySetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AverageEnergiesAverageEnergySetByLabel

!! ------------------------
!! Re: metadatum value
!! ------------------------

!! Has, by value
function AverageEnergiesAverageEnergyHasByValue(handle, meta) &
      bind(C, name='AverageEnergiesAverageEnergyHasByValue') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   integer(c_int) :: has
end function AverageEnergiesAverageEnergyHasByValue

!! Get, by value, const
function AverageEnergiesAverageEnergyGetByValueConst(handle, meta) &
      bind(C, name='AverageEnergiesAverageEnergyGetByValueConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetByValueConst

!! Get, by value
function AverageEnergiesAverageEnergyGetByValue(handle, meta) &
      bind(C, name='AverageEnergiesAverageEnergyGetByValue') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetByValue

!! Set, by value
subroutine AverageEnergiesAverageEnergySetByValue(handle, meta, fieldHandle) &
      bind(C, name='AverageEnergiesAverageEnergySetByValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AverageEnergiesAverageEnergySetByValue

!! ------------------------
!! Re: metadatum unit
!! ------------------------

!! Has, by unit
function AverageEnergiesAverageEnergyHasByUnit(handle, meta, metaSize) &
      bind(C, name='AverageEnergiesAverageEnergyHasByUnit') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AverageEnergiesAverageEnergyHasByUnit

!! Get, by unit, const
function AverageEnergiesAverageEnergyGetByUnitConst(handle, meta, metaSize) &
      bind(C, name='AverageEnergiesAverageEnergyGetByUnitConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetByUnitConst

!! Get, by unit
function AverageEnergiesAverageEnergyGetByUnit(handle, meta, metaSize) &
      bind(C, name='AverageEnergiesAverageEnergyGetByUnit') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AverageEnergiesAverageEnergyGetByUnit

!! Set, by unit
subroutine AverageEnergiesAverageEnergySetByUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AverageEnergiesAverageEnergySetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AverageEnergiesAverageEnergySetByUnit


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAverageEnergies
