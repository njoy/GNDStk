
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBaryon
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BaryonDefaultConst() &
      bind(C, name='BaryonDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BaryonDefaultConst
end function BaryonDefaultConst

!! Create, default, non-const
function BaryonDefault() &
      bind(C, name='BaryonDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BaryonDefault
end function BaryonDefault

!! Create, general, const
function BaryonCreateConst( &
   id, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   decayData, &
   idSize &
) &
      bind(C, name='BaryonCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), intent(in), value :: mass
   type(c_ptr), intent(in), value :: spin
   type(c_ptr), intent(in), value :: parity
   type(c_ptr), intent(in), value :: charge
   type(c_ptr), intent(in), value :: halflife
   type(c_ptr), intent(in), value :: decayData
   type(c_ptr) :: BaryonCreateConst
end function BaryonCreateConst

!! Create, general, non-const
function BaryonCreate( &
   id, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   decayData, &
   idSize &
) &
      bind(C, name='BaryonCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), intent(in), value :: mass
   type(c_ptr), intent(in), value :: spin
   type(c_ptr), intent(in), value :: parity
   type(c_ptr), intent(in), value :: charge
   type(c_ptr), intent(in), value :: halflife
   type(c_ptr), intent(in), value :: decayData
   type(c_ptr) :: BaryonCreate
end function BaryonCreate

!! Assign
subroutine BaryonAssign(handleLHS, handleRHS) &
      bind(C, name='BaryonAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine BaryonAssign

!! Delete
subroutine BaryonDelete(handle) &
      bind(C, name='BaryonDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BaryonDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function BaryonRead(handle, filename, filenameSize) &
      bind(C, name='BaryonRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BaryonRead
end function BaryonRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function BaryonWrite(handle, filename, filenameSize) &
      bind(C, name='BaryonWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BaryonWrite
end function BaryonWrite

!! Print to standard output, in our prettyprinting format
function BaryonPrint(handle) &
      bind(C, name='BaryonPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonPrint
end function BaryonPrint

!! Print to standard output, as XML
function BaryonPrintXML(handle) &
      bind(C, name='BaryonPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonPrintXML
end function BaryonPrintXML

!! Print to standard output, as JSON
function BaryonPrintJSON(handle) &
      bind(C, name='BaryonPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonPrintJSON
end function BaryonPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function BaryonIdHas(handle) &
      bind(C, name='BaryonIdHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonIdHas
end function BaryonIdHas

!! Get
function BaryonIdGet(handle) &
      bind(C, name='BaryonIdGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonIdGet
end function BaryonIdGet

!! Set
subroutine BaryonIdSet(handle, id, idSize) &
      bind(C, name='BaryonIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine BaryonIdSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function BaryonMassHas(handle) &
      bind(C, name='BaryonMassHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonMassHas
end function BaryonMassHas

!! Get, const
function BaryonMassGetConst(handle) &
      bind(C, name='BaryonMassGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonMassGetConst
end function BaryonMassGetConst

!! Get, non-const
function BaryonMassGet(handle) &
      bind(C, name='BaryonMassGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BaryonMassGet
end function BaryonMassGet

!! Set
subroutine BaryonMassSet(handle, fieldHandle) &
      bind(C, name='BaryonMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonMassSet


!! -----------------------------------------------------------------------------
!! Child: spin
!! -----------------------------------------------------------------------------

!! Has
function BaryonSpinHas(handle) &
      bind(C, name='BaryonSpinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonSpinHas
end function BaryonSpinHas

!! Get, const
function BaryonSpinGetConst(handle) &
      bind(C, name='BaryonSpinGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonSpinGetConst
end function BaryonSpinGetConst

!! Get, non-const
function BaryonSpinGet(handle) &
      bind(C, name='BaryonSpinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BaryonSpinGet
end function BaryonSpinGet

!! Set
subroutine BaryonSpinSet(handle, fieldHandle) &
      bind(C, name='BaryonSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonSpinSet


!! -----------------------------------------------------------------------------
!! Child: parity
!! -----------------------------------------------------------------------------

!! Has
function BaryonParityHas(handle) &
      bind(C, name='BaryonParityHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonParityHas
end function BaryonParityHas

!! Get, const
function BaryonParityGetConst(handle) &
      bind(C, name='BaryonParityGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonParityGetConst
end function BaryonParityGetConst

!! Get, non-const
function BaryonParityGet(handle) &
      bind(C, name='BaryonParityGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BaryonParityGet
end function BaryonParityGet

!! Set
subroutine BaryonParitySet(handle, fieldHandle) &
      bind(C, name='BaryonParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonParitySet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function BaryonChargeHas(handle) &
      bind(C, name='BaryonChargeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonChargeHas
end function BaryonChargeHas

!! Get, const
function BaryonChargeGetConst(handle) &
      bind(C, name='BaryonChargeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonChargeGetConst
end function BaryonChargeGetConst

!! Get, non-const
function BaryonChargeGet(handle) &
      bind(C, name='BaryonChargeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BaryonChargeGet
end function BaryonChargeGet

!! Set
subroutine BaryonChargeSet(handle, fieldHandle) &
      bind(C, name='BaryonChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonChargeSet


!! -----------------------------------------------------------------------------
!! Child: halflife
!! -----------------------------------------------------------------------------

!! Has
function BaryonHalflifeHas(handle) &
      bind(C, name='BaryonHalflifeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonHalflifeHas
end function BaryonHalflifeHas

!! Get, const
function BaryonHalflifeGetConst(handle) &
      bind(C, name='BaryonHalflifeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonHalflifeGetConst
end function BaryonHalflifeGetConst

!! Get, non-const
function BaryonHalflifeGet(handle) &
      bind(C, name='BaryonHalflifeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BaryonHalflifeGet
end function BaryonHalflifeGet

!! Set
subroutine BaryonHalflifeSet(handle, fieldHandle) &
      bind(C, name='BaryonHalflifeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonHalflifeSet


!! -----------------------------------------------------------------------------
!! Child: decayData
!! -----------------------------------------------------------------------------

!! Has
function BaryonDecayDataHas(handle) &
      bind(C, name='BaryonDecayDataHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BaryonDecayDataHas
end function BaryonDecayDataHas

!! Get, const
function BaryonDecayDataGetConst(handle) &
      bind(C, name='BaryonDecayDataGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BaryonDecayDataGetConst
end function BaryonDecayDataGetConst

!! Get, non-const
function BaryonDecayDataGet(handle) &
      bind(C, name='BaryonDecayDataGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BaryonDecayDataGet
end function BaryonDecayDataGet

!! Set
subroutine BaryonDecayDataSet(handle, fieldHandle) &
      bind(C, name='BaryonDecayDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BaryonDecayDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBaryon
