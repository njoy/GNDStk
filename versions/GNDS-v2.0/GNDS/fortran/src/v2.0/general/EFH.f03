
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEFH
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EFHDefaultConst() &
      bind(C, name='EFHDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EFHDefaultConst

!! Create, default
function EFHDefault() &
      bind(C, name='EFHDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EFHDefault

!! Create, general, const
function EFHCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='EFHCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function EFHCreateConst

!! Create, general
function EFHCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='EFHCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function EFHCreate

!! Assign
subroutine EFHAssign(handleLHS, handleRHS) &
      bind(C, name='EFHAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine EFHAssign

!! Delete
subroutine EFHDelete(handle) &
      bind(C, name='EFHDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EFHDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function EFHRead(handle, filename, filenameSize) &
      bind(C, name='EFHRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EFHRead

!! Write to file
function EFHWrite(handle, filename, filenameSize) &
      bind(C, name='EFHWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EFHWrite

!! Print to standard output, in our prettyprinting format
function EFHPrint(handle) &
      bind(C, name='EFHPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EFHPrint

!! Print to standard output, as XML
function EFHPrintXML(handle) &
      bind(C, name='EFHPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EFHPrintXML

!! Print to standard output, as JSON
function EFHPrintJSON(handle) &
      bind(C, name='EFHPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EFHPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function EFHValueHas(handle) &
      bind(C, name='EFHValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EFHValueHas

!! Get
function EFHValueGet(handle) &
      bind(C, name='EFHValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function EFHValueGet

!! Set
subroutine EFHValueSet(handle, value, valueSize) &
      bind(C, name='EFHValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine EFHValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function EFHUnitHas(handle) &
      bind(C, name='EFHUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EFHUnitHas

!! Get
function EFHUnitGet(handle) &
      bind(C, name='EFHUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function EFHUnitGet

!! Set
subroutine EFHUnitSet(handle, unit, unitSize) &
      bind(C, name='EFHUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine EFHUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEFH
