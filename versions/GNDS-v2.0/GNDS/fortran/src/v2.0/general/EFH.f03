
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEFH
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EFHDefaultConst() &
      bind(C, name='EFHDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EFHDefaultConst
end function EFHDefaultConst

!! Create, default, non-const
function EFHDefault() &
      bind(C, name='EFHDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EFHDefault
end function EFHDefault

!! Create, general, const
function EFHCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='EFHCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: EFHCreateConst
end function EFHCreateConst

!! Create, general, non-const
function EFHCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='EFHCreate')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: EFHCreate
end function EFHCreate

!! Assign
subroutine EFHAssign(handleLHS, handleRHS) &
      bind(C, name='EFHAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine EFHAssign

!! Delete
subroutine EFHDelete(handle) &
      bind(C, name='EFHDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EFHDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function EFHRead(handle, filename, filenameSize) &
      bind(C, name='EFHRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EFHRead
end function EFHRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function EFHWrite(handle, filename, filenameSize) &
      bind(C, name='EFHWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EFHWrite
end function EFHWrite

!! Print to standard output, in our prettyprinting format
function EFHPrint(handle) &
      bind(C, name='EFHPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFHPrint
end function EFHPrint

!! Print to standard output, as XML
function EFHPrintXML(handle) &
      bind(C, name='EFHPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFHPrintXML
end function EFHPrintXML

!! Print to standard output, as JSON
function EFHPrintJSON(handle) &
      bind(C, name='EFHPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFHPrintJSON
end function EFHPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function EFHValueHas(handle) &
      bind(C, name='EFHValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFHValueHas
end function EFHValueHas

!! Get
function EFHValueGet(handle) &
      bind(C, name='EFHValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: EFHValueGet
end function EFHValueGet

!! Set
subroutine EFHValueSet(handle, value) &
      bind(C, name='EFHValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: value
end subroutine EFHValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function EFHUnitHas(handle) &
      bind(C, name='EFHUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFHUnitHas
end function EFHUnitHas

!! Get
function EFHUnitGet(handle) &
      bind(C, name='EFHUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EFHUnitGet
end function EFHUnitGet

!! Set
subroutine EFHUnitSet(handle, unit, unitSize) &
      bind(C, name='EFHUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine EFHUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEFH
