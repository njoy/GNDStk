
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalParameterCovarianceMatrix
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ParameterCovarianceMatrixDefaultConst() &
      bind(C, name='ParameterCovarianceMatrixDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ParameterCovarianceMatrixDefaultConst

!! Create, default
function ParameterCovarianceMatrixDefault() &
      bind(C, name='ParameterCovarianceMatrixDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ParameterCovarianceMatrixDefault

!! Create, general, const
function ParameterCovarianceMatrixCreateConst( &
   label, &
   type1, &
   array, &
   parameters, &
   labelSize, &
   type1Size &
) &
      bind(C, name='ParameterCovarianceMatrixCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
   type(c_ptr), value :: array
   type(c_ptr), value :: parameters
   type(c_ptr) :: handle
end function ParameterCovarianceMatrixCreateConst

!! Create, general
function ParameterCovarianceMatrixCreate( &
   label, &
   type1, &
   array, &
   parameters, &
   labelSize, &
   type1Size &
) &
      bind(C, name='ParameterCovarianceMatrixCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
   type(c_ptr), value :: array
   type(c_ptr), value :: parameters
   type(c_ptr) :: handle
end function ParameterCovarianceMatrixCreate

!! Assign
subroutine ParameterCovarianceMatrixAssign(handleLHS, handleRHS) &
      bind(C, name='ParameterCovarianceMatrixAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ParameterCovarianceMatrixAssign

!! Delete
subroutine ParameterCovarianceMatrixDelete(handle) &
      bind(C, name='ParameterCovarianceMatrixDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ParameterCovarianceMatrixDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ParameterCovarianceMatrixRead(handle, filename, filenameSize) &
      bind(C, name='ParameterCovarianceMatrixRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ParameterCovarianceMatrixRead

!! Write to file
function ParameterCovarianceMatrixWrite(handle, filename, filenameSize) &
      bind(C, name='ParameterCovarianceMatrixWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ParameterCovarianceMatrixWrite

!! Print to standard output, in our prettyprinting format
function ParameterCovarianceMatrixPrint(handle) &
      bind(C, name='ParameterCovarianceMatrixPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ParameterCovarianceMatrixPrint

!! Print to standard output, as XML
function ParameterCovarianceMatrixPrintXML(handle) &
      bind(C, name='ParameterCovarianceMatrixPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ParameterCovarianceMatrixPrintXML

!! Print to standard output, as JSON
function ParameterCovarianceMatrixPrintJSON(handle) &
      bind(C, name='ParameterCovarianceMatrixPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ParameterCovarianceMatrixPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ParameterCovarianceMatrixLabelHas(handle) &
      bind(C, name='ParameterCovarianceMatrixLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ParameterCovarianceMatrixLabelHas

!! Get
function ParameterCovarianceMatrixLabelGet(handle) &
      bind(C, name='ParameterCovarianceMatrixLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ParameterCovarianceMatrixLabelGet

!! Set
subroutine ParameterCovarianceMatrixLabelSet(handle, label, labelSize) &
      bind(C, name='ParameterCovarianceMatrixLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ParameterCovarianceMatrixLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: type
!! -----------------------------------------------------------------------------

!! Has
function ParameterCovarianceMatrixTypeHas(handle) &
      bind(C, name='ParameterCovarianceMatrixTypeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ParameterCovarianceMatrixTypeHas

!! Get
function ParameterCovarianceMatrixTypeGet(handle) &
      bind(C, name='ParameterCovarianceMatrixTypeGet') &
      result(type1)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: type1
end function ParameterCovarianceMatrixTypeGet

!! Set
subroutine ParameterCovarianceMatrixTypeSet(handle, type1, type1Size) &
      bind(C, name='ParameterCovarianceMatrixTypeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
end subroutine ParameterCovarianceMatrixTypeSet


!! -----------------------------------------------------------------------------
!! Child: array
!! -----------------------------------------------------------------------------

!! Has
function ParameterCovarianceMatrixArrayHas(handle) &
      bind(C, name='ParameterCovarianceMatrixArrayHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ParameterCovarianceMatrixArrayHas

!! Get, const
function ParameterCovarianceMatrixArrayGetConst(handle) &
      bind(C, name='ParameterCovarianceMatrixArrayGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ParameterCovarianceMatrixArrayGetConst

!! Get
function ParameterCovarianceMatrixArrayGet(handle) &
      bind(C, name='ParameterCovarianceMatrixArrayGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ParameterCovarianceMatrixArrayGet

!! Set
subroutine ParameterCovarianceMatrixArraySet(handle, fieldHandle) &
      bind(C, name='ParameterCovarianceMatrixArraySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ParameterCovarianceMatrixArraySet


!! -----------------------------------------------------------------------------
!! Child: parameters
!! -----------------------------------------------------------------------------

!! Has
function ParameterCovarianceMatrixParametersHas(handle) &
      bind(C, name='ParameterCovarianceMatrixParametersHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ParameterCovarianceMatrixParametersHas

!! Get, const
function ParameterCovarianceMatrixParametersGetConst(handle) &
      bind(C, name='ParameterCovarianceMatrixParametersGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ParameterCovarianceMatrixParametersGetConst

!! Get
function ParameterCovarianceMatrixParametersGet(handle) &
      bind(C, name='ParameterCovarianceMatrixParametersGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ParameterCovarianceMatrixParametersGet

!! Set
subroutine ParameterCovarianceMatrixParametersSet(handle, fieldHandle) &
      bind(C, name='ParameterCovarianceMatrixParametersSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ParameterCovarianceMatrixParametersSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalParameterCovarianceMatrix
