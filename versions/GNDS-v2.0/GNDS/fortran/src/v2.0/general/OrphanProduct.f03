
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalOrphanProduct
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function OrphanProductDefaultConst() &
      bind(C, name='OrphanProductDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function OrphanProductDefaultConst

!! Create, default
function OrphanProductDefault() &
      bind(C, name='OrphanProductDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function OrphanProductDefault

!! Create, general, const
function OrphanProductCreateConst( &
   label, &
   ENDF_MT, &
   crossSection, &
   outputChannel, &
   labelSize &
) &
      bind(C, name='OrphanProductCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: ENDF_MT
   type(c_ptr), value :: crossSection
   type(c_ptr), value :: outputChannel
   type(c_ptr) :: handle
end function OrphanProductCreateConst

!! Create, general
function OrphanProductCreate( &
   label, &
   ENDF_MT, &
   crossSection, &
   outputChannel, &
   labelSize &
) &
      bind(C, name='OrphanProductCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: ENDF_MT
   type(c_ptr), value :: crossSection
   type(c_ptr), value :: outputChannel
   type(c_ptr) :: handle
end function OrphanProductCreate

!! Assign
subroutine OrphanProductAssign(handleLHS, handleRHS) &
      bind(C, name='OrphanProductAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine OrphanProductAssign

!! Delete
subroutine OrphanProductDelete(handle) &
      bind(C, name='OrphanProductDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine OrphanProductDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function OrphanProductRead(handle, filename, filenameSize) &
      bind(C, name='OrphanProductRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function OrphanProductRead

!! Write to file
function OrphanProductWrite(handle, filename, filenameSize) &
      bind(C, name='OrphanProductWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function OrphanProductWrite

!! Print to standard output, in our prettyprinting format
function OrphanProductPrint(handle) &
      bind(C, name='OrphanProductPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function OrphanProductPrint

!! Print to standard output, as XML
function OrphanProductPrintXML(handle) &
      bind(C, name='OrphanProductPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function OrphanProductPrintXML

!! Print to standard output, as JSON
function OrphanProductPrintJSON(handle) &
      bind(C, name='OrphanProductPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function OrphanProductPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function OrphanProductLabelHas(handle) &
      bind(C, name='OrphanProductLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function OrphanProductLabelHas

!! Get
function OrphanProductLabelGet(handle) &
      bind(C, name='OrphanProductLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function OrphanProductLabelGet

!! Set
subroutine OrphanProductLabelSet(handle, label, labelSize) &
      bind(C, name='OrphanProductLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine OrphanProductLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MT
!! -----------------------------------------------------------------------------

!! Has
function OrphanProductENDFMTHas(handle) &
      bind(C, name='OrphanProductENDFMTHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function OrphanProductENDFMTHas

!! Get
function OrphanProductENDFMTGet(handle) &
      bind(C, name='OrphanProductENDFMTGet') &
      result(ENDF_MT)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ENDF_MT
end function OrphanProductENDFMTGet

!! Set
subroutine OrphanProductENDFMTSet(handle, ENDF_MT, ENDF_MTSize) &
      bind(C, name='OrphanProductENDFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ENDF_MTSize
   character(c_char), intent(in) :: ENDF_MT(ENDF_MTSize)
end subroutine OrphanProductENDFMTSet


!! -----------------------------------------------------------------------------
!! Child: crossSection
!! -----------------------------------------------------------------------------

!! Has
function OrphanProductCrossSectionHas(handle) &
      bind(C, name='OrphanProductCrossSectionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function OrphanProductCrossSectionHas

!! Get, const
function OrphanProductCrossSectionGetConst(handle) &
      bind(C, name='OrphanProductCrossSectionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function OrphanProductCrossSectionGetConst

!! Get
function OrphanProductCrossSectionGet(handle) &
      bind(C, name='OrphanProductCrossSectionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function OrphanProductCrossSectionGet

!! Set
subroutine OrphanProductCrossSectionSet(handle, fieldHandle) &
      bind(C, name='OrphanProductCrossSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine OrphanProductCrossSectionSet


!! -----------------------------------------------------------------------------
!! Child: outputChannel
!! -----------------------------------------------------------------------------

!! Has
function OrphanProductOutputChannelHas(handle) &
      bind(C, name='OrphanProductOutputChannelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function OrphanProductOutputChannelHas

!! Get, const
function OrphanProductOutputChannelGetConst(handle) &
      bind(C, name='OrphanProductOutputChannelGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function OrphanProductOutputChannelGetConst

!! Get
function OrphanProductOutputChannelGet(handle) &
      bind(C, name='OrphanProductOutputChannelGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function OrphanProductOutputChannelGet

!! Set
subroutine OrphanProductOutputChannelSet(handle, fieldHandle) &
      bind(C, name='OrphanProductOutputChannelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine OrphanProductOutputChannelSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalOrphanProduct
