
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalPromptNeutronKE
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function PromptNeutronKEDefaultConst() &
      bind(C, name='PromptNeutronKEDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: PromptNeutronKEDefaultConst
end function PromptNeutronKEDefaultConst

!! Create, default
function PromptNeutronKEDefault() &
      bind(C, name='PromptNeutronKEDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: PromptNeutronKEDefault
end function PromptNeutronKEDefault

!! Create, general, const
function PromptNeutronKECreateConst( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='PromptNeutronKECreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr) :: PromptNeutronKECreateConst
end function PromptNeutronKECreateConst

!! Create, general
function PromptNeutronKECreate( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='PromptNeutronKECreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr) :: PromptNeutronKECreate
end function PromptNeutronKECreate

!! Assign
subroutine PromptNeutronKEAssign(handleLHS, handleRHS) &
      bind(C, name='PromptNeutronKEAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine PromptNeutronKEAssign

!! Delete
subroutine PromptNeutronKEDelete(handle) &
      bind(C, name='PromptNeutronKEDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine PromptNeutronKEDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function PromptNeutronKERead(handle, filename, filenameSize) &
      bind(C, name='PromptNeutronKERead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: PromptNeutronKERead
end function PromptNeutronKERead

!! Write to file
function PromptNeutronKEWrite(handle, filename, filenameSize) &
      bind(C, name='PromptNeutronKEWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: PromptNeutronKEWrite
end function PromptNeutronKEWrite

!! Print to standard output, in our prettyprinting format
function PromptNeutronKEPrint(handle) &
      bind(C, name='PromptNeutronKEPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PromptNeutronKEPrint
end function PromptNeutronKEPrint

!! Print to standard output, as XML
function PromptNeutronKEPrintXML(handle) &
      bind(C, name='PromptNeutronKEPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PromptNeutronKEPrintXML
end function PromptNeutronKEPrintXML

!! Print to standard output, as JSON
function PromptNeutronKEPrintJSON(handle) &
      bind(C, name='PromptNeutronKEPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PromptNeutronKEPrintJSON
end function PromptNeutronKEPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function PromptNeutronKEPolynomial1dHas(handle) &
      bind(C, name='PromptNeutronKEPolynomial1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PromptNeutronKEPolynomial1dHas
end function PromptNeutronKEPolynomial1dHas

!! Get, const
function PromptNeutronKEPolynomial1dGetConst(handle) &
      bind(C, name='PromptNeutronKEPolynomial1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: PromptNeutronKEPolynomial1dGetConst
end function PromptNeutronKEPolynomial1dGetConst

!! Get
function PromptNeutronKEPolynomial1dGet(handle) &
      bind(C, name='PromptNeutronKEPolynomial1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: PromptNeutronKEPolynomial1dGet
end function PromptNeutronKEPolynomial1dGet

!! Set
subroutine PromptNeutronKEPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='PromptNeutronKEPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine PromptNeutronKEPolynomial1dSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function PromptNeutronKEXYs1dHas(handle) &
      bind(C, name='PromptNeutronKEXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PromptNeutronKEXYs1dHas
end function PromptNeutronKEXYs1dHas

!! Get, const
function PromptNeutronKEXYs1dGetConst(handle) &
      bind(C, name='PromptNeutronKEXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: PromptNeutronKEXYs1dGetConst
end function PromptNeutronKEXYs1dGetConst

!! Get
function PromptNeutronKEXYs1dGet(handle) &
      bind(C, name='PromptNeutronKEXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: PromptNeutronKEXYs1dGet
end function PromptNeutronKEXYs1dGet

!! Set
subroutine PromptNeutronKEXYs1dSet(handle, fieldHandle) &
      bind(C, name='PromptNeutronKEXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine PromptNeutronKEXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalPromptNeutronKE
