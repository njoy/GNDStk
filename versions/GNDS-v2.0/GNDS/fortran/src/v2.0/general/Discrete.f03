
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDiscrete
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DiscreteDefaultConst() &
      bind(C, name='DiscreteDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DiscreteDefaultConst

!! Create, default
function DiscreteDefault() &
      bind(C, name='DiscreteDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DiscreteDefault

!! Create, general, const
function DiscreteCreateConst( &
   type1, &
   intensity, &
   energy, &
   internalConversionCoefficients, &
   positronEmissionIntensity, &
   type1Size &
) &
      bind(C, name='DiscreteCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
   type(c_ptr), value :: intensity
   type(c_ptr), value :: energy
   type(c_ptr), value :: internalConversionCoefficients
   type(c_ptr), value :: positronEmissionIntensity
   type(c_ptr) :: handle
end function DiscreteCreateConst

!! Create, general
function DiscreteCreate( &
   type1, &
   intensity, &
   energy, &
   internalConversionCoefficients, &
   positronEmissionIntensity, &
   type1Size &
) &
      bind(C, name='DiscreteCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
   type(c_ptr), value :: intensity
   type(c_ptr), value :: energy
   type(c_ptr), value :: internalConversionCoefficients
   type(c_ptr), value :: positronEmissionIntensity
   type(c_ptr) :: handle
end function DiscreteCreate

!! Assign
subroutine DiscreteAssign(handleLHS, handleRHS) &
      bind(C, name='DiscreteAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DiscreteAssign

!! Delete
subroutine DiscreteDelete(handle) &
      bind(C, name='DiscreteDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DiscreteDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DiscreteRead(handle, filename, filenameSize) &
      bind(C, name='DiscreteRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DiscreteRead

!! Write to file
function DiscreteWrite(handle, filename, filenameSize) &
      bind(C, name='DiscreteWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DiscreteWrite

!! Print to standard output, in our prettyprinting format
function DiscretePrint(handle) &
      bind(C, name='DiscretePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DiscretePrint

!! Print to standard output, as XML
function DiscretePrintXML(handle) &
      bind(C, name='DiscretePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DiscretePrintXML

!! Print to standard output, as JSON
function DiscretePrintJSON(handle) &
      bind(C, name='DiscretePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DiscretePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: type
!! -----------------------------------------------------------------------------

!! Has
function DiscreteTypeHas(handle) &
      bind(C, name='DiscreteTypeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteTypeHas

!! Get
function DiscreteTypeGet(handle) &
      bind(C, name='DiscreteTypeGet') &
      result(type1)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: type1
end function DiscreteTypeGet

!! Set
subroutine DiscreteTypeSet(handle, type1, type1Size) &
      bind(C, name='DiscreteTypeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
end subroutine DiscreteTypeSet


!! -----------------------------------------------------------------------------
!! Child: intensity
!! -----------------------------------------------------------------------------

!! Has
function DiscreteIntensityHas(handle) &
      bind(C, name='DiscreteIntensityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteIntensityHas

!! Get, const
function DiscreteIntensityGetConst(handle) &
      bind(C, name='DiscreteIntensityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteIntensityGetConst

!! Get
function DiscreteIntensityGet(handle) &
      bind(C, name='DiscreteIntensityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteIntensityGet

!! Set
subroutine DiscreteIntensitySet(handle, fieldHandle) &
      bind(C, name='DiscreteIntensitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DiscreteIntensitySet


!! -----------------------------------------------------------------------------
!! Child: energy
!! -----------------------------------------------------------------------------

!! Has
function DiscreteEnergyHas(handle) &
      bind(C, name='DiscreteEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteEnergyHas

!! Get, const
function DiscreteEnergyGetConst(handle) &
      bind(C, name='DiscreteEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteEnergyGetConst

!! Get
function DiscreteEnergyGet(handle) &
      bind(C, name='DiscreteEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteEnergyGet

!! Set
subroutine DiscreteEnergySet(handle, fieldHandle) &
      bind(C, name='DiscreteEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DiscreteEnergySet


!! -----------------------------------------------------------------------------
!! Child: internalConversionCoefficients
!! -----------------------------------------------------------------------------

!! Has
function DiscreteInternalConversionCoefficientsHas(handle) &
      bind(C, name='DiscreteInternalConversionCoefficientsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteInternalConversionCoefficientsHas

!! Get, const
function DiscreteInternalConversionCoefficientsGetConst(handle) &
      bind(C, name='DiscreteInternalConversionCoefficientsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteInternalConversionCoefficientsGetConst

!! Get
function DiscreteInternalConversionCoefficientsGet(handle) &
      bind(C, name='DiscreteInternalConversionCoefficientsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteInternalConversionCoefficientsGet

!! Set
subroutine DiscreteInternalConversionCoefficientsSet(handle, fieldHandle) &
      bind(C, name='DiscreteInternalConversionCoefficientsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DiscreteInternalConversionCoefficientsSet


!! -----------------------------------------------------------------------------
!! Child: positronEmissionIntensity
!! -----------------------------------------------------------------------------

!! Has
function DiscretePositronEmissionIntensityHas(handle) &
      bind(C, name='DiscretePositronEmissionIntensityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscretePositronEmissionIntensityHas

!! Get, const
function DiscretePositronEmissionIntensityGetConst(handle) &
      bind(C, name='DiscretePositronEmissionIntensityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscretePositronEmissionIntensityGetConst

!! Get
function DiscretePositronEmissionIntensityGet(handle) &
      bind(C, name='DiscretePositronEmissionIntensityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscretePositronEmissionIntensityGet

!! Set
subroutine DiscretePositronEmissionIntensitySet(handle, fieldHandle) &
      bind(C, name='DiscretePositronEmissionIntensitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DiscretePositronEmissionIntensitySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDiscrete
