
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalApplicationData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ApplicationDataDefaultConst() &
      bind(C, name='ApplicationDataDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ApplicationDataDefaultConst

!! Create, default
function ApplicationDataDefault() &
      bind(C, name='ApplicationDataDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ApplicationDataDefault

!! Create, general, const
function ApplicationDataCreateConst( &
   institution &
) &
      bind(C, name='ApplicationDataCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: institution
   type(c_ptr) :: handle
end function ApplicationDataCreateConst

!! Create, general
function ApplicationDataCreate( &
   institution &
) &
      bind(C, name='ApplicationDataCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: institution
   type(c_ptr) :: handle
end function ApplicationDataCreate

!! Assign
subroutine ApplicationDataAssign(handleLHS, handleRHS) &
      bind(C, name='ApplicationDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ApplicationDataAssign

!! Delete
subroutine ApplicationDataDelete(handle) &
      bind(C, name='ApplicationDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ApplicationDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ApplicationDataRead(handle, filename, filenameSize) &
      bind(C, name='ApplicationDataRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ApplicationDataRead

!! Write to file
function ApplicationDataWrite(handle, filename, filenameSize) &
      bind(C, name='ApplicationDataWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ApplicationDataWrite

!! Print to standard output, in our prettyprinting format
function ApplicationDataPrint(handle) &
      bind(C, name='ApplicationDataPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ApplicationDataPrint

!! Print to standard output, as XML
function ApplicationDataPrintXML(handle) &
      bind(C, name='ApplicationDataPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ApplicationDataPrintXML

!! Print to standard output, as JSON
function ApplicationDataPrintJSON(handle) &
      bind(C, name='ApplicationDataPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ApplicationDataPrintJSON


!! -----------------------------------------------------------------------------
!! Child: institution
!! -----------------------------------------------------------------------------

!! Has
function ApplicationDataInstitutionHas(handle) &
      bind(C, name='ApplicationDataInstitutionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ApplicationDataInstitutionHas

!! Get, const
function ApplicationDataInstitutionGetConst(handle) &
      bind(C, name='ApplicationDataInstitutionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ApplicationDataInstitutionGetConst

!! Get
function ApplicationDataInstitutionGet(handle) &
      bind(C, name='ApplicationDataInstitutionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ApplicationDataInstitutionGet

!! Set
subroutine ApplicationDataInstitutionSet(handle, fieldHandle) &
      bind(C, name='ApplicationDataInstitutionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ApplicationDataInstitutionSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalApplicationData
