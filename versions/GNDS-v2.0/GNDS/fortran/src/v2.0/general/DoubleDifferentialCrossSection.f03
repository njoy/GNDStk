
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDoubleDifferentialCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DoubleDifferentialCrossSectionDefaultConst() &
      bind(C, name='DoubleDifferentialCrossSectionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DoubleDifferentialCrossSectionDefaultConst

!! Create, default
function DoubleDifferentialCrossSectionDefault() &
      bind(C, name='DoubleDifferentialCrossSectionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DoubleDifferentialCrossSectionDefault

!! Create, general, const
function DoubleDifferentialCrossSectionCreateConst( &
   CoulombPlusNuclearElastic, &
   coherentPhotonScattering, &
   incoherentPhotonScattering, &
   thermalNeutronScatteringLaw_coherentElastic, &
   thermalNeutronScatteringLaw_incoherentElastic, &
   thermalNeutronScatteringLaw_incoherentInelastic &
) &
      bind(C, name='DoubleDifferentialCrossSectionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: CoulombPlusNuclearElastic
   type(c_ptr), value :: coherentPhotonScattering
   type(c_ptr), value :: incoherentPhotonScattering
   type(c_ptr), value :: thermalNeutronScatteringLaw_coherentElastic
   type(c_ptr), value :: thermalNeutronScatteringLaw_incoherentElastic
   type(c_ptr), value :: thermalNeutronScatteringLaw_incoherentInelastic
   type(c_ptr) :: handle
end function DoubleDifferentialCrossSectionCreateConst

!! Create, general
function DoubleDifferentialCrossSectionCreate( &
   CoulombPlusNuclearElastic, &
   coherentPhotonScattering, &
   incoherentPhotonScattering, &
   thermalNeutronScatteringLaw_coherentElastic, &
   thermalNeutronScatteringLaw_incoherentElastic, &
   thermalNeutronScatteringLaw_incoherentInelastic &
) &
      bind(C, name='DoubleDifferentialCrossSectionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: CoulombPlusNuclearElastic
   type(c_ptr), value :: coherentPhotonScattering
   type(c_ptr), value :: incoherentPhotonScattering
   type(c_ptr), value :: thermalNeutronScatteringLaw_coherentElastic
   type(c_ptr), value :: thermalNeutronScatteringLaw_incoherentElastic
   type(c_ptr), value :: thermalNeutronScatteringLaw_incoherentInelastic
   type(c_ptr) :: handle
end function DoubleDifferentialCrossSectionCreate

!! Assign
subroutine DoubleDifferentialCrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='DoubleDifferentialCrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DoubleDifferentialCrossSectionAssign

!! Delete
subroutine DoubleDifferentialCrossSectionDelete(handle) &
      bind(C, name='DoubleDifferentialCrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DoubleDifferentialCrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DoubleDifferentialCrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='DoubleDifferentialCrossSectionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DoubleDifferentialCrossSectionRead

!! Write to file
function DoubleDifferentialCrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='DoubleDifferentialCrossSectionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DoubleDifferentialCrossSectionWrite

!! Print to standard output, in our prettyprinting format
function DoubleDifferentialCrossSectionPrint(handle) &
      bind(C, name='DoubleDifferentialCrossSectionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DoubleDifferentialCrossSectionPrint

!! Print to standard output, as XML
function DoubleDifferentialCrossSectionPrintXML(handle) &
      bind(C, name='DoubleDifferentialCrossSectionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DoubleDifferentialCrossSectionPrintXML

!! Print to standard output, as JSON
function DoubleDifferentialCrossSectionPrintJSON(handle) &
      bind(C, name='DoubleDifferentialCrossSectionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DoubleDifferentialCrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: CoulombPlusNuclearElastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas

!! Get, const
function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst

!! Get
function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet

!! Set
subroutine DoubleDifferentialCrossSectionCoulombPlusNuclearElasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionCoulombPlusNuclearElasticSet


!! -----------------------------------------------------------------------------
!! Child: coherentPhotonScattering
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionCoherentPhotonScatteringHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleDifferentialCrossSectionCoherentPhotonScatteringHas

!! Get, const
function DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst

!! Get
function DoubleDifferentialCrossSectionCoherentPhotonScatteringGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionCoherentPhotonScatteringGet

!! Set
subroutine DoubleDifferentialCrossSectionCoherentPhotonScatteringSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionCoherentPhotonScatteringSet


!! -----------------------------------------------------------------------------
!! Child: incoherentPhotonScattering
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas

!! Get, const
function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst

!! Get
function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet

!! Set
subroutine DoubleDifferentialCrossSectionIncoherentPhotonScatteringSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionIncoherentPhotonScatteringSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw_coherentElastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas

!! Get, const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst

!! Get
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet

!! Set
subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw_incoherentElastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas

!! Get, const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst

!! Get
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet

!! Set
subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw_incoherentInelastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas

!! Get, const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst

!! Get
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet

!! Set
subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDoubleDifferentialCrossSection
