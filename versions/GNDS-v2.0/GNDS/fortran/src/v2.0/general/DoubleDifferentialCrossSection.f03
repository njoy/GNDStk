
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDoubleDifferentialCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DoubleDifferentialCrossSectionDefaultConst() &
      bind(C, name='DoubleDifferentialCrossSectionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DoubleDifferentialCrossSectionDefaultConst
end function DoubleDifferentialCrossSectionDefaultConst

!! Create, default, non-const
function DoubleDifferentialCrossSectionDefault() &
      bind(C, name='DoubleDifferentialCrossSectionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DoubleDifferentialCrossSectionDefault
end function DoubleDifferentialCrossSectionDefault

!! Create, general, const
function DoubleDifferentialCrossSectionCreateConst( &
   CoulombPlusNuclearElastic, &
   coherentPhotonScattering, &
   incoherentPhotonScattering, &
   thermalNeutronScatteringLaw_coherentElastic, &
   thermalNeutronScatteringLaw_incoherentElastic, &
   thermalNeutronScatteringLaw_incoherentInelastic &
) &
      bind(C, name='DoubleDifferentialCrossSectionCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: CoulombPlusNuclearElastic
   type(c_ptr), intent(in), value :: coherentPhotonScattering
   type(c_ptr), intent(in), value :: incoherentPhotonScattering
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw_coherentElastic
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw_incoherentElastic
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw_incoherentInelastic
   type(c_ptr) :: DoubleDifferentialCrossSectionCreateConst
end function DoubleDifferentialCrossSectionCreateConst

!! Create, general, non-const
function DoubleDifferentialCrossSectionCreate( &
   CoulombPlusNuclearElastic, &
   coherentPhotonScattering, &
   incoherentPhotonScattering, &
   thermalNeutronScatteringLaw_coherentElastic, &
   thermalNeutronScatteringLaw_incoherentElastic, &
   thermalNeutronScatteringLaw_incoherentInelastic &
) &
      bind(C, name='DoubleDifferentialCrossSectionCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: CoulombPlusNuclearElastic
   type(c_ptr), intent(in), value :: coherentPhotonScattering
   type(c_ptr), intent(in), value :: incoherentPhotonScattering
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw_coherentElastic
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw_incoherentElastic
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw_incoherentInelastic
   type(c_ptr) :: DoubleDifferentialCrossSectionCreate
end function DoubleDifferentialCrossSectionCreate

!! Assign
subroutine DoubleDifferentialCrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='DoubleDifferentialCrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine DoubleDifferentialCrossSectionAssign

!! Delete
subroutine DoubleDifferentialCrossSectionDelete(handle) &
      bind(C, name='DoubleDifferentialCrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DoubleDifferentialCrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function DoubleDifferentialCrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='DoubleDifferentialCrossSectionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DoubleDifferentialCrossSectionRead
end function DoubleDifferentialCrossSectionRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function DoubleDifferentialCrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='DoubleDifferentialCrossSectionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DoubleDifferentialCrossSectionWrite
end function DoubleDifferentialCrossSectionWrite

!! Print to standard output, in our prettyprinting format
function DoubleDifferentialCrossSectionPrint(handle) &
      bind(C, name='DoubleDifferentialCrossSectionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionPrint
end function DoubleDifferentialCrossSectionPrint

!! Print to standard output, as XML
function DoubleDifferentialCrossSectionPrintXML(handle) &
      bind(C, name='DoubleDifferentialCrossSectionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionPrintXML
end function DoubleDifferentialCrossSectionPrintXML

!! Print to standard output, as JSON
function DoubleDifferentialCrossSectionPrintJSON(handle) &
      bind(C, name='DoubleDifferentialCrossSectionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionPrintJSON
end function DoubleDifferentialCrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: CoulombPlusNuclearElastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas
end function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticHas

!! Get, const
function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst
end function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGetConst

!! Get, non-const
function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet
end function DoubleDifferentialCrossSectionCoulombPlusNuclearElasticGet

!! Set
subroutine DoubleDifferentialCrossSectionCoulombPlusNuclearElasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionCoulombPlusNuclearElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionCoulombPlusNuclearElasticSet


!! -----------------------------------------------------------------------------
!! Child: coherentPhotonScattering
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionCoherentPhotonScatteringHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionCoherentPhotonScatteringHas
end function DoubleDifferentialCrossSectionCoherentPhotonScatteringHas

!! Get, const
function DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst
end function DoubleDifferentialCrossSectionCoherentPhotonScatteringGetConst

!! Get, non-const
function DoubleDifferentialCrossSectionCoherentPhotonScatteringGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionCoherentPhotonScatteringGet
end function DoubleDifferentialCrossSectionCoherentPhotonScatteringGet

!! Set
subroutine DoubleDifferentialCrossSectionCoherentPhotonScatteringSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionCoherentPhotonScatteringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionCoherentPhotonScatteringSet


!! -----------------------------------------------------------------------------
!! Child: incoherentPhotonScattering
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas
end function DoubleDifferentialCrossSectionIncoherentPhotonScatteringHas

!! Get, const
function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst
end function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGetConst

!! Get, non-const
function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet
end function DoubleDifferentialCrossSectionIncoherentPhotonScatteringGet

!! Set
subroutine DoubleDifferentialCrossSectionIncoherentPhotonScatteringSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionIncoherentPhotonScatteringSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionIncoherentPhotonScatteringSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw_coherentElastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticHas

!! Get, const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGetConst

!! Get, non-const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticGet

!! Set
subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_coherentElasticSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw_incoherentElastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticHas

!! Get, const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGetConst

!! Get, non-const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticGet

!! Set
subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentElasticSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw_incoherentInelastic
!! -----------------------------------------------------------------------------

!! Has
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticHas

!! Get, const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGetConst

!! Get, non-const
function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet(handle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet
end function DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticGet

!! Set
subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticSet(handle, fieldHandle) &
      bind(C, name='DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DoubleDifferentialCrossSectionThermalNeutronScatteringLaw_incoherentInelasticSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDoubleDifferentialCrossSection
