
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCovarianceMatrix
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CovarianceMatrixDefaultConst() &
      bind(C, name='CovarianceMatrixDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceMatrixDefaultConst

!! Create, default
function CovarianceMatrixDefault() &
      bind(C, name='CovarianceMatrixDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceMatrixDefault

!! Create, general, const
function CovarianceMatrixCreateConst( &
   label, &
   type1, &
   productFrame, &
   gridded2d, &
   labelSize, &
   type1Size, &
   productFrameSize &
) &
      bind(C, name='CovarianceMatrixCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: gridded2d
   type(c_ptr) :: handle
end function CovarianceMatrixCreateConst

!! Create, general
function CovarianceMatrixCreate( &
   label, &
   type1, &
   productFrame, &
   gridded2d, &
   labelSize, &
   type1Size, &
   productFrameSize &
) &
      bind(C, name='CovarianceMatrixCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: gridded2d
   type(c_ptr) :: handle
end function CovarianceMatrixCreate

!! Assign
subroutine CovarianceMatrixAssign(handleLHS, handleRHS) &
      bind(C, name='CovarianceMatrixAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CovarianceMatrixAssign

!! Delete
subroutine CovarianceMatrixDelete(handle) &
      bind(C, name='CovarianceMatrixDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceMatrixDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CovarianceMatrixRead(handle, filename, filenameSize) &
      bind(C, name='CovarianceMatrixRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceMatrixRead

!! Write to file
function CovarianceMatrixWrite(handle, filename, filenameSize) &
      bind(C, name='CovarianceMatrixWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceMatrixWrite

!! Print to standard output, in our prettyprinting format
function CovarianceMatrixPrint(handle) &
      bind(C, name='CovarianceMatrixPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceMatrixPrint

!! Print to standard output, as XML
function CovarianceMatrixPrintXML(handle) &
      bind(C, name='CovarianceMatrixPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceMatrixPrintXML

!! Print to standard output, as JSON
function CovarianceMatrixPrintJSON(handle) &
      bind(C, name='CovarianceMatrixPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceMatrixPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CovarianceMatrixLabelHas(handle) &
      bind(C, name='CovarianceMatrixLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceMatrixLabelHas

!! Get
function CovarianceMatrixLabelGet(handle) &
      bind(C, name='CovarianceMatrixLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function CovarianceMatrixLabelGet

!! Set
subroutine CovarianceMatrixLabelSet(handle, label, labelSize) &
      bind(C, name='CovarianceMatrixLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CovarianceMatrixLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: type
!! -----------------------------------------------------------------------------

!! Has
function CovarianceMatrixTypeHas(handle) &
      bind(C, name='CovarianceMatrixTypeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceMatrixTypeHas

!! Get
function CovarianceMatrixTypeGet(handle) &
      bind(C, name='CovarianceMatrixTypeGet') &
      result(type1)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: type1
end function CovarianceMatrixTypeGet

!! Set
subroutine CovarianceMatrixTypeSet(handle, type1, type1Size) &
      bind(C, name='CovarianceMatrixTypeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: type1Size
   character(c_char), intent(in) :: type1(type1Size)
end subroutine CovarianceMatrixTypeSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function CovarianceMatrixProductFrameHas(handle) &
      bind(C, name='CovarianceMatrixProductFrameHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceMatrixProductFrameHas

!! Get
function CovarianceMatrixProductFrameGet(handle) &
      bind(C, name='CovarianceMatrixProductFrameGet') &
      result(productFrame)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: productFrame
end function CovarianceMatrixProductFrameGet

!! Set
subroutine CovarianceMatrixProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='CovarianceMatrixProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine CovarianceMatrixProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: gridded2d
!! -----------------------------------------------------------------------------

!! Has
function CovarianceMatrixGridded2dHas(handle) &
      bind(C, name='CovarianceMatrixGridded2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceMatrixGridded2dHas

!! Get, const
function CovarianceMatrixGridded2dGetConst(handle) &
      bind(C, name='CovarianceMatrixGridded2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceMatrixGridded2dGetConst

!! Get
function CovarianceMatrixGridded2dGet(handle) &
      bind(C, name='CovarianceMatrixGridded2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceMatrixGridded2dGet

!! Set
subroutine CovarianceMatrixGridded2dSet(handle, fieldHandle) &
      bind(C, name='CovarianceMatrixGridded2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceMatrixGridded2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCovarianceMatrix
