
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalParameterCovariances
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ParameterCovariancesDefaultConst() &
      bind(C, name='ParameterCovariancesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ParameterCovariancesDefaultConst
end function ParameterCovariancesDefaultConst

!! Create, default, non-const
function ParameterCovariancesDefault() &
      bind(C, name='ParameterCovariancesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ParameterCovariancesDefault
end function ParameterCovariancesDefault

!! Create, general, const
function ParameterCovariancesCreateConst( &
   parameterCovariance, parameterCovarianceSize, &
   averageParameterCovariance, averageParameterCovarianceSize &
) &
      bind(C, name='ParameterCovariancesCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: parameterCovarianceSize
   type(c_ptr), intent(in) :: parameterCovariance(parameterCovarianceSize)
   integer(c_size_t), intent(in), value :: averageParameterCovarianceSize
   type(c_ptr), intent(in) :: averageParameterCovariance(averageParameterCovarianceSize)
   type(c_ptr) :: ParameterCovariancesCreateConst
end function ParameterCovariancesCreateConst

!! Create, general, non-const
function ParameterCovariancesCreate( &
   parameterCovariance, parameterCovarianceSize, &
   averageParameterCovariance, averageParameterCovarianceSize &
) &
      bind(C, name='ParameterCovariancesCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: parameterCovarianceSize
   type(c_ptr), intent(in) :: parameterCovariance(parameterCovarianceSize)
   integer(c_size_t), intent(in), value :: averageParameterCovarianceSize
   type(c_ptr), intent(in) :: averageParameterCovariance(averageParameterCovarianceSize)
   type(c_ptr) :: ParameterCovariancesCreate
end function ParameterCovariancesCreate

!! Assign
subroutine ParameterCovariancesAssign(handleLHS, handleRHS) &
      bind(C, name='ParameterCovariancesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ParameterCovariancesAssign

!! Delete
subroutine ParameterCovariancesDelete(handle) &
      bind(C, name='ParameterCovariancesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ParameterCovariancesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ParameterCovariancesRead(handle, filename, filenameSize) &
      bind(C, name='ParameterCovariancesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ParameterCovariancesRead
end function ParameterCovariancesRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ParameterCovariancesWrite(handle, filename, filenameSize) &
      bind(C, name='ParameterCovariancesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ParameterCovariancesWrite
end function ParameterCovariancesWrite

!! Print to standard output, in our prettyprinting format
function ParameterCovariancesPrint(handle) &
      bind(C, name='ParameterCovariancesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParameterCovariancesPrint
end function ParameterCovariancesPrint

!! Print to standard output, as XML
function ParameterCovariancesPrintXML(handle) &
      bind(C, name='ParameterCovariancesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParameterCovariancesPrintXML
end function ParameterCovariancesPrintXML

!! Print to standard output, as JSON
function ParameterCovariancesPrintJSON(handle) &
      bind(C, name='ParameterCovariancesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParameterCovariancesPrintJSON
end function ParameterCovariancesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: parameterCovariance
!! -----------------------------------------------------------------------------

!! Has
function ParameterCovariancesParameterCovarianceHas(handle) &
      bind(C, name='ParameterCovariancesParameterCovarianceHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParameterCovariancesParameterCovarianceHas
end function ParameterCovariancesParameterCovarianceHas

!! Clear
subroutine ParameterCovariancesParameterCovarianceClear(handle) &
      bind(C, name='ParameterCovariancesParameterCovarianceClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ParameterCovariancesParameterCovarianceClear

!! Size
function ParameterCovariancesParameterCovarianceSize(handle) &
      bind(C, name='ParameterCovariancesParameterCovarianceSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: ParameterCovariancesParameterCovarianceSize
end function ParameterCovariancesParameterCovarianceSize

!! Add
subroutine ParameterCovariancesParameterCovarianceAdd(handle, fieldHandle) &
      bind(C, name='ParameterCovariancesParameterCovarianceAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesParameterCovarianceAdd

!! Get, by index \in [0,size), const
function ParameterCovariancesParameterCovarianceGetConst(handle, index) &
      bind(C, name='ParameterCovariancesParameterCovarianceGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ParameterCovariancesParameterCovarianceGetConst
end function ParameterCovariancesParameterCovarianceGetConst

!! Get, by index \in [0,size), non-const
function ParameterCovariancesParameterCovarianceGet(handle, index) &
      bind(C, name='ParameterCovariancesParameterCovarianceGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ParameterCovariancesParameterCovarianceGet
end function ParameterCovariancesParameterCovarianceGet

!! Set, by index \in [0,size)
subroutine ParameterCovariancesParameterCovarianceSet(handle, index, fieldHandle) &
      bind(C, name='ParameterCovariancesParameterCovarianceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesParameterCovarianceSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function ParameterCovariancesParameterCovarianceHasByLabel(handle, meta, metaSize) &
      bind(C, name='ParameterCovariancesParameterCovarianceHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: ParameterCovariancesParameterCovarianceHasByLabel
end function ParameterCovariancesParameterCovarianceHasByLabel

!! Get, by label, const
function ParameterCovariancesParameterCovarianceGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='ParameterCovariancesParameterCovarianceGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ParameterCovariancesParameterCovarianceGetByLabelConst
end function ParameterCovariancesParameterCovarianceGetByLabelConst

!! Get, by label, non-const
function ParameterCovariancesParameterCovarianceGetByLabel(handle, meta, metaSize) &
      bind(C, name='ParameterCovariancesParameterCovarianceGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ParameterCovariancesParameterCovarianceGetByLabel
end function ParameterCovariancesParameterCovarianceGetByLabel

!! Set, by label
subroutine ParameterCovariancesParameterCovarianceSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ParameterCovariancesParameterCovarianceSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesParameterCovarianceSetByLabel


!! -----------------------------------------------------------------------------
!! Child: averageParameterCovariance
!! -----------------------------------------------------------------------------

!! Has
function ParameterCovariancesAverageParameterCovarianceHas(handle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParameterCovariancesAverageParameterCovarianceHas
end function ParameterCovariancesAverageParameterCovarianceHas

!! Clear
subroutine ParameterCovariancesAverageParameterCovarianceClear(handle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ParameterCovariancesAverageParameterCovarianceClear

!! Size
function ParameterCovariancesAverageParameterCovarianceSize(handle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: ParameterCovariancesAverageParameterCovarianceSize
end function ParameterCovariancesAverageParameterCovarianceSize

!! Add
subroutine ParameterCovariancesAverageParameterCovarianceAdd(handle, fieldHandle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesAverageParameterCovarianceAdd

!! Get, by index \in [0,size), const
function ParameterCovariancesAverageParameterCovarianceGetConst(handle, index) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ParameterCovariancesAverageParameterCovarianceGetConst
end function ParameterCovariancesAverageParameterCovarianceGetConst

!! Get, by index \in [0,size), non-const
function ParameterCovariancesAverageParameterCovarianceGet(handle, index) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ParameterCovariancesAverageParameterCovarianceGet
end function ParameterCovariancesAverageParameterCovarianceGet

!! Set, by index \in [0,size)
subroutine ParameterCovariancesAverageParameterCovarianceSet(handle, index, fieldHandle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesAverageParameterCovarianceSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function ParameterCovariancesAverageParameterCovarianceHasByLabel(handle, meta, metaSize) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: ParameterCovariancesAverageParameterCovarianceHasByLabel
end function ParameterCovariancesAverageParameterCovarianceHasByLabel

!! Get, by label, const
function ParameterCovariancesAverageParameterCovarianceGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ParameterCovariancesAverageParameterCovarianceGetByLabelConst
end function ParameterCovariancesAverageParameterCovarianceGetByLabelConst

!! Get, by label, non-const
function ParameterCovariancesAverageParameterCovarianceGetByLabel(handle, meta, metaSize) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ParameterCovariancesAverageParameterCovarianceGetByLabel
end function ParameterCovariancesAverageParameterCovarianceGetByLabel

!! Set, by label
subroutine ParameterCovariancesAverageParameterCovarianceSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesAverageParameterCovarianceSetByLabel

!! ------------------------
!! Re: metadatum crossTerm
!! ------------------------

!! Has, by crossTerm
function ParameterCovariancesAverageParameterCovarianceHasByCrossTerm(handle, meta) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceHasByCrossTerm')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), intent(in), value :: meta
   integer(c_int) :: ParameterCovariancesAverageParameterCovarianceHasByCrossTerm
end function ParameterCovariancesAverageParameterCovarianceHasByCrossTerm

!! Get, by crossTerm, const
function ParameterCovariancesAverageParameterCovarianceGetByCrossTermConst(handle, meta) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceGetByCrossTermConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool), intent(in), value :: meta
   type(c_ptr) :: ParameterCovariancesAverageParameterCovarianceGetByCrossTermConst
end function ParameterCovariancesAverageParameterCovarianceGetByCrossTermConst

!! Get, by crossTerm, non-const
function ParameterCovariancesAverageParameterCovarianceGetByCrossTerm(handle, meta) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceGetByCrossTerm')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   logical(c_bool), intent(in), value :: meta
   type(c_ptr) :: ParameterCovariancesAverageParameterCovarianceGetByCrossTerm
end function ParameterCovariancesAverageParameterCovarianceGetByCrossTerm

!! Set, by crossTerm
subroutine ParameterCovariancesAverageParameterCovarianceSetByCrossTerm(handle, meta, fieldHandle) &
      bind(C, name='ParameterCovariancesAverageParameterCovarianceSetByCrossTerm')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   logical(c_bool), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParameterCovariancesAverageParameterCovarianceSetByCrossTerm


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalParameterCovariances
