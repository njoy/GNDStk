
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalRegions2d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Regions2dDefaultConst() &
      bind(C, name='Regions2dDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function Regions2dDefaultConst

!! Create, default
function Regions2dDefault() &
      bind(C, name='Regions2dDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function Regions2dDefault

!! Create, general, const
function Regions2dCreateConst( &
   axes, &
   function2ds, &
   uncertainty &
) &
      bind(C, name='Regions2dCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: axes
   type(c_ptr), value :: function2ds
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function Regions2dCreateConst

!! Create, general
function Regions2dCreate( &
   axes, &
   function2ds, &
   uncertainty &
) &
      bind(C, name='Regions2dCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: axes
   type(c_ptr), value :: function2ds
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function Regions2dCreate

!! Assign
subroutine Regions2dAssign(handleLHS, handleRHS) &
      bind(C, name='Regions2dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine Regions2dAssign

!! Delete
subroutine Regions2dDelete(handle) &
      bind(C, name='Regions2dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Regions2dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function Regions2dRead(handle, filename, filenameSize) &
      bind(C, name='Regions2dRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function Regions2dRead

!! Write to file
function Regions2dWrite(handle, filename, filenameSize) &
      bind(C, name='Regions2dWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function Regions2dWrite

!! Print to standard output, in our prettyprinting format
function Regions2dPrint(handle) &
      bind(C, name='Regions2dPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function Regions2dPrint

!! Print to standard output, as XML
function Regions2dPrintXML(handle) &
      bind(C, name='Regions2dPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function Regions2dPrintXML

!! Print to standard output, as JSON
function Regions2dPrintJSON(handle) &
      bind(C, name='Regions2dPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function Regions2dPrintJSON


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function Regions2dAxesHas(handle) &
      bind(C, name='Regions2dAxesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function Regions2dAxesHas

!! Get, const
function Regions2dAxesGetConst(handle) &
      bind(C, name='Regions2dAxesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function Regions2dAxesGetConst

!! Get
function Regions2dAxesGet(handle) &
      bind(C, name='Regions2dAxesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function Regions2dAxesGet

!! Set
subroutine Regions2dAxesSet(handle, fieldHandle) &
      bind(C, name='Regions2dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Regions2dAxesSet


!! -----------------------------------------------------------------------------
!! Child: function2ds
!! -----------------------------------------------------------------------------

!! Has
function Regions2dFunction2dsHas(handle) &
      bind(C, name='Regions2dFunction2dsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function Regions2dFunction2dsHas

!! Get, const
function Regions2dFunction2dsGetConst(handle) &
      bind(C, name='Regions2dFunction2dsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function Regions2dFunction2dsGetConst

!! Get
function Regions2dFunction2dsGet(handle) &
      bind(C, name='Regions2dFunction2dsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function Regions2dFunction2dsGet

!! Set
subroutine Regions2dFunction2dsSet(handle, fieldHandle) &
      bind(C, name='Regions2dFunction2dsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Regions2dFunction2dsSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function Regions2dUncertaintyHas(handle) &
      bind(C, name='Regions2dUncertaintyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function Regions2dUncertaintyHas

!! Get, const
function Regions2dUncertaintyGetConst(handle) &
      bind(C, name='Regions2dUncertaintyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function Regions2dUncertaintyGetConst

!! Get
function Regions2dUncertaintyGet(handle) &
      bind(C, name='Regions2dUncertaintyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function Regions2dUncertaintyGet

!! Set
subroutine Regions2dUncertaintySet(handle, fieldHandle) &
      bind(C, name='Regions2dUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Regions2dUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalRegions2d
