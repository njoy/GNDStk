
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEFL
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EFLDefaultConst() &
      bind(C, name='EFLDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EFLDefaultConst
end function EFLDefaultConst

!! Create, default
function EFLDefault() &
      bind(C, name='EFLDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: EFLDefault
end function EFLDefault

!! Create, general, const
function EFLCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='EFLCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: EFLCreateConst
end function EFLCreateConst

!! Create, general
function EFLCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='EFLCreate')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: EFLCreate
end function EFLCreate

!! Assign
subroutine EFLAssign(handleLHS, handleRHS) &
      bind(C, name='EFLAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine EFLAssign

!! Delete
subroutine EFLDelete(handle) &
      bind(C, name='EFLDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EFLDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function EFLRead(handle, filename, filenameSize) &
      bind(C, name='EFLRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EFLRead
end function EFLRead

!! Write to file
function EFLWrite(handle, filename, filenameSize) &
      bind(C, name='EFLWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: EFLWrite
end function EFLWrite

!! Print to standard output, in our prettyprinting format
function EFLPrint(handle) &
      bind(C, name='EFLPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFLPrint
end function EFLPrint

!! Print to standard output, as XML
function EFLPrintXML(handle) &
      bind(C, name='EFLPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFLPrintXML
end function EFLPrintXML

!! Print to standard output, as JSON
function EFLPrintJSON(handle) &
      bind(C, name='EFLPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFLPrintJSON
end function EFLPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function EFLValueHas(handle) &
      bind(C, name='EFLValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFLValueHas
end function EFLValueHas

!! Get
function EFLValueGet(handle) &
      bind(C, name='EFLValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: EFLValueGet
end function EFLValueGet

!! Set
subroutine EFLValueSet(handle, value, valueSize) &
      bind(C, name='EFLValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine EFLValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function EFLUnitHas(handle) &
      bind(C, name='EFLUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: EFLUnitHas
end function EFLUnitHas

!! Get
function EFLUnitGet(handle) &
      bind(C, name='EFLUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: EFLUnitGet
end function EFLUnitGet

!! Set
subroutine EFLUnitSet(handle, unit, unitSize) &
      bind(C, name='EFLUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine EFLUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEFL
