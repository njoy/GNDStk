
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalParity
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ParityDefaultConst() &
      bind(C, name='ParityDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ParityDefaultConst
end function ParityDefaultConst

!! Create, default, non-const
function ParityDefault() &
      bind(C, name='ParityDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ParityDefault
end function ParityDefault

!! Create, general, const
function ParityCreateConst( &
   integer &
) &
      bind(C, name='ParityCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: integer
   type(c_ptr) :: ParityCreateConst
end function ParityCreateConst

!! Create, general, non-const
function ParityCreate( &
   integer &
) &
      bind(C, name='ParityCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: integer
   type(c_ptr) :: ParityCreate
end function ParityCreate

!! Assign
subroutine ParityAssign(handleLHS, handleRHS) &
      bind(C, name='ParityAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ParityAssign

!! Delete
subroutine ParityDelete(handle) &
      bind(C, name='ParityDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ParityDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ParityRead(handle, filename, filenameSize) &
      bind(C, name='ParityRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ParityRead
end function ParityRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ParityWrite(handle, filename, filenameSize) &
      bind(C, name='ParityWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ParityWrite
end function ParityWrite

!! Print to standard output, in our prettyprinting format
function ParityPrint(handle) &
      bind(C, name='ParityPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParityPrint
end function ParityPrint

!! Print to standard output, as XML
function ParityPrintXML(handle) &
      bind(C, name='ParityPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParityPrintXML
end function ParityPrintXML

!! Print to standard output, as JSON
function ParityPrintJSON(handle) &
      bind(C, name='ParityPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParityPrintJSON
end function ParityPrintJSON


!! -----------------------------------------------------------------------------
!! Child: integer
!! -----------------------------------------------------------------------------

!! Has
function ParityIntegerHas(handle) &
      bind(C, name='ParityIntegerHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ParityIntegerHas
end function ParityIntegerHas

!! Get, const
function ParityIntegerGetConst(handle) &
      bind(C, name='ParityIntegerGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ParityIntegerGetConst
end function ParityIntegerGetConst

!! Get, non-const
function ParityIntegerGet(handle) &
      bind(C, name='ParityIntegerGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ParityIntegerGet
end function ParityIntegerGet

!! Set
subroutine ParityIntegerSet(handle, fieldHandle) &
      bind(C, name='ParityIntegerSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ParityIntegerSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalParity
