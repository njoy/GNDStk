
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalParity
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ParityDefaultConst() &
      bind(C, name='ParityDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ParityDefaultConst

!! Create, default
function ParityDefault() &
      bind(C, name='ParityDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ParityDefault

!! Create, general, const
function ParityCreateConst( &
   integer &
) &
      bind(C, name='ParityCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: integer
   type(c_ptr) :: handle
end function ParityCreateConst

!! Create, general
function ParityCreate( &
   integer &
) &
      bind(C, name='ParityCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: integer
   type(c_ptr) :: handle
end function ParityCreate

!! Assign
subroutine ParityAssign(handleLHS, handleRHS) &
      bind(C, name='ParityAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ParityAssign

!! Delete
subroutine ParityDelete(handle) &
      bind(C, name='ParityDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ParityDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ParityRead(handle, filename, filenameSize) &
      bind(C, name='ParityRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ParityRead

!! Write to file
function ParityWrite(handle, filename, filenameSize) &
      bind(C, name='ParityWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ParityWrite

!! Print to standard output, in our prettyprinting format
function ParityPrint(handle) &
      bind(C, name='ParityPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ParityPrint

!! Print to standard output, as XML
function ParityPrintXML(handle) &
      bind(C, name='ParityPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ParityPrintXML

!! Print to standard output, as JSON
function ParityPrintJSON(handle) &
      bind(C, name='ParityPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ParityPrintJSON


!! -----------------------------------------------------------------------------
!! Child: integer
!! -----------------------------------------------------------------------------

!! Has
function ParityIntegerHas(handle) &
      bind(C, name='ParityIntegerHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ParityIntegerHas

!! Get, const
function ParityIntegerGetConst(handle) &
      bind(C, name='ParityIntegerGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ParityIntegerGetConst

!! Get
function ParityIntegerGet(handle) &
      bind(C, name='ParityIntegerGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ParityIntegerGet

!! Set
subroutine ParityIntegerSet(handle, fieldHandle) &
      bind(C, name='ParityIntegerSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ParityIntegerSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalParity
