
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CrossSectionDefaultConst() &
      bind(C, name='CrossSectionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionDefaultConst
end function CrossSectionDefaultConst

!! Create, default, non-const
function CrossSectionDefault() &
      bind(C, name='CrossSectionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionDefault
end function CrossSectionDefault

!! Create, general, const
function CrossSectionCreateConst( &
   XYs1d, &
   regions1d, &
   reference, &
   resonancesWithBackground, &
   CoulombPlusNuclearElastic, &
   thermalNeutronScatteringLaw1d &
) &
      bind(C, name='CrossSectionCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr), intent(in), value :: reference
   type(c_ptr), intent(in), value :: resonancesWithBackground
   type(c_ptr), intent(in), value :: CoulombPlusNuclearElastic
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw1d
   type(c_ptr) :: CrossSectionCreateConst
end function CrossSectionCreateConst

!! Create, general, non-const
function CrossSectionCreate( &
   XYs1d, &
   regions1d, &
   reference, &
   resonancesWithBackground, &
   CoulombPlusNuclearElastic, &
   thermalNeutronScatteringLaw1d &
) &
      bind(C, name='CrossSectionCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr), intent(in), value :: reference
   type(c_ptr), intent(in), value :: resonancesWithBackground
   type(c_ptr), intent(in), value :: CoulombPlusNuclearElastic
   type(c_ptr), intent(in), value :: thermalNeutronScatteringLaw1d
   type(c_ptr) :: CrossSectionCreate
end function CrossSectionCreate

!! Assign
subroutine CrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='CrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine CrossSectionAssign

!! Delete
subroutine CrossSectionDelete(handle) &
      bind(C, name='CrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function CrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='CrossSectionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionRead
end function CrossSectionRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function CrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='CrossSectionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionWrite
end function CrossSectionWrite

!! Print to standard output, in our prettyprinting format
function CrossSectionPrint(handle) &
      bind(C, name='CrossSectionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionPrint
end function CrossSectionPrint

!! Print to standard output, as XML
function CrossSectionPrintXML(handle) &
      bind(C, name='CrossSectionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionPrintXML
end function CrossSectionPrintXML

!! Print to standard output, as JSON
function CrossSectionPrintJSON(handle) &
      bind(C, name='CrossSectionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionPrintJSON
end function CrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionXYs1dHas(handle) &
      bind(C, name='CrossSectionXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionXYs1dHas
end function CrossSectionXYs1dHas

!! Get, const
function CrossSectionXYs1dGetConst(handle) &
      bind(C, name='CrossSectionXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionXYs1dGetConst
end function CrossSectionXYs1dGetConst

!! Get, non-const
function CrossSectionXYs1dGet(handle) &
      bind(C, name='CrossSectionXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CrossSectionXYs1dGet
end function CrossSectionXYs1dGet

!! Set
subroutine CrossSectionXYs1dSet(handle, fieldHandle) &
      bind(C, name='CrossSectionXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionRegions1dHas(handle) &
      bind(C, name='CrossSectionRegions1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionRegions1dHas
end function CrossSectionRegions1dHas

!! Get, const
function CrossSectionRegions1dGetConst(handle) &
      bind(C, name='CrossSectionRegions1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionRegions1dGetConst
end function CrossSectionRegions1dGetConst

!! Get, non-const
function CrossSectionRegions1dGet(handle) &
      bind(C, name='CrossSectionRegions1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CrossSectionRegions1dGet
end function CrossSectionRegions1dGet

!! Set
subroutine CrossSectionRegions1dSet(handle, fieldHandle) &
      bind(C, name='CrossSectionRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionRegions1dSet


!! -----------------------------------------------------------------------------
!! Child: reference
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionReferenceHas(handle) &
      bind(C, name='CrossSectionReferenceHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionReferenceHas
end function CrossSectionReferenceHas

!! Get, const
function CrossSectionReferenceGetConst(handle) &
      bind(C, name='CrossSectionReferenceGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionReferenceGetConst
end function CrossSectionReferenceGetConst

!! Get, non-const
function CrossSectionReferenceGet(handle) &
      bind(C, name='CrossSectionReferenceGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CrossSectionReferenceGet
end function CrossSectionReferenceGet

!! Set
subroutine CrossSectionReferenceSet(handle, fieldHandle) &
      bind(C, name='CrossSectionReferenceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionReferenceSet


!! -----------------------------------------------------------------------------
!! Child: resonancesWithBackground
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionResonancesWithBackgroundHas(handle) &
      bind(C, name='CrossSectionResonancesWithBackgroundHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionResonancesWithBackgroundHas
end function CrossSectionResonancesWithBackgroundHas

!! Get, const
function CrossSectionResonancesWithBackgroundGetConst(handle) &
      bind(C, name='CrossSectionResonancesWithBackgroundGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionResonancesWithBackgroundGetConst
end function CrossSectionResonancesWithBackgroundGetConst

!! Get, non-const
function CrossSectionResonancesWithBackgroundGet(handle) &
      bind(C, name='CrossSectionResonancesWithBackgroundGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CrossSectionResonancesWithBackgroundGet
end function CrossSectionResonancesWithBackgroundGet

!! Set
subroutine CrossSectionResonancesWithBackgroundSet(handle, fieldHandle) &
      bind(C, name='CrossSectionResonancesWithBackgroundSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionResonancesWithBackgroundSet


!! -----------------------------------------------------------------------------
!! Child: CoulombPlusNuclearElastic
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionCoulombPlusNuclearElasticHas(handle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionCoulombPlusNuclearElasticHas
end function CrossSectionCoulombPlusNuclearElasticHas

!! Get, const
function CrossSectionCoulombPlusNuclearElasticGetConst(handle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionCoulombPlusNuclearElasticGetConst
end function CrossSectionCoulombPlusNuclearElasticGetConst

!! Get, non-const
function CrossSectionCoulombPlusNuclearElasticGet(handle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CrossSectionCoulombPlusNuclearElasticGet
end function CrossSectionCoulombPlusNuclearElasticGet

!! Set
subroutine CrossSectionCoulombPlusNuclearElasticSet(handle, fieldHandle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionCoulombPlusNuclearElasticSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw1d
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionThermalNeutronScatteringLaw1dHas(handle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionThermalNeutronScatteringLaw1dHas
end function CrossSectionThermalNeutronScatteringLaw1dHas

!! Get, const
function CrossSectionThermalNeutronScatteringLaw1dGetConst(handle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CrossSectionThermalNeutronScatteringLaw1dGetConst
end function CrossSectionThermalNeutronScatteringLaw1dGetConst

!! Get, non-const
function CrossSectionThermalNeutronScatteringLaw1dGet(handle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CrossSectionThermalNeutronScatteringLaw1dGet
end function CrossSectionThermalNeutronScatteringLaw1dGet

!! Set
subroutine CrossSectionThermalNeutronScatteringLaw1dSet(handle, fieldHandle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CrossSectionThermalNeutronScatteringLaw1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCrossSection
