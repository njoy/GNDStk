
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CrossSectionDefaultConst() &
      bind(C, name='CrossSectionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CrossSectionDefaultConst

!! Create, default
function CrossSectionDefault() &
      bind(C, name='CrossSectionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CrossSectionDefault

!! Create, general, const
function CrossSectionCreateConst( &
   XYs1d, &
   regions1d, &
   reference, &
   resonancesWithBackground, &
   CoulombPlusNuclearElastic, &
   thermalNeutronScatteringLaw1d &
) &
      bind(C, name='CrossSectionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr), value :: reference
   type(c_ptr), value :: resonancesWithBackground
   type(c_ptr), value :: CoulombPlusNuclearElastic
   type(c_ptr), value :: thermalNeutronScatteringLaw1d
   type(c_ptr) :: handle
end function CrossSectionCreateConst

!! Create, general
function CrossSectionCreate( &
   XYs1d, &
   regions1d, &
   reference, &
   resonancesWithBackground, &
   CoulombPlusNuclearElastic, &
   thermalNeutronScatteringLaw1d &
) &
      bind(C, name='CrossSectionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr), value :: reference
   type(c_ptr), value :: resonancesWithBackground
   type(c_ptr), value :: CoulombPlusNuclearElastic
   type(c_ptr), value :: thermalNeutronScatteringLaw1d
   type(c_ptr) :: handle
end function CrossSectionCreate

!! Assign
subroutine CrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='CrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CrossSectionAssign

!! Delete
subroutine CrossSectionDelete(handle) &
      bind(C, name='CrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='CrossSectionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CrossSectionRead

!! Write to file
function CrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='CrossSectionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CrossSectionWrite

!! Print to standard output, in our prettyprinting format
function CrossSectionPrint(handle) &
      bind(C, name='CrossSectionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CrossSectionPrint

!! Print to standard output, as XML
function CrossSectionPrintXML(handle) &
      bind(C, name='CrossSectionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CrossSectionPrintXML

!! Print to standard output, as JSON
function CrossSectionPrintJSON(handle) &
      bind(C, name='CrossSectionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionXYs1dHas(handle) &
      bind(C, name='CrossSectionXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionXYs1dHas

!! Get, const
function CrossSectionXYs1dGetConst(handle) &
      bind(C, name='CrossSectionXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionXYs1dGetConst

!! Get
function CrossSectionXYs1dGet(handle) &
      bind(C, name='CrossSectionXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionXYs1dGet

!! Set
subroutine CrossSectionXYs1dSet(handle, fieldHandle) &
      bind(C, name='CrossSectionXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionRegions1dHas(handle) &
      bind(C, name='CrossSectionRegions1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionRegions1dHas

!! Get, const
function CrossSectionRegions1dGetConst(handle) &
      bind(C, name='CrossSectionRegions1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionRegions1dGetConst

!! Get
function CrossSectionRegions1dGet(handle) &
      bind(C, name='CrossSectionRegions1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionRegions1dGet

!! Set
subroutine CrossSectionRegions1dSet(handle, fieldHandle) &
      bind(C, name='CrossSectionRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionRegions1dSet


!! -----------------------------------------------------------------------------
!! Child: reference
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionReferenceHas(handle) &
      bind(C, name='CrossSectionReferenceHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionReferenceHas

!! Get, const
function CrossSectionReferenceGetConst(handle) &
      bind(C, name='CrossSectionReferenceGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionReferenceGetConst

!! Get
function CrossSectionReferenceGet(handle) &
      bind(C, name='CrossSectionReferenceGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionReferenceGet

!! Set
subroutine CrossSectionReferenceSet(handle, fieldHandle) &
      bind(C, name='CrossSectionReferenceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionReferenceSet


!! -----------------------------------------------------------------------------
!! Child: resonancesWithBackground
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionResonancesWithBackgroundHas(handle) &
      bind(C, name='CrossSectionResonancesWithBackgroundHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionResonancesWithBackgroundHas

!! Get, const
function CrossSectionResonancesWithBackgroundGetConst(handle) &
      bind(C, name='CrossSectionResonancesWithBackgroundGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionResonancesWithBackgroundGetConst

!! Get
function CrossSectionResonancesWithBackgroundGet(handle) &
      bind(C, name='CrossSectionResonancesWithBackgroundGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionResonancesWithBackgroundGet

!! Set
subroutine CrossSectionResonancesWithBackgroundSet(handle, fieldHandle) &
      bind(C, name='CrossSectionResonancesWithBackgroundSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionResonancesWithBackgroundSet


!! -----------------------------------------------------------------------------
!! Child: CoulombPlusNuclearElastic
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionCoulombPlusNuclearElasticHas(handle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionCoulombPlusNuclearElasticHas

!! Get, const
function CrossSectionCoulombPlusNuclearElasticGetConst(handle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionCoulombPlusNuclearElasticGetConst

!! Get
function CrossSectionCoulombPlusNuclearElasticGet(handle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionCoulombPlusNuclearElasticGet

!! Set
subroutine CrossSectionCoulombPlusNuclearElasticSet(handle, fieldHandle) &
      bind(C, name='CrossSectionCoulombPlusNuclearElasticSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionCoulombPlusNuclearElasticSet


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw1d
!! -----------------------------------------------------------------------------

!! Has
function CrossSectionThermalNeutronScatteringLaw1dHas(handle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CrossSectionThermalNeutronScatteringLaw1dHas

!! Get, const
function CrossSectionThermalNeutronScatteringLaw1dGetConst(handle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionThermalNeutronScatteringLaw1dGetConst

!! Get
function CrossSectionThermalNeutronScatteringLaw1dGet(handle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CrossSectionThermalNeutronScatteringLaw1dGet

!! Set
subroutine CrossSectionThermalNeutronScatteringLaw1dSet(handle, fieldHandle) &
      bind(C, name='CrossSectionThermalNeutronScatteringLaw1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CrossSectionThermalNeutronScatteringLaw1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCrossSection
