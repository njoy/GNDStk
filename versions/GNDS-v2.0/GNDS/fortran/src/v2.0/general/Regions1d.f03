
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalRegions1d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Regions1dDefaultConst() &
      bind(C, name='Regions1dDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Regions1dDefaultConst
end function Regions1dDefaultConst

!! Create, default, non-const
function Regions1dDefault() &
      bind(C, name='Regions1dDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Regions1dDefault
end function Regions1dDefault

!! Create, general, const
function Regions1dCreateConst( &
   label, &
   outerDomainValue, &
   axes, &
   uncertainty, &
   function1ds, &
   labelSize &
) &
      bind(C, name='Regions1dCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), intent(in), value :: outerDomainValue
   type(c_ptr), intent(in), value :: axes
   type(c_ptr), intent(in), value :: uncertainty
   type(c_ptr), intent(in), value :: function1ds
   type(c_ptr) :: Regions1dCreateConst
end function Regions1dCreateConst

!! Create, general, non-const
function Regions1dCreate( &
   label, &
   outerDomainValue, &
   axes, &
   uncertainty, &
   function1ds, &
   labelSize &
) &
      bind(C, name='Regions1dCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), intent(in), value :: outerDomainValue
   type(c_ptr), intent(in), value :: axes
   type(c_ptr), intent(in), value :: uncertainty
   type(c_ptr), intent(in), value :: function1ds
   type(c_ptr) :: Regions1dCreate
end function Regions1dCreate

!! Assign
subroutine Regions1dAssign(handleLHS, handleRHS) &
      bind(C, name='Regions1dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine Regions1dAssign

!! Delete
subroutine Regions1dDelete(handle) &
      bind(C, name='Regions1dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Regions1dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function Regions1dRead(handle, filename, filenameSize) &
      bind(C, name='Regions1dRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Regions1dRead
end function Regions1dRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function Regions1dWrite(handle, filename, filenameSize) &
      bind(C, name='Regions1dWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Regions1dWrite
end function Regions1dWrite

!! Print to standard output, in our prettyprinting format
function Regions1dPrint(handle) &
      bind(C, name='Regions1dPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dPrint
end function Regions1dPrint

!! Print to standard output, as XML
function Regions1dPrintXML(handle) &
      bind(C, name='Regions1dPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dPrintXML
end function Regions1dPrintXML

!! Print to standard output, as JSON
function Regions1dPrintJSON(handle) &
      bind(C, name='Regions1dPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dPrintJSON
end function Regions1dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function Regions1dLabelHas(handle) &
      bind(C, name='Regions1dLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dLabelHas
end function Regions1dLabelHas

!! Get
function Regions1dLabelGet(handle) &
      bind(C, name='Regions1dLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dLabelGet
end function Regions1dLabelGet

!! Set
subroutine Regions1dLabelSet(handle, label, labelSize) &
      bind(C, name='Regions1dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine Regions1dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: outerDomainValue
!! -----------------------------------------------------------------------------

!! Has
function Regions1dOuterDomainValueHas(handle) &
      bind(C, name='Regions1dOuterDomainValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dOuterDomainValueHas
end function Regions1dOuterDomainValueHas

!! Get
function Regions1dOuterDomainValueGet(handle) &
      bind(C, name='Regions1dOuterDomainValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: Regions1dOuterDomainValueGet
end function Regions1dOuterDomainValueGet

!! Set
subroutine Regions1dOuterDomainValueSet(handle, outerDomainValue) &
      bind(C, name='Regions1dOuterDomainValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: outerDomainValue
end subroutine Regions1dOuterDomainValueSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function Regions1dAxesHas(handle) &
      bind(C, name='Regions1dAxesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dAxesHas
end function Regions1dAxesHas

!! Get, const
function Regions1dAxesGetConst(handle) &
      bind(C, name='Regions1dAxesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dAxesGetConst
end function Regions1dAxesGetConst

!! Get, non-const
function Regions1dAxesGet(handle) &
      bind(C, name='Regions1dAxesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: Regions1dAxesGet
end function Regions1dAxesGet

!! Set
subroutine Regions1dAxesSet(handle, fieldHandle) &
      bind(C, name='Regions1dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dAxesSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function Regions1dUncertaintyHas(handle) &
      bind(C, name='Regions1dUncertaintyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dUncertaintyHas
end function Regions1dUncertaintyHas

!! Get, const
function Regions1dUncertaintyGetConst(handle) &
      bind(C, name='Regions1dUncertaintyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dUncertaintyGetConst
end function Regions1dUncertaintyGetConst

!! Get, non-const
function Regions1dUncertaintyGet(handle) &
      bind(C, name='Regions1dUncertaintyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: Regions1dUncertaintyGet
end function Regions1dUncertaintyGet

!! Set
subroutine Regions1dUncertaintySet(handle, fieldHandle) &
      bind(C, name='Regions1dUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dUncertaintySet


!! -----------------------------------------------------------------------------
!! Child: function1ds
!! -----------------------------------------------------------------------------

!! Has
function Regions1dFunction1dsHas(handle) &
      bind(C, name='Regions1dFunction1dsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dFunction1dsHas
end function Regions1dFunction1dsHas

!! Get, const
function Regions1dFunction1dsGetConst(handle) &
      bind(C, name='Regions1dFunction1dsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dFunction1dsGetConst
end function Regions1dFunction1dsGetConst

!! Get, non-const
function Regions1dFunction1dsGet(handle) &
      bind(C, name='Regions1dFunction1dsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: Regions1dFunction1dsGet
end function Regions1dFunction1dsGet

!! Set
subroutine Regions1dFunction1dsSet(handle, fieldHandle) &
      bind(C, name='Regions1dFunction1dsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dFunction1dsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalRegions1d
