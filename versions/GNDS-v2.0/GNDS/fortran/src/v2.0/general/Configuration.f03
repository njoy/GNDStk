
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalConfiguration
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ConfigurationDefaultConst() &
      bind(C, name='ConfigurationDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ConfigurationDefaultConst

!! Create, default
function ConfigurationDefault() &
      bind(C, name='ConfigurationDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ConfigurationDefault

!! Create, general, const
function ConfigurationCreateConst( &
   subshell, &
   electronNumber, &
   bindingEnergy, &
   decayData, decayDataSize, &
   subshellSize &
) &
      bind(C, name='ConfigurationCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: subshellSize
   character(c_char), intent(in) :: subshell(subshellSize)
   real(c_double), value, intent(in) :: electronNumber
   type(c_ptr), value :: bindingEnergy
   integer(c_size_t), value :: decayDataSize
   type(c_ptr) :: decayData(decayDataSize)
   type(c_ptr) :: handle
end function ConfigurationCreateConst

!! Create, general
function ConfigurationCreate( &
   subshell, &
   electronNumber, &
   bindingEnergy, &
   decayData, decayDataSize, &
   subshellSize &
) &
      bind(C, name='ConfigurationCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: subshellSize
   character(c_char), intent(in) :: subshell(subshellSize)
   real(c_double), value, intent(in) :: electronNumber
   type(c_ptr), value :: bindingEnergy
   integer(c_size_t), value :: decayDataSize
   type(c_ptr) :: decayData(decayDataSize)
   type(c_ptr) :: handle
end function ConfigurationCreate

!! Assign
subroutine ConfigurationAssign(handleLHS, handleRHS) &
      bind(C, name='ConfigurationAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ConfigurationAssign

!! Delete
subroutine ConfigurationDelete(handle) &
      bind(C, name='ConfigurationDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ConfigurationDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ConfigurationRead(handle, filename, filenameSize) &
      bind(C, name='ConfigurationRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ConfigurationRead

!! Write to file
function ConfigurationWrite(handle, filename, filenameSize) &
      bind(C, name='ConfigurationWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ConfigurationWrite

!! Print to standard output, in our prettyprinting format
function ConfigurationPrint(handle) &
      bind(C, name='ConfigurationPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ConfigurationPrint

!! Print to standard output, as XML
function ConfigurationPrintXML(handle) &
      bind(C, name='ConfigurationPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ConfigurationPrintXML

!! Print to standard output, as JSON
function ConfigurationPrintJSON(handle) &
      bind(C, name='ConfigurationPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ConfigurationPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: subshell
!! -----------------------------------------------------------------------------

!! Has
function ConfigurationSubshellHas(handle) &
      bind(C, name='ConfigurationSubshellHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ConfigurationSubshellHas

!! Get
function ConfigurationSubshellGet(handle) &
      bind(C, name='ConfigurationSubshellGet') &
      result(subshell)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: subshell
end function ConfigurationSubshellGet

!! Set
subroutine ConfigurationSubshellSet(handle, subshell, subshellSize) &
      bind(C, name='ConfigurationSubshellSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: subshellSize
   character(c_char), intent(in) :: subshell(subshellSize)
end subroutine ConfigurationSubshellSet


!! -----------------------------------------------------------------------------
!! Metadatum: electronNumber
!! -----------------------------------------------------------------------------

!! Has
function ConfigurationElectronNumberHas(handle) &
      bind(C, name='ConfigurationElectronNumberHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ConfigurationElectronNumberHas

!! Get
function ConfigurationElectronNumberGet(handle) &
      bind(C, name='ConfigurationElectronNumberGet') &
      result(electronNumber)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: electronNumber
end function ConfigurationElectronNumberGet

!! Set
subroutine ConfigurationElectronNumberSet(handle, electronNumber, electronNumberSize) &
      bind(C, name='ConfigurationElectronNumberSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: electronNumberSize
   character(c_char), intent(in) :: electronNumber(electronNumberSize)
end subroutine ConfigurationElectronNumberSet


!! -----------------------------------------------------------------------------
!! Child: bindingEnergy
!! -----------------------------------------------------------------------------

!! Has
function ConfigurationBindingEnergyHas(handle) &
      bind(C, name='ConfigurationBindingEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ConfigurationBindingEnergyHas

!! Get, const
function ConfigurationBindingEnergyGetConst(handle) &
      bind(C, name='ConfigurationBindingEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ConfigurationBindingEnergyGetConst

!! Get
function ConfigurationBindingEnergyGet(handle) &
      bind(C, name='ConfigurationBindingEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ConfigurationBindingEnergyGet

!! Set
subroutine ConfigurationBindingEnergySet(handle, fieldHandle) &
      bind(C, name='ConfigurationBindingEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ConfigurationBindingEnergySet


!! -----------------------------------------------------------------------------
!! Child: decayData
!! -----------------------------------------------------------------------------

!! Has
function ConfigurationDecayDataHas(handle) &
      bind(C, name='ConfigurationDecayDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ConfigurationDecayDataHas

!! Clear
subroutine ConfigurationDecayDataClear(handle) &
      bind(C, name='ConfigurationDecayDataClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ConfigurationDecayDataClear

!! Size
function ConfigurationDecayDataSize(handle) &
      bind(C, name='ConfigurationDecayDataSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function ConfigurationDecayDataSize

!! Add
subroutine ConfigurationDecayDataAdd(handle, fieldHandle) &
      bind(C, name='ConfigurationDecayDataAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ConfigurationDecayDataAdd

!! Get, by index \in [0,size), const
function ConfigurationDecayDataGetConst(handle, index) &
      bind(C, name='ConfigurationDecayDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ConfigurationDecayDataGetConst

!! Get, by index \in [0,size)
function ConfigurationDecayDataGet(handle, index) &
      bind(C, name='ConfigurationDecayDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ConfigurationDecayDataGet

!! Set, by index \in [0,size)
subroutine ConfigurationDecayDataSet(handle, index, fieldHandle) &
      bind(C, name='ConfigurationDecayDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ConfigurationDecayDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalConfiguration
