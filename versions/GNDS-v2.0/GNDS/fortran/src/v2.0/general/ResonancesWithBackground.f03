
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResonancesWithBackground
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResonancesWithBackgroundDefaultConst() &
      bind(C, name='ResonancesWithBackgroundDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonancesWithBackgroundDefaultConst

!! Create, default
function ResonancesWithBackgroundDefault() &
      bind(C, name='ResonancesWithBackgroundDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResonancesWithBackgroundDefault

!! Create, general, const
function ResonancesWithBackgroundCreateConst( &
   label, &
   resonances, &
   background, &
   uncertainty, &
   labelSize &
) &
      bind(C, name='ResonancesWithBackgroundCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: resonances
   type(c_ptr), value :: background
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function ResonancesWithBackgroundCreateConst

!! Create, general
function ResonancesWithBackgroundCreate( &
   label, &
   resonances, &
   background, &
   uncertainty, &
   labelSize &
) &
      bind(C, name='ResonancesWithBackgroundCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: resonances
   type(c_ptr), value :: background
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function ResonancesWithBackgroundCreate

!! Assign
subroutine ResonancesWithBackgroundAssign(handleLHS, handleRHS) &
      bind(C, name='ResonancesWithBackgroundAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResonancesWithBackgroundAssign

!! Delete
subroutine ResonancesWithBackgroundDelete(handle) &
      bind(C, name='ResonancesWithBackgroundDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResonancesWithBackgroundDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResonancesWithBackgroundRead(handle, filename, filenameSize) &
      bind(C, name='ResonancesWithBackgroundRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonancesWithBackgroundRead

!! Write to file
function ResonancesWithBackgroundWrite(handle, filename, filenameSize) &
      bind(C, name='ResonancesWithBackgroundWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResonancesWithBackgroundWrite

!! Print to standard output, in our prettyprinting format
function ResonancesWithBackgroundPrint(handle) &
      bind(C, name='ResonancesWithBackgroundPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonancesWithBackgroundPrint

!! Print to standard output, as XML
function ResonancesWithBackgroundPrintXML(handle) &
      bind(C, name='ResonancesWithBackgroundPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonancesWithBackgroundPrintXML

!! Print to standard output, as JSON
function ResonancesWithBackgroundPrintJSON(handle) &
      bind(C, name='ResonancesWithBackgroundPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResonancesWithBackgroundPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ResonancesWithBackgroundLabelHas(handle) &
      bind(C, name='ResonancesWithBackgroundLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesWithBackgroundLabelHas

!! Get
function ResonancesWithBackgroundLabelGet(handle) &
      bind(C, name='ResonancesWithBackgroundLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ResonancesWithBackgroundLabelGet

!! Set
subroutine ResonancesWithBackgroundLabelSet(handle, label, labelSize) &
      bind(C, name='ResonancesWithBackgroundLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ResonancesWithBackgroundLabelSet


!! -----------------------------------------------------------------------------
!! Child: resonances
!! -----------------------------------------------------------------------------

!! Has
function ResonancesWithBackgroundResonancesHas(handle) &
      bind(C, name='ResonancesWithBackgroundResonancesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesWithBackgroundResonancesHas

!! Get, const
function ResonancesWithBackgroundResonancesGetConst(handle) &
      bind(C, name='ResonancesWithBackgroundResonancesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesWithBackgroundResonancesGetConst

!! Get
function ResonancesWithBackgroundResonancesGet(handle) &
      bind(C, name='ResonancesWithBackgroundResonancesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesWithBackgroundResonancesGet

!! Set
subroutine ResonancesWithBackgroundResonancesSet(handle, fieldHandle) &
      bind(C, name='ResonancesWithBackgroundResonancesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonancesWithBackgroundResonancesSet


!! -----------------------------------------------------------------------------
!! Child: background
!! -----------------------------------------------------------------------------

!! Has
function ResonancesWithBackgroundBackgroundHas(handle) &
      bind(C, name='ResonancesWithBackgroundBackgroundHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesWithBackgroundBackgroundHas

!! Get, const
function ResonancesWithBackgroundBackgroundGetConst(handle) &
      bind(C, name='ResonancesWithBackgroundBackgroundGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesWithBackgroundBackgroundGetConst

!! Get
function ResonancesWithBackgroundBackgroundGet(handle) &
      bind(C, name='ResonancesWithBackgroundBackgroundGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesWithBackgroundBackgroundGet

!! Set
subroutine ResonancesWithBackgroundBackgroundSet(handle, fieldHandle) &
      bind(C, name='ResonancesWithBackgroundBackgroundSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonancesWithBackgroundBackgroundSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function ResonancesWithBackgroundUncertaintyHas(handle) &
      bind(C, name='ResonancesWithBackgroundUncertaintyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResonancesWithBackgroundUncertaintyHas

!! Get, const
function ResonancesWithBackgroundUncertaintyGetConst(handle) &
      bind(C, name='ResonancesWithBackgroundUncertaintyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesWithBackgroundUncertaintyGetConst

!! Get
function ResonancesWithBackgroundUncertaintyGet(handle) &
      bind(C, name='ResonancesWithBackgroundUncertaintyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResonancesWithBackgroundUncertaintyGet

!! Set
subroutine ResonancesWithBackgroundUncertaintySet(handle, fieldHandle) &
      bind(C, name='ResonancesWithBackgroundUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResonancesWithBackgroundUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResonancesWithBackground
