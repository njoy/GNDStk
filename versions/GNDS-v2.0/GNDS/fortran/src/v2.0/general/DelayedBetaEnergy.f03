
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedBetaEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedBetaEnergyDefaultConst() &
      bind(C, name='DelayedBetaEnergyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DelayedBetaEnergyDefaultConst
end function DelayedBetaEnergyDefaultConst

!! Create, default, non-const
function DelayedBetaEnergyDefault() &
      bind(C, name='DelayedBetaEnergyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DelayedBetaEnergyDefault
end function DelayedBetaEnergyDefault

!! Create, general, const
function DelayedBetaEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='DelayedBetaEnergyCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr) :: DelayedBetaEnergyCreateConst
end function DelayedBetaEnergyCreateConst

!! Create, general, non-const
function DelayedBetaEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='DelayedBetaEnergyCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr) :: DelayedBetaEnergyCreate
end function DelayedBetaEnergyCreate

!! Assign
subroutine DelayedBetaEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedBetaEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine DelayedBetaEnergyAssign

!! Delete
subroutine DelayedBetaEnergyDelete(handle) &
      bind(C, name='DelayedBetaEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedBetaEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function DelayedBetaEnergyRead(handle, filename, filenameSize) &
      bind(C, name='DelayedBetaEnergyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DelayedBetaEnergyRead
end function DelayedBetaEnergyRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function DelayedBetaEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedBetaEnergyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DelayedBetaEnergyWrite
end function DelayedBetaEnergyWrite

!! Print to standard output, in our prettyprinting format
function DelayedBetaEnergyPrint(handle) &
      bind(C, name='DelayedBetaEnergyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedBetaEnergyPrint
end function DelayedBetaEnergyPrint

!! Print to standard output, as XML
function DelayedBetaEnergyPrintXML(handle) &
      bind(C, name='DelayedBetaEnergyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedBetaEnergyPrintXML
end function DelayedBetaEnergyPrintXML

!! Print to standard output, as JSON
function DelayedBetaEnergyPrintJSON(handle) &
      bind(C, name='DelayedBetaEnergyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedBetaEnergyPrintJSON
end function DelayedBetaEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function DelayedBetaEnergyPolynomial1dHas(handle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedBetaEnergyPolynomial1dHas
end function DelayedBetaEnergyPolynomial1dHas

!! Get, const
function DelayedBetaEnergyPolynomial1dGetConst(handle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DelayedBetaEnergyPolynomial1dGetConst
end function DelayedBetaEnergyPolynomial1dGetConst

!! Get, non-const
function DelayedBetaEnergyPolynomial1dGet(handle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DelayedBetaEnergyPolynomial1dGet
end function DelayedBetaEnergyPolynomial1dGet

!! Set
subroutine DelayedBetaEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DelayedBetaEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedBetaEnergy
