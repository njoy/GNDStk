
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedBetaEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedBetaEnergyDefaultConst() &
      bind(C, name='DelayedBetaEnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedBetaEnergyDefaultConst

!! Create, default
function DelayedBetaEnergyDefault() &
      bind(C, name='DelayedBetaEnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedBetaEnergyDefault

!! Create, general, const
function DelayedBetaEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='DelayedBetaEnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function DelayedBetaEnergyCreateConst

!! Create, general
function DelayedBetaEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='DelayedBetaEnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function DelayedBetaEnergyCreate

!! Assign
subroutine DelayedBetaEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedBetaEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DelayedBetaEnergyAssign

!! Delete
subroutine DelayedBetaEnergyDelete(handle) &
      bind(C, name='DelayedBetaEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedBetaEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DelayedBetaEnergyRead(handle, filename, filenameSize) &
      bind(C, name='DelayedBetaEnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedBetaEnergyRead

!! Write to file
function DelayedBetaEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedBetaEnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedBetaEnergyWrite

!! Print to standard output, in our prettyprinting format
function DelayedBetaEnergyPrint(handle) &
      bind(C, name='DelayedBetaEnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedBetaEnergyPrint

!! Print to standard output, as XML
function DelayedBetaEnergyPrintXML(handle) &
      bind(C, name='DelayedBetaEnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedBetaEnergyPrintXML

!! Print to standard output, as JSON
function DelayedBetaEnergyPrintJSON(handle) &
      bind(C, name='DelayedBetaEnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedBetaEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function DelayedBetaEnergyPolynomial1dHas(handle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedBetaEnergyPolynomial1dHas

!! Get, const
function DelayedBetaEnergyPolynomial1dGetConst(handle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedBetaEnergyPolynomial1dGetConst

!! Get
function DelayedBetaEnergyPolynomial1dGet(handle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedBetaEnergyPolynomial1dGet

!! Set
subroutine DelayedBetaEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='DelayedBetaEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DelayedBetaEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedBetaEnergy
