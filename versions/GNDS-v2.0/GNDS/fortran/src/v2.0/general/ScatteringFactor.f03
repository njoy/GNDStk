
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalScatteringFactor
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ScatteringFactorDefaultConst() &
      bind(C, name='ScatteringFactorDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ScatteringFactorDefaultConst

!! Create, default
function ScatteringFactorDefault() &
      bind(C, name='ScatteringFactorDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ScatteringFactorDefault

!! Create, general, const
function ScatteringFactorCreateConst( &
   XYs1d &
) &
      bind(C, name='ScatteringFactorCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function ScatteringFactorCreateConst

!! Create, general
function ScatteringFactorCreate( &
   XYs1d &
) &
      bind(C, name='ScatteringFactorCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function ScatteringFactorCreate

!! Assign
subroutine ScatteringFactorAssign(handleLHS, handleRHS) &
      bind(C, name='ScatteringFactorAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ScatteringFactorAssign

!! Delete
subroutine ScatteringFactorDelete(handle) &
      bind(C, name='ScatteringFactorDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ScatteringFactorDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ScatteringFactorRead(handle, filename, filenameSize) &
      bind(C, name='ScatteringFactorRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ScatteringFactorRead

!! Write to file
function ScatteringFactorWrite(handle, filename, filenameSize) &
      bind(C, name='ScatteringFactorWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ScatteringFactorWrite

!! Print to standard output, in our prettyprinting format
function ScatteringFactorPrint(handle) &
      bind(C, name='ScatteringFactorPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringFactorPrint

!! Print to standard output, as XML
function ScatteringFactorPrintXML(handle) &
      bind(C, name='ScatteringFactorPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringFactorPrintXML

!! Print to standard output, as JSON
function ScatteringFactorPrintJSON(handle) &
      bind(C, name='ScatteringFactorPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ScatteringFactorPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ScatteringFactorXYs1dHas(handle) &
      bind(C, name='ScatteringFactorXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ScatteringFactorXYs1dHas

!! Get, const
function ScatteringFactorXYs1dGetConst(handle) &
      bind(C, name='ScatteringFactorXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringFactorXYs1dGetConst

!! Get
function ScatteringFactorXYs1dGet(handle) &
      bind(C, name='ScatteringFactorXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ScatteringFactorXYs1dGet

!! Set
subroutine ScatteringFactorXYs1dSet(handle, fieldHandle) &
      bind(C, name='ScatteringFactorXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ScatteringFactorXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalScatteringFactor
