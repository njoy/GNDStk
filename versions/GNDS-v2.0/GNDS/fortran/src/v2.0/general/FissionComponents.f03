
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFissionComponents
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionComponentsDefaultConst() &
      bind(C, name='FissionComponentsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionComponentsDefaultConst
end function FissionComponentsDefaultConst

!! Create, default
function FissionComponentsDefault() &
      bind(C, name='FissionComponentsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionComponentsDefault
end function FissionComponentsDefault

!! Create, general, const
function FissionComponentsCreateConst( &
   fissionComponent, fissionComponentSize &
) &
      bind(C, name='FissionComponentsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: fissionComponentSize
   type(c_ptr) :: fissionComponent(fissionComponentSize)
   type(c_ptr) :: FissionComponentsCreateConst
end function FissionComponentsCreateConst

!! Create, general
function FissionComponentsCreate( &
   fissionComponent, fissionComponentSize &
) &
      bind(C, name='FissionComponentsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: fissionComponentSize
   type(c_ptr) :: fissionComponent(fissionComponentSize)
   type(c_ptr) :: FissionComponentsCreate
end function FissionComponentsCreate

!! Assign
subroutine FissionComponentsAssign(handleLHS, handleRHS) &
      bind(C, name='FissionComponentsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FissionComponentsAssign

!! Delete
subroutine FissionComponentsDelete(handle) &
      bind(C, name='FissionComponentsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionComponentsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FissionComponentsRead(handle, filename, filenameSize) &
      bind(C, name='FissionComponentsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionComponentsRead
end function FissionComponentsRead

!! Write to file
function FissionComponentsWrite(handle, filename, filenameSize) &
      bind(C, name='FissionComponentsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionComponentsWrite
end function FissionComponentsWrite

!! Print to standard output, in our prettyprinting format
function FissionComponentsPrint(handle) &
      bind(C, name='FissionComponentsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentsPrint
end function FissionComponentsPrint

!! Print to standard output, as XML
function FissionComponentsPrintXML(handle) &
      bind(C, name='FissionComponentsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentsPrintXML
end function FissionComponentsPrintXML

!! Print to standard output, as JSON
function FissionComponentsPrintJSON(handle) &
      bind(C, name='FissionComponentsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentsPrintJSON
end function FissionComponentsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: fissionComponent
!! -----------------------------------------------------------------------------

!! Has
function FissionComponentsFissionComponentHas(handle) &
      bind(C, name='FissionComponentsFissionComponentHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionComponentsFissionComponentHas
end function FissionComponentsFissionComponentHas

!! Clear
subroutine FissionComponentsFissionComponentClear(handle) &
      bind(C, name='FissionComponentsFissionComponentClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionComponentsFissionComponentClear

!! Size
function FissionComponentsFissionComponentSize(handle) &
      bind(C, name='FissionComponentsFissionComponentSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: FissionComponentsFissionComponentSize
end function FissionComponentsFissionComponentSize

!! Add
subroutine FissionComponentsFissionComponentAdd(handle, fieldHandle) &
      bind(C, name='FissionComponentsFissionComponentAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentsFissionComponentAdd

!! Get, by index \in [0,size), const
function FissionComponentsFissionComponentGetConst(handle, index) &
      bind(C, name='FissionComponentsFissionComponentGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: FissionComponentsFissionComponentGetConst
end function FissionComponentsFissionComponentGetConst

!! Get, by index \in [0,size)
function FissionComponentsFissionComponentGet(handle, index) &
      bind(C, name='FissionComponentsFissionComponentGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: FissionComponentsFissionComponentGet
end function FissionComponentsFissionComponentGet

!! Set, by index \in [0,size)
subroutine FissionComponentsFissionComponentSet(handle, index, fieldHandle) &
      bind(C, name='FissionComponentsFissionComponentSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentsFissionComponentSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function FissionComponentsFissionComponentHasByLabel(handle, meta, metaSize) &
      bind(C, name='FissionComponentsFissionComponentHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: FissionComponentsFissionComponentHasByLabel
end function FissionComponentsFissionComponentHasByLabel

!! Get, by label, const
function FissionComponentsFissionComponentGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='FissionComponentsFissionComponentGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: FissionComponentsFissionComponentGetByLabelConst
end function FissionComponentsFissionComponentGetByLabelConst

!! Get, by label
function FissionComponentsFissionComponentGetByLabel(handle, meta, metaSize) &
      bind(C, name='FissionComponentsFissionComponentGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: FissionComponentsFissionComponentGetByLabel
end function FissionComponentsFissionComponentGetByLabel

!! Set, by label
subroutine FissionComponentsFissionComponentSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='FissionComponentsFissionComponentSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentsFissionComponentSetByLabel

!! ------------------------
!! Re: metadatum ENDF_MT
!! ------------------------

!! Has, by ENDF_MT
function FissionComponentsFissionComponentHasByENDFMT(handle, meta) &
      bind(C, name='FissionComponentsFissionComponentHasByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: FissionComponentsFissionComponentHasByENDFMT
end function FissionComponentsFissionComponentHasByENDFMT

!! Get, by ENDF_MT, const
function FissionComponentsFissionComponentGetByENDFMTConst(handle, meta) &
      bind(C, name='FissionComponentsFissionComponentGetByENDFMTConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: FissionComponentsFissionComponentGetByENDFMTConst
end function FissionComponentsFissionComponentGetByENDFMTConst

!! Get, by ENDF_MT
function FissionComponentsFissionComponentGetByENDFMT(handle, meta) &
      bind(C, name='FissionComponentsFissionComponentGetByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: FissionComponentsFissionComponentGetByENDFMT
end function FissionComponentsFissionComponentGetByENDFMT

!! Set, by ENDF_MT
subroutine FissionComponentsFissionComponentSetByENDFMT(handle, meta, fieldHandle) &
      bind(C, name='FissionComponentsFissionComponentSetByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentsFissionComponentSetByENDFMT

!! ------------------------
!! Re: metadatum fissionGenre
!! ------------------------

!! Has, by fissionGenre
function FissionComponentsFissionComponentHasByFissionGenre(handle, meta, metaSize) &
      bind(C, name='FissionComponentsFissionComponentHasByFissionGenre')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: FissionComponentsFissionComponentHasByFissionGenre
end function FissionComponentsFissionComponentHasByFissionGenre

!! Get, by fissionGenre, const
function FissionComponentsFissionComponentGetByFissionGenreConst(handle, meta, metaSize) &
      bind(C, name='FissionComponentsFissionComponentGetByFissionGenreConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: FissionComponentsFissionComponentGetByFissionGenreConst
end function FissionComponentsFissionComponentGetByFissionGenreConst

!! Get, by fissionGenre
function FissionComponentsFissionComponentGetByFissionGenre(handle, meta, metaSize) &
      bind(C, name='FissionComponentsFissionComponentGetByFissionGenre')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: FissionComponentsFissionComponentGetByFissionGenre
end function FissionComponentsFissionComponentGetByFissionGenre

!! Set, by fissionGenre
subroutine FissionComponentsFissionComponentSetByFissionGenre(handle, meta, metaSize, fieldHandle) &
      bind(C, name='FissionComponentsFissionComponentSetByFissionGenre')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionComponentsFissionComponentSetByFissionGenre


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFissionComponents
