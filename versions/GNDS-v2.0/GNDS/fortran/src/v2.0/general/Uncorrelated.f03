
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalUncorrelated
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function UncorrelatedDefaultConst() &
      bind(C, name='UncorrelatedDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: UncorrelatedDefaultConst
end function UncorrelatedDefaultConst

!! Create, default
function UncorrelatedDefault() &
      bind(C, name='UncorrelatedDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: UncorrelatedDefault
end function UncorrelatedDefault

!! Create, general, const
function UncorrelatedCreateConst( &
   label, &
   productFrame, &
   angular, &
   energy, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='UncorrelatedCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: angular
   type(c_ptr), value :: energy
   type(c_ptr) :: UncorrelatedCreateConst
end function UncorrelatedCreateConst

!! Create, general
function UncorrelatedCreate( &
   label, &
   productFrame, &
   angular, &
   energy, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='UncorrelatedCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: angular
   type(c_ptr), value :: energy
   type(c_ptr) :: UncorrelatedCreate
end function UncorrelatedCreate

!! Assign
subroutine UncorrelatedAssign(handleLHS, handleRHS) &
      bind(C, name='UncorrelatedAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine UncorrelatedAssign

!! Delete
subroutine UncorrelatedDelete(handle) &
      bind(C, name='UncorrelatedDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine UncorrelatedDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function UncorrelatedRead(handle, filename, filenameSize) &
      bind(C, name='UncorrelatedRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: UncorrelatedRead
end function UncorrelatedRead

!! Write to file
function UncorrelatedWrite(handle, filename, filenameSize) &
      bind(C, name='UncorrelatedWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: UncorrelatedWrite
end function UncorrelatedWrite

!! Print to standard output, in our prettyprinting format
function UncorrelatedPrint(handle) &
      bind(C, name='UncorrelatedPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedPrint
end function UncorrelatedPrint

!! Print to standard output, as XML
function UncorrelatedPrintXML(handle) &
      bind(C, name='UncorrelatedPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedPrintXML
end function UncorrelatedPrintXML

!! Print to standard output, as JSON
function UncorrelatedPrintJSON(handle) &
      bind(C, name='UncorrelatedPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedPrintJSON
end function UncorrelatedPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function UncorrelatedLabelHas(handle) &
      bind(C, name='UncorrelatedLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedLabelHas
end function UncorrelatedLabelHas

!! Get
function UncorrelatedLabelGet(handle) &
      bind(C, name='UncorrelatedLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UncorrelatedLabelGet
end function UncorrelatedLabelGet

!! Set
subroutine UncorrelatedLabelSet(handle, label, labelSize) &
      bind(C, name='UncorrelatedLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine UncorrelatedLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function UncorrelatedProductFrameHas(handle) &
      bind(C, name='UncorrelatedProductFrameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedProductFrameHas
end function UncorrelatedProductFrameHas

!! Get
function UncorrelatedProductFrameGet(handle) &
      bind(C, name='UncorrelatedProductFrameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UncorrelatedProductFrameGet
end function UncorrelatedProductFrameGet

!! Set
subroutine UncorrelatedProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='UncorrelatedProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine UncorrelatedProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: angular
!! -----------------------------------------------------------------------------

!! Has
function UncorrelatedAngularHas(handle) &
      bind(C, name='UncorrelatedAngularHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedAngularHas
end function UncorrelatedAngularHas

!! Get, const
function UncorrelatedAngularGetConst(handle) &
      bind(C, name='UncorrelatedAngularGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UncorrelatedAngularGetConst
end function UncorrelatedAngularGetConst

!! Get
function UncorrelatedAngularGet(handle) &
      bind(C, name='UncorrelatedAngularGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UncorrelatedAngularGet
end function UncorrelatedAngularGet

!! Set
subroutine UncorrelatedAngularSet(handle, fieldHandle) &
      bind(C, name='UncorrelatedAngularSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine UncorrelatedAngularSet


!! -----------------------------------------------------------------------------
!! Child: energy
!! -----------------------------------------------------------------------------

!! Has
function UncorrelatedEnergyHas(handle) &
      bind(C, name='UncorrelatedEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: UncorrelatedEnergyHas
end function UncorrelatedEnergyHas

!! Get, const
function UncorrelatedEnergyGetConst(handle) &
      bind(C, name='UncorrelatedEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UncorrelatedEnergyGetConst
end function UncorrelatedEnergyGetConst

!! Get
function UncorrelatedEnergyGet(handle) &
      bind(C, name='UncorrelatedEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: UncorrelatedEnergyGet
end function UncorrelatedEnergyGet

!! Set
subroutine UncorrelatedEnergySet(handle, fieldHandle) &
      bind(C, name='UncorrelatedEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine UncorrelatedEnergySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalUncorrelated
