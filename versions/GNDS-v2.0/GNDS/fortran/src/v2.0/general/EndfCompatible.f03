
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEndfCompatible
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EndfCompatibleDefaultConst() &
      bind(C, name='EndfCompatibleDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EndfCompatibleDefaultConst

!! Create, default
function EndfCompatibleDefault() &
      bind(C, name='EndfCompatibleDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EndfCompatibleDefault

!! Create, general, const
function EndfCompatibleCreateConst( &
) &
      bind(C, name='EndfCompatibleCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EndfCompatibleCreateConst

!! Create, general
function EndfCompatibleCreate( &
) &
      bind(C, name='EndfCompatibleCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EndfCompatibleCreate

!! Assign
subroutine EndfCompatibleAssign(handleLHS, handleRHS) &
      bind(C, name='EndfCompatibleAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine EndfCompatibleAssign

!! Delete
subroutine EndfCompatibleDelete(handle) &
      bind(C, name='EndfCompatibleDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EndfCompatibleDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function EndfCompatibleRead(handle, filename, filenameSize) &
      bind(C, name='EndfCompatibleRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EndfCompatibleRead

!! Write to file
function EndfCompatibleWrite(handle, filename, filenameSize) &
      bind(C, name='EndfCompatibleWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EndfCompatibleWrite

!! Print to standard output, in our prettyprinting format
function EndfCompatiblePrint(handle) &
      bind(C, name='EndfCompatiblePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EndfCompatiblePrint

!! Print to standard output, as XML
function EndfCompatiblePrintXML(handle) &
      bind(C, name='EndfCompatiblePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EndfCompatiblePrintXML

!! Print to standard output, as JSON
function EndfCompatiblePrintJSON(handle) &
      bind(C, name='EndfCompatiblePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EndfCompatiblePrintJSON


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEndfCompatible
