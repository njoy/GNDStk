
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalRealInterferenceTerm
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function RealInterferenceTermDefaultConst() &
      bind(C, name='RealInterferenceTermDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function RealInterferenceTermDefaultConst

!! Create, default
function RealInterferenceTermDefault() &
      bind(C, name='RealInterferenceTermDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function RealInterferenceTermDefault

!! Create, general, const
function RealInterferenceTermCreateConst( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='RealInterferenceTermCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: regions2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function RealInterferenceTermCreateConst

!! Create, general
function RealInterferenceTermCreate( &
   regions2d, &
   XYs2d &
) &
      bind(C, name='RealInterferenceTermCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: regions2d
   type(c_ptr), value :: XYs2d
   type(c_ptr) :: handle
end function RealInterferenceTermCreate

!! Assign
subroutine RealInterferenceTermAssign(handleLHS, handleRHS) &
      bind(C, name='RealInterferenceTermAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine RealInterferenceTermAssign

!! Delete
subroutine RealInterferenceTermDelete(handle) &
      bind(C, name='RealInterferenceTermDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine RealInterferenceTermDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function RealInterferenceTermRead(handle, filename, filenameSize) &
      bind(C, name='RealInterferenceTermRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function RealInterferenceTermRead

!! Write to file
function RealInterferenceTermWrite(handle, filename, filenameSize) &
      bind(C, name='RealInterferenceTermWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function RealInterferenceTermWrite

!! Print to standard output, in our prettyprinting format
function RealInterferenceTermPrint(handle) &
      bind(C, name='RealInterferenceTermPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RealInterferenceTermPrint

!! Print to standard output, as XML
function RealInterferenceTermPrintXML(handle) &
      bind(C, name='RealInterferenceTermPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RealInterferenceTermPrintXML

!! Print to standard output, as JSON
function RealInterferenceTermPrintJSON(handle) &
      bind(C, name='RealInterferenceTermPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function RealInterferenceTermPrintJSON


!! -----------------------------------------------------------------------------
!! Child: regions2d
!! -----------------------------------------------------------------------------

!! Has
function RealInterferenceTermRegions2dHas(handle) &
      bind(C, name='RealInterferenceTermRegions2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RealInterferenceTermRegions2dHas

!! Get, const
function RealInterferenceTermRegions2dGetConst(handle) &
      bind(C, name='RealInterferenceTermRegions2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RealInterferenceTermRegions2dGetConst

!! Get
function RealInterferenceTermRegions2dGet(handle) &
      bind(C, name='RealInterferenceTermRegions2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RealInterferenceTermRegions2dGet

!! Set
subroutine RealInterferenceTermRegions2dSet(handle, fieldHandle) &
      bind(C, name='RealInterferenceTermRegions2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine RealInterferenceTermRegions2dSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function RealInterferenceTermXYs2dHas(handle) &
      bind(C, name='RealInterferenceTermXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function RealInterferenceTermXYs2dHas

!! Get, const
function RealInterferenceTermXYs2dGetConst(handle) &
      bind(C, name='RealInterferenceTermXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RealInterferenceTermXYs2dGetConst

!! Get
function RealInterferenceTermXYs2dGet(handle) &
      bind(C, name='RealInterferenceTermXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function RealInterferenceTermXYs2dGet

!! Set
subroutine RealInterferenceTermXYs2dSet(handle, fieldHandle) &
      bind(C, name='RealInterferenceTermXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine RealInterferenceTermXYs2dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalRealInterferenceTerm
