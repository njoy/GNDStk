
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalPromptGammaEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function PromptGammaEnergyDefaultConst() &
      bind(C, name='PromptGammaEnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function PromptGammaEnergyDefaultConst

!! Create, default
function PromptGammaEnergyDefault() &
      bind(C, name='PromptGammaEnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function PromptGammaEnergyDefault

!! Create, general, const
function PromptGammaEnergyCreateConst( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='PromptGammaEnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function PromptGammaEnergyCreateConst

!! Create, general
function PromptGammaEnergyCreate( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='PromptGammaEnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function PromptGammaEnergyCreate

!! Assign
subroutine PromptGammaEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='PromptGammaEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine PromptGammaEnergyAssign

!! Delete
subroutine PromptGammaEnergyDelete(handle) &
      bind(C, name='PromptGammaEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine PromptGammaEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function PromptGammaEnergyRead(handle, filename, filenameSize) &
      bind(C, name='PromptGammaEnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function PromptGammaEnergyRead

!! Write to file
function PromptGammaEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='PromptGammaEnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function PromptGammaEnergyWrite

!! Print to standard output, in our prettyprinting format
function PromptGammaEnergyPrint(handle) &
      bind(C, name='PromptGammaEnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PromptGammaEnergyPrint

!! Print to standard output, as XML
function PromptGammaEnergyPrintXML(handle) &
      bind(C, name='PromptGammaEnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PromptGammaEnergyPrintXML

!! Print to standard output, as JSON
function PromptGammaEnergyPrintJSON(handle) &
      bind(C, name='PromptGammaEnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PromptGammaEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function PromptGammaEnergyPolynomial1dHas(handle) &
      bind(C, name='PromptGammaEnergyPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PromptGammaEnergyPolynomial1dHas

!! Get, const
function PromptGammaEnergyPolynomial1dGetConst(handle) &
      bind(C, name='PromptGammaEnergyPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptGammaEnergyPolynomial1dGetConst

!! Get
function PromptGammaEnergyPolynomial1dGet(handle) &
      bind(C, name='PromptGammaEnergyPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptGammaEnergyPolynomial1dGet

!! Set
subroutine PromptGammaEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='PromptGammaEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine PromptGammaEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function PromptGammaEnergyXYs1dHas(handle) &
      bind(C, name='PromptGammaEnergyXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PromptGammaEnergyXYs1dHas

!! Get, const
function PromptGammaEnergyXYs1dGetConst(handle) &
      bind(C, name='PromptGammaEnergyXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptGammaEnergyXYs1dGetConst

!! Get
function PromptGammaEnergyXYs1dGet(handle) &
      bind(C, name='PromptGammaEnergyXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptGammaEnergyXYs1dGet

!! Set
subroutine PromptGammaEnergyXYs1dSet(handle, fieldHandle) &
      bind(C, name='PromptGammaEnergyXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine PromptGammaEnergyXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalPromptGammaEnergy
