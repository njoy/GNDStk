
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSlices
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SlicesDefaultConst() &
      bind(C, name='SlicesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SlicesDefaultConst

!! Create, default
function SlicesDefault() &
      bind(C, name='SlicesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SlicesDefault

!! Create, general, const
function SlicesCreateConst( &
   slice, sliceSize &
) &
      bind(C, name='SlicesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: sliceSize
   type(c_ptr) :: slice(sliceSize)
   type(c_ptr) :: handle
end function SlicesCreateConst

!! Create, general
function SlicesCreate( &
   slice, sliceSize &
) &
      bind(C, name='SlicesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: sliceSize
   type(c_ptr) :: slice(sliceSize)
   type(c_ptr) :: handle
end function SlicesCreate

!! Assign
subroutine SlicesAssign(handleLHS, handleRHS) &
      bind(C, name='SlicesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine SlicesAssign

!! Delete
subroutine SlicesDelete(handle) &
      bind(C, name='SlicesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SlicesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SlicesRead(handle, filename, filenameSize) &
      bind(C, name='SlicesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SlicesRead

!! Write to file
function SlicesWrite(handle, filename, filenameSize) &
      bind(C, name='SlicesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SlicesWrite

!! Print to standard output, in our prettyprinting format
function SlicesPrint(handle) &
      bind(C, name='SlicesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SlicesPrint

!! Print to standard output, as XML
function SlicesPrintXML(handle) &
      bind(C, name='SlicesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SlicesPrintXML

!! Print to standard output, as JSON
function SlicesPrintJSON(handle) &
      bind(C, name='SlicesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SlicesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: slice
!! -----------------------------------------------------------------------------

!! Has
function SlicesSliceHas(handle) &
      bind(C, name='SlicesSliceHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SlicesSliceHas

!! Clear
subroutine SlicesSliceClear(handle) &
      bind(C, name='SlicesSliceClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SlicesSliceClear

!! Size
function SlicesSliceSize(handle) &
      bind(C, name='SlicesSliceSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function SlicesSliceSize

!! Add
subroutine SlicesSliceAdd(handle, fieldHandle) &
      bind(C, name='SlicesSliceAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceAdd

!! Get, by index \in [0,size), const
function SlicesSliceGetConst(handle, index) &
      bind(C, name='SlicesSliceGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function SlicesSliceGetConst

!! Get, by index \in [0,size)
function SlicesSliceGet(handle, index) &
      bind(C, name='SlicesSliceGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function SlicesSliceGet

!! Set, by index \in [0,size)
subroutine SlicesSliceSet(handle, index, fieldHandle) &
      bind(C, name='SlicesSliceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceSet

!! ------------------------
!! Re: metadatum dimension
!! ------------------------

!! Has, by dimension
function SlicesSliceHasByDimension(handle, meta) &
      bind(C, name='SlicesSliceHasByDimension') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function SlicesSliceHasByDimension

!! Get, by dimension, const
function SlicesSliceGetByDimensionConst(handle, meta) &
      bind(C, name='SlicesSliceGetByDimensionConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDimensionConst

!! Get, by dimension
function SlicesSliceGetByDimension(handle, meta) &
      bind(C, name='SlicesSliceGetByDimension') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDimension

!! Set, by dimension
subroutine SlicesSliceSetByDimension(handle, meta, fieldHandle) &
      bind(C, name='SlicesSliceSetByDimension')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceSetByDimension

!! ------------------------
!! Re: metadatum domainValue
!! ------------------------

!! Has, by domainValue
function SlicesSliceHasByDomainValue(handle, meta) &
      bind(C, name='SlicesSliceHasByDomainValue') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function SlicesSliceHasByDomainValue

!! Get, by domainValue, const
function SlicesSliceGetByDomainValueConst(handle, meta) &
      bind(C, name='SlicesSliceGetByDomainValueConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainValueConst

!! Get, by domainValue
function SlicesSliceGetByDomainValue(handle, meta) &
      bind(C, name='SlicesSliceGetByDomainValue') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainValue

!! Set, by domainValue
subroutine SlicesSliceSetByDomainValue(handle, meta, fieldHandle) &
      bind(C, name='SlicesSliceSetByDomainValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceSetByDomainValue

!! ------------------------
!! Re: metadatum domainMin
!! ------------------------

!! Has, by domainMin
function SlicesSliceHasByDomainMin(handle, meta) &
      bind(C, name='SlicesSliceHasByDomainMin') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   integer(c_int) :: has
end function SlicesSliceHasByDomainMin

!! Get, by domainMin, const
function SlicesSliceGetByDomainMinConst(handle, meta) &
      bind(C, name='SlicesSliceGetByDomainMinConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainMinConst

!! Get, by domainMin
function SlicesSliceGetByDomainMin(handle, meta) &
      bind(C, name='SlicesSliceGetByDomainMin') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainMin

!! Set, by domainMin
subroutine SlicesSliceSetByDomainMin(handle, meta, fieldHandle) &
      bind(C, name='SlicesSliceSetByDomainMin')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceSetByDomainMin

!! ------------------------
!! Re: metadatum domainMax
!! ------------------------

!! Has, by domainMax
function SlicesSliceHasByDomainMax(handle, meta) &
      bind(C, name='SlicesSliceHasByDomainMax') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   integer(c_int) :: has
end function SlicesSliceHasByDomainMax

!! Get, by domainMax, const
function SlicesSliceGetByDomainMaxConst(handle, meta) &
      bind(C, name='SlicesSliceGetByDomainMaxConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainMaxConst

!! Get, by domainMax
function SlicesSliceGetByDomainMax(handle, meta) &
      bind(C, name='SlicesSliceGetByDomainMax') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainMax

!! Set, by domainMax
subroutine SlicesSliceSetByDomainMax(handle, meta, fieldHandle) &
      bind(C, name='SlicesSliceSetByDomainMax')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceSetByDomainMax

!! ------------------------
!! Re: metadatum domainUnit
!! ------------------------

!! Has, by domainUnit
function SlicesSliceHasByDomainUnit(handle, meta, metaSize) &
      bind(C, name='SlicesSliceHasByDomainUnit') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function SlicesSliceHasByDomainUnit

!! Get, by domainUnit, const
function SlicesSliceGetByDomainUnitConst(handle, meta, metaSize) &
      bind(C, name='SlicesSliceGetByDomainUnitConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainUnitConst

!! Get, by domainUnit
function SlicesSliceGetByDomainUnit(handle, meta, metaSize) &
      bind(C, name='SlicesSliceGetByDomainUnit') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function SlicesSliceGetByDomainUnit

!! Set, by domainUnit
subroutine SlicesSliceSetByDomainUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='SlicesSliceSetByDomainUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SlicesSliceSetByDomainUnit


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSlices
