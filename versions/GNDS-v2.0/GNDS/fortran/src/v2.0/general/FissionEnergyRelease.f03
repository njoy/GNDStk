
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFissionEnergyRelease
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionEnergyReleaseDefaultConst() &
      bind(C, name='FissionEnergyReleaseDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionEnergyReleaseDefaultConst

!! Create, default
function FissionEnergyReleaseDefault() &
      bind(C, name='FissionEnergyReleaseDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionEnergyReleaseDefault

!! Create, general, const
function FissionEnergyReleaseCreateConst( &
   label, &
   promptProductKE, &
   promptNeutronKE, &
   delayedNeutronKE, &
   promptGammaEnergy, &
   delayedGammaEnergy, &
   delayedBetaEnergy, &
   neutrinoEnergy, &
   nonNeutrinoEnergy, &
   totalEnergy, &
   labelSize &
) &
      bind(C, name='FissionEnergyReleaseCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: promptProductKE
   type(c_ptr), value :: promptNeutronKE
   type(c_ptr), value :: delayedNeutronKE
   type(c_ptr), value :: promptGammaEnergy
   type(c_ptr), value :: delayedGammaEnergy
   type(c_ptr), value :: delayedBetaEnergy
   type(c_ptr), value :: neutrinoEnergy
   type(c_ptr), value :: nonNeutrinoEnergy
   type(c_ptr), value :: totalEnergy
   type(c_ptr) :: handle
end function FissionEnergyReleaseCreateConst

!! Create, general
function FissionEnergyReleaseCreate( &
   label, &
   promptProductKE, &
   promptNeutronKE, &
   delayedNeutronKE, &
   promptGammaEnergy, &
   delayedGammaEnergy, &
   delayedBetaEnergy, &
   neutrinoEnergy, &
   nonNeutrinoEnergy, &
   totalEnergy, &
   labelSize &
) &
      bind(C, name='FissionEnergyReleaseCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: promptProductKE
   type(c_ptr), value :: promptNeutronKE
   type(c_ptr), value :: delayedNeutronKE
   type(c_ptr), value :: promptGammaEnergy
   type(c_ptr), value :: delayedGammaEnergy
   type(c_ptr), value :: delayedBetaEnergy
   type(c_ptr), value :: neutrinoEnergy
   type(c_ptr), value :: nonNeutrinoEnergy
   type(c_ptr), value :: totalEnergy
   type(c_ptr) :: handle
end function FissionEnergyReleaseCreate

!! Assign
subroutine FissionEnergyReleaseAssign(handleLHS, handleRHS) &
      bind(C, name='FissionEnergyReleaseAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FissionEnergyReleaseAssign

!! Delete
subroutine FissionEnergyReleaseDelete(handle) &
      bind(C, name='FissionEnergyReleaseDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionEnergyReleaseDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FissionEnergyReleaseRead(handle, filename, filenameSize) &
      bind(C, name='FissionEnergyReleaseRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionEnergyReleaseRead

!! Write to file
function FissionEnergyReleaseWrite(handle, filename, filenameSize) &
      bind(C, name='FissionEnergyReleaseWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionEnergyReleaseWrite

!! Print to standard output, in our prettyprinting format
function FissionEnergyReleasePrint(handle) &
      bind(C, name='FissionEnergyReleasePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionEnergyReleasePrint

!! Print to standard output, as XML
function FissionEnergyReleasePrintXML(handle) &
      bind(C, name='FissionEnergyReleasePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionEnergyReleasePrintXML

!! Print to standard output, as JSON
function FissionEnergyReleasePrintJSON(handle) &
      bind(C, name='FissionEnergyReleasePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionEnergyReleasePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseLabelHas(handle) &
      bind(C, name='FissionEnergyReleaseLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseLabelHas

!! Get
function FissionEnergyReleaseLabelGet(handle) &
      bind(C, name='FissionEnergyReleaseLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function FissionEnergyReleaseLabelGet

!! Set
subroutine FissionEnergyReleaseLabelSet(handle, label, labelSize) &
      bind(C, name='FissionEnergyReleaseLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine FissionEnergyReleaseLabelSet


!! -----------------------------------------------------------------------------
!! Child: promptProductKE
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasePromptProductKEHas(handle) &
      bind(C, name='FissionEnergyReleasePromptProductKEHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleasePromptProductKEHas

!! Get, const
function FissionEnergyReleasePromptProductKEGetConst(handle) &
      bind(C, name='FissionEnergyReleasePromptProductKEGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasePromptProductKEGetConst

!! Get
function FissionEnergyReleasePromptProductKEGet(handle) &
      bind(C, name='FissionEnergyReleasePromptProductKEGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasePromptProductKEGet

!! Set
subroutine FissionEnergyReleasePromptProductKESet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasePromptProductKESet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleasePromptProductKESet


!! -----------------------------------------------------------------------------
!! Child: promptNeutronKE
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasePromptNeutronKEHas(handle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKEHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleasePromptNeutronKEHas

!! Get, const
function FissionEnergyReleasePromptNeutronKEGetConst(handle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKEGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasePromptNeutronKEGetConst

!! Get
function FissionEnergyReleasePromptNeutronKEGet(handle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKEGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasePromptNeutronKEGet

!! Set
subroutine FissionEnergyReleasePromptNeutronKESet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKESet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleasePromptNeutronKESet


!! -----------------------------------------------------------------------------
!! Child: delayedNeutronKE
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseDelayedNeutronKEHas(handle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKEHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseDelayedNeutronKEHas

!! Get, const
function FissionEnergyReleaseDelayedNeutronKEGetConst(handle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKEGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseDelayedNeutronKEGetConst

!! Get
function FissionEnergyReleaseDelayedNeutronKEGet(handle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKEGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseDelayedNeutronKEGet

!! Set
subroutine FissionEnergyReleaseDelayedNeutronKESet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKESet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleaseDelayedNeutronKESet


!! -----------------------------------------------------------------------------
!! Child: promptGammaEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasePromptGammaEnergyHas(handle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleasePromptGammaEnergyHas

!! Get, const
function FissionEnergyReleasePromptGammaEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasePromptGammaEnergyGetConst

!! Get
function FissionEnergyReleasePromptGammaEnergyGet(handle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleasePromptGammaEnergyGet

!! Set
subroutine FissionEnergyReleasePromptGammaEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleasePromptGammaEnergySet


!! -----------------------------------------------------------------------------
!! Child: delayedGammaEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseDelayedGammaEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseDelayedGammaEnergyHas

!! Get, const
function FissionEnergyReleaseDelayedGammaEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseDelayedGammaEnergyGetConst

!! Get
function FissionEnergyReleaseDelayedGammaEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseDelayedGammaEnergyGet

!! Set
subroutine FissionEnergyReleaseDelayedGammaEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleaseDelayedGammaEnergySet


!! -----------------------------------------------------------------------------
!! Child: delayedBetaEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseDelayedBetaEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseDelayedBetaEnergyHas

!! Get, const
function FissionEnergyReleaseDelayedBetaEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseDelayedBetaEnergyGetConst

!! Get
function FissionEnergyReleaseDelayedBetaEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseDelayedBetaEnergyGet

!! Set
subroutine FissionEnergyReleaseDelayedBetaEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleaseDelayedBetaEnergySet


!! -----------------------------------------------------------------------------
!! Child: neutrinoEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseNeutrinoEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseNeutrinoEnergyHas

!! Get, const
function FissionEnergyReleaseNeutrinoEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseNeutrinoEnergyGetConst

!! Get
function FissionEnergyReleaseNeutrinoEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseNeutrinoEnergyGet

!! Set
subroutine FissionEnergyReleaseNeutrinoEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleaseNeutrinoEnergySet


!! -----------------------------------------------------------------------------
!! Child: nonNeutrinoEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseNonNeutrinoEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseNonNeutrinoEnergyHas

!! Get, const
function FissionEnergyReleaseNonNeutrinoEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseNonNeutrinoEnergyGetConst

!! Get
function FissionEnergyReleaseNonNeutrinoEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseNonNeutrinoEnergyGet

!! Set
subroutine FissionEnergyReleaseNonNeutrinoEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleaseNonNeutrinoEnergySet


!! -----------------------------------------------------------------------------
!! Child: totalEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseTotalEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseTotalEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionEnergyReleaseTotalEnergyHas

!! Get, const
function FissionEnergyReleaseTotalEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseTotalEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseTotalEnergyGetConst

!! Get
function FissionEnergyReleaseTotalEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseTotalEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionEnergyReleaseTotalEnergyGet

!! Set
subroutine FissionEnergyReleaseTotalEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseTotalEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionEnergyReleaseTotalEnergySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFissionEnergyRelease
