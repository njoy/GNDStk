
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFissionEnergyRelease
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionEnergyReleaseDefaultConst() &
      bind(C, name='FissionEnergyReleaseDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionEnergyReleaseDefaultConst
end function FissionEnergyReleaseDefaultConst

!! Create, default, non-const
function FissionEnergyReleaseDefault() &
      bind(C, name='FissionEnergyReleaseDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionEnergyReleaseDefault
end function FissionEnergyReleaseDefault

!! Create, general, const
function FissionEnergyReleaseCreateConst( &
   label, &
   promptProductKE, &
   promptNeutronKE, &
   delayedNeutronKE, &
   promptGammaEnergy, &
   delayedGammaEnergy, &
   delayedBetaEnergy, &
   neutrinoEnergy, &
   nonNeutrinoEnergy, &
   totalEnergy, &
   labelSize &
) &
      bind(C, name='FissionEnergyReleaseCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), intent(in), value :: promptProductKE
   type(c_ptr), intent(in), value :: promptNeutronKE
   type(c_ptr), intent(in), value :: delayedNeutronKE
   type(c_ptr), intent(in), value :: promptGammaEnergy
   type(c_ptr), intent(in), value :: delayedGammaEnergy
   type(c_ptr), intent(in), value :: delayedBetaEnergy
   type(c_ptr), intent(in), value :: neutrinoEnergy
   type(c_ptr), intent(in), value :: nonNeutrinoEnergy
   type(c_ptr), intent(in), value :: totalEnergy
   type(c_ptr) :: FissionEnergyReleaseCreateConst
end function FissionEnergyReleaseCreateConst

!! Create, general, non-const
function FissionEnergyReleaseCreate( &
   label, &
   promptProductKE, &
   promptNeutronKE, &
   delayedNeutronKE, &
   promptGammaEnergy, &
   delayedGammaEnergy, &
   delayedBetaEnergy, &
   neutrinoEnergy, &
   nonNeutrinoEnergy, &
   totalEnergy, &
   labelSize &
) &
      bind(C, name='FissionEnergyReleaseCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), intent(in), value :: promptProductKE
   type(c_ptr), intent(in), value :: promptNeutronKE
   type(c_ptr), intent(in), value :: delayedNeutronKE
   type(c_ptr), intent(in), value :: promptGammaEnergy
   type(c_ptr), intent(in), value :: delayedGammaEnergy
   type(c_ptr), intent(in), value :: delayedBetaEnergy
   type(c_ptr), intent(in), value :: neutrinoEnergy
   type(c_ptr), intent(in), value :: nonNeutrinoEnergy
   type(c_ptr), intent(in), value :: totalEnergy
   type(c_ptr) :: FissionEnergyReleaseCreate
end function FissionEnergyReleaseCreate

!! Assign
subroutine FissionEnergyReleaseAssign(handleLHS, handleRHS) &
      bind(C, name='FissionEnergyReleaseAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine FissionEnergyReleaseAssign

!! Delete
subroutine FissionEnergyReleaseDelete(handle) &
      bind(C, name='FissionEnergyReleaseDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionEnergyReleaseDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function FissionEnergyReleaseRead(handle, filename, filenameSize) &
      bind(C, name='FissionEnergyReleaseRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionEnergyReleaseRead
end function FissionEnergyReleaseRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function FissionEnergyReleaseWrite(handle, filename, filenameSize) &
      bind(C, name='FissionEnergyReleaseWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionEnergyReleaseWrite
end function FissionEnergyReleaseWrite

!! Print to standard output, in our prettyprinting format
function FissionEnergyReleasePrint(handle) &
      bind(C, name='FissionEnergyReleasePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleasePrint
end function FissionEnergyReleasePrint

!! Print to standard output, as XML
function FissionEnergyReleasePrintXML(handle) &
      bind(C, name='FissionEnergyReleasePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleasePrintXML
end function FissionEnergyReleasePrintXML

!! Print to standard output, as JSON
function FissionEnergyReleasePrintJSON(handle) &
      bind(C, name='FissionEnergyReleasePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleasePrintJSON
end function FissionEnergyReleasePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseLabelHas(handle) &
      bind(C, name='FissionEnergyReleaseLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseLabelHas
end function FissionEnergyReleaseLabelHas

!! Get
function FissionEnergyReleaseLabelGet(handle) &
      bind(C, name='FissionEnergyReleaseLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseLabelGet
end function FissionEnergyReleaseLabelGet

!! Set
subroutine FissionEnergyReleaseLabelSet(handle, label, labelSize) &
      bind(C, name='FissionEnergyReleaseLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine FissionEnergyReleaseLabelSet


!! -----------------------------------------------------------------------------
!! Child: promptProductKE
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasePromptProductKEHas(handle) &
      bind(C, name='FissionEnergyReleasePromptProductKEHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleasePromptProductKEHas
end function FissionEnergyReleasePromptProductKEHas

!! Get, const
function FissionEnergyReleasePromptProductKEGetConst(handle) &
      bind(C, name='FissionEnergyReleasePromptProductKEGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleasePromptProductKEGetConst
end function FissionEnergyReleasePromptProductKEGetConst

!! Get, non-const
function FissionEnergyReleasePromptProductKEGet(handle) &
      bind(C, name='FissionEnergyReleasePromptProductKEGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleasePromptProductKEGet
end function FissionEnergyReleasePromptProductKEGet

!! Set
subroutine FissionEnergyReleasePromptProductKESet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasePromptProductKESet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleasePromptProductKESet


!! -----------------------------------------------------------------------------
!! Child: promptNeutronKE
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasePromptNeutronKEHas(handle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKEHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleasePromptNeutronKEHas
end function FissionEnergyReleasePromptNeutronKEHas

!! Get, const
function FissionEnergyReleasePromptNeutronKEGetConst(handle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKEGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleasePromptNeutronKEGetConst
end function FissionEnergyReleasePromptNeutronKEGetConst

!! Get, non-const
function FissionEnergyReleasePromptNeutronKEGet(handle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKEGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleasePromptNeutronKEGet
end function FissionEnergyReleasePromptNeutronKEGet

!! Set
subroutine FissionEnergyReleasePromptNeutronKESet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasePromptNeutronKESet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleasePromptNeutronKESet


!! -----------------------------------------------------------------------------
!! Child: delayedNeutronKE
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseDelayedNeutronKEHas(handle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKEHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseDelayedNeutronKEHas
end function FissionEnergyReleaseDelayedNeutronKEHas

!! Get, const
function FissionEnergyReleaseDelayedNeutronKEGetConst(handle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKEGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseDelayedNeutronKEGetConst
end function FissionEnergyReleaseDelayedNeutronKEGetConst

!! Get, non-const
function FissionEnergyReleaseDelayedNeutronKEGet(handle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKEGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleaseDelayedNeutronKEGet
end function FissionEnergyReleaseDelayedNeutronKEGet

!! Set
subroutine FissionEnergyReleaseDelayedNeutronKESet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseDelayedNeutronKESet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleaseDelayedNeutronKESet


!! -----------------------------------------------------------------------------
!! Child: promptGammaEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleasePromptGammaEnergyHas(handle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleasePromptGammaEnergyHas
end function FissionEnergyReleasePromptGammaEnergyHas

!! Get, const
function FissionEnergyReleasePromptGammaEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleasePromptGammaEnergyGetConst
end function FissionEnergyReleasePromptGammaEnergyGetConst

!! Get, non-const
function FissionEnergyReleasePromptGammaEnergyGet(handle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleasePromptGammaEnergyGet
end function FissionEnergyReleasePromptGammaEnergyGet

!! Set
subroutine FissionEnergyReleasePromptGammaEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleasePromptGammaEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleasePromptGammaEnergySet


!! -----------------------------------------------------------------------------
!! Child: delayedGammaEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseDelayedGammaEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseDelayedGammaEnergyHas
end function FissionEnergyReleaseDelayedGammaEnergyHas

!! Get, const
function FissionEnergyReleaseDelayedGammaEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseDelayedGammaEnergyGetConst
end function FissionEnergyReleaseDelayedGammaEnergyGetConst

!! Get, non-const
function FissionEnergyReleaseDelayedGammaEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleaseDelayedGammaEnergyGet
end function FissionEnergyReleaseDelayedGammaEnergyGet

!! Set
subroutine FissionEnergyReleaseDelayedGammaEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseDelayedGammaEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleaseDelayedGammaEnergySet


!! -----------------------------------------------------------------------------
!! Child: delayedBetaEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseDelayedBetaEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseDelayedBetaEnergyHas
end function FissionEnergyReleaseDelayedBetaEnergyHas

!! Get, const
function FissionEnergyReleaseDelayedBetaEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseDelayedBetaEnergyGetConst
end function FissionEnergyReleaseDelayedBetaEnergyGetConst

!! Get, non-const
function FissionEnergyReleaseDelayedBetaEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleaseDelayedBetaEnergyGet
end function FissionEnergyReleaseDelayedBetaEnergyGet

!! Set
subroutine FissionEnergyReleaseDelayedBetaEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseDelayedBetaEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleaseDelayedBetaEnergySet


!! -----------------------------------------------------------------------------
!! Child: neutrinoEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseNeutrinoEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseNeutrinoEnergyHas
end function FissionEnergyReleaseNeutrinoEnergyHas

!! Get, const
function FissionEnergyReleaseNeutrinoEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseNeutrinoEnergyGetConst
end function FissionEnergyReleaseNeutrinoEnergyGetConst

!! Get, non-const
function FissionEnergyReleaseNeutrinoEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleaseNeutrinoEnergyGet
end function FissionEnergyReleaseNeutrinoEnergyGet

!! Set
subroutine FissionEnergyReleaseNeutrinoEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseNeutrinoEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleaseNeutrinoEnergySet


!! -----------------------------------------------------------------------------
!! Child: nonNeutrinoEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseNonNeutrinoEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseNonNeutrinoEnergyHas
end function FissionEnergyReleaseNonNeutrinoEnergyHas

!! Get, const
function FissionEnergyReleaseNonNeutrinoEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseNonNeutrinoEnergyGetConst
end function FissionEnergyReleaseNonNeutrinoEnergyGetConst

!! Get, non-const
function FissionEnergyReleaseNonNeutrinoEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleaseNonNeutrinoEnergyGet
end function FissionEnergyReleaseNonNeutrinoEnergyGet

!! Set
subroutine FissionEnergyReleaseNonNeutrinoEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseNonNeutrinoEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleaseNonNeutrinoEnergySet


!! -----------------------------------------------------------------------------
!! Child: totalEnergy
!! -----------------------------------------------------------------------------

!! Has
function FissionEnergyReleaseTotalEnergyHas(handle) &
      bind(C, name='FissionEnergyReleaseTotalEnergyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionEnergyReleaseTotalEnergyHas
end function FissionEnergyReleaseTotalEnergyHas

!! Get, const
function FissionEnergyReleaseTotalEnergyGetConst(handle) &
      bind(C, name='FissionEnergyReleaseTotalEnergyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionEnergyReleaseTotalEnergyGetConst
end function FissionEnergyReleaseTotalEnergyGetConst

!! Get, non-const
function FissionEnergyReleaseTotalEnergyGet(handle) &
      bind(C, name='FissionEnergyReleaseTotalEnergyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionEnergyReleaseTotalEnergyGet
end function FissionEnergyReleaseTotalEnergyGet

!! Set
subroutine FissionEnergyReleaseTotalEnergySet(handle, fieldHandle) &
      bind(C, name='FissionEnergyReleaseTotalEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionEnergyReleaseTotalEnergySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFissionEnergyRelease
