
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSpinGroup
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SpinGroupDefaultConst() &
      bind(C, name='SpinGroupDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: SpinGroupDefaultConst
end function SpinGroupDefaultConst

!! Create, default, non-const
function SpinGroupDefault() &
      bind(C, name='SpinGroupDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: SpinGroupDefault
end function SpinGroupDefault

!! Create, general, const
function SpinGroupCreateConst( &
   label, &
   spin, &
   parity, &
   channels, &
   resonanceParameters, &
   labelSize &
) &
      bind(C, name='SpinGroupCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), intent(in), value :: spin
   integer(c_int), intent(in), value :: parity
   type(c_ptr), intent(in), value :: channels
   type(c_ptr), intent(in), value :: resonanceParameters
   type(c_ptr) :: SpinGroupCreateConst
end function SpinGroupCreateConst

!! Create, general, non-const
function SpinGroupCreate( &
   label, &
   spin, &
   parity, &
   channels, &
   resonanceParameters, &
   labelSize &
) &
      bind(C, name='SpinGroupCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), intent(in), value :: spin
   integer(c_int), intent(in), value :: parity
   type(c_ptr), intent(in), value :: channels
   type(c_ptr), intent(in), value :: resonanceParameters
   type(c_ptr) :: SpinGroupCreate
end function SpinGroupCreate

!! Assign
subroutine SpinGroupAssign(handleLHS, handleRHS) &
      bind(C, name='SpinGroupAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine SpinGroupAssign

!! Delete
subroutine SpinGroupDelete(handle) &
      bind(C, name='SpinGroupDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpinGroupDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function SpinGroupRead(handle, filename, filenameSize) &
      bind(C, name='SpinGroupRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: SpinGroupRead
end function SpinGroupRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function SpinGroupWrite(handle, filename, filenameSize) &
      bind(C, name='SpinGroupWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: SpinGroupWrite
end function SpinGroupWrite

!! Print to standard output, in our prettyprinting format
function SpinGroupPrint(handle) &
      bind(C, name='SpinGroupPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupPrint
end function SpinGroupPrint

!! Print to standard output, as XML
function SpinGroupPrintXML(handle) &
      bind(C, name='SpinGroupPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupPrintXML
end function SpinGroupPrintXML

!! Print to standard output, as JSON
function SpinGroupPrintJSON(handle) &
      bind(C, name='SpinGroupPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupPrintJSON
end function SpinGroupPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupLabelHas(handle) &
      bind(C, name='SpinGroupLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupLabelHas
end function SpinGroupLabelHas

!! Get
function SpinGroupLabelGet(handle) &
      bind(C, name='SpinGroupLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: SpinGroupLabelGet
end function SpinGroupLabelGet

!! Set
subroutine SpinGroupLabelSet(handle, label, labelSize) &
      bind(C, name='SpinGroupLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine SpinGroupLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: spin
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupSpinHas(handle) &
      bind(C, name='SpinGroupSpinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupSpinHas
end function SpinGroupSpinHas

!! Get
function SpinGroupSpinGet(handle) &
      bind(C, name='SpinGroupSpinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupSpinGet
end function SpinGroupSpinGet

!! Set
subroutine SpinGroupSpinSet(handle, spin) &
      bind(C, name='SpinGroupSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: spin
end subroutine SpinGroupSpinSet


!! -----------------------------------------------------------------------------
!! Metadatum: parity
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupParityHas(handle) &
      bind(C, name='SpinGroupParityHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupParityHas
end function SpinGroupParityHas

!! Get
function SpinGroupParityGet(handle) &
      bind(C, name='SpinGroupParityGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupParityGet
end function SpinGroupParityGet

!! Set
subroutine SpinGroupParitySet(handle, parity) &
      bind(C, name='SpinGroupParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: parity
end subroutine SpinGroupParitySet


!! -----------------------------------------------------------------------------
!! Child: channels
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupChannelsHas(handle) &
      bind(C, name='SpinGroupChannelsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupChannelsHas
end function SpinGroupChannelsHas

!! Get, const
function SpinGroupChannelsGetConst(handle) &
      bind(C, name='SpinGroupChannelsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: SpinGroupChannelsGetConst
end function SpinGroupChannelsGetConst

!! Get, non-const
function SpinGroupChannelsGet(handle) &
      bind(C, name='SpinGroupChannelsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: SpinGroupChannelsGet
end function SpinGroupChannelsGet

!! Set
subroutine SpinGroupChannelsSet(handle, fieldHandle) &
      bind(C, name='SpinGroupChannelsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupChannelsSet


!! -----------------------------------------------------------------------------
!! Child: resonanceParameters
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupResonanceParametersHas(handle) &
      bind(C, name='SpinGroupResonanceParametersHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: SpinGroupResonanceParametersHas
end function SpinGroupResonanceParametersHas

!! Get, const
function SpinGroupResonanceParametersGetConst(handle) &
      bind(C, name='SpinGroupResonanceParametersGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: SpinGroupResonanceParametersGetConst
end function SpinGroupResonanceParametersGetConst

!! Get, non-const
function SpinGroupResonanceParametersGet(handle) &
      bind(C, name='SpinGroupResonanceParametersGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: SpinGroupResonanceParametersGet
end function SpinGroupResonanceParametersGet

!! Set
subroutine SpinGroupResonanceParametersSet(handle, fieldHandle) &
      bind(C, name='SpinGroupResonanceParametersSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine SpinGroupResonanceParametersSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSpinGroup
