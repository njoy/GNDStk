
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalSpinGroup
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function SpinGroupDefaultConst() &
      bind(C, name='SpinGroupDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SpinGroupDefaultConst

!! Create, default
function SpinGroupDefault() &
      bind(C, name='SpinGroupDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function SpinGroupDefault

!! Create, general, const
function SpinGroupCreateConst( &
   label, &
   spin, &
   parity, &
   channels, &
   resonanceParameters, &
   labelSize &
) &
      bind(C, name='SpinGroupCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: spin
   integer(c_int), value, intent(in) :: parity
   type(c_ptr), value :: channels
   type(c_ptr), value :: resonanceParameters
   type(c_ptr) :: handle
end function SpinGroupCreateConst

!! Create, general
function SpinGroupCreate( &
   label, &
   spin, &
   parity, &
   channels, &
   resonanceParameters, &
   labelSize &
) &
      bind(C, name='SpinGroupCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: spin
   integer(c_int), value, intent(in) :: parity
   type(c_ptr), value :: channels
   type(c_ptr), value :: resonanceParameters
   type(c_ptr) :: handle
end function SpinGroupCreate

!! Assign
subroutine SpinGroupAssign(handleLHS, handleRHS) &
      bind(C, name='SpinGroupAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine SpinGroupAssign

!! Delete
subroutine SpinGroupDelete(handle) &
      bind(C, name='SpinGroupDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine SpinGroupDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function SpinGroupRead(handle, filename, filenameSize) &
      bind(C, name='SpinGroupRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SpinGroupRead

!! Write to file
function SpinGroupWrite(handle, filename, filenameSize) &
      bind(C, name='SpinGroupWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function SpinGroupWrite

!! Print to standard output, in our prettyprinting format
function SpinGroupPrint(handle) &
      bind(C, name='SpinGroupPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpinGroupPrint

!! Print to standard output, as XML
function SpinGroupPrintXML(handle) &
      bind(C, name='SpinGroupPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpinGroupPrintXML

!! Print to standard output, as JSON
function SpinGroupPrintJSON(handle) &
      bind(C, name='SpinGroupPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function SpinGroupPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupLabelHas(handle) &
      bind(C, name='SpinGroupLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpinGroupLabelHas

!! Get
function SpinGroupLabelGet(handle) &
      bind(C, name='SpinGroupLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function SpinGroupLabelGet

!! Set
subroutine SpinGroupLabelSet(handle, label, labelSize) &
      bind(C, name='SpinGroupLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine SpinGroupLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: spin
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupSpinHas(handle) &
      bind(C, name='SpinGroupSpinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpinGroupSpinHas

!! Get
function SpinGroupSpinGet(handle) &
      bind(C, name='SpinGroupSpinGet') &
      result(spin)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: spin
end function SpinGroupSpinGet

!! Set
subroutine SpinGroupSpinSet(handle, spin, spinSize) &
      bind(C, name='SpinGroupSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: spinSize
   character(c_char), intent(in) :: spin(spinSize)
end subroutine SpinGroupSpinSet


!! -----------------------------------------------------------------------------
!! Metadatum: parity
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupParityHas(handle) &
      bind(C, name='SpinGroupParityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpinGroupParityHas

!! Get
function SpinGroupParityGet(handle) &
      bind(C, name='SpinGroupParityGet') &
      result(parity)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: parity
end function SpinGroupParityGet

!! Set
subroutine SpinGroupParitySet(handle, parity, paritySize) &
      bind(C, name='SpinGroupParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: paritySize
   character(c_char), intent(in) :: parity(paritySize)
end subroutine SpinGroupParitySet


!! -----------------------------------------------------------------------------
!! Child: channels
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupChannelsHas(handle) &
      bind(C, name='SpinGroupChannelsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpinGroupChannelsHas

!! Get, const
function SpinGroupChannelsGetConst(handle) &
      bind(C, name='SpinGroupChannelsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SpinGroupChannelsGetConst

!! Get
function SpinGroupChannelsGet(handle) &
      bind(C, name='SpinGroupChannelsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SpinGroupChannelsGet

!! Set
subroutine SpinGroupChannelsSet(handle, fieldHandle) &
      bind(C, name='SpinGroupChannelsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine SpinGroupChannelsSet


!! -----------------------------------------------------------------------------
!! Child: resonanceParameters
!! -----------------------------------------------------------------------------

!! Has
function SpinGroupResonanceParametersHas(handle) &
      bind(C, name='SpinGroupResonanceParametersHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function SpinGroupResonanceParametersHas

!! Get, const
function SpinGroupResonanceParametersGetConst(handle) &
      bind(C, name='SpinGroupResonanceParametersGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SpinGroupResonanceParametersGetConst

!! Get
function SpinGroupResonanceParametersGet(handle) &
      bind(C, name='SpinGroupResonanceParametersGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function SpinGroupResonanceParametersGet

!! Set
subroutine SpinGroupResonanceParametersSet(handle, fieldHandle) &
      bind(C, name='SpinGroupResonanceParametersSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine SpinGroupResonanceParametersSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalSpinGroup
