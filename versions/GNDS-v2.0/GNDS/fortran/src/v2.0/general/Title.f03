
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalTitle
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function TitleDefaultConst() &
      bind(C, name='TitleDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: TitleDefaultConst
end function TitleDefaultConst

!! Create, default, non-const
function TitleDefault() &
      bind(C, name='TitleDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: TitleDefault
end function TitleDefault

!! Create, general, const
function TitleCreateConst( &
) &
      bind(C, name='TitleCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: TitleCreateConst
end function TitleCreateConst

!! Create, general, non-const
function TitleCreate( &
) &
      bind(C, name='TitleCreate')
   use iso_c_binding
   implicit none
   type(c_ptr) :: TitleCreate
end function TitleCreate

!! Assign
subroutine TitleAssign(handleLHS, handleRHS) &
      bind(C, name='TitleAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine TitleAssign

!! Delete
subroutine TitleDelete(handle) &
      bind(C, name='TitleDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine TitleDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function TitleRead(handle, filename, filenameSize) &
      bind(C, name='TitleRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: TitleRead
end function TitleRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function TitleWrite(handle, filename, filenameSize) &
      bind(C, name='TitleWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: TitleWrite
end function TitleWrite

!! Print to standard output, in our prettyprinting format
function TitlePrint(handle) &
      bind(C, name='TitlePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TitlePrint
end function TitlePrint

!! Print to standard output, as XML
function TitlePrintXML(handle) &
      bind(C, name='TitlePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TitlePrintXML
end function TitlePrintXML

!! Print to standard output, as JSON
function TitlePrintJSON(handle) &
      bind(C, name='TitlePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TitlePrintJSON
end function TitlePrintJSON


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalTitle
