
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResolvedRegion
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResolvedRegionDefaultConst() &
      bind(C, name='ResolvedRegionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ResolvedRegionDefaultConst
end function ResolvedRegionDefaultConst

!! Create, default, non-const
function ResolvedRegionDefault() &
      bind(C, name='ResolvedRegionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ResolvedRegionDefault
end function ResolvedRegionDefault

!! Create, general, const
function ResolvedRegionCreateConst( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ResolvedRegionCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: ResolvedRegionCreateConst
end function ResolvedRegionCreateConst

!! Create, general, non-const
function ResolvedRegionCreate( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ResolvedRegionCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: ResolvedRegionCreate
end function ResolvedRegionCreate

!! Assign
subroutine ResolvedRegionAssign(handleLHS, handleRHS) &
      bind(C, name='ResolvedRegionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ResolvedRegionAssign

!! Delete
subroutine ResolvedRegionDelete(handle) &
      bind(C, name='ResolvedRegionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResolvedRegionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ResolvedRegionRead(handle, filename, filenameSize) &
      bind(C, name='ResolvedRegionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ResolvedRegionRead
end function ResolvedRegionRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ResolvedRegionWrite(handle, filename, filenameSize) &
      bind(C, name='ResolvedRegionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ResolvedRegionWrite
end function ResolvedRegionWrite

!! Print to standard output, in our prettyprinting format
function ResolvedRegionPrint(handle) &
      bind(C, name='ResolvedRegionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResolvedRegionPrint
end function ResolvedRegionPrint

!! Print to standard output, as XML
function ResolvedRegionPrintXML(handle) &
      bind(C, name='ResolvedRegionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResolvedRegionPrintXML
end function ResolvedRegionPrintXML

!! Print to standard output, as JSON
function ResolvedRegionPrintJSON(handle) &
      bind(C, name='ResolvedRegionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResolvedRegionPrintJSON
end function ResolvedRegionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ResolvedRegionXYs1dHas(handle) &
      bind(C, name='ResolvedRegionXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResolvedRegionXYs1dHas
end function ResolvedRegionXYs1dHas

!! Get, const
function ResolvedRegionXYs1dGetConst(handle) &
      bind(C, name='ResolvedRegionXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ResolvedRegionXYs1dGetConst
end function ResolvedRegionXYs1dGetConst

!! Get, non-const
function ResolvedRegionXYs1dGet(handle) &
      bind(C, name='ResolvedRegionXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ResolvedRegionXYs1dGet
end function ResolvedRegionXYs1dGet

!! Set
subroutine ResolvedRegionXYs1dSet(handle, fieldHandle) &
      bind(C, name='ResolvedRegionXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResolvedRegionXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function ResolvedRegionRegions1dHas(handle) &
      bind(C, name='ResolvedRegionRegions1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ResolvedRegionRegions1dHas
end function ResolvedRegionRegions1dHas

!! Get, const
function ResolvedRegionRegions1dGetConst(handle) &
      bind(C, name='ResolvedRegionRegions1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ResolvedRegionRegions1dGetConst
end function ResolvedRegionRegions1dGetConst

!! Get, non-const
function ResolvedRegionRegions1dGet(handle) &
      bind(C, name='ResolvedRegionRegions1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ResolvedRegionRegions1dGet
end function ResolvedRegionRegions1dGet

!! Set
subroutine ResolvedRegionRegions1dSet(handle, fieldHandle) &
      bind(C, name='ResolvedRegionRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ResolvedRegionRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResolvedRegion
