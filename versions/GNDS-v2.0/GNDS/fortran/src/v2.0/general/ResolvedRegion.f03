
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalResolvedRegion
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ResolvedRegionDefaultConst() &
      bind(C, name='ResolvedRegionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResolvedRegionDefaultConst

!! Create, default
function ResolvedRegionDefault() &
      bind(C, name='ResolvedRegionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ResolvedRegionDefault

!! Create, general, const
function ResolvedRegionCreateConst( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ResolvedRegionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function ResolvedRegionCreateConst

!! Create, general
function ResolvedRegionCreate( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='ResolvedRegionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function ResolvedRegionCreate

!! Assign
subroutine ResolvedRegionAssign(handleLHS, handleRHS) &
      bind(C, name='ResolvedRegionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ResolvedRegionAssign

!! Delete
subroutine ResolvedRegionDelete(handle) &
      bind(C, name='ResolvedRegionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ResolvedRegionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ResolvedRegionRead(handle, filename, filenameSize) &
      bind(C, name='ResolvedRegionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResolvedRegionRead

!! Write to file
function ResolvedRegionWrite(handle, filename, filenameSize) &
      bind(C, name='ResolvedRegionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ResolvedRegionWrite

!! Print to standard output, in our prettyprinting format
function ResolvedRegionPrint(handle) &
      bind(C, name='ResolvedRegionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResolvedRegionPrint

!! Print to standard output, as XML
function ResolvedRegionPrintXML(handle) &
      bind(C, name='ResolvedRegionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResolvedRegionPrintXML

!! Print to standard output, as JSON
function ResolvedRegionPrintJSON(handle) &
      bind(C, name='ResolvedRegionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ResolvedRegionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function ResolvedRegionXYs1dHas(handle) &
      bind(C, name='ResolvedRegionXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedRegionXYs1dHas

!! Get, const
function ResolvedRegionXYs1dGetConst(handle) &
      bind(C, name='ResolvedRegionXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedRegionXYs1dGetConst

!! Get
function ResolvedRegionXYs1dGet(handle) &
      bind(C, name='ResolvedRegionXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedRegionXYs1dGet

!! Set
subroutine ResolvedRegionXYs1dSet(handle, fieldHandle) &
      bind(C, name='ResolvedRegionXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResolvedRegionXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function ResolvedRegionRegions1dHas(handle) &
      bind(C, name='ResolvedRegionRegions1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ResolvedRegionRegions1dHas

!! Get, const
function ResolvedRegionRegions1dGetConst(handle) &
      bind(C, name='ResolvedRegionRegions1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedRegionRegions1dGetConst

!! Get
function ResolvedRegionRegions1dGet(handle) &
      bind(C, name='ResolvedRegionRegions1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ResolvedRegionRegions1dGet

!! Set
subroutine ResolvedRegionRegions1dSet(handle, fieldHandle) &
      bind(C, name='ResolvedRegionRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ResolvedRegionRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalResolvedRegion
