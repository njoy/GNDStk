
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalLink
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function LinkDefaultConst() &
      bind(C, name='LinkDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: LinkDefaultConst
end function LinkDefaultConst

!! Create, default
function LinkDefault() &
      bind(C, name='LinkDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: LinkDefault
end function LinkDefault

!! Create, general, const
function LinkCreateConst( &
   href, &
   hrefSize &
) &
      bind(C, name='LinkCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: LinkCreateConst
end function LinkCreateConst

!! Create, general
function LinkCreate( &
   href, &
   hrefSize &
) &
      bind(C, name='LinkCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: LinkCreate
end function LinkCreate

!! Assign
subroutine LinkAssign(handleLHS, handleRHS) &
      bind(C, name='LinkAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine LinkAssign

!! Delete
subroutine LinkDelete(handle) &
      bind(C, name='LinkDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine LinkDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function LinkRead(handle, filename, filenameSize) &
      bind(C, name='LinkRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: LinkRead
end function LinkRead

!! Write to file
function LinkWrite(handle, filename, filenameSize) &
      bind(C, name='LinkWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: LinkWrite
end function LinkWrite

!! Print to standard output, in our prettyprinting format
function LinkPrint(handle) &
      bind(C, name='LinkPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LinkPrint
end function LinkPrint

!! Print to standard output, as XML
function LinkPrintXML(handle) &
      bind(C, name='LinkPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LinkPrintXML
end function LinkPrintXML

!! Print to standard output, as JSON
function LinkPrintJSON(handle) &
      bind(C, name='LinkPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LinkPrintJSON
end function LinkPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function LinkHrefHas(handle) &
      bind(C, name='LinkHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: LinkHrefHas
end function LinkHrefHas

!! Get
function LinkHrefGet(handle) &
      bind(C, name='LinkHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: LinkHrefGet
end function LinkHrefGet

!! Set
subroutine LinkHrefSet(handle, href, hrefSize) &
      bind(C, name='LinkHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine LinkHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalLink
