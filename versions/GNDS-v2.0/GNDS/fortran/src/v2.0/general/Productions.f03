
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalProductions
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ProductionsDefaultConst() &
      bind(C, name='ProductionsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ProductionsDefaultConst
end function ProductionsDefaultConst

!! Create, default
function ProductionsDefault() &
      bind(C, name='ProductionsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ProductionsDefault
end function ProductionsDefault

!! Create, general, const
function ProductionsCreateConst( &
   production, productionSize &
) &
      bind(C, name='ProductionsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: productionSize
   type(c_ptr) :: production(productionSize)
   type(c_ptr) :: ProductionsCreateConst
end function ProductionsCreateConst

!! Create, general
function ProductionsCreate( &
   production, productionSize &
) &
      bind(C, name='ProductionsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: productionSize
   type(c_ptr) :: production(productionSize)
   type(c_ptr) :: ProductionsCreate
end function ProductionsCreate

!! Assign
subroutine ProductionsAssign(handleLHS, handleRHS) &
      bind(C, name='ProductionsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ProductionsAssign

!! Delete
subroutine ProductionsDelete(handle) &
      bind(C, name='ProductionsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProductionsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ProductionsRead(handle, filename, filenameSize) &
      bind(C, name='ProductionsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ProductionsRead
end function ProductionsRead

!! Write to file
function ProductionsWrite(handle, filename, filenameSize) &
      bind(C, name='ProductionsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ProductionsWrite
end function ProductionsWrite

!! Print to standard output, in our prettyprinting format
function ProductionsPrint(handle) &
      bind(C, name='ProductionsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProductionsPrint
end function ProductionsPrint

!! Print to standard output, as XML
function ProductionsPrintXML(handle) &
      bind(C, name='ProductionsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProductionsPrintXML
end function ProductionsPrintXML

!! Print to standard output, as JSON
function ProductionsPrintJSON(handle) &
      bind(C, name='ProductionsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProductionsPrintJSON
end function ProductionsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: production
!! -----------------------------------------------------------------------------

!! Has
function ProductionsProductionHas(handle) &
      bind(C, name='ProductionsProductionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ProductionsProductionHas
end function ProductionsProductionHas

!! Clear
subroutine ProductionsProductionClear(handle) &
      bind(C, name='ProductionsProductionClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProductionsProductionClear

!! Size
function ProductionsProductionSize(handle) &
      bind(C, name='ProductionsProductionSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: ProductionsProductionSize
end function ProductionsProductionSize

!! Add
subroutine ProductionsProductionAdd(handle, fieldHandle) &
      bind(C, name='ProductionsProductionAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductionsProductionAdd

!! Get, by index \in [0,size), const
function ProductionsProductionGetConst(handle, index) &
      bind(C, name='ProductionsProductionGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ProductionsProductionGetConst
end function ProductionsProductionGetConst

!! Get, by index \in [0,size)
function ProductionsProductionGet(handle, index) &
      bind(C, name='ProductionsProductionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ProductionsProductionGet
end function ProductionsProductionGet

!! Set, by index \in [0,size)
subroutine ProductionsProductionSet(handle, index, fieldHandle) &
      bind(C, name='ProductionsProductionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductionsProductionSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function ProductionsProductionHasByLabel(handle, meta, metaSize) &
      bind(C, name='ProductionsProductionHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: ProductionsProductionHasByLabel
end function ProductionsProductionHasByLabel

!! Get, by label, const
function ProductionsProductionGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='ProductionsProductionGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ProductionsProductionGetByLabelConst
end function ProductionsProductionGetByLabelConst

!! Get, by label
function ProductionsProductionGetByLabel(handle, meta, metaSize) &
      bind(C, name='ProductionsProductionGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ProductionsProductionGetByLabel
end function ProductionsProductionGetByLabel

!! Set, by label
subroutine ProductionsProductionSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ProductionsProductionSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductionsProductionSetByLabel

!! ------------------------
!! Re: metadatum ENDF_MT
!! ------------------------

!! Has, by ENDF_MT
function ProductionsProductionHasByENDFMT(handle, meta) &
      bind(C, name='ProductionsProductionHasByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: ProductionsProductionHasByENDFMT
end function ProductionsProductionHasByENDFMT

!! Get, by ENDF_MT, const
function ProductionsProductionGetByENDFMTConst(handle, meta) &
      bind(C, name='ProductionsProductionGetByENDFMTConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: ProductionsProductionGetByENDFMTConst
end function ProductionsProductionGetByENDFMTConst

!! Get, by ENDF_MT
function ProductionsProductionGetByENDFMT(handle, meta) &
      bind(C, name='ProductionsProductionGetByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: ProductionsProductionGetByENDFMT
end function ProductionsProductionGetByENDFMT

!! Set, by ENDF_MT
subroutine ProductionsProductionSetByENDFMT(handle, meta, fieldHandle) &
      bind(C, name='ProductionsProductionSetByENDFMT')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ProductionsProductionSetByENDFMT


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalProductions
