
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalE_critical
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function E_criticalDefaultConst() &
      bind(C, name='E_criticalDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function E_criticalDefaultConst

!! Create, default
function E_criticalDefault() &
      bind(C, name='E_criticalDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function E_criticalDefault

!! Create, general, const
function E_criticalCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='E_criticalCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function E_criticalCreateConst

!! Create, general
function E_criticalCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='E_criticalCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function E_criticalCreate

!! Assign
subroutine E_criticalAssign(handleLHS, handleRHS) &
      bind(C, name='E_criticalAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine E_criticalAssign

!! Delete
subroutine E_criticalDelete(handle) &
      bind(C, name='E_criticalDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine E_criticalDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function E_criticalRead(handle, filename, filenameSize) &
      bind(C, name='E_criticalRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function E_criticalRead

!! Write to file
function E_criticalWrite(handle, filename, filenameSize) &
      bind(C, name='E_criticalWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function E_criticalWrite

!! Print to standard output, in our prettyprinting format
function E_criticalPrint(handle) &
      bind(C, name='E_criticalPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function E_criticalPrint

!! Print to standard output, as XML
function E_criticalPrintXML(handle) &
      bind(C, name='E_criticalPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function E_criticalPrintXML

!! Print to standard output, as JSON
function E_criticalPrintJSON(handle) &
      bind(C, name='E_criticalPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function E_criticalPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function E_criticalValueHas(handle) &
      bind(C, name='E_criticalValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function E_criticalValueHas

!! Get
function E_criticalValueGet(handle) &
      bind(C, name='E_criticalValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function E_criticalValueGet

!! Set
subroutine E_criticalValueSet(handle, value, valueSize) &
      bind(C, name='E_criticalValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine E_criticalValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function E_criticalUnitHas(handle) &
      bind(C, name='E_criticalUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function E_criticalUnitHas

!! Get
function E_criticalUnitGet(handle) &
      bind(C, name='E_criticalUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function E_criticalUnitGet

!! Set
subroutine E_criticalUnitSet(handle, unit, unitSize) &
      bind(C, name='E_criticalUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine E_criticalUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalE_critical
