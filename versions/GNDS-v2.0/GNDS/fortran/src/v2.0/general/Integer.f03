
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalInteger
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IntegerDefaultConst() &
      bind(C, name='IntegerDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IntegerDefaultConst
end function IntegerDefaultConst

!! Create, default
function IntegerDefault() &
      bind(C, name='IntegerDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IntegerDefault
end function IntegerDefault

!! Create, general, const
function IntegerCreateConst( &
   label, &
   value, &
   unit, &
   labelSize, &
   unitSize &
) &
      bind(C, name='IntegerCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: IntegerCreateConst
end function IntegerCreateConst

!! Create, general
function IntegerCreate( &
   label, &
   value, &
   unit, &
   labelSize, &
   unitSize &
) &
      bind(C, name='IntegerCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: IntegerCreate
end function IntegerCreate

!! Assign
subroutine IntegerAssign(handleLHS, handleRHS) &
      bind(C, name='IntegerAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine IntegerAssign

!! Delete
subroutine IntegerDelete(handle) &
      bind(C, name='IntegerDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IntegerDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function IntegerRead(handle, filename, filenameSize) &
      bind(C, name='IntegerRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IntegerRead
end function IntegerRead

!! Write to file
function IntegerWrite(handle, filename, filenameSize) &
      bind(C, name='IntegerWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IntegerWrite
end function IntegerWrite

!! Print to standard output, in our prettyprinting format
function IntegerPrint(handle) &
      bind(C, name='IntegerPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerPrint
end function IntegerPrint

!! Print to standard output, as XML
function IntegerPrintXML(handle) &
      bind(C, name='IntegerPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerPrintXML
end function IntegerPrintXML

!! Print to standard output, as JSON
function IntegerPrintJSON(handle) &
      bind(C, name='IntegerPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerPrintJSON
end function IntegerPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function IntegerLabelHas(handle) &
      bind(C, name='IntegerLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerLabelHas
end function IntegerLabelHas

!! Get
function IntegerLabelGet(handle) &
      bind(C, name='IntegerLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: IntegerLabelGet
end function IntegerLabelGet

!! Set
subroutine IntegerLabelSet(handle, label, labelSize) &
      bind(C, name='IntegerLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine IntegerLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function IntegerValueHas(handle) &
      bind(C, name='IntegerValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerValueHas
end function IntegerValueHas

!! Get
function IntegerValueGet(handle) &
      bind(C, name='IntegerValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerValueGet
end function IntegerValueGet

!! Set
subroutine IntegerValueSet(handle, value, valueSize) &
      bind(C, name='IntegerValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine IntegerValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function IntegerUnitHas(handle) &
      bind(C, name='IntegerUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntegerUnitHas
end function IntegerUnitHas

!! Get
function IntegerUnitGet(handle) &
      bind(C, name='IntegerUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: IntegerUnitGet
end function IntegerUnitGet

!! Set
subroutine IntegerUnitSet(handle, unit, unitSize) &
      bind(C, name='IntegerUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine IntegerUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalInteger
