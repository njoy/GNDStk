
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalFastRegion
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FastRegionDefaultConst() &
      bind(C, name='FastRegionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FastRegionDefaultConst

!! Create, default
function FastRegionDefault() &
      bind(C, name='FastRegionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FastRegionDefault

!! Create, general, const
function FastRegionCreateConst( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='FastRegionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function FastRegionCreateConst

!! Create, general
function FastRegionCreate( &
   XYs1d, &
   regions1d &
) &
      bind(C, name='FastRegionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function FastRegionCreate

!! Assign
subroutine FastRegionAssign(handleLHS, handleRHS) &
      bind(C, name='FastRegionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FastRegionAssign

!! Delete
subroutine FastRegionDelete(handle) &
      bind(C, name='FastRegionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FastRegionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FastRegionRead(handle, filename, filenameSize) &
      bind(C, name='FastRegionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FastRegionRead

!! Write to file
function FastRegionWrite(handle, filename, filenameSize) &
      bind(C, name='FastRegionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FastRegionWrite

!! Print to standard output, in our prettyprinting format
function FastRegionPrint(handle) &
      bind(C, name='FastRegionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FastRegionPrint

!! Print to standard output, as XML
function FastRegionPrintXML(handle) &
      bind(C, name='FastRegionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FastRegionPrintXML

!! Print to standard output, as JSON
function FastRegionPrintJSON(handle) &
      bind(C, name='FastRegionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FastRegionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function FastRegionXYs1dHas(handle) &
      bind(C, name='FastRegionXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FastRegionXYs1dHas

!! Get, const
function FastRegionXYs1dGetConst(handle) &
      bind(C, name='FastRegionXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FastRegionXYs1dGetConst

!! Get
function FastRegionXYs1dGet(handle) &
      bind(C, name='FastRegionXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FastRegionXYs1dGet

!! Set
subroutine FastRegionXYs1dSet(handle, fieldHandle) &
      bind(C, name='FastRegionXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FastRegionXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function FastRegionRegions1dHas(handle) &
      bind(C, name='FastRegionRegions1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FastRegionRegions1dHas

!! Get, const
function FastRegionRegions1dGetConst(handle) &
      bind(C, name='FastRegionRegions1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FastRegionRegions1dGetConst

!! Get
function FastRegionRegions1dGet(handle) &
      bind(C, name='FastRegionRegions1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FastRegionRegions1dGet

!! Set
subroutine FastRegionRegions1dSet(handle, fieldHandle) &
      bind(C, name='FastRegionRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FastRegionRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalFastRegion
