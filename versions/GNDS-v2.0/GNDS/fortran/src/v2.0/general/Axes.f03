
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAxes
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AxesDefaultConst() &
      bind(C, name='AxesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AxesDefaultConst
end function AxesDefaultConst

!! Create, default, non-const
function AxesDefault() &
      bind(C, name='AxesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: AxesDefault
end function AxesDefault

!! Create, general, const
function AxesCreateConst( &
   axis, axisSize, &
   grid, gridSize &
) &
      bind(C, name='AxesCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: axisSize
   type(c_ptr), intent(in) :: axis(axisSize)
   integer(c_size_t), intent(in), value :: gridSize
   type(c_ptr), intent(in) :: grid(gridSize)
   type(c_ptr) :: AxesCreateConst
end function AxesCreateConst

!! Create, general, non-const
function AxesCreate( &
   axis, axisSize, &
   grid, gridSize &
) &
      bind(C, name='AxesCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: axisSize
   type(c_ptr), intent(in) :: axis(axisSize)
   integer(c_size_t), intent(in), value :: gridSize
   type(c_ptr), intent(in) :: grid(gridSize)
   type(c_ptr) :: AxesCreate
end function AxesCreate

!! Assign
subroutine AxesAssign(handleLHS, handleRHS) &
      bind(C, name='AxesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine AxesAssign

!! Delete
subroutine AxesDelete(handle) &
      bind(C, name='AxesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function AxesRead(handle, filename, filenameSize) &
      bind(C, name='AxesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AxesRead
end function AxesRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function AxesWrite(handle, filename, filenameSize) &
      bind(C, name='AxesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: AxesWrite
end function AxesWrite

!! Print to standard output, in our prettyprinting format
function AxesPrint(handle) &
      bind(C, name='AxesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxesPrint
end function AxesPrint

!! Print to standard output, as XML
function AxesPrintXML(handle) &
      bind(C, name='AxesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxesPrintXML
end function AxesPrintXML

!! Print to standard output, as JSON
function AxesPrintJSON(handle) &
      bind(C, name='AxesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxesPrintJSON
end function AxesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: axis
!! -----------------------------------------------------------------------------

!! Has
function AxesAxisHas(handle) &
      bind(C, name='AxesAxisHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxesAxisHas
end function AxesAxisHas

!! Clear
subroutine AxesAxisClear(handle) &
      bind(C, name='AxesAxisClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxesAxisClear

!! Size
function AxesAxisSize(handle) &
      bind(C, name='AxesAxisSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: AxesAxisSize
end function AxesAxisSize

!! Add
subroutine AxesAxisAdd(handle, fieldHandle) &
      bind(C, name='AxesAxisAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisAdd

!! Get, by index \in [0,size), const
function AxesAxisGetConst(handle, index) &
      bind(C, name='AxesAxisGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: AxesAxisGetConst
end function AxesAxisGetConst

!! Get, by index \in [0,size), non-const
function AxesAxisGet(handle, index) &
      bind(C, name='AxesAxisGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: AxesAxisGet
end function AxesAxisGet

!! Set, by index \in [0,size)
subroutine AxesAxisSet(handle, index, fieldHandle) &
      bind(C, name='AxesAxisSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSet

!! ------------------------
!! Re: metadatum index
!! ------------------------

!! Has, by index
function AxesAxisHasByIndex(handle, meta) &
      bind(C, name='AxesAxisHasByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   integer(c_int) :: AxesAxisHasByIndex
end function AxesAxisHasByIndex

!! Get, by index, const
function AxesAxisGetByIndexConst(handle, meta) &
      bind(C, name='AxesAxisGetByIndexConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: AxesAxisGetByIndexConst
end function AxesAxisGetByIndexConst

!! Get, by index, non-const
function AxesAxisGetByIndex(handle, meta) &
      bind(C, name='AxesAxisGetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: AxesAxisGetByIndex
end function AxesAxisGetByIndex

!! Set, by index
subroutine AxesAxisSetByIndex(handle, meta, fieldHandle) &
      bind(C, name='AxesAxisSetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSetByIndex

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function AxesAxisHasByLabel(handle, meta, metaSize) &
      bind(C, name='AxesAxisHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: AxesAxisHasByLabel
end function AxesAxisHasByLabel

!! Get, by label, const
function AxesAxisGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesAxisGetByLabelConst
end function AxesAxisGetByLabelConst

!! Get, by label, non-const
function AxesAxisGetByLabel(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesAxisGetByLabel
end function AxesAxisGetByLabel

!! Set, by label
subroutine AxesAxisSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesAxisSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSetByLabel

!! ------------------------
!! Re: metadatum unit
!! ------------------------

!! Has, by unit
function AxesAxisHasByUnit(handle, meta, metaSize) &
      bind(C, name='AxesAxisHasByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: AxesAxisHasByUnit
end function AxesAxisHasByUnit

!! Get, by unit, const
function AxesAxisGetByUnitConst(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByUnitConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesAxisGetByUnitConst
end function AxesAxisGetByUnitConst

!! Get, by unit, non-const
function AxesAxisGetByUnit(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesAxisGetByUnit
end function AxesAxisGetByUnit

!! Set, by unit
subroutine AxesAxisSetByUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesAxisSetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSetByUnit


!! -----------------------------------------------------------------------------
!! Child: grid
!! -----------------------------------------------------------------------------

!! Has
function AxesGridHas(handle) &
      bind(C, name='AxesGridHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: AxesGridHas
end function AxesGridHas

!! Clear
subroutine AxesGridClear(handle) &
      bind(C, name='AxesGridClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxesGridClear

!! Size
function AxesGridSize(handle) &
      bind(C, name='AxesGridSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: AxesGridSize
end function AxesGridSize

!! Add
subroutine AxesGridAdd(handle, fieldHandle) &
      bind(C, name='AxesGridAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridAdd

!! Get, by index \in [0,size), const
function AxesGridGetConst(handle, index) &
      bind(C, name='AxesGridGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: AxesGridGetConst
end function AxesGridGetConst

!! Get, by index \in [0,size), non-const
function AxesGridGet(handle, index) &
      bind(C, name='AxesGridGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: AxesGridGet
end function AxesGridGet

!! Set, by index \in [0,size)
subroutine AxesGridSet(handle, index, fieldHandle) &
      bind(C, name='AxesGridSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSet

!! ------------------------
!! Re: metadatum index
!! ------------------------

!! Has, by index
function AxesGridHasByIndex(handle, meta) &
      bind(C, name='AxesGridHasByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   integer(c_int) :: AxesGridHasByIndex
end function AxesGridHasByIndex

!! Get, by index, const
function AxesGridGetByIndexConst(handle, meta) &
      bind(C, name='AxesGridGetByIndexConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: AxesGridGetByIndexConst
end function AxesGridGetByIndexConst

!! Get, by index, non-const
function AxesGridGetByIndex(handle, meta) &
      bind(C, name='AxesGridGetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: AxesGridGetByIndex
end function AxesGridGetByIndex

!! Set, by index
subroutine AxesGridSetByIndex(handle, meta, fieldHandle) &
      bind(C, name='AxesGridSetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByIndex

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function AxesGridHasByLabel(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: AxesGridHasByLabel
end function AxesGridHasByLabel

!! Get, by label, const
function AxesGridGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByLabelConst
end function AxesGridGetByLabelConst

!! Get, by label, non-const
function AxesGridGetByLabel(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByLabel
end function AxesGridGetByLabel

!! Set, by label
subroutine AxesGridSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByLabel

!! ------------------------
!! Re: metadatum unit
!! ------------------------

!! Has, by unit
function AxesGridHasByUnit(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: AxesGridHasByUnit
end function AxesGridHasByUnit

!! Get, by unit, const
function AxesGridGetByUnitConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByUnitConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByUnitConst
end function AxesGridGetByUnitConst

!! Get, by unit, non-const
function AxesGridGetByUnit(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByUnit
end function AxesGridGetByUnit

!! Set, by unit
subroutine AxesGridSetByUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByUnit

!! ------------------------
!! Re: metadatum style
!! ------------------------

!! Has, by style
function AxesGridHasByStyle(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByStyle')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: AxesGridHasByStyle
end function AxesGridHasByStyle

!! Get, by style, const
function AxesGridGetByStyleConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByStyleConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByStyleConst
end function AxesGridGetByStyleConst

!! Get, by style, non-const
function AxesGridGetByStyle(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByStyle')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByStyle
end function AxesGridGetByStyle

!! Set, by style
subroutine AxesGridSetByStyle(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByStyle')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByStyle

!! ------------------------
!! Re: metadatum interpolation
!! ------------------------

!! Has, by interpolation
function AxesGridHasByInterpolation(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: AxesGridHasByInterpolation
end function AxesGridHasByInterpolation

!! Get, by interpolation, const
function AxesGridGetByInterpolationConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByInterpolationConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByInterpolationConst
end function AxesGridGetByInterpolationConst

!! Get, by interpolation, non-const
function AxesGridGetByInterpolation(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: AxesGridGetByInterpolation
end function AxesGridGetByInterpolation

!! Set, by interpolation
subroutine AxesGridSetByInterpolation(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByInterpolation


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAxes
