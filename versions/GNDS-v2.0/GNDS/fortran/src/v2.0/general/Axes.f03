
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAxes
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AxesDefaultConst() &
      bind(C, name='AxesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AxesDefaultConst

!! Create, default
function AxesDefault() &
      bind(C, name='AxesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AxesDefault

!! Create, general, const
function AxesCreateConst( &
   axis, axisSize, &
   grid, gridSize &
) &
      bind(C, name='AxesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: axisSize
   type(c_ptr) :: axis(axisSize)
   integer(c_size_t), value :: gridSize
   type(c_ptr) :: grid(gridSize)
   type(c_ptr) :: handle
end function AxesCreateConst

!! Create, general
function AxesCreate( &
   axis, axisSize, &
   grid, gridSize &
) &
      bind(C, name='AxesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: axisSize
   type(c_ptr) :: axis(axisSize)
   integer(c_size_t), value :: gridSize
   type(c_ptr) :: grid(gridSize)
   type(c_ptr) :: handle
end function AxesCreate

!! Assign
subroutine AxesAssign(handleLHS, handleRHS) &
      bind(C, name='AxesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AxesAssign

!! Delete
subroutine AxesDelete(handle) &
      bind(C, name='AxesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AxesRead(handle, filename, filenameSize) &
      bind(C, name='AxesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AxesRead

!! Write to file
function AxesWrite(handle, filename, filenameSize) &
      bind(C, name='AxesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AxesWrite

!! Print to standard output, in our prettyprinting format
function AxesPrint(handle) &
      bind(C, name='AxesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AxesPrint

!! Print to standard output, as XML
function AxesPrintXML(handle) &
      bind(C, name='AxesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AxesPrintXML

!! Print to standard output, as JSON
function AxesPrintJSON(handle) &
      bind(C, name='AxesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AxesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: axis
!! -----------------------------------------------------------------------------

!! Has
function AxesAxisHas(handle) &
      bind(C, name='AxesAxisHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AxesAxisHas

!! Clear
subroutine AxesAxisClear(handle) &
      bind(C, name='AxesAxisClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxesAxisClear

!! Size
function AxesAxisSize(handle) &
      bind(C, name='AxesAxisSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function AxesAxisSize

!! Add
subroutine AxesAxisAdd(handle, fieldHandle) &
      bind(C, name='AxesAxisAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisAdd

!! Get, by index \in [0,size), const
function AxesAxisGetConst(handle, index) &
      bind(C, name='AxesAxisGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AxesAxisGetConst

!! Get, by index \in [0,size)
function AxesAxisGet(handle, index) &
      bind(C, name='AxesAxisGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AxesAxisGet

!! Set, by index \in [0,size)
subroutine AxesAxisSet(handle, index, fieldHandle) &
      bind(C, name='AxesAxisSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSet

!! ------------------------
!! Re: metadatum index
!! ------------------------

!! Has, by index
function AxesAxisHasByIndex(handle, meta) &
      bind(C, name='AxesAxisHasByIndex') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function AxesAxisHasByIndex

!! Get, by index, const
function AxesAxisGetByIndexConst(handle, meta) &
      bind(C, name='AxesAxisGetByIndexConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AxesAxisGetByIndexConst

!! Get, by index
function AxesAxisGetByIndex(handle, meta) &
      bind(C, name='AxesAxisGetByIndex') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AxesAxisGetByIndex

!! Set, by index
subroutine AxesAxisSetByIndex(handle, meta, fieldHandle) &
      bind(C, name='AxesAxisSetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSetByIndex

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function AxesAxisHasByLabel(handle, meta, metaSize) &
      bind(C, name='AxesAxisHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AxesAxisHasByLabel

!! Get, by label, const
function AxesAxisGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesAxisGetByLabelConst

!! Get, by label
function AxesAxisGetByLabel(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesAxisGetByLabel

!! Set, by label
subroutine AxesAxisSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesAxisSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSetByLabel

!! ------------------------
!! Re: metadatum unit
!! ------------------------

!! Has, by unit
function AxesAxisHasByUnit(handle, meta, metaSize) &
      bind(C, name='AxesAxisHasByUnit') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AxesAxisHasByUnit

!! Get, by unit, const
function AxesAxisGetByUnitConst(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByUnitConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesAxisGetByUnitConst

!! Get, by unit
function AxesAxisGetByUnit(handle, meta, metaSize) &
      bind(C, name='AxesAxisGetByUnit') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesAxisGetByUnit

!! Set, by unit
subroutine AxesAxisSetByUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesAxisSetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesAxisSetByUnit


!! -----------------------------------------------------------------------------
!! Child: grid
!! -----------------------------------------------------------------------------

!! Has
function AxesGridHas(handle) &
      bind(C, name='AxesGridHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AxesGridHas

!! Clear
subroutine AxesGridClear(handle) &
      bind(C, name='AxesGridClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AxesGridClear

!! Size
function AxesGridSize(handle) &
      bind(C, name='AxesGridSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function AxesGridSize

!! Add
subroutine AxesGridAdd(handle, fieldHandle) &
      bind(C, name='AxesGridAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridAdd

!! Get, by index \in [0,size), const
function AxesGridGetConst(handle, index) &
      bind(C, name='AxesGridGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AxesGridGetConst

!! Get, by index \in [0,size)
function AxesGridGet(handle, index) &
      bind(C, name='AxesGridGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AxesGridGet

!! Set, by index \in [0,size)
subroutine AxesGridSet(handle, index, fieldHandle) &
      bind(C, name='AxesGridSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSet

!! ------------------------
!! Re: metadatum index
!! ------------------------

!! Has, by index
function AxesGridHasByIndex(handle, meta) &
      bind(C, name='AxesGridHasByIndex') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function AxesGridHasByIndex

!! Get, by index, const
function AxesGridGetByIndexConst(handle, meta) &
      bind(C, name='AxesGridGetByIndexConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AxesGridGetByIndexConst

!! Get, by index
function AxesGridGetByIndex(handle, meta) &
      bind(C, name='AxesGridGetByIndex') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AxesGridGetByIndex

!! Set, by index
subroutine AxesGridSetByIndex(handle, meta, fieldHandle) &
      bind(C, name='AxesGridSetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByIndex

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function AxesGridHasByLabel(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AxesGridHasByLabel

!! Get, by label, const
function AxesGridGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByLabelConst

!! Get, by label
function AxesGridGetByLabel(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByLabel

!! Set, by label
subroutine AxesGridSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByLabel

!! ------------------------
!! Re: metadatum unit
!! ------------------------

!! Has, by unit
function AxesGridHasByUnit(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByUnit') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AxesGridHasByUnit

!! Get, by unit, const
function AxesGridGetByUnitConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByUnitConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByUnitConst

!! Get, by unit
function AxesGridGetByUnit(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByUnit') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByUnit

!! Set, by unit
subroutine AxesGridSetByUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByUnit

!! ------------------------
!! Re: metadatum style
!! ------------------------

!! Has, by style
function AxesGridHasByStyle(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByStyle') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AxesGridHasByStyle

!! Get, by style, const
function AxesGridGetByStyleConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByStyleConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByStyleConst

!! Get, by style
function AxesGridGetByStyle(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByStyle') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByStyle

!! Set, by style
subroutine AxesGridSetByStyle(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByStyle')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByStyle

!! ------------------------
!! Re: metadatum interpolation
!! ------------------------

!! Has, by interpolation
function AxesGridHasByInterpolation(handle, meta, metaSize) &
      bind(C, name='AxesGridHasByInterpolation') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AxesGridHasByInterpolation

!! Get, by interpolation, const
function AxesGridGetByInterpolationConst(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByInterpolationConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByInterpolationConst

!! Get, by interpolation
function AxesGridGetByInterpolation(handle, meta, metaSize) &
      bind(C, name='AxesGridGetByInterpolation') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AxesGridGetByInterpolation

!! Set, by interpolation
subroutine AxesGridSetByInterpolation(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AxesGridSetByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AxesGridSetByInterpolation


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAxes
