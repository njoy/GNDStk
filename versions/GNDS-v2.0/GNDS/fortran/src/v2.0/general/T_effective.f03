
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalT_effective
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function T_effectiveDefaultConst() &
      bind(C, name='T_effectiveDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function T_effectiveDefaultConst

!! Create, default
function T_effectiveDefault() &
      bind(C, name='T_effectiveDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function T_effectiveDefault

!! Create, general, const
function T_effectiveCreateConst( &
   XYs1d &
) &
      bind(C, name='T_effectiveCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function T_effectiveCreateConst

!! Create, general
function T_effectiveCreate( &
   XYs1d &
) &
      bind(C, name='T_effectiveCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function T_effectiveCreate

!! Assign
subroutine T_effectiveAssign(handleLHS, handleRHS) &
      bind(C, name='T_effectiveAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine T_effectiveAssign

!! Delete
subroutine T_effectiveDelete(handle) &
      bind(C, name='T_effectiveDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine T_effectiveDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function T_effectiveRead(handle, filename, filenameSize) &
      bind(C, name='T_effectiveRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function T_effectiveRead

!! Write to file
function T_effectiveWrite(handle, filename, filenameSize) &
      bind(C, name='T_effectiveWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function T_effectiveWrite

!! Print to standard output, in our prettyprinting format
function T_effectivePrint(handle) &
      bind(C, name='T_effectivePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function T_effectivePrint

!! Print to standard output, as XML
function T_effectivePrintXML(handle) &
      bind(C, name='T_effectivePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function T_effectivePrintXML

!! Print to standard output, as JSON
function T_effectivePrintJSON(handle) &
      bind(C, name='T_effectivePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function T_effectivePrintJSON


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function T_effectiveXYs1dHas(handle) &
      bind(C, name='T_effectiveXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function T_effectiveXYs1dHas

!! Get, const
function T_effectiveXYs1dGetConst(handle) &
      bind(C, name='T_effectiveXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function T_effectiveXYs1dGetConst

!! Get
function T_effectiveXYs1dGet(handle) &
      bind(C, name='T_effectiveXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function T_effectiveXYs1dGet

!! Set
subroutine T_effectiveXYs1dSet(handle, fieldHandle) &
      bind(C, name='T_effectiveXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine T_effectiveXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalT_effective
