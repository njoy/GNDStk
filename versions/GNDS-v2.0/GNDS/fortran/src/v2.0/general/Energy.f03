
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function EnergyDefaultConst() &
      bind(C, name='EnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EnergyDefaultConst

!! Create, default
function EnergyDefault() &
      bind(C, name='EnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function EnergyDefault

!! Create, general, const
function EnergyCreateConst( &
   value, &
   unit, &
   Double, &
   uncertainty, &
   NBodyPhaseSpace, &
   primaryGamma, &
   discreteGamma, &
   XYs2d, &
   generalEvaporation, &
   evaporation, &
   weightedFunctionals, &
   simpleMaxwellianFission, &
   MadlandNix, &
   unitSize &
) &
      bind(C, name='EnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), value :: Double
   type(c_ptr), value :: uncertainty
   type(c_ptr), value :: NBodyPhaseSpace
   type(c_ptr), value :: primaryGamma
   type(c_ptr), value :: discreteGamma
   type(c_ptr), value :: XYs2d
   type(c_ptr), value :: generalEvaporation
   type(c_ptr), value :: evaporation
   type(c_ptr), value :: weightedFunctionals
   type(c_ptr), value :: simpleMaxwellianFission
   type(c_ptr), value :: MadlandNix
   type(c_ptr) :: handle
end function EnergyCreateConst

!! Create, general
function EnergyCreate( &
   value, &
   unit, &
   Double, &
   uncertainty, &
   NBodyPhaseSpace, &
   primaryGamma, &
   discreteGamma, &
   XYs2d, &
   generalEvaporation, &
   evaporation, &
   weightedFunctionals, &
   simpleMaxwellianFission, &
   MadlandNix, &
   unitSize &
) &
      bind(C, name='EnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), value :: Double
   type(c_ptr), value :: uncertainty
   type(c_ptr), value :: NBodyPhaseSpace
   type(c_ptr), value :: primaryGamma
   type(c_ptr), value :: discreteGamma
   type(c_ptr), value :: XYs2d
   type(c_ptr), value :: generalEvaporation
   type(c_ptr), value :: evaporation
   type(c_ptr), value :: weightedFunctionals
   type(c_ptr), value :: simpleMaxwellianFission
   type(c_ptr), value :: MadlandNix
   type(c_ptr) :: handle
end function EnergyCreate

!! Assign
subroutine EnergyAssign(handleLHS, handleRHS) &
      bind(C, name='EnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine EnergyAssign

!! Delete
subroutine EnergyDelete(handle) &
      bind(C, name='EnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine EnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function EnergyRead(handle, filename, filenameSize) &
      bind(C, name='EnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EnergyRead

!! Write to file
function EnergyWrite(handle, filename, filenameSize) &
      bind(C, name='EnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function EnergyWrite

!! Print to standard output, in our prettyprinting format
function EnergyPrint(handle) &
      bind(C, name='EnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EnergyPrint

!! Print to standard output, as XML
function EnergyPrintXML(handle) &
      bind(C, name='EnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EnergyPrintXML

!! Print to standard output, as JSON
function EnergyPrintJSON(handle) &
      bind(C, name='EnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function EnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function EnergyValueHas(handle) &
      bind(C, name='EnergyValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyValueHas

!! Get
function EnergyValueGet(handle) &
      bind(C, name='EnergyValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function EnergyValueGet

!! Set
subroutine EnergyValueSet(handle, value, valueSize) &
      bind(C, name='EnergyValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine EnergyValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function EnergyUnitHas(handle) &
      bind(C, name='EnergyUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyUnitHas

!! Get
function EnergyUnitGet(handle) &
      bind(C, name='EnergyUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function EnergyUnitGet

!! Set
subroutine EnergyUnitSet(handle, unit, unitSize) &
      bind(C, name='EnergyUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine EnergyUnitSet


!! -----------------------------------------------------------------------------
!! Child: Double
!! -----------------------------------------------------------------------------

!! Has
function EnergyDoubleHas(handle) &
      bind(C, name='EnergyDoubleHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyDoubleHas

!! Get, const
function EnergyDoubleGetConst(handle) &
      bind(C, name='EnergyDoubleGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyDoubleGetConst

!! Get
function EnergyDoubleGet(handle) &
      bind(C, name='EnergyDoubleGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyDoubleGet

!! Set
subroutine EnergyDoubleSet(handle, fieldHandle) &
      bind(C, name='EnergyDoubleSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyDoubleSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function EnergyUncertaintyHas(handle) &
      bind(C, name='EnergyUncertaintyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyUncertaintyHas

!! Get, const
function EnergyUncertaintyGetConst(handle) &
      bind(C, name='EnergyUncertaintyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyUncertaintyGetConst

!! Get
function EnergyUncertaintyGet(handle) &
      bind(C, name='EnergyUncertaintyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyUncertaintyGet

!! Set
subroutine EnergyUncertaintySet(handle, fieldHandle) &
      bind(C, name='EnergyUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyUncertaintySet


!! -----------------------------------------------------------------------------
!! Child: NBodyPhaseSpace
!! -----------------------------------------------------------------------------

!! Has
function EnergyNBodyPhaseSpaceHas(handle) &
      bind(C, name='EnergyNBodyPhaseSpaceHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyNBodyPhaseSpaceHas

!! Get, const
function EnergyNBodyPhaseSpaceGetConst(handle) &
      bind(C, name='EnergyNBodyPhaseSpaceGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyNBodyPhaseSpaceGetConst

!! Get
function EnergyNBodyPhaseSpaceGet(handle) &
      bind(C, name='EnergyNBodyPhaseSpaceGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyNBodyPhaseSpaceGet

!! Set
subroutine EnergyNBodyPhaseSpaceSet(handle, fieldHandle) &
      bind(C, name='EnergyNBodyPhaseSpaceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyNBodyPhaseSpaceSet


!! -----------------------------------------------------------------------------
!! Child: primaryGamma
!! -----------------------------------------------------------------------------

!! Has
function EnergyPrimaryGammaHas(handle) &
      bind(C, name='EnergyPrimaryGammaHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyPrimaryGammaHas

!! Get, const
function EnergyPrimaryGammaGetConst(handle) &
      bind(C, name='EnergyPrimaryGammaGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyPrimaryGammaGetConst

!! Get
function EnergyPrimaryGammaGet(handle) &
      bind(C, name='EnergyPrimaryGammaGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyPrimaryGammaGet

!! Set
subroutine EnergyPrimaryGammaSet(handle, fieldHandle) &
      bind(C, name='EnergyPrimaryGammaSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyPrimaryGammaSet


!! -----------------------------------------------------------------------------
!! Child: discreteGamma
!! -----------------------------------------------------------------------------

!! Has
function EnergyDiscreteGammaHas(handle) &
      bind(C, name='EnergyDiscreteGammaHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyDiscreteGammaHas

!! Get, const
function EnergyDiscreteGammaGetConst(handle) &
      bind(C, name='EnergyDiscreteGammaGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyDiscreteGammaGetConst

!! Get
function EnergyDiscreteGammaGet(handle) &
      bind(C, name='EnergyDiscreteGammaGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyDiscreteGammaGet

!! Set
subroutine EnergyDiscreteGammaSet(handle, fieldHandle) &
      bind(C, name='EnergyDiscreteGammaSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyDiscreteGammaSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function EnergyXYs2dHas(handle) &
      bind(C, name='EnergyXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyXYs2dHas

!! Get, const
function EnergyXYs2dGetConst(handle) &
      bind(C, name='EnergyXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyXYs2dGetConst

!! Get
function EnergyXYs2dGet(handle) &
      bind(C, name='EnergyXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyXYs2dGet

!! Set
subroutine EnergyXYs2dSet(handle, fieldHandle) &
      bind(C, name='EnergyXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyXYs2dSet


!! -----------------------------------------------------------------------------
!! Child: generalEvaporation
!! -----------------------------------------------------------------------------

!! Has
function EnergyGeneralEvaporationHas(handle) &
      bind(C, name='EnergyGeneralEvaporationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyGeneralEvaporationHas

!! Get, const
function EnergyGeneralEvaporationGetConst(handle) &
      bind(C, name='EnergyGeneralEvaporationGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyGeneralEvaporationGetConst

!! Get
function EnergyGeneralEvaporationGet(handle) &
      bind(C, name='EnergyGeneralEvaporationGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyGeneralEvaporationGet

!! Set
subroutine EnergyGeneralEvaporationSet(handle, fieldHandle) &
      bind(C, name='EnergyGeneralEvaporationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyGeneralEvaporationSet


!! -----------------------------------------------------------------------------
!! Child: evaporation
!! -----------------------------------------------------------------------------

!! Has
function EnergyEvaporationHas(handle) &
      bind(C, name='EnergyEvaporationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyEvaporationHas

!! Get, const
function EnergyEvaporationGetConst(handle) &
      bind(C, name='EnergyEvaporationGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyEvaporationGetConst

!! Get
function EnergyEvaporationGet(handle) &
      bind(C, name='EnergyEvaporationGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyEvaporationGet

!! Set
subroutine EnergyEvaporationSet(handle, fieldHandle) &
      bind(C, name='EnergyEvaporationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyEvaporationSet


!! -----------------------------------------------------------------------------
!! Child: weightedFunctionals
!! -----------------------------------------------------------------------------

!! Has
function EnergyWeightedFunctionalsHas(handle) &
      bind(C, name='EnergyWeightedFunctionalsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyWeightedFunctionalsHas

!! Get, const
function EnergyWeightedFunctionalsGetConst(handle) &
      bind(C, name='EnergyWeightedFunctionalsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyWeightedFunctionalsGetConst

!! Get
function EnergyWeightedFunctionalsGet(handle) &
      bind(C, name='EnergyWeightedFunctionalsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyWeightedFunctionalsGet

!! Set
subroutine EnergyWeightedFunctionalsSet(handle, fieldHandle) &
      bind(C, name='EnergyWeightedFunctionalsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyWeightedFunctionalsSet


!! -----------------------------------------------------------------------------
!! Child: simpleMaxwellianFission
!! -----------------------------------------------------------------------------

!! Has
function EnergySimpleMaxwellianFissionHas(handle) &
      bind(C, name='EnergySimpleMaxwellianFissionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergySimpleMaxwellianFissionHas

!! Get, const
function EnergySimpleMaxwellianFissionGetConst(handle) &
      bind(C, name='EnergySimpleMaxwellianFissionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergySimpleMaxwellianFissionGetConst

!! Get
function EnergySimpleMaxwellianFissionGet(handle) &
      bind(C, name='EnergySimpleMaxwellianFissionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergySimpleMaxwellianFissionGet

!! Set
subroutine EnergySimpleMaxwellianFissionSet(handle, fieldHandle) &
      bind(C, name='EnergySimpleMaxwellianFissionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergySimpleMaxwellianFissionSet


!! -----------------------------------------------------------------------------
!! Child: MadlandNix
!! -----------------------------------------------------------------------------

!! Has
function EnergyMadlandNixHas(handle) &
      bind(C, name='EnergyMadlandNixHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function EnergyMadlandNixHas

!! Get, const
function EnergyMadlandNixGetConst(handle) &
      bind(C, name='EnergyMadlandNixGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyMadlandNixGetConst

!! Get
function EnergyMadlandNixGet(handle) &
      bind(C, name='EnergyMadlandNixGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function EnergyMadlandNixGet

!! Set
subroutine EnergyMadlandNixSet(handle, fieldHandle) &
      bind(C, name='EnergyMadlandNixSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine EnergyMadlandNixSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalEnergy
