
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBoundAtomCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BoundAtomCrossSectionDefaultConst() &
      bind(C, name='BoundAtomCrossSectionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BoundAtomCrossSectionDefaultConst
end function BoundAtomCrossSectionDefaultConst

!! Create, default, non-const
function BoundAtomCrossSectionDefault() &
      bind(C, name='BoundAtomCrossSectionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BoundAtomCrossSectionDefault
end function BoundAtomCrossSectionDefault

!! Create, general, const
function BoundAtomCrossSectionCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='BoundAtomCrossSectionCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: BoundAtomCrossSectionCreateConst
end function BoundAtomCrossSectionCreateConst

!! Create, general, non-const
function BoundAtomCrossSectionCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='BoundAtomCrossSectionCreate')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: BoundAtomCrossSectionCreate
end function BoundAtomCrossSectionCreate

!! Assign
subroutine BoundAtomCrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='BoundAtomCrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine BoundAtomCrossSectionAssign

!! Delete
subroutine BoundAtomCrossSectionDelete(handle) &
      bind(C, name='BoundAtomCrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BoundAtomCrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function BoundAtomCrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='BoundAtomCrossSectionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BoundAtomCrossSectionRead
end function BoundAtomCrossSectionRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function BoundAtomCrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='BoundAtomCrossSectionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BoundAtomCrossSectionWrite
end function BoundAtomCrossSectionWrite

!! Print to standard output, in our prettyprinting format
function BoundAtomCrossSectionPrint(handle) &
      bind(C, name='BoundAtomCrossSectionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BoundAtomCrossSectionPrint
end function BoundAtomCrossSectionPrint

!! Print to standard output, as XML
function BoundAtomCrossSectionPrintXML(handle) &
      bind(C, name='BoundAtomCrossSectionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BoundAtomCrossSectionPrintXML
end function BoundAtomCrossSectionPrintXML

!! Print to standard output, as JSON
function BoundAtomCrossSectionPrintJSON(handle) &
      bind(C, name='BoundAtomCrossSectionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BoundAtomCrossSectionPrintJSON
end function BoundAtomCrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function BoundAtomCrossSectionValueHas(handle) &
      bind(C, name='BoundAtomCrossSectionValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BoundAtomCrossSectionValueHas
end function BoundAtomCrossSectionValueHas

!! Get
function BoundAtomCrossSectionValueGet(handle) &
      bind(C, name='BoundAtomCrossSectionValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: BoundAtomCrossSectionValueGet
end function BoundAtomCrossSectionValueGet

!! Set
subroutine BoundAtomCrossSectionValueSet(handle, value) &
      bind(C, name='BoundAtomCrossSectionValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: value
end subroutine BoundAtomCrossSectionValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function BoundAtomCrossSectionUnitHas(handle) &
      bind(C, name='BoundAtomCrossSectionUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BoundAtomCrossSectionUnitHas
end function BoundAtomCrossSectionUnitHas

!! Get
function BoundAtomCrossSectionUnitGet(handle) &
      bind(C, name='BoundAtomCrossSectionUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BoundAtomCrossSectionUnitGet
end function BoundAtomCrossSectionUnitGet

!! Set
subroutine BoundAtomCrossSectionUnitSet(handle, unit, unitSize) &
      bind(C, name='BoundAtomCrossSectionUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine BoundAtomCrossSectionUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBoundAtomCrossSection
