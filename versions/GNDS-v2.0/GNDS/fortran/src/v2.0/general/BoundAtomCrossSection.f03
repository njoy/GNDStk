
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBoundAtomCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BoundAtomCrossSectionDefaultConst() &
      bind(C, name='BoundAtomCrossSectionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function BoundAtomCrossSectionDefaultConst

!! Create, default
function BoundAtomCrossSectionDefault() &
      bind(C, name='BoundAtomCrossSectionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function BoundAtomCrossSectionDefault

!! Create, general, const
function BoundAtomCrossSectionCreateConst( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='BoundAtomCrossSectionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function BoundAtomCrossSectionCreateConst

!! Create, general
function BoundAtomCrossSectionCreate( &
   value, &
   unit, &
   unitSize &
) &
      bind(C, name='BoundAtomCrossSectionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr) :: handle
end function BoundAtomCrossSectionCreate

!! Assign
subroutine BoundAtomCrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='BoundAtomCrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine BoundAtomCrossSectionAssign

!! Delete
subroutine BoundAtomCrossSectionDelete(handle) &
      bind(C, name='BoundAtomCrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BoundAtomCrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function BoundAtomCrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='BoundAtomCrossSectionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function BoundAtomCrossSectionRead

!! Write to file
function BoundAtomCrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='BoundAtomCrossSectionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function BoundAtomCrossSectionWrite

!! Print to standard output, in our prettyprinting format
function BoundAtomCrossSectionPrint(handle) &
      bind(C, name='BoundAtomCrossSectionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function BoundAtomCrossSectionPrint

!! Print to standard output, as XML
function BoundAtomCrossSectionPrintXML(handle) &
      bind(C, name='BoundAtomCrossSectionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function BoundAtomCrossSectionPrintXML

!! Print to standard output, as JSON
function BoundAtomCrossSectionPrintJSON(handle) &
      bind(C, name='BoundAtomCrossSectionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function BoundAtomCrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function BoundAtomCrossSectionValueHas(handle) &
      bind(C, name='BoundAtomCrossSectionValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function BoundAtomCrossSectionValueHas

!! Get
function BoundAtomCrossSectionValueGet(handle) &
      bind(C, name='BoundAtomCrossSectionValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function BoundAtomCrossSectionValueGet

!! Set
subroutine BoundAtomCrossSectionValueSet(handle, value, valueSize) &
      bind(C, name='BoundAtomCrossSectionValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine BoundAtomCrossSectionValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function BoundAtomCrossSectionUnitHas(handle) &
      bind(C, name='BoundAtomCrossSectionUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function BoundAtomCrossSectionUnitHas

!! Get
function BoundAtomCrossSectionUnitGet(handle) &
      bind(C, name='BoundAtomCrossSectionUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function BoundAtomCrossSectionUnitGet

!! Set
subroutine BoundAtomCrossSectionUnitSet(handle, unit, unitSize) &
      bind(C, name='BoundAtomCrossSectionUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine BoundAtomCrossSectionUnitSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBoundAtomCrossSection
