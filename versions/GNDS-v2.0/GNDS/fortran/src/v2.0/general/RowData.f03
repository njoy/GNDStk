
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalRowData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function RowDataDefaultConst() &
      bind(C, name='RowDataDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: RowDataDefaultConst
end function RowDataDefaultConst

!! Create, default
function RowDataDefault() &
      bind(C, name='RowDataDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: RowDataDefault
end function RowDataDefault

!! Create, general, const
function RowDataCreateConst( &
   ENDF_MFMT, &
   dimension, &
   href, &
   slices, &
   ENDF_MFMTSize, &
   hrefSize &
) &
      bind(C, name='RowDataCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
   integer(c_int), intent(in), value :: dimension
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), intent(in), value :: slices
   type(c_ptr) :: RowDataCreateConst
end function RowDataCreateConst

!! Create, general
function RowDataCreate( &
   ENDF_MFMT, &
   dimension, &
   href, &
   slices, &
   ENDF_MFMTSize, &
   hrefSize &
) &
      bind(C, name='RowDataCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
   integer(c_int), intent(in), value :: dimension
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), intent(in), value :: slices
   type(c_ptr) :: RowDataCreate
end function RowDataCreate

!! Assign
subroutine RowDataAssign(handleLHS, handleRHS) &
      bind(C, name='RowDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine RowDataAssign

!! Delete
subroutine RowDataDelete(handle) &
      bind(C, name='RowDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine RowDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function RowDataRead(handle, filename, filenameSize) &
      bind(C, name='RowDataRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: RowDataRead
end function RowDataRead

!! Write to file
function RowDataWrite(handle, filename, filenameSize) &
      bind(C, name='RowDataWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: RowDataWrite
end function RowDataWrite

!! Print to standard output, in our prettyprinting format
function RowDataPrint(handle) &
      bind(C, name='RowDataPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataPrint
end function RowDataPrint

!! Print to standard output, as XML
function RowDataPrintXML(handle) &
      bind(C, name='RowDataPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataPrintXML
end function RowDataPrintXML

!! Print to standard output, as JSON
function RowDataPrintJSON(handle) &
      bind(C, name='RowDataPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataPrintJSON
end function RowDataPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: ENDF_MFMT
!! -----------------------------------------------------------------------------

!! Has
function RowDataENDFMFMTHas(handle) &
      bind(C, name='RowDataENDFMFMTHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataENDFMFMTHas
end function RowDataENDFMFMTHas

!! Get
function RowDataENDFMFMTGet(handle) &
      bind(C, name='RowDataENDFMFMTGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: RowDataENDFMFMTGet
end function RowDataENDFMFMTGet

!! Set
subroutine RowDataENDFMFMTSet(handle, ENDF_MFMT, ENDF_MFMTSize) &
      bind(C, name='RowDataENDFMFMTSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: ENDF_MFMTSize
   character(c_char), intent(in) :: ENDF_MFMT(ENDF_MFMTSize)
end subroutine RowDataENDFMFMTSet


!! -----------------------------------------------------------------------------
!! Metadatum: dimension
!! -----------------------------------------------------------------------------

!! Has
function RowDataDimensionHas(handle) &
      bind(C, name='RowDataDimensionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataDimensionHas
end function RowDataDimensionHas

!! Get
function RowDataDimensionGet(handle) &
      bind(C, name='RowDataDimensionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataDimensionGet
end function RowDataDimensionGet

!! Set
subroutine RowDataDimensionSet(handle, dimension) &
      bind(C, name='RowDataDimensionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: dimension
end subroutine RowDataDimensionSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function RowDataHrefHas(handle) &
      bind(C, name='RowDataHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataHrefHas
end function RowDataHrefHas

!! Get
function RowDataHrefGet(handle) &
      bind(C, name='RowDataHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: RowDataHrefGet
end function RowDataHrefGet

!! Set
subroutine RowDataHrefSet(handle, href, hrefSize) &
      bind(C, name='RowDataHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine RowDataHrefSet


!! -----------------------------------------------------------------------------
!! Child: slices
!! -----------------------------------------------------------------------------

!! Has
function RowDataSlicesHas(handle) &
      bind(C, name='RowDataSlicesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: RowDataSlicesHas
end function RowDataSlicesHas

!! Get, const
function RowDataSlicesGetConst(handle) &
      bind(C, name='RowDataSlicesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: RowDataSlicesGetConst
end function RowDataSlicesGetConst

!! Get
function RowDataSlicesGet(handle) &
      bind(C, name='RowDataSlicesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: RowDataSlicesGet
end function RowDataSlicesGet

!! Set
subroutine RowDataSlicesSet(handle, fieldHandle) &
      bind(C, name='RowDataSlicesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine RowDataSlicesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalRowData
