
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCovarianceSections
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CovarianceSectionsDefaultConst() &
      bind(C, name='CovarianceSectionsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceSectionsDefaultConst

!! Create, default
function CovarianceSectionsDefault() &
      bind(C, name='CovarianceSectionsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceSectionsDefault

!! Create, general, const
function CovarianceSectionsCreateConst( &
   covarianceSection, covarianceSectionSize &
) &
      bind(C, name='CovarianceSectionsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: covarianceSectionSize
   type(c_ptr) :: covarianceSection(covarianceSectionSize)
   type(c_ptr) :: handle
end function CovarianceSectionsCreateConst

!! Create, general
function CovarianceSectionsCreate( &
   covarianceSection, covarianceSectionSize &
) &
      bind(C, name='CovarianceSectionsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: covarianceSectionSize
   type(c_ptr) :: covarianceSection(covarianceSectionSize)
   type(c_ptr) :: handle
end function CovarianceSectionsCreate

!! Assign
subroutine CovarianceSectionsAssign(handleLHS, handleRHS) &
      bind(C, name='CovarianceSectionsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CovarianceSectionsAssign

!! Delete
subroutine CovarianceSectionsDelete(handle) &
      bind(C, name='CovarianceSectionsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceSectionsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CovarianceSectionsRead(handle, filename, filenameSize) &
      bind(C, name='CovarianceSectionsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceSectionsRead

!! Write to file
function CovarianceSectionsWrite(handle, filename, filenameSize) &
      bind(C, name='CovarianceSectionsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceSectionsWrite

!! Print to standard output, in our prettyprinting format
function CovarianceSectionsPrint(handle) &
      bind(C, name='CovarianceSectionsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSectionsPrint

!! Print to standard output, as XML
function CovarianceSectionsPrintXML(handle) &
      bind(C, name='CovarianceSectionsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSectionsPrintXML

!! Print to standard output, as JSON
function CovarianceSectionsPrintJSON(handle) &
      bind(C, name='CovarianceSectionsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSectionsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: covarianceSection
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionsCovarianceSectionHas(handle) &
      bind(C, name='CovarianceSectionsCovarianceSectionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionsCovarianceSectionHas

!! Clear
subroutine CovarianceSectionsCovarianceSectionClear(handle) &
      bind(C, name='CovarianceSectionsCovarianceSectionClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceSectionsCovarianceSectionClear

!! Size
function CovarianceSectionsCovarianceSectionSize(handle) &
      bind(C, name='CovarianceSectionsCovarianceSectionSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function CovarianceSectionsCovarianceSectionSize

!! Add
subroutine CovarianceSectionsCovarianceSectionAdd(handle, fieldHandle) &
      bind(C, name='CovarianceSectionsCovarianceSectionAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionsCovarianceSectionAdd

!! Get, by index \in [0,size), const
function CovarianceSectionsCovarianceSectionGetConst(handle, index) &
      bind(C, name='CovarianceSectionsCovarianceSectionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function CovarianceSectionsCovarianceSectionGetConst

!! Get, by index \in [0,size)
function CovarianceSectionsCovarianceSectionGet(handle, index) &
      bind(C, name='CovarianceSectionsCovarianceSectionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function CovarianceSectionsCovarianceSectionGet

!! Set, by index \in [0,size)
subroutine CovarianceSectionsCovarianceSectionSet(handle, index, fieldHandle) &
      bind(C, name='CovarianceSectionsCovarianceSectionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionsCovarianceSectionSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function CovarianceSectionsCovarianceSectionHasByLabel(handle, meta, metaSize) &
      bind(C, name='CovarianceSectionsCovarianceSectionHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function CovarianceSectionsCovarianceSectionHasByLabel

!! Get, by label, const
function CovarianceSectionsCovarianceSectionGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='CovarianceSectionsCovarianceSectionGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function CovarianceSectionsCovarianceSectionGetByLabelConst

!! Get, by label
function CovarianceSectionsCovarianceSectionGetByLabel(handle, meta, metaSize) &
      bind(C, name='CovarianceSectionsCovarianceSectionGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function CovarianceSectionsCovarianceSectionGetByLabel

!! Set, by label
subroutine CovarianceSectionsCovarianceSectionSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='CovarianceSectionsCovarianceSectionSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionsCovarianceSectionSetByLabel

!! ------------------------
!! Re: metadatum crossTerm
!! ------------------------

!! Has, by crossTerm
function CovarianceSectionsCovarianceSectionHasByCrossTerm(handle, meta) &
      bind(C, name='CovarianceSectionsCovarianceSectionHasByCrossTerm') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_bool), value, intent(in) :: meta
   integer(c_int) :: has
end function CovarianceSectionsCovarianceSectionHasByCrossTerm

!! Get, by crossTerm, const
function CovarianceSectionsCovarianceSectionGetByCrossTermConst(handle, meta) &
      bind(C, name='CovarianceSectionsCovarianceSectionGetByCrossTermConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_bool), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function CovarianceSectionsCovarianceSectionGetByCrossTermConst

!! Get, by crossTerm
function CovarianceSectionsCovarianceSectionGetByCrossTerm(handle, meta) &
      bind(C, name='CovarianceSectionsCovarianceSectionGetByCrossTerm') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_bool), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function CovarianceSectionsCovarianceSectionGetByCrossTerm

!! Set, by crossTerm
subroutine CovarianceSectionsCovarianceSectionSetByCrossTerm(handle, meta, fieldHandle) &
      bind(C, name='CovarianceSectionsCovarianceSectionSetByCrossTerm')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_bool), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionsCovarianceSectionSetByCrossTerm


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCovarianceSections
