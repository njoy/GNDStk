
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalPrimaryGamma
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function PrimaryGammaDefaultConst() &
      bind(C, name='PrimaryGammaDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function PrimaryGammaDefaultConst

!! Create, default
function PrimaryGammaDefault() &
      bind(C, name='PrimaryGammaDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function PrimaryGammaDefault

!! Create, general, const
function PrimaryGammaCreateConst( &
   value, &
   domainMin, &
   domainMax, &
   axes &
) &
      bind(C, name='PrimaryGammaCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   type(c_ptr), value :: axes
   type(c_ptr) :: handle
end function PrimaryGammaCreateConst

!! Create, general
function PrimaryGammaCreate( &
   value, &
   domainMin, &
   domainMax, &
   axes &
) &
      bind(C, name='PrimaryGammaCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   type(c_ptr), value :: axes
   type(c_ptr) :: handle
end function PrimaryGammaCreate

!! Assign
subroutine PrimaryGammaAssign(handleLHS, handleRHS) &
      bind(C, name='PrimaryGammaAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine PrimaryGammaAssign

!! Delete
subroutine PrimaryGammaDelete(handle) &
      bind(C, name='PrimaryGammaDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine PrimaryGammaDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function PrimaryGammaRead(handle, filename, filenameSize) &
      bind(C, name='PrimaryGammaRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function PrimaryGammaRead

!! Write to file
function PrimaryGammaWrite(handle, filename, filenameSize) &
      bind(C, name='PrimaryGammaWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function PrimaryGammaWrite

!! Print to standard output, in our prettyprinting format
function PrimaryGammaPrint(handle) &
      bind(C, name='PrimaryGammaPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PrimaryGammaPrint

!! Print to standard output, as XML
function PrimaryGammaPrintXML(handle) &
      bind(C, name='PrimaryGammaPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PrimaryGammaPrintXML

!! Print to standard output, as JSON
function PrimaryGammaPrintJSON(handle) &
      bind(C, name='PrimaryGammaPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PrimaryGammaPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaValueHas(handle) &
      bind(C, name='PrimaryGammaValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PrimaryGammaValueHas

!! Get
function PrimaryGammaValueGet(handle) &
      bind(C, name='PrimaryGammaValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function PrimaryGammaValueGet

!! Set
subroutine PrimaryGammaValueSet(handle, value, valueSize) &
      bind(C, name='PrimaryGammaValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine PrimaryGammaValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMin
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaDomainMinHas(handle) &
      bind(C, name='PrimaryGammaDomainMinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PrimaryGammaDomainMinHas

!! Get
function PrimaryGammaDomainMinGet(handle) &
      bind(C, name='PrimaryGammaDomainMinGet') &
      result(domainMin)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: domainMin
end function PrimaryGammaDomainMinGet

!! Set
subroutine PrimaryGammaDomainMinSet(handle, domainMin, domainMinSize) &
      bind(C, name='PrimaryGammaDomainMinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMinSize
   character(c_char), intent(in) :: domainMin(domainMinSize)
end subroutine PrimaryGammaDomainMinSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMax
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaDomainMaxHas(handle) &
      bind(C, name='PrimaryGammaDomainMaxHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PrimaryGammaDomainMaxHas

!! Get
function PrimaryGammaDomainMaxGet(handle) &
      bind(C, name='PrimaryGammaDomainMaxGet') &
      result(domainMax)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: domainMax
end function PrimaryGammaDomainMaxGet

!! Set
subroutine PrimaryGammaDomainMaxSet(handle, domainMax, domainMaxSize) &
      bind(C, name='PrimaryGammaDomainMaxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMaxSize
   character(c_char), intent(in) :: domainMax(domainMaxSize)
end subroutine PrimaryGammaDomainMaxSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaAxesHas(handle) &
      bind(C, name='PrimaryGammaAxesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PrimaryGammaAxesHas

!! Get, const
function PrimaryGammaAxesGetConst(handle) &
      bind(C, name='PrimaryGammaAxesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PrimaryGammaAxesGetConst

!! Get
function PrimaryGammaAxesGet(handle) &
      bind(C, name='PrimaryGammaAxesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PrimaryGammaAxesGet

!! Set
subroutine PrimaryGammaAxesSet(handle, fieldHandle) &
      bind(C, name='PrimaryGammaAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine PrimaryGammaAxesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalPrimaryGamma
