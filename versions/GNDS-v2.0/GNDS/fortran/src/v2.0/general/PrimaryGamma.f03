
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalPrimaryGamma
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function PrimaryGammaDefaultConst() &
      bind(C, name='PrimaryGammaDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: PrimaryGammaDefaultConst
end function PrimaryGammaDefaultConst

!! Create, default, non-const
function PrimaryGammaDefault() &
      bind(C, name='PrimaryGammaDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: PrimaryGammaDefault
end function PrimaryGammaDefault

!! Create, general, const
function PrimaryGammaCreateConst( &
   value, &
   domainMin, &
   domainMax, &
   axes &
) &
      bind(C, name='PrimaryGammaCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   real(c_double), intent(in), value :: domainMin
   real(c_double), intent(in), value :: domainMax
   type(c_ptr), intent(in), value :: axes
   type(c_ptr) :: PrimaryGammaCreateConst
end function PrimaryGammaCreateConst

!! Create, general, non-const
function PrimaryGammaCreate( &
   value, &
   domainMin, &
   domainMax, &
   axes &
) &
      bind(C, name='PrimaryGammaCreate')
   use iso_c_binding
   implicit none
   real(c_double), intent(in), value :: value
   real(c_double), intent(in), value :: domainMin
   real(c_double), intent(in), value :: domainMax
   type(c_ptr), intent(in), value :: axes
   type(c_ptr) :: PrimaryGammaCreate
end function PrimaryGammaCreate

!! Assign
subroutine PrimaryGammaAssign(handleLHS, handleRHS) &
      bind(C, name='PrimaryGammaAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine PrimaryGammaAssign

!! Delete
subroutine PrimaryGammaDelete(handle) &
      bind(C, name='PrimaryGammaDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine PrimaryGammaDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function PrimaryGammaRead(handle, filename, filenameSize) &
      bind(C, name='PrimaryGammaRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: PrimaryGammaRead
end function PrimaryGammaRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function PrimaryGammaWrite(handle, filename, filenameSize) &
      bind(C, name='PrimaryGammaWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: PrimaryGammaWrite
end function PrimaryGammaWrite

!! Print to standard output, in our prettyprinting format
function PrimaryGammaPrint(handle) &
      bind(C, name='PrimaryGammaPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaPrint
end function PrimaryGammaPrint

!! Print to standard output, as XML
function PrimaryGammaPrintXML(handle) &
      bind(C, name='PrimaryGammaPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaPrintXML
end function PrimaryGammaPrintXML

!! Print to standard output, as JSON
function PrimaryGammaPrintJSON(handle) &
      bind(C, name='PrimaryGammaPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaPrintJSON
end function PrimaryGammaPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaValueHas(handle) &
      bind(C, name='PrimaryGammaValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaValueHas
end function PrimaryGammaValueHas

!! Get
function PrimaryGammaValueGet(handle) &
      bind(C, name='PrimaryGammaValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: PrimaryGammaValueGet
end function PrimaryGammaValueGet

!! Set
subroutine PrimaryGammaValueSet(handle, value) &
      bind(C, name='PrimaryGammaValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: value
end subroutine PrimaryGammaValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMin
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaDomainMinHas(handle) &
      bind(C, name='PrimaryGammaDomainMinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaDomainMinHas
end function PrimaryGammaDomainMinHas

!! Get
function PrimaryGammaDomainMinGet(handle) &
      bind(C, name='PrimaryGammaDomainMinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: PrimaryGammaDomainMinGet
end function PrimaryGammaDomainMinGet

!! Set
subroutine PrimaryGammaDomainMinSet(handle, domainMin) &
      bind(C, name='PrimaryGammaDomainMinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: domainMin
end subroutine PrimaryGammaDomainMinSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMax
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaDomainMaxHas(handle) &
      bind(C, name='PrimaryGammaDomainMaxHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaDomainMaxHas
end function PrimaryGammaDomainMaxHas

!! Get
function PrimaryGammaDomainMaxGet(handle) &
      bind(C, name='PrimaryGammaDomainMaxGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: PrimaryGammaDomainMaxGet
end function PrimaryGammaDomainMaxGet

!! Set
subroutine PrimaryGammaDomainMaxSet(handle, domainMax) &
      bind(C, name='PrimaryGammaDomainMaxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: domainMax
end subroutine PrimaryGammaDomainMaxSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function PrimaryGammaAxesHas(handle) &
      bind(C, name='PrimaryGammaAxesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: PrimaryGammaAxesHas
end function PrimaryGammaAxesHas

!! Get, const
function PrimaryGammaAxesGetConst(handle) &
      bind(C, name='PrimaryGammaAxesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: PrimaryGammaAxesGetConst
end function PrimaryGammaAxesGetConst

!! Get, non-const
function PrimaryGammaAxesGet(handle) &
      bind(C, name='PrimaryGammaAxesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: PrimaryGammaAxesGet
end function PrimaryGammaAxesGet

!! Set
subroutine PrimaryGammaAxesSet(handle, fieldHandle) &
      bind(C, name='PrimaryGammaAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine PrimaryGammaAxesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalPrimaryGamma
