
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalMass
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function MassDefaultConst() &
      bind(C, name='MassDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MassDefaultConst
end function MassDefaultConst

!! Create, default
function MassDefault() &
      bind(C, name='MassDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MassDefault
end function MassDefault

!! Create, general, const
function MassCreateConst( &
   value, &
   unit, &
   Double, &
   unitSize &
) &
      bind(C, name='MassCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), value :: Double
   type(c_ptr) :: MassCreateConst
end function MassCreateConst

!! Create, general
function MassCreate( &
   value, &
   unit, &
   Double, &
   unitSize &
) &
      bind(C, name='MassCreate')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   type(c_ptr), value :: Double
   type(c_ptr) :: MassCreate
end function MassCreate

!! Assign
subroutine MassAssign(handleLHS, handleRHS) &
      bind(C, name='MassAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine MassAssign

!! Delete
subroutine MassDelete(handle) &
      bind(C, name='MassDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MassDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function MassRead(handle, filename, filenameSize) &
      bind(C, name='MassRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MassRead
end function MassRead

!! Write to file
function MassWrite(handle, filename, filenameSize) &
      bind(C, name='MassWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MassWrite
end function MassWrite

!! Print to standard output, in our prettyprinting format
function MassPrint(handle) &
      bind(C, name='MassPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MassPrint
end function MassPrint

!! Print to standard output, as XML
function MassPrintXML(handle) &
      bind(C, name='MassPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MassPrintXML
end function MassPrintXML

!! Print to standard output, as JSON
function MassPrintJSON(handle) &
      bind(C, name='MassPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MassPrintJSON
end function MassPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function MassValueHas(handle) &
      bind(C, name='MassValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MassValueHas
end function MassValueHas

!! Get
function MassValueGet(handle) &
      bind(C, name='MassValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: MassValueGet
end function MassValueGet

!! Set
subroutine MassValueSet(handle, value, valueSize) &
      bind(C, name='MassValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine MassValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function MassUnitHas(handle) &
      bind(C, name='MassUnitHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MassUnitHas
end function MassUnitHas

!! Get
function MassUnitGet(handle) &
      bind(C, name='MassUnitGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MassUnitGet
end function MassUnitGet

!! Set
subroutine MassUnitSet(handle, unit, unitSize) &
      bind(C, name='MassUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine MassUnitSet


!! -----------------------------------------------------------------------------
!! Child: Double
!! -----------------------------------------------------------------------------

!! Has
function MassDoubleHas(handle) &
      bind(C, name='MassDoubleHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MassDoubleHas
end function MassDoubleHas

!! Get, const
function MassDoubleGetConst(handle) &
      bind(C, name='MassDoubleGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MassDoubleGetConst
end function MassDoubleGetConst

!! Get
function MassDoubleGet(handle) &
      bind(C, name='MassDoubleGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MassDoubleGet
end function MassDoubleGet

!! Set
subroutine MassDoubleSet(handle, fieldHandle) &
      bind(C, name='MassDoubleSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MassDoubleSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalMass
