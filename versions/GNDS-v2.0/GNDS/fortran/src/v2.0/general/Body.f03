
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBody
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BodyDefaultConst() &
      bind(C, name='BodyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BodyDefaultConst
end function BodyDefaultConst

!! Create, default, non-const
function BodyDefault() &
      bind(C, name='BodyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BodyDefault
end function BodyDefault

!! Create, general, const
function BodyCreateConst( &
) &
      bind(C, name='BodyCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BodyCreateConst
end function BodyCreateConst

!! Create, general, non-const
function BodyCreate( &
) &
      bind(C, name='BodyCreate')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BodyCreate
end function BodyCreate

!! Assign
subroutine BodyAssign(handleLHS, handleRHS) &
      bind(C, name='BodyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine BodyAssign

!! Delete
subroutine BodyDelete(handle) &
      bind(C, name='BodyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BodyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function BodyRead(handle, filename, filenameSize) &
      bind(C, name='BodyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BodyRead
end function BodyRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function BodyWrite(handle, filename, filenameSize) &
      bind(C, name='BodyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BodyWrite
end function BodyWrite

!! Print to standard output, in our prettyprinting format
function BodyPrint(handle) &
      bind(C, name='BodyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BodyPrint
end function BodyPrint

!! Print to standard output, as XML
function BodyPrintXML(handle) &
      bind(C, name='BodyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BodyPrintXML
end function BodyPrintXML

!! Print to standard output, as JSON
function BodyPrintJSON(handle) &
      bind(C, name='BodyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BodyPrintJSON
end function BodyPrintJSON


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBody
