
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGridded3d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Gridded3dDefaultConst() &
      bind(C, name='Gridded3dDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Gridded3dDefaultConst
end function Gridded3dDefaultConst

!! Create, default
function Gridded3dDefault() &
      bind(C, name='Gridded3dDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Gridded3dDefault
end function Gridded3dDefault

!! Create, general, const
function Gridded3dCreateConst( &
   axes, &
   array &
) &
      bind(C, name='Gridded3dCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: axes
   type(c_ptr), value :: array
   type(c_ptr) :: Gridded3dCreateConst
end function Gridded3dCreateConst

!! Create, general
function Gridded3dCreate( &
   axes, &
   array &
) &
      bind(C, name='Gridded3dCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: axes
   type(c_ptr), value :: array
   type(c_ptr) :: Gridded3dCreate
end function Gridded3dCreate

!! Assign
subroutine Gridded3dAssign(handleLHS, handleRHS) &
      bind(C, name='Gridded3dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine Gridded3dAssign

!! Delete
subroutine Gridded3dDelete(handle) &
      bind(C, name='Gridded3dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Gridded3dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function Gridded3dRead(handle, filename, filenameSize) &
      bind(C, name='Gridded3dRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Gridded3dRead
end function Gridded3dRead

!! Write to file
function Gridded3dWrite(handle, filename, filenameSize) &
      bind(C, name='Gridded3dWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Gridded3dWrite
end function Gridded3dWrite

!! Print to standard output, in our prettyprinting format
function Gridded3dPrint(handle) &
      bind(C, name='Gridded3dPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded3dPrint
end function Gridded3dPrint

!! Print to standard output, as XML
function Gridded3dPrintXML(handle) &
      bind(C, name='Gridded3dPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded3dPrintXML
end function Gridded3dPrintXML

!! Print to standard output, as JSON
function Gridded3dPrintJSON(handle) &
      bind(C, name='Gridded3dPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded3dPrintJSON
end function Gridded3dPrintJSON


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function Gridded3dAxesHas(handle) &
      bind(C, name='Gridded3dAxesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded3dAxesHas
end function Gridded3dAxesHas

!! Get, const
function Gridded3dAxesGetConst(handle) &
      bind(C, name='Gridded3dAxesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded3dAxesGetConst
end function Gridded3dAxesGetConst

!! Get
function Gridded3dAxesGet(handle) &
      bind(C, name='Gridded3dAxesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded3dAxesGet
end function Gridded3dAxesGet

!! Set
subroutine Gridded3dAxesSet(handle, fieldHandle) &
      bind(C, name='Gridded3dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Gridded3dAxesSet


!! -----------------------------------------------------------------------------
!! Child: array
!! -----------------------------------------------------------------------------

!! Has
function Gridded3dArrayHas(handle) &
      bind(C, name='Gridded3dArrayHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Gridded3dArrayHas
end function Gridded3dArrayHas

!! Get, const
function Gridded3dArrayGetConst(handle) &
      bind(C, name='Gridded3dArrayGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded3dArrayGetConst
end function Gridded3dArrayGetConst

!! Get
function Gridded3dArrayGet(handle) &
      bind(C, name='Gridded3dArrayGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Gridded3dArrayGet
end function Gridded3dArrayGet

!! Set
subroutine Gridded3dArraySet(handle, fieldHandle) &
      bind(C, name='Gridded3dArraySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Gridded3dArraySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGridded3d
