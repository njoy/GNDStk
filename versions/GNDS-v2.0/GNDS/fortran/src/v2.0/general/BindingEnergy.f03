
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalBindingEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function BindingEnergyDefaultConst() &
      bind(C, name='BindingEnergyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BindingEnergyDefaultConst
end function BindingEnergyDefaultConst

!! Create, default, non-const
function BindingEnergyDefault() &
      bind(C, name='BindingEnergyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: BindingEnergyDefault
end function BindingEnergyDefault

!! Create, general, const
function BindingEnergyCreateConst( &
   Double &
) &
      bind(C, name='BindingEnergyCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: Double
   type(c_ptr) :: BindingEnergyCreateConst
end function BindingEnergyCreateConst

!! Create, general, non-const
function BindingEnergyCreate( &
   Double &
) &
      bind(C, name='BindingEnergyCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: Double
   type(c_ptr) :: BindingEnergyCreate
end function BindingEnergyCreate

!! Assign
subroutine BindingEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='BindingEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine BindingEnergyAssign

!! Delete
subroutine BindingEnergyDelete(handle) &
      bind(C, name='BindingEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine BindingEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function BindingEnergyRead(handle, filename, filenameSize) &
      bind(C, name='BindingEnergyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BindingEnergyRead
end function BindingEnergyRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function BindingEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='BindingEnergyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: BindingEnergyWrite
end function BindingEnergyWrite

!! Print to standard output, in our prettyprinting format
function BindingEnergyPrint(handle) &
      bind(C, name='BindingEnergyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BindingEnergyPrint
end function BindingEnergyPrint

!! Print to standard output, as XML
function BindingEnergyPrintXML(handle) &
      bind(C, name='BindingEnergyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BindingEnergyPrintXML
end function BindingEnergyPrintXML

!! Print to standard output, as JSON
function BindingEnergyPrintJSON(handle) &
      bind(C, name='BindingEnergyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BindingEnergyPrintJSON
end function BindingEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: Double
!! -----------------------------------------------------------------------------

!! Has
function BindingEnergyDoubleHas(handle) &
      bind(C, name='BindingEnergyDoubleHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: BindingEnergyDoubleHas
end function BindingEnergyDoubleHas

!! Get, const
function BindingEnergyDoubleGetConst(handle) &
      bind(C, name='BindingEnergyDoubleGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: BindingEnergyDoubleGetConst
end function BindingEnergyDoubleGetConst

!! Get, non-const
function BindingEnergyDoubleGet(handle) &
      bind(C, name='BindingEnergyDoubleGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: BindingEnergyDoubleGet
end function BindingEnergyDoubleGet

!! Set
subroutine BindingEnergyDoubleSet(handle, fieldHandle) &
      bind(C, name='BindingEnergyDoubleSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine BindingEnergyDoubleSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalBindingEnergy
