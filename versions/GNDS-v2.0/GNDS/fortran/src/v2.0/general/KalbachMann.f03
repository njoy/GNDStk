
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalKalbachMann
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function KalbachMannDefaultConst() &
      bind(C, name='KalbachMannDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: KalbachMannDefaultConst
end function KalbachMannDefaultConst

!! Create, default, non-const
function KalbachMannDefault() &
      bind(C, name='KalbachMannDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: KalbachMannDefault
end function KalbachMannDefault

!! Create, general, const
function KalbachMannCreateConst( &
   label, &
   productFrame, &
   f, &
   r, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='KalbachMannCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), intent(in), value :: f
   type(c_ptr), intent(in), value :: r
   type(c_ptr) :: KalbachMannCreateConst
end function KalbachMannCreateConst

!! Create, general, non-const
function KalbachMannCreate( &
   label, &
   productFrame, &
   f, &
   r, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='KalbachMannCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), intent(in), value :: f
   type(c_ptr), intent(in), value :: r
   type(c_ptr) :: KalbachMannCreate
end function KalbachMannCreate

!! Assign
subroutine KalbachMannAssign(handleLHS, handleRHS) &
      bind(C, name='KalbachMannAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine KalbachMannAssign

!! Delete
subroutine KalbachMannDelete(handle) &
      bind(C, name='KalbachMannDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine KalbachMannDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function KalbachMannRead(handle, filename, filenameSize) &
      bind(C, name='KalbachMannRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: KalbachMannRead
end function KalbachMannRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function KalbachMannWrite(handle, filename, filenameSize) &
      bind(C, name='KalbachMannWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: KalbachMannWrite
end function KalbachMannWrite

!! Print to standard output, in our prettyprinting format
function KalbachMannPrint(handle) &
      bind(C, name='KalbachMannPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannPrint
end function KalbachMannPrint

!! Print to standard output, as XML
function KalbachMannPrintXML(handle) &
      bind(C, name='KalbachMannPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannPrintXML
end function KalbachMannPrintXML

!! Print to standard output, as JSON
function KalbachMannPrintJSON(handle) &
      bind(C, name='KalbachMannPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannPrintJSON
end function KalbachMannPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannLabelHas(handle) &
      bind(C, name='KalbachMannLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannLabelHas
end function KalbachMannLabelHas

!! Get
function KalbachMannLabelGet(handle) &
      bind(C, name='KalbachMannLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: KalbachMannLabelGet
end function KalbachMannLabelGet

!! Set
subroutine KalbachMannLabelSet(handle, label, labelSize) &
      bind(C, name='KalbachMannLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine KalbachMannLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannProductFrameHas(handle) &
      bind(C, name='KalbachMannProductFrameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannProductFrameHas
end function KalbachMannProductFrameHas

!! Get
function KalbachMannProductFrameGet(handle) &
      bind(C, name='KalbachMannProductFrameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: KalbachMannProductFrameGet
end function KalbachMannProductFrameGet

!! Set
subroutine KalbachMannProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='KalbachMannProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine KalbachMannProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: f
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannFHas(handle) &
      bind(C, name='KalbachMannFHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannFHas
end function KalbachMannFHas

!! Get, const
function KalbachMannFGetConst(handle) &
      bind(C, name='KalbachMannFGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: KalbachMannFGetConst
end function KalbachMannFGetConst

!! Get, non-const
function KalbachMannFGet(handle) &
      bind(C, name='KalbachMannFGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: KalbachMannFGet
end function KalbachMannFGet

!! Set
subroutine KalbachMannFSet(handle, fieldHandle) &
      bind(C, name='KalbachMannFSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine KalbachMannFSet


!! -----------------------------------------------------------------------------
!! Child: r
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannRHas(handle) &
      bind(C, name='KalbachMannRHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: KalbachMannRHas
end function KalbachMannRHas

!! Get, const
function KalbachMannRGetConst(handle) &
      bind(C, name='KalbachMannRGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: KalbachMannRGetConst
end function KalbachMannRGetConst

!! Get, non-const
function KalbachMannRGet(handle) &
      bind(C, name='KalbachMannRGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: KalbachMannRGet
end function KalbachMannRGet

!! Set
subroutine KalbachMannRSet(handle, fieldHandle) &
      bind(C, name='KalbachMannRSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine KalbachMannRSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalKalbachMann
