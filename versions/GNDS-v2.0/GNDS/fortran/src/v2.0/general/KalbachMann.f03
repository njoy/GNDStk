
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalKalbachMann
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function KalbachMannDefaultConst() &
      bind(C, name='KalbachMannDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function KalbachMannDefaultConst

!! Create, default
function KalbachMannDefault() &
      bind(C, name='KalbachMannDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function KalbachMannDefault

!! Create, general, const
function KalbachMannCreateConst( &
   label, &
   productFrame, &
   f, &
   r, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='KalbachMannCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: f
   type(c_ptr), value :: r
   type(c_ptr) :: handle
end function KalbachMannCreateConst

!! Create, general
function KalbachMannCreate( &
   label, &
   productFrame, &
   f, &
   r, &
   labelSize, &
   productFrameSize &
) &
      bind(C, name='KalbachMannCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: f
   type(c_ptr), value :: r
   type(c_ptr) :: handle
end function KalbachMannCreate

!! Assign
subroutine KalbachMannAssign(handleLHS, handleRHS) &
      bind(C, name='KalbachMannAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine KalbachMannAssign

!! Delete
subroutine KalbachMannDelete(handle) &
      bind(C, name='KalbachMannDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine KalbachMannDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function KalbachMannRead(handle, filename, filenameSize) &
      bind(C, name='KalbachMannRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function KalbachMannRead

!! Write to file
function KalbachMannWrite(handle, filename, filenameSize) &
      bind(C, name='KalbachMannWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function KalbachMannWrite

!! Print to standard output, in our prettyprinting format
function KalbachMannPrint(handle) &
      bind(C, name='KalbachMannPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function KalbachMannPrint

!! Print to standard output, as XML
function KalbachMannPrintXML(handle) &
      bind(C, name='KalbachMannPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function KalbachMannPrintXML

!! Print to standard output, as JSON
function KalbachMannPrintJSON(handle) &
      bind(C, name='KalbachMannPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function KalbachMannPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannLabelHas(handle) &
      bind(C, name='KalbachMannLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function KalbachMannLabelHas

!! Get
function KalbachMannLabelGet(handle) &
      bind(C, name='KalbachMannLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function KalbachMannLabelGet

!! Set
subroutine KalbachMannLabelSet(handle, label, labelSize) &
      bind(C, name='KalbachMannLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine KalbachMannLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannProductFrameHas(handle) &
      bind(C, name='KalbachMannProductFrameHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function KalbachMannProductFrameHas

!! Get
function KalbachMannProductFrameGet(handle) &
      bind(C, name='KalbachMannProductFrameGet') &
      result(productFrame)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: productFrame
end function KalbachMannProductFrameGet

!! Set
subroutine KalbachMannProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='KalbachMannProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine KalbachMannProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: f
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannFHas(handle) &
      bind(C, name='KalbachMannFHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function KalbachMannFHas

!! Get, const
function KalbachMannFGetConst(handle) &
      bind(C, name='KalbachMannFGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function KalbachMannFGetConst

!! Get
function KalbachMannFGet(handle) &
      bind(C, name='KalbachMannFGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function KalbachMannFGet

!! Set
subroutine KalbachMannFSet(handle, fieldHandle) &
      bind(C, name='KalbachMannFSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine KalbachMannFSet


!! -----------------------------------------------------------------------------
!! Child: r
!! -----------------------------------------------------------------------------

!! Has
function KalbachMannRHas(handle) &
      bind(C, name='KalbachMannRHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function KalbachMannRHas

!! Get, const
function KalbachMannRGetConst(handle) &
      bind(C, name='KalbachMannRGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function KalbachMannRGetConst

!! Get
function KalbachMannRGet(handle) &
      bind(C, name='KalbachMannRGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function KalbachMannRGet

!! Set
subroutine KalbachMannRSet(handle, fieldHandle) &
      bind(C, name='KalbachMannRSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine KalbachMannRSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalKalbachMann
