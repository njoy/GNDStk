
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalMadlandNix
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function MadlandNixDefaultConst() &
      bind(C, name='MadlandNixDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function MadlandNixDefaultConst

!! Create, default
function MadlandNixDefault() &
      bind(C, name='MadlandNixDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function MadlandNixDefault

!! Create, general, const
function MadlandNixCreateConst( &
   EFL, &
   EFH, &
   T_M &
) &
      bind(C, name='MadlandNixCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: EFL
   type(c_ptr), value :: EFH
   type(c_ptr), value :: T_M
   type(c_ptr) :: handle
end function MadlandNixCreateConst

!! Create, general
function MadlandNixCreate( &
   EFL, &
   EFH, &
   T_M &
) &
      bind(C, name='MadlandNixCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: EFL
   type(c_ptr), value :: EFH
   type(c_ptr), value :: T_M
   type(c_ptr) :: handle
end function MadlandNixCreate

!! Assign
subroutine MadlandNixAssign(handleLHS, handleRHS) &
      bind(C, name='MadlandNixAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine MadlandNixAssign

!! Delete
subroutine MadlandNixDelete(handle) &
      bind(C, name='MadlandNixDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MadlandNixDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function MadlandNixRead(handle, filename, filenameSize) &
      bind(C, name='MadlandNixRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function MadlandNixRead

!! Write to file
function MadlandNixWrite(handle, filename, filenameSize) &
      bind(C, name='MadlandNixWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function MadlandNixWrite

!! Print to standard output, in our prettyprinting format
function MadlandNixPrint(handle) &
      bind(C, name='MadlandNixPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function MadlandNixPrint

!! Print to standard output, as XML
function MadlandNixPrintXML(handle) &
      bind(C, name='MadlandNixPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function MadlandNixPrintXML

!! Print to standard output, as JSON
function MadlandNixPrintJSON(handle) &
      bind(C, name='MadlandNixPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function MadlandNixPrintJSON


!! -----------------------------------------------------------------------------
!! Child: EFL
!! -----------------------------------------------------------------------------

!! Has
function MadlandNixEFLHas(handle) &
      bind(C, name='MadlandNixEFLHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function MadlandNixEFLHas

!! Get, const
function MadlandNixEFLGetConst(handle) &
      bind(C, name='MadlandNixEFLGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function MadlandNixEFLGetConst

!! Get
function MadlandNixEFLGet(handle) &
      bind(C, name='MadlandNixEFLGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function MadlandNixEFLGet

!! Set
subroutine MadlandNixEFLSet(handle, fieldHandle) &
      bind(C, name='MadlandNixEFLSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MadlandNixEFLSet


!! -----------------------------------------------------------------------------
!! Child: EFH
!! -----------------------------------------------------------------------------

!! Has
function MadlandNixEFHHas(handle) &
      bind(C, name='MadlandNixEFHHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function MadlandNixEFHHas

!! Get, const
function MadlandNixEFHGetConst(handle) &
      bind(C, name='MadlandNixEFHGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function MadlandNixEFHGetConst

!! Get
function MadlandNixEFHGet(handle) &
      bind(C, name='MadlandNixEFHGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function MadlandNixEFHGet

!! Set
subroutine MadlandNixEFHSet(handle, fieldHandle) &
      bind(C, name='MadlandNixEFHSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MadlandNixEFHSet


!! -----------------------------------------------------------------------------
!! Child: T_M
!! -----------------------------------------------------------------------------

!! Has
function MadlandNixT_MHas(handle) &
      bind(C, name='MadlandNixT_MHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function MadlandNixT_MHas

!! Get, const
function MadlandNixT_MGetConst(handle) &
      bind(C, name='MadlandNixT_MGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function MadlandNixT_MGetConst

!! Get
function MadlandNixT_MGet(handle) &
      bind(C, name='MadlandNixT_MGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function MadlandNixT_MGet

!! Set
subroutine MadlandNixT_MSet(handle, fieldHandle) &
      bind(C, name='MadlandNixT_MSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine MadlandNixT_MSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalMadlandNix
