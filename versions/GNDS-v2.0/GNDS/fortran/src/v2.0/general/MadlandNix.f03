
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalMadlandNix
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function MadlandNixDefaultConst() &
      bind(C, name='MadlandNixDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MadlandNixDefaultConst
end function MadlandNixDefaultConst

!! Create, default, non-const
function MadlandNixDefault() &
      bind(C, name='MadlandNixDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MadlandNixDefault
end function MadlandNixDefault

!! Create, general, const
function MadlandNixCreateConst( &
   EFL, &
   EFH, &
   T_M &
) &
      bind(C, name='MadlandNixCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: EFL
   type(c_ptr), intent(in), value :: EFH
   type(c_ptr), intent(in), value :: T_M
   type(c_ptr) :: MadlandNixCreateConst
end function MadlandNixCreateConst

!! Create, general, non-const
function MadlandNixCreate( &
   EFL, &
   EFH, &
   T_M &
) &
      bind(C, name='MadlandNixCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: EFL
   type(c_ptr), intent(in), value :: EFH
   type(c_ptr), intent(in), value :: T_M
   type(c_ptr) :: MadlandNixCreate
end function MadlandNixCreate

!! Assign
subroutine MadlandNixAssign(handleLHS, handleRHS) &
      bind(C, name='MadlandNixAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine MadlandNixAssign

!! Delete
subroutine MadlandNixDelete(handle) &
      bind(C, name='MadlandNixDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MadlandNixDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function MadlandNixRead(handle, filename, filenameSize) &
      bind(C, name='MadlandNixRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MadlandNixRead
end function MadlandNixRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function MadlandNixWrite(handle, filename, filenameSize) &
      bind(C, name='MadlandNixWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MadlandNixWrite
end function MadlandNixWrite

!! Print to standard output, in our prettyprinting format
function MadlandNixPrint(handle) &
      bind(C, name='MadlandNixPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MadlandNixPrint
end function MadlandNixPrint

!! Print to standard output, as XML
function MadlandNixPrintXML(handle) &
      bind(C, name='MadlandNixPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MadlandNixPrintXML
end function MadlandNixPrintXML

!! Print to standard output, as JSON
function MadlandNixPrintJSON(handle) &
      bind(C, name='MadlandNixPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MadlandNixPrintJSON
end function MadlandNixPrintJSON


!! -----------------------------------------------------------------------------
!! Child: EFL
!! -----------------------------------------------------------------------------

!! Has
function MadlandNixEFLHas(handle) &
      bind(C, name='MadlandNixEFLHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MadlandNixEFLHas
end function MadlandNixEFLHas

!! Get, const
function MadlandNixEFLGetConst(handle) &
      bind(C, name='MadlandNixEFLGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MadlandNixEFLGetConst
end function MadlandNixEFLGetConst

!! Get, non-const
function MadlandNixEFLGet(handle) &
      bind(C, name='MadlandNixEFLGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: MadlandNixEFLGet
end function MadlandNixEFLGet

!! Set
subroutine MadlandNixEFLSet(handle, fieldHandle) &
      bind(C, name='MadlandNixEFLSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MadlandNixEFLSet


!! -----------------------------------------------------------------------------
!! Child: EFH
!! -----------------------------------------------------------------------------

!! Has
function MadlandNixEFHHas(handle) &
      bind(C, name='MadlandNixEFHHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MadlandNixEFHHas
end function MadlandNixEFHHas

!! Get, const
function MadlandNixEFHGetConst(handle) &
      bind(C, name='MadlandNixEFHGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MadlandNixEFHGetConst
end function MadlandNixEFHGetConst

!! Get, non-const
function MadlandNixEFHGet(handle) &
      bind(C, name='MadlandNixEFHGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: MadlandNixEFHGet
end function MadlandNixEFHGet

!! Set
subroutine MadlandNixEFHSet(handle, fieldHandle) &
      bind(C, name='MadlandNixEFHSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MadlandNixEFHSet


!! -----------------------------------------------------------------------------
!! Child: T_M
!! -----------------------------------------------------------------------------

!! Has
function MadlandNixT_MHas(handle) &
      bind(C, name='MadlandNixT_MHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MadlandNixT_MHas
end function MadlandNixT_MHas

!! Get, const
function MadlandNixT_MGetConst(handle) &
      bind(C, name='MadlandNixT_MGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MadlandNixT_MGetConst
end function MadlandNixT_MGetConst

!! Get, non-const
function MadlandNixT_MGet(handle) &
      bind(C, name='MadlandNixT_MGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: MadlandNixT_MGet
end function MadlandNixT_MGet

!! Set
subroutine MadlandNixT_MSet(handle, fieldHandle) &
      bind(C, name='MadlandNixT_MSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MadlandNixT_MSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalMadlandNix
