
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalThermalNeutronScatteringLaw
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ThermalNeutronScatteringLawDefaultConst() &
      bind(C, name='ThermalNeutronScatteringLawDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ThermalNeutronScatteringLawDefaultConst
end function ThermalNeutronScatteringLawDefaultConst

!! Create, default, non-const
function ThermalNeutronScatteringLawDefault() &
      bind(C, name='ThermalNeutronScatteringLawDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ThermalNeutronScatteringLawDefault
end function ThermalNeutronScatteringLawDefault

!! Create, general, const
function ThermalNeutronScatteringLawCreateConst( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ThermalNeutronScatteringLawCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: ThermalNeutronScatteringLawCreateConst
end function ThermalNeutronScatteringLawCreateConst

!! Create, general, non-const
function ThermalNeutronScatteringLawCreate( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ThermalNeutronScatteringLawCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: ThermalNeutronScatteringLawCreate
end function ThermalNeutronScatteringLawCreate

!! Assign
subroutine ThermalNeutronScatteringLawAssign(handleLHS, handleRHS) &
      bind(C, name='ThermalNeutronScatteringLawAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ThermalNeutronScatteringLawAssign

!! Delete
subroutine ThermalNeutronScatteringLawDelete(handle) &
      bind(C, name='ThermalNeutronScatteringLawDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ThermalNeutronScatteringLawDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ThermalNeutronScatteringLawRead(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLawRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ThermalNeutronScatteringLawRead
end function ThermalNeutronScatteringLawRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ThermalNeutronScatteringLawWrite(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLawWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ThermalNeutronScatteringLawWrite
end function ThermalNeutronScatteringLawWrite

!! Print to standard output, in our prettyprinting format
function ThermalNeutronScatteringLawPrint(handle) &
      bind(C, name='ThermalNeutronScatteringLawPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLawPrint
end function ThermalNeutronScatteringLawPrint

!! Print to standard output, as XML
function ThermalNeutronScatteringLawPrintXML(handle) &
      bind(C, name='ThermalNeutronScatteringLawPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLawPrintXML
end function ThermalNeutronScatteringLawPrintXML

!! Print to standard output, as JSON
function ThermalNeutronScatteringLawPrintJSON(handle) &
      bind(C, name='ThermalNeutronScatteringLawPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLawPrintJSON
end function ThermalNeutronScatteringLawPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLawLabelHas(handle) &
      bind(C, name='ThermalNeutronScatteringLawLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLawLabelHas
end function ThermalNeutronScatteringLawLabelHas

!! Get
function ThermalNeutronScatteringLawLabelGet(handle) &
      bind(C, name='ThermalNeutronScatteringLawLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ThermalNeutronScatteringLawLabelGet
end function ThermalNeutronScatteringLawLabelGet

!! Set
subroutine ThermalNeutronScatteringLawLabelSet(handle, label, labelSize) &
      bind(C, name='ThermalNeutronScatteringLawLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ThermalNeutronScatteringLawLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLawHrefHas(handle) &
      bind(C, name='ThermalNeutronScatteringLawHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLawHrefHas
end function ThermalNeutronScatteringLawHrefHas

!! Get
function ThermalNeutronScatteringLawHrefGet(handle) &
      bind(C, name='ThermalNeutronScatteringLawHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ThermalNeutronScatteringLawHrefGet
end function ThermalNeutronScatteringLawHrefGet

!! Set
subroutine ThermalNeutronScatteringLawHrefSet(handle, href, hrefSize) &
      bind(C, name='ThermalNeutronScatteringLawHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ThermalNeutronScatteringLawHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalThermalNeutronScatteringLaw
