
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalWidth
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function WidthDefaultConst() &
      bind(C, name='WidthDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: WidthDefaultConst
end function WidthDefaultConst

!! Create, default, non-const
function WidthDefault() &
      bind(C, name='WidthDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: WidthDefault
end function WidthDefault

!! Create, general, const
function WidthCreateConst( &
   label, &
   resonanceReaction, &
   degreesOfFreedom, &
   XYs1d, &
   constant1d, &
   regions1d, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='WidthCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), intent(in), value :: degreesOfFreedom
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: WidthCreateConst
end function WidthCreateConst

!! Create, general, non-const
function WidthCreate( &
   label, &
   resonanceReaction, &
   degreesOfFreedom, &
   XYs1d, &
   constant1d, &
   regions1d, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='WidthCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), intent(in), value :: degreesOfFreedom
   type(c_ptr), intent(in), value :: XYs1d
   type(c_ptr), intent(in), value :: constant1d
   type(c_ptr), intent(in), value :: regions1d
   type(c_ptr) :: WidthCreate
end function WidthCreate

!! Assign
subroutine WidthAssign(handleLHS, handleRHS) &
      bind(C, name='WidthAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine WidthAssign

!! Delete
subroutine WidthDelete(handle) &
      bind(C, name='WidthDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine WidthDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function WidthRead(handle, filename, filenameSize) &
      bind(C, name='WidthRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: WidthRead
end function WidthRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function WidthWrite(handle, filename, filenameSize) &
      bind(C, name='WidthWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: WidthWrite
end function WidthWrite

!! Print to standard output, in our prettyprinting format
function WidthPrint(handle) &
      bind(C, name='WidthPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthPrint
end function WidthPrint

!! Print to standard output, as XML
function WidthPrintXML(handle) &
      bind(C, name='WidthPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthPrintXML
end function WidthPrintXML

!! Print to standard output, as JSON
function WidthPrintJSON(handle) &
      bind(C, name='WidthPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthPrintJSON
end function WidthPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function WidthLabelHas(handle) &
      bind(C, name='WidthLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthLabelHas
end function WidthLabelHas

!! Get
function WidthLabelGet(handle) &
      bind(C, name='WidthLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: WidthLabelGet
end function WidthLabelGet

!! Set
subroutine WidthLabelSet(handle, label, labelSize) &
      bind(C, name='WidthLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine WidthLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: resonanceReaction
!! -----------------------------------------------------------------------------

!! Has
function WidthResonanceReactionHas(handle) &
      bind(C, name='WidthResonanceReactionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthResonanceReactionHas
end function WidthResonanceReactionHas

!! Get
function WidthResonanceReactionGet(handle) &
      bind(C, name='WidthResonanceReactionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: WidthResonanceReactionGet
end function WidthResonanceReactionGet

!! Set
subroutine WidthResonanceReactionSet(handle, resonanceReaction, resonanceReactionSize) &
      bind(C, name='WidthResonanceReactionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
end subroutine WidthResonanceReactionSet


!! -----------------------------------------------------------------------------
!! Metadatum: degreesOfFreedom
!! -----------------------------------------------------------------------------

!! Has
function WidthDegreesOfFreedomHas(handle) &
      bind(C, name='WidthDegreesOfFreedomHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthDegreesOfFreedomHas
end function WidthDegreesOfFreedomHas

!! Get
function WidthDegreesOfFreedomGet(handle) &
      bind(C, name='WidthDegreesOfFreedomGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthDegreesOfFreedomGet
end function WidthDegreesOfFreedomGet

!! Set
subroutine WidthDegreesOfFreedomSet(handle, degreesOfFreedom) &
      bind(C, name='WidthDegreesOfFreedomSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: degreesOfFreedom
end subroutine WidthDegreesOfFreedomSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function WidthXYs1dHas(handle) &
      bind(C, name='WidthXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthXYs1dHas
end function WidthXYs1dHas

!! Get, const
function WidthXYs1dGetConst(handle) &
      bind(C, name='WidthXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: WidthXYs1dGetConst
end function WidthXYs1dGetConst

!! Get, non-const
function WidthXYs1dGet(handle) &
      bind(C, name='WidthXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: WidthXYs1dGet
end function WidthXYs1dGet

!! Set
subroutine WidthXYs1dSet(handle, fieldHandle) &
      bind(C, name='WidthXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WidthXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function WidthConstant1dHas(handle) &
      bind(C, name='WidthConstant1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthConstant1dHas
end function WidthConstant1dHas

!! Get, const
function WidthConstant1dGetConst(handle) &
      bind(C, name='WidthConstant1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: WidthConstant1dGetConst
end function WidthConstant1dGetConst

!! Get, non-const
function WidthConstant1dGet(handle) &
      bind(C, name='WidthConstant1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: WidthConstant1dGet
end function WidthConstant1dGet

!! Set
subroutine WidthConstant1dSet(handle, fieldHandle) &
      bind(C, name='WidthConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WidthConstant1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function WidthRegions1dHas(handle) &
      bind(C, name='WidthRegions1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: WidthRegions1dHas
end function WidthRegions1dHas

!! Get, const
function WidthRegions1dGetConst(handle) &
      bind(C, name='WidthRegions1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: WidthRegions1dGetConst
end function WidthRegions1dGetConst

!! Get, non-const
function WidthRegions1dGet(handle) &
      bind(C, name='WidthRegions1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: WidthRegions1dGet
end function WidthRegions1dGet

!! Set
subroutine WidthRegions1dSet(handle, fieldHandle) &
      bind(C, name='WidthRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine WidthRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalWidth
