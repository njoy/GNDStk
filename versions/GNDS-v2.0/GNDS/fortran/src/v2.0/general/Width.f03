
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalWidth
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function WidthDefaultConst() &
      bind(C, name='WidthDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function WidthDefaultConst

!! Create, default
function WidthDefault() &
      bind(C, name='WidthDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function WidthDefault

!! Create, general, const
function WidthCreateConst( &
   label, &
   resonanceReaction, &
   degreesOfFreedom, &
   XYs1d, &
   constant1d, &
   regions1d, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='WidthCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), value, intent(in) :: degreesOfFreedom
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: constant1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function WidthCreateConst

!! Create, general
function WidthCreate( &
   label, &
   resonanceReaction, &
   degreesOfFreedom, &
   XYs1d, &
   constant1d, &
   regions1d, &
   labelSize, &
   resonanceReactionSize &
) &
      bind(C, name='WidthCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
   integer(c_int), value, intent(in) :: degreesOfFreedom
   type(c_ptr), value :: XYs1d
   type(c_ptr), value :: constant1d
   type(c_ptr), value :: regions1d
   type(c_ptr) :: handle
end function WidthCreate

!! Assign
subroutine WidthAssign(handleLHS, handleRHS) &
      bind(C, name='WidthAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine WidthAssign

!! Delete
subroutine WidthDelete(handle) &
      bind(C, name='WidthDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine WidthDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function WidthRead(handle, filename, filenameSize) &
      bind(C, name='WidthRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function WidthRead

!! Write to file
function WidthWrite(handle, filename, filenameSize) &
      bind(C, name='WidthWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function WidthWrite

!! Print to standard output, in our prettyprinting format
function WidthPrint(handle) &
      bind(C, name='WidthPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function WidthPrint

!! Print to standard output, as XML
function WidthPrintXML(handle) &
      bind(C, name='WidthPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function WidthPrintXML

!! Print to standard output, as JSON
function WidthPrintJSON(handle) &
      bind(C, name='WidthPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function WidthPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function WidthLabelHas(handle) &
      bind(C, name='WidthLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WidthLabelHas

!! Get
function WidthLabelGet(handle) &
      bind(C, name='WidthLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function WidthLabelGet

!! Set
subroutine WidthLabelSet(handle, label, labelSize) &
      bind(C, name='WidthLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine WidthLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: resonanceReaction
!! -----------------------------------------------------------------------------

!! Has
function WidthResonanceReactionHas(handle) &
      bind(C, name='WidthResonanceReactionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WidthResonanceReactionHas

!! Get
function WidthResonanceReactionGet(handle) &
      bind(C, name='WidthResonanceReactionGet') &
      result(resonanceReaction)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resonanceReaction
end function WidthResonanceReactionGet

!! Set
subroutine WidthResonanceReactionSet(handle, resonanceReaction, resonanceReactionSize) &
      bind(C, name='WidthResonanceReactionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: resonanceReactionSize
   character(c_char), intent(in) :: resonanceReaction(resonanceReactionSize)
end subroutine WidthResonanceReactionSet


!! -----------------------------------------------------------------------------
!! Metadatum: degreesOfFreedom
!! -----------------------------------------------------------------------------

!! Has
function WidthDegreesOfFreedomHas(handle) &
      bind(C, name='WidthDegreesOfFreedomHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WidthDegreesOfFreedomHas

!! Get
function WidthDegreesOfFreedomGet(handle) &
      bind(C, name='WidthDegreesOfFreedomGet') &
      result(degreesOfFreedom)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: degreesOfFreedom
end function WidthDegreesOfFreedomGet

!! Set
subroutine WidthDegreesOfFreedomSet(handle, degreesOfFreedom, degreesOfFreedomSize) &
      bind(C, name='WidthDegreesOfFreedomSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: degreesOfFreedomSize
   character(c_char), intent(in) :: degreesOfFreedom(degreesOfFreedomSize)
end subroutine WidthDegreesOfFreedomSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function WidthXYs1dHas(handle) &
      bind(C, name='WidthXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WidthXYs1dHas

!! Get, const
function WidthXYs1dGetConst(handle) &
      bind(C, name='WidthXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function WidthXYs1dGetConst

!! Get
function WidthXYs1dGet(handle) &
      bind(C, name='WidthXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function WidthXYs1dGet

!! Set
subroutine WidthXYs1dSet(handle, fieldHandle) &
      bind(C, name='WidthXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine WidthXYs1dSet


!! -----------------------------------------------------------------------------
!! Child: constant1d
!! -----------------------------------------------------------------------------

!! Has
function WidthConstant1dHas(handle) &
      bind(C, name='WidthConstant1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WidthConstant1dHas

!! Get, const
function WidthConstant1dGetConst(handle) &
      bind(C, name='WidthConstant1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function WidthConstant1dGetConst

!! Get
function WidthConstant1dGet(handle) &
      bind(C, name='WidthConstant1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function WidthConstant1dGet

!! Set
subroutine WidthConstant1dSet(handle, fieldHandle) &
      bind(C, name='WidthConstant1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine WidthConstant1dSet


!! -----------------------------------------------------------------------------
!! Child: regions1d
!! -----------------------------------------------------------------------------

!! Has
function WidthRegions1dHas(handle) &
      bind(C, name='WidthRegions1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function WidthRegions1dHas

!! Get, const
function WidthRegions1dGetConst(handle) &
      bind(C, name='WidthRegions1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function WidthRegions1dGetConst

!! Get
function WidthRegions1dGet(handle) &
      bind(C, name='WidthRegions1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function WidthRegions1dGet

!! Set
subroutine WidthRegions1dSet(handle, fieldHandle) &
      bind(C, name='WidthRegions1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine WidthRegions1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalWidth
