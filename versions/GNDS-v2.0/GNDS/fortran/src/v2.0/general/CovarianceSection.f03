
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCovarianceSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CovarianceSectionDefaultConst() &
      bind(C, name='CovarianceSectionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceSectionDefaultConst

!! Create, default
function CovarianceSectionDefault() &
      bind(C, name='CovarianceSectionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceSectionDefault

!! Create, general, const
function CovarianceSectionCreateConst( &
   label, &
   crossTerm, &
   rowData, &
   columnData, &
   covarianceMatrix, &
   mixed, &
   sum, &
   labelSize &
) &
      bind(C, name='CovarianceSectionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   logical(c_bool), value, intent(in) :: crossTerm
   type(c_ptr), value :: rowData
   type(c_ptr), value :: columnData
   type(c_ptr), value :: covarianceMatrix
   type(c_ptr), value :: mixed
   type(c_ptr), value :: sum
   type(c_ptr) :: handle
end function CovarianceSectionCreateConst

!! Create, general
function CovarianceSectionCreate( &
   label, &
   crossTerm, &
   rowData, &
   columnData, &
   covarianceMatrix, &
   mixed, &
   sum, &
   labelSize &
) &
      bind(C, name='CovarianceSectionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   logical(c_bool), value, intent(in) :: crossTerm
   type(c_ptr), value :: rowData
   type(c_ptr), value :: columnData
   type(c_ptr), value :: covarianceMatrix
   type(c_ptr), value :: mixed
   type(c_ptr), value :: sum
   type(c_ptr) :: handle
end function CovarianceSectionCreate

!! Assign
subroutine CovarianceSectionAssign(handleLHS, handleRHS) &
      bind(C, name='CovarianceSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CovarianceSectionAssign

!! Delete
subroutine CovarianceSectionDelete(handle) &
      bind(C, name='CovarianceSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CovarianceSectionRead(handle, filename, filenameSize) &
      bind(C, name='CovarianceSectionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceSectionRead

!! Write to file
function CovarianceSectionWrite(handle, filename, filenameSize) &
      bind(C, name='CovarianceSectionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceSectionWrite

!! Print to standard output, in our prettyprinting format
function CovarianceSectionPrint(handle) &
      bind(C, name='CovarianceSectionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSectionPrint

!! Print to standard output, as XML
function CovarianceSectionPrintXML(handle) &
      bind(C, name='CovarianceSectionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSectionPrintXML

!! Print to standard output, as JSON
function CovarianceSectionPrintJSON(handle) &
      bind(C, name='CovarianceSectionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionLabelHas(handle) &
      bind(C, name='CovarianceSectionLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionLabelHas

!! Get
function CovarianceSectionLabelGet(handle) &
      bind(C, name='CovarianceSectionLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function CovarianceSectionLabelGet

!! Set
subroutine CovarianceSectionLabelSet(handle, label, labelSize) &
      bind(C, name='CovarianceSectionLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CovarianceSectionLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: crossTerm
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionCrossTermHas(handle) &
      bind(C, name='CovarianceSectionCrossTermHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionCrossTermHas

!! Get
function CovarianceSectionCrossTermGet(handle) &
      bind(C, name='CovarianceSectionCrossTermGet') &
      result(crossTerm)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: crossTerm
end function CovarianceSectionCrossTermGet

!! Set
subroutine CovarianceSectionCrossTermSet(handle, crossTerm, crossTermSize) &
      bind(C, name='CovarianceSectionCrossTermSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: crossTermSize
   character(c_char), intent(in) :: crossTerm(crossTermSize)
end subroutine CovarianceSectionCrossTermSet


!! -----------------------------------------------------------------------------
!! Child: rowData
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionRowDataHas(handle) &
      bind(C, name='CovarianceSectionRowDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionRowDataHas

!! Get, const
function CovarianceSectionRowDataGetConst(handle) &
      bind(C, name='CovarianceSectionRowDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionRowDataGetConst

!! Get
function CovarianceSectionRowDataGet(handle) &
      bind(C, name='CovarianceSectionRowDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionRowDataGet

!! Set
subroutine CovarianceSectionRowDataSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionRowDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSectionRowDataSet


!! -----------------------------------------------------------------------------
!! Child: columnData
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionColumnDataHas(handle) &
      bind(C, name='CovarianceSectionColumnDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionColumnDataHas

!! Get, const
function CovarianceSectionColumnDataGetConst(handle) &
      bind(C, name='CovarianceSectionColumnDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionColumnDataGetConst

!! Get
function CovarianceSectionColumnDataGet(handle) &
      bind(C, name='CovarianceSectionColumnDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionColumnDataGet

!! Set
subroutine CovarianceSectionColumnDataSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionColumnDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSectionColumnDataSet


!! -----------------------------------------------------------------------------
!! Child: covarianceMatrix
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionCovarianceMatrixHas(handle) &
      bind(C, name='CovarianceSectionCovarianceMatrixHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionCovarianceMatrixHas

!! Get, const
function CovarianceSectionCovarianceMatrixGetConst(handle) &
      bind(C, name='CovarianceSectionCovarianceMatrixGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionCovarianceMatrixGetConst

!! Get
function CovarianceSectionCovarianceMatrixGet(handle) &
      bind(C, name='CovarianceSectionCovarianceMatrixGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionCovarianceMatrixGet

!! Set
subroutine CovarianceSectionCovarianceMatrixSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionCovarianceMatrixSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSectionCovarianceMatrixSet


!! -----------------------------------------------------------------------------
!! Child: mixed
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionMixedHas(handle) &
      bind(C, name='CovarianceSectionMixedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionMixedHas

!! Get, const
function CovarianceSectionMixedGetConst(handle) &
      bind(C, name='CovarianceSectionMixedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionMixedGetConst

!! Get
function CovarianceSectionMixedGet(handle) &
      bind(C, name='CovarianceSectionMixedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionMixedGet

!! Set
subroutine CovarianceSectionMixedSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionMixedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSectionMixedSet


!! -----------------------------------------------------------------------------
!! Child: sum
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionSumHas(handle) &
      bind(C, name='CovarianceSectionSumHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSectionSumHas

!! Get, const
function CovarianceSectionSumGetConst(handle) &
      bind(C, name='CovarianceSectionSumGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionSumGetConst

!! Get
function CovarianceSectionSumGet(handle) &
      bind(C, name='CovarianceSectionSumGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSectionSumGet

!! Set
subroutine CovarianceSectionSumSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionSumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSectionSumSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCovarianceSection
