
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCovarianceSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CovarianceSectionDefaultConst() &
      bind(C, name='CovarianceSectionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CovarianceSectionDefaultConst
end function CovarianceSectionDefaultConst

!! Create, default
function CovarianceSectionDefault() &
      bind(C, name='CovarianceSectionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CovarianceSectionDefault
end function CovarianceSectionDefault

!! Create, general, const
function CovarianceSectionCreateConst( &
   label, &
   crossTerm, &
   rowData, &
   columnData, &
   covarianceMatrix, &
   mixed, &
   sum, &
   labelSize &
) &
      bind(C, name='CovarianceSectionCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   logical(c_bool), intent(in), value :: crossTerm
   type(c_ptr), intent(in), value :: rowData
   type(c_ptr), intent(in), value :: columnData
   type(c_ptr), intent(in), value :: covarianceMatrix
   type(c_ptr), intent(in), value :: mixed
   type(c_ptr), intent(in), value :: sum
   type(c_ptr) :: CovarianceSectionCreateConst
end function CovarianceSectionCreateConst

!! Create, general
function CovarianceSectionCreate( &
   label, &
   crossTerm, &
   rowData, &
   columnData, &
   covarianceMatrix, &
   mixed, &
   sum, &
   labelSize &
) &
      bind(C, name='CovarianceSectionCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   logical(c_bool), intent(in), value :: crossTerm
   type(c_ptr), intent(in), value :: rowData
   type(c_ptr), intent(in), value :: columnData
   type(c_ptr), intent(in), value :: covarianceMatrix
   type(c_ptr), intent(in), value :: mixed
   type(c_ptr), intent(in), value :: sum
   type(c_ptr) :: CovarianceSectionCreate
end function CovarianceSectionCreate

!! Assign
subroutine CovarianceSectionAssign(handleLHS, handleRHS) &
      bind(C, name='CovarianceSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine CovarianceSectionAssign

!! Delete
subroutine CovarianceSectionDelete(handle) &
      bind(C, name='CovarianceSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CovarianceSectionRead(handle, filename, filenameSize) &
      bind(C, name='CovarianceSectionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CovarianceSectionRead
end function CovarianceSectionRead

!! Write to file
function CovarianceSectionWrite(handle, filename, filenameSize) &
      bind(C, name='CovarianceSectionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CovarianceSectionWrite
end function CovarianceSectionWrite

!! Print to standard output, in our prettyprinting format
function CovarianceSectionPrint(handle) &
      bind(C, name='CovarianceSectionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionPrint
end function CovarianceSectionPrint

!! Print to standard output, as XML
function CovarianceSectionPrintXML(handle) &
      bind(C, name='CovarianceSectionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionPrintXML
end function CovarianceSectionPrintXML

!! Print to standard output, as JSON
function CovarianceSectionPrintJSON(handle) &
      bind(C, name='CovarianceSectionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionPrintJSON
end function CovarianceSectionPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionLabelHas(handle) &
      bind(C, name='CovarianceSectionLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionLabelHas
end function CovarianceSectionLabelHas

!! Get
function CovarianceSectionLabelGet(handle) &
      bind(C, name='CovarianceSectionLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CovarianceSectionLabelGet
end function CovarianceSectionLabelGet

!! Set
subroutine CovarianceSectionLabelSet(handle, label, labelSize) &
      bind(C, name='CovarianceSectionLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CovarianceSectionLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: crossTerm
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionCrossTermHas(handle) &
      bind(C, name='CovarianceSectionCrossTermHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionCrossTermHas
end function CovarianceSectionCrossTermHas

!! Get
function CovarianceSectionCrossTermGet(handle) &
      bind(C, name='CovarianceSectionCrossTermGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   logical(c_bool) :: CovarianceSectionCrossTermGet
end function CovarianceSectionCrossTermGet

!! Set
subroutine CovarianceSectionCrossTermSet(handle, crossTerm) &
      bind(C, name='CovarianceSectionCrossTermSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   logical(c_bool), intent(in), value :: crossTerm
end subroutine CovarianceSectionCrossTermSet


!! -----------------------------------------------------------------------------
!! Child: rowData
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionRowDataHas(handle) &
      bind(C, name='CovarianceSectionRowDataHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionRowDataHas
end function CovarianceSectionRowDataHas

!! Get, const
function CovarianceSectionRowDataGetConst(handle) &
      bind(C, name='CovarianceSectionRowDataGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CovarianceSectionRowDataGetConst
end function CovarianceSectionRowDataGetConst

!! Get
function CovarianceSectionRowDataGet(handle) &
      bind(C, name='CovarianceSectionRowDataGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CovarianceSectionRowDataGet
end function CovarianceSectionRowDataGet

!! Set
subroutine CovarianceSectionRowDataSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionRowDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionRowDataSet


!! -----------------------------------------------------------------------------
!! Child: columnData
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionColumnDataHas(handle) &
      bind(C, name='CovarianceSectionColumnDataHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionColumnDataHas
end function CovarianceSectionColumnDataHas

!! Get, const
function CovarianceSectionColumnDataGetConst(handle) &
      bind(C, name='CovarianceSectionColumnDataGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CovarianceSectionColumnDataGetConst
end function CovarianceSectionColumnDataGetConst

!! Get
function CovarianceSectionColumnDataGet(handle) &
      bind(C, name='CovarianceSectionColumnDataGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CovarianceSectionColumnDataGet
end function CovarianceSectionColumnDataGet

!! Set
subroutine CovarianceSectionColumnDataSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionColumnDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionColumnDataSet


!! -----------------------------------------------------------------------------
!! Child: covarianceMatrix
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionCovarianceMatrixHas(handle) &
      bind(C, name='CovarianceSectionCovarianceMatrixHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionCovarianceMatrixHas
end function CovarianceSectionCovarianceMatrixHas

!! Get, const
function CovarianceSectionCovarianceMatrixGetConst(handle) &
      bind(C, name='CovarianceSectionCovarianceMatrixGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CovarianceSectionCovarianceMatrixGetConst
end function CovarianceSectionCovarianceMatrixGetConst

!! Get
function CovarianceSectionCovarianceMatrixGet(handle) &
      bind(C, name='CovarianceSectionCovarianceMatrixGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CovarianceSectionCovarianceMatrixGet
end function CovarianceSectionCovarianceMatrixGet

!! Set
subroutine CovarianceSectionCovarianceMatrixSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionCovarianceMatrixSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionCovarianceMatrixSet


!! -----------------------------------------------------------------------------
!! Child: mixed
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionMixedHas(handle) &
      bind(C, name='CovarianceSectionMixedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionMixedHas
end function CovarianceSectionMixedHas

!! Get, const
function CovarianceSectionMixedGetConst(handle) &
      bind(C, name='CovarianceSectionMixedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CovarianceSectionMixedGetConst
end function CovarianceSectionMixedGetConst

!! Get
function CovarianceSectionMixedGet(handle) &
      bind(C, name='CovarianceSectionMixedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CovarianceSectionMixedGet
end function CovarianceSectionMixedGet

!! Set
subroutine CovarianceSectionMixedSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionMixedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionMixedSet


!! -----------------------------------------------------------------------------
!! Child: sum
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSectionSumHas(handle) &
      bind(C, name='CovarianceSectionSumHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CovarianceSectionSumHas
end function CovarianceSectionSumHas

!! Get, const
function CovarianceSectionSumGetConst(handle) &
      bind(C, name='CovarianceSectionSumGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CovarianceSectionSumGetConst
end function CovarianceSectionSumGetConst

!! Get
function CovarianceSectionSumGet(handle) &
      bind(C, name='CovarianceSectionSumGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: CovarianceSectionSumGet
end function CovarianceSectionSumGet

!! Set
subroutine CovarianceSectionSumSet(handle, fieldHandle) &
      bind(C, name='CovarianceSectionSumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine CovarianceSectionSumSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCovarianceSection
