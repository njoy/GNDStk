
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalThermalNeutronScatteringLaw1d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ThermalNeutronScatteringLaw1dDefaultConst() &
      bind(C, name='ThermalNeutronScatteringLaw1dDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ThermalNeutronScatteringLaw1dDefaultConst
end function ThermalNeutronScatteringLaw1dDefaultConst

!! Create, default, non-const
function ThermalNeutronScatteringLaw1dDefault() &
      bind(C, name='ThermalNeutronScatteringLaw1dDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ThermalNeutronScatteringLaw1dDefault
end function ThermalNeutronScatteringLaw1dDefault

!! Create, general, const
function ThermalNeutronScatteringLaw1dCreateConst( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ThermalNeutronScatteringLaw1dCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: ThermalNeutronScatteringLaw1dCreateConst
end function ThermalNeutronScatteringLaw1dCreateConst

!! Create, general, non-const
function ThermalNeutronScatteringLaw1dCreate( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ThermalNeutronScatteringLaw1dCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: ThermalNeutronScatteringLaw1dCreate
end function ThermalNeutronScatteringLaw1dCreate

!! Assign
subroutine ThermalNeutronScatteringLaw1dAssign(handleLHS, handleRHS) &
      bind(C, name='ThermalNeutronScatteringLaw1dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ThermalNeutronScatteringLaw1dAssign

!! Delete
subroutine ThermalNeutronScatteringLaw1dDelete(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ThermalNeutronScatteringLaw1dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ThermalNeutronScatteringLaw1dRead(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ThermalNeutronScatteringLaw1dRead
end function ThermalNeutronScatteringLaw1dRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ThermalNeutronScatteringLaw1dWrite(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ThermalNeutronScatteringLaw1dWrite
end function ThermalNeutronScatteringLaw1dWrite

!! Print to standard output, in our prettyprinting format
function ThermalNeutronScatteringLaw1dPrint(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLaw1dPrint
end function ThermalNeutronScatteringLaw1dPrint

!! Print to standard output, as XML
function ThermalNeutronScatteringLaw1dPrintXML(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLaw1dPrintXML
end function ThermalNeutronScatteringLaw1dPrintXML

!! Print to standard output, as JSON
function ThermalNeutronScatteringLaw1dPrintJSON(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLaw1dPrintJSON
end function ThermalNeutronScatteringLaw1dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw1dLabelHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLaw1dLabelHas
end function ThermalNeutronScatteringLaw1dLabelHas

!! Get
function ThermalNeutronScatteringLaw1dLabelGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ThermalNeutronScatteringLaw1dLabelGet
end function ThermalNeutronScatteringLaw1dLabelGet

!! Set
subroutine ThermalNeutronScatteringLaw1dLabelSet(handle, label, labelSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ThermalNeutronScatteringLaw1dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw1dHrefHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ThermalNeutronScatteringLaw1dHrefHas
end function ThermalNeutronScatteringLaw1dHrefHas

!! Get
function ThermalNeutronScatteringLaw1dHrefGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ThermalNeutronScatteringLaw1dHrefGet
end function ThermalNeutronScatteringLaw1dHrefGet

!! Set
subroutine ThermalNeutronScatteringLaw1dHrefSet(handle, href, hrefSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ThermalNeutronScatteringLaw1dHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalThermalNeutronScatteringLaw1d
