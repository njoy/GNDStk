
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalThermalNeutronScatteringLaw1d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ThermalNeutronScatteringLaw1dDefaultConst() &
      bind(C, name='ThermalNeutronScatteringLaw1dDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw1dDefaultConst

!! Create, default
function ThermalNeutronScatteringLaw1dDefault() &
      bind(C, name='ThermalNeutronScatteringLaw1dDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw1dDefault

!! Create, general, const
function ThermalNeutronScatteringLaw1dCreateConst( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ThermalNeutronScatteringLaw1dCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw1dCreateConst

!! Create, general
function ThermalNeutronScatteringLaw1dCreate( &
   label, &
   href, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='ThermalNeutronScatteringLaw1dCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw1dCreate

!! Assign
subroutine ThermalNeutronScatteringLaw1dAssign(handleLHS, handleRHS) &
      bind(C, name='ThermalNeutronScatteringLaw1dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ThermalNeutronScatteringLaw1dAssign

!! Delete
subroutine ThermalNeutronScatteringLaw1dDelete(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ThermalNeutronScatteringLaw1dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ThermalNeutronScatteringLaw1dRead(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw1dRead

!! Write to file
function ThermalNeutronScatteringLaw1dWrite(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw1dWrite

!! Print to standard output, in our prettyprinting format
function ThermalNeutronScatteringLaw1dPrint(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw1dPrint

!! Print to standard output, as XML
function ThermalNeutronScatteringLaw1dPrintXML(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw1dPrintXML

!! Print to standard output, as JSON
function ThermalNeutronScatteringLaw1dPrintJSON(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw1dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw1dLabelHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThermalNeutronScatteringLaw1dLabelHas

!! Get
function ThermalNeutronScatteringLaw1dLabelGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ThermalNeutronScatteringLaw1dLabelGet

!! Set
subroutine ThermalNeutronScatteringLaw1dLabelSet(handle, label, labelSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ThermalNeutronScatteringLaw1dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw1dHrefHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dHrefHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThermalNeutronScatteringLaw1dHrefHas

!! Get
function ThermalNeutronScatteringLaw1dHrefGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw1dHrefGet') &
      result(href)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: href
end function ThermalNeutronScatteringLaw1dHrefGet

!! Set
subroutine ThermalNeutronScatteringLaw1dHrefSet(handle, href, hrefSize) &
      bind(C, name='ThermalNeutronScatteringLaw1dHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine ThermalNeutronScatteringLaw1dHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalThermalNeutronScatteringLaw1d
