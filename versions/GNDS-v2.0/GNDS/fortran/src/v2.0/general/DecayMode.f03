
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDecayMode
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DecayModeDefaultConst() &
      bind(C, name='DecayModeDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DecayModeDefaultConst

!! Create, default
function DecayModeDefault() &
      bind(C, name='DecayModeDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DecayModeDefault

!! Create, general, const
function DecayModeCreateConst( &
   label, &
   mode, &
   probability, &
   decayPath, &
   photonEmissionProbabilities, &
   Q, &
   spectra, &
   labelSize, &
   modeSize &
) &
      bind(C, name='DecayModeCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: modeSize
   character(c_char), intent(in) :: mode(modeSize)
   type(c_ptr), value :: probability
   type(c_ptr), value :: decayPath
   type(c_ptr), value :: photonEmissionProbabilities
   type(c_ptr), value :: Q
   type(c_ptr), value :: spectra
   type(c_ptr) :: handle
end function DecayModeCreateConst

!! Create, general
function DecayModeCreate( &
   label, &
   mode, &
   probability, &
   decayPath, &
   photonEmissionProbabilities, &
   Q, &
   spectra, &
   labelSize, &
   modeSize &
) &
      bind(C, name='DecayModeCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: modeSize
   character(c_char), intent(in) :: mode(modeSize)
   type(c_ptr), value :: probability
   type(c_ptr), value :: decayPath
   type(c_ptr), value :: photonEmissionProbabilities
   type(c_ptr), value :: Q
   type(c_ptr), value :: spectra
   type(c_ptr) :: handle
end function DecayModeCreate

!! Assign
subroutine DecayModeAssign(handleLHS, handleRHS) &
      bind(C, name='DecayModeAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DecayModeAssign

!! Delete
subroutine DecayModeDelete(handle) &
      bind(C, name='DecayModeDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DecayModeDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DecayModeRead(handle, filename, filenameSize) &
      bind(C, name='DecayModeRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DecayModeRead

!! Write to file
function DecayModeWrite(handle, filename, filenameSize) &
      bind(C, name='DecayModeWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DecayModeWrite

!! Print to standard output, in our prettyprinting format
function DecayModePrint(handle) &
      bind(C, name='DecayModePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayModePrint

!! Print to standard output, as XML
function DecayModePrintXML(handle) &
      bind(C, name='DecayModePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayModePrintXML

!! Print to standard output, as JSON
function DecayModePrintJSON(handle) &
      bind(C, name='DecayModePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayModePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function DecayModeLabelHas(handle) &
      bind(C, name='DecayModeLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeLabelHas

!! Get
function DecayModeLabelGet(handle) &
      bind(C, name='DecayModeLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function DecayModeLabelGet

!! Set
subroutine DecayModeLabelSet(handle, label, labelSize) &
      bind(C, name='DecayModeLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine DecayModeLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: mode
!! -----------------------------------------------------------------------------

!! Has
function DecayModeModeHas(handle) &
      bind(C, name='DecayModeModeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeModeHas

!! Get
function DecayModeModeGet(handle) &
      bind(C, name='DecayModeModeGet') &
      result(mode)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: mode
end function DecayModeModeGet

!! Set
subroutine DecayModeModeSet(handle, mode, modeSize) &
      bind(C, name='DecayModeModeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: modeSize
   character(c_char), intent(in) :: mode(modeSize)
end subroutine DecayModeModeSet


!! -----------------------------------------------------------------------------
!! Child: probability
!! -----------------------------------------------------------------------------

!! Has
function DecayModeProbabilityHas(handle) &
      bind(C, name='DecayModeProbabilityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeProbabilityHas

!! Get, const
function DecayModeProbabilityGetConst(handle) &
      bind(C, name='DecayModeProbabilityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeProbabilityGetConst

!! Get
function DecayModeProbabilityGet(handle) &
      bind(C, name='DecayModeProbabilityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeProbabilityGet

!! Set
subroutine DecayModeProbabilitySet(handle, fieldHandle) &
      bind(C, name='DecayModeProbabilitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayModeProbabilitySet


!! -----------------------------------------------------------------------------
!! Child: decayPath
!! -----------------------------------------------------------------------------

!! Has
function DecayModeDecayPathHas(handle) &
      bind(C, name='DecayModeDecayPathHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeDecayPathHas

!! Get, const
function DecayModeDecayPathGetConst(handle) &
      bind(C, name='DecayModeDecayPathGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeDecayPathGetConst

!! Get
function DecayModeDecayPathGet(handle) &
      bind(C, name='DecayModeDecayPathGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeDecayPathGet

!! Set
subroutine DecayModeDecayPathSet(handle, fieldHandle) &
      bind(C, name='DecayModeDecayPathSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayModeDecayPathSet


!! -----------------------------------------------------------------------------
!! Child: photonEmissionProbabilities
!! -----------------------------------------------------------------------------

!! Has
function DecayModePhotonEmissionProbabilitiesHas(handle) &
      bind(C, name='DecayModePhotonEmissionProbabilitiesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModePhotonEmissionProbabilitiesHas

!! Get, const
function DecayModePhotonEmissionProbabilitiesGetConst(handle) &
      bind(C, name='DecayModePhotonEmissionProbabilitiesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModePhotonEmissionProbabilitiesGetConst

!! Get
function DecayModePhotonEmissionProbabilitiesGet(handle) &
      bind(C, name='DecayModePhotonEmissionProbabilitiesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModePhotonEmissionProbabilitiesGet

!! Set
subroutine DecayModePhotonEmissionProbabilitiesSet(handle, fieldHandle) &
      bind(C, name='DecayModePhotonEmissionProbabilitiesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayModePhotonEmissionProbabilitiesSet


!! -----------------------------------------------------------------------------
!! Child: Q
!! -----------------------------------------------------------------------------

!! Has
function DecayModeQHas(handle) &
      bind(C, name='DecayModeQHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeQHas

!! Get, const
function DecayModeQGetConst(handle) &
      bind(C, name='DecayModeQGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeQGetConst

!! Get
function DecayModeQGet(handle) &
      bind(C, name='DecayModeQGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeQGet

!! Set
subroutine DecayModeQSet(handle, fieldHandle) &
      bind(C, name='DecayModeQSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayModeQSet


!! -----------------------------------------------------------------------------
!! Child: spectra
!! -----------------------------------------------------------------------------

!! Has
function DecayModeSpectraHas(handle) &
      bind(C, name='DecayModeSpectraHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayModeSpectraHas

!! Get, const
function DecayModeSpectraGetConst(handle) &
      bind(C, name='DecayModeSpectraGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeSpectraGetConst

!! Get
function DecayModeSpectraGet(handle) &
      bind(C, name='DecayModeSpectraGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayModeSpectraGet

!! Set
subroutine DecayModeSpectraSet(handle, fieldHandle) &
      bind(C, name='DecayModeSpectraSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayModeSpectraSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDecayMode
