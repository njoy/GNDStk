
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalXYs1d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function XYs1dDefaultConst() &
      bind(C, name='XYs1dDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function XYs1dDefaultConst

!! Create, default
function XYs1dDefault() &
      bind(C, name='XYs1dDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function XYs1dDefault

!! Create, general, const
function XYs1dCreateConst( &
   label, &
   index, &
   interpolation, &
   outerDomainValue, &
   axes, &
   values, &
   uncertainty, &
   labelSize, &
   interpolationSize &
) &
      bind(C, name='XYs1dCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: interpolationSize
   character(c_char), intent(in) :: interpolation(interpolationSize)
   real(c_double), value, intent(in) :: outerDomainValue
   type(c_ptr), value :: axes
   type(c_ptr), value :: values
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function XYs1dCreateConst

!! Create, general
function XYs1dCreate( &
   label, &
   index, &
   interpolation, &
   outerDomainValue, &
   axes, &
   values, &
   uncertainty, &
   labelSize, &
   interpolationSize &
) &
      bind(C, name='XYs1dCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: interpolationSize
   character(c_char), intent(in) :: interpolation(interpolationSize)
   real(c_double), value, intent(in) :: outerDomainValue
   type(c_ptr), value :: axes
   type(c_ptr), value :: values
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: handle
end function XYs1dCreate

!! Assign
subroutine XYs1dAssign(handleLHS, handleRHS) &
      bind(C, name='XYs1dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine XYs1dAssign

!! Delete
subroutine XYs1dDelete(handle) &
      bind(C, name='XYs1dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine XYs1dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function XYs1dRead(handle, filename, filenameSize) &
      bind(C, name='XYs1dRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function XYs1dRead

!! Write to file
function XYs1dWrite(handle, filename, filenameSize) &
      bind(C, name='XYs1dWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function XYs1dWrite

!! Print to standard output, in our prettyprinting format
function XYs1dPrint(handle) &
      bind(C, name='XYs1dPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function XYs1dPrint

!! Print to standard output, as XML
function XYs1dPrintXML(handle) &
      bind(C, name='XYs1dPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function XYs1dPrintXML

!! Print to standard output, as JSON
function XYs1dPrintJSON(handle) &
      bind(C, name='XYs1dPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function XYs1dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function XYs1dLabelHas(handle) &
      bind(C, name='XYs1dLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dLabelHas

!! Get
function XYs1dLabelGet(handle) &
      bind(C, name='XYs1dLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function XYs1dLabelGet

!! Set
subroutine XYs1dLabelSet(handle, label, labelSize) &
      bind(C, name='XYs1dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine XYs1dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function XYs1dIndexHas(handle) &
      bind(C, name='XYs1dIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dIndexHas

!! Get
function XYs1dIndexGet(handle) &
      bind(C, name='XYs1dIndexGet') &
      result(index)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: index
end function XYs1dIndexGet

!! Set
subroutine XYs1dIndexSet(handle, index, indexSize) &
      bind(C, name='XYs1dIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine XYs1dIndexSet


!! -----------------------------------------------------------------------------
!! Metadatum: interpolation
!! -----------------------------------------------------------------------------

!! Has
function XYs1dInterpolationHas(handle) &
      bind(C, name='XYs1dInterpolationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dInterpolationHas

!! Get
function XYs1dInterpolationGet(handle) &
      bind(C, name='XYs1dInterpolationGet') &
      result(interpolation)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: interpolation
end function XYs1dInterpolationGet

!! Set
subroutine XYs1dInterpolationSet(handle, interpolation, interpolationSize) &
      bind(C, name='XYs1dInterpolationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: interpolationSize
   character(c_char), intent(in) :: interpolation(interpolationSize)
end subroutine XYs1dInterpolationSet


!! -----------------------------------------------------------------------------
!! Metadatum: outerDomainValue
!! -----------------------------------------------------------------------------

!! Has
function XYs1dOuterDomainValueHas(handle) &
      bind(C, name='XYs1dOuterDomainValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dOuterDomainValueHas

!! Get
function XYs1dOuterDomainValueGet(handle) &
      bind(C, name='XYs1dOuterDomainValueGet') &
      result(outerDomainValue)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: outerDomainValue
end function XYs1dOuterDomainValueGet

!! Set
subroutine XYs1dOuterDomainValueSet(handle, outerDomainValue, outerDomainValueSize) &
      bind(C, name='XYs1dOuterDomainValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: outerDomainValueSize
   character(c_char), intent(in) :: outerDomainValue(outerDomainValueSize)
end subroutine XYs1dOuterDomainValueSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function XYs1dAxesHas(handle) &
      bind(C, name='XYs1dAxesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dAxesHas

!! Get, const
function XYs1dAxesGetConst(handle) &
      bind(C, name='XYs1dAxesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs1dAxesGetConst

!! Get
function XYs1dAxesGet(handle) &
      bind(C, name='XYs1dAxesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs1dAxesGet

!! Set
subroutine XYs1dAxesSet(handle, fieldHandle) &
      bind(C, name='XYs1dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine XYs1dAxesSet


!! -----------------------------------------------------------------------------
!! Child: values
!! -----------------------------------------------------------------------------

!! Has
function XYs1dValuesHas(handle) &
      bind(C, name='XYs1dValuesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dValuesHas

!! Get, const
function XYs1dValuesGetConst(handle) &
      bind(C, name='XYs1dValuesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs1dValuesGetConst

!! Get
function XYs1dValuesGet(handle) &
      bind(C, name='XYs1dValuesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs1dValuesGet

!! Set
subroutine XYs1dValuesSet(handle, fieldHandle) &
      bind(C, name='XYs1dValuesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine XYs1dValuesSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function XYs1dUncertaintyHas(handle) &
      bind(C, name='XYs1dUncertaintyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function XYs1dUncertaintyHas

!! Get, const
function XYs1dUncertaintyGetConst(handle) &
      bind(C, name='XYs1dUncertaintyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs1dUncertaintyGetConst

!! Get
function XYs1dUncertaintyGet(handle) &
      bind(C, name='XYs1dUncertaintyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function XYs1dUncertaintyGet

!! Set
subroutine XYs1dUncertaintySet(handle, fieldHandle) &
      bind(C, name='XYs1dUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine XYs1dUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalXYs1d
