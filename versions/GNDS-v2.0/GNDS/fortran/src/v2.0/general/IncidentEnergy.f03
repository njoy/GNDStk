
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIncidentEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IncidentEnergyDefaultConst() &
      bind(C, name='IncidentEnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IncidentEnergyDefaultConst

!! Create, default
function IncidentEnergyDefault() &
      bind(C, name='IncidentEnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function IncidentEnergyDefault

!! Create, general, const
function IncidentEnergyCreateConst( &
   label, &
   energy, &
   yields, &
   labelSize &
) &
      bind(C, name='IncidentEnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: energy
   type(c_ptr), value :: yields
   type(c_ptr) :: handle
end function IncidentEnergyCreateConst

!! Create, general
function IncidentEnergyCreate( &
   label, &
   energy, &
   yields, &
   labelSize &
) &
      bind(C, name='IncidentEnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: energy
   type(c_ptr), value :: yields
   type(c_ptr) :: handle
end function IncidentEnergyCreate

!! Assign
subroutine IncidentEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='IncidentEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine IncidentEnergyAssign

!! Delete
subroutine IncidentEnergyDelete(handle) &
      bind(C, name='IncidentEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IncidentEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function IncidentEnergyRead(handle, filename, filenameSize) &
      bind(C, name='IncidentEnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IncidentEnergyRead

!! Write to file
function IncidentEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='IncidentEnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function IncidentEnergyWrite

!! Print to standard output, in our prettyprinting format
function IncidentEnergyPrint(handle) &
      bind(C, name='IncidentEnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IncidentEnergyPrint

!! Print to standard output, as XML
function IncidentEnergyPrintXML(handle) &
      bind(C, name='IncidentEnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IncidentEnergyPrintXML

!! Print to standard output, as JSON
function IncidentEnergyPrintJSON(handle) &
      bind(C, name='IncidentEnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function IncidentEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function IncidentEnergyLabelHas(handle) &
      bind(C, name='IncidentEnergyLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IncidentEnergyLabelHas

!! Get
function IncidentEnergyLabelGet(handle) &
      bind(C, name='IncidentEnergyLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function IncidentEnergyLabelGet

!! Set
subroutine IncidentEnergyLabelSet(handle, label, labelSize) &
      bind(C, name='IncidentEnergyLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine IncidentEnergyLabelSet


!! -----------------------------------------------------------------------------
!! Child: energy
!! -----------------------------------------------------------------------------

!! Has
function IncidentEnergyEnergyHas(handle) &
      bind(C, name='IncidentEnergyEnergyHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IncidentEnergyEnergyHas

!! Get, const
function IncidentEnergyEnergyGetConst(handle) &
      bind(C, name='IncidentEnergyEnergyGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function IncidentEnergyEnergyGetConst

!! Get
function IncidentEnergyEnergyGet(handle) &
      bind(C, name='IncidentEnergyEnergyGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function IncidentEnergyEnergyGet

!! Set
subroutine IncidentEnergyEnergySet(handle, fieldHandle) &
      bind(C, name='IncidentEnergyEnergySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine IncidentEnergyEnergySet


!! -----------------------------------------------------------------------------
!! Child: yields
!! -----------------------------------------------------------------------------

!! Has
function IncidentEnergyYieldsHas(handle) &
      bind(C, name='IncidentEnergyYieldsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function IncidentEnergyYieldsHas

!! Get, const
function IncidentEnergyYieldsGetConst(handle) &
      bind(C, name='IncidentEnergyYieldsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function IncidentEnergyYieldsGetConst

!! Get
function IncidentEnergyYieldsGet(handle) &
      bind(C, name='IncidentEnergyYieldsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function IncidentEnergyYieldsGet

!! Set
subroutine IncidentEnergyYieldsSet(handle, fieldHandle) &
      bind(C, name='IncidentEnergyYieldsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine IncidentEnergyYieldsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIncidentEnergy
