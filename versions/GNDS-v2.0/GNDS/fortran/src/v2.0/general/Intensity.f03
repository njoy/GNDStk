
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalIntensity
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function IntensityDefaultConst() &
      bind(C, name='IntensityDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IntensityDefaultConst
end function IntensityDefaultConst

!! Create, default
function IntensityDefault() &
      bind(C, name='IntensityDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: IntensityDefault
end function IntensityDefault

!! Create, general, const
function IntensityCreateConst( &
   value, &
   uncertainty &
) &
      bind(C, name='IntensityCreateConst')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: IntensityCreateConst
end function IntensityCreateConst

!! Create, general
function IntensityCreate( &
   value, &
   uncertainty &
) &
      bind(C, name='IntensityCreate')
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   type(c_ptr), value :: uncertainty
   type(c_ptr) :: IntensityCreate
end function IntensityCreate

!! Assign
subroutine IntensityAssign(handleLHS, handleRHS) &
      bind(C, name='IntensityAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine IntensityAssign

!! Delete
subroutine IntensityDelete(handle) &
      bind(C, name='IntensityDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine IntensityDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function IntensityRead(handle, filename, filenameSize) &
      bind(C, name='IntensityRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IntensityRead
end function IntensityRead

!! Write to file
function IntensityWrite(handle, filename, filenameSize) &
      bind(C, name='IntensityWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: IntensityWrite
end function IntensityWrite

!! Print to standard output, in our prettyprinting format
function IntensityPrint(handle) &
      bind(C, name='IntensityPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntensityPrint
end function IntensityPrint

!! Print to standard output, as XML
function IntensityPrintXML(handle) &
      bind(C, name='IntensityPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntensityPrintXML
end function IntensityPrintXML

!! Print to standard output, as JSON
function IntensityPrintJSON(handle) &
      bind(C, name='IntensityPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntensityPrintJSON
end function IntensityPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function IntensityValueHas(handle) &
      bind(C, name='IntensityValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntensityValueHas
end function IntensityValueHas

!! Get
function IntensityValueGet(handle) &
      bind(C, name='IntensityValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: IntensityValueGet
end function IntensityValueGet

!! Set
subroutine IntensityValueSet(handle, value, valueSize) &
      bind(C, name='IntensityValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine IntensityValueSet


!! -----------------------------------------------------------------------------
!! Child: uncertainty
!! -----------------------------------------------------------------------------

!! Has
function IntensityUncertaintyHas(handle) &
      bind(C, name='IntensityUncertaintyHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: IntensityUncertaintyHas
end function IntensityUncertaintyHas

!! Get, const
function IntensityUncertaintyGetConst(handle) &
      bind(C, name='IntensityUncertaintyGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: IntensityUncertaintyGetConst
end function IntensityUncertaintyGetConst

!! Get
function IntensityUncertaintyGet(handle) &
      bind(C, name='IntensityUncertaintyGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: IntensityUncertaintyGet
end function IntensityUncertaintyGet

!! Set
subroutine IntensityUncertaintySet(handle, fieldHandle) &
      bind(C, name='IntensityUncertaintySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine IntensityUncertaintySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalIntensity
