
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalAliases
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function AliasesDefaultConst() &
      bind(C, name='AliasesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AliasesDefaultConst

!! Create, default
function AliasesDefault() &
      bind(C, name='AliasesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function AliasesDefault

!! Create, general, const
function AliasesCreateConst( &
   alias, aliasSize, &
   metaStable, metaStableSize &
) &
      bind(C, name='AliasesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: aliasSize
   type(c_ptr) :: alias(aliasSize)
   integer(c_size_t), value :: metaStableSize
   type(c_ptr) :: metaStable(metaStableSize)
   type(c_ptr) :: handle
end function AliasesCreateConst

!! Create, general
function AliasesCreate( &
   alias, aliasSize, &
   metaStable, metaStableSize &
) &
      bind(C, name='AliasesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: aliasSize
   type(c_ptr) :: alias(aliasSize)
   integer(c_size_t), value :: metaStableSize
   type(c_ptr) :: metaStable(metaStableSize)
   type(c_ptr) :: handle
end function AliasesCreate

!! Assign
subroutine AliasesAssign(handleLHS, handleRHS) &
      bind(C, name='AliasesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine AliasesAssign

!! Delete
subroutine AliasesDelete(handle) &
      bind(C, name='AliasesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AliasesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function AliasesRead(handle, filename, filenameSize) &
      bind(C, name='AliasesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AliasesRead

!! Write to file
function AliasesWrite(handle, filename, filenameSize) &
      bind(C, name='AliasesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function AliasesWrite

!! Print to standard output, in our prettyprinting format
function AliasesPrint(handle) &
      bind(C, name='AliasesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AliasesPrint

!! Print to standard output, as XML
function AliasesPrintXML(handle) &
      bind(C, name='AliasesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AliasesPrintXML

!! Print to standard output, as JSON
function AliasesPrintJSON(handle) &
      bind(C, name='AliasesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function AliasesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: alias
!! -----------------------------------------------------------------------------

!! Has
function AliasesAliasHas(handle) &
      bind(C, name='AliasesAliasHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AliasesAliasHas

!! Clear
subroutine AliasesAliasClear(handle) &
      bind(C, name='AliasesAliasClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AliasesAliasClear

!! Size
function AliasesAliasSize(handle) &
      bind(C, name='AliasesAliasSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function AliasesAliasSize

!! Add
subroutine AliasesAliasAdd(handle, fieldHandle) &
      bind(C, name='AliasesAliasAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesAliasAdd

!! Get, by index \in [0,size), const
function AliasesAliasGetConst(handle, index) &
      bind(C, name='AliasesAliasGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AliasesAliasGetConst

!! Get, by index \in [0,size)
function AliasesAliasGet(handle, index) &
      bind(C, name='AliasesAliasGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AliasesAliasGet

!! Set, by index \in [0,size)
subroutine AliasesAliasSet(handle, index, fieldHandle) &
      bind(C, name='AliasesAliasSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesAliasSet

!! ------------------------
!! Re: metadatum id
!! ------------------------

!! Has, by id
function AliasesAliasHasById(handle, meta, metaSize) &
      bind(C, name='AliasesAliasHasById') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AliasesAliasHasById

!! Get, by id, const
function AliasesAliasGetByIdConst(handle, meta, metaSize) &
      bind(C, name='AliasesAliasGetByIdConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesAliasGetByIdConst

!! Get, by id
function AliasesAliasGetById(handle, meta, metaSize) &
      bind(C, name='AliasesAliasGetById') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesAliasGetById

!! Set, by id
subroutine AliasesAliasSetById(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AliasesAliasSetById')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesAliasSetById

!! ------------------------
!! Re: metadatum pid
!! ------------------------

!! Has, by pid
function AliasesAliasHasByPid(handle, meta, metaSize) &
      bind(C, name='AliasesAliasHasByPid') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AliasesAliasHasByPid

!! Get, by pid, const
function AliasesAliasGetByPidConst(handle, meta, metaSize) &
      bind(C, name='AliasesAliasGetByPidConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesAliasGetByPidConst

!! Get, by pid
function AliasesAliasGetByPid(handle, meta, metaSize) &
      bind(C, name='AliasesAliasGetByPid') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesAliasGetByPid

!! Set, by pid
subroutine AliasesAliasSetByPid(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AliasesAliasSetByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesAliasSetByPid


!! -----------------------------------------------------------------------------
!! Child: metaStable
!! -----------------------------------------------------------------------------

!! Has
function AliasesMetaStableHas(handle) &
      bind(C, name='AliasesMetaStableHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function AliasesMetaStableHas

!! Clear
subroutine AliasesMetaStableClear(handle) &
      bind(C, name='AliasesMetaStableClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine AliasesMetaStableClear

!! Size
function AliasesMetaStableSize(handle) &
      bind(C, name='AliasesMetaStableSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function AliasesMetaStableSize

!! Add
subroutine AliasesMetaStableAdd(handle, fieldHandle) &
      bind(C, name='AliasesMetaStableAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesMetaStableAdd

!! Get, by index \in [0,size), const
function AliasesMetaStableGetConst(handle, index) &
      bind(C, name='AliasesMetaStableGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetConst

!! Get, by index \in [0,size)
function AliasesMetaStableGet(handle, index) &
      bind(C, name='AliasesMetaStableGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGet

!! Set, by index \in [0,size)
subroutine AliasesMetaStableSet(handle, index, fieldHandle) &
      bind(C, name='AliasesMetaStableSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesMetaStableSet

!! ------------------------
!! Re: metadatum id
!! ------------------------

!! Has, by id
function AliasesMetaStableHasById(handle, meta, metaSize) &
      bind(C, name='AliasesMetaStableHasById') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AliasesMetaStableHasById

!! Get, by id, const
function AliasesMetaStableGetByIdConst(handle, meta, metaSize) &
      bind(C, name='AliasesMetaStableGetByIdConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetByIdConst

!! Get, by id
function AliasesMetaStableGetById(handle, meta, metaSize) &
      bind(C, name='AliasesMetaStableGetById') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetById

!! Set, by id
subroutine AliasesMetaStableSetById(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AliasesMetaStableSetById')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesMetaStableSetById

!! ------------------------
!! Re: metadatum pid
!! ------------------------

!! Has, by pid
function AliasesMetaStableHasByPid(handle, meta, metaSize) &
      bind(C, name='AliasesMetaStableHasByPid') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function AliasesMetaStableHasByPid

!! Get, by pid, const
function AliasesMetaStableGetByPidConst(handle, meta, metaSize) &
      bind(C, name='AliasesMetaStableGetByPidConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetByPidConst

!! Get, by pid
function AliasesMetaStableGetByPid(handle, meta, metaSize) &
      bind(C, name='AliasesMetaStableGetByPid') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetByPid

!! Set, by pid
subroutine AliasesMetaStableSetByPid(handle, meta, metaSize, fieldHandle) &
      bind(C, name='AliasesMetaStableSetByPid')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesMetaStableSetByPid

!! ------------------------
!! Re: metadatum metaStableIndex
!! ------------------------

!! Has, by metaStableIndex
function AliasesMetaStableHasByMetaStableIndex(handle, meta) &
      bind(C, name='AliasesMetaStableHasByMetaStableIndex') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function AliasesMetaStableHasByMetaStableIndex

!! Get, by metaStableIndex, const
function AliasesMetaStableGetByMetaStableIndexConst(handle, meta) &
      bind(C, name='AliasesMetaStableGetByMetaStableIndexConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetByMetaStableIndexConst

!! Get, by metaStableIndex
function AliasesMetaStableGetByMetaStableIndex(handle, meta) &
      bind(C, name='AliasesMetaStableGetByMetaStableIndex') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function AliasesMetaStableGetByMetaStableIndex

!! Set, by metaStableIndex
subroutine AliasesMetaStableSetByMetaStableIndex(handle, meta, fieldHandle) &
      bind(C, name='AliasesMetaStableSetByMetaStableIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine AliasesMetaStableSetByMetaStableIndex


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalAliases
