
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDate
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DateDefaultConst() &
      bind(C, name='DateDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DateDefaultConst

!! Create, default
function DateDefault() &
      bind(C, name='DateDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DateDefault

!! Create, general, const
function DateCreateConst( &
   value, &
   dateType, &
   valueSize, &
   dateTypeSize &
) &
      bind(C, name='DateCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
   integer(c_size_t), intent(in), value :: dateTypeSize
   character(c_char), intent(in) :: dateType(dateTypeSize)
   type(c_ptr) :: handle
end function DateCreateConst

!! Create, general
function DateCreate( &
   value, &
   dateType, &
   valueSize, &
   dateTypeSize &
) &
      bind(C, name='DateCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
   integer(c_size_t), intent(in), value :: dateTypeSize
   character(c_char), intent(in) :: dateType(dateTypeSize)
   type(c_ptr) :: handle
end function DateCreate

!! Assign
subroutine DateAssign(handleLHS, handleRHS) &
      bind(C, name='DateAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DateAssign

!! Delete
subroutine DateDelete(handle) &
      bind(C, name='DateDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DateDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DateRead(handle, filename, filenameSize) &
      bind(C, name='DateRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DateRead

!! Write to file
function DateWrite(handle, filename, filenameSize) &
      bind(C, name='DateWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DateWrite

!! Print to standard output, in our prettyprinting format
function DatePrint(handle) &
      bind(C, name='DatePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DatePrint

!! Print to standard output, as XML
function DatePrintXML(handle) &
      bind(C, name='DatePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DatePrintXML

!! Print to standard output, as JSON
function DatePrintJSON(handle) &
      bind(C, name='DatePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DatePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function DateValueHas(handle) &
      bind(C, name='DateValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DateValueHas

!! Get
function DateValueGet(handle) &
      bind(C, name='DateValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: value
end function DateValueGet

!! Set
subroutine DateValueSet(handle, value, valueSize) &
      bind(C, name='DateValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine DateValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: dateType
!! -----------------------------------------------------------------------------

!! Has
function DateDateTypeHas(handle) &
      bind(C, name='DateDateTypeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DateDateTypeHas

!! Get
function DateDateTypeGet(handle) &
      bind(C, name='DateDateTypeGet') &
      result(dateType)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: dateType
end function DateDateTypeGet

!! Set
subroutine DateDateTypeSet(handle, dateType, dateTypeSize) &
      bind(C, name='DateDateTypeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: dateTypeSize
   character(c_char), intent(in) :: dateType(dateTypeSize)
end subroutine DateDateTypeSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDate
