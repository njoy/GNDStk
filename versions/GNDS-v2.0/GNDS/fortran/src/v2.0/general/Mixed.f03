
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalMixed
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function MixedDefaultConst() &
      bind(C, name='MixedDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MixedDefaultConst
end function MixedDefaultConst

!! Create, default
function MixedDefault() &
      bind(C, name='MixedDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: MixedDefault
end function MixedDefault

!! Create, general, const
function MixedCreateConst( &
   label, &
   covarianceMatrix, covarianceMatrixSize, &
   sum, sumSize, &
   shortRangeSelfScalingVariance, &
   labelSize &
) &
      bind(C, name='MixedCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: covarianceMatrixSize
   type(c_ptr), intent(in) :: covarianceMatrix(covarianceMatrixSize)
   integer(c_size_t), intent(in), value :: sumSize
   type(c_ptr), intent(in) :: sum(sumSize)
   type(c_ptr), intent(in), value :: shortRangeSelfScalingVariance
   type(c_ptr) :: MixedCreateConst
end function MixedCreateConst

!! Create, general
function MixedCreate( &
   label, &
   covarianceMatrix, covarianceMatrixSize, &
   sum, sumSize, &
   shortRangeSelfScalingVariance, &
   labelSize &
) &
      bind(C, name='MixedCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: covarianceMatrixSize
   type(c_ptr), intent(in) :: covarianceMatrix(covarianceMatrixSize)
   integer(c_size_t), intent(in), value :: sumSize
   type(c_ptr), intent(in) :: sum(sumSize)
   type(c_ptr), intent(in), value :: shortRangeSelfScalingVariance
   type(c_ptr) :: MixedCreate
end function MixedCreate

!! Assign
subroutine MixedAssign(handleLHS, handleRHS) &
      bind(C, name='MixedAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine MixedAssign

!! Delete
subroutine MixedDelete(handle) &
      bind(C, name='MixedDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MixedDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function MixedRead(handle, filename, filenameSize) &
      bind(C, name='MixedRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MixedRead
end function MixedRead

!! Write to file
function MixedWrite(handle, filename, filenameSize) &
      bind(C, name='MixedWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: MixedWrite
end function MixedWrite

!! Print to standard output, in our prettyprinting format
function MixedPrint(handle) &
      bind(C, name='MixedPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedPrint
end function MixedPrint

!! Print to standard output, as XML
function MixedPrintXML(handle) &
      bind(C, name='MixedPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedPrintXML
end function MixedPrintXML

!! Print to standard output, as JSON
function MixedPrintJSON(handle) &
      bind(C, name='MixedPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedPrintJSON
end function MixedPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function MixedLabelHas(handle) &
      bind(C, name='MixedLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedLabelHas
end function MixedLabelHas

!! Get
function MixedLabelGet(handle) &
      bind(C, name='MixedLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MixedLabelGet
end function MixedLabelGet

!! Set
subroutine MixedLabelSet(handle, label, labelSize) &
      bind(C, name='MixedLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine MixedLabelSet


!! -----------------------------------------------------------------------------
!! Child: covarianceMatrix
!! -----------------------------------------------------------------------------

!! Has
function MixedCovarianceMatrixHas(handle) &
      bind(C, name='MixedCovarianceMatrixHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedCovarianceMatrixHas
end function MixedCovarianceMatrixHas

!! Clear
subroutine MixedCovarianceMatrixClear(handle) &
      bind(C, name='MixedCovarianceMatrixClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MixedCovarianceMatrixClear

!! Size
function MixedCovarianceMatrixSize(handle) &
      bind(C, name='MixedCovarianceMatrixSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: MixedCovarianceMatrixSize
end function MixedCovarianceMatrixSize

!! Add
subroutine MixedCovarianceMatrixAdd(handle, fieldHandle) &
      bind(C, name='MixedCovarianceMatrixAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedCovarianceMatrixAdd

!! Get, by index \in [0,size), const
function MixedCovarianceMatrixGetConst(handle, index) &
      bind(C, name='MixedCovarianceMatrixGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: MixedCovarianceMatrixGetConst
end function MixedCovarianceMatrixGetConst

!! Get, by index \in [0,size)
function MixedCovarianceMatrixGet(handle, index) &
      bind(C, name='MixedCovarianceMatrixGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: MixedCovarianceMatrixGet
end function MixedCovarianceMatrixGet

!! Set, by index \in [0,size)
subroutine MixedCovarianceMatrixSet(handle, index, fieldHandle) &
      bind(C, name='MixedCovarianceMatrixSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedCovarianceMatrixSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function MixedCovarianceMatrixHasByLabel(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: MixedCovarianceMatrixHasByLabel
end function MixedCovarianceMatrixHasByLabel

!! Get, by label, const
function MixedCovarianceMatrixGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedCovarianceMatrixGetByLabelConst
end function MixedCovarianceMatrixGetByLabelConst

!! Get, by label
function MixedCovarianceMatrixGetByLabel(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedCovarianceMatrixGetByLabel
end function MixedCovarianceMatrixGetByLabel

!! Set, by label
subroutine MixedCovarianceMatrixSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='MixedCovarianceMatrixSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedCovarianceMatrixSetByLabel

!! ------------------------
!! Re: metadatum type
!! ------------------------

!! Has, by type
function MixedCovarianceMatrixHasByType(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixHasByType')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: MixedCovarianceMatrixHasByType
end function MixedCovarianceMatrixHasByType

!! Get, by type, const
function MixedCovarianceMatrixGetByTypeConst(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixGetByTypeConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedCovarianceMatrixGetByTypeConst
end function MixedCovarianceMatrixGetByTypeConst

!! Get, by type
function MixedCovarianceMatrixGetByType(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixGetByType')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedCovarianceMatrixGetByType
end function MixedCovarianceMatrixGetByType

!! Set, by type
subroutine MixedCovarianceMatrixSetByType(handle, meta, metaSize, fieldHandle) &
      bind(C, name='MixedCovarianceMatrixSetByType')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedCovarianceMatrixSetByType

!! ------------------------
!! Re: metadatum productFrame
!! ------------------------

!! Has, by productFrame
function MixedCovarianceMatrixHasByProductFrame(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixHasByProductFrame')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: MixedCovarianceMatrixHasByProductFrame
end function MixedCovarianceMatrixHasByProductFrame

!! Get, by productFrame, const
function MixedCovarianceMatrixGetByProductFrameConst(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixGetByProductFrameConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedCovarianceMatrixGetByProductFrameConst
end function MixedCovarianceMatrixGetByProductFrameConst

!! Get, by productFrame
function MixedCovarianceMatrixGetByProductFrame(handle, meta, metaSize) &
      bind(C, name='MixedCovarianceMatrixGetByProductFrame')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedCovarianceMatrixGetByProductFrame
end function MixedCovarianceMatrixGetByProductFrame

!! Set, by productFrame
subroutine MixedCovarianceMatrixSetByProductFrame(handle, meta, metaSize, fieldHandle) &
      bind(C, name='MixedCovarianceMatrixSetByProductFrame')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedCovarianceMatrixSetByProductFrame


!! -----------------------------------------------------------------------------
!! Child: sum
!! -----------------------------------------------------------------------------

!! Has
function MixedSumHas(handle) &
      bind(C, name='MixedSumHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedSumHas
end function MixedSumHas

!! Clear
subroutine MixedSumClear(handle) &
      bind(C, name='MixedSumClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine MixedSumClear

!! Size
function MixedSumSize(handle) &
      bind(C, name='MixedSumSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: MixedSumSize
end function MixedSumSize

!! Add
subroutine MixedSumAdd(handle, fieldHandle) &
      bind(C, name='MixedSumAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedSumAdd

!! Get, by index \in [0,size), const
function MixedSumGetConst(handle, index) &
      bind(C, name='MixedSumGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: MixedSumGetConst
end function MixedSumGetConst

!! Get, by index \in [0,size)
function MixedSumGet(handle, index) &
      bind(C, name='MixedSumGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: MixedSumGet
end function MixedSumGet

!! Set, by index \in [0,size)
subroutine MixedSumSet(handle, index, fieldHandle) &
      bind(C, name='MixedSumSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedSumSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function MixedSumHasByLabel(handle, meta, metaSize) &
      bind(C, name='MixedSumHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: MixedSumHasByLabel
end function MixedSumHasByLabel

!! Get, by label, const
function MixedSumGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='MixedSumGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedSumGetByLabelConst
end function MixedSumGetByLabelConst

!! Get, by label
function MixedSumGetByLabel(handle, meta, metaSize) &
      bind(C, name='MixedSumGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedSumGetByLabel
end function MixedSumGetByLabel

!! Set, by label
subroutine MixedSumSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='MixedSumSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedSumSetByLabel

!! ------------------------
!! Re: metadatum domainMin
!! ------------------------

!! Has, by domainMin
function MixedSumHasByDomainMin(handle, meta) &
      bind(C, name='MixedSumHasByDomainMin')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), intent(in), value :: meta
   integer(c_int) :: MixedSumHasByDomainMin
end function MixedSumHasByDomainMin

!! Get, by domainMin, const
function MixedSumGetByDomainMinConst(handle, meta) &
      bind(C, name='MixedSumGetByDomainMinConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), intent(in), value :: meta
   type(c_ptr) :: MixedSumGetByDomainMinConst
end function MixedSumGetByDomainMinConst

!! Get, by domainMin
function MixedSumGetByDomainMin(handle, meta) &
      bind(C, name='MixedSumGetByDomainMin')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: meta
   type(c_ptr) :: MixedSumGetByDomainMin
end function MixedSumGetByDomainMin

!! Set, by domainMin
subroutine MixedSumSetByDomainMin(handle, meta, fieldHandle) &
      bind(C, name='MixedSumSetByDomainMin')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedSumSetByDomainMin

!! ------------------------
!! Re: metadatum domainMax
!! ------------------------

!! Has, by domainMax
function MixedSumHasByDomainMax(handle, meta) &
      bind(C, name='MixedSumHasByDomainMax')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), intent(in), value :: meta
   integer(c_int) :: MixedSumHasByDomainMax
end function MixedSumHasByDomainMax

!! Get, by domainMax, const
function MixedSumGetByDomainMaxConst(handle, meta) &
      bind(C, name='MixedSumGetByDomainMaxConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), intent(in), value :: meta
   type(c_ptr) :: MixedSumGetByDomainMaxConst
end function MixedSumGetByDomainMaxConst

!! Get, by domainMax
function MixedSumGetByDomainMax(handle, meta) &
      bind(C, name='MixedSumGetByDomainMax')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: meta
   type(c_ptr) :: MixedSumGetByDomainMax
end function MixedSumGetByDomainMax

!! Set, by domainMax
subroutine MixedSumSetByDomainMax(handle, meta, fieldHandle) &
      bind(C, name='MixedSumSetByDomainMax')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedSumSetByDomainMax

!! ------------------------
!! Re: metadatum domainUnit
!! ------------------------

!! Has, by domainUnit
function MixedSumHasByDomainUnit(handle, meta, metaSize) &
      bind(C, name='MixedSumHasByDomainUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: MixedSumHasByDomainUnit
end function MixedSumHasByDomainUnit

!! Get, by domainUnit, const
function MixedSumGetByDomainUnitConst(handle, meta, metaSize) &
      bind(C, name='MixedSumGetByDomainUnitConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedSumGetByDomainUnitConst
end function MixedSumGetByDomainUnitConst

!! Get, by domainUnit
function MixedSumGetByDomainUnit(handle, meta, metaSize) &
      bind(C, name='MixedSumGetByDomainUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: MixedSumGetByDomainUnit
end function MixedSumGetByDomainUnit

!! Set, by domainUnit
subroutine MixedSumSetByDomainUnit(handle, meta, metaSize, fieldHandle) &
      bind(C, name='MixedSumSetByDomainUnit')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedSumSetByDomainUnit


!! -----------------------------------------------------------------------------
!! Child: shortRangeSelfScalingVariance
!! -----------------------------------------------------------------------------

!! Has
function MixedShortRangeSelfScalingVarianceHas(handle) &
      bind(C, name='MixedShortRangeSelfScalingVarianceHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: MixedShortRangeSelfScalingVarianceHas
end function MixedShortRangeSelfScalingVarianceHas

!! Get, const
function MixedShortRangeSelfScalingVarianceGetConst(handle) &
      bind(C, name='MixedShortRangeSelfScalingVarianceGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: MixedShortRangeSelfScalingVarianceGetConst
end function MixedShortRangeSelfScalingVarianceGetConst

!! Get
function MixedShortRangeSelfScalingVarianceGet(handle) &
      bind(C, name='MixedShortRangeSelfScalingVarianceGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: MixedShortRangeSelfScalingVarianceGet
end function MixedShortRangeSelfScalingVarianceGet

!! Set
subroutine MixedShortRangeSelfScalingVarianceSet(handle, fieldHandle) &
      bind(C, name='MixedShortRangeSelfScalingVarianceSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine MixedShortRangeSelfScalingVarianceSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalMixed
