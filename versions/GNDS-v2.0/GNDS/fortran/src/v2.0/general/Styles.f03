
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalStyles
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function StylesDefaultConst() &
      bind(C, name='StylesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function StylesDefaultConst

!! Create, default
function StylesDefault() &
      bind(C, name='StylesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function StylesDefault

!! Create, general, const
function StylesCreateConst( &
   evaluated, &
   crossSectionReconstructed &
) &
      bind(C, name='StylesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: evaluated
   type(c_ptr), value :: crossSectionReconstructed
   type(c_ptr) :: handle
end function StylesCreateConst

!! Create, general
function StylesCreate( &
   evaluated, &
   crossSectionReconstructed &
) &
      bind(C, name='StylesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: evaluated
   type(c_ptr), value :: crossSectionReconstructed
   type(c_ptr) :: handle
end function StylesCreate

!! Assign
subroutine StylesAssign(handleLHS, handleRHS) &
      bind(C, name='StylesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine StylesAssign

!! Delete
subroutine StylesDelete(handle) &
      bind(C, name='StylesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine StylesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function StylesRead(handle, filename, filenameSize) &
      bind(C, name='StylesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function StylesRead

!! Write to file
function StylesWrite(handle, filename, filenameSize) &
      bind(C, name='StylesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function StylesWrite

!! Print to standard output, in our prettyprinting format
function StylesPrint(handle) &
      bind(C, name='StylesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function StylesPrint

!! Print to standard output, as XML
function StylesPrintXML(handle) &
      bind(C, name='StylesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function StylesPrintXML

!! Print to standard output, as JSON
function StylesPrintJSON(handle) &
      bind(C, name='StylesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function StylesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: evaluated
!! -----------------------------------------------------------------------------

!! Has
function StylesEvaluatedHas(handle) &
      bind(C, name='StylesEvaluatedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function StylesEvaluatedHas

!! Get, const
function StylesEvaluatedGetConst(handle) &
      bind(C, name='StylesEvaluatedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function StylesEvaluatedGetConst

!! Get
function StylesEvaluatedGet(handle) &
      bind(C, name='StylesEvaluatedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function StylesEvaluatedGet

!! Set
subroutine StylesEvaluatedSet(handle, fieldHandle) &
      bind(C, name='StylesEvaluatedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine StylesEvaluatedSet


!! -----------------------------------------------------------------------------
!! Child: crossSectionReconstructed
!! -----------------------------------------------------------------------------

!! Has
function StylesCrossSectionReconstructedHas(handle) &
      bind(C, name='StylesCrossSectionReconstructedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function StylesCrossSectionReconstructedHas

!! Get, const
function StylesCrossSectionReconstructedGetConst(handle) &
      bind(C, name='StylesCrossSectionReconstructedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function StylesCrossSectionReconstructedGetConst

!! Get
function StylesCrossSectionReconstructedGet(handle) &
      bind(C, name='StylesCrossSectionReconstructedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function StylesCrossSectionReconstructedGet

!! Set
subroutine StylesCrossSectionReconstructedSet(handle, fieldHandle) &
      bind(C, name='StylesCrossSectionReconstructedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine StylesCrossSectionReconstructedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalStyles
