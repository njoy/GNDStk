
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalStyles
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function StylesDefaultConst() &
      bind(C, name='StylesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: StylesDefaultConst
end function StylesDefaultConst

!! Create, default, non-const
function StylesDefault() &
      bind(C, name='StylesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: StylesDefault
end function StylesDefault

!! Create, general, const
function StylesCreateConst( &
   evaluated, &
   crossSectionReconstructed &
) &
      bind(C, name='StylesCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: evaluated
   type(c_ptr), intent(in), value :: crossSectionReconstructed
   type(c_ptr) :: StylesCreateConst
end function StylesCreateConst

!! Create, general, non-const
function StylesCreate( &
   evaluated, &
   crossSectionReconstructed &
) &
      bind(C, name='StylesCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: evaluated
   type(c_ptr), intent(in), value :: crossSectionReconstructed
   type(c_ptr) :: StylesCreate
end function StylesCreate

!! Assign
subroutine StylesAssign(handleLHS, handleRHS) &
      bind(C, name='StylesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine StylesAssign

!! Delete
subroutine StylesDelete(handle) &
      bind(C, name='StylesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine StylesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function StylesRead(handle, filename, filenameSize) &
      bind(C, name='StylesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: StylesRead
end function StylesRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function StylesWrite(handle, filename, filenameSize) &
      bind(C, name='StylesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: StylesWrite
end function StylesWrite

!! Print to standard output, in our prettyprinting format
function StylesPrint(handle) &
      bind(C, name='StylesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StylesPrint
end function StylesPrint

!! Print to standard output, as XML
function StylesPrintXML(handle) &
      bind(C, name='StylesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StylesPrintXML
end function StylesPrintXML

!! Print to standard output, as JSON
function StylesPrintJSON(handle) &
      bind(C, name='StylesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StylesPrintJSON
end function StylesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: evaluated
!! -----------------------------------------------------------------------------

!! Has
function StylesEvaluatedHas(handle) &
      bind(C, name='StylesEvaluatedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StylesEvaluatedHas
end function StylesEvaluatedHas

!! Get, const
function StylesEvaluatedGetConst(handle) &
      bind(C, name='StylesEvaluatedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: StylesEvaluatedGetConst
end function StylesEvaluatedGetConst

!! Get, non-const
function StylesEvaluatedGet(handle) &
      bind(C, name='StylesEvaluatedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: StylesEvaluatedGet
end function StylesEvaluatedGet

!! Set
subroutine StylesEvaluatedSet(handle, fieldHandle) &
      bind(C, name='StylesEvaluatedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine StylesEvaluatedSet


!! -----------------------------------------------------------------------------
!! Child: crossSectionReconstructed
!! -----------------------------------------------------------------------------

!! Has
function StylesCrossSectionReconstructedHas(handle) &
      bind(C, name='StylesCrossSectionReconstructedHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StylesCrossSectionReconstructedHas
end function StylesCrossSectionReconstructedHas

!! Get, const
function StylesCrossSectionReconstructedGetConst(handle) &
      bind(C, name='StylesCrossSectionReconstructedGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: StylesCrossSectionReconstructedGetConst
end function StylesCrossSectionReconstructedGetConst

!! Get, non-const
function StylesCrossSectionReconstructedGet(handle) &
      bind(C, name='StylesCrossSectionReconstructedGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: StylesCrossSectionReconstructedGet
end function StylesCrossSectionReconstructedGet

!! Set
subroutine StylesCrossSectionReconstructedSet(handle, fieldHandle) &
      bind(C, name='StylesCrossSectionReconstructedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine StylesCrossSectionReconstructedSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalStyles
