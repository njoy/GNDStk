
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalElapsedTime
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ElapsedTimeDefaultConst() &
      bind(C, name='ElapsedTimeDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ElapsedTimeDefaultConst

!! Create, default
function ElapsedTimeDefault() &
      bind(C, name='ElapsedTimeDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ElapsedTimeDefault

!! Create, general, const
function ElapsedTimeCreateConst( &
   label, &
   time, &
   yields, &
   incidentEnergies, &
   labelSize &
) &
      bind(C, name='ElapsedTimeCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: time
   type(c_ptr), value :: yields
   type(c_ptr), value :: incidentEnergies
   type(c_ptr) :: handle
end function ElapsedTimeCreateConst

!! Create, general
function ElapsedTimeCreate( &
   label, &
   time, &
   yields, &
   incidentEnergies, &
   labelSize &
) &
      bind(C, name='ElapsedTimeCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr), value :: time
   type(c_ptr), value :: yields
   type(c_ptr), value :: incidentEnergies
   type(c_ptr) :: handle
end function ElapsedTimeCreate

!! Assign
subroutine ElapsedTimeAssign(handleLHS, handleRHS) &
      bind(C, name='ElapsedTimeAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ElapsedTimeAssign

!! Delete
subroutine ElapsedTimeDelete(handle) &
      bind(C, name='ElapsedTimeDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ElapsedTimeDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ElapsedTimeRead(handle, filename, filenameSize) &
      bind(C, name='ElapsedTimeRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ElapsedTimeRead

!! Write to file
function ElapsedTimeWrite(handle, filename, filenameSize) &
      bind(C, name='ElapsedTimeWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ElapsedTimeWrite

!! Print to standard output, in our prettyprinting format
function ElapsedTimePrint(handle) &
      bind(C, name='ElapsedTimePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ElapsedTimePrint

!! Print to standard output, as XML
function ElapsedTimePrintXML(handle) &
      bind(C, name='ElapsedTimePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ElapsedTimePrintXML

!! Print to standard output, as JSON
function ElapsedTimePrintJSON(handle) &
      bind(C, name='ElapsedTimePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ElapsedTimePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ElapsedTimeLabelHas(handle) &
      bind(C, name='ElapsedTimeLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ElapsedTimeLabelHas

!! Get
function ElapsedTimeLabelGet(handle) &
      bind(C, name='ElapsedTimeLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ElapsedTimeLabelGet

!! Set
subroutine ElapsedTimeLabelSet(handle, label, labelSize) &
      bind(C, name='ElapsedTimeLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ElapsedTimeLabelSet


!! -----------------------------------------------------------------------------
!! Child: time
!! -----------------------------------------------------------------------------

!! Has
function ElapsedTimeTimeHas(handle) &
      bind(C, name='ElapsedTimeTimeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ElapsedTimeTimeHas

!! Get, const
function ElapsedTimeTimeGetConst(handle) &
      bind(C, name='ElapsedTimeTimeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ElapsedTimeTimeGetConst

!! Get
function ElapsedTimeTimeGet(handle) &
      bind(C, name='ElapsedTimeTimeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ElapsedTimeTimeGet

!! Set
subroutine ElapsedTimeTimeSet(handle, fieldHandle) &
      bind(C, name='ElapsedTimeTimeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ElapsedTimeTimeSet


!! -----------------------------------------------------------------------------
!! Child: yields
!! -----------------------------------------------------------------------------

!! Has
function ElapsedTimeYieldsHas(handle) &
      bind(C, name='ElapsedTimeYieldsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ElapsedTimeYieldsHas

!! Get, const
function ElapsedTimeYieldsGetConst(handle) &
      bind(C, name='ElapsedTimeYieldsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ElapsedTimeYieldsGetConst

!! Get
function ElapsedTimeYieldsGet(handle) &
      bind(C, name='ElapsedTimeYieldsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ElapsedTimeYieldsGet

!! Set
subroutine ElapsedTimeYieldsSet(handle, fieldHandle) &
      bind(C, name='ElapsedTimeYieldsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ElapsedTimeYieldsSet


!! -----------------------------------------------------------------------------
!! Child: incidentEnergies
!! -----------------------------------------------------------------------------

!! Has
function ElapsedTimeIncidentEnergiesHas(handle) &
      bind(C, name='ElapsedTimeIncidentEnergiesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ElapsedTimeIncidentEnergiesHas

!! Get, const
function ElapsedTimeIncidentEnergiesGetConst(handle) &
      bind(C, name='ElapsedTimeIncidentEnergiesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ElapsedTimeIncidentEnergiesGetConst

!! Get
function ElapsedTimeIncidentEnergiesGet(handle) &
      bind(C, name='ElapsedTimeIncidentEnergiesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ElapsedTimeIncidentEnergiesGet

!! Set
subroutine ElapsedTimeIncidentEnergiesSet(handle, fieldHandle) &
      bind(C, name='ElapsedTimeIncidentEnergiesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ElapsedTimeIncidentEnergiesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalElapsedTime
