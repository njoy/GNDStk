
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalJs
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function JsDefaultConst() &
      bind(C, name='JsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: JsDefaultConst
end function JsDefaultConst

!! Create, default, non-const
function JsDefault() &
      bind(C, name='JsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: JsDefault
end function JsDefault

!! Create, general, const
function JsCreateConst( &
   J, JSize &
) &
      bind(C, name='JsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: JSize
   type(c_ptr), intent(in) :: J(JSize)
   type(c_ptr) :: JsCreateConst
end function JsCreateConst

!! Create, general, non-const
function JsCreate( &
   J, JSize &
) &
      bind(C, name='JsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: JSize
   type(c_ptr), intent(in) :: J(JSize)
   type(c_ptr) :: JsCreate
end function JsCreate

!! Assign
subroutine JsAssign(handleLHS, handleRHS) &
      bind(C, name='JsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine JsAssign

!! Delete
subroutine JsDelete(handle) &
      bind(C, name='JsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine JsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function JsRead(handle, filename, filenameSize) &
      bind(C, name='JsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: JsRead
end function JsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function JsWrite(handle, filename, filenameSize) &
      bind(C, name='JsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: JsWrite
end function JsWrite

!! Print to standard output, in our prettyprinting format
function JsPrint(handle) &
      bind(C, name='JsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: JsPrint
end function JsPrint

!! Print to standard output, as XML
function JsPrintXML(handle) &
      bind(C, name='JsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: JsPrintXML
end function JsPrintXML

!! Print to standard output, as JSON
function JsPrintJSON(handle) &
      bind(C, name='JsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: JsPrintJSON
end function JsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: J
!! -----------------------------------------------------------------------------

!! Has
function JsJHas(handle) &
      bind(C, name='JsJHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: JsJHas
end function JsJHas

!! Clear
subroutine JsJClear(handle) &
      bind(C, name='JsJClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine JsJClear

!! Size
function JsJSize(handle) &
      bind(C, name='JsJSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: JsJSize
end function JsJSize

!! Add
subroutine JsJAdd(handle, fieldHandle) &
      bind(C, name='JsJAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine JsJAdd

!! Get, by index \in [0,size), const
function JsJGetConst(handle, index) &
      bind(C, name='JsJGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: JsJGetConst
end function JsJGetConst

!! Get, by index \in [0,size), non-const
function JsJGet(handle, index) &
      bind(C, name='JsJGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: JsJGet
end function JsJGet

!! Set, by index \in [0,size)
subroutine JsJSet(handle, index, fieldHandle) &
      bind(C, name='JsJSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine JsJSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function JsJHasByLabel(handle, meta, metaSize) &
      bind(C, name='JsJHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: JsJHasByLabel
end function JsJHasByLabel

!! Get, by label, const
function JsJGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='JsJGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: JsJGetByLabelConst
end function JsJGetByLabelConst

!! Get, by label, non-const
function JsJGetByLabel(handle, meta, metaSize) &
      bind(C, name='JsJGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: JsJGetByLabel
end function JsJGetByLabel

!! Set, by label
subroutine JsJSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='JsJSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine JsJSetByLabel

!! ------------------------
!! Re: metadatum value
!! ------------------------

!! Has, by value
function JsJHasByValue(handle, meta) &
      bind(C, name='JsJHasByValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   integer(c_int) :: JsJHasByValue
end function JsJHasByValue

!! Get, by value, const
function JsJGetByValueConst(handle, meta) &
      bind(C, name='JsJGetByValueConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: JsJGetByValueConst
end function JsJGetByValueConst

!! Get, by value, non-const
function JsJGetByValue(handle, meta) &
      bind(C, name='JsJGetByValue')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: JsJGetByValue
end function JsJGetByValue

!! Set, by value
subroutine JsJSetByValue(handle, meta, fieldHandle) &
      bind(C, name='JsJSetByValue')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine JsJSetByValue


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalJs
