
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalPromptProductKE
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function PromptProductKEDefaultConst() &
      bind(C, name='PromptProductKEDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function PromptProductKEDefaultConst

!! Create, default
function PromptProductKEDefault() &
      bind(C, name='PromptProductKEDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function PromptProductKEDefault

!! Create, general, const
function PromptProductKECreateConst( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='PromptProductKECreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function PromptProductKECreateConst

!! Create, general
function PromptProductKECreate( &
   polynomial1d, &
   XYs1d &
) &
      bind(C, name='PromptProductKECreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr), value :: XYs1d
   type(c_ptr) :: handle
end function PromptProductKECreate

!! Assign
subroutine PromptProductKEAssign(handleLHS, handleRHS) &
      bind(C, name='PromptProductKEAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine PromptProductKEAssign

!! Delete
subroutine PromptProductKEDelete(handle) &
      bind(C, name='PromptProductKEDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine PromptProductKEDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function PromptProductKERead(handle, filename, filenameSize) &
      bind(C, name='PromptProductKERead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function PromptProductKERead

!! Write to file
function PromptProductKEWrite(handle, filename, filenameSize) &
      bind(C, name='PromptProductKEWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function PromptProductKEWrite

!! Print to standard output, in our prettyprinting format
function PromptProductKEPrint(handle) &
      bind(C, name='PromptProductKEPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PromptProductKEPrint

!! Print to standard output, as XML
function PromptProductKEPrintXML(handle) &
      bind(C, name='PromptProductKEPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PromptProductKEPrintXML

!! Print to standard output, as JSON
function PromptProductKEPrintJSON(handle) &
      bind(C, name='PromptProductKEPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function PromptProductKEPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function PromptProductKEPolynomial1dHas(handle) &
      bind(C, name='PromptProductKEPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PromptProductKEPolynomial1dHas

!! Get, const
function PromptProductKEPolynomial1dGetConst(handle) &
      bind(C, name='PromptProductKEPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptProductKEPolynomial1dGetConst

!! Get
function PromptProductKEPolynomial1dGet(handle) &
      bind(C, name='PromptProductKEPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptProductKEPolynomial1dGet

!! Set
subroutine PromptProductKEPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='PromptProductKEPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine PromptProductKEPolynomial1dSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function PromptProductKEXYs1dHas(handle) &
      bind(C, name='PromptProductKEXYs1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function PromptProductKEXYs1dHas

!! Get, const
function PromptProductKEXYs1dGetConst(handle) &
      bind(C, name='PromptProductKEXYs1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptProductKEXYs1dGetConst

!! Get
function PromptProductKEXYs1dGet(handle) &
      bind(C, name='PromptProductKEXYs1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function PromptProductKEXYs1dGet

!! Set
subroutine PromptProductKEXYs1dSet(handle, fieldHandle) &
      bind(C, name='PromptProductKEXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine PromptProductKEXYs1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalPromptProductKE
