
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDates
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DatesDefaultConst() &
      bind(C, name='DatesDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DatesDefaultConst

!! Create, default
function DatesDefault() &
      bind(C, name='DatesDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DatesDefault

!! Create, general, const
function DatesCreateConst( &
   date, dateSize &
) &
      bind(C, name='DatesCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: dateSize
   type(c_ptr) :: date(dateSize)
   type(c_ptr) :: handle
end function DatesCreateConst

!! Create, general
function DatesCreate( &
   date, dateSize &
) &
      bind(C, name='DatesCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: dateSize
   type(c_ptr) :: date(dateSize)
   type(c_ptr) :: handle
end function DatesCreate

!! Assign
subroutine DatesAssign(handleLHS, handleRHS) &
      bind(C, name='DatesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DatesAssign

!! Delete
subroutine DatesDelete(handle) &
      bind(C, name='DatesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DatesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DatesRead(handle, filename, filenameSize) &
      bind(C, name='DatesRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DatesRead

!! Write to file
function DatesWrite(handle, filename, filenameSize) &
      bind(C, name='DatesWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DatesWrite

!! Print to standard output, in our prettyprinting format
function DatesPrint(handle) &
      bind(C, name='DatesPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DatesPrint

!! Print to standard output, as XML
function DatesPrintXML(handle) &
      bind(C, name='DatesPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DatesPrintXML

!! Print to standard output, as JSON
function DatesPrintJSON(handle) &
      bind(C, name='DatesPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DatesPrintJSON


!! -----------------------------------------------------------------------------
!! Child: date
!! -----------------------------------------------------------------------------

!! Has
function DatesDateHas(handle) &
      bind(C, name='DatesDateHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DatesDateHas

!! Clear
subroutine DatesDateClear(handle) &
      bind(C, name='DatesDateClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DatesDateClear

!! Size
function DatesDateSize(handle) &
      bind(C, name='DatesDateSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function DatesDateSize

!! Add
subroutine DatesDateAdd(handle, fieldHandle) &
      bind(C, name='DatesDateAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DatesDateAdd

!! Get, by index \in [0,size), const
function DatesDateGetConst(handle, index) &
      bind(C, name='DatesDateGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function DatesDateGetConst

!! Get, by index \in [0,size)
function DatesDateGet(handle, index) &
      bind(C, name='DatesDateGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function DatesDateGet

!! Set, by index \in [0,size)
subroutine DatesDateSet(handle, index, fieldHandle) &
      bind(C, name='DatesDateSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DatesDateSet

!! ------------------------
!! Re: metadatum value
!! ------------------------

!! Has, by value
function DatesDateHasByValue(handle, meta, metaSize) &
      bind(C, name='DatesDateHasByValue') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function DatesDateHasByValue

!! Get, by value, const
function DatesDateGetByValueConst(handle, meta, metaSize) &
      bind(C, name='DatesDateGetByValueConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function DatesDateGetByValueConst

!! Get, by value
function DatesDateGetByValue(handle, meta, metaSize) &
      bind(C, name='DatesDateGetByValue') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function DatesDateGetByValue

!! Set, by value
subroutine DatesDateSetByValue(handle, meta, metaSize, fieldHandle) &
      bind(C, name='DatesDateSetByValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DatesDateSetByValue

!! ------------------------
!! Re: metadatum dateType
!! ------------------------

!! Has, by dateType
function DatesDateHasByDateType(handle, meta, metaSize) &
      bind(C, name='DatesDateHasByDateType') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function DatesDateHasByDateType

!! Get, by dateType, const
function DatesDateGetByDateTypeConst(handle, meta, metaSize) &
      bind(C, name='DatesDateGetByDateTypeConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function DatesDateGetByDateTypeConst

!! Get, by dateType
function DatesDateGetByDateType(handle, meta, metaSize) &
      bind(C, name='DatesDateGetByDateType') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function DatesDateGetByDateType

!! Set, by dateType
subroutine DatesDateSetByDateType(handle, meta, metaSize, fieldHandle) &
      bind(C, name='DatesDateSetByDateType')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DatesDateSetByDateType


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDates
