
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCovariance
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CovarianceDefaultConst() &
      bind(C, name='CovarianceDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceDefaultConst

!! Create, default
function CovarianceDefault() &
      bind(C, name='CovarianceDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceDefault

!! Create, general, const
function CovarianceCreateConst( &
   label, &
   href, &
   array, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='CovarianceCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), value :: array
   type(c_ptr) :: handle
end function CovarianceCreateConst

!! Create, general
function CovarianceCreate( &
   label, &
   href, &
   array, &
   labelSize, &
   hrefSize &
) &
      bind(C, name='CovarianceCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr), value :: array
   type(c_ptr) :: handle
end function CovarianceCreate

!! Assign
subroutine CovarianceAssign(handleLHS, handleRHS) &
      bind(C, name='CovarianceAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CovarianceAssign

!! Delete
subroutine CovarianceDelete(handle) &
      bind(C, name='CovarianceDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CovarianceRead(handle, filename, filenameSize) &
      bind(C, name='CovarianceRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceRead

!! Write to file
function CovarianceWrite(handle, filename, filenameSize) &
      bind(C, name='CovarianceWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceWrite

!! Print to standard output, in our prettyprinting format
function CovariancePrint(handle) &
      bind(C, name='CovariancePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovariancePrint

!! Print to standard output, as XML
function CovariancePrintXML(handle) &
      bind(C, name='CovariancePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovariancePrintXML

!! Print to standard output, as JSON
function CovariancePrintJSON(handle) &
      bind(C, name='CovariancePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovariancePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CovarianceLabelHas(handle) &
      bind(C, name='CovarianceLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceLabelHas

!! Get
function CovarianceLabelGet(handle) &
      bind(C, name='CovarianceLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function CovarianceLabelGet

!! Set
subroutine CovarianceLabelSet(handle, label, labelSize) &
      bind(C, name='CovarianceLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CovarianceLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function CovarianceHrefHas(handle) &
      bind(C, name='CovarianceHrefHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceHrefHas

!! Get
function CovarianceHrefGet(handle) &
      bind(C, name='CovarianceHrefGet') &
      result(href)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: href
end function CovarianceHrefGet

!! Set
subroutine CovarianceHrefSet(handle, href, hrefSize) &
      bind(C, name='CovarianceHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine CovarianceHrefSet


!! -----------------------------------------------------------------------------
!! Child: array
!! -----------------------------------------------------------------------------

!! Has
function CovarianceArrayHas(handle) &
      bind(C, name='CovarianceArrayHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceArrayHas

!! Get, const
function CovarianceArrayGetConst(handle) &
      bind(C, name='CovarianceArrayGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceArrayGetConst

!! Get
function CovarianceArrayGet(handle) &
      bind(C, name='CovarianceArrayGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceArrayGet

!! Set
subroutine CovarianceArraySet(handle, fieldHandle) &
      bind(C, name='CovarianceArraySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceArraySet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCovariance
