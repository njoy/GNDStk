
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedGammaEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedGammaEnergyDefaultConst() &
      bind(C, name='DelayedGammaEnergyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DelayedGammaEnergyDefaultConst
end function DelayedGammaEnergyDefaultConst

!! Create, default, non-const
function DelayedGammaEnergyDefault() &
      bind(C, name='DelayedGammaEnergyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: DelayedGammaEnergyDefault
end function DelayedGammaEnergyDefault

!! Create, general, const
function DelayedGammaEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='DelayedGammaEnergyCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr) :: DelayedGammaEnergyCreateConst
end function DelayedGammaEnergyCreateConst

!! Create, general, non-const
function DelayedGammaEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='DelayedGammaEnergyCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr) :: DelayedGammaEnergyCreate
end function DelayedGammaEnergyCreate

!! Assign
subroutine DelayedGammaEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedGammaEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine DelayedGammaEnergyAssign

!! Delete
subroutine DelayedGammaEnergyDelete(handle) &
      bind(C, name='DelayedGammaEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedGammaEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function DelayedGammaEnergyRead(handle, filename, filenameSize) &
      bind(C, name='DelayedGammaEnergyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DelayedGammaEnergyRead
end function DelayedGammaEnergyRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function DelayedGammaEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedGammaEnergyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: DelayedGammaEnergyWrite
end function DelayedGammaEnergyWrite

!! Print to standard output, in our prettyprinting format
function DelayedGammaEnergyPrint(handle) &
      bind(C, name='DelayedGammaEnergyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedGammaEnergyPrint
end function DelayedGammaEnergyPrint

!! Print to standard output, as XML
function DelayedGammaEnergyPrintXML(handle) &
      bind(C, name='DelayedGammaEnergyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedGammaEnergyPrintXML
end function DelayedGammaEnergyPrintXML

!! Print to standard output, as JSON
function DelayedGammaEnergyPrintJSON(handle) &
      bind(C, name='DelayedGammaEnergyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedGammaEnergyPrintJSON
end function DelayedGammaEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function DelayedGammaEnergyPolynomial1dHas(handle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: DelayedGammaEnergyPolynomial1dHas
end function DelayedGammaEnergyPolynomial1dHas

!! Get, const
function DelayedGammaEnergyPolynomial1dGetConst(handle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: DelayedGammaEnergyPolynomial1dGetConst
end function DelayedGammaEnergyPolynomial1dGetConst

!! Get, non-const
function DelayedGammaEnergyPolynomial1dGet(handle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: DelayedGammaEnergyPolynomial1dGet
end function DelayedGammaEnergyPolynomial1dGet

!! Set
subroutine DelayedGammaEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DelayedGammaEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedGammaEnergy
