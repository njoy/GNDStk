
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedGammaEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedGammaEnergyDefaultConst() &
      bind(C, name='DelayedGammaEnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedGammaEnergyDefaultConst

!! Create, default
function DelayedGammaEnergyDefault() &
      bind(C, name='DelayedGammaEnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedGammaEnergyDefault

!! Create, general, const
function DelayedGammaEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='DelayedGammaEnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function DelayedGammaEnergyCreateConst

!! Create, general
function DelayedGammaEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='DelayedGammaEnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function DelayedGammaEnergyCreate

!! Assign
subroutine DelayedGammaEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedGammaEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DelayedGammaEnergyAssign

!! Delete
subroutine DelayedGammaEnergyDelete(handle) &
      bind(C, name='DelayedGammaEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedGammaEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DelayedGammaEnergyRead(handle, filename, filenameSize) &
      bind(C, name='DelayedGammaEnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedGammaEnergyRead

!! Write to file
function DelayedGammaEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedGammaEnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedGammaEnergyWrite

!! Print to standard output, in our prettyprinting format
function DelayedGammaEnergyPrint(handle) &
      bind(C, name='DelayedGammaEnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedGammaEnergyPrint

!! Print to standard output, as XML
function DelayedGammaEnergyPrintXML(handle) &
      bind(C, name='DelayedGammaEnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedGammaEnergyPrintXML

!! Print to standard output, as JSON
function DelayedGammaEnergyPrintJSON(handle) &
      bind(C, name='DelayedGammaEnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedGammaEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function DelayedGammaEnergyPolynomial1dHas(handle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedGammaEnergyPolynomial1dHas

!! Get, const
function DelayedGammaEnergyPolynomial1dGetConst(handle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedGammaEnergyPolynomial1dGetConst

!! Get
function DelayedGammaEnergyPolynomial1dGet(handle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DelayedGammaEnergyPolynomial1dGet

!! Set
subroutine DelayedGammaEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='DelayedGammaEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DelayedGammaEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedGammaEnergy
