
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDelayedNeutrons
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DelayedNeutronsDefaultConst() &
      bind(C, name='DelayedNeutronsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedNeutronsDefaultConst

!! Create, default
function DelayedNeutronsDefault() &
      bind(C, name='DelayedNeutronsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DelayedNeutronsDefault

!! Create, general, const
function DelayedNeutronsCreateConst( &
   delayedNeutron, delayedNeutronSize &
) &
      bind(C, name='DelayedNeutronsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: delayedNeutronSize
   type(c_ptr) :: delayedNeutron(delayedNeutronSize)
   type(c_ptr) :: handle
end function DelayedNeutronsCreateConst

!! Create, general
function DelayedNeutronsCreate( &
   delayedNeutron, delayedNeutronSize &
) &
      bind(C, name='DelayedNeutronsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: delayedNeutronSize
   type(c_ptr) :: delayedNeutron(delayedNeutronSize)
   type(c_ptr) :: handle
end function DelayedNeutronsCreate

!! Assign
subroutine DelayedNeutronsAssign(handleLHS, handleRHS) &
      bind(C, name='DelayedNeutronsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DelayedNeutronsAssign

!! Delete
subroutine DelayedNeutronsDelete(handle) &
      bind(C, name='DelayedNeutronsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedNeutronsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DelayedNeutronsRead(handle, filename, filenameSize) &
      bind(C, name='DelayedNeutronsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedNeutronsRead

!! Write to file
function DelayedNeutronsWrite(handle, filename, filenameSize) &
      bind(C, name='DelayedNeutronsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DelayedNeutronsWrite

!! Print to standard output, in our prettyprinting format
function DelayedNeutronsPrint(handle) &
      bind(C, name='DelayedNeutronsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronsPrint

!! Print to standard output, as XML
function DelayedNeutronsPrintXML(handle) &
      bind(C, name='DelayedNeutronsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronsPrintXML

!! Print to standard output, as JSON
function DelayedNeutronsPrintJSON(handle) &
      bind(C, name='DelayedNeutronsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DelayedNeutronsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: delayedNeutron
!! -----------------------------------------------------------------------------

!! Has
function DelayedNeutronsDelayedNeutronHas(handle) &
      bind(C, name='DelayedNeutronsDelayedNeutronHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DelayedNeutronsDelayedNeutronHas

!! Clear
subroutine DelayedNeutronsDelayedNeutronClear(handle) &
      bind(C, name='DelayedNeutronsDelayedNeutronClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DelayedNeutronsDelayedNeutronClear

!! Size
function DelayedNeutronsDelayedNeutronSize(handle) &
      bind(C, name='DelayedNeutronsDelayedNeutronSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function DelayedNeutronsDelayedNeutronSize

!! Add
subroutine DelayedNeutronsDelayedNeutronAdd(handle, fieldHandle) &
      bind(C, name='DelayedNeutronsDelayedNeutronAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DelayedNeutronsDelayedNeutronAdd

!! Get, by index \in [0,size), const
function DelayedNeutronsDelayedNeutronGetConst(handle, index) &
      bind(C, name='DelayedNeutronsDelayedNeutronGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function DelayedNeutronsDelayedNeutronGetConst

!! Get, by index \in [0,size)
function DelayedNeutronsDelayedNeutronGet(handle, index) &
      bind(C, name='DelayedNeutronsDelayedNeutronGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function DelayedNeutronsDelayedNeutronGet

!! Set, by index \in [0,size)
subroutine DelayedNeutronsDelayedNeutronSet(handle, index, fieldHandle) &
      bind(C, name='DelayedNeutronsDelayedNeutronSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DelayedNeutronsDelayedNeutronSet

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function DelayedNeutronsDelayedNeutronHasByLabel(handle, meta, metaSize) &
      bind(C, name='DelayedNeutronsDelayedNeutronHasByLabel') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function DelayedNeutronsDelayedNeutronHasByLabel

!! Get, by label, const
function DelayedNeutronsDelayedNeutronGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='DelayedNeutronsDelayedNeutronGetByLabelConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function DelayedNeutronsDelayedNeutronGetByLabelConst

!! Get, by label
function DelayedNeutronsDelayedNeutronGetByLabel(handle, meta, metaSize) &
      bind(C, name='DelayedNeutronsDelayedNeutronGetByLabel') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function DelayedNeutronsDelayedNeutronGetByLabel

!! Set, by label
subroutine DelayedNeutronsDelayedNeutronSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='DelayedNeutronsDelayedNeutronSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine DelayedNeutronsDelayedNeutronSetByLabel


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDelayedNeutrons
