
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalCoherentPhotonScattering
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CoherentPhotonScatteringDefaultConst() &
      bind(C, name='CoherentPhotonScatteringDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CoherentPhotonScatteringDefaultConst
end function CoherentPhotonScatteringDefaultConst

!! Create, default
function CoherentPhotonScatteringDefault() &
      bind(C, name='CoherentPhotonScatteringDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CoherentPhotonScatteringDefault
end function CoherentPhotonScatteringDefault

!! Create, general, const
function CoherentPhotonScatteringCreateConst( &
   label, &
   href, &
   pid, &
   productFrame, &
   formFactor, &
   realAnomalousFactor, &
   imaginaryAnomalousFactor, &
   labelSize, &
   hrefSize, &
   pidSize, &
   productFrameSize &
) &
      bind(C, name='CoherentPhotonScatteringCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: formFactor
   type(c_ptr), value :: realAnomalousFactor
   type(c_ptr), value :: imaginaryAnomalousFactor
   type(c_ptr) :: CoherentPhotonScatteringCreateConst
end function CoherentPhotonScatteringCreateConst

!! Create, general
function CoherentPhotonScatteringCreate( &
   label, &
   href, &
   pid, &
   productFrame, &
   formFactor, &
   realAnomalousFactor, &
   imaginaryAnomalousFactor, &
   labelSize, &
   hrefSize, &
   pidSize, &
   productFrameSize &
) &
      bind(C, name='CoherentPhotonScatteringCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: formFactor
   type(c_ptr), value :: realAnomalousFactor
   type(c_ptr), value :: imaginaryAnomalousFactor
   type(c_ptr) :: CoherentPhotonScatteringCreate
end function CoherentPhotonScatteringCreate

!! Assign
subroutine CoherentPhotonScatteringAssign(handleLHS, handleRHS) &
      bind(C, name='CoherentPhotonScatteringAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CoherentPhotonScatteringAssign

!! Delete
subroutine CoherentPhotonScatteringDelete(handle) &
      bind(C, name='CoherentPhotonScatteringDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CoherentPhotonScatteringDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CoherentPhotonScatteringRead(handle, filename, filenameSize) &
      bind(C, name='CoherentPhotonScatteringRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CoherentPhotonScatteringRead
end function CoherentPhotonScatteringRead

!! Write to file
function CoherentPhotonScatteringWrite(handle, filename, filenameSize) &
      bind(C, name='CoherentPhotonScatteringWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CoherentPhotonScatteringWrite
end function CoherentPhotonScatteringWrite

!! Print to standard output, in our prettyprinting format
function CoherentPhotonScatteringPrint(handle) &
      bind(C, name='CoherentPhotonScatteringPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringPrint
end function CoherentPhotonScatteringPrint

!! Print to standard output, as XML
function CoherentPhotonScatteringPrintXML(handle) &
      bind(C, name='CoherentPhotonScatteringPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringPrintXML
end function CoherentPhotonScatteringPrintXML

!! Print to standard output, as JSON
function CoherentPhotonScatteringPrintJSON(handle) &
      bind(C, name='CoherentPhotonScatteringPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringPrintJSON
end function CoherentPhotonScatteringPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringLabelHas(handle) &
      bind(C, name='CoherentPhotonScatteringLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringLabelHas
end function CoherentPhotonScatteringLabelHas

!! Get
function CoherentPhotonScatteringLabelGet(handle) &
      bind(C, name='CoherentPhotonScatteringLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringLabelGet
end function CoherentPhotonScatteringLabelGet

!! Set
subroutine CoherentPhotonScatteringLabelSet(handle, label, labelSize) &
      bind(C, name='CoherentPhotonScatteringLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine CoherentPhotonScatteringLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringHrefHas(handle) &
      bind(C, name='CoherentPhotonScatteringHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringHrefHas
end function CoherentPhotonScatteringHrefHas

!! Get
function CoherentPhotonScatteringHrefGet(handle) &
      bind(C, name='CoherentPhotonScatteringHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringHrefGet
end function CoherentPhotonScatteringHrefGet

!! Set
subroutine CoherentPhotonScatteringHrefSet(handle, href, hrefSize) &
      bind(C, name='CoherentPhotonScatteringHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine CoherentPhotonScatteringHrefSet


!! -----------------------------------------------------------------------------
!! Metadatum: pid
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringPidHas(handle) &
      bind(C, name='CoherentPhotonScatteringPidHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringPidHas
end function CoherentPhotonScatteringPidHas

!! Get
function CoherentPhotonScatteringPidGet(handle) &
      bind(C, name='CoherentPhotonScatteringPidGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringPidGet
end function CoherentPhotonScatteringPidGet

!! Set
subroutine CoherentPhotonScatteringPidSet(handle, pid, pidSize) &
      bind(C, name='CoherentPhotonScatteringPidSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
end subroutine CoherentPhotonScatteringPidSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringProductFrameHas(handle) &
      bind(C, name='CoherentPhotonScatteringProductFrameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringProductFrameHas
end function CoherentPhotonScatteringProductFrameHas

!! Get
function CoherentPhotonScatteringProductFrameGet(handle) &
      bind(C, name='CoherentPhotonScatteringProductFrameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringProductFrameGet
end function CoherentPhotonScatteringProductFrameGet

!! Set
subroutine CoherentPhotonScatteringProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='CoherentPhotonScatteringProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine CoherentPhotonScatteringProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: formFactor
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringFormFactorHas(handle) &
      bind(C, name='CoherentPhotonScatteringFormFactorHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringFormFactorHas
end function CoherentPhotonScatteringFormFactorHas

!! Get, const
function CoherentPhotonScatteringFormFactorGetConst(handle) &
      bind(C, name='CoherentPhotonScatteringFormFactorGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringFormFactorGetConst
end function CoherentPhotonScatteringFormFactorGetConst

!! Get
function CoherentPhotonScatteringFormFactorGet(handle) &
      bind(C, name='CoherentPhotonScatteringFormFactorGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringFormFactorGet
end function CoherentPhotonScatteringFormFactorGet

!! Set
subroutine CoherentPhotonScatteringFormFactorSet(handle, fieldHandle) &
      bind(C, name='CoherentPhotonScatteringFormFactorSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CoherentPhotonScatteringFormFactorSet


!! -----------------------------------------------------------------------------
!! Child: realAnomalousFactor
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringRealAnomalousFactorHas(handle) &
      bind(C, name='CoherentPhotonScatteringRealAnomalousFactorHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringRealAnomalousFactorHas
end function CoherentPhotonScatteringRealAnomalousFactorHas

!! Get, const
function CoherentPhotonScatteringRealAnomalousFactorGetConst(handle) &
      bind(C, name='CoherentPhotonScatteringRealAnomalousFactorGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringRealAnomalousFactorGetConst
end function CoherentPhotonScatteringRealAnomalousFactorGetConst

!! Get
function CoherentPhotonScatteringRealAnomalousFactorGet(handle) &
      bind(C, name='CoherentPhotonScatteringRealAnomalousFactorGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringRealAnomalousFactorGet
end function CoherentPhotonScatteringRealAnomalousFactorGet

!! Set
subroutine CoherentPhotonScatteringRealAnomalousFactorSet(handle, fieldHandle) &
      bind(C, name='CoherentPhotonScatteringRealAnomalousFactorSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CoherentPhotonScatteringRealAnomalousFactorSet


!! -----------------------------------------------------------------------------
!! Child: imaginaryAnomalousFactor
!! -----------------------------------------------------------------------------

!! Has
function CoherentPhotonScatteringImaginaryAnomalousFactorHas(handle) &
      bind(C, name='CoherentPhotonScatteringImaginaryAnomalousFactorHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CoherentPhotonScatteringImaginaryAnomalousFactorHas
end function CoherentPhotonScatteringImaginaryAnomalousFactorHas

!! Get, const
function CoherentPhotonScatteringImaginaryAnomalousFactorGetConst(handle) &
      bind(C, name='CoherentPhotonScatteringImaginaryAnomalousFactorGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringImaginaryAnomalousFactorGetConst
end function CoherentPhotonScatteringImaginaryAnomalousFactorGetConst

!! Get
function CoherentPhotonScatteringImaginaryAnomalousFactorGet(handle) &
      bind(C, name='CoherentPhotonScatteringImaginaryAnomalousFactorGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: CoherentPhotonScatteringImaginaryAnomalousFactorGet
end function CoherentPhotonScatteringImaginaryAnomalousFactorGet

!! Set
subroutine CoherentPhotonScatteringImaginaryAnomalousFactorSet(handle, fieldHandle) &
      bind(C, name='CoherentPhotonScatteringImaginaryAnomalousFactorSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CoherentPhotonScatteringImaginaryAnomalousFactorSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalCoherentPhotonScattering
