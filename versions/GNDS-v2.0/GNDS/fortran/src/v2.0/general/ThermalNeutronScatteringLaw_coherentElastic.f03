
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalThermalNeutronScatteringLaw_coherentElastic
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ThermalNeutronScatteringLaw_coherentElasticDefaultConst() &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw_coherentElasticDefaultConst

!! Create, default
function ThermalNeutronScatteringLaw_coherentElasticDefault() &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw_coherentElasticDefault

!! Create, general, const
function ThermalNeutronScatteringLaw_coherentElasticCreateConst( &
   label, &
   pid, &
   productFrame, &
   S_table, &
   labelSize, &
   pidSize, &
   productFrameSize &
) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: S_table
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw_coherentElasticCreateConst

!! Create, general
function ThermalNeutronScatteringLaw_coherentElasticCreate( &
   label, &
   pid, &
   productFrame, &
   S_table, &
   labelSize, &
   pidSize, &
   productFrameSize &
) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
   type(c_ptr), value :: S_table
   type(c_ptr) :: handle
end function ThermalNeutronScatteringLaw_coherentElasticCreate

!! Assign
subroutine ThermalNeutronScatteringLaw_coherentElasticAssign(handleLHS, handleRHS) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ThermalNeutronScatteringLaw_coherentElasticAssign

!! Delete
subroutine ThermalNeutronScatteringLaw_coherentElasticDelete(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ThermalNeutronScatteringLaw_coherentElasticDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ThermalNeutronScatteringLaw_coherentElasticRead(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw_coherentElasticRead

!! Write to file
function ThermalNeutronScatteringLaw_coherentElasticWrite(handle, filename, filenameSize) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw_coherentElasticWrite

!! Print to standard output, in our prettyprinting format
function ThermalNeutronScatteringLaw_coherentElasticPrint(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw_coherentElasticPrint

!! Print to standard output, as XML
function ThermalNeutronScatteringLaw_coherentElasticPrintXML(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw_coherentElasticPrintXML

!! Print to standard output, as JSON
function ThermalNeutronScatteringLaw_coherentElasticPrintJSON(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ThermalNeutronScatteringLaw_coherentElasticPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw_coherentElasticLabelHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThermalNeutronScatteringLaw_coherentElasticLabelHas

!! Get
function ThermalNeutronScatteringLaw_coherentElasticLabelGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ThermalNeutronScatteringLaw_coherentElasticLabelGet

!! Set
subroutine ThermalNeutronScatteringLaw_coherentElasticLabelSet(handle, label, labelSize) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ThermalNeutronScatteringLaw_coherentElasticLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: pid
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw_coherentElasticPidHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticPidHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThermalNeutronScatteringLaw_coherentElasticPidHas

!! Get
function ThermalNeutronScatteringLaw_coherentElasticPidGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticPidGet') &
      result(pid)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: pid
end function ThermalNeutronScatteringLaw_coherentElasticPidGet

!! Set
subroutine ThermalNeutronScatteringLaw_coherentElasticPidSet(handle, pid, pidSize) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticPidSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
end subroutine ThermalNeutronScatteringLaw_coherentElasticPidSet


!! -----------------------------------------------------------------------------
!! Metadatum: productFrame
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw_coherentElasticProductFrameHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticProductFrameHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThermalNeutronScatteringLaw_coherentElasticProductFrameHas

!! Get
function ThermalNeutronScatteringLaw_coherentElasticProductFrameGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticProductFrameGet') &
      result(productFrame)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: productFrame
end function ThermalNeutronScatteringLaw_coherentElasticProductFrameGet

!! Set
subroutine ThermalNeutronScatteringLaw_coherentElasticProductFrameSet(handle, productFrame, productFrameSize) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticProductFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: productFrameSize
   character(c_char), intent(in) :: productFrame(productFrameSize)
end subroutine ThermalNeutronScatteringLaw_coherentElasticProductFrameSet


!! -----------------------------------------------------------------------------
!! Child: S_table
!! -----------------------------------------------------------------------------

!! Has
function ThermalNeutronScatteringLaw_coherentElasticS_tableHas(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticS_tableHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ThermalNeutronScatteringLaw_coherentElasticS_tableHas

!! Get, const
function ThermalNeutronScatteringLaw_coherentElasticS_tableGetConst(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticS_tableGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ThermalNeutronScatteringLaw_coherentElasticS_tableGetConst

!! Get
function ThermalNeutronScatteringLaw_coherentElasticS_tableGet(handle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticS_tableGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ThermalNeutronScatteringLaw_coherentElasticS_tableGet

!! Set
subroutine ThermalNeutronScatteringLaw_coherentElasticS_tableSet(handle, fieldHandle) &
      bind(C, name='ThermalNeutronScatteringLaw_coherentElasticS_tableSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ThermalNeutronScatteringLaw_coherentElasticS_tableSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalThermalNeutronScatteringLaw_coherentElastic
