
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDecayData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DecayDataDefaultConst() &
      bind(C, name='DecayDataDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DecayDataDefaultConst

!! Create, default
function DecayDataDefault() &
      bind(C, name='DecayDataDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DecayDataDefault

!! Create, general, const
function DecayDataCreateConst( &
   decayModes, &
   averageEnergies &
) &
      bind(C, name='DecayDataCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: decayModes
   type(c_ptr), value :: averageEnergies
   type(c_ptr) :: handle
end function DecayDataCreateConst

!! Create, general
function DecayDataCreate( &
   decayModes, &
   averageEnergies &
) &
      bind(C, name='DecayDataCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: decayModes
   type(c_ptr), value :: averageEnergies
   type(c_ptr) :: handle
end function DecayDataCreate

!! Assign
subroutine DecayDataAssign(handleLHS, handleRHS) &
      bind(C, name='DecayDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DecayDataAssign

!! Delete
subroutine DecayDataDelete(handle) &
      bind(C, name='DecayDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DecayDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DecayDataRead(handle, filename, filenameSize) &
      bind(C, name='DecayDataRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DecayDataRead

!! Write to file
function DecayDataWrite(handle, filename, filenameSize) &
      bind(C, name='DecayDataWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DecayDataWrite

!! Print to standard output, in our prettyprinting format
function DecayDataPrint(handle) &
      bind(C, name='DecayDataPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayDataPrint

!! Print to standard output, as XML
function DecayDataPrintXML(handle) &
      bind(C, name='DecayDataPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayDataPrintXML

!! Print to standard output, as JSON
function DecayDataPrintJSON(handle) &
      bind(C, name='DecayDataPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DecayDataPrintJSON


!! -----------------------------------------------------------------------------
!! Child: decayModes
!! -----------------------------------------------------------------------------

!! Has
function DecayDataDecayModesHas(handle) &
      bind(C, name='DecayDataDecayModesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayDataDecayModesHas

!! Get, const
function DecayDataDecayModesGetConst(handle) &
      bind(C, name='DecayDataDecayModesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayDataDecayModesGetConst

!! Get
function DecayDataDecayModesGet(handle) &
      bind(C, name='DecayDataDecayModesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayDataDecayModesGet

!! Set
subroutine DecayDataDecayModesSet(handle, fieldHandle) &
      bind(C, name='DecayDataDecayModesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayDataDecayModesSet


!! -----------------------------------------------------------------------------
!! Child: averageEnergies
!! -----------------------------------------------------------------------------

!! Has
function DecayDataAverageEnergiesHas(handle) &
      bind(C, name='DecayDataAverageEnergiesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DecayDataAverageEnergiesHas

!! Get, const
function DecayDataAverageEnergiesGetConst(handle) &
      bind(C, name='DecayDataAverageEnergiesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayDataAverageEnergiesGetConst

!! Get
function DecayDataAverageEnergiesGet(handle) &
      bind(C, name='DecayDataAverageEnergiesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DecayDataAverageEnergiesGet

!! Set
subroutine DecayDataAverageEnergiesSet(handle, fieldHandle) &
      bind(C, name='DecayDataAverageEnergiesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DecayDataAverageEnergiesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDecayData
