
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNeutrinoEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NeutrinoEnergyDefaultConst() &
      bind(C, name='NeutrinoEnergyDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NeutrinoEnergyDefaultConst

!! Create, default
function NeutrinoEnergyDefault() &
      bind(C, name='NeutrinoEnergyDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function NeutrinoEnergyDefault

!! Create, general, const
function NeutrinoEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='NeutrinoEnergyCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function NeutrinoEnergyCreateConst

!! Create, general
function NeutrinoEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='NeutrinoEnergyCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: polynomial1d
   type(c_ptr) :: handle
end function NeutrinoEnergyCreate

!! Assign
subroutine NeutrinoEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='NeutrinoEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NeutrinoEnergyAssign

!! Delete
subroutine NeutrinoEnergyDelete(handle) &
      bind(C, name='NeutrinoEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NeutrinoEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NeutrinoEnergyRead(handle, filename, filenameSize) &
      bind(C, name='NeutrinoEnergyRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NeutrinoEnergyRead

!! Write to file
function NeutrinoEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='NeutrinoEnergyWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function NeutrinoEnergyWrite

!! Print to standard output, in our prettyprinting format
function NeutrinoEnergyPrint(handle) &
      bind(C, name='NeutrinoEnergyPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NeutrinoEnergyPrint

!! Print to standard output, as XML
function NeutrinoEnergyPrintXML(handle) &
      bind(C, name='NeutrinoEnergyPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NeutrinoEnergyPrintXML

!! Print to standard output, as JSON
function NeutrinoEnergyPrintJSON(handle) &
      bind(C, name='NeutrinoEnergyPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function NeutrinoEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function NeutrinoEnergyPolynomial1dHas(handle) &
      bind(C, name='NeutrinoEnergyPolynomial1dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function NeutrinoEnergyPolynomial1dHas

!! Get, const
function NeutrinoEnergyPolynomial1dGetConst(handle) &
      bind(C, name='NeutrinoEnergyPolynomial1dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NeutrinoEnergyPolynomial1dGetConst

!! Get
function NeutrinoEnergyPolynomial1dGet(handle) &
      bind(C, name='NeutrinoEnergyPolynomial1dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function NeutrinoEnergyPolynomial1dGet

!! Set
subroutine NeutrinoEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='NeutrinoEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine NeutrinoEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNeutrinoEnergy
