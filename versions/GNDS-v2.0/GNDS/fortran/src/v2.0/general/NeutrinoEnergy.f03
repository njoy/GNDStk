
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalNeutrinoEnergy
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NeutrinoEnergyDefaultConst() &
      bind(C, name='NeutrinoEnergyDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NeutrinoEnergyDefaultConst
end function NeutrinoEnergyDefaultConst

!! Create, default, non-const
function NeutrinoEnergyDefault() &
      bind(C, name='NeutrinoEnergyDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NeutrinoEnergyDefault
end function NeutrinoEnergyDefault

!! Create, general, const
function NeutrinoEnergyCreateConst( &
   polynomial1d &
) &
      bind(C, name='NeutrinoEnergyCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr) :: NeutrinoEnergyCreateConst
end function NeutrinoEnergyCreateConst

!! Create, general, non-const
function NeutrinoEnergyCreate( &
   polynomial1d &
) &
      bind(C, name='NeutrinoEnergyCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: polynomial1d
   type(c_ptr) :: NeutrinoEnergyCreate
end function NeutrinoEnergyCreate

!! Assign
subroutine NeutrinoEnergyAssign(handleLHS, handleRHS) &
      bind(C, name='NeutrinoEnergyAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine NeutrinoEnergyAssign

!! Delete
subroutine NeutrinoEnergyDelete(handle) &
      bind(C, name='NeutrinoEnergyDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NeutrinoEnergyDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function NeutrinoEnergyRead(handle, filename, filenameSize) &
      bind(C, name='NeutrinoEnergyRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NeutrinoEnergyRead
end function NeutrinoEnergyRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function NeutrinoEnergyWrite(handle, filename, filenameSize) &
      bind(C, name='NeutrinoEnergyWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NeutrinoEnergyWrite
end function NeutrinoEnergyWrite

!! Print to standard output, in our prettyprinting format
function NeutrinoEnergyPrint(handle) &
      bind(C, name='NeutrinoEnergyPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NeutrinoEnergyPrint
end function NeutrinoEnergyPrint

!! Print to standard output, as XML
function NeutrinoEnergyPrintXML(handle) &
      bind(C, name='NeutrinoEnergyPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NeutrinoEnergyPrintXML
end function NeutrinoEnergyPrintXML

!! Print to standard output, as JSON
function NeutrinoEnergyPrintJSON(handle) &
      bind(C, name='NeutrinoEnergyPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NeutrinoEnergyPrintJSON
end function NeutrinoEnergyPrintJSON


!! -----------------------------------------------------------------------------
!! Child: polynomial1d
!! -----------------------------------------------------------------------------

!! Has
function NeutrinoEnergyPolynomial1dHas(handle) &
      bind(C, name='NeutrinoEnergyPolynomial1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NeutrinoEnergyPolynomial1dHas
end function NeutrinoEnergyPolynomial1dHas

!! Get, const
function NeutrinoEnergyPolynomial1dGetConst(handle) &
      bind(C, name='NeutrinoEnergyPolynomial1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NeutrinoEnergyPolynomial1dGetConst
end function NeutrinoEnergyPolynomial1dGetConst

!! Get, non-const
function NeutrinoEnergyPolynomial1dGet(handle) &
      bind(C, name='NeutrinoEnergyPolynomial1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: NeutrinoEnergyPolynomial1dGet
end function NeutrinoEnergyPolynomial1dGet

!! Set
subroutine NeutrinoEnergyPolynomial1dSet(handle, fieldHandle) &
      bind(C, name='NeutrinoEnergyPolynomial1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine NeutrinoEnergyPolynomial1dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalNeutrinoEnergy
