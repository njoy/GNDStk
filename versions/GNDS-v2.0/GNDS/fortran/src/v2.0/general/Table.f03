
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalTable
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function TableDefaultConst() &
      bind(C, name='TableDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: TableDefaultConst
end function TableDefaultConst

!! Create, default
function TableDefault() &
      bind(C, name='TableDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: TableDefault
end function TableDefault

!! Create, general, const
function TableCreateConst( &
   rows, &
   columns, &
   columnHeaders, &
   data &
) &
      bind(C, name='TableCreateConst')
   use iso_c_binding
   implicit none
   integer(c_int), intent(in), value :: rows
   integer(c_int), intent(in), value :: columns
   type(c_ptr), intent(in), value :: columnHeaders
   type(c_ptr), intent(in), value :: data
   type(c_ptr) :: TableCreateConst
end function TableCreateConst

!! Create, general
function TableCreate( &
   rows, &
   columns, &
   columnHeaders, &
   data &
) &
      bind(C, name='TableCreate')
   use iso_c_binding
   implicit none
   integer(c_int), intent(in), value :: rows
   integer(c_int), intent(in), value :: columns
   type(c_ptr), intent(in), value :: columnHeaders
   type(c_ptr), intent(in), value :: data
   type(c_ptr) :: TableCreate
end function TableCreate

!! Assign
subroutine TableAssign(handleLHS, handleRHS) &
      bind(C, name='TableAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine TableAssign

!! Delete
subroutine TableDelete(handle) &
      bind(C, name='TableDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine TableDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function TableRead(handle, filename, filenameSize) &
      bind(C, name='TableRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: TableRead
end function TableRead

!! Write to file
function TableWrite(handle, filename, filenameSize) &
      bind(C, name='TableWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: TableWrite
end function TableWrite

!! Print to standard output, in our prettyprinting format
function TablePrint(handle) &
      bind(C, name='TablePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TablePrint
end function TablePrint

!! Print to standard output, as XML
function TablePrintXML(handle) &
      bind(C, name='TablePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TablePrintXML
end function TablePrintXML

!! Print to standard output, as JSON
function TablePrintJSON(handle) &
      bind(C, name='TablePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TablePrintJSON
end function TablePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: rows
!! -----------------------------------------------------------------------------

!! Has
function TableRowsHas(handle) &
      bind(C, name='TableRowsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TableRowsHas
end function TableRowsHas

!! Get
function TableRowsGet(handle) &
      bind(C, name='TableRowsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TableRowsGet
end function TableRowsGet

!! Set
subroutine TableRowsSet(handle, rows) &
      bind(C, name='TableRowsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: rows
end subroutine TableRowsSet


!! -----------------------------------------------------------------------------
!! Metadatum: columns
!! -----------------------------------------------------------------------------

!! Has
function TableColumnsHas(handle) &
      bind(C, name='TableColumnsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TableColumnsHas
end function TableColumnsHas

!! Get
function TableColumnsGet(handle) &
      bind(C, name='TableColumnsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TableColumnsGet
end function TableColumnsGet

!! Set
subroutine TableColumnsSet(handle, columns) &
      bind(C, name='TableColumnsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: columns
end subroutine TableColumnsSet


!! -----------------------------------------------------------------------------
!! Child: columnHeaders
!! -----------------------------------------------------------------------------

!! Has
function TableColumnHeadersHas(handle) &
      bind(C, name='TableColumnHeadersHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TableColumnHeadersHas
end function TableColumnHeadersHas

!! Get, const
function TableColumnHeadersGetConst(handle) &
      bind(C, name='TableColumnHeadersGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: TableColumnHeadersGetConst
end function TableColumnHeadersGetConst

!! Get
function TableColumnHeadersGet(handle) &
      bind(C, name='TableColumnHeadersGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: TableColumnHeadersGet
end function TableColumnHeadersGet

!! Set
subroutine TableColumnHeadersSet(handle, fieldHandle) &
      bind(C, name='TableColumnHeadersSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine TableColumnHeadersSet


!! -----------------------------------------------------------------------------
!! Child: data
!! -----------------------------------------------------------------------------

!! Has
function TableDataHas(handle) &
      bind(C, name='TableDataHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: TableDataHas
end function TableDataHas

!! Get, const
function TableDataGetConst(handle) &
      bind(C, name='TableDataGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: TableDataGetConst
end function TableDataGetConst

!! Get
function TableDataGet(handle) &
      bind(C, name='TableDataGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: TableDataGet
end function TableDataGet

!! Set
subroutine TableDataSet(handle, fieldHandle) &
      bind(C, name='TableDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine TableDataSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalTable
