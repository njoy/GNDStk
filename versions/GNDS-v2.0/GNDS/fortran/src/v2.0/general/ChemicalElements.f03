
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalChemicalElements
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ChemicalElementsDefaultConst() &
      bind(C, name='ChemicalElementsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ChemicalElementsDefaultConst

!! Create, default
function ChemicalElementsDefault() &
      bind(C, name='ChemicalElementsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ChemicalElementsDefault

!! Create, general, const
function ChemicalElementsCreateConst( &
   chemicalElement, chemicalElementSize &
) &
      bind(C, name='ChemicalElementsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: chemicalElementSize
   type(c_ptr) :: chemicalElement(chemicalElementSize)
   type(c_ptr) :: handle
end function ChemicalElementsCreateConst

!! Create, general
function ChemicalElementsCreate( &
   chemicalElement, chemicalElementSize &
) &
      bind(C, name='ChemicalElementsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), value :: chemicalElementSize
   type(c_ptr) :: chemicalElement(chemicalElementSize)
   type(c_ptr) :: handle
end function ChemicalElementsCreate

!! Assign
subroutine ChemicalElementsAssign(handleLHS, handleRHS) &
      bind(C, name='ChemicalElementsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ChemicalElementsAssign

!! Delete
subroutine ChemicalElementsDelete(handle) &
      bind(C, name='ChemicalElementsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChemicalElementsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ChemicalElementsRead(handle, filename, filenameSize) &
      bind(C, name='ChemicalElementsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ChemicalElementsRead

!! Write to file
function ChemicalElementsWrite(handle, filename, filenameSize) &
      bind(C, name='ChemicalElementsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ChemicalElementsWrite

!! Print to standard output, in our prettyprinting format
function ChemicalElementsPrint(handle) &
      bind(C, name='ChemicalElementsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChemicalElementsPrint

!! Print to standard output, as XML
function ChemicalElementsPrintXML(handle) &
      bind(C, name='ChemicalElementsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChemicalElementsPrintXML

!! Print to standard output, as JSON
function ChemicalElementsPrintJSON(handle) &
      bind(C, name='ChemicalElementsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ChemicalElementsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: chemicalElement
!! -----------------------------------------------------------------------------

!! Has
function ChemicalElementsChemicalElementHas(handle) &
      bind(C, name='ChemicalElementsChemicalElementHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ChemicalElementsChemicalElementHas

!! Clear
subroutine ChemicalElementsChemicalElementClear(handle) &
      bind(C, name='ChemicalElementsChemicalElementClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChemicalElementsChemicalElementClear

!! Size
function ChemicalElementsChemicalElementSize(handle) &
      bind(C, name='ChemicalElementsChemicalElementSize') &
      result(vectorSize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: vectorSize
end function ChemicalElementsChemicalElementSize

!! Add
subroutine ChemicalElementsChemicalElementAdd(handle, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementAdd

!! Get, by index \in [0,size), const
function ChemicalElementsChemicalElementGetConst(handle, index) &
      bind(C, name='ChemicalElementsChemicalElementGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetConst

!! Get, by index \in [0,size)
function ChemicalElementsChemicalElementGet(handle, index) &
      bind(C, name='ChemicalElementsChemicalElementGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGet

!! Set, by index \in [0,size)
subroutine ChemicalElementsChemicalElementSet(handle, index, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSet

!! ------------------------
!! Re: metadatum symbol
!! ------------------------

!! Has, by symbol
function ChemicalElementsChemicalElementHasBySymbol(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementHasBySymbol') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ChemicalElementsChemicalElementHasBySymbol

!! Get, by symbol, const
function ChemicalElementsChemicalElementGetBySymbolConst(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetBySymbolConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetBySymbolConst

!! Get, by symbol
function ChemicalElementsChemicalElementGetBySymbol(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetBySymbol') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetBySymbol

!! Set, by symbol
subroutine ChemicalElementsChemicalElementSetBySymbol(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSetBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSetBySymbol

!! ------------------------
!! Re: metadatum Z
!! ------------------------

!! Has, by Z
function ChemicalElementsChemicalElementHasByZ(handle, meta) &
      bind(C, name='ChemicalElementsChemicalElementHasByZ') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: has
end function ChemicalElementsChemicalElementHasByZ

!! Get, by Z, const
function ChemicalElementsChemicalElementGetByZConst(handle, meta) &
      bind(C, name='ChemicalElementsChemicalElementGetByZConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetByZConst

!! Get, by Z
function ChemicalElementsChemicalElementGetByZ(handle, meta) &
      bind(C, name='ChemicalElementsChemicalElementGetByZ') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetByZ

!! Set, by Z
subroutine ChemicalElementsChemicalElementSetByZ(handle, meta, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSetByZ')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSetByZ

!! ------------------------
!! Re: metadatum name
!! ------------------------

!! Has, by name
function ChemicalElementsChemicalElementHasByName(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementHasByName') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: has
end function ChemicalElementsChemicalElementHasByName

!! Get, by name, const
function ChemicalElementsChemicalElementGetByNameConst(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetByNameConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetByNameConst

!! Get, by name
function ChemicalElementsChemicalElementGetByName(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetByName') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: resultHandle
end function ChemicalElementsChemicalElementGetByName

!! Set, by name
subroutine ChemicalElementsChemicalElementSetByName(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSetByName')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSetByName


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalChemicalElements
