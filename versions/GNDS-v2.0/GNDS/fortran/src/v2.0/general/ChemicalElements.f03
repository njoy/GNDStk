
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalChemicalElements
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ChemicalElementsDefaultConst() &
      bind(C, name='ChemicalElementsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ChemicalElementsDefaultConst
end function ChemicalElementsDefaultConst

!! Create, default, non-const
function ChemicalElementsDefault() &
      bind(C, name='ChemicalElementsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ChemicalElementsDefault
end function ChemicalElementsDefault

!! Create, general, const
function ChemicalElementsCreateConst( &
   chemicalElement, chemicalElementSize &
) &
      bind(C, name='ChemicalElementsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: chemicalElementSize
   type(c_ptr), intent(in) :: chemicalElement(chemicalElementSize)
   type(c_ptr) :: ChemicalElementsCreateConst
end function ChemicalElementsCreateConst

!! Create, general, non-const
function ChemicalElementsCreate( &
   chemicalElement, chemicalElementSize &
) &
      bind(C, name='ChemicalElementsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: chemicalElementSize
   type(c_ptr), intent(in) :: chemicalElement(chemicalElementSize)
   type(c_ptr) :: ChemicalElementsCreate
end function ChemicalElementsCreate

!! Assign
subroutine ChemicalElementsAssign(handleLHS, handleRHS) &
      bind(C, name='ChemicalElementsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine ChemicalElementsAssign

!! Delete
subroutine ChemicalElementsDelete(handle) &
      bind(C, name='ChemicalElementsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChemicalElementsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function ChemicalElementsRead(handle, filename, filenameSize) &
      bind(C, name='ChemicalElementsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ChemicalElementsRead
end function ChemicalElementsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function ChemicalElementsWrite(handle, filename, filenameSize) &
      bind(C, name='ChemicalElementsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ChemicalElementsWrite
end function ChemicalElementsWrite

!! Print to standard output, in our prettyprinting format
function ChemicalElementsPrint(handle) &
      bind(C, name='ChemicalElementsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChemicalElementsPrint
end function ChemicalElementsPrint

!! Print to standard output, as XML
function ChemicalElementsPrintXML(handle) &
      bind(C, name='ChemicalElementsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChemicalElementsPrintXML
end function ChemicalElementsPrintXML

!! Print to standard output, as JSON
function ChemicalElementsPrintJSON(handle) &
      bind(C, name='ChemicalElementsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChemicalElementsPrintJSON
end function ChemicalElementsPrintJSON


!! -----------------------------------------------------------------------------
!! Child: chemicalElement
!! -----------------------------------------------------------------------------

!! Has
function ChemicalElementsChemicalElementHas(handle) &
      bind(C, name='ChemicalElementsChemicalElementHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ChemicalElementsChemicalElementHas
end function ChemicalElementsChemicalElementHas

!! Clear
subroutine ChemicalElementsChemicalElementClear(handle) &
      bind(C, name='ChemicalElementsChemicalElementClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ChemicalElementsChemicalElementClear

!! Size
function ChemicalElementsChemicalElementSize(handle) &
      bind(C, name='ChemicalElementsChemicalElementSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: ChemicalElementsChemicalElementSize
end function ChemicalElementsChemicalElementSize

!! Add
subroutine ChemicalElementsChemicalElementAdd(handle, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementAdd

!! Get, by index \in [0,size), const
function ChemicalElementsChemicalElementGetConst(handle, index) &
      bind(C, name='ChemicalElementsChemicalElementGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ChemicalElementsChemicalElementGetConst
end function ChemicalElementsChemicalElementGetConst

!! Get, by index \in [0,size), non-const
function ChemicalElementsChemicalElementGet(handle, index) &
      bind(C, name='ChemicalElementsChemicalElementGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: ChemicalElementsChemicalElementGet
end function ChemicalElementsChemicalElementGet

!! Set, by index \in [0,size)
subroutine ChemicalElementsChemicalElementSet(handle, index, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSet

!! ------------------------
!! Re: metadatum symbol
!! ------------------------

!! Has, by symbol
function ChemicalElementsChemicalElementHasBySymbol(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementHasBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: ChemicalElementsChemicalElementHasBySymbol
end function ChemicalElementsChemicalElementHasBySymbol

!! Get, by symbol, const
function ChemicalElementsChemicalElementGetBySymbolConst(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetBySymbolConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ChemicalElementsChemicalElementGetBySymbolConst
end function ChemicalElementsChemicalElementGetBySymbolConst

!! Get, by symbol, non-const
function ChemicalElementsChemicalElementGetBySymbol(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ChemicalElementsChemicalElementGetBySymbol
end function ChemicalElementsChemicalElementGetBySymbol

!! Set, by symbol
subroutine ChemicalElementsChemicalElementSetBySymbol(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSetBySymbol')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSetBySymbol

!! ------------------------
!! Re: metadatum Z
!! ------------------------

!! Has, by Z
function ChemicalElementsChemicalElementHasByZ(handle, meta) &
      bind(C, name='ChemicalElementsChemicalElementHasByZ')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   integer(c_int) :: ChemicalElementsChemicalElementHasByZ
end function ChemicalElementsChemicalElementHasByZ

!! Get, by Z, const
function ChemicalElementsChemicalElementGetByZConst(handle, meta) &
      bind(C, name='ChemicalElementsChemicalElementGetByZConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: ChemicalElementsChemicalElementGetByZConst
end function ChemicalElementsChemicalElementGetByZConst

!! Get, by Z, non-const
function ChemicalElementsChemicalElementGetByZ(handle, meta) &
      bind(C, name='ChemicalElementsChemicalElementGetByZ')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr) :: ChemicalElementsChemicalElementGetByZ
end function ChemicalElementsChemicalElementGetByZ

!! Set, by Z
subroutine ChemicalElementsChemicalElementSetByZ(handle, meta, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSetByZ')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), intent(in), value :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSetByZ

!! ------------------------
!! Re: metadatum name
!! ------------------------

!! Has, by name
function ChemicalElementsChemicalElementHasByName(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementHasByName')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: ChemicalElementsChemicalElementHasByName
end function ChemicalElementsChemicalElementHasByName

!! Get, by name, const
function ChemicalElementsChemicalElementGetByNameConst(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetByNameConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ChemicalElementsChemicalElementGetByNameConst
end function ChemicalElementsChemicalElementGetByNameConst

!! Get, by name, non-const
function ChemicalElementsChemicalElementGetByName(handle, meta, metaSize) &
      bind(C, name='ChemicalElementsChemicalElementGetByName')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: ChemicalElementsChemicalElementGetByName
end function ChemicalElementsChemicalElementGetByName

!! Set, by name
subroutine ChemicalElementsChemicalElementSetByName(handle, meta, metaSize, fieldHandle) &
      bind(C, name='ChemicalElementsChemicalElementSetByName')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine ChemicalElementsChemicalElementSetByName


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalChemicalElements
