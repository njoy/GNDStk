
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGaugeBoson
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GaugeBosonDefaultConst() &
      bind(C, name='GaugeBosonDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GaugeBosonDefaultConst

!! Create, default
function GaugeBosonDefault() &
      bind(C, name='GaugeBosonDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GaugeBosonDefault

!! Create, general, const
function GaugeBosonCreateConst( &
   id, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   idSize &
) &
      bind(C, name='GaugeBosonCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr) :: handle
end function GaugeBosonCreateConst

!! Create, general
function GaugeBosonCreate( &
   id, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   idSize &
) &
      bind(C, name='GaugeBosonCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), value :: mass
   type(c_ptr), value :: spin
   type(c_ptr), value :: parity
   type(c_ptr), value :: charge
   type(c_ptr), value :: halflife
   type(c_ptr) :: handle
end function GaugeBosonCreate

!! Assign
subroutine GaugeBosonAssign(handleLHS, handleRHS) &
      bind(C, name='GaugeBosonAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine GaugeBosonAssign

!! Delete
subroutine GaugeBosonDelete(handle) &
      bind(C, name='GaugeBosonDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GaugeBosonDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function GaugeBosonRead(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GaugeBosonRead

!! Write to file
function GaugeBosonWrite(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GaugeBosonWrite

!! Print to standard output, in our prettyprinting format
function GaugeBosonPrint(handle) &
      bind(C, name='GaugeBosonPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GaugeBosonPrint

!! Print to standard output, as XML
function GaugeBosonPrintXML(handle) &
      bind(C, name='GaugeBosonPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GaugeBosonPrintXML

!! Print to standard output, as JSON
function GaugeBosonPrintJSON(handle) &
      bind(C, name='GaugeBosonPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GaugeBosonPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonIdHas(handle) &
      bind(C, name='GaugeBosonIdHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonIdHas

!! Get
function GaugeBosonIdGet(handle) &
      bind(C, name='GaugeBosonIdGet') &
      result(id)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: id
end function GaugeBosonIdGet

!! Set
subroutine GaugeBosonIdSet(handle, id, idSize) &
      bind(C, name='GaugeBosonIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine GaugeBosonIdSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonMassHas(handle) &
      bind(C, name='GaugeBosonMassHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonMassHas

!! Get, const
function GaugeBosonMassGetConst(handle) &
      bind(C, name='GaugeBosonMassGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonMassGetConst

!! Get
function GaugeBosonMassGet(handle) &
      bind(C, name='GaugeBosonMassGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonMassGet

!! Set
subroutine GaugeBosonMassSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GaugeBosonMassSet


!! -----------------------------------------------------------------------------
!! Child: spin
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonSpinHas(handle) &
      bind(C, name='GaugeBosonSpinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonSpinHas

!! Get, const
function GaugeBosonSpinGetConst(handle) &
      bind(C, name='GaugeBosonSpinGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonSpinGetConst

!! Get
function GaugeBosonSpinGet(handle) &
      bind(C, name='GaugeBosonSpinGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonSpinGet

!! Set
subroutine GaugeBosonSpinSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GaugeBosonSpinSet


!! -----------------------------------------------------------------------------
!! Child: parity
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonParityHas(handle) &
      bind(C, name='GaugeBosonParityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonParityHas

!! Get, const
function GaugeBosonParityGetConst(handle) &
      bind(C, name='GaugeBosonParityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonParityGetConst

!! Get
function GaugeBosonParityGet(handle) &
      bind(C, name='GaugeBosonParityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonParityGet

!! Set
subroutine GaugeBosonParitySet(handle, fieldHandle) &
      bind(C, name='GaugeBosonParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GaugeBosonParitySet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonChargeHas(handle) &
      bind(C, name='GaugeBosonChargeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonChargeHas

!! Get, const
function GaugeBosonChargeGetConst(handle) &
      bind(C, name='GaugeBosonChargeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonChargeGetConst

!! Get
function GaugeBosonChargeGet(handle) &
      bind(C, name='GaugeBosonChargeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonChargeGet

!! Set
subroutine GaugeBosonChargeSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GaugeBosonChargeSet


!! -----------------------------------------------------------------------------
!! Child: halflife
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonHalflifeHas(handle) &
      bind(C, name='GaugeBosonHalflifeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GaugeBosonHalflifeHas

!! Get, const
function GaugeBosonHalflifeGetConst(handle) &
      bind(C, name='GaugeBosonHalflifeGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonHalflifeGetConst

!! Get
function GaugeBosonHalflifeGet(handle) &
      bind(C, name='GaugeBosonHalflifeGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GaugeBosonHalflifeGet

!! Set
subroutine GaugeBosonHalflifeSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonHalflifeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GaugeBosonHalflifeSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGaugeBoson
