
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGaugeBoson
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GaugeBosonDefaultConst() &
      bind(C, name='GaugeBosonDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: GaugeBosonDefaultConst
end function GaugeBosonDefaultConst

!! Create, default, non-const
function GaugeBosonDefault() &
      bind(C, name='GaugeBosonDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: GaugeBosonDefault
end function GaugeBosonDefault

!! Create, general, const
function GaugeBosonCreateConst( &
   id, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   idSize &
) &
      bind(C, name='GaugeBosonCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), intent(in), value :: mass
   type(c_ptr), intent(in), value :: spin
   type(c_ptr), intent(in), value :: parity
   type(c_ptr), intent(in), value :: charge
   type(c_ptr), intent(in), value :: halflife
   type(c_ptr) :: GaugeBosonCreateConst
end function GaugeBosonCreateConst

!! Create, general, non-const
function GaugeBosonCreate( &
   id, &
   mass, &
   spin, &
   parity, &
   charge, &
   halflife, &
   idSize &
) &
      bind(C, name='GaugeBosonCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
   type(c_ptr), intent(in), value :: mass
   type(c_ptr), intent(in), value :: spin
   type(c_ptr), intent(in), value :: parity
   type(c_ptr), intent(in), value :: charge
   type(c_ptr), intent(in), value :: halflife
   type(c_ptr) :: GaugeBosonCreate
end function GaugeBosonCreate

!! Assign
subroutine GaugeBosonAssign(handleLHS, handleRHS) &
      bind(C, name='GaugeBosonAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine GaugeBosonAssign

!! Delete
subroutine GaugeBosonDelete(handle) &
      bind(C, name='GaugeBosonDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GaugeBosonDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function GaugeBosonRead(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: GaugeBosonRead
end function GaugeBosonRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function GaugeBosonWrite(handle, filename, filenameSize) &
      bind(C, name='GaugeBosonWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: GaugeBosonWrite
end function GaugeBosonWrite

!! Print to standard output, in our prettyprinting format
function GaugeBosonPrint(handle) &
      bind(C, name='GaugeBosonPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonPrint
end function GaugeBosonPrint

!! Print to standard output, as XML
function GaugeBosonPrintXML(handle) &
      bind(C, name='GaugeBosonPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonPrintXML
end function GaugeBosonPrintXML

!! Print to standard output, as JSON
function GaugeBosonPrintJSON(handle) &
      bind(C, name='GaugeBosonPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonPrintJSON
end function GaugeBosonPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: id
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonIdHas(handle) &
      bind(C, name='GaugeBosonIdHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonIdHas
end function GaugeBosonIdHas

!! Get
function GaugeBosonIdGet(handle) &
      bind(C, name='GaugeBosonIdGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GaugeBosonIdGet
end function GaugeBosonIdGet

!! Set
subroutine GaugeBosonIdSet(handle, id, idSize) &
      bind(C, name='GaugeBosonIdSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: idSize
   character(c_char), intent(in) :: id(idSize)
end subroutine GaugeBosonIdSet


!! -----------------------------------------------------------------------------
!! Child: mass
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonMassHas(handle) &
      bind(C, name='GaugeBosonMassHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonMassHas
end function GaugeBosonMassHas

!! Get, const
function GaugeBosonMassGetConst(handle) &
      bind(C, name='GaugeBosonMassGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GaugeBosonMassGetConst
end function GaugeBosonMassGetConst

!! Get, non-const
function GaugeBosonMassGet(handle) &
      bind(C, name='GaugeBosonMassGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: GaugeBosonMassGet
end function GaugeBosonMassGet

!! Set
subroutine GaugeBosonMassSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonMassSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonMassSet


!! -----------------------------------------------------------------------------
!! Child: spin
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonSpinHas(handle) &
      bind(C, name='GaugeBosonSpinHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonSpinHas
end function GaugeBosonSpinHas

!! Get, const
function GaugeBosonSpinGetConst(handle) &
      bind(C, name='GaugeBosonSpinGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GaugeBosonSpinGetConst
end function GaugeBosonSpinGetConst

!! Get, non-const
function GaugeBosonSpinGet(handle) &
      bind(C, name='GaugeBosonSpinGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: GaugeBosonSpinGet
end function GaugeBosonSpinGet

!! Set
subroutine GaugeBosonSpinSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonSpinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonSpinSet


!! -----------------------------------------------------------------------------
!! Child: parity
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonParityHas(handle) &
      bind(C, name='GaugeBosonParityHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonParityHas
end function GaugeBosonParityHas

!! Get, const
function GaugeBosonParityGetConst(handle) &
      bind(C, name='GaugeBosonParityGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GaugeBosonParityGetConst
end function GaugeBosonParityGetConst

!! Get, non-const
function GaugeBosonParityGet(handle) &
      bind(C, name='GaugeBosonParityGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: GaugeBosonParityGet
end function GaugeBosonParityGet

!! Set
subroutine GaugeBosonParitySet(handle, fieldHandle) &
      bind(C, name='GaugeBosonParitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonParitySet


!! -----------------------------------------------------------------------------
!! Child: charge
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonChargeHas(handle) &
      bind(C, name='GaugeBosonChargeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonChargeHas
end function GaugeBosonChargeHas

!! Get, const
function GaugeBosonChargeGetConst(handle) &
      bind(C, name='GaugeBosonChargeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GaugeBosonChargeGetConst
end function GaugeBosonChargeGetConst

!! Get, non-const
function GaugeBosonChargeGet(handle) &
      bind(C, name='GaugeBosonChargeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: GaugeBosonChargeGet
end function GaugeBosonChargeGet

!! Set
subroutine GaugeBosonChargeSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonChargeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonChargeSet


!! -----------------------------------------------------------------------------
!! Child: halflife
!! -----------------------------------------------------------------------------

!! Has
function GaugeBosonHalflifeHas(handle) &
      bind(C, name='GaugeBosonHalflifeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: GaugeBosonHalflifeHas
end function GaugeBosonHalflifeHas

!! Get, const
function GaugeBosonHalflifeGetConst(handle) &
      bind(C, name='GaugeBosonHalflifeGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: GaugeBosonHalflifeGetConst
end function GaugeBosonHalflifeGetConst

!! Get, non-const
function GaugeBosonHalflifeGet(handle) &
      bind(C, name='GaugeBosonHalflifeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: GaugeBosonHalflifeGet
end function GaugeBosonHalflifeGet

!! Set
subroutine GaugeBosonHalflifeSet(handle, fieldHandle) &
      bind(C, name='GaugeBosonHalflifeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine GaugeBosonHalflifeSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGaugeBoson
