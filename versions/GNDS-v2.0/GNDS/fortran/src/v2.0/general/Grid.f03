
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalGrid
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function GridDefaultConst() &
      bind(C, name='GridDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GridDefaultConst

!! Create, default
function GridDefault() &
      bind(C, name='GridDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function GridDefault

!! Create, general, const
function GridCreateConst( &
   index, &
   label, &
   unit, &
   style, &
   interpolation, &
   link, &
   values, &
   labelSize, &
   unitSize, &
   styleSize, &
   interpolationSize &
) &
      bind(C, name='GridCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   integer(c_size_t), intent(in), value :: styleSize
   character(c_char), intent(in) :: style(styleSize)
   integer(c_size_t), intent(in), value :: interpolationSize
   character(c_char), intent(in) :: interpolation(interpolationSize)
   type(c_ptr), value :: link
   type(c_ptr), value :: values
   type(c_ptr) :: handle
end function GridCreateConst

!! Create, general
function GridCreate( &
   index, &
   label, &
   unit, &
   style, &
   interpolation, &
   link, &
   values, &
   labelSize, &
   unitSize, &
   styleSize, &
   interpolationSize &
) &
      bind(C, name='GridCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_int), value, intent(in) :: index
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
   integer(c_size_t), intent(in), value :: styleSize
   character(c_char), intent(in) :: style(styleSize)
   integer(c_size_t), intent(in), value :: interpolationSize
   character(c_char), intent(in) :: interpolation(interpolationSize)
   type(c_ptr), value :: link
   type(c_ptr), value :: values
   type(c_ptr) :: handle
end function GridCreate

!! Assign
subroutine GridAssign(handleLHS, handleRHS) &
      bind(C, name='GridAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine GridAssign

!! Delete
subroutine GridDelete(handle) &
      bind(C, name='GridDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine GridDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function GridRead(handle, filename, filenameSize) &
      bind(C, name='GridRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GridRead

!! Write to file
function GridWrite(handle, filename, filenameSize) &
      bind(C, name='GridWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function GridWrite

!! Print to standard output, in our prettyprinting format
function GridPrint(handle) &
      bind(C, name='GridPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GridPrint

!! Print to standard output, as XML
function GridPrintXML(handle) &
      bind(C, name='GridPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GridPrintXML

!! Print to standard output, as JSON
function GridPrintJSON(handle) &
      bind(C, name='GridPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function GridPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: index
!! -----------------------------------------------------------------------------

!! Has
function GridIndexHas(handle) &
      bind(C, name='GridIndexHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridIndexHas

!! Get
function GridIndexGet(handle) &
      bind(C, name='GridIndexGet') &
      result(index)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: index
end function GridIndexGet

!! Set
subroutine GridIndexSet(handle, index, indexSize) &
      bind(C, name='GridIndexSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: indexSize
   character(c_char), intent(in) :: index(indexSize)
end subroutine GridIndexSet


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function GridLabelHas(handle) &
      bind(C, name='GridLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridLabelHas

!! Get
function GridLabelGet(handle) &
      bind(C, name='GridLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function GridLabelGet

!! Set
subroutine GridLabelSet(handle, label, labelSize) &
      bind(C, name='GridLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine GridLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: unit
!! -----------------------------------------------------------------------------

!! Has
function GridUnitHas(handle) &
      bind(C, name='GridUnitHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridUnitHas

!! Get
function GridUnitGet(handle) &
      bind(C, name='GridUnitGet') &
      result(unit)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: unit
end function GridUnitGet

!! Set
subroutine GridUnitSet(handle, unit, unitSize) &
      bind(C, name='GridUnitSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: unitSize
   character(c_char), intent(in) :: unit(unitSize)
end subroutine GridUnitSet


!! -----------------------------------------------------------------------------
!! Metadatum: style
!! -----------------------------------------------------------------------------

!! Has
function GridStyleHas(handle) &
      bind(C, name='GridStyleHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridStyleHas

!! Get
function GridStyleGet(handle) &
      bind(C, name='GridStyleGet') &
      result(style)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: style
end function GridStyleGet

!! Set
subroutine GridStyleSet(handle, style, styleSize) &
      bind(C, name='GridStyleSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: styleSize
   character(c_char), intent(in) :: style(styleSize)
end subroutine GridStyleSet


!! -----------------------------------------------------------------------------
!! Metadatum: interpolation
!! -----------------------------------------------------------------------------

!! Has
function GridInterpolationHas(handle) &
      bind(C, name='GridInterpolationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridInterpolationHas

!! Get
function GridInterpolationGet(handle) &
      bind(C, name='GridInterpolationGet') &
      result(interpolation)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: interpolation
end function GridInterpolationGet

!! Set
subroutine GridInterpolationSet(handle, interpolation, interpolationSize) &
      bind(C, name='GridInterpolationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: interpolationSize
   character(c_char), intent(in) :: interpolation(interpolationSize)
end subroutine GridInterpolationSet


!! -----------------------------------------------------------------------------
!! Child: link
!! -----------------------------------------------------------------------------

!! Has
function GridLinkHas(handle) &
      bind(C, name='GridLinkHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridLinkHas

!! Get, const
function GridLinkGetConst(handle) &
      bind(C, name='GridLinkGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GridLinkGetConst

!! Get
function GridLinkGet(handle) &
      bind(C, name='GridLinkGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GridLinkGet

!! Set
subroutine GridLinkSet(handle, fieldHandle) &
      bind(C, name='GridLinkSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GridLinkSet


!! -----------------------------------------------------------------------------
!! Child: values
!! -----------------------------------------------------------------------------

!! Has
function GridValuesHas(handle) &
      bind(C, name='GridValuesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function GridValuesHas

!! Get, const
function GridValuesGetConst(handle) &
      bind(C, name='GridValuesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GridValuesGetConst

!! Get
function GridValuesGet(handle) &
      bind(C, name='GridValuesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function GridValuesGet

!! Set
subroutine GridValuesSet(handle, fieldHandle) &
      bind(C, name='GridValuesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine GridValuesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalGrid
