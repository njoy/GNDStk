
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module generalDiscreteGamma
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DiscreteGammaDefaultConst() &
      bind(C, name='DiscreteGammaDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DiscreteGammaDefaultConst

!! Create, default
function DiscreteGammaDefault() &
      bind(C, name='DiscreteGammaDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DiscreteGammaDefault

!! Create, general, const
function DiscreteGammaCreateConst( &
   value, &
   domainMin, &
   domainMax, &
   axes &
) &
      bind(C, name='DiscreteGammaCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   type(c_ptr), value :: axes
   type(c_ptr) :: handle
end function DiscreteGammaCreateConst

!! Create, general
function DiscreteGammaCreate( &
   value, &
   domainMin, &
   domainMax, &
   axes &
) &
      bind(C, name='DiscreteGammaCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   real(c_double), value, intent(in) :: domainMin
   real(c_double), value, intent(in) :: domainMax
   type(c_ptr), value :: axes
   type(c_ptr) :: handle
end function DiscreteGammaCreate

!! Assign
subroutine DiscreteGammaAssign(handleLHS, handleRHS) &
      bind(C, name='DiscreteGammaAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DiscreteGammaAssign

!! Delete
subroutine DiscreteGammaDelete(handle) &
      bind(C, name='DiscreteGammaDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DiscreteGammaDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DiscreteGammaRead(handle, filename, filenameSize) &
      bind(C, name='DiscreteGammaRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DiscreteGammaRead

!! Write to file
function DiscreteGammaWrite(handle, filename, filenameSize) &
      bind(C, name='DiscreteGammaWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DiscreteGammaWrite

!! Print to standard output, in our prettyprinting format
function DiscreteGammaPrint(handle) &
      bind(C, name='DiscreteGammaPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DiscreteGammaPrint

!! Print to standard output, as XML
function DiscreteGammaPrintXML(handle) &
      bind(C, name='DiscreteGammaPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DiscreteGammaPrintXML

!! Print to standard output, as JSON
function DiscreteGammaPrintJSON(handle) &
      bind(C, name='DiscreteGammaPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DiscreteGammaPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function DiscreteGammaValueHas(handle) &
      bind(C, name='DiscreteGammaValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteGammaValueHas

!! Get
function DiscreteGammaValueGet(handle) &
      bind(C, name='DiscreteGammaValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function DiscreteGammaValueGet

!! Set
subroutine DiscreteGammaValueSet(handle, value, valueSize) &
      bind(C, name='DiscreteGammaValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine DiscreteGammaValueSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMin
!! -----------------------------------------------------------------------------

!! Has
function DiscreteGammaDomainMinHas(handle) &
      bind(C, name='DiscreteGammaDomainMinHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteGammaDomainMinHas

!! Get
function DiscreteGammaDomainMinGet(handle) &
      bind(C, name='DiscreteGammaDomainMinGet') &
      result(domainMin)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: domainMin
end function DiscreteGammaDomainMinGet

!! Set
subroutine DiscreteGammaDomainMinSet(handle, domainMin, domainMinSize) &
      bind(C, name='DiscreteGammaDomainMinSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMinSize
   character(c_char), intent(in) :: domainMin(domainMinSize)
end subroutine DiscreteGammaDomainMinSet


!! -----------------------------------------------------------------------------
!! Metadatum: domainMax
!! -----------------------------------------------------------------------------

!! Has
function DiscreteGammaDomainMaxHas(handle) &
      bind(C, name='DiscreteGammaDomainMaxHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteGammaDomainMaxHas

!! Get
function DiscreteGammaDomainMaxGet(handle) &
      bind(C, name='DiscreteGammaDomainMaxGet') &
      result(domainMax)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: domainMax
end function DiscreteGammaDomainMaxGet

!! Set
subroutine DiscreteGammaDomainMaxSet(handle, domainMax, domainMaxSize) &
      bind(C, name='DiscreteGammaDomainMaxSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: domainMaxSize
   character(c_char), intent(in) :: domainMax(domainMaxSize)
end subroutine DiscreteGammaDomainMaxSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function DiscreteGammaAxesHas(handle) &
      bind(C, name='DiscreteGammaAxesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DiscreteGammaAxesHas

!! Get, const
function DiscreteGammaAxesGetConst(handle) &
      bind(C, name='DiscreteGammaAxesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteGammaAxesGetConst

!! Get
function DiscreteGammaAxesGet(handle) &
      bind(C, name='DiscreteGammaAxesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DiscreteGammaAxesGet

!! Set
subroutine DiscreteGammaAxesSet(handle, fieldHandle) &
      bind(C, name='DiscreteGammaAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DiscreteGammaAxesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module generalDiscreteGamma
