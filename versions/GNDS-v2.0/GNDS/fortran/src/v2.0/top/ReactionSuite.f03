
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module topReactionSuite
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ReactionSuiteDefaultConst() &
      bind(C, name='ReactionSuiteDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ReactionSuiteDefaultConst

!! Create, default
function ReactionSuiteDefault() &
      bind(C, name='ReactionSuiteDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ReactionSuiteDefault

!! Create, general, const
function ReactionSuiteCreateConst( &
   projectile, &
   target, &
   evaluation, &
   format, &
   projectileFrame, &
   interaction, &
   styles, &
   PoPs, &
   reactions, &
   applicationData, &
   externalFiles, &
   resonances, &
   sums, &
   productions, &
   fissionComponents, &
   orphanProducts, &
   incompleteReactions, &
   projectileSize, &
   targetSize, &
   evaluationSize, &
   formatSize, &
   projectileFrameSize, &
   interactionSize &
) &
      bind(C, name='ReactionSuiteCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
   integer(c_size_t), intent(in), value :: projectileFrameSize
   character(c_char), intent(in) :: projectileFrame(projectileFrameSize)
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
   type(c_ptr), value :: styles
   type(c_ptr), value :: PoPs
   type(c_ptr), value :: reactions
   type(c_ptr), value :: applicationData
   type(c_ptr), value :: externalFiles
   type(c_ptr), value :: resonances
   type(c_ptr), value :: sums
   type(c_ptr), value :: productions
   type(c_ptr), value :: fissionComponents
   type(c_ptr), value :: orphanProducts
   type(c_ptr), value :: incompleteReactions
   type(c_ptr) :: handle
end function ReactionSuiteCreateConst

!! Create, general
function ReactionSuiteCreate( &
   projectile, &
   target, &
   evaluation, &
   format, &
   projectileFrame, &
   interaction, &
   styles, &
   PoPs, &
   reactions, &
   applicationData, &
   externalFiles, &
   resonances, &
   sums, &
   productions, &
   fissionComponents, &
   orphanProducts, &
   incompleteReactions, &
   projectileSize, &
   targetSize, &
   evaluationSize, &
   formatSize, &
   projectileFrameSize, &
   interactionSize &
) &
      bind(C, name='ReactionSuiteCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
   integer(c_size_t), intent(in), value :: projectileFrameSize
   character(c_char), intent(in) :: projectileFrame(projectileFrameSize)
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
   type(c_ptr), value :: styles
   type(c_ptr), value :: PoPs
   type(c_ptr), value :: reactions
   type(c_ptr), value :: applicationData
   type(c_ptr), value :: externalFiles
   type(c_ptr), value :: resonances
   type(c_ptr), value :: sums
   type(c_ptr), value :: productions
   type(c_ptr), value :: fissionComponents
   type(c_ptr), value :: orphanProducts
   type(c_ptr), value :: incompleteReactions
   type(c_ptr) :: handle
end function ReactionSuiteCreate

!! Assign
subroutine ReactionSuiteAssign(handleLHS, handleRHS) &
      bind(C, name='ReactionSuiteAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ReactionSuiteAssign

!! Delete
subroutine ReactionSuiteDelete(handle) &
      bind(C, name='ReactionSuiteDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ReactionSuiteDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ReactionSuiteRead(handle, filename, filenameSize) &
      bind(C, name='ReactionSuiteRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ReactionSuiteRead

!! Write to file
function ReactionSuiteWrite(handle, filename, filenameSize) &
      bind(C, name='ReactionSuiteWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ReactionSuiteWrite

!! Print to standard output, in our prettyprinting format
function ReactionSuitePrint(handle) &
      bind(C, name='ReactionSuitePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ReactionSuitePrint

!! Print to standard output, as XML
function ReactionSuitePrintXML(handle) &
      bind(C, name='ReactionSuitePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ReactionSuitePrintXML

!! Print to standard output, as JSON
function ReactionSuitePrintJSON(handle) &
      bind(C, name='ReactionSuitePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ReactionSuitePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: projectile
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteProjectileHas(handle) &
      bind(C, name='ReactionSuiteProjectileHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteProjectileHas

!! Get
function ReactionSuiteProjectileGet(handle) &
      bind(C, name='ReactionSuiteProjectileGet') &
      result(projectile)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: projectile
end function ReactionSuiteProjectileGet

!! Set
subroutine ReactionSuiteProjectileSet(handle, projectile, projectileSize) &
      bind(C, name='ReactionSuiteProjectileSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
end subroutine ReactionSuiteProjectileSet


!! -----------------------------------------------------------------------------
!! Metadatum: target
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteTargetHas(handle) &
      bind(C, name='ReactionSuiteTargetHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteTargetHas

!! Get
function ReactionSuiteTargetGet(handle) &
      bind(C, name='ReactionSuiteTargetGet') &
      result(target)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: target
end function ReactionSuiteTargetGet

!! Set
subroutine ReactionSuiteTargetSet(handle, target, targetSize) &
      bind(C, name='ReactionSuiteTargetSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
end subroutine ReactionSuiteTargetSet


!! -----------------------------------------------------------------------------
!! Metadatum: evaluation
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteEvaluationHas(handle) &
      bind(C, name='ReactionSuiteEvaluationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteEvaluationHas

!! Get
function ReactionSuiteEvaluationGet(handle) &
      bind(C, name='ReactionSuiteEvaluationGet') &
      result(evaluation)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: evaluation
end function ReactionSuiteEvaluationGet

!! Set
subroutine ReactionSuiteEvaluationSet(handle, evaluation, evaluationSize) &
      bind(C, name='ReactionSuiteEvaluationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
end subroutine ReactionSuiteEvaluationSet


!! -----------------------------------------------------------------------------
!! Metadatum: format
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteFormatHas(handle) &
      bind(C, name='ReactionSuiteFormatHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteFormatHas

!! Get
function ReactionSuiteFormatGet(handle) &
      bind(C, name='ReactionSuiteFormatGet') &
      result(format)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: format
end function ReactionSuiteFormatGet

!! Set
subroutine ReactionSuiteFormatSet(handle, format, formatSize) &
      bind(C, name='ReactionSuiteFormatSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
end subroutine ReactionSuiteFormatSet


!! -----------------------------------------------------------------------------
!! Metadatum: projectileFrame
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteProjectileFrameHas(handle) &
      bind(C, name='ReactionSuiteProjectileFrameHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteProjectileFrameHas

!! Get
function ReactionSuiteProjectileFrameGet(handle) &
      bind(C, name='ReactionSuiteProjectileFrameGet') &
      result(projectileFrame)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: projectileFrame
end function ReactionSuiteProjectileFrameGet

!! Set
subroutine ReactionSuiteProjectileFrameSet(handle, projectileFrame, projectileFrameSize) &
      bind(C, name='ReactionSuiteProjectileFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: projectileFrameSize
   character(c_char), intent(in) :: projectileFrame(projectileFrameSize)
end subroutine ReactionSuiteProjectileFrameSet


!! -----------------------------------------------------------------------------
!! Metadatum: interaction
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteInteractionHas(handle) &
      bind(C, name='ReactionSuiteInteractionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteInteractionHas

!! Get
function ReactionSuiteInteractionGet(handle) &
      bind(C, name='ReactionSuiteInteractionGet') &
      result(interaction)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: interaction
end function ReactionSuiteInteractionGet

!! Set
subroutine ReactionSuiteInteractionSet(handle, interaction, interactionSize) &
      bind(C, name='ReactionSuiteInteractionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
end subroutine ReactionSuiteInteractionSet


!! -----------------------------------------------------------------------------
!! Child: styles
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteStylesHas(handle) &
      bind(C, name='ReactionSuiteStylesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteStylesHas

!! Get, const
function ReactionSuiteStylesGetConst(handle) &
      bind(C, name='ReactionSuiteStylesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteStylesGetConst

!! Get
function ReactionSuiteStylesGet(handle) &
      bind(C, name='ReactionSuiteStylesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteStylesGet

!! Set
subroutine ReactionSuiteStylesSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteStylesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteStylesSet


!! -----------------------------------------------------------------------------
!! Child: PoPs
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuitePoPsHas(handle) &
      bind(C, name='ReactionSuitePoPsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuitePoPsHas

!! Get, const
function ReactionSuitePoPsGetConst(handle) &
      bind(C, name='ReactionSuitePoPsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuitePoPsGetConst

!! Get
function ReactionSuitePoPsGet(handle) &
      bind(C, name='ReactionSuitePoPsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuitePoPsGet

!! Set
subroutine ReactionSuitePoPsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuitePoPsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuitePoPsSet


!! -----------------------------------------------------------------------------
!! Child: reactions
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteReactionsHas(handle) &
      bind(C, name='ReactionSuiteReactionsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteReactionsHas

!! Get, const
function ReactionSuiteReactionsGetConst(handle) &
      bind(C, name='ReactionSuiteReactionsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteReactionsGetConst

!! Get
function ReactionSuiteReactionsGet(handle) &
      bind(C, name='ReactionSuiteReactionsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteReactionsGet

!! Set
subroutine ReactionSuiteReactionsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteReactionsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteReactionsSet


!! -----------------------------------------------------------------------------
!! Child: applicationData
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteApplicationDataHas(handle) &
      bind(C, name='ReactionSuiteApplicationDataHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteApplicationDataHas

!! Get, const
function ReactionSuiteApplicationDataGetConst(handle) &
      bind(C, name='ReactionSuiteApplicationDataGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteApplicationDataGetConst

!! Get
function ReactionSuiteApplicationDataGet(handle) &
      bind(C, name='ReactionSuiteApplicationDataGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteApplicationDataGet

!! Set
subroutine ReactionSuiteApplicationDataSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteApplicationDataSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteApplicationDataSet


!! -----------------------------------------------------------------------------
!! Child: externalFiles
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteExternalFilesHas(handle) &
      bind(C, name='ReactionSuiteExternalFilesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteExternalFilesHas

!! Get, const
function ReactionSuiteExternalFilesGetConst(handle) &
      bind(C, name='ReactionSuiteExternalFilesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteExternalFilesGetConst

!! Get
function ReactionSuiteExternalFilesGet(handle) &
      bind(C, name='ReactionSuiteExternalFilesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteExternalFilesGet

!! Set
subroutine ReactionSuiteExternalFilesSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteExternalFilesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteExternalFilesSet


!! -----------------------------------------------------------------------------
!! Child: resonances
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteResonancesHas(handle) &
      bind(C, name='ReactionSuiteResonancesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteResonancesHas

!! Get, const
function ReactionSuiteResonancesGetConst(handle) &
      bind(C, name='ReactionSuiteResonancesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteResonancesGetConst

!! Get
function ReactionSuiteResonancesGet(handle) &
      bind(C, name='ReactionSuiteResonancesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteResonancesGet

!! Set
subroutine ReactionSuiteResonancesSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteResonancesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteResonancesSet


!! -----------------------------------------------------------------------------
!! Child: sums
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteSumsHas(handle) &
      bind(C, name='ReactionSuiteSumsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteSumsHas

!! Get, const
function ReactionSuiteSumsGetConst(handle) &
      bind(C, name='ReactionSuiteSumsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteSumsGetConst

!! Get
function ReactionSuiteSumsGet(handle) &
      bind(C, name='ReactionSuiteSumsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteSumsGet

!! Set
subroutine ReactionSuiteSumsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteSumsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteSumsSet


!! -----------------------------------------------------------------------------
!! Child: productions
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteProductionsHas(handle) &
      bind(C, name='ReactionSuiteProductionsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteProductionsHas

!! Get, const
function ReactionSuiteProductionsGetConst(handle) &
      bind(C, name='ReactionSuiteProductionsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteProductionsGetConst

!! Get
function ReactionSuiteProductionsGet(handle) &
      bind(C, name='ReactionSuiteProductionsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteProductionsGet

!! Set
subroutine ReactionSuiteProductionsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteProductionsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteProductionsSet


!! -----------------------------------------------------------------------------
!! Child: fissionComponents
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteFissionComponentsHas(handle) &
      bind(C, name='ReactionSuiteFissionComponentsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteFissionComponentsHas

!! Get, const
function ReactionSuiteFissionComponentsGetConst(handle) &
      bind(C, name='ReactionSuiteFissionComponentsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteFissionComponentsGetConst

!! Get
function ReactionSuiteFissionComponentsGet(handle) &
      bind(C, name='ReactionSuiteFissionComponentsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteFissionComponentsGet

!! Set
subroutine ReactionSuiteFissionComponentsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteFissionComponentsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteFissionComponentsSet


!! -----------------------------------------------------------------------------
!! Child: orphanProducts
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteOrphanProductsHas(handle) &
      bind(C, name='ReactionSuiteOrphanProductsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteOrphanProductsHas

!! Get, const
function ReactionSuiteOrphanProductsGetConst(handle) &
      bind(C, name='ReactionSuiteOrphanProductsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteOrphanProductsGetConst

!! Get
function ReactionSuiteOrphanProductsGet(handle) &
      bind(C, name='ReactionSuiteOrphanProductsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteOrphanProductsGet

!! Set
subroutine ReactionSuiteOrphanProductsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteOrphanProductsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteOrphanProductsSet


!! -----------------------------------------------------------------------------
!! Child: incompleteReactions
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteIncompleteReactionsHas(handle) &
      bind(C, name='ReactionSuiteIncompleteReactionsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ReactionSuiteIncompleteReactionsHas

!! Get, const
function ReactionSuiteIncompleteReactionsGetConst(handle) &
      bind(C, name='ReactionSuiteIncompleteReactionsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteIncompleteReactionsGetConst

!! Get
function ReactionSuiteIncompleteReactionsGet(handle) &
      bind(C, name='ReactionSuiteIncompleteReactionsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ReactionSuiteIncompleteReactionsGet

!! Set
subroutine ReactionSuiteIncompleteReactionsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteIncompleteReactionsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteIncompleteReactionsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module topReactionSuite
