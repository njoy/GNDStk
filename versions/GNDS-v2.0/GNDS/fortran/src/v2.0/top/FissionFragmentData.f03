
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module topFissionFragmentData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionFragmentDataDefaultConst() &
      bind(C, name='FissionFragmentDataDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionFragmentDataDefaultConst
end function FissionFragmentDataDefaultConst

!! Create, default, non-const
function FissionFragmentDataDefault() &
      bind(C, name='FissionFragmentDataDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: FissionFragmentDataDefault
end function FissionFragmentDataDefault

!! Create, general, const
function FissionFragmentDataCreateConst( &
   productYields, &
   delayedNeutrons, &
   fissionEnergyReleases &
) &
      bind(C, name='FissionFragmentDataCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: productYields
   type(c_ptr), intent(in), value :: delayedNeutrons
   type(c_ptr), intent(in), value :: fissionEnergyReleases
   type(c_ptr) :: FissionFragmentDataCreateConst
end function FissionFragmentDataCreateConst

!! Create, general, non-const
function FissionFragmentDataCreate( &
   productYields, &
   delayedNeutrons, &
   fissionEnergyReleases &
) &
      bind(C, name='FissionFragmentDataCreate')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: productYields
   type(c_ptr), intent(in), value :: delayedNeutrons
   type(c_ptr), intent(in), value :: fissionEnergyReleases
   type(c_ptr) :: FissionFragmentDataCreate
end function FissionFragmentDataCreate

!! Assign
subroutine FissionFragmentDataAssign(handleLHS, handleRHS) &
      bind(C, name='FissionFragmentDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine FissionFragmentDataAssign

!! Delete
subroutine FissionFragmentDataDelete(handle) &
      bind(C, name='FissionFragmentDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionFragmentDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function FissionFragmentDataRead(handle, filename, filenameSize) &
      bind(C, name='FissionFragmentDataRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionFragmentDataRead
end function FissionFragmentDataRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function FissionFragmentDataWrite(handle, filename, filenameSize) &
      bind(C, name='FissionFragmentDataWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: FissionFragmentDataWrite
end function FissionFragmentDataWrite

!! Print to standard output, in our prettyprinting format
function FissionFragmentDataPrint(handle) &
      bind(C, name='FissionFragmentDataPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionFragmentDataPrint
end function FissionFragmentDataPrint

!! Print to standard output, as XML
function FissionFragmentDataPrintXML(handle) &
      bind(C, name='FissionFragmentDataPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionFragmentDataPrintXML
end function FissionFragmentDataPrintXML

!! Print to standard output, as JSON
function FissionFragmentDataPrintJSON(handle) &
      bind(C, name='FissionFragmentDataPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionFragmentDataPrintJSON
end function FissionFragmentDataPrintJSON


!! -----------------------------------------------------------------------------
!! Child: productYields
!! -----------------------------------------------------------------------------

!! Has
function FissionFragmentDataProductYieldsHas(handle) &
      bind(C, name='FissionFragmentDataProductYieldsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionFragmentDataProductYieldsHas
end function FissionFragmentDataProductYieldsHas

!! Get, const
function FissionFragmentDataProductYieldsGetConst(handle) &
      bind(C, name='FissionFragmentDataProductYieldsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionFragmentDataProductYieldsGetConst
end function FissionFragmentDataProductYieldsGetConst

!! Get, non-const
function FissionFragmentDataProductYieldsGet(handle) &
      bind(C, name='FissionFragmentDataProductYieldsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionFragmentDataProductYieldsGet
end function FissionFragmentDataProductYieldsGet

!! Set
subroutine FissionFragmentDataProductYieldsSet(handle, fieldHandle) &
      bind(C, name='FissionFragmentDataProductYieldsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionFragmentDataProductYieldsSet


!! -----------------------------------------------------------------------------
!! Child: delayedNeutrons
!! -----------------------------------------------------------------------------

!! Has
function FissionFragmentDataDelayedNeutronsHas(handle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionFragmentDataDelayedNeutronsHas
end function FissionFragmentDataDelayedNeutronsHas

!! Get, const
function FissionFragmentDataDelayedNeutronsGetConst(handle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionFragmentDataDelayedNeutronsGetConst
end function FissionFragmentDataDelayedNeutronsGetConst

!! Get, non-const
function FissionFragmentDataDelayedNeutronsGet(handle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionFragmentDataDelayedNeutronsGet
end function FissionFragmentDataDelayedNeutronsGet

!! Set
subroutine FissionFragmentDataDelayedNeutronsSet(handle, fieldHandle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionFragmentDataDelayedNeutronsSet


!! -----------------------------------------------------------------------------
!! Child: fissionEnergyReleases
!! -----------------------------------------------------------------------------

!! Has
function FissionFragmentDataFissionEnergyReleasesHas(handle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: FissionFragmentDataFissionEnergyReleasesHas
end function FissionFragmentDataFissionEnergyReleasesHas

!! Get, const
function FissionFragmentDataFissionEnergyReleasesGetConst(handle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: FissionFragmentDataFissionEnergyReleasesGetConst
end function FissionFragmentDataFissionEnergyReleasesGetConst

!! Get, non-const
function FissionFragmentDataFissionEnergyReleasesGet(handle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: FissionFragmentDataFissionEnergyReleasesGet
end function FissionFragmentDataFissionEnergyReleasesGet

!! Set
subroutine FissionFragmentDataFissionEnergyReleasesSet(handle, fieldHandle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine FissionFragmentDataFissionEnergyReleasesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module topFissionFragmentData
