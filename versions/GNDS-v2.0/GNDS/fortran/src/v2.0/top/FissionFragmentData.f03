
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module topFissionFragmentData
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function FissionFragmentDataDefaultConst() &
      bind(C, name='FissionFragmentDataDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionFragmentDataDefaultConst

!! Create, default
function FissionFragmentDataDefault() &
      bind(C, name='FissionFragmentDataDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function FissionFragmentDataDefault

!! Create, general, const
function FissionFragmentDataCreateConst( &
   productYields, &
   delayedNeutrons, &
   fissionEnergyReleases &
) &
      bind(C, name='FissionFragmentDataCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: productYields
   type(c_ptr), value :: delayedNeutrons
   type(c_ptr), value :: fissionEnergyReleases
   type(c_ptr) :: handle
end function FissionFragmentDataCreateConst

!! Create, general
function FissionFragmentDataCreate( &
   productYields, &
   delayedNeutrons, &
   fissionEnergyReleases &
) &
      bind(C, name='FissionFragmentDataCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: productYields
   type(c_ptr), value :: delayedNeutrons
   type(c_ptr), value :: fissionEnergyReleases
   type(c_ptr) :: handle
end function FissionFragmentDataCreate

!! Assign
subroutine FissionFragmentDataAssign(handleLHS, handleRHS) &
      bind(C, name='FissionFragmentDataAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine FissionFragmentDataAssign

!! Delete
subroutine FissionFragmentDataDelete(handle) &
      bind(C, name='FissionFragmentDataDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine FissionFragmentDataDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function FissionFragmentDataRead(handle, filename, filenameSize) &
      bind(C, name='FissionFragmentDataRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionFragmentDataRead

!! Write to file
function FissionFragmentDataWrite(handle, filename, filenameSize) &
      bind(C, name='FissionFragmentDataWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function FissionFragmentDataWrite

!! Print to standard output, in our prettyprinting format
function FissionFragmentDataPrint(handle) &
      bind(C, name='FissionFragmentDataPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionFragmentDataPrint

!! Print to standard output, as XML
function FissionFragmentDataPrintXML(handle) &
      bind(C, name='FissionFragmentDataPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionFragmentDataPrintXML

!! Print to standard output, as JSON
function FissionFragmentDataPrintJSON(handle) &
      bind(C, name='FissionFragmentDataPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function FissionFragmentDataPrintJSON


!! -----------------------------------------------------------------------------
!! Child: productYields
!! -----------------------------------------------------------------------------

!! Has
function FissionFragmentDataProductYieldsHas(handle) &
      bind(C, name='FissionFragmentDataProductYieldsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionFragmentDataProductYieldsHas

!! Get, const
function FissionFragmentDataProductYieldsGetConst(handle) &
      bind(C, name='FissionFragmentDataProductYieldsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionFragmentDataProductYieldsGetConst

!! Get
function FissionFragmentDataProductYieldsGet(handle) &
      bind(C, name='FissionFragmentDataProductYieldsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionFragmentDataProductYieldsGet

!! Set
subroutine FissionFragmentDataProductYieldsSet(handle, fieldHandle) &
      bind(C, name='FissionFragmentDataProductYieldsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionFragmentDataProductYieldsSet


!! -----------------------------------------------------------------------------
!! Child: delayedNeutrons
!! -----------------------------------------------------------------------------

!! Has
function FissionFragmentDataDelayedNeutronsHas(handle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionFragmentDataDelayedNeutronsHas

!! Get, const
function FissionFragmentDataDelayedNeutronsGetConst(handle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionFragmentDataDelayedNeutronsGetConst

!! Get
function FissionFragmentDataDelayedNeutronsGet(handle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionFragmentDataDelayedNeutronsGet

!! Set
subroutine FissionFragmentDataDelayedNeutronsSet(handle, fieldHandle) &
      bind(C, name='FissionFragmentDataDelayedNeutronsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionFragmentDataDelayedNeutronsSet


!! -----------------------------------------------------------------------------
!! Child: fissionEnergyReleases
!! -----------------------------------------------------------------------------

!! Has
function FissionFragmentDataFissionEnergyReleasesHas(handle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function FissionFragmentDataFissionEnergyReleasesHas

!! Get, const
function FissionFragmentDataFissionEnergyReleasesGetConst(handle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionFragmentDataFissionEnergyReleasesGetConst

!! Get
function FissionFragmentDataFissionEnergyReleasesGet(handle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function FissionFragmentDataFissionEnergyReleasesGet

!! Set
subroutine FissionFragmentDataFissionEnergyReleasesSet(handle, fieldHandle) &
      bind(C, name='FissionFragmentDataFissionEnergyReleasesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine FissionFragmentDataFissionEnergyReleasesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module topFissionFragmentData
