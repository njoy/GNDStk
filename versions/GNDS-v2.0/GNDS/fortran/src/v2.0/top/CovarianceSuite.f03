
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module topCovarianceSuite
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CovarianceSuiteDefaultConst() &
      bind(C, name='CovarianceSuiteDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceSuiteDefaultConst

!! Create, default
function CovarianceSuiteDefault() &
      bind(C, name='CovarianceSuiteDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function CovarianceSuiteDefault

!! Create, general, const
function CovarianceSuiteCreateConst( &
   projectile, &
   target, &
   evaluation, &
   interaction, &
   format, &
   externalFiles, &
   styles, &
   covarianceSections, &
   parameterCovariances, &
   projectileSize, &
   targetSize, &
   evaluationSize, &
   interactionSize, &
   formatSize &
) &
      bind(C, name='CovarianceSuiteCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
   type(c_ptr), value :: externalFiles
   type(c_ptr), value :: styles
   type(c_ptr), value :: covarianceSections
   type(c_ptr), value :: parameterCovariances
   type(c_ptr) :: handle
end function CovarianceSuiteCreateConst

!! Create, general
function CovarianceSuiteCreate( &
   projectile, &
   target, &
   evaluation, &
   interaction, &
   format, &
   externalFiles, &
   styles, &
   covarianceSections, &
   parameterCovariances, &
   projectileSize, &
   targetSize, &
   evaluationSize, &
   interactionSize, &
   formatSize &
) &
      bind(C, name='CovarianceSuiteCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
   type(c_ptr), value :: externalFiles
   type(c_ptr), value :: styles
   type(c_ptr), value :: covarianceSections
   type(c_ptr), value :: parameterCovariances
   type(c_ptr) :: handle
end function CovarianceSuiteCreate

!! Assign
subroutine CovarianceSuiteAssign(handleLHS, handleRHS) &
      bind(C, name='CovarianceSuiteAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CovarianceSuiteAssign

!! Delete
subroutine CovarianceSuiteDelete(handle) &
      bind(C, name='CovarianceSuiteDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CovarianceSuiteDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CovarianceSuiteRead(handle, filename, filenameSize) &
      bind(C, name='CovarianceSuiteRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceSuiteRead

!! Write to file
function CovarianceSuiteWrite(handle, filename, filenameSize) &
      bind(C, name='CovarianceSuiteWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function CovarianceSuiteWrite

!! Print to standard output, in our prettyprinting format
function CovarianceSuitePrint(handle) &
      bind(C, name='CovarianceSuitePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSuitePrint

!! Print to standard output, as XML
function CovarianceSuitePrintXML(handle) &
      bind(C, name='CovarianceSuitePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSuitePrintXML

!! Print to standard output, as JSON
function CovarianceSuitePrintJSON(handle) &
      bind(C, name='CovarianceSuitePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function CovarianceSuitePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: projectile
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteProjectileHas(handle) &
      bind(C, name='CovarianceSuiteProjectileHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteProjectileHas

!! Get
function CovarianceSuiteProjectileGet(handle) &
      bind(C, name='CovarianceSuiteProjectileGet') &
      result(projectile)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: projectile
end function CovarianceSuiteProjectileGet

!! Set
subroutine CovarianceSuiteProjectileSet(handle, projectile, projectileSize) &
      bind(C, name='CovarianceSuiteProjectileSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
end subroutine CovarianceSuiteProjectileSet


!! -----------------------------------------------------------------------------
!! Metadatum: target
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteTargetHas(handle) &
      bind(C, name='CovarianceSuiteTargetHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteTargetHas

!! Get
function CovarianceSuiteTargetGet(handle) &
      bind(C, name='CovarianceSuiteTargetGet') &
      result(target)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: target
end function CovarianceSuiteTargetGet

!! Set
subroutine CovarianceSuiteTargetSet(handle, target, targetSize) &
      bind(C, name='CovarianceSuiteTargetSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
end subroutine CovarianceSuiteTargetSet


!! -----------------------------------------------------------------------------
!! Metadatum: evaluation
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteEvaluationHas(handle) &
      bind(C, name='CovarianceSuiteEvaluationHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteEvaluationHas

!! Get
function CovarianceSuiteEvaluationGet(handle) &
      bind(C, name='CovarianceSuiteEvaluationGet') &
      result(evaluation)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: evaluation
end function CovarianceSuiteEvaluationGet

!! Set
subroutine CovarianceSuiteEvaluationSet(handle, evaluation, evaluationSize) &
      bind(C, name='CovarianceSuiteEvaluationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
end subroutine CovarianceSuiteEvaluationSet


!! -----------------------------------------------------------------------------
!! Metadatum: interaction
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteInteractionHas(handle) &
      bind(C, name='CovarianceSuiteInteractionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteInteractionHas

!! Get
function CovarianceSuiteInteractionGet(handle) &
      bind(C, name='CovarianceSuiteInteractionGet') &
      result(interaction)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: interaction
end function CovarianceSuiteInteractionGet

!! Set
subroutine CovarianceSuiteInteractionSet(handle, interaction, interactionSize) &
      bind(C, name='CovarianceSuiteInteractionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
end subroutine CovarianceSuiteInteractionSet


!! -----------------------------------------------------------------------------
!! Metadatum: format
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteFormatHas(handle) &
      bind(C, name='CovarianceSuiteFormatHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteFormatHas

!! Get
function CovarianceSuiteFormatGet(handle) &
      bind(C, name='CovarianceSuiteFormatGet') &
      result(format)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: format
end function CovarianceSuiteFormatGet

!! Set
subroutine CovarianceSuiteFormatSet(handle, format, formatSize) &
      bind(C, name='CovarianceSuiteFormatSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
end subroutine CovarianceSuiteFormatSet


!! -----------------------------------------------------------------------------
!! Child: externalFiles
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteExternalFilesHas(handle) &
      bind(C, name='CovarianceSuiteExternalFilesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteExternalFilesHas

!! Get, const
function CovarianceSuiteExternalFilesGetConst(handle) &
      bind(C, name='CovarianceSuiteExternalFilesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteExternalFilesGetConst

!! Get
function CovarianceSuiteExternalFilesGet(handle) &
      bind(C, name='CovarianceSuiteExternalFilesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteExternalFilesGet

!! Set
subroutine CovarianceSuiteExternalFilesSet(handle, fieldHandle) &
      bind(C, name='CovarianceSuiteExternalFilesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSuiteExternalFilesSet


!! -----------------------------------------------------------------------------
!! Child: styles
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteStylesHas(handle) &
      bind(C, name='CovarianceSuiteStylesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteStylesHas

!! Get, const
function CovarianceSuiteStylesGetConst(handle) &
      bind(C, name='CovarianceSuiteStylesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteStylesGetConst

!! Get
function CovarianceSuiteStylesGet(handle) &
      bind(C, name='CovarianceSuiteStylesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteStylesGet

!! Set
subroutine CovarianceSuiteStylesSet(handle, fieldHandle) &
      bind(C, name='CovarianceSuiteStylesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSuiteStylesSet


!! -----------------------------------------------------------------------------
!! Child: covarianceSections
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteCovarianceSectionsHas(handle) &
      bind(C, name='CovarianceSuiteCovarianceSectionsHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteCovarianceSectionsHas

!! Get, const
function CovarianceSuiteCovarianceSectionsGetConst(handle) &
      bind(C, name='CovarianceSuiteCovarianceSectionsGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteCovarianceSectionsGetConst

!! Get
function CovarianceSuiteCovarianceSectionsGet(handle) &
      bind(C, name='CovarianceSuiteCovarianceSectionsGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteCovarianceSectionsGet

!! Set
subroutine CovarianceSuiteCovarianceSectionsSet(handle, fieldHandle) &
      bind(C, name='CovarianceSuiteCovarianceSectionsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSuiteCovarianceSectionsSet


!! -----------------------------------------------------------------------------
!! Child: parameterCovariances
!! -----------------------------------------------------------------------------

!! Has
function CovarianceSuiteParameterCovariancesHas(handle) &
      bind(C, name='CovarianceSuiteParameterCovariancesHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function CovarianceSuiteParameterCovariancesHas

!! Get, const
function CovarianceSuiteParameterCovariancesGetConst(handle) &
      bind(C, name='CovarianceSuiteParameterCovariancesGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteParameterCovariancesGetConst

!! Get
function CovarianceSuiteParameterCovariancesGet(handle) &
      bind(C, name='CovarianceSuiteParameterCovariancesGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function CovarianceSuiteParameterCovariancesGet

!! Set
subroutine CovarianceSuiteParameterCovariancesSet(handle, fieldHandle) &
      bind(C, name='CovarianceSuiteParameterCovariancesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine CovarianceSuiteParameterCovariancesSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module topCovarianceSuite
