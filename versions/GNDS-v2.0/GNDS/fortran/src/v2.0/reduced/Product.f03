
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module reducedProduct
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ProductDefaultConst() &
      bind(C, name='ProductDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ProductDefaultConst

!! Create, default
function ProductDefault() &
      bind(C, name='ProductDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function ProductDefault

!! Create, general, const
function ProductCreateConst( &
   label, &
   pid, &
   multiplicity, &
   distribution, &
   labelSize, &
   pidSize &
) &
      bind(C, name='ProductCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   type(c_ptr), value :: multiplicity
   type(c_ptr), value :: distribution
   type(c_ptr) :: handle
end function ProductCreateConst

!! Create, general
function ProductCreate( &
   label, &
   pid, &
   multiplicity, &
   distribution, &
   labelSize, &
   pidSize &
) &
      bind(C, name='ProductCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
   type(c_ptr), value :: multiplicity
   type(c_ptr), value :: distribution
   type(c_ptr) :: handle
end function ProductCreate

!! Assign
subroutine ProductAssign(handleLHS, handleRHS) &
      bind(C, name='ProductAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ProductAssign

!! Delete
subroutine ProductDelete(handle) &
      bind(C, name='ProductDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ProductDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ProductRead(handle, filename, filenameSize) &
      bind(C, name='ProductRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ProductRead

!! Write to file
function ProductWrite(handle, filename, filenameSize) &
      bind(C, name='ProductWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function ProductWrite

!! Print to standard output, in our prettyprinting format
function ProductPrint(handle) &
      bind(C, name='ProductPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductPrint

!! Print to standard output, as XML
function ProductPrintXML(handle) &
      bind(C, name='ProductPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductPrintXML

!! Print to standard output, as JSON
function ProductPrintJSON(handle) &
      bind(C, name='ProductPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function ProductPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function ProductLabelHas(handle) &
      bind(C, name='ProductLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductLabelHas

!! Get
function ProductLabelGet(handle) &
      bind(C, name='ProductLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function ProductLabelGet

!! Set
subroutine ProductLabelSet(handle, label, labelSize) &
      bind(C, name='ProductLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine ProductLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: pid
!! -----------------------------------------------------------------------------

!! Has
function ProductPidHas(handle) &
      bind(C, name='ProductPidHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductPidHas

!! Get
function ProductPidGet(handle) &
      bind(C, name='ProductPidGet') &
      result(pid)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: pid
end function ProductPidGet

!! Set
subroutine ProductPidSet(handle, pid, pidSize) &
      bind(C, name='ProductPidSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: pidSize
   character(c_char), intent(in) :: pid(pidSize)
end subroutine ProductPidSet


!! -----------------------------------------------------------------------------
!! Child: multiplicity
!! -----------------------------------------------------------------------------

!! Has
function ProductMultiplicityHas(handle) &
      bind(C, name='ProductMultiplicityHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductMultiplicityHas

!! Get, const
function ProductMultiplicityGetConst(handle) &
      bind(C, name='ProductMultiplicityGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductMultiplicityGetConst

!! Get
function ProductMultiplicityGet(handle) &
      bind(C, name='ProductMultiplicityGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductMultiplicityGet

!! Set
subroutine ProductMultiplicitySet(handle, fieldHandle) &
      bind(C, name='ProductMultiplicitySet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ProductMultiplicitySet


!! -----------------------------------------------------------------------------
!! Child: distribution
!! -----------------------------------------------------------------------------

!! Has
function ProductDistributionHas(handle) &
      bind(C, name='ProductDistributionHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function ProductDistributionHas

!! Get, const
function ProductDistributionGetConst(handle) &
      bind(C, name='ProductDistributionGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductDistributionGetConst

!! Get
function ProductDistributionGet(handle) &
      bind(C, name='ProductDistributionGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function ProductDistributionGet

!! Set
subroutine ProductDistributionSet(handle, fieldHandle) &
      bind(C, name='ProductDistributionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ProductDistributionSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module reducedProduct
