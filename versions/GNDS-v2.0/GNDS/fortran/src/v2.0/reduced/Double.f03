
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module reducedDouble
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DoubleDefaultConst() &
      bind(C, name='DoubleDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DoubleDefaultConst

!! Create, default
function DoubleDefault() &
      bind(C, name='DoubleDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DoubleDefault

!! Create, general, const
function DoubleCreateConst( &
   value &
) &
      bind(C, name='DoubleCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   type(c_ptr) :: handle
end function DoubleCreateConst

!! Create, general
function DoubleCreate( &
   value &
) &
      bind(C, name='DoubleCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   real(c_double), value, intent(in) :: value
   type(c_ptr) :: handle
end function DoubleCreate

!! Assign
subroutine DoubleAssign(handleLHS, handleRHS) &
      bind(C, name='DoubleAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DoubleAssign

!! Delete
subroutine DoubleDelete(handle) &
      bind(C, name='DoubleDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DoubleDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DoubleRead(handle, filename, filenameSize) &
      bind(C, name='DoubleRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DoubleRead

!! Write to file
function DoubleWrite(handle, filename, filenameSize) &
      bind(C, name='DoubleWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DoubleWrite

!! Print to standard output, in our prettyprinting format
function DoublePrint(handle) &
      bind(C, name='DoublePrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DoublePrint

!! Print to standard output, as XML
function DoublePrintXML(handle) &
      bind(C, name='DoublePrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DoublePrintXML

!! Print to standard output, as JSON
function DoublePrintJSON(handle) &
      bind(C, name='DoublePrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DoublePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: value
!! -----------------------------------------------------------------------------

!! Has
function DoubleValueHas(handle) &
      bind(C, name='DoubleValueHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DoubleValueHas

!! Get
function DoubleValueGet(handle) &
      bind(C, name='DoubleValueGet') &
      result(value)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: value
end function DoubleValueGet

!! Set
subroutine DoubleValueSet(handle, value, valueSize) &
      bind(C, name='DoubleValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueSize
   character(c_char), intent(in) :: value(valueSize)
end subroutine DoubleValueSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module reducedDouble
