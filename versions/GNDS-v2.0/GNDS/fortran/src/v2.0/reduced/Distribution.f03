
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module reducedDistribution
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function DistributionDefaultConst() &
      bind(C, name='DistributionDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DistributionDefaultConst

!! Create, default
function DistributionDefault() &
      bind(C, name='DistributionDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function DistributionDefault

!! Create, general, const
function DistributionCreateConst( &
   thermalNeutronScatteringLaw, &
   uncorrelated, &
   unspecified, &
   XYs2d, &
   branching3d &
) &
      bind(C, name='DistributionCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: thermalNeutronScatteringLaw
   type(c_ptr), value :: uncorrelated
   type(c_ptr), value :: unspecified
   type(c_ptr), value :: XYs2d
   type(c_ptr), value :: branching3d
   type(c_ptr) :: handle
end function DistributionCreateConst

!! Create, general
function DistributionCreate( &
   thermalNeutronScatteringLaw, &
   uncorrelated, &
   unspecified, &
   XYs2d, &
   branching3d &
) &
      bind(C, name='DistributionCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: thermalNeutronScatteringLaw
   type(c_ptr), value :: uncorrelated
   type(c_ptr), value :: unspecified
   type(c_ptr), value :: XYs2d
   type(c_ptr), value :: branching3d
   type(c_ptr) :: handle
end function DistributionCreate

!! Assign
subroutine DistributionAssign(handleLHS, handleRHS) &
      bind(C, name='DistributionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine DistributionAssign

!! Delete
subroutine DistributionDelete(handle) &
      bind(C, name='DistributionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine DistributionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function DistributionRead(handle, filename, filenameSize) &
      bind(C, name='DistributionRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DistributionRead

!! Write to file
function DistributionWrite(handle, filename, filenameSize) &
      bind(C, name='DistributionWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function DistributionWrite

!! Print to standard output, in our prettyprinting format
function DistributionPrint(handle) &
      bind(C, name='DistributionPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DistributionPrint

!! Print to standard output, as XML
function DistributionPrintXML(handle) &
      bind(C, name='DistributionPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DistributionPrintXML

!! Print to standard output, as JSON
function DistributionPrintJSON(handle) &
      bind(C, name='DistributionPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function DistributionPrintJSON


!! -----------------------------------------------------------------------------
!! Child: thermalNeutronScatteringLaw
!! -----------------------------------------------------------------------------

!! Has
function DistributionThermalNeutronScatteringLawHas(handle) &
      bind(C, name='DistributionThermalNeutronScatteringLawHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DistributionThermalNeutronScatteringLawHas

!! Get, const
function DistributionThermalNeutronScatteringLawGetConst(handle) &
      bind(C, name='DistributionThermalNeutronScatteringLawGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionThermalNeutronScatteringLawGetConst

!! Get
function DistributionThermalNeutronScatteringLawGet(handle) &
      bind(C, name='DistributionThermalNeutronScatteringLawGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionThermalNeutronScatteringLawGet

!! Set
subroutine DistributionThermalNeutronScatteringLawSet(handle, fieldHandle) &
      bind(C, name='DistributionThermalNeutronScatteringLawSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DistributionThermalNeutronScatteringLawSet


!! -----------------------------------------------------------------------------
!! Child: uncorrelated
!! -----------------------------------------------------------------------------

!! Has
function DistributionUncorrelatedHas(handle) &
      bind(C, name='DistributionUncorrelatedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DistributionUncorrelatedHas

!! Get, const
function DistributionUncorrelatedGetConst(handle) &
      bind(C, name='DistributionUncorrelatedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionUncorrelatedGetConst

!! Get
function DistributionUncorrelatedGet(handle) &
      bind(C, name='DistributionUncorrelatedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionUncorrelatedGet

!! Set
subroutine DistributionUncorrelatedSet(handle, fieldHandle) &
      bind(C, name='DistributionUncorrelatedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DistributionUncorrelatedSet


!! -----------------------------------------------------------------------------
!! Child: unspecified
!! -----------------------------------------------------------------------------

!! Has
function DistributionUnspecifiedHas(handle) &
      bind(C, name='DistributionUnspecifiedHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DistributionUnspecifiedHas

!! Get, const
function DistributionUnspecifiedGetConst(handle) &
      bind(C, name='DistributionUnspecifiedGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionUnspecifiedGetConst

!! Get
function DistributionUnspecifiedGet(handle) &
      bind(C, name='DistributionUnspecifiedGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionUnspecifiedGet

!! Set
subroutine DistributionUnspecifiedSet(handle, fieldHandle) &
      bind(C, name='DistributionUnspecifiedSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DistributionUnspecifiedSet


!! -----------------------------------------------------------------------------
!! Child: XYs2d
!! -----------------------------------------------------------------------------

!! Has
function DistributionXYs2dHas(handle) &
      bind(C, name='DistributionXYs2dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DistributionXYs2dHas

!! Get, const
function DistributionXYs2dGetConst(handle) &
      bind(C, name='DistributionXYs2dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionXYs2dGetConst

!! Get
function DistributionXYs2dGet(handle) &
      bind(C, name='DistributionXYs2dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionXYs2dGet

!! Set
subroutine DistributionXYs2dSet(handle, fieldHandle) &
      bind(C, name='DistributionXYs2dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DistributionXYs2dSet


!! -----------------------------------------------------------------------------
!! Child: branching3d
!! -----------------------------------------------------------------------------

!! Has
function DistributionBranching3dHas(handle) &
      bind(C, name='DistributionBranching3dHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function DistributionBranching3dHas

!! Get, const
function DistributionBranching3dGetConst(handle) &
      bind(C, name='DistributionBranching3dGetConst') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionBranching3dGetConst

!! Get
function DistributionBranching3dGet(handle) &
      bind(C, name='DistributionBranching3dGet') &
      result(resultHandle)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: resultHandle
end function DistributionBranching3dGet

!! Set
subroutine DistributionBranching3dSet(handle, fieldHandle) &
      bind(C, name='DistributionBranching3dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine DistributionBranching3dSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module reducedDistribution
