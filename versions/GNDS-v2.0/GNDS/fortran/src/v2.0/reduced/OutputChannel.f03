
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module reducedOutputChannel
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function OutputChannelDefaultConst() &
      bind(C, name='OutputChannelDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: OutputChannelDefaultConst
end function OutputChannelDefaultConst

!! Create, default, non-const
function OutputChannelDefault() &
      bind(C, name='OutputChannelDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: OutputChannelDefault
end function OutputChannelDefault

!! Create, general, const
function OutputChannelCreateConst( &
   genre, &
   process, &
   Q, &
   products, &
   genreSize, &
   processSize &
) &
      bind(C, name='OutputChannelCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: genreSize
   character(c_char), intent(in) :: genre(genreSize)
   integer(c_size_t), intent(in), value :: processSize
   character(c_char), intent(in) :: process(processSize)
   type(c_ptr), intent(in), value :: Q
   type(c_ptr), intent(in), value :: products
   type(c_ptr) :: OutputChannelCreateConst
end function OutputChannelCreateConst

!! Create, general, non-const
function OutputChannelCreate( &
   genre, &
   process, &
   Q, &
   products, &
   genreSize, &
   processSize &
) &
      bind(C, name='OutputChannelCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: genreSize
   character(c_char), intent(in) :: genre(genreSize)
   integer(c_size_t), intent(in), value :: processSize
   character(c_char), intent(in) :: process(processSize)
   type(c_ptr), intent(in), value :: Q
   type(c_ptr), intent(in), value :: products
   type(c_ptr) :: OutputChannelCreate
end function OutputChannelCreate

!! Assign
subroutine OutputChannelAssign(handleLHS, handleRHS) &
      bind(C, name='OutputChannelAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine OutputChannelAssign

!! Delete
subroutine OutputChannelDelete(handle) &
      bind(C, name='OutputChannelDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine OutputChannelDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function OutputChannelRead(handle, filename, filenameSize) &
      bind(C, name='OutputChannelRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: OutputChannelRead
end function OutputChannelRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function OutputChannelWrite(handle, filename, filenameSize) &
      bind(C, name='OutputChannelWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: OutputChannelWrite
end function OutputChannelWrite

!! Print to standard output, in our prettyprinting format
function OutputChannelPrint(handle) &
      bind(C, name='OutputChannelPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelPrint
end function OutputChannelPrint

!! Print to standard output, as XML
function OutputChannelPrintXML(handle) &
      bind(C, name='OutputChannelPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelPrintXML
end function OutputChannelPrintXML

!! Print to standard output, as JSON
function OutputChannelPrintJSON(handle) &
      bind(C, name='OutputChannelPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelPrintJSON
end function OutputChannelPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: genre
!! -----------------------------------------------------------------------------

!! Has
function OutputChannelGenreHas(handle) &
      bind(C, name='OutputChannelGenreHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelGenreHas
end function OutputChannelGenreHas

!! Get
function OutputChannelGenreGet(handle) &
      bind(C, name='OutputChannelGenreGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: OutputChannelGenreGet
end function OutputChannelGenreGet

!! Set
subroutine OutputChannelGenreSet(handle, genre, genreSize) &
      bind(C, name='OutputChannelGenreSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: genreSize
   character(c_char), intent(in) :: genre(genreSize)
end subroutine OutputChannelGenreSet


!! -----------------------------------------------------------------------------
!! Metadatum: process
!! -----------------------------------------------------------------------------

!! Has
function OutputChannelProcessHas(handle) &
      bind(C, name='OutputChannelProcessHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelProcessHas
end function OutputChannelProcessHas

!! Get
function OutputChannelProcessGet(handle) &
      bind(C, name='OutputChannelProcessGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: OutputChannelProcessGet
end function OutputChannelProcessGet

!! Set
subroutine OutputChannelProcessSet(handle, process, processSize) &
      bind(C, name='OutputChannelProcessSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: processSize
   character(c_char), intent(in) :: process(processSize)
end subroutine OutputChannelProcessSet


!! -----------------------------------------------------------------------------
!! Child: Q
!! -----------------------------------------------------------------------------

!! Has
function OutputChannelQHas(handle) &
      bind(C, name='OutputChannelQHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelQHas
end function OutputChannelQHas

!! Get, const
function OutputChannelQGetConst(handle) &
      bind(C, name='OutputChannelQGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: OutputChannelQGetConst
end function OutputChannelQGetConst

!! Get, non-const
function OutputChannelQGet(handle) &
      bind(C, name='OutputChannelQGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: OutputChannelQGet
end function OutputChannelQGet

!! Set
subroutine OutputChannelQSet(handle, fieldHandle) &
      bind(C, name='OutputChannelQSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine OutputChannelQSet


!! -----------------------------------------------------------------------------
!! Child: products
!! -----------------------------------------------------------------------------

!! Has
function OutputChannelProductsHas(handle) &
      bind(C, name='OutputChannelProductsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: OutputChannelProductsHas
end function OutputChannelProductsHas

!! Get, const
function OutputChannelProductsGetConst(handle) &
      bind(C, name='OutputChannelProductsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: OutputChannelProductsGetConst
end function OutputChannelProductsGetConst

!! Get, non-const
function OutputChannelProductsGet(handle) &
      bind(C, name='OutputChannelProductsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: OutputChannelProductsGet
end function OutputChannelProductsGet

!! Set
subroutine OutputChannelProductsSet(handle, fieldHandle) &
      bind(C, name='OutputChannelProductsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine OutputChannelProductsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module reducedOutputChannel
