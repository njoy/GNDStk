
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module reducedNuclides
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function NuclidesDefaultConst() &
      bind(C, name='NuclidesDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NuclidesDefaultConst
end function NuclidesDefaultConst

!! Create, default
function NuclidesDefault() &
      bind(C, name='NuclidesDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: NuclidesDefault
end function NuclidesDefault

!! Create, general, const
function NuclidesCreateConst( &
   href, &
   hrefSize &
) &
      bind(C, name='NuclidesCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: NuclidesCreateConst
end function NuclidesCreateConst

!! Create, general
function NuclidesCreate( &
   href, &
   hrefSize &
) &
      bind(C, name='NuclidesCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
   type(c_ptr) :: NuclidesCreate
end function NuclidesCreate

!! Assign
subroutine NuclidesAssign(handleLHS, handleRHS) &
      bind(C, name='NuclidesAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine NuclidesAssign

!! Delete
subroutine NuclidesDelete(handle) &
      bind(C, name='NuclidesDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclidesDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function NuclidesRead(handle, filename, filenameSize) &
      bind(C, name='NuclidesRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NuclidesRead
end function NuclidesRead

!! Write to file
function NuclidesWrite(handle, filename, filenameSize) &
      bind(C, name='NuclidesWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: NuclidesWrite
end function NuclidesWrite

!! Print to standard output, in our prettyprinting format
function NuclidesPrint(handle) &
      bind(C, name='NuclidesPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclidesPrint
end function NuclidesPrint

!! Print to standard output, as XML
function NuclidesPrintXML(handle) &
      bind(C, name='NuclidesPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclidesPrintXML
end function NuclidesPrintXML

!! Print to standard output, as JSON
function NuclidesPrintJSON(handle) &
      bind(C, name='NuclidesPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclidesPrintJSON
end function NuclidesPrintJSON


!! -----------------------------------------------------------------------------
!! Data vector
!! -----------------------------------------------------------------------------

!! Clear
subroutine NuclidesStringsClear(handle) &
      bind(C, name='NuclidesStringsClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine NuclidesStringsClear

!! Get size
function NuclidesStringsSize(handle) &
      bind(C, name='NuclidesStringsSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: NuclidesStringsSize
end function NuclidesStringsSize

!! Get value
!! By index \in [0,size)
function NuclidesStringsGet(handle, arrayIndex) &
      bind(C, name='NuclidesStringsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: arrayIndex
   type(c_ptr) :: NuclidesStringsGet
end function NuclidesStringsGet

!! Set value
!! By index \in [0,size)
subroutine NuclidesStringsSet(handle, arrayIndex, valueAtIndex, valueAtIndexSize) &
      bind(C, name='NuclidesStringsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: arrayIndex
   integer(c_size_t), intent(in), value :: valueAtIndexSize
   character(c_char), intent(in) :: valueAtIndex(valueAtIndexSize)
end subroutine NuclidesStringsSet


!! -----------------------------------------------------------------------------
!! Metadatum: href
!! -----------------------------------------------------------------------------

!! Has
function NuclidesHrefHas(handle) &
      bind(C, name='NuclidesHrefHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: NuclidesHrefHas
end function NuclidesHrefHas

!! Get
function NuclidesHrefGet(handle) &
      bind(C, name='NuclidesHrefGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: NuclidesHrefGet
end function NuclidesHrefGet

!! Set
subroutine NuclidesHrefSet(handle, href, hrefSize) &
      bind(C, name='NuclidesHrefSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: hrefSize
   character(c_char), intent(in) :: href(hrefSize)
end subroutine NuclidesHrefSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module reducedNuclides
