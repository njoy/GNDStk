
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module g3dStarts
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function StartsDefaultConst() &
      bind(C, name='StartsDefaultConst') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function StartsDefaultConst

!! Create, default
function StartsDefault() &
      bind(C, name='StartsDefault') &
      result(handle)
   use iso_c_binding
   implicit none
   type(c_ptr) :: handle
end function StartsDefault

!! Create, general, const
function StartsCreateConst( &
   valueType, &
   label, &
   valueTypeSize, &
   labelSize &
) &
      bind(C, name='StartsCreateConst') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: valueTypeSize
   character(c_char), intent(in) :: valueType(valueTypeSize)
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr) :: handle
end function StartsCreateConst

!! Create, general
function StartsCreate( &
   valueType, &
   label, &
   valueTypeSize, &
   labelSize &
) &
      bind(C, name='StartsCreate') &
      result(handle)
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: valueTypeSize
   character(c_char), intent(in) :: valueType(valueTypeSize)
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr) :: handle
end function StartsCreate

!! Assign
subroutine StartsAssign(handleLHS, handleRHS) &
      bind(C, name='StartsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine StartsAssign

!! Delete
subroutine StartsDelete(handle) &
      bind(C, name='StartsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine StartsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function StartsRead(handle, filename, filenameSize) &
      bind(C, name='StartsRead') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function StartsRead

!! Write to file
function StartsWrite(handle, filename, filenameSize) &
      bind(C, name='StartsWrite') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: success
end function StartsWrite

!! Print to standard output, in our prettyprinting format
function StartsPrint(handle) &
      bind(C, name='StartsPrint') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function StartsPrint

!! Print to standard output, as XML
function StartsPrintXML(handle) &
      bind(C, name='StartsPrintXML') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function StartsPrintXML

!! Print to standard output, as JSON
function StartsPrintJSON(handle) &
      bind(C, name='StartsPrintJSON') &
      result(success)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: success
end function StartsPrintJSON


!! -----------------------------------------------------------------------------
!! Data vector
!! -----------------------------------------------------------------------------

!! Clear
subroutine StartsIntsClear(handle) &
      bind(C, name='StartsIntsClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine StartsIntsClear

!! Get size
function StartsIntsSize(handle) &
      bind(C, name='StartsIntsSize') &
      result(arraySize)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: arraySize
end function StartsIntsSize

!! Get value
!! By index \in [0,size)
function StartsIntsGet(handle, arrayIndex) &
      bind(C, name='StartsIntsGet') &
      result(valueAtIndex)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: arrayIndex
   real(c_int) :: valueAtIndex
end function StartsIntsGet

!! Set value
!! By index \in [0,size)
subroutine StartsIntsSet(handle, arrayIndex, valueAtIndex) &
      bind(C, name='StartsIntsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: arrayIndex
   real(c_int), intent(in), value :: valueAtIndex
end subroutine StartsIntsSet

!! Get pointer to existing values, const
function StartsIntsGetArrayConst(handle) &
      bind(C, name='StartsIntsGetArrayConst') &
      result(ptrToArray)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ptrToArray
end function StartsIntsGetArrayConst

!! Get pointer to existing values
function StartsIntsGetArray(handle) &
      bind(C, name='StartsIntsGetArray') &
      result(ptrToArray)
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: ptrToArray
end function StartsIntsGetArray

!! Set completely new values and size
subroutine StartsIntsSetArray(handle, values, valuesSize) &
      bind(C, name='StartsIntsSetArray')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: valuesSize
   real(c_int), intent(in) :: values(valuesSize)
end subroutine StartsIntsSetArray


!! -----------------------------------------------------------------------------
!! Metadatum: valueType
!! -----------------------------------------------------------------------------

!! Has
function StartsValueTypeHas(handle) &
      bind(C, name='StartsValueTypeHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function StartsValueTypeHas

!! Get
function StartsValueTypeGet(handle) &
      bind(C, name='StartsValueTypeGet') &
      result(valueType)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: valueType
end function StartsValueTypeGet

!! Set
subroutine StartsValueTypeSet(handle, valueType, valueTypeSize) &
      bind(C, name='StartsValueTypeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueTypeSize
   character(c_char), intent(in) :: valueType(valueTypeSize)
end subroutine StartsValueTypeSet


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function StartsLabelHas(handle) &
      bind(C, name='StartsLabelHas') &
      result(has)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: has
end function StartsLabelHas

!! Get
function StartsLabelGet(handle) &
      bind(C, name='StartsLabelGet') &
      result(label)
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: label
end function StartsLabelGet

!! Set
subroutine StartsLabelSet(handle, label, labelSize) &
      bind(C, name='StartsLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine StartsLabelSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module g3dStarts
