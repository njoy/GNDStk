
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module g3dStarts
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function StartsDefaultConst() &
      bind(C, name='StartsDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: StartsDefaultConst
end function StartsDefaultConst

!! Create, default, non-const
function StartsDefault() &
      bind(C, name='StartsDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: StartsDefault
end function StartsDefault

!! Create, general, const
function StartsCreateConst( &
   valueType, &
   label, &
   valueTypeSize, &
   labelSize &
) &
      bind(C, name='StartsCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: valueTypeSize
   character(c_char), intent(in) :: valueType(valueTypeSize)
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr) :: StartsCreateConst
end function StartsCreateConst

!! Create, general, non-const
function StartsCreate( &
   valueType, &
   label, &
   valueTypeSize, &
   labelSize &
) &
      bind(C, name='StartsCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: valueTypeSize
   character(c_char), intent(in) :: valueType(valueTypeSize)
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   type(c_ptr) :: StartsCreate
end function StartsCreate

!! Assign
subroutine StartsAssign(handleLHS, handleRHS) &
      bind(C, name='StartsAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS
   type(c_ptr), intent(in), value :: handleRHS
end subroutine StartsAssign

!! Delete
subroutine StartsDelete(handle) &
      bind(C, name='StartsDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine StartsDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
!! File can be XML, JSON, or HDF5.
!! We'll examine the file's contents to determine its type automatically.
function StartsRead(handle, filename, filenameSize) &
      bind(C, name='StartsRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: StartsRead
end function StartsRead

!! Write to file
!! File can be XML, JSON, or HDF5.
!! We'll use filename's extension to determine the type you want written.
function StartsWrite(handle, filename, filenameSize) &
      bind(C, name='StartsWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: StartsWrite
end function StartsWrite

!! Print to standard output, in our prettyprinting format
function StartsPrint(handle) &
      bind(C, name='StartsPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StartsPrint
end function StartsPrint

!! Print to standard output, as XML
function StartsPrintXML(handle) &
      bind(C, name='StartsPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StartsPrintXML
end function StartsPrintXML

!! Print to standard output, as JSON
function StartsPrintJSON(handle) &
      bind(C, name='StartsPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StartsPrintJSON
end function StartsPrintJSON


!! -----------------------------------------------------------------------------
!! Data vector
!! -----------------------------------------------------------------------------

!! Clear
subroutine StartsIntsClear(handle) &
      bind(C, name='StartsIntsClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine StartsIntsClear

!! Get size
function StartsIntsSize(handle) &
      bind(C, name='StartsIntsSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: StartsIntsSize
end function StartsIntsSize

!! Get value
!! By index \in [0,size)
function StartsIntsGet(handle, arrayIndex) &
      bind(C, name='StartsIntsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: arrayIndex
   integer(c_int) :: StartsIntsGet
end function StartsIntsGet

!! Set value
!! By index \in [0,size)
subroutine StartsIntsSet(handle, arrayIndex, valueAtIndex) &
      bind(C, name='StartsIntsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: arrayIndex
   integer(c_int), intent(in), value :: valueAtIndex
end subroutine StartsIntsSet

!! Get pointer to existing values, const
function StartsIntsGetArrayConst(handle) &
      bind(C, name='StartsIntsGetArrayConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: StartsIntsGetArrayConst
end function StartsIntsGetArrayConst

!! Get pointer to existing values, non-const
function StartsIntsGetArray(handle) &
      bind(C, name='StartsIntsGetArray')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr) :: StartsIntsGetArray
end function StartsIntsGetArray

!! Set completely new values and size
subroutine StartsIntsSetArray(handle, values, valuesSize) &
      bind(C, name='StartsIntsSetArray')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valuesSize
   integer(c_int), intent(in) :: values(valuesSize)
end subroutine StartsIntsSetArray


!! -----------------------------------------------------------------------------
!! Metadatum: valueType
!! -----------------------------------------------------------------------------

!! Has
function StartsValueTypeHas(handle) &
      bind(C, name='StartsValueTypeHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StartsValueTypeHas
end function StartsValueTypeHas

!! Get
function StartsValueTypeGet(handle) &
      bind(C, name='StartsValueTypeGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: StartsValueTypeGet
end function StartsValueTypeGet

!! Set
subroutine StartsValueTypeSet(handle, valueType, valueTypeSize) &
      bind(C, name='StartsValueTypeSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: valueTypeSize
   character(c_char), intent(in) :: valueType(valueTypeSize)
end subroutine StartsValueTypeSet


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function StartsLabelHas(handle) &
      bind(C, name='StartsLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: StartsLabelHas
end function StartsLabelHas

!! Get
function StartsLabelGet(handle) &
      bind(C, name='StartsLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: StartsLabelGet
end function StartsLabelGet

!! Set
subroutine StartsLabelSet(handle, label, labelSize) &
      bind(C, name='StartsLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine StartsLabelSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module g3dStarts
