
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_RESONANCESWITHBACKGROUND
#define GNDS_V2_0_GENERAL_RESONANCESWITHBACKGROUND

#include "GNDS/v2.0/general/Resonances.hpp"
#include "GNDS/v2.0/general/Background.hpp"
#include "GNDS/v2.0/general/Uncertainty.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class ResonancesWithBackground
// -----------------------------------------------------------------------------

class ResonancesWithBackground :
   public Component<general::ResonancesWithBackground>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "ResonancesWithBackground"; }
   static auto NODENAME() { return "resonancesWithBackground"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<general::Resonances>
            ("resonances") |
         --Child<general::Background>
            ("background") |
         --Child<std::optional<general::Uncertainty>>
            ("uncertainty")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "resonances",
         "background",
         "uncertainty"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "resonances",
         "background",
         "uncertainty"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      label{this};

   // children
   Field<general::Resonances>
      resonances{this};
   Field<general::Background>
      background{this};
   Field<std::optional<general::Uncertainty>>
      uncertainty{this};

   // shortcuts
   #define NJOY_GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   NJOY_GNDSTK_SHORTCUT(background(),fastRegion);
   NJOY_GNDSTK_SHORTCUT(resonances(),resolved);
   NJOY_GNDSTK_SHORTCUT(background(),resolvedRegion);
   NJOY_GNDSTK_SHORTCUT(resonances(),scatteringRadius);
   NJOY_GNDSTK_SHORTCUT(resonances(),unresolved);
   NJOY_GNDSTK_SHORTCUT(background(),unresolvedRegion);
   #undef NJOY_GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->resonances, \
      this->background, \
      this->uncertainty \
   )

   // default
   ResonancesWithBackground() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ResonancesWithBackground(
      const wrapper<std::string>
         &label,
      const wrapper<general::Resonances>
         &resonances = {},
      const wrapper<general::Background>
         &background = {},
      const wrapper<std::optional<general::Uncertainty>>
         &uncertainty = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      resonances(this,resonances),
      background(this,background),
      uncertainty(this,uncertainty)
   {
      Component::finish();
   }

   // from node
   explicit ResonancesWithBackground(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ResonancesWithBackground(const ResonancesWithBackground &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      resonances(this,other.resonances),
      background(this,other.background),
      uncertainty(this,other.uncertainty)
   {
      Component::finish(other);
   }

   // move
   ResonancesWithBackground(ResonancesWithBackground &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      resonances(this,std::move(other.resonances)),
      background(this,std::move(other.background)),
      uncertainty(this,std::move(other.uncertainty))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ResonancesWithBackground &operator=(const ResonancesWithBackground &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         resonances = other.resonances;
         background = other.background;
         uncertainty = other.uncertainty;
      }
      return *this;
   }

   // move
   ResonancesWithBackground &operator=(ResonancesWithBackground &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         resonances = std::move(other.resonances);
         background = std::move(other.background);
         uncertainty = std::move(other.uncertainty);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/ResonancesWithBackground/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class ResonancesWithBackground

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
