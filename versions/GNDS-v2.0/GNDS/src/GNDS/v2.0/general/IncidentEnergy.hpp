
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_INCIDENTENERGY
#define GNDS_V2_0_GENERAL_INCIDENTENERGY

#include "GNDS/v2.0/general/Energy.hpp"
#include "GNDS/v2.0/general/Yields.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class IncidentEnergy
// -----------------------------------------------------------------------------

class IncidentEnergy :
   public Component<general::IncidentEnergy>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "IncidentEnergy"; }
   static auto NODENAME() { return "incidentEnergy"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |

         // children
         --Child<general::Energy>
            ("energy") |
         --Child<general::Yields>
            ("yields")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "energy",
         "yields"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "energy",
         "yields"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      label{this};

   // children
   Field<general::Energy>
      energy{this};
   Field<general::Yields>
      yields{this};

   // shortcuts
   #define NJOY_GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   NJOY_GNDSTK_SHORTCUT(energy(),Double);
   NJOY_GNDSTK_SHORTCUT(energy(),MadlandNix);
   NJOY_GNDSTK_SHORTCUT(energy(),NBodyPhaseSpace);
   NJOY_GNDSTK_SHORTCUT(energy(),XYs2d);
   NJOY_GNDSTK_SHORTCUT(energy(),discreteGamma);
   NJOY_GNDSTK_SHORTCUT(energy(),evaporation);
   NJOY_GNDSTK_SHORTCUT(energy(),generalEvaporation);
   NJOY_GNDSTK_SHORTCUT(yields(),nuclides);
   NJOY_GNDSTK_SHORTCUT(energy(),primaryGamma);
   NJOY_GNDSTK_SHORTCUT(energy(),simpleMaxwellianFission);
   NJOY_GNDSTK_SHORTCUT(yields(),values);
   NJOY_GNDSTK_SHORTCUT(energy(),weightedFunctionals);
   #undef NJOY_GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->energy, \
      this->yields \
   )

   // default
   IncidentEnergy() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit IncidentEnergy(
      const wrapper<std::string>
         &label,
      const wrapper<general::Energy>
         &energy = {},
      const wrapper<general::Yields>
         &yields = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      energy(this,energy),
      yields(this,yields)
   {
      Component::finish();
   }

   // from node
   explicit IncidentEnergy(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   IncidentEnergy(const IncidentEnergy &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      energy(this,other.energy),
      yields(this,other.yields)
   {
      Component::finish(other);
   }

   // move
   IncidentEnergy(IncidentEnergy &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      energy(this,std::move(other.energy)),
      yields(this,std::move(other.yields))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   IncidentEnergy &operator=(const IncidentEnergy &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         energy = other.energy;
         yields = other.yields;
      }
      return *this;
   }

   // move
   IncidentEnergy &operator=(IncidentEnergy &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         energy = std::move(other.energy);
         yields = std::move(other.yields);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/IncidentEnergy/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class IncidentEnergy

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
