
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTINELASTIC
#define GNDS_V2_0_GENERAL_THERMALNEUTRONSCATTERINGLAW_INCOHERENTINELASTIC

#include "GNDS/v2.0/general/ScatteringAtoms.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class ThermalNeutronScatteringLaw_incoherentInelastic
// -----------------------------------------------------------------------------

class ThermalNeutronScatteringLaw_incoherentInelastic :
   public Component<general::ThermalNeutronScatteringLaw_incoherentInelastic>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "ThermalNeutronScatteringLaw_incoherentInelastic"; }
   static auto NODENAME() { return "thermalNeutronScatteringLaw_incoherentInelastic"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("label") |
         std::string{}
            / Meta<>("pid") |
         std::string{}
            / Meta<>("productFrame") |
         std::string{}
            / Meta<>("primaryScatterer") |
         std::optional<bool>{}
            / Meta<>("calculatedAtThermal") |

         // children
         --Child<general::ScatteringAtoms>
            ("scatteringAtoms")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "pid",
         "productFrame",
         "primaryScatterer",
         "calculatedAtThermal",
         "scatteringAtoms"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "label",
         "pid",
         "product_frame",
         "primary_scatterer",
         "calculated_at_thermal",
         "scattering_atoms"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      label{this};
   Field<std::string>
      pid{this};
   Field<std::string>
      productFrame{this};
   Field<std::string>
      primaryScatterer{this};
   Field<std::optional<bool>>
      calculatedAtThermal{this};

   // children
   Field<general::ScatteringAtoms>
      scatteringAtoms{this};

   // shortcuts
   #define NJOY_GNDSTK_SHORTCUT(to,name) decltype(to.name) &name = to.name
   NJOY_GNDSTK_SHORTCUT(scatteringAtoms(),scatteringAtom);
   #undef NJOY_GNDSTK_SHORTCUT

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->label, \
      this->pid, \
      this->productFrame, \
      this->primaryScatterer, \
      this->calculatedAtThermal, \
      this->scatteringAtoms \
   )

   // default
   ThermalNeutronScatteringLaw_incoherentInelastic() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ThermalNeutronScatteringLaw_incoherentInelastic(
      const wrapper<std::string>
         &label,
      const wrapper<std::string>
         &pid = {},
      const wrapper<std::string>
         &productFrame = {},
      const wrapper<std::string>
         &primaryScatterer = {},
      const wrapper<std::optional<bool>>
         &calculatedAtThermal = {},
      const wrapper<general::ScatteringAtoms>
         &scatteringAtoms = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      label(this,label),
      pid(this,pid),
      productFrame(this,productFrame),
      primaryScatterer(this,primaryScatterer),
      calculatedAtThermal(this,calculatedAtThermal),
      scatteringAtoms(this,scatteringAtoms)
   {
      Component::finish();
   }

   // from node
   explicit ThermalNeutronScatteringLaw_incoherentInelastic(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ThermalNeutronScatteringLaw_incoherentInelastic(const ThermalNeutronScatteringLaw_incoherentInelastic &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      label(this,other.label),
      pid(this,other.pid),
      productFrame(this,other.productFrame),
      primaryScatterer(this,other.primaryScatterer),
      calculatedAtThermal(this,other.calculatedAtThermal),
      scatteringAtoms(this,other.scatteringAtoms)
   {
      Component::finish(other);
   }

   // move
   ThermalNeutronScatteringLaw_incoherentInelastic(ThermalNeutronScatteringLaw_incoherentInelastic &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      label(this,std::move(other.label)),
      pid(this,std::move(other.pid)),
      productFrame(this,std::move(other.productFrame)),
      primaryScatterer(this,std::move(other.primaryScatterer)),
      calculatedAtThermal(this,std::move(other.calculatedAtThermal)),
      scatteringAtoms(this,std::move(other.scatteringAtoms))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ThermalNeutronScatteringLaw_incoherentInelastic &operator=(const ThermalNeutronScatteringLaw_incoherentInelastic &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         label = other.label;
         pid = other.pid;
         productFrame = other.productFrame;
         primaryScatterer = other.primaryScatterer;
         calculatedAtThermal = other.calculatedAtThermal;
         scatteringAtoms = other.scatteringAtoms;
      }
      return *this;
   }

   // move
   ThermalNeutronScatteringLaw_incoherentInelastic &operator=(ThermalNeutronScatteringLaw_incoherentInelastic &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         label = std::move(other.label);
         pid = std::move(other.pid);
         productFrame = std::move(other.productFrame);
         primaryScatterer = std::move(other.primaryScatterer);
         calculatedAtThermal = std::move(other.calculatedAtThermal);
         scatteringAtoms = std::move(other.scatteringAtoms);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/ThermalNeutronScatteringLaw_incoherentInelastic/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class ThermalNeutronScatteringLaw_incoherentInelastic

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
