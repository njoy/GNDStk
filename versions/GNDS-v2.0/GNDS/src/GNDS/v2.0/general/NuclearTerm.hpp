
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_NUCLEARTERM
#define GNDS_V2_0_GENERAL_NUCLEARTERM

#include "GNDS/v2.0/general/Regions2d.hpp"
#include "GNDS/v2.0/general/XYs2d.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class NuclearTerm
// -----------------------------------------------------------------------------

class NuclearTerm :
   public Component<general::NuclearTerm>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "NuclearTerm"; }
   static auto NODENAME() { return "nuclearTerm"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // children
         --Child<std::optional<general::Regions2d>>
            ("regions2d") |
         --Child<std::optional<general::XYs2d>>
            ("XYs2d")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "regions2d",
         "XYs2d"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "regions2d",
         "xys2d"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // children
   Field<std::optional<general::Regions2d>>
      regions2d{this};
   Field<std::optional<general::XYs2d>>
      XYs2d{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->regions2d, \
      this->XYs2d \
   )

   // default
   NuclearTerm() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit NuclearTerm(
      const wrapper<std::optional<general::Regions2d>>
         &regions2d,
      const wrapper<std::optional<general::XYs2d>>
         &XYs2d = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      regions2d(this,regions2d),
      XYs2d(this,XYs2d)
   {
      Component::finish();
   }

   // from node
   explicit NuclearTerm(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   NuclearTerm(const NuclearTerm &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      regions2d(this,other.regions2d),
      XYs2d(this,other.XYs2d)
   {
      Component::finish(other);
   }

   // move
   NuclearTerm(NuclearTerm &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      regions2d(this,std::move(other.regions2d)),
      XYs2d(this,std::move(other.XYs2d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   NuclearTerm &operator=(const NuclearTerm &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         regions2d = other.regions2d;
         XYs2d = other.XYs2d;
      }
      return *this;
   }

   // move
   NuclearTerm &operator=(NuclearTerm &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         regions2d = std::move(other.regions2d);
         XYs2d = std::move(other.XYs2d);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/NuclearTerm/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class NuclearTerm

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
