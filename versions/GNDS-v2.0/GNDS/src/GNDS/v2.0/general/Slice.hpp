
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef GNDS_V2_0_GENERAL_SLICE
#define GNDS_V2_0_GENERAL_SLICE

#include "GNDS/v2.0/key.hpp"

namespace GNDS {
namespace v2_0 {
namespace general {

// -----------------------------------------------------------------------------
// general::
// class Slice
// -----------------------------------------------------------------------------

class Slice :
   public Component<general::Slice>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "general"; }
   static auto CLASS() { return "Slice"; }
   static auto NODENAME() { return "slice"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         int{}
            / Meta<>("dimension") |
         std::optional<int>{}
            / Meta<>("domainValue") |
         std::optional<double>{}
            / Meta<>("domainMin") |
         std::optional<double>{}
            / Meta<>("domainMax") |
         std::optional<std::string>{}
            / Meta<>("domainUnit")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "dimension",
         "domainValue",
         "domainMin",
         "domainMax",
         "domainUnit"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "dimension",
         "domain_value",
         "domain_min",
         "domain_max",
         "domain_unit"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<int>
      dimension{this};
   Field<std::optional<int>>
      domainValue{this};
   Field<std::optional<double>>
      domainMin{this};
   Field<std::optional<double>>
      domainMax{this};
   Field<std::optional<std::string>>
      domainUnit{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->dimension, \
      this->domainValue, \
      this->domainMin, \
      this->domainMax, \
      this->domainUnit \
   )

   // default
   Slice() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Slice(
      const wrapper<int>
         &dimension,
      const wrapper<std::optional<int>>
         &domainValue = {},
      const wrapper<std::optional<double>>
         &domainMin = {},
      const wrapper<std::optional<double>>
         &domainMax = {},
      const wrapper<std::optional<std::string>>
         &domainUnit = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      dimension(this,dimension),
      domainValue(this,domainValue),
      domainMin(this,domainMin),
      domainMax(this,domainMax),
      domainUnit(this,domainUnit)
   {
      Component::finish();
   }

   // from node
   explicit Slice(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Slice(const Slice &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      dimension(this,other.dimension),
      domainValue(this,other.domainValue),
      domainMin(this,other.domainMin),
      domainMax(this,other.domainMax),
      domainUnit(this,other.domainUnit)
   {
      Component::finish(other);
   }

   // move
   Slice(Slice &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      dimension(this,std::move(other.dimension)),
      domainValue(this,std::move(other.domainValue)),
      domainMin(this,std::move(other.domainMin)),
      domainMax(this,std::move(other.domainMax)),
      domainUnit(this,std::move(other.domainUnit))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Slice &operator=(const Slice &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         dimension = other.dimension;
         domainValue = other.domainValue;
         domainMin = other.domainMin;
         domainMax = other.domainMax;
         domainUnit = other.domainUnit;
      }
      return *this;
   }

   // move
   Slice &operator=(Slice &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         dimension = std::move(other.dimension);
         domainValue = std::move(other.domainValue);
         domainMin = std::move(other.domainMin);
         domainMax = std::move(other.domainMax);
         domainUnit = std::move(other.domainUnit);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "GNDS/v2.0/general/Slice/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class Slice

} // namespace general
} // namespace v2_0
} // namespace GNDS

#endif
