
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/MultiplicitySums.hpp"
#include "definitions.hpp"

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::MultiplicitySums
void wrapMultiplicitySums(pybind11::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::MultiplicitySums;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "MultiplicitySums",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::vector<general::MultiplicitySum> &
      >(),
      pybind11::arg("multiplicity_sum"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set multiplicitySum
   object.def_property(
      "multiplicity_sum",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.multiplicitySum();
      },
      [](cppCLASS &self, const std::vector<general::MultiplicitySum> &value)
      {
         self.multiplicitySum() = value;
      },
      cppCLASS::component_t::documentation("multiplicity_sum").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
