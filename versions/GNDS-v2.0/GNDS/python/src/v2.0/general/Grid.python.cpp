
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Grid.hpp"
#include "definitions.hpp"

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::Grid
void wrapGrid(pybind11::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Grid;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "Grid",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const int &,
         const std::string &,
         const std::string &,
         const std::string &,
         const std::optional<std::string> &,
         const std::optional<general::Link> &,
         const std::optional<general::Values> &
      >(),
      pybind11::arg("index"),
      pybind11::arg("label"),
      pybind11::arg("unit"),
      pybind11::arg("style"),
      pybind11::arg("interpolation") = std::nullopt,
      pybind11::arg("link") = std::nullopt,
      pybind11::arg("values") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set index
   object.def_property(
      "index",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.index();
      },
      [](cppCLASS &self, const int &value)
      {
         self.index() = value;
      },
      cppCLASS::component_t::documentation("index").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set unit
   object.def_property(
      "unit",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.unit();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.unit() = value;
      },
      cppCLASS::component_t::documentation("unit").data()
   );

   // get/set style
   object.def_property(
      "style",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.style();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.style() = value;
      },
      cppCLASS::component_t::documentation("style").data()
   );

   // get/set interpolation
   object.def_property(
      "interpolation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.interpolation();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.interpolation() = value;
      },
      cppCLASS::component_t::documentation("interpolation").data()
   );

   // get/set link
   object.def_property(
      "link",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.link();
      },
      [](cppCLASS &self, const std::optional<general::Link> &value)
      {
         self.link() = value;
      },
      cppCLASS::component_t::documentation("link").data()
   );

   // get/set values
   object.def_property(
      "values",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.values();
      },
      [](cppCLASS &self, const std::optional<general::Values> &value)
      {
         self.values() = value;
      },
      cppCLASS::component_t::documentation("values").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
