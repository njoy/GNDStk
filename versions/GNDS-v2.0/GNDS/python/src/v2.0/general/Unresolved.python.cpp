
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Unresolved.hpp"
#include "definitions.hpp"

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::Unresolved
void wrapUnresolved(pybind11::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Unresolved;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "Unresolved",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const double &,
         const double &,
         const std::string &,
         const general::TabulatedWidths &
      >(),
      pybind11::arg("domain_min"),
      pybind11::arg("domain_max"),
      pybind11::arg("domain_unit"),
      pybind11::arg("tabulated_widths"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set domainMin
   object.def_property(
      "domain_min",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainMin();
      },
      [](cppCLASS &self, const double &value)
      {
         self.domainMin() = value;
      },
      cppCLASS::component_t::documentation("domain_min").data()
   );

   // get/set domainMax
   object.def_property(
      "domain_max",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainMax();
      },
      [](cppCLASS &self, const double &value)
      {
         self.domainMax() = value;
      },
      cppCLASS::component_t::documentation("domain_max").data()
   );

   // get/set domainUnit
   object.def_property(
      "domain_unit",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.domainUnit();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.domainUnit() = value;
      },
      cppCLASS::component_t::documentation("domain_unit").data()
   );

   // get/set tabulatedWidths
   object.def_property(
      "tabulated_widths",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.tabulatedWidths();
      },
      [](cppCLASS &self, const general::TabulatedWidths &value)
      {
         self.tabulatedWidths() = value;
      },
      cppCLASS::component_t::documentation("tabulated_widths").data()
   );

   // shortcut: get/set L
   object.def_property(
      "l",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.L();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.L())> &value)
      {
         self.L() = value;
      },
      cppCLASS::component_t::documentation("l").data()
   );

   // shortcut: get/set Ls
   object.def_property(
      "ls",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Ls();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.Ls())> &value)
      {
         self.Ls() = value;
      },
      cppCLASS::component_t::documentation("ls").data()
   );

   // shortcut: get/set PoPs
   object.def_property(
      "po_ps",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.PoPs();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.PoPs())> &value)
      {
         self.PoPs() = value;
      },
      cppCLASS::component_t::documentation("po_ps").data()
   );

   // shortcut: get/set resonanceReaction
   object.def_property(
      "resonance_reaction",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resonanceReaction();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.resonanceReaction())> &value)
      {
         self.resonanceReaction() = value;
      },
      cppCLASS::component_t::documentation("resonance_reaction").data()
   );

   // shortcut: get/set resonanceReactions
   object.def_property(
      "resonance_reactions",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resonanceReactions();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.resonanceReactions())> &value)
      {
         self.resonanceReactions() = value;
      },
      cppCLASS::component_t::documentation("resonance_reactions").data()
   );

   // shortcut: get/set scatteringRadius
   object.def_property(
      "scattering_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.scatteringRadius();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.scatteringRadius())> &value)
      {
         self.scatteringRadius() = value;
      },
      cppCLASS::component_t::documentation("scattering_radius").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
