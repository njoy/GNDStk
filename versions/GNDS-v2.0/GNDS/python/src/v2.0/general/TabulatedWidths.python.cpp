
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/TabulatedWidths.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::TabulatedWidths
void wrapTabulatedWidths(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::TabulatedWidths;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "TabulatedWidths",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::string &,
         const std::optional<bool> &,
         const general::ResonanceReactions &,
         const general::Ls &,
         const std::optional<top::PoPs> &,
         const std::optional<general::ScatteringRadius> &
      >(),
      py::arg("label"),
      py::arg("approximation"),
      py::arg("use_for_self_shielding_only") = std::nullopt,
      py::arg("resonance_reactions"),
      py::arg("ls"),
      py::arg("po_ps") = std::nullopt,
      py::arg("scattering_radius") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set approximation
   object.def_property(
      "approximation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.approximation();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.approximation() = value;
      },
      cppCLASS::component_t::documentation("approximation").data()
   );

   // get/set useForSelfShieldingOnly
   object.def_property(
      "use_for_self_shielding_only",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.useForSelfShieldingOnly();
      },
      [](cppCLASS &self, const std::optional<bool> &value)
      {
         self.useForSelfShieldingOnly() = value;
      },
      cppCLASS::component_t::documentation("use_for_self_shielding_only").data()
   );

   // get/set resonanceReactions
   object.def_property(
      "resonance_reactions",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resonanceReactions();
      },
      [](cppCLASS &self, const general::ResonanceReactions &value)
      {
         self.resonanceReactions() = value;
      },
      cppCLASS::component_t::documentation("resonance_reactions").data()
   );

   // get/set Ls
   object.def_property(
      "ls",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Ls();
      },
      [](cppCLASS &self, const general::Ls &value)
      {
         self.Ls() = value;
      },
      cppCLASS::component_t::documentation("ls").data()
   );

   // get/set PoPs
   object.def_property(
      "po_ps",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.PoPs();
      },
      [](cppCLASS &self, const std::optional<top::PoPs> &value)
      {
         self.PoPs() = value;
      },
      cppCLASS::component_t::documentation("po_ps").data()
   );

   // get/set scatteringRadius
   object.def_property(
      "scattering_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.scatteringRadius();
      },
      [](cppCLASS &self, const std::optional<general::ScatteringRadius> &value)
      {
         self.scatteringRadius() = value;
      },
      cppCLASS::component_t::documentation("scattering_radius").data()
   );

   // shortcut: get/set L
   object.def_property(
      "l",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.L();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.L())> &value)
      {
         self.L() = value;
      },
      cppCLASS::component_t::documentation("l").data()
   );

   // shortcut: get/set resonanceReaction
   object.def_property(
      "resonance_reaction",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resonanceReaction();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.resonanceReaction())> &value)
      {
         self.resonanceReaction() = value;
      },
      cppCLASS::component_t::documentation("resonance_reaction").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
