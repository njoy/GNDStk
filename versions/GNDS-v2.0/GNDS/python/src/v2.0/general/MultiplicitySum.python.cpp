
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/MultiplicitySum.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::MultiplicitySum
void wrapMultiplicitySum(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::MultiplicitySum;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "MultiplicitySum",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const int &,
         const general::Multiplicity &,
         const general::Summands &
      >(),
      py::arg("label"),
      py::arg("endf_mt"),
      py::arg("multiplicity"),
      py::arg("summands"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set ENDF_MT
   object.def_property(
      "endf_mt",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.ENDF_MT();
      },
      [](cppCLASS &self, const int &value)
      {
         self.ENDF_MT() = value;
      },
      cppCLASS::component_t::documentation("endf_mt").data()
   );

   // get/set multiplicity
   object.def_property(
      "multiplicity",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.multiplicity();
      },
      [](cppCLASS &self, const general::Multiplicity &value)
      {
         self.multiplicity() = value;
      },
      cppCLASS::component_t::documentation("multiplicity").data()
   );

   // get/set summands
   object.def_property(
      "summands",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.summands();
      },
      [](cppCLASS &self, const general::Summands &value)
      {
         self.summands() = value;
      },
      cppCLASS::component_t::documentation("summands").data()
   );

   // shortcut: get/set XYs1d
   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs1d())> &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   // shortcut: get/set add
   object.def_property(
      "add",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.add();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.add())> &value)
      {
         self.add() = value;
      },
      cppCLASS::component_t::documentation("add").data()
   );

   // shortcut: get/set branching1d
   object.def_property(
      "branching1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.branching1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.branching1d())> &value)
      {
         self.branching1d() = value;
      },
      cppCLASS::component_t::documentation("branching1d").data()
   );

   // shortcut: get/set branching3d
   object.def_property(
      "branching3d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.branching3d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.branching3d())> &value)
      {
         self.branching3d() = value;
      },
      cppCLASS::component_t::documentation("branching3d").data()
   );

   // shortcut: get/set constant1d
   object.def_property(
      "constant1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.constant1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.constant1d())> &value)
      {
         self.constant1d() = value;
      },
      cppCLASS::component_t::documentation("constant1d").data()
   );

   // shortcut: get/set polynomial1d
   object.def_property(
      "polynomial1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.polynomial1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.polynomial1d())> &value)
      {
         self.polynomial1d() = value;
      },
      cppCLASS::component_t::documentation("polynomial1d").data()
   );

   // shortcut: get/set reference
   object.def_property(
      "reference",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.reference();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.reference())> &value)
      {
         self.reference() = value;
      },
      cppCLASS::component_t::documentation("reference").data()
   );

   // shortcut: get/set regions1d
   object.def_property(
      "regions1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.regions1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.regions1d())> &value)
      {
         self.regions1d() = value;
      },
      cppCLASS::component_t::documentation("regions1d").data()
   );

   // shortcut: get/set unspecified
   object.def_property(
      "unspecified",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.unspecified();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.unspecified())> &value)
      {
         self.unspecified() = value;
      },
      cppCLASS::component_t::documentation("unspecified").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
