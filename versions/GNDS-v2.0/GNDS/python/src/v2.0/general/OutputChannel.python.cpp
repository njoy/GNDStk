
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/OutputChannel.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::OutputChannel
void wrapOutputChannel(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::OutputChannel;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "OutputChannel",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::string &,
         const std::optional<std::string> &,
         const general::Q &,
         const std::optional<general::Products> &,
         const std::optional<top::FissionFragmentData> &
      >(),
      py::arg("genre"),
      py::arg("process") = std::nullopt,
      py::arg("q"),
      py::arg("products") = std::nullopt,
      py::arg("fission_fragment_data") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set genre
   object.def_property(
      "genre",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.genre();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.genre() = value;
      },
      cppCLASS::component_t::documentation("genre").data()
   );

   // get/set process
   object.def_property(
      "process",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.process();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.process() = value;
      },
      cppCLASS::component_t::documentation("process").data()
   );

   // get/set Q
   object.def_property(
      "q",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Q();
      },
      [](cppCLASS &self, const general::Q &value)
      {
         self.Q() = value;
      },
      cppCLASS::component_t::documentation("q").data()
   );

   // get/set products
   object.def_property(
      "products",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.products();
      },
      [](cppCLASS &self, const std::optional<general::Products> &value)
      {
         self.products() = value;
      },
      cppCLASS::component_t::documentation("products").data()
   );

   // get/set fissionFragmentData
   object.def_property(
      "fission_fragment_data",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.fissionFragmentData();
      },
      [](cppCLASS &self, const std::optional<top::FissionFragmentData> &value)
      {
         self.fissionFragmentData() = value;
      },
      cppCLASS::component_t::documentation("fission_fragment_data").data()
   );

   // shortcut: get/set Double
   object.def_property(
      "double",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.Double();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.Double())> &value)
      {
         self.Double() = value;
      },
      cppCLASS::component_t::documentation("double").data()
   );

   // shortcut: get/set constant1d
   object.def_property(
      "constant1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.constant1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.constant1d())> &value)
      {
         self.constant1d() = value;
      },
      cppCLASS::component_t::documentation("constant1d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
