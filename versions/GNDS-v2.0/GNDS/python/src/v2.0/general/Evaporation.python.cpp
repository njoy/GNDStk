
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Evaporation.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::Evaporation
void wrapEvaporation(py::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Evaporation;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Evaporation",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const general::U &,
         const general::Theta &
      >(),
      py::arg("u"),
      py::arg("theta"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set U
   object.def_property(
      "u",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.U();
      },
      [](cppCLASS &self, const general::U &value)
      {
         self.U() = value;
      },
      cppCLASS::component_t::documentation("u").data()
   );

   // get/set theta
   object.def_property(
      "theta",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.theta();
      },
      [](cppCLASS &self, const general::Theta &value)
      {
         self.theta() = value;
      },
      cppCLASS::component_t::documentation("theta").data()
   );

   // shortcut: get/set XYs1d
   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.XYs1d())> &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   // shortcut: get/set regions1d
   object.def_property(
      "regions1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.regions1d();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.regions1d())> &value)
      {
         self.regions1d() = value;
      },
      cppCLASS::component_t::documentation("regions1d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
