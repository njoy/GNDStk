
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/Channel.hpp"
#include "definitions.hpp"

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::Channel
void wrapChannel(pybind11::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::Channel;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "Channel",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::string &,
         const std::string &,
         const int &,
         const int &,
         const int &,
         const std::optional<general::ScatteringRadius> &,
         const std::optional<general::HardSphereRadius> &
      >(),
      pybind11::arg("label"),
      pybind11::arg("resonance_reaction"),
      pybind11::arg("l"),
      pybind11::arg("channel_spin"),
      pybind11::arg("column_index"),
      pybind11::arg("scattering_radius") = std::nullopt,
      pybind11::arg("hard_sphere_radius") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set resonanceReaction
   object.def_property(
      "resonance_reaction",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.resonanceReaction();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.resonanceReaction() = value;
      },
      cppCLASS::component_t::documentation("resonance_reaction").data()
   );

   // get/set L
   object.def_property(
      "l",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.L();
      },
      [](cppCLASS &self, const int &value)
      {
         self.L() = value;
      },
      cppCLASS::component_t::documentation("l").data()
   );

   // get/set channelSpin
   object.def_property(
      "channel_spin",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.channelSpin();
      },
      [](cppCLASS &self, const int &value)
      {
         self.channelSpin() = value;
      },
      cppCLASS::component_t::documentation("channel_spin").data()
   );

   // get/set columnIndex
   object.def_property(
      "column_index",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.columnIndex();
      },
      [](cppCLASS &self, const int &value)
      {
         self.columnIndex() = value;
      },
      cppCLASS::component_t::documentation("column_index").data()
   );

   // get/set scatteringRadius
   object.def_property(
      "scattering_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.scatteringRadius();
      },
      [](cppCLASS &self, const std::optional<general::ScatteringRadius> &value)
      {
         self.scatteringRadius() = value;
      },
      cppCLASS::component_t::documentation("scattering_radius").data()
   );

   // get/set hardSphereRadius
   object.def_property(
      "hard_sphere_radius",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.hardSphereRadius();
      },
      [](cppCLASS &self, const std::optional<general::HardSphereRadius> &value)
      {
         self.hardSphereRadius() = value;
      },
      cppCLASS::component_t::documentation("hard_sphere_radius").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
