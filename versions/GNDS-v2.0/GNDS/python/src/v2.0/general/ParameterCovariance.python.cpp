
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "GNDS/v2.0/general/ParameterCovariance.hpp"
#include "definitions.hpp"

namespace python_GNDS {
namespace python_v2_0 {
namespace python_general {

// wrapper for general::ParameterCovariance
void wrapParameterCovariance(pybind11::module &module)
{
   using namespace GNDS;
   using namespace GNDS::v2_0;

   // type aliases
   using cppCLASS = general::ParameterCovariance;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "ParameterCovariance",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::string &,
         const general::RowData &,
         const general::ParameterCovarianceMatrix &
      >(),
      pybind11::arg("label"),
      pybind11::arg("row_data"),
      pybind11::arg("parameter_covariance_matrix"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set rowData
   object.def_property(
      "row_data",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.rowData();
      },
      [](cppCLASS &self, const general::RowData &value)
      {
         self.rowData() = value;
      },
      cppCLASS::component_t::documentation("row_data").data()
   );

   // get/set parameterCovarianceMatrix
   object.def_property(
      "parameter_covariance_matrix",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.parameterCovarianceMatrix();
      },
      [](cppCLASS &self, const general::ParameterCovarianceMatrix &value)
      {
         self.parameterCovarianceMatrix() = value;
      },
      cppCLASS::component_t::documentation("parameter_covariance_matrix").data()
   );

   // shortcut: get/set array
   object.def_property(
      "array",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.array();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.array())> &value)
      {
         self.array() = value;
      },
      cppCLASS::component_t::documentation("array").data()
   );

   // shortcut: get/set lengths
   object.def_property(
      "lengths",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.lengths();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.lengths())> &value)
      {
         self.lengths() = value;
      },
      cppCLASS::component_t::documentation("lengths").data()
   );

   // shortcut: get/set parameterLink
   object.def_property(
      "parameter_link",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.parameterLink();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.parameterLink())> &value)
      {
         self.parameterLink() = value;
      },
      cppCLASS::component_t::documentation("parameter_link").data()
   );

   // shortcut: get/set parameters
   object.def_property(
      "parameters",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.parameters();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.parameters())> &value)
      {
         self.parameters() = value;
      },
      cppCLASS::component_t::documentation("parameters").data()
   );

   // shortcut: get/set slices
   object.def_property(
      "slices",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.slices();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.slices())> &value)
      {
         self.slices() = value;
      },
      cppCLASS::component_t::documentation("slices").data()
   );

   // shortcut: get/set starts
   object.def_property(
      "starts",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.starts();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.starts())> &value)
      {
         self.starts() = value;
      },
      cppCLASS::component_t::documentation("starts").data()
   );

   // shortcut: get/set values
   object.def_property(
      "values",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.values();
      },
      [](cppCLASS &self, const std::decay_t<decltype(self.values())> &value)
      {
         self.values() = value;
      },
      cppCLASS::component_t::documentation("values").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_general
} // namespace python_v2_0
} // namespace python_GNDS
