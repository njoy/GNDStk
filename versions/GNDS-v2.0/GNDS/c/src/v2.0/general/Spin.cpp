
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/Spin.hpp"
#include "Spin.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = SpinClass;
using CPP = multigroup::Spin;

static const std::string CLASSNAME = "Spin";

namespace extract {
   static auto fraction = [](auto &obj) { return &obj.fraction; };
}

using CPPFraction = general::Fraction;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstSpin
SpinDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Spin
SpinDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstSpin
SpinCreateConst(
   ConstHandle2ConstFraction fraction
) {
   ConstHandle2Spin handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPFraction>(fraction)
   );
   return handle;
}

// Create, general
Handle2Spin
SpinCreate(
   ConstHandle2ConstFraction fraction
) {
   ConstHandle2Spin handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPFraction>(fraction)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
SpinAssign(ConstHandle2Spin self, ConstHandle2ConstSpin from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
SpinDelete(ConstHandle2ConstSpin self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
SpinRead(ConstHandle2Spin self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
SpinWrite(ConstHandle2ConstSpin self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
SpinPrint(ConstHandle2ConstSpin self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
SpinPrintXML(ConstHandle2ConstSpin self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
SpinPrintJSON(ConstHandle2ConstSpin self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: fraction
// -----------------------------------------------------------------------------

// Has
int
SpinFractionHas(ConstHandle2ConstSpin self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FractionHas", self, extract::fraction);
}

// Get, const
Handle2ConstFraction
SpinFractionGetConst(ConstHandle2ConstSpin self)
{
   return detail::getField<CPP,Handle2ConstFraction>
      (CLASSNAME, CLASSNAME+"FractionGetConst", self, extract::fraction);
}

// Get
Handle2Fraction
SpinFractionGet(ConstHandle2Spin self)
{
   return detail::getField<CPP,Handle2Fraction>
      (CLASSNAME, CLASSNAME+"FractionGet", self, extract::fraction);
}

// Set
void
SpinFractionSet(ConstHandle2Spin self, ConstHandle2ConstFraction fraction)
{
   detail::setField<CPP,CPPFraction>
      (CLASSNAME, CLASSNAME+"FractionSet", self, extract::fraction, fraction);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Spin/src/custom.cpp"
