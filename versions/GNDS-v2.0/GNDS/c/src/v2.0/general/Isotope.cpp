
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/Isotope.hpp"
#include "Isotope.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = IsotopeClass;
using CPP = multigroup::Isotope;

static const std::string CLASSNAME = "Isotope";

namespace extract {
   static auto symbol = [](auto &obj) { return &obj.symbol; };
   static auto A = [](auto &obj) { return &obj.A; };
   static auto nuclides = [](auto &obj) { return &obj.nuclides; };
}

using CPPNuclides = general::Nuclides;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstIsotope
IsotopeDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Isotope
IsotopeDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstIsotope
IsotopeCreateConst(
   const char *const symbol,
   const int A,
   ConstHandle2ConstNuclides nuclides
) {
   ConstHandle2Isotope handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      symbol,
      A,
      detail::tocpp<CPPNuclides>(nuclides)
   );
   return handle;
}

// Create, general
Handle2Isotope
IsotopeCreate(
   const char *const symbol,
   const int A,
   ConstHandle2ConstNuclides nuclides
) {
   ConstHandle2Isotope handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      symbol,
      A,
      detail::tocpp<CPPNuclides>(nuclides)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
IsotopeAssign(ConstHandle2Isotope self, ConstHandle2ConstIsotope from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
IsotopeDelete(ConstHandle2ConstIsotope self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
IsotopeRead(ConstHandle2Isotope self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
IsotopeWrite(ConstHandle2ConstIsotope self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
IsotopePrint(ConstHandle2ConstIsotope self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
IsotopePrintXML(ConstHandle2ConstIsotope self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
IsotopePrintJSON(ConstHandle2ConstIsotope self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: symbol
// -----------------------------------------------------------------------------

// Has
int
IsotopeSymbolHas(ConstHandle2ConstIsotope self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"SymbolHas", self, extract::symbol);
}

// Get
// Returns by value
const char *
IsotopeSymbolGet(ConstHandle2ConstIsotope self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"SymbolGet", self, extract::symbol);
}

// Set
void
IsotopeSymbolSet(ConstHandle2Isotope self, const char *const symbol)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"SymbolSet", self, extract::symbol, symbol);
}


// -----------------------------------------------------------------------------
// Metadatum: A
// -----------------------------------------------------------------------------

// Has
int
IsotopeAHas(ConstHandle2ConstIsotope self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AHas", self, extract::A);
}

// Get
// Returns by value
int
IsotopeAGet(ConstHandle2ConstIsotope self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"AGet", self, extract::A);
}

// Set
void
IsotopeASet(ConstHandle2Isotope self, const int A)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ASet", self, extract::A, A);
}


// -----------------------------------------------------------------------------
// Child: nuclides
// -----------------------------------------------------------------------------

// Has
int
IsotopeNuclidesHas(ConstHandle2ConstIsotope self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NuclidesHas", self, extract::nuclides);
}

// Get, const
Handle2ConstNuclides
IsotopeNuclidesGetConst(ConstHandle2ConstIsotope self)
{
   return detail::getField<CPP,Handle2ConstNuclides>
      (CLASSNAME, CLASSNAME+"NuclidesGetConst", self, extract::nuclides);
}

// Get
Handle2Nuclides
IsotopeNuclidesGet(ConstHandle2Isotope self)
{
   return detail::getField<CPP,Handle2Nuclides>
      (CLASSNAME, CLASSNAME+"NuclidesGet", self, extract::nuclides);
}

// Set
void
IsotopeNuclidesSet(ConstHandle2Isotope self, ConstHandle2ConstNuclides nuclides)
{
   detail::setField<CPP,CPPNuclides>
      (CLASSNAME, CLASSNAME+"NuclidesSet", self, extract::nuclides, nuclides);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Isotope/src/custom.cpp"
