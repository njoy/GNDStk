
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/ProductYield.hpp"
#include "ProductYield.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = ProductYieldClass;
using CPP = multigroup::ProductYield;

static const std::string CLASSNAME = "ProductYield";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto nuclides = [](auto &obj) { return &obj.nuclides; };
   static auto elapsedTimes = [](auto &obj) { return &obj.elapsedTimes; };
}

using CPPNuclides = reduced::Nuclides;
using CPPElapsedTimes = general::ElapsedTimes;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstProductYield
ProductYieldDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ProductYield
ProductYieldDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstProductYield
ProductYieldCreateConst(
   const char *const label,
   ConstHandle2ConstNuclides nuclides,
   ConstHandle2ConstElapsedTimes elapsedTimes
) {
   ConstHandle2ProductYield handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      detail::tocpp<CPPNuclides>(nuclides),
      detail::tocpp<CPPElapsedTimes>(elapsedTimes)
   );
   return handle;
}

// Create, general
Handle2ProductYield
ProductYieldCreate(
   const char *const label,
   ConstHandle2ConstNuclides nuclides,
   ConstHandle2ConstElapsedTimes elapsedTimes
) {
   ConstHandle2ProductYield handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      detail::tocpp<CPPNuclides>(nuclides),
      detail::tocpp<CPPElapsedTimes>(elapsedTimes)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ProductYieldAssign(ConstHandle2ProductYield self, ConstHandle2ConstProductYield from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ProductYieldDelete(ConstHandle2ConstProductYield self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ProductYieldRead(ConstHandle2ProductYield self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ProductYieldWrite(ConstHandle2ConstProductYield self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ProductYieldPrint(ConstHandle2ConstProductYield self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ProductYieldPrintXML(ConstHandle2ConstProductYield self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ProductYieldPrintJSON(ConstHandle2ConstProductYield self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
ProductYieldLabelHas(ConstHandle2ConstProductYield self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
ProductYieldLabelGet(ConstHandle2ConstProductYield self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
ProductYieldLabelSet(ConstHandle2ProductYield self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Child: nuclides
// -----------------------------------------------------------------------------

// Has
int
ProductYieldNuclidesHas(ConstHandle2ConstProductYield self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"NuclidesHas", self, extract::nuclides);
}

// Get, const
Handle2ConstNuclides
ProductYieldNuclidesGetConst(ConstHandle2ConstProductYield self)
{
   return detail::getField<CPP,Handle2ConstNuclides>
      (CLASSNAME, CLASSNAME+"NuclidesGetConst", self, extract::nuclides);
}

// Get
Handle2Nuclides
ProductYieldNuclidesGet(ConstHandle2ProductYield self)
{
   return detail::getField<CPP,Handle2Nuclides>
      (CLASSNAME, CLASSNAME+"NuclidesGet", self, extract::nuclides);
}

// Set
void
ProductYieldNuclidesSet(ConstHandle2ProductYield self, ConstHandle2ConstNuclides nuclides)
{
   detail::setField<CPP,CPPNuclides>
      (CLASSNAME, CLASSNAME+"NuclidesSet", self, extract::nuclides, nuclides);
}


// -----------------------------------------------------------------------------
// Child: elapsedTimes
// -----------------------------------------------------------------------------

// Has
int
ProductYieldElapsedTimesHas(ConstHandle2ConstProductYield self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ElapsedTimesHas", self, extract::elapsedTimes);
}

// Get, const
Handle2ConstElapsedTimes
ProductYieldElapsedTimesGetConst(ConstHandle2ConstProductYield self)
{
   return detail::getField<CPP,Handle2ConstElapsedTimes>
      (CLASSNAME, CLASSNAME+"ElapsedTimesGetConst", self, extract::elapsedTimes);
}

// Get
Handle2ElapsedTimes
ProductYieldElapsedTimesGet(ConstHandle2ProductYield self)
{
   return detail::getField<CPP,Handle2ElapsedTimes>
      (CLASSNAME, CLASSNAME+"ElapsedTimesGet", self, extract::elapsedTimes);
}

// Set
void
ProductYieldElapsedTimesSet(ConstHandle2ProductYield self, ConstHandle2ConstElapsedTimes elapsedTimes)
{
   detail::setField<CPP,CPPElapsedTimes>
      (CLASSNAME, CLASSNAME+"ElapsedTimesSet", self, extract::elapsedTimes, elapsedTimes);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ProductYield/src/custom.cpp"
