
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/Parameters.hpp"
#include "Parameters.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = ParametersClass;
using CPP = multigroup::Parameters;

static const std::string CLASSNAME = "Parameters";

namespace extract {
   static auto parameterLink = [](auto &obj) { return &obj.parameterLink; };
}

using CPPParameterLink = general::ParameterLink;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstParameters
ParametersDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Parameters
ParametersDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstParameters
ParametersCreateConst(
   ConstHandle2ParameterLink *const parameterLink, const size_t parameterLinkSize
) {
   ConstHandle2Parameters handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPParameterLink>{}
   );
   for (size_t ParameterLinkN = 0; ParameterLinkN < parameterLinkSize; ++ParameterLinkN)
      ParametersParameterLinkAdd(handle, parameterLink[ParameterLinkN]);
   return handle;
}

// Create, general
Handle2Parameters
ParametersCreate(
   ConstHandle2ParameterLink *const parameterLink, const size_t parameterLinkSize
) {
   ConstHandle2Parameters handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPParameterLink>{}
   );
   for (size_t ParameterLinkN = 0; ParameterLinkN < parameterLinkSize; ++ParameterLinkN)
      ParametersParameterLinkAdd(handle, parameterLink[ParameterLinkN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ParametersAssign(ConstHandle2Parameters self, ConstHandle2ConstParameters from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ParametersDelete(ConstHandle2ConstParameters self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ParametersRead(ConstHandle2Parameters self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ParametersWrite(ConstHandle2ConstParameters self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ParametersPrint(ConstHandle2ConstParameters self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ParametersPrintXML(ConstHandle2ConstParameters self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ParametersPrintJSON(ConstHandle2ConstParameters self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: parameterLink
// -----------------------------------------------------------------------------

// Has
int
ParametersParameterLinkHas(ConstHandle2ConstParameters self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkHas", self, extract::parameterLink);
}

// Clear
void
ParametersParameterLinkClear(ConstHandle2Parameters self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkClear", self, extract::parameterLink);
}

// Size
size_t
ParametersParameterLinkSize(ConstHandle2ConstParameters self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkSize", self, extract::parameterLink);
}

// Add
void
ParametersParameterLinkAdd(ConstHandle2Parameters self, ConstHandle2ConstParameterLink parameterLink)
{
   detail::addToContainer<CPP,CPPParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkAdd", self, extract::parameterLink, parameterLink);
}

// Get, by index \in [0,size), const
Handle2ConstParameterLink
ParametersParameterLinkGetConst(ConstHandle2ConstParameters self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetConst", self, extract::parameterLink, index_);
}

// Get, by index \in [0,size)
Handle2ParameterLink
ParametersParameterLinkGet(ConstHandle2Parameters self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGet", self, extract::parameterLink, index_);
}

// Set, by index \in [0,size)
void
ParametersParameterLinkSet(
   ConstHandle2Parameters self,
   const size_t index_,
   ConstHandle2ConstParameterLink parameterLink
) {
   detail::setByIndex<CPP,CPPParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkSet", self, extract::parameterLink, index_, parameterLink);
}

// Has, by label
int
ParametersParameterLinkHasByLabel(
   ConstHandle2ConstParameters self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkHasByLabel",
       self, extract::parameterLink, meta::label, label);
}

// Get, by label, const
Handle2ConstParameterLink
ParametersParameterLinkGetByLabelConst(
   ConstHandle2ConstParameters self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByLabelConst",
       self, extract::parameterLink, meta::label, label);
}

// Get, by label
Handle2ParameterLink
ParametersParameterLinkGetByLabel(
   ConstHandle2Parameters self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByLabel",
       self, extract::parameterLink, meta::label, label);
}

// Set, by label
void
ParametersParameterLinkSetByLabel(
   ConstHandle2Parameters self,
   const char *const label,
   ConstHandle2ConstParameterLink parameterLink
) {
   detail::setByMetadatum<CPP,CPPParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkSetByLabel",
       self, extract::parameterLink, meta::label, label, parameterLink);
}

// Has, by href
int
ParametersParameterLinkHasByHref(
   ConstHandle2ConstParameters self,
   const char *const href
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkHasByHref",
       self, extract::parameterLink, meta::href, href);
}

// Get, by href, const
Handle2ConstParameterLink
ParametersParameterLinkGetByHrefConst(
   ConstHandle2ConstParameters self,
   const char *const href
) {
   return detail::getByMetadatum<CPP,Handle2ConstParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByHrefConst",
       self, extract::parameterLink, meta::href, href);
}

// Get, by href
Handle2ParameterLink
ParametersParameterLinkGetByHref(
   ConstHandle2Parameters self,
   const char *const href
) {
   return detail::getByMetadatum<CPP,Handle2ParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByHref",
       self, extract::parameterLink, meta::href, href);
}

// Set, by href
void
ParametersParameterLinkSetByHref(
   ConstHandle2Parameters self,
   const char *const href,
   ConstHandle2ConstParameterLink parameterLink
) {
   detail::setByMetadatum<CPP,CPPParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkSetByHref",
       self, extract::parameterLink, meta::href, href, parameterLink);
}

// Has, by nParameters
int
ParametersParameterLinkHasByNParameters(
   ConstHandle2ConstParameters self,
   const int nParameters
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkHasByNParameters",
       self, extract::parameterLink, meta::nParameters, nParameters);
}

// Get, by nParameters, const
Handle2ConstParameterLink
ParametersParameterLinkGetByNParametersConst(
   ConstHandle2ConstParameters self,
   const int nParameters
) {
   return detail::getByMetadatum<CPP,Handle2ConstParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByNParametersConst",
       self, extract::parameterLink, meta::nParameters, nParameters);
}

// Get, by nParameters
Handle2ParameterLink
ParametersParameterLinkGetByNParameters(
   ConstHandle2Parameters self,
   const int nParameters
) {
   return detail::getByMetadatum<CPP,Handle2ParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByNParameters",
       self, extract::parameterLink, meta::nParameters, nParameters);
}

// Set, by nParameters
void
ParametersParameterLinkSetByNParameters(
   ConstHandle2Parameters self,
   const int nParameters,
   ConstHandle2ConstParameterLink parameterLink
) {
   detail::setByMetadatum<CPP,CPPParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkSetByNParameters",
       self, extract::parameterLink, meta::nParameters, nParameters, parameterLink);
}

// Has, by matrixStartIndex
int
ParametersParameterLinkHasByMatrixStartIndex(
   ConstHandle2ConstParameters self,
   const int matrixStartIndex
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ParameterLinkHasByMatrixStartIndex",
       self, extract::parameterLink, meta::matrixStartIndex, matrixStartIndex);
}

// Get, by matrixStartIndex, const
Handle2ConstParameterLink
ParametersParameterLinkGetByMatrixStartIndexConst(
   ConstHandle2ConstParameters self,
   const int matrixStartIndex
) {
   return detail::getByMetadatum<CPP,Handle2ConstParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByMatrixStartIndexConst",
       self, extract::parameterLink, meta::matrixStartIndex, matrixStartIndex);
}

// Get, by matrixStartIndex
Handle2ParameterLink
ParametersParameterLinkGetByMatrixStartIndex(
   ConstHandle2Parameters self,
   const int matrixStartIndex
) {
   return detail::getByMetadatum<CPP,Handle2ParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkGetByMatrixStartIndex",
       self, extract::parameterLink, meta::matrixStartIndex, matrixStartIndex);
}

// Set, by matrixStartIndex
void
ParametersParameterLinkSetByMatrixStartIndex(
   ConstHandle2Parameters self,
   const int matrixStartIndex,
   ConstHandle2ConstParameterLink parameterLink
) {
   detail::setByMetadatum<CPP,CPPParameterLink>
      (CLASSNAME, CLASSNAME+"ParameterLinkSetByMatrixStartIndex",
       self, extract::parameterLink, meta::matrixStartIndex, matrixStartIndex, parameterLink);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Parameters/src/custom.cpp"
