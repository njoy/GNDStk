
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// CoulombPlusNuclearElastic is the basic handle type in this file. Example:
//    // Create a default CoulombPlusNuclearElastic object:
//    CoulombPlusNuclearElastic handle = CoulombPlusNuclearElasticDefault();
// Functions involving CoulombPlusNuclearElastic are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_COULOMBPLUSNUCLEARELASTIC
#define C_INTERFACE_GNDS_V2_0_GENERAL_COULOMBPLUSNUCLEARELASTIC

#include "GNDStk.h"
#include "v2.0/general/RutherfordScattering.h"
#include "v2.0/general/NuclearAmplitudeExpansion.h"
#include "v2.0/general/NuclearPlusInterference.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct CoulombPlusNuclearElasticClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ CoulombPlusNuclearElastic
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct CoulombPlusNuclearElasticClass *CoulombPlusNuclearElastic;

// --- Const-aware handles.
typedef const struct CoulombPlusNuclearElasticClass *const ConstHandle2ConstCoulombPlusNuclearElastic;
typedef       struct CoulombPlusNuclearElasticClass *const ConstHandle2CoulombPlusNuclearElastic;
typedef const struct CoulombPlusNuclearElasticClass *      Handle2ConstCoulombPlusNuclearElastic;
typedef       struct CoulombPlusNuclearElasticClass *      Handle2CoulombPlusNuclearElastic;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstCoulombPlusNuclearElastic
CoulombPlusNuclearElasticDefaultConst();

// +++ Create, default, non-const
extern_c Handle2CoulombPlusNuclearElastic
CoulombPlusNuclearElasticDefault();

// --- Create, general, const
extern_c Handle2ConstCoulombPlusNuclearElastic
CoulombPlusNuclearElasticCreateConst(
   const char *const label,
   const char *const href,
   const char *const pid,
   const char *const productFrame,
   const bool identicalParticles,
   ConstHandle2ConstRutherfordScattering RutherfordScattering,
   ConstHandle2ConstNuclearAmplitudeExpansion nuclearAmplitudeExpansion,
   ConstHandle2ConstNuclearPlusInterference nuclearPlusInterference
);

// +++ Create, general, non-const
extern_c Handle2CoulombPlusNuclearElastic
CoulombPlusNuclearElasticCreate(
   const char *const label,
   const char *const href,
   const char *const pid,
   const char *const productFrame,
   const bool identicalParticles,
   ConstHandle2ConstRutherfordScattering RutherfordScattering,
   ConstHandle2ConstNuclearAmplitudeExpansion nuclearAmplitudeExpansion,
   ConstHandle2ConstNuclearPlusInterference nuclearPlusInterference
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
CoulombPlusNuclearElasticAssign(ConstHandle2CoulombPlusNuclearElastic self, ConstHandle2ConstCoulombPlusNuclearElastic from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
CoulombPlusNuclearElasticDelete(ConstHandle2ConstCoulombPlusNuclearElastic self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
CoulombPlusNuclearElasticRead(ConstHandle2CoulombPlusNuclearElastic self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
CoulombPlusNuclearElasticWrite(ConstHandle2ConstCoulombPlusNuclearElastic self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
CoulombPlusNuclearElasticPrint(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Print to standard output, as XML
extern_c int
CoulombPlusNuclearElasticPrintXML(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Print to standard output, as JSON
extern_c int
CoulombPlusNuclearElasticPrintJSON(ConstHandle2ConstCoulombPlusNuclearElastic self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticLabelHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get
// +++ Returns by value
extern_c const char *
CoulombPlusNuclearElasticLabelGet(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticLabelSet(ConstHandle2CoulombPlusNuclearElastic self, const char *const label);


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticHrefHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get
// +++ Returns by value
extern_c const char *
CoulombPlusNuclearElasticHrefGet(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticHrefSet(ConstHandle2CoulombPlusNuclearElastic self, const char *const href);


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticPidHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get
// +++ Returns by value
extern_c const char *
CoulombPlusNuclearElasticPidGet(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticPidSet(ConstHandle2CoulombPlusNuclearElastic self, const char *const pid);


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticProductFrameHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get
// +++ Returns by value
extern_c const char *
CoulombPlusNuclearElasticProductFrameGet(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticProductFrameSet(ConstHandle2CoulombPlusNuclearElastic self, const char *const productFrame);


// -----------------------------------------------------------------------------
// Metadatum: identicalParticles
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticIdenticalParticlesHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get
// +++ Returns by value
extern_c bool
CoulombPlusNuclearElasticIdenticalParticlesGet(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticIdenticalParticlesSet(ConstHandle2CoulombPlusNuclearElastic self, const bool identicalParticles);


// -----------------------------------------------------------------------------
// Child: RutherfordScattering
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticRutherfordScatteringHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// --- Get, const
extern_c Handle2ConstRutherfordScattering
CoulombPlusNuclearElasticRutherfordScatteringGetConst(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get, non-const
extern_c Handle2RutherfordScattering
CoulombPlusNuclearElasticRutherfordScatteringGet(ConstHandle2CoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticRutherfordScatteringSet(ConstHandle2CoulombPlusNuclearElastic self, ConstHandle2ConstRutherfordScattering RutherfordScattering);


// -----------------------------------------------------------------------------
// Child: nuclearAmplitudeExpansion
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticNuclearAmplitudeExpansionHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// --- Get, const
extern_c Handle2ConstNuclearAmplitudeExpansion
CoulombPlusNuclearElasticNuclearAmplitudeExpansionGetConst(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get, non-const
extern_c Handle2NuclearAmplitudeExpansion
CoulombPlusNuclearElasticNuclearAmplitudeExpansionGet(ConstHandle2CoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticNuclearAmplitudeExpansionSet(ConstHandle2CoulombPlusNuclearElastic self, ConstHandle2ConstNuclearAmplitudeExpansion nuclearAmplitudeExpansion);


// -----------------------------------------------------------------------------
// Child: nuclearPlusInterference
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
CoulombPlusNuclearElasticNuclearPlusInterferenceHas(ConstHandle2ConstCoulombPlusNuclearElastic self);

// --- Get, const
extern_c Handle2ConstNuclearPlusInterference
CoulombPlusNuclearElasticNuclearPlusInterferenceGetConst(ConstHandle2ConstCoulombPlusNuclearElastic self);

// +++ Get, non-const
extern_c Handle2NuclearPlusInterference
CoulombPlusNuclearElasticNuclearPlusInterferenceGet(ConstHandle2CoulombPlusNuclearElastic self);

// +++ Set
extern_c void
CoulombPlusNuclearElasticNuclearPlusInterferenceSet(ConstHandle2CoulombPlusNuclearElastic self, ConstHandle2ConstNuclearPlusInterference nuclearPlusInterference);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/CoulombPlusNuclearElastic/src/custom.h"

#undef extern_c
#endif
