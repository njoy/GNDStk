
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/ResonanceReactions.hpp"
#include "ResonanceReactions.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = ResonanceReactionsClass;
using CPP = multigroup::ResonanceReactions;

static const std::string CLASSNAME = "ResonanceReactions";

namespace extract {
   static auto resonanceReaction = [](auto &obj) { return &obj.resonanceReaction; };
}

using CPPResonanceReaction = general::ResonanceReaction;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstResonanceReactions
ResonanceReactionsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default, non-const
Handle2ResonanceReactions
ResonanceReactionsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstResonanceReactions
ResonanceReactionsCreateConst(
   ConstHandle2ResonanceReaction *const resonanceReaction, const size_t resonanceReactionSize
) {
   ConstHandle2ResonanceReactions handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPResonanceReaction>{}
   );
   for (size_t ResonanceReactionN = 0; ResonanceReactionN < resonanceReactionSize; ++ResonanceReactionN)
      ResonanceReactionsResonanceReactionAdd(handle, resonanceReaction[ResonanceReactionN]);
   return handle;
}

// Create, general, non-const
Handle2ResonanceReactions
ResonanceReactionsCreate(
   ConstHandle2ResonanceReaction *const resonanceReaction, const size_t resonanceReactionSize
) {
   ConstHandle2ResonanceReactions handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPResonanceReaction>{}
   );
   for (size_t ResonanceReactionN = 0; ResonanceReactionN < resonanceReactionSize; ++ResonanceReactionN)
      ResonanceReactionsResonanceReactionAdd(handle, resonanceReaction[ResonanceReactionN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ResonanceReactionsAssign(ConstHandle2ResonanceReactions self, ConstHandle2ConstResonanceReactions from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ResonanceReactionsDelete(ConstHandle2ConstResonanceReactions self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ResonanceReactionsRead(ConstHandle2ResonanceReactions self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ResonanceReactionsWrite(ConstHandle2ConstResonanceReactions self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ResonanceReactionsPrint(ConstHandle2ConstResonanceReactions self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ResonanceReactionsPrintXML(ConstHandle2ConstResonanceReactions self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ResonanceReactionsPrintJSON(ConstHandle2ConstResonanceReactions self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: resonanceReaction
// -----------------------------------------------------------------------------

// Has
int
ResonanceReactionsResonanceReactionHas(ConstHandle2ConstResonanceReactions self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceReactionHas", self, extract::resonanceReaction);
}

// Clear
void
ResonanceReactionsResonanceReactionClear(ConstHandle2ResonanceReactions self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceReactionClear", self, extract::resonanceReaction);
}

// Size
size_t
ResonanceReactionsResonanceReactionSize(ConstHandle2ConstResonanceReactions self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceReactionSize", self, extract::resonanceReaction);
}

// Add
void
ResonanceReactionsResonanceReactionAdd(ConstHandle2ResonanceReactions self, ConstHandle2ConstResonanceReaction resonanceReaction)
{
   detail::addToContainer<CPP,CPPResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionAdd", self, extract::resonanceReaction, resonanceReaction);
}

// Get, by index \in [0,size), const
Handle2ConstResonanceReaction
ResonanceReactionsResonanceReactionGetConst(ConstHandle2ConstResonanceReactions self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetConst", self, extract::resonanceReaction, index_);
}

// Get, by index \in [0,size), non-const
Handle2ResonanceReaction
ResonanceReactionsResonanceReactionGet(ConstHandle2ResonanceReactions self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGet", self, extract::resonanceReaction, index_);
}

// Set, by index \in [0,size)
void
ResonanceReactionsResonanceReactionSet(
   ConstHandle2ResonanceReactions self,
   const size_t index_,
   ConstHandle2ConstResonanceReaction resonanceReaction
) {
   detail::setByIndex<CPP,CPPResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionSet", self, extract::resonanceReaction, index_, resonanceReaction);
}

// ------------------------
// Re: metadatum label
// ------------------------

// Has, by label
int
ResonanceReactionsResonanceReactionHasByLabel(
   ConstHandle2ConstResonanceReactions self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceReactionHasByLabel",
       self, extract::resonanceReaction, meta::label, label);
}

// Get, by label, const
Handle2ConstResonanceReaction
ResonanceReactionsResonanceReactionGetByLabelConst(
   ConstHandle2ConstResonanceReactions self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetByLabelConst",
       self, extract::resonanceReaction, meta::label, label);
}

// Get, by label, non-const
Handle2ResonanceReaction
ResonanceReactionsResonanceReactionGetByLabel(
   ConstHandle2ResonanceReactions self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetByLabel",
       self, extract::resonanceReaction, meta::label, label);
}

// Set, by label
void
ResonanceReactionsResonanceReactionSetByLabel(
   ConstHandle2ResonanceReactions self,
   const char *const label,
   ConstHandle2ConstResonanceReaction resonanceReaction
) {
   detail::setByMetadatum<CPP,CPPResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionSetByLabel",
       self, extract::resonanceReaction, meta::label, label, resonanceReaction);
}

// ------------------------
// Re: metadatum ejectile
// ------------------------

// Has, by ejectile
int
ResonanceReactionsResonanceReactionHasByEjectile(
   ConstHandle2ConstResonanceReactions self,
   const char *const ejectile
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceReactionHasByEjectile",
       self, extract::resonanceReaction, meta::ejectile, ejectile);
}

// Get, by ejectile, const
Handle2ConstResonanceReaction
ResonanceReactionsResonanceReactionGetByEjectileConst(
   ConstHandle2ConstResonanceReactions self,
   const char *const ejectile
) {
   return detail::getByMetadatum<CPP,Handle2ConstResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetByEjectileConst",
       self, extract::resonanceReaction, meta::ejectile, ejectile);
}

// Get, by ejectile, non-const
Handle2ResonanceReaction
ResonanceReactionsResonanceReactionGetByEjectile(
   ConstHandle2ResonanceReactions self,
   const char *const ejectile
) {
   return detail::getByMetadatum<CPP,Handle2ResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetByEjectile",
       self, extract::resonanceReaction, meta::ejectile, ejectile);
}

// Set, by ejectile
void
ResonanceReactionsResonanceReactionSetByEjectile(
   ConstHandle2ResonanceReactions self,
   const char *const ejectile,
   ConstHandle2ConstResonanceReaction resonanceReaction
) {
   detail::setByMetadatum<CPP,CPPResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionSetByEjectile",
       self, extract::resonanceReaction, meta::ejectile, ejectile, resonanceReaction);
}

// ------------------------
// Re: metadatum eliminated
// ------------------------

// Has, by eliminated
int
ResonanceReactionsResonanceReactionHasByEliminated(
   ConstHandle2ConstResonanceReactions self,
   const bool eliminated
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ResonanceReactionHasByEliminated",
       self, extract::resonanceReaction, meta::eliminated, eliminated);
}

// Get, by eliminated, const
Handle2ConstResonanceReaction
ResonanceReactionsResonanceReactionGetByEliminatedConst(
   ConstHandle2ConstResonanceReactions self,
   const bool eliminated
) {
   return detail::getByMetadatum<CPP,Handle2ConstResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetByEliminatedConst",
       self, extract::resonanceReaction, meta::eliminated, eliminated);
}

// Get, by eliminated, non-const
Handle2ResonanceReaction
ResonanceReactionsResonanceReactionGetByEliminated(
   ConstHandle2ResonanceReactions self,
   const bool eliminated
) {
   return detail::getByMetadatum<CPP,Handle2ResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionGetByEliminated",
       self, extract::resonanceReaction, meta::eliminated, eliminated);
}

// Set, by eliminated
void
ResonanceReactionsResonanceReactionSetByEliminated(
   ConstHandle2ResonanceReactions self,
   const bool eliminated,
   ConstHandle2ConstResonanceReaction resonanceReaction
) {
   detail::setByMetadatum<CPP,CPPResonanceReaction>
      (CLASSNAME, CLASSNAME+"ResonanceReactionSetByEliminated",
       self, extract::resonanceReaction, meta::eliminated, eliminated, resonanceReaction);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ResonanceReactions/src/custom.cpp"
