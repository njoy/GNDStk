
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Summand is the basic handle type in this file. Example:
//    // Create a default Summand object:
//    Summand handle = SummandDefault();
// Functions involving Summand are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_SUMMAND
#define C_INTERFACE_GNDS_V2_0_GENERAL_SUMMAND

#include "GNDStk.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct SummandClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Summand
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct SummandClass *Summand;

// --- Const-aware handles.
typedef const struct SummandClass *const ConstHandle2ConstSummand;
typedef       struct SummandClass *const ConstHandle2Summand;
typedef const struct SummandClass *      Handle2ConstSummand;
typedef       struct SummandClass *      Handle2Summand;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstSummand
SummandDefaultConst();

// +++ Create, default, non-const
extern_c Handle2Summand
SummandDefault();

// --- Create, general, const
extern_c Handle2ConstSummand
SummandCreateConst(
   const char *const ENDF_MFMT,
   const char *const coefficient,
   const char *const href
);

// +++ Create, general, non-const
extern_c Handle2Summand
SummandCreate(
   const char *const ENDF_MFMT,
   const char *const coefficient,
   const char *const href
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
SummandAssign(ConstHandle2Summand self, ConstHandle2ConstSummand from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
SummandDelete(ConstHandle2ConstSummand self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
SummandRead(ConstHandle2Summand self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
SummandWrite(ConstHandle2ConstSummand self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
SummandPrint(ConstHandle2ConstSummand self);

// +++ Print to standard output, as XML
extern_c int
SummandPrintXML(ConstHandle2ConstSummand self);

// +++ Print to standard output, as JSON
extern_c int
SummandPrintJSON(ConstHandle2ConstSummand self);


// -----------------------------------------------------------------------------
// Metadatum: ENDF_MFMT
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SummandENDFMFMTHas(ConstHandle2ConstSummand self);

// +++ Get
// +++ Returns by value
extern_c const char *
SummandENDFMFMTGet(ConstHandle2ConstSummand self);

// +++ Set
extern_c void
SummandENDFMFMTSet(ConstHandle2Summand self, const char *const ENDF_MFMT);


// -----------------------------------------------------------------------------
// Metadatum: coefficient
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SummandCoefficientHas(ConstHandle2ConstSummand self);

// +++ Get
// +++ Returns by value
extern_c const char *
SummandCoefficientGet(ConstHandle2ConstSummand self);

// +++ Set
extern_c void
SummandCoefficientSet(ConstHandle2Summand self, const char *const coefficient);


// -----------------------------------------------------------------------------
// Metadatum: href
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SummandHrefHas(ConstHandle2ConstSummand self);

// +++ Get
// +++ Returns by value
extern_c const char *
SummandHrefGet(ConstHandle2ConstSummand self);

// +++ Set
extern_c void
SummandHrefSet(ConstHandle2Summand self, const char *const href);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Summand/src/custom.h"

#undef extern_c
#endif
