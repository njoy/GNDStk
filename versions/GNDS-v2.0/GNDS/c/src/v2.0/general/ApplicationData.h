
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// ApplicationData is the basic handle type in this file. Example:
//    // Create a default ApplicationData object:
//    ApplicationData handle = ApplicationDataDefault();
// Functions involving ApplicationData are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_APPLICATIONDATA
#define C_INTERFACE_GNDS_V2_0_GENERAL_APPLICATIONDATA

#include "GNDStk.h"
#include "v2.0/general/Institution.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ApplicationDataClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ApplicationData
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ApplicationDataClass *ApplicationData;

// --- Const-aware handles.
typedef const struct ApplicationDataClass *const ConstHandle2ConstApplicationData;
typedef       struct ApplicationDataClass *const ConstHandle2ApplicationData;
typedef const struct ApplicationDataClass *      Handle2ConstApplicationData;
typedef       struct ApplicationDataClass *      Handle2ApplicationData;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstApplicationData
ApplicationDataDefaultConst();

// +++ Create, default
extern_c Handle2ApplicationData
ApplicationDataDefault();

// --- Create, general, const
extern_c Handle2ConstApplicationData
ApplicationDataCreateConst(
   ConstHandle2ConstInstitution institution
);

// +++ Create, general
extern_c Handle2ApplicationData
ApplicationDataCreate(
   ConstHandle2ConstInstitution institution
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ApplicationDataAssign(ConstHandle2ApplicationData self, ConstHandle2ConstApplicationData from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ApplicationDataDelete(ConstHandle2ConstApplicationData self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ApplicationDataRead(ConstHandle2ApplicationData self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ApplicationDataWrite(ConstHandle2ConstApplicationData self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ApplicationDataPrint(ConstHandle2ConstApplicationData self);

// +++ Print to standard output, as XML
extern_c int
ApplicationDataPrintXML(ConstHandle2ConstApplicationData self);

// +++ Print to standard output, as JSON
extern_c int
ApplicationDataPrintJSON(ConstHandle2ConstApplicationData self);


// -----------------------------------------------------------------------------
// Child: institution
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ApplicationDataInstitutionHas(ConstHandle2ConstApplicationData self);

// --- Get, const
extern_c Handle2ConstInstitution
ApplicationDataInstitutionGetConst(ConstHandle2ConstApplicationData self);

// +++ Get
extern_c Handle2Institution
ApplicationDataInstitutionGet(ConstHandle2ApplicationData self);

// +++ Set
extern_c void
ApplicationDataInstitutionSet(ConstHandle2ApplicationData self, ConstHandle2ConstInstitution institution);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ApplicationData/src/custom.h"

#undef extern_c
#endif
