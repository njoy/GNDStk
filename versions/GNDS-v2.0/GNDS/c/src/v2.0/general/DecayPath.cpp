
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/DecayPath.hpp"
#include "DecayPath.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = DecayPathClass;
using CPP = multigroup::DecayPath;

static const std::string CLASSNAME = "DecayPath";

namespace extract {
   static auto decay = [](auto &obj) { return &obj.decay; };
}

using CPPDecay = general::Decay;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDecayPath
DecayPathDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2DecayPath
DecayPathDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDecayPath
DecayPathCreateConst(
   ConstHandle2Decay *const decay, const size_t decaySize
) {
   ConstHandle2DecayPath handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPDecay>{}
   );
   for (size_t DecayN = 0; DecayN < decaySize; ++DecayN)
      DecayPathDecayAdd(handle, decay[DecayN]);
   return handle;
}

// Create, general
Handle2DecayPath
DecayPathCreate(
   ConstHandle2Decay *const decay, const size_t decaySize
) {
   ConstHandle2DecayPath handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPDecay>{}
   );
   for (size_t DecayN = 0; DecayN < decaySize; ++DecayN)
      DecayPathDecayAdd(handle, decay[DecayN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DecayPathAssign(ConstHandle2DecayPath self, ConstHandle2ConstDecayPath from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DecayPathDelete(ConstHandle2ConstDecayPath self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DecayPathRead(ConstHandle2DecayPath self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DecayPathWrite(ConstHandle2ConstDecayPath self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
DecayPathPrint(ConstHandle2ConstDecayPath self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
DecayPathPrintXML(ConstHandle2ConstDecayPath self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
DecayPathPrintJSON(ConstHandle2ConstDecayPath self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: decay
// -----------------------------------------------------------------------------

// Has
int
DecayPathDecayHas(ConstHandle2ConstDecayPath self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DecayHas", self, extract::decay);
}

// Clear
void
DecayPathDecayClear(ConstHandle2DecayPath self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"DecayClear", self, extract::decay);
}

// Size
size_t
DecayPathDecaySize(ConstHandle2ConstDecayPath self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"DecaySize", self, extract::decay);
}

// Add
void
DecayPathDecayAdd(ConstHandle2DecayPath self, ConstHandle2ConstDecay decay)
{
   detail::addToContainer<CPP,CPPDecay>
      (CLASSNAME, CLASSNAME+"DecayAdd", self, extract::decay, decay);
}

// Get, by index \in [0,size), const
Handle2ConstDecay
DecayPathDecayGetConst(ConstHandle2ConstDecayPath self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstDecay>
      (CLASSNAME, CLASSNAME+"DecayGetConst", self, extract::decay, index_);
}

// Get, by index \in [0,size)
Handle2Decay
DecayPathDecayGet(ConstHandle2DecayPath self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Decay>
      (CLASSNAME, CLASSNAME+"DecayGet", self, extract::decay, index_);
}

// Set, by index \in [0,size)
void
DecayPathDecaySet(
   ConstHandle2DecayPath self,
   const size_t index_,
   ConstHandle2ConstDecay decay
) {
   detail::setByIndex<CPP,CPPDecay>
      (CLASSNAME, CLASSNAME+"DecaySet", self, extract::decay, index_, decay);
}

// ------------------------
// Re: metadatum index
// ------------------------

// Has, by index
int
DecayPathDecayHasByIndex(
   ConstHandle2ConstDecayPath self,
   const int index
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DecayHasByIndex",
       self, extract::decay, meta::index, index);
}

// Get, by index, const
Handle2ConstDecay
DecayPathDecayGetByIndexConst(
   ConstHandle2ConstDecayPath self,
   const int index
) {
   return detail::getByMetadatum<CPP,Handle2ConstDecay>
      (CLASSNAME, CLASSNAME+"DecayGetByIndexConst",
       self, extract::decay, meta::index, index);
}

// Get, by index
Handle2Decay
DecayPathDecayGetByIndex(
   ConstHandle2DecayPath self,
   const int index
) {
   return detail::getByMetadatum<CPP,Handle2Decay>
      (CLASSNAME, CLASSNAME+"DecayGetByIndex",
       self, extract::decay, meta::index, index);
}

// Set, by index
void
DecayPathDecaySetByIndex(
   ConstHandle2DecayPath self,
   const int index,
   ConstHandle2ConstDecay decay
) {
   detail::setByMetadatum<CPP,CPPDecay>
      (CLASSNAME, CLASSNAME+"DecaySetByIndex",
       self, extract::decay, meta::index, index, decay);
}

// ------------------------
// Re: metadatum mode
// ------------------------

// Has, by mode
int
DecayPathDecayHasByMode(
   ConstHandle2ConstDecayPath self,
   const char *const mode
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DecayHasByMode",
       self, extract::decay, meta::mode, mode);
}

// Get, by mode, const
Handle2ConstDecay
DecayPathDecayGetByModeConst(
   ConstHandle2ConstDecayPath self,
   const char *const mode
) {
   return detail::getByMetadatum<CPP,Handle2ConstDecay>
      (CLASSNAME, CLASSNAME+"DecayGetByModeConst",
       self, extract::decay, meta::mode, mode);
}

// Get, by mode
Handle2Decay
DecayPathDecayGetByMode(
   ConstHandle2DecayPath self,
   const char *const mode
) {
   return detail::getByMetadatum<CPP,Handle2Decay>
      (CLASSNAME, CLASSNAME+"DecayGetByMode",
       self, extract::decay, meta::mode, mode);
}

// Set, by mode
void
DecayPathDecaySetByMode(
   ConstHandle2DecayPath self,
   const char *const mode,
   ConstHandle2ConstDecay decay
) {
   detail::setByMetadatum<CPP,CPPDecay>
      (CLASSNAME, CLASSNAME+"DecaySetByMode",
       self, extract::decay, meta::mode, mode, decay);
}

// ------------------------
// Re: metadatum complete
// ------------------------

// Has, by complete
int
DecayPathDecayHasByComplete(
   ConstHandle2ConstDecayPath self,
   const bool complete
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DecayHasByComplete",
       self, extract::decay, meta::complete, complete);
}

// Get, by complete, const
Handle2ConstDecay
DecayPathDecayGetByCompleteConst(
   ConstHandle2ConstDecayPath self,
   const bool complete
) {
   return detail::getByMetadatum<CPP,Handle2ConstDecay>
      (CLASSNAME, CLASSNAME+"DecayGetByCompleteConst",
       self, extract::decay, meta::complete, complete);
}

// Get, by complete
Handle2Decay
DecayPathDecayGetByComplete(
   ConstHandle2DecayPath self,
   const bool complete
) {
   return detail::getByMetadatum<CPP,Handle2Decay>
      (CLASSNAME, CLASSNAME+"DecayGetByComplete",
       self, extract::decay, meta::complete, complete);
}

// Set, by complete
void
DecayPathDecaySetByComplete(
   ConstHandle2DecayPath self,
   const bool complete,
   ConstHandle2ConstDecay decay
) {
   detail::setByMetadatum<CPP,CPPDecay>
      (CLASSNAME, CLASSNAME+"DecaySetByComplete",
       self, extract::decay, meta::complete, complete, decay);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/DecayPath/src/custom.cpp"
