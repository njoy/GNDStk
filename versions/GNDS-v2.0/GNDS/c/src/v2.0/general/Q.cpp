
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/Q.hpp"
#include "Q.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = QClass;
using CPP = multigroup::Q;

static const std::string CLASSNAME = "Q";

namespace extract {
   static auto Double = [](auto &obj) { return &obj.Double; };
   static auto constant1d = [](auto &obj) { return &obj.constant1d; };
}

using CPPDouble = general::Double;
using CPPConstant1d = general::Constant1d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstQ
QDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Q
QDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstQ
QCreateConst(
   ConstHandle2ConstDouble Double,
   ConstHandle2ConstConstant1d constant1d
) {
   ConstHandle2Q handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      detail::tocpp<CPPDouble>(Double),
      detail::tocpp<CPPConstant1d>(constant1d)
   );
   return handle;
}

// Create, general
Handle2Q
QCreate(
   ConstHandle2ConstDouble Double,
   ConstHandle2ConstConstant1d constant1d
) {
   ConstHandle2Q handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      detail::tocpp<CPPDouble>(Double),
      detail::tocpp<CPPConstant1d>(constant1d)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
QAssign(ConstHandle2Q self, ConstHandle2ConstQ from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
QDelete(ConstHandle2ConstQ self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
QRead(ConstHandle2Q self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
QWrite(ConstHandle2ConstQ self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
QPrint(ConstHandle2ConstQ self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
QPrintXML(ConstHandle2ConstQ self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
QPrintJSON(ConstHandle2ConstQ self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: Double
// -----------------------------------------------------------------------------

// Has
int
QDoubleHas(ConstHandle2ConstQ self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DoubleHas", self, extract::Double);
}

// Get, const
Handle2ConstDouble
QDoubleGetConst(ConstHandle2ConstQ self)
{
   return detail::getField<CPP,Handle2ConstDouble>
      (CLASSNAME, CLASSNAME+"DoubleGetConst", self, extract::Double);
}

// Get
Handle2Double
QDoubleGet(ConstHandle2Q self)
{
   return detail::getField<CPP,Handle2Double>
      (CLASSNAME, CLASSNAME+"DoubleGet", self, extract::Double);
}

// Set
void
QDoubleSet(ConstHandle2Q self, ConstHandle2ConstDouble Double)
{
   detail::setField<CPP,CPPDouble>
      (CLASSNAME, CLASSNAME+"DoubleSet", self, extract::Double, Double);
}


// -----------------------------------------------------------------------------
// Child: constant1d
// -----------------------------------------------------------------------------

// Has
int
QConstant1dHas(ConstHandle2ConstQ self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"Constant1dHas", self, extract::constant1d);
}

// Get, const
Handle2ConstConstant1d
QConstant1dGetConst(ConstHandle2ConstQ self)
{
   return detail::getField<CPP,Handle2ConstConstant1d>
      (CLASSNAME, CLASSNAME+"Constant1dGetConst", self, extract::constant1d);
}

// Get
Handle2Constant1d
QConstant1dGet(ConstHandle2Q self)
{
   return detail::getField<CPP,Handle2Constant1d>
      (CLASSNAME, CLASSNAME+"Constant1dGet", self, extract::constant1d);
}

// Set
void
QConstant1dSet(ConstHandle2Q self, ConstHandle2ConstConstant1d constant1d)
{
   detail::setField<CPP,CPPConstant1d>
      (CLASSNAME, CLASSNAME+"Constant1dSet", self, extract::constant1d, constant1d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Q/src/custom.cpp"
