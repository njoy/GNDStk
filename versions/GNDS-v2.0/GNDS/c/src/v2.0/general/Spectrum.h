
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Spectrum is the basic handle type in this file. Example:
//    // Create a default Spectrum object:
//    Spectrum handle = SpectrumDefault();
// Functions involving Spectrum are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_SPECTRUM
#define C_INTERFACE_GNDS_V2_0_GENERAL_SPECTRUM

#include "GNDStk.h"
#include "v2.0/general/Discrete.h"
#include "v2.0/general/Continuum.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct SpectrumClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Spectrum
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct SpectrumClass *Spectrum;

// --- Const-aware handles.
typedef const struct SpectrumClass *const ConstHandle2ConstSpectrum;
typedef       struct SpectrumClass *const ConstHandle2Spectrum;
typedef const struct SpectrumClass *      Handle2ConstSpectrum;
typedef       struct SpectrumClass *      Handle2Spectrum;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstSpectrum
SpectrumDefaultConst();

// +++ Create, default
extern_c Handle2Spectrum
SpectrumDefault();

// --- Create, general, const
extern_c Handle2ConstSpectrum
SpectrumCreateConst(
   const char *const label,
   const char *const pid,
   ConstHandle2Discrete *const discrete, const size_t discreteSize,
   ConstHandle2ConstContinuum continuum
);

// +++ Create, general
extern_c Handle2Spectrum
SpectrumCreate(
   const char *const label,
   const char *const pid,
   ConstHandle2Discrete *const discrete, const size_t discreteSize,
   ConstHandle2ConstContinuum continuum
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
SpectrumAssign(ConstHandle2Spectrum self, ConstHandle2ConstSpectrum from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
SpectrumDelete(ConstHandle2ConstSpectrum self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
SpectrumRead(ConstHandle2Spectrum self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
SpectrumWrite(ConstHandle2ConstSpectrum self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
SpectrumPrint(ConstHandle2ConstSpectrum self);

// +++ Print to standard output, as XML
extern_c int
SpectrumPrintXML(ConstHandle2ConstSpectrum self);

// +++ Print to standard output, as JSON
extern_c int
SpectrumPrintJSON(ConstHandle2ConstSpectrum self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SpectrumLabelHas(ConstHandle2ConstSpectrum self);

// +++ Get
// +++ Returns by value
extern_c const char *
SpectrumLabelGet(ConstHandle2ConstSpectrum self);

// +++ Set
extern_c void
SpectrumLabelSet(ConstHandle2Spectrum self, const char *const label);


// -----------------------------------------------------------------------------
// Metadatum: pid
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SpectrumPidHas(ConstHandle2ConstSpectrum self);

// +++ Get
// +++ Returns by value
extern_c const char *
SpectrumPidGet(ConstHandle2ConstSpectrum self);

// +++ Set
extern_c void
SpectrumPidSet(ConstHandle2Spectrum self, const char *const pid);


// -----------------------------------------------------------------------------
// Child: discrete
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SpectrumDiscreteHas(ConstHandle2ConstSpectrum self);

// +++ Clear
extern_c void
SpectrumDiscreteClear(ConstHandle2Spectrum self);

// +++ Size
extern_c size_t
SpectrumDiscreteSize(ConstHandle2ConstSpectrum self);

// +++ Add
extern_c void
SpectrumDiscreteAdd(ConstHandle2Spectrum self, ConstHandle2ConstDiscrete discrete);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstDiscrete
SpectrumDiscreteGetConst(ConstHandle2ConstSpectrum self, const size_t index_);

// +++ Get, by index \in [0,size)
extern_c Handle2Discrete
SpectrumDiscreteGet(ConstHandle2Spectrum self, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
SpectrumDiscreteSet(
   ConstHandle2Spectrum self,
   const size_t index_,
   ConstHandle2ConstDiscrete discrete
);

// +++ Has, by type
extern_c int
SpectrumDiscreteHasByType(
   ConstHandle2ConstSpectrum self,
   const char *const type
);

// --- Get, by type, const
extern_c Handle2ConstDiscrete
SpectrumDiscreteGetByTypeConst(
   ConstHandle2ConstSpectrum self,
   const char *const type
);

// +++ Get, by type
extern_c Handle2Discrete
SpectrumDiscreteGetByType(
   ConstHandle2Spectrum self,
   const char *const type
);

// +++ Set, by type
extern_c void
SpectrumDiscreteSetByType(
   ConstHandle2Spectrum self,
   const char *const type,
   ConstHandle2ConstDiscrete discrete
);


// -----------------------------------------------------------------------------
// Child: continuum
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
SpectrumContinuumHas(ConstHandle2ConstSpectrum self);

// --- Get, const
extern_c Handle2ConstContinuum
SpectrumContinuumGetConst(ConstHandle2ConstSpectrum self);

// +++ Get
extern_c Handle2Continuum
SpectrumContinuumGet(ConstHandle2Spectrum self);

// +++ Set
extern_c void
SpectrumContinuumSet(ConstHandle2Spectrum self, ConstHandle2ConstContinuum continuum);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Spectrum/src/custom.h"

#undef extern_c
#endif
