
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/Grid.hpp"
#include "Grid.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = GridClass;
using CPP = multigroup::Grid;

static const std::string CLASSNAME = "Grid";

namespace extract {
   static auto index = [](auto &obj) { return &obj.index; };
   static auto label = [](auto &obj) { return &obj.label; };
   static auto unit = [](auto &obj) { return &obj.unit; };
   static auto style = [](auto &obj) { return &obj.style; };
   static auto interpolation = [](auto &obj) { return &obj.interpolation; };
   static auto link = [](auto &obj) { return &obj.link; };
   static auto values = [](auto &obj) { return &obj.values; };
}

using CPPLink = general::Link;
using CPPValues = general::Values;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstGrid
GridDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Grid
GridDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstGrid
GridCreateConst(
   const int index,
   const char *const label,
   const char *const unit,
   const char *const style,
   const char *const interpolation,
   ConstHandle2ConstLink link,
   ConstHandle2ConstValues values
) {
   ConstHandle2Grid handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      index,
      label,
      unit,
      style,
      interpolation,
      detail::tocpp<CPPLink>(link),
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Create, general
Handle2Grid
GridCreate(
   const int index,
   const char *const label,
   const char *const unit,
   const char *const style,
   const char *const interpolation,
   ConstHandle2ConstLink link,
   ConstHandle2ConstValues values
) {
   ConstHandle2Grid handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      index,
      label,
      unit,
      style,
      interpolation,
      detail::tocpp<CPPLink>(link),
      detail::tocpp<CPPValues>(values)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
GridAssign(ConstHandle2Grid self, ConstHandle2ConstGrid from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
GridDelete(ConstHandle2ConstGrid self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
GridRead(ConstHandle2Grid self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
GridWrite(ConstHandle2ConstGrid self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
GridPrint(ConstHandle2ConstGrid self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
GridPrintXML(ConstHandle2ConstGrid self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
GridPrintJSON(ConstHandle2ConstGrid self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: index
// -----------------------------------------------------------------------------

// Has
int
GridIndexHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"IndexHas", self, extract::index);
}

// Get
// Returns by value
int
GridIndexGet(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"IndexGet", self, extract::index);
}

// Set
void
GridIndexSet(ConstHandle2Grid self, const int index)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"IndexSet", self, extract::index, index);
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
GridLabelHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
GridLabelGet(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
GridLabelSet(ConstHandle2Grid self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: unit
// -----------------------------------------------------------------------------

// Has
int
GridUnitHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"UnitHas", self, extract::unit);
}

// Get
// Returns by value
const char *
GridUnitGet(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"UnitGet", self, extract::unit);
}

// Set
void
GridUnitSet(ConstHandle2Grid self, const char *const unit)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"UnitSet", self, extract::unit, unit);
}


// -----------------------------------------------------------------------------
// Metadatum: style
// -----------------------------------------------------------------------------

// Has
int
GridStyleHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"StyleHas", self, extract::style);
}

// Get
// Returns by value
const char *
GridStyleGet(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"StyleGet", self, extract::style);
}

// Set
void
GridStyleSet(ConstHandle2Grid self, const char *const style)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"StyleSet", self, extract::style, style);
}


// -----------------------------------------------------------------------------
// Metadatum: interpolation
// -----------------------------------------------------------------------------

// Has
int
GridInterpolationHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationHas", self, extract::interpolation);
}

// Get
// Returns by value
const char *
GridInterpolationGet(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationGet", self, extract::interpolation);
}

// Set
void
GridInterpolationSet(ConstHandle2Grid self, const char *const interpolation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"InterpolationSet", self, extract::interpolation, interpolation);
}


// -----------------------------------------------------------------------------
// Child: link
// -----------------------------------------------------------------------------

// Has
int
GridLinkHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LinkHas", self, extract::link);
}

// Get, const
Handle2ConstLink
GridLinkGetConst(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP,Handle2ConstLink>
      (CLASSNAME, CLASSNAME+"LinkGetConst", self, extract::link);
}

// Get
Handle2Link
GridLinkGet(ConstHandle2Grid self)
{
   return detail::getField<CPP,Handle2Link>
      (CLASSNAME, CLASSNAME+"LinkGet", self, extract::link);
}

// Set
void
GridLinkSet(ConstHandle2Grid self, ConstHandle2ConstLink link)
{
   detail::setField<CPP,CPPLink>
      (CLASSNAME, CLASSNAME+"LinkSet", self, extract::link, link);
}


// -----------------------------------------------------------------------------
// Child: values
// -----------------------------------------------------------------------------

// Has
int
GridValuesHas(ConstHandle2ConstGrid self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ValuesHas", self, extract::values);
}

// Get, const
Handle2ConstValues
GridValuesGetConst(ConstHandle2ConstGrid self)
{
   return detail::getField<CPP,Handle2ConstValues>
      (CLASSNAME, CLASSNAME+"ValuesGetConst", self, extract::values);
}

// Get
Handle2Values
GridValuesGet(ConstHandle2Grid self)
{
   return detail::getField<CPP,Handle2Values>
      (CLASSNAME, CLASSNAME+"ValuesGet", self, extract::values);
}

// Set
void
GridValuesSet(ConstHandle2Grid self, ConstHandle2ConstValues values)
{
   detail::setField<CPP,CPPValues>
      (CLASSNAME, CLASSNAME+"ValuesSet", self, extract::values, values);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Grid/src/custom.cpp"
