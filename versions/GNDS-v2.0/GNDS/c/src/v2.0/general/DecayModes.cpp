
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/DecayModes.hpp"
#include "DecayModes.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = DecayModesClass;
using CPP = multigroup::DecayModes;

static const std::string CLASSNAME = "DecayModes";

namespace extract {
   static auto decayMode = [](auto &obj) { return &obj.decayMode; };
}

using CPPDecayMode = general::DecayMode;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstDecayModes
DecayModesDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default, non-const
Handle2DecayModes
DecayModesDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstDecayModes
DecayModesCreateConst(
   ConstHandle2DecayMode *const decayMode, const size_t decayModeSize
) {
   ConstHandle2DecayModes handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPDecayMode>{}
   );
   for (size_t DecayModeN = 0; DecayModeN < decayModeSize; ++DecayModeN)
      DecayModesDecayModeAdd(handle, decayMode[DecayModeN]);
   return handle;
}

// Create, general, non-const
Handle2DecayModes
DecayModesCreate(
   ConstHandle2DecayMode *const decayMode, const size_t decayModeSize
) {
   ConstHandle2DecayModes handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPDecayMode>{}
   );
   for (size_t DecayModeN = 0; DecayModeN < decayModeSize; ++DecayModeN)
      DecayModesDecayModeAdd(handle, decayMode[DecayModeN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
DecayModesAssign(ConstHandle2DecayModes self, ConstHandle2ConstDecayModes from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
DecayModesDelete(ConstHandle2ConstDecayModes self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
DecayModesRead(ConstHandle2DecayModes self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
DecayModesWrite(ConstHandle2ConstDecayModes self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
DecayModesPrint(ConstHandle2ConstDecayModes self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
DecayModesPrintXML(ConstHandle2ConstDecayModes self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
DecayModesPrintJSON(ConstHandle2ConstDecayModes self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: decayMode
// -----------------------------------------------------------------------------

// Has
int
DecayModesDecayModeHas(ConstHandle2ConstDecayModes self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"DecayModeHas", self, extract::decayMode);
}

// Clear
void
DecayModesDecayModeClear(ConstHandle2DecayModes self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"DecayModeClear", self, extract::decayMode);
}

// Size
size_t
DecayModesDecayModeSize(ConstHandle2ConstDecayModes self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"DecayModeSize", self, extract::decayMode);
}

// Add
void
DecayModesDecayModeAdd(ConstHandle2DecayModes self, ConstHandle2ConstDecayMode decayMode)
{
   detail::addToContainer<CPP,CPPDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeAdd", self, extract::decayMode, decayMode);
}

// Get, by index \in [0,size), const
Handle2ConstDecayMode
DecayModesDecayModeGetConst(ConstHandle2ConstDecayModes self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeGetConst", self, extract::decayMode, index_);
}

// Get, by index \in [0,size), non-const
Handle2DecayMode
DecayModesDecayModeGet(ConstHandle2DecayModes self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2DecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeGet", self, extract::decayMode, index_);
}

// Set, by index \in [0,size)
void
DecayModesDecayModeSet(
   ConstHandle2DecayModes self,
   const size_t index_,
   ConstHandle2ConstDecayMode decayMode
) {
   detail::setByIndex<CPP,CPPDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeSet", self, extract::decayMode, index_, decayMode);
}

// ------------------------
// Re: metadatum label
// ------------------------

// Has, by label
int
DecayModesDecayModeHasByLabel(
   ConstHandle2ConstDecayModes self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DecayModeHasByLabel",
       self, extract::decayMode, meta::label, label);
}

// Get, by label, const
Handle2ConstDecayMode
DecayModesDecayModeGetByLabelConst(
   ConstHandle2ConstDecayModes self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeGetByLabelConst",
       self, extract::decayMode, meta::label, label);
}

// Get, by label, non-const
Handle2DecayMode
DecayModesDecayModeGetByLabel(
   ConstHandle2DecayModes self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2DecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeGetByLabel",
       self, extract::decayMode, meta::label, label);
}

// Set, by label
void
DecayModesDecayModeSetByLabel(
   ConstHandle2DecayModes self,
   const char *const label,
   ConstHandle2ConstDecayMode decayMode
) {
   detail::setByMetadatum<CPP,CPPDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeSetByLabel",
       self, extract::decayMode, meta::label, label, decayMode);
}

// ------------------------
// Re: metadatum mode
// ------------------------

// Has, by mode
int
DecayModesDecayModeHasByMode(
   ConstHandle2ConstDecayModes self,
   const char *const mode
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"DecayModeHasByMode",
       self, extract::decayMode, meta::mode, mode);
}

// Get, by mode, const
Handle2ConstDecayMode
DecayModesDecayModeGetByModeConst(
   ConstHandle2ConstDecayModes self,
   const char *const mode
) {
   return detail::getByMetadatum<CPP,Handle2ConstDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeGetByModeConst",
       self, extract::decayMode, meta::mode, mode);
}

// Get, by mode, non-const
Handle2DecayMode
DecayModesDecayModeGetByMode(
   ConstHandle2DecayModes self,
   const char *const mode
) {
   return detail::getByMetadatum<CPP,Handle2DecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeGetByMode",
       self, extract::decayMode, meta::mode, mode);
}

// Set, by mode
void
DecayModesDecayModeSetByMode(
   ConstHandle2DecayModes self,
   const char *const mode,
   ConstHandle2ConstDecayMode decayMode
) {
   detail::setByMetadatum<CPP,CPPDecayMode>
      (CLASSNAME, CLASSNAME+"DecayModeSetByMode",
       self, extract::decayMode, meta::mode, mode, decayMode);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/DecayModes/src/custom.cpp"
