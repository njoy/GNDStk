
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "GNDS/v2.0/general/ChemicalElements.hpp"
#include "ChemicalElements.h"

using namespace njoy::GNDStk;
using namespace GNDS::v2_0;

using C = ChemicalElementsClass;
using CPP = multigroup::ChemicalElements;

static const std::string CLASSNAME = "ChemicalElements";

namespace extract {
   static auto chemicalElement = [](auto &obj) { return &obj.chemicalElement; };
}

using CPPChemicalElement = general::ChemicalElement;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstChemicalElements
ChemicalElementsDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ChemicalElements
ChemicalElementsDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstChemicalElements
ChemicalElementsCreateConst(
   ConstHandle2ChemicalElement *const chemicalElement, const size_t chemicalElementSize
) {
   ConstHandle2ChemicalElements handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      std::vector<CPPChemicalElement>{}
   );
   for (size_t ChemicalElementN = 0; ChemicalElementN < chemicalElementSize; ++ChemicalElementN)
      ChemicalElementsChemicalElementAdd(handle, chemicalElement[ChemicalElementN]);
   return handle;
}

// Create, general
Handle2ChemicalElements
ChemicalElementsCreate(
   ConstHandle2ChemicalElement *const chemicalElement, const size_t chemicalElementSize
) {
   ConstHandle2ChemicalElements handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      std::vector<CPPChemicalElement>{}
   );
   for (size_t ChemicalElementN = 0; ChemicalElementN < chemicalElementSize; ++ChemicalElementN)
      ChemicalElementsChemicalElementAdd(handle, chemicalElement[ChemicalElementN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ChemicalElementsAssign(ConstHandle2ChemicalElements self, ConstHandle2ConstChemicalElements from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ChemicalElementsDelete(ConstHandle2ConstChemicalElements self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ChemicalElementsRead(ConstHandle2ChemicalElements self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ChemicalElementsWrite(ConstHandle2ConstChemicalElements self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ChemicalElementsPrint(ConstHandle2ConstChemicalElements self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ChemicalElementsPrintXML(ConstHandle2ConstChemicalElements self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ChemicalElementsPrintJSON(ConstHandle2ConstChemicalElements self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Child: chemicalElement
// -----------------------------------------------------------------------------

// Has
int
ChemicalElementsChemicalElementHas(ConstHandle2ConstChemicalElements self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementHas", self, extract::chemicalElement);
}

// Clear
void
ChemicalElementsChemicalElementClear(ConstHandle2ChemicalElements self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementClear", self, extract::chemicalElement);
}

// Size
size_t
ChemicalElementsChemicalElementSize(ConstHandle2ConstChemicalElements self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementSize", self, extract::chemicalElement);
}

// Add
void
ChemicalElementsChemicalElementAdd(ConstHandle2ChemicalElements self, ConstHandle2ConstChemicalElement chemicalElement)
{
   detail::addToContainer<CPP,CPPChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementAdd", self, extract::chemicalElement, chemicalElement);
}

// Get, by index \in [0,size), const
Handle2ConstChemicalElement
ChemicalElementsChemicalElementGetConst(ConstHandle2ConstChemicalElements self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetConst", self, extract::chemicalElement, index_);
}

// Get, by index \in [0,size)
Handle2ChemicalElement
ChemicalElementsChemicalElementGet(ConstHandle2ChemicalElements self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGet", self, extract::chemicalElement, index_);
}

// Set, by index \in [0,size)
void
ChemicalElementsChemicalElementSet(
   ConstHandle2ChemicalElements self,
   const size_t index_,
   ConstHandle2ConstChemicalElement chemicalElement
) {
   detail::setByIndex<CPP,CPPChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementSet", self, extract::chemicalElement, index_, chemicalElement);
}

// ------------------------
// Re: metadatum symbol
// ------------------------

// Has, by symbol
int
ChemicalElementsChemicalElementHasBySymbol(
   ConstHandle2ConstChemicalElements self,
   const char *const symbol
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementHasBySymbol",
       self, extract::chemicalElement, meta::symbol, symbol);
}

// Get, by symbol, const
Handle2ConstChemicalElement
ChemicalElementsChemicalElementGetBySymbolConst(
   ConstHandle2ConstChemicalElements self,
   const char *const symbol
) {
   return detail::getByMetadatum<CPP,Handle2ConstChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetBySymbolConst",
       self, extract::chemicalElement, meta::symbol, symbol);
}

// Get, by symbol
Handle2ChemicalElement
ChemicalElementsChemicalElementGetBySymbol(
   ConstHandle2ChemicalElements self,
   const char *const symbol
) {
   return detail::getByMetadatum<CPP,Handle2ChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetBySymbol",
       self, extract::chemicalElement, meta::symbol, symbol);
}

// Set, by symbol
void
ChemicalElementsChemicalElementSetBySymbol(
   ConstHandle2ChemicalElements self,
   const char *const symbol,
   ConstHandle2ConstChemicalElement chemicalElement
) {
   detail::setByMetadatum<CPP,CPPChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementSetBySymbol",
       self, extract::chemicalElement, meta::symbol, symbol, chemicalElement);
}

// ------------------------
// Re: metadatum Z
// ------------------------

// Has, by Z
int
ChemicalElementsChemicalElementHasByZ(
   ConstHandle2ConstChemicalElements self,
   const int Z
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementHasByZ",
       self, extract::chemicalElement, meta::Z, Z);
}

// Get, by Z, const
Handle2ConstChemicalElement
ChemicalElementsChemicalElementGetByZConst(
   ConstHandle2ConstChemicalElements self,
   const int Z
) {
   return detail::getByMetadatum<CPP,Handle2ConstChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetByZConst",
       self, extract::chemicalElement, meta::Z, Z);
}

// Get, by Z
Handle2ChemicalElement
ChemicalElementsChemicalElementGetByZ(
   ConstHandle2ChemicalElements self,
   const int Z
) {
   return detail::getByMetadatum<CPP,Handle2ChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetByZ",
       self, extract::chemicalElement, meta::Z, Z);
}

// Set, by Z
void
ChemicalElementsChemicalElementSetByZ(
   ConstHandle2ChemicalElements self,
   const int Z,
   ConstHandle2ConstChemicalElement chemicalElement
) {
   detail::setByMetadatum<CPP,CPPChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementSetByZ",
       self, extract::chemicalElement, meta::Z, Z, chemicalElement);
}

// ------------------------
// Re: metadatum name
// ------------------------

// Has, by name
int
ChemicalElementsChemicalElementHasByName(
   ConstHandle2ConstChemicalElements self,
   const char *const name
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"ChemicalElementHasByName",
       self, extract::chemicalElement, meta::name, name);
}

// Get, by name, const
Handle2ConstChemicalElement
ChemicalElementsChemicalElementGetByNameConst(
   ConstHandle2ConstChemicalElements self,
   const char *const name
) {
   return detail::getByMetadatum<CPP,Handle2ConstChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetByNameConst",
       self, extract::chemicalElement, meta::name, name);
}

// Get, by name
Handle2ChemicalElement
ChemicalElementsChemicalElementGetByName(
   ConstHandle2ChemicalElements self,
   const char *const name
) {
   return detail::getByMetadatum<CPP,Handle2ChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementGetByName",
       self, extract::chemicalElement, meta::name, name);
}

// Set, by name
void
ChemicalElementsChemicalElementSetByName(
   ConstHandle2ChemicalElements self,
   const char *const name,
   ConstHandle2ConstChemicalElement chemicalElement
) {
   detail::setByMetadatum<CPP,CPPChemicalElement>
      (CLASSNAME, CLASSNAME+"ChemicalElementSetByName",
       self, extract::chemicalElement, meta::name, name, chemicalElement);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/ChemicalElements/src/custom.cpp"
