
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// J is the basic handle type in this file. Example:
//    // Create a default J object:
//    J handle = JDefault();
// Functions involving J are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_J
#define C_INTERFACE_GNDS_V2_0_GENERAL_J

#include "GNDStk.h"
#include "v2.0/general/LevelSpacing.h"
#include "v2.0/general/Widths.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct JClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ J
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct JClass *J;

// --- Const-aware handles.
typedef const struct JClass *const ConstHandle2ConstJ;
typedef       struct JClass *const ConstHandle2J;
typedef const struct JClass *      Handle2ConstJ;
typedef       struct JClass *      Handle2J;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstJ
JDefaultConst();

// +++ Create, default
extern_c Handle2J
JDefault();

// --- Create, general, const
extern_c Handle2ConstJ
JCreateConst(
   const char *const label,
   const int value,
   ConstHandle2ConstLevelSpacing levelSpacing,
   ConstHandle2ConstWidths widths
);

// +++ Create, general
extern_c Handle2J
JCreate(
   const char *const label,
   const int value,
   ConstHandle2ConstLevelSpacing levelSpacing,
   ConstHandle2ConstWidths widths
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
JAssign(ConstHandle2J self, ConstHandle2ConstJ from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
JDelete(ConstHandle2ConstJ self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
JRead(ConstHandle2J self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
JWrite(ConstHandle2ConstJ self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
JPrint(ConstHandle2ConstJ self);

// +++ Print to standard output, as XML
extern_c int
JPrintXML(ConstHandle2ConstJ self);

// +++ Print to standard output, as JSON
extern_c int
JPrintJSON(ConstHandle2ConstJ self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
JLabelHas(ConstHandle2ConstJ self);

// +++ Get
// +++ Returns by value
extern_c const char *
JLabelGet(ConstHandle2ConstJ self);

// +++ Set
extern_c void
JLabelSet(ConstHandle2J self, const char *const label);


// -----------------------------------------------------------------------------
// Metadatum: value
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
JValueHas(ConstHandle2ConstJ self);

// +++ Get
// +++ Returns by value
extern_c int
JValueGet(ConstHandle2ConstJ self);

// +++ Set
extern_c void
JValueSet(ConstHandle2J self, const int value);


// -----------------------------------------------------------------------------
// Child: levelSpacing
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
JLevelSpacingHas(ConstHandle2ConstJ self);

// --- Get, const
extern_c Handle2ConstLevelSpacing
JLevelSpacingGetConst(ConstHandle2ConstJ self);

// +++ Get
extern_c Handle2LevelSpacing
JLevelSpacingGet(ConstHandle2J self);

// +++ Set
extern_c void
JLevelSpacingSet(ConstHandle2J self, ConstHandle2ConstLevelSpacing levelSpacing);


// -----------------------------------------------------------------------------
// Child: widths
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
JWidthsHas(ConstHandle2ConstJ self);

// --- Get, const
extern_c Handle2ConstWidths
JWidthsGetConst(ConstHandle2ConstJ self);

// +++ Get
extern_c Handle2Widths
JWidthsGet(ConstHandle2J self);

// +++ Set
extern_c void
JWidthsSet(ConstHandle2J self, ConstHandle2ConstWidths widths);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/J/src/custom.h"

#undef extern_c
#endif
