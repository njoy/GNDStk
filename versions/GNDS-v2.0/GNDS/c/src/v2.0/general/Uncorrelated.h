
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// Uncorrelated is the basic handle type in this file. Example:
//    // Create a default Uncorrelated object:
//    Uncorrelated handle = UncorrelatedDefault();
// Functions involving Uncorrelated are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_UNCORRELATED
#define C_INTERFACE_GNDS_V2_0_GENERAL_UNCORRELATED

#include "GNDStk.h"
#include "v2.0/general/Angular.h"
#include "v2.0/general/Energy.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct UncorrelatedClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Uncorrelated
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct UncorrelatedClass *Uncorrelated;

// --- Const-aware handles.
typedef const struct UncorrelatedClass *const ConstHandle2ConstUncorrelated;
typedef       struct UncorrelatedClass *const ConstHandle2Uncorrelated;
typedef const struct UncorrelatedClass *      Handle2ConstUncorrelated;
typedef       struct UncorrelatedClass *      Handle2Uncorrelated;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstUncorrelated
UncorrelatedDefaultConst();

// +++ Create, default
extern_c Handle2Uncorrelated
UncorrelatedDefault();

// --- Create, general, const
extern_c Handle2ConstUncorrelated
UncorrelatedCreateConst(
   const char *const label,
   const char *const productFrame,
   ConstHandle2ConstAngular angular,
   ConstHandle2ConstEnergy energy
);

// +++ Create, general
extern_c Handle2Uncorrelated
UncorrelatedCreate(
   const char *const label,
   const char *const productFrame,
   ConstHandle2ConstAngular angular,
   ConstHandle2ConstEnergy energy
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
UncorrelatedAssign(ConstHandle2Uncorrelated self, ConstHandle2ConstUncorrelated from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
UncorrelatedDelete(ConstHandle2ConstUncorrelated self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
UncorrelatedRead(ConstHandle2Uncorrelated self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
UncorrelatedWrite(ConstHandle2ConstUncorrelated self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
UncorrelatedPrint(ConstHandle2ConstUncorrelated self);

// +++ Print to standard output, as XML
extern_c int
UncorrelatedPrintXML(ConstHandle2ConstUncorrelated self);

// +++ Print to standard output, as JSON
extern_c int
UncorrelatedPrintJSON(ConstHandle2ConstUncorrelated self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UncorrelatedLabelHas(ConstHandle2ConstUncorrelated self);

// +++ Get
// +++ Returns by value
extern_c const char *
UncorrelatedLabelGet(ConstHandle2ConstUncorrelated self);

// +++ Set
extern_c void
UncorrelatedLabelSet(ConstHandle2Uncorrelated self, const char *const label);


// -----------------------------------------------------------------------------
// Metadatum: productFrame
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UncorrelatedProductFrameHas(ConstHandle2ConstUncorrelated self);

// +++ Get
// +++ Returns by value
extern_c const char *
UncorrelatedProductFrameGet(ConstHandle2ConstUncorrelated self);

// +++ Set
extern_c void
UncorrelatedProductFrameSet(ConstHandle2Uncorrelated self, const char *const productFrame);


// -----------------------------------------------------------------------------
// Child: angular
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UncorrelatedAngularHas(ConstHandle2ConstUncorrelated self);

// --- Get, const
extern_c Handle2ConstAngular
UncorrelatedAngularGetConst(ConstHandle2ConstUncorrelated self);

// +++ Get
extern_c Handle2Angular
UncorrelatedAngularGet(ConstHandle2Uncorrelated self);

// +++ Set
extern_c void
UncorrelatedAngularSet(ConstHandle2Uncorrelated self, ConstHandle2ConstAngular angular);


// -----------------------------------------------------------------------------
// Child: energy
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
UncorrelatedEnergyHas(ConstHandle2ConstUncorrelated self);

// --- Get, const
extern_c Handle2ConstEnergy
UncorrelatedEnergyGetConst(ConstHandle2ConstUncorrelated self);

// +++ Get
extern_c Handle2Energy
UncorrelatedEnergyGet(ConstHandle2Uncorrelated self);

// +++ Set
extern_c void
UncorrelatedEnergySet(ConstHandle2Uncorrelated self, ConstHandle2ConstEnergy energy);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/Uncorrelated/src/custom.h"

#undef extern_c
#endif
