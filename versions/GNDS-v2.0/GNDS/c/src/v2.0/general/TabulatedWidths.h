
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ remark
// Constructs you're LESS likely to care about are preceded with:
//    // --- remark
// Anything not marked as above can be ignored by most users.
//
// TabulatedWidths is the basic handle type in this file. Example:
//    // Create a default TabulatedWidths object:
//    TabulatedWidths handle = TabulatedWidthsDefault();
// Functions involving TabulatedWidths are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_GNDS_V2_0_GENERAL_TABULATEDWIDTHS
#define C_INTERFACE_GNDS_V2_0_GENERAL_TABULATEDWIDTHS

#include "GNDStk.h"
#include "v2.0/general/ResonanceReactions.h"
#include "v2.0/general/Ls.h"
#include "v2.0/top/PoPs.h"
#include "v2.0/general/ScatteringRadius.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct TabulatedWidthsClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ TabulatedWidths
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct TabulatedWidthsClass *TabulatedWidths;

// --- Const-aware handles.
typedef const struct TabulatedWidthsClass *const ConstHandle2ConstTabulatedWidths;
typedef       struct TabulatedWidthsClass *const ConstHandle2TabulatedWidths;
typedef const struct TabulatedWidthsClass *      Handle2ConstTabulatedWidths;
typedef       struct TabulatedWidthsClass *      Handle2TabulatedWidths;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstTabulatedWidths
TabulatedWidthsDefaultConst();

// +++ Create, default, non-const
extern_c Handle2TabulatedWidths
TabulatedWidthsDefault();

// --- Create, general, const
extern_c Handle2ConstTabulatedWidths
TabulatedWidthsCreateConst(
   const char *const label,
   const char *const approximation,
   const bool useForSelfShieldingOnly,
   ConstHandle2ConstResonanceReactions resonanceReactions,
   ConstHandle2ConstLs Ls,
   ConstHandle2ConstPoPs PoPs,
   ConstHandle2ConstScatteringRadius scatteringRadius
);

// +++ Create, general, non-const
extern_c Handle2TabulatedWidths
TabulatedWidthsCreate(
   const char *const label,
   const char *const approximation,
   const bool useForSelfShieldingOnly,
   ConstHandle2ConstResonanceReactions resonanceReactions,
   ConstHandle2ConstLs Ls,
   ConstHandle2ConstPoPs PoPs,
   ConstHandle2ConstScatteringRadius scatteringRadius
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
TabulatedWidthsAssign(ConstHandle2TabulatedWidths self, ConstHandle2ConstTabulatedWidths from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
TabulatedWidthsDelete(ConstHandle2ConstTabulatedWidths self);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
TabulatedWidthsRead(ConstHandle2TabulatedWidths self, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
TabulatedWidthsWrite(ConstHandle2ConstTabulatedWidths self, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
TabulatedWidthsPrint(ConstHandle2ConstTabulatedWidths self);

// +++ Print to standard output, as XML
extern_c int
TabulatedWidthsPrintXML(ConstHandle2ConstTabulatedWidths self);

// +++ Print to standard output, as JSON
extern_c int
TabulatedWidthsPrintJSON(ConstHandle2ConstTabulatedWidths self);


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsLabelHas(ConstHandle2ConstTabulatedWidths self);

// +++ Get
// +++ Returns by value
extern_c const char *
TabulatedWidthsLabelGet(ConstHandle2ConstTabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsLabelSet(ConstHandle2TabulatedWidths self, const char *const label);


// -----------------------------------------------------------------------------
// Metadatum: approximation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsApproximationHas(ConstHandle2ConstTabulatedWidths self);

// +++ Get
// +++ Returns by value
extern_c const char *
TabulatedWidthsApproximationGet(ConstHandle2ConstTabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsApproximationSet(ConstHandle2TabulatedWidths self, const char *const approximation);


// -----------------------------------------------------------------------------
// Metadatum: useForSelfShieldingOnly
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsUseForSelfShieldingOnlyHas(ConstHandle2ConstTabulatedWidths self);

// +++ Get
// +++ Returns by value
extern_c bool
TabulatedWidthsUseForSelfShieldingOnlyGet(ConstHandle2ConstTabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsUseForSelfShieldingOnlySet(ConstHandle2TabulatedWidths self, const bool useForSelfShieldingOnly);


// -----------------------------------------------------------------------------
// Child: resonanceReactions
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsResonanceReactionsHas(ConstHandle2ConstTabulatedWidths self);

// --- Get, const
extern_c Handle2ConstResonanceReactions
TabulatedWidthsResonanceReactionsGetConst(ConstHandle2ConstTabulatedWidths self);

// +++ Get, non-const
extern_c Handle2ResonanceReactions
TabulatedWidthsResonanceReactionsGet(ConstHandle2TabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsResonanceReactionsSet(ConstHandle2TabulatedWidths self, ConstHandle2ConstResonanceReactions resonanceReactions);


// -----------------------------------------------------------------------------
// Child: Ls
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsLsHas(ConstHandle2ConstTabulatedWidths self);

// --- Get, const
extern_c Handle2ConstLs
TabulatedWidthsLsGetConst(ConstHandle2ConstTabulatedWidths self);

// +++ Get, non-const
extern_c Handle2Ls
TabulatedWidthsLsGet(ConstHandle2TabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsLsSet(ConstHandle2TabulatedWidths self, ConstHandle2ConstLs Ls);


// -----------------------------------------------------------------------------
// Child: PoPs
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsPoPsHas(ConstHandle2ConstTabulatedWidths self);

// --- Get, const
extern_c Handle2ConstPoPs
TabulatedWidthsPoPsGetConst(ConstHandle2ConstTabulatedWidths self);

// +++ Get, non-const
extern_c Handle2PoPs
TabulatedWidthsPoPsGet(ConstHandle2TabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsPoPsSet(ConstHandle2TabulatedWidths self, ConstHandle2ConstPoPs PoPs);


// -----------------------------------------------------------------------------
// Child: scatteringRadius
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
TabulatedWidthsScatteringRadiusHas(ConstHandle2ConstTabulatedWidths self);

// --- Get, const
extern_c Handle2ConstScatteringRadius
TabulatedWidthsScatteringRadiusGetConst(ConstHandle2ConstTabulatedWidths self);

// +++ Get, non-const
extern_c Handle2ScatteringRadius
TabulatedWidthsScatteringRadiusGet(ConstHandle2TabulatedWidths self);

// +++ Set
extern_c void
TabulatedWidthsScatteringRadiusSet(ConstHandle2TabulatedWidths self, ConstHandle2ConstScatteringRadius scatteringRadius);


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v2.0/general/TabulatedWidths/src/custom.h"

#undef extern_c
#endif
