
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "proto/v1.9/containers/Axes.hpp"
#include "definitions.hpp"

// namespace aliases
namespace py = pybind11;

namespace python_v1_9 {
namespace python_containers {

// wrapper for containers::Axes
void wrapAxes(py::module &module)
{
   using namespace proto;
   using namespace proto::v1_9;

   // type aliases
   using cppCLASS = containers::Axes;
   using axis_grid_t = std::variant<
      containers::Axis,
      containers::Grid
   >;

   // create the Python object
   py::class_<cppCLASS> object(
      module, "Axes",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      py::init<
         const std::optional<std::string> &,
         const std::vector<axis_grid_t> &
      >(),
      py::arg("href") = std::nullopt,
      py::arg("axis_grid"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set href
   object.def_property(
      "href",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.href();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.href() = value;
      },
      cppCLASS::component_t::documentation("href").data()
   );

   object.def_property(
      "axis_grid",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.axis_grid();
      },
      [](cppCLASS &self, const std::vector<axis_grid_t> &value)
      {
         self.axis_grid() = value;
      },
      cppCLASS::component_t::documentation("axis_grid").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_containers
} // namespace python_v1_9
