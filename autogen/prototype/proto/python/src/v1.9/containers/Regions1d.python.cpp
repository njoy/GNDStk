
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "proto/v1.9/containers/Regions1d.hpp"
#include "definitions.hpp"

namespace python_v1_9 {
namespace python_containers {

// wrapper for containers::Regions1d
void wrapRegions1d(pybind11::module &module)
{
   using namespace proto;
   using namespace proto::v1_9;

   // type aliases
   using cppCLASS = containers::Regions1d;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "Regions1d",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::optional<std::string> &,
         const std::optional<double> &,
         const std::optional<containers::Axes> &,
         const std::vector<containers::XYs1d> &
      >(),
      pybind11::arg("label") = std::nullopt,
      pybind11::arg("outer_domain_value") = std::nullopt,
      pybind11::arg("axes") = std::nullopt,
      pybind11::arg("xys1d"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set label
   object.def_property(
      "label",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.label();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.label() = value;
      },
      cppCLASS::component_t::documentation("label").data()
   );

   // get/set outerDomainValue
   object.def_property(
      "outer_domain_value",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.outerDomainValue();
      },
      [](cppCLASS &self, const std::optional<double> &value)
      {
         self.outerDomainValue() = value;
      },
      cppCLASS::component_t::documentation("outer_domain_value").data()
   );

   // get/set axes
   object.def_property(
      "axes",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.axes();
      },
      [](cppCLASS &self, const std::optional<containers::Axes> &value)
      {
         self.axes() = value;
      },
      cppCLASS::component_t::documentation("axes").data()
   );

   // get/set XYs1d
   object.def_property(
      "xys1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d();
      },
      [](cppCLASS &self, const std::vector<containers::XYs1d> &value)
      {
         self.XYs1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_containers
} // namespace python_v1_9
