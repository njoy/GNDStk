
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "proto/v1.9/transport/ReactionSuite.hpp"
#include "definitions.hpp"

namespace python_v1_9 {
namespace python_transport {

// wrapper for transport::ReactionSuite
void wrapReactionSuite(pybind11::module &module)
{
   using namespace proto;
   using namespace proto::v1_9;

   // type aliases
   using cppCLASS = transport::ReactionSuite;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "ReactionSuite",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::string &,
         const std::string &,
         const std::string &,
         const enums::Frame &,
         const std::string &,
         const std::optional<enums::Interaction> &,
         const std::optional<transport::Reactions> &
      >(),
      pybind11::arg("evaluation"),
      pybind11::arg("format"),
      pybind11::arg("projectile"),
      pybind11::arg("projectile_frame"),
      pybind11::arg("target"),
      pybind11::arg("interaction") = std::nullopt,
      pybind11::arg("reactions") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set evaluation
   object.def_property(
      "evaluation",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.evaluation();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.evaluation() = value;
      },
      cppCLASS::component_t::documentation("evaluation").data()
   );

   // get/set format
   object.def_property(
      "format",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.format();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.format() = value;
      },
      cppCLASS::component_t::documentation("format").data()
   );

   // get/set projectile
   object.def_property(
      "projectile",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.projectile();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.projectile() = value;
      },
      cppCLASS::component_t::documentation("projectile").data()
   );

   // get/set projectileFrame
   object.def_property(
      "projectile_frame",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.projectileFrame();
      },
      [](cppCLASS &self, const enums::Frame &value)
      {
         self.projectileFrame() = value;
      },
      cppCLASS::component_t::documentation("projectile_frame").data()
   );

   // get/set target
   object.def_property(
      "target",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.target();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.target() = value;
      },
      cppCLASS::component_t::documentation("target").data()
   );

   // get/set interaction
   object.def_property(
      "interaction",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.interaction();
      },
      [](cppCLASS &self, const std::optional<enums::Interaction> &value)
      {
         self.interaction() = value;
      },
      cppCLASS::component_t::documentation("interaction").data()
   );

   // get/set reactions
   object.def_property(
      "reactions",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.reactions();
      },
      [](cppCLASS &self, const std::optional<transport::Reactions> &value)
      {
         self.reactions() = value;
      },
      cppCLASS::component_t::documentation("reactions").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_transport
} // namespace python_v1_9
