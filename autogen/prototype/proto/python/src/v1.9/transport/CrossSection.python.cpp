
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "proto/v1.9/transport/CrossSection.hpp"
#include "definitions.hpp"

namespace python_v1_9 {
namespace python_transport {

// wrapper for transport::CrossSection
void wrapCrossSection(pybind11::module &module)
{
   using namespace proto;
   using namespace proto::v1_9;

   // type aliases
   using cppCLASS = transport::CrossSection;
   using XYs1d_regions1d_t = std::variant<
      containers::XYs1d,
      containers::Regions1d
   >;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "CrossSection",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::vector<XYs1d_regions1d_t> &
      >(),
      pybind11::arg("xys1d_regions1d"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   object.def_property(
      "xys1d_regions1d",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.XYs1d_regions1d();
      },
      [](cppCLASS &self, const std::vector<XYs1d_regions1d_t> &value)
      {
         self.XYs1d_regions1d() = value;
      },
      cppCLASS::component_t::documentation("xys1d_regions1d").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_transport
} // namespace python_v1_9
