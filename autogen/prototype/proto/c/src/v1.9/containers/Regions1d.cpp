
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "proto/v1_9/containers/Regions1d.hpp"
#include "Regions1d.h"

using namespace njoy::GNDStk;
using namespace proto::v1_9;

using C = Regions1dClass;
using CPP = multigroup::Regions1d;

static const std::string CLASSNAME = "Regions1d";

namespace extract {
   static auto label = [](auto &obj) { return &obj.label; };
   static auto outerDomainValue = [](auto &obj) { return &obj.outerDomainValue; };
   static auto axes = [](auto &obj) { return &obj.axes; };
   static auto XYs1d = [](auto &obj) { return &obj.XYs1d; };
}

using CPPAxes = containers::Axes;
using CPPXYs1d = containers::XYs1d;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstRegions1d
Regions1dDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Regions1d
Regions1dDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstRegions1d
Regions1dCreateConst(
   const char *const label,
   const double outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2XYs1d *const XYs1d, const size_t XYs1dSize
) {
   ConstHandle2Regions1d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      label,
      outerDomainValue,
      detail::tocpp<CPPAxes>(axes),
      std::vector<CPPXYs1d>{}
   );
   for (size_t XYs1dN = 0; XYs1dN < XYs1dSize; ++XYs1dN)
      Regions1dXYs1dAdd(handle, XYs1d[XYs1dN]);
   return handle;
}

// Create, general
Handle2Regions1d
Regions1dCreate(
   const char *const label,
   const double outerDomainValue,
   ConstHandle2ConstAxes axes,
   ConstHandle2XYs1d *const XYs1d, const size_t XYs1dSize
) {
   ConstHandle2Regions1d handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      label,
      outerDomainValue,
      detail::tocpp<CPPAxes>(axes),
      std::vector<CPPXYs1d>{}
   );
   for (size_t XYs1dN = 0; XYs1dN < XYs1dSize; ++XYs1dN)
      Regions1dXYs1dAdd(handle, XYs1d[XYs1dN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
Regions1dAssign(ConstHandle2Regions1d self, ConstHandle2ConstRegions1d from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
Regions1dDelete(ConstHandle2ConstRegions1d self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
Regions1dRead(ConstHandle2Regions1d self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
Regions1dWrite(ConstHandle2ConstRegions1d self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
Regions1dPrint(ConstHandle2ConstRegions1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
Regions1dPrintXML(ConstHandle2ConstRegions1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
Regions1dPrintJSON(ConstHandle2ConstRegions1d self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: label
// -----------------------------------------------------------------------------

// Has
int
Regions1dLabelHas(ConstHandle2ConstRegions1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LabelHas", self, extract::label);
}

// Get
// Returns by value
const char *
Regions1dLabelGet(ConstHandle2ConstRegions1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"LabelGet", self, extract::label);
}

// Set
void
Regions1dLabelSet(ConstHandle2Regions1d self, const char *const label)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"LabelSet", self, extract::label, label);
}


// -----------------------------------------------------------------------------
// Metadatum: outerDomainValue
// -----------------------------------------------------------------------------

// Has
int
Regions1dOuterDomainValueHas(ConstHandle2ConstRegions1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueHas", self, extract::outerDomainValue);
}

// Get
// Returns by value
double
Regions1dOuterDomainValueGet(ConstHandle2ConstRegions1d self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueGet", self, extract::outerDomainValue);
}

// Set
void
Regions1dOuterDomainValueSet(ConstHandle2Regions1d self, const double outerDomainValue)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"OuterDomainValueSet", self, extract::outerDomainValue, outerDomainValue);
}


// -----------------------------------------------------------------------------
// Child: axes
// -----------------------------------------------------------------------------

// Has
int
Regions1dAxesHas(ConstHandle2ConstRegions1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"AxesHas", self, extract::axes);
}

// Get, const
Handle2ConstAxes
Regions1dAxesGetConst(ConstHandle2ConstRegions1d self)
{
   return detail::getField<CPP,Handle2ConstAxes>
      (CLASSNAME, CLASSNAME+"AxesGetConst", self, extract::axes);
}

// Get, non-const
Handle2Axes
Regions1dAxesGet(ConstHandle2Regions1d self)
{
   return detail::getField<CPP,Handle2Axes>
      (CLASSNAME, CLASSNAME+"AxesGet", self, extract::axes);
}

// Set
void
Regions1dAxesSet(ConstHandle2Regions1d self, ConstHandle2ConstAxes axes)
{
   detail::setField<CPP,CPPAxes>
      (CLASSNAME, CLASSNAME+"AxesSet", self, extract::axes, axes);
}


// -----------------------------------------------------------------------------
// Child: XYs1d
// -----------------------------------------------------------------------------

// Has
int
Regions1dXYs1dHas(ConstHandle2ConstRegions1d self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHas", self, extract::XYs1d);
}

// Clear
void
Regions1dXYs1dClear(ConstHandle2Regions1d self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dClear", self, extract::XYs1d);
}

// Size
size_t
Regions1dXYs1dSize(ConstHandle2ConstRegions1d self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dSize", self, extract::XYs1d);
}

// Add
void
Regions1dXYs1dAdd(ConstHandle2Regions1d self, ConstHandle2ConstXYs1d XYs1d)
{
   detail::addToContainer<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dAdd", self, extract::XYs1d, XYs1d);
}

// Get, by index \in [0,size), const
Handle2ConstXYs1d
Regions1dXYs1dGetConst(ConstHandle2ConstRegions1d self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetConst", self, extract::XYs1d, index_);
}

// Get, by index \in [0,size), non-const
Handle2XYs1d
Regions1dXYs1dGet(ConstHandle2Regions1d self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGet", self, extract::XYs1d, index_);
}

// Set, by index \in [0,size)
void
Regions1dXYs1dSet(
   ConstHandle2Regions1d self,
   const size_t index_,
   ConstHandle2ConstXYs1d XYs1d
) {
   detail::setByIndex<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSet", self, extract::XYs1d, index_, XYs1d);
}

// Has, by index
int
Regions1dXYs1dHasByIndex(
   ConstHandle2ConstRegions1d self,
   const int index
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHasByIndex",
       self, extract::XYs1d, meta::index, index);
}

// Get, by index, const
Handle2ConstXYs1d
Regions1dXYs1dGetByIndexConst(
   ConstHandle2ConstRegions1d self,
   const int index
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByIndexConst",
       self, extract::XYs1d, meta::index, index);
}

// Get, by index, non-const
Handle2XYs1d
Regions1dXYs1dGetByIndex(
   ConstHandle2Regions1d self,
   const int index
) {
   return detail::getByMetadatum<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByIndex",
       self, extract::XYs1d, meta::index, index);
}

// Set, by index
void
Regions1dXYs1dSetByIndex(
   ConstHandle2Regions1d self,
   const int index,
   ConstHandle2ConstXYs1d XYs1d
) {
   detail::setByMetadatum<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSetByIndex",
       self, extract::XYs1d, meta::index, index, XYs1d);
}

// Has, by interpolation
int
Regions1dXYs1dHasByInterpolation(
   ConstHandle2ConstRegions1d self,
   const enums::Interpolation interpolation
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHasByInterpolation",
       self, extract::XYs1d, meta::interpolation, interpolation);
}

// Get, by interpolation, const
Handle2ConstXYs1d
Regions1dXYs1dGetByInterpolationConst(
   ConstHandle2ConstRegions1d self,
   const enums::Interpolation interpolation
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByInterpolationConst",
       self, extract::XYs1d, meta::interpolation, interpolation);
}

// Get, by interpolation, non-const
Handle2XYs1d
Regions1dXYs1dGetByInterpolation(
   ConstHandle2Regions1d self,
   const enums::Interpolation interpolation
) {
   return detail::getByMetadatum<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByInterpolation",
       self, extract::XYs1d, meta::interpolation, interpolation);
}

// Set, by interpolation
void
Regions1dXYs1dSetByInterpolation(
   ConstHandle2Regions1d self,
   const enums::Interpolation interpolation,
   ConstHandle2ConstXYs1d XYs1d
) {
   detail::setByMetadatum<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSetByInterpolation",
       self, extract::XYs1d, meta::interpolation, interpolation, XYs1d);
}

// Has, by label
int
Regions1dXYs1dHasByLabel(
   ConstHandle2ConstRegions1d self,
   const char *const label
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHasByLabel",
       self, extract::XYs1d, meta::label, label);
}

// Get, by label, const
Handle2ConstXYs1d
Regions1dXYs1dGetByLabelConst(
   ConstHandle2ConstRegions1d self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByLabelConst",
       self, extract::XYs1d, meta::label, label);
}

// Get, by label, non-const
Handle2XYs1d
Regions1dXYs1dGetByLabel(
   ConstHandle2Regions1d self,
   const char *const label
) {
   return detail::getByMetadatum<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByLabel",
       self, extract::XYs1d, meta::label, label);
}

// Set, by label
void
Regions1dXYs1dSetByLabel(
   ConstHandle2Regions1d self,
   const char *const label,
   ConstHandle2ConstXYs1d XYs1d
) {
   detail::setByMetadatum<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSetByLabel",
       self, extract::XYs1d, meta::label, label, XYs1d);
}

// Has, by outerDomainValue
int
Regions1dXYs1dHasByOuterDomainValue(
   ConstHandle2ConstRegions1d self,
   const double outerDomainValue
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"XYs1dHasByOuterDomainValue",
       self, extract::XYs1d, meta::outerDomainValue, outerDomainValue);
}

// Get, by outerDomainValue, const
Handle2ConstXYs1d
Regions1dXYs1dGetByOuterDomainValueConst(
   ConstHandle2ConstRegions1d self,
   const double outerDomainValue
) {
   return detail::getByMetadatum<CPP,Handle2ConstXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByOuterDomainValueConst",
       self, extract::XYs1d, meta::outerDomainValue, outerDomainValue);
}

// Get, by outerDomainValue, non-const
Handle2XYs1d
Regions1dXYs1dGetByOuterDomainValue(
   ConstHandle2Regions1d self,
   const double outerDomainValue
) {
   return detail::getByMetadatum<CPP,Handle2XYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dGetByOuterDomainValue",
       self, extract::XYs1d, meta::outerDomainValue, outerDomainValue);
}

// Set, by outerDomainValue
void
Regions1dXYs1dSetByOuterDomainValue(
   ConstHandle2Regions1d self,
   const double outerDomainValue,
   ConstHandle2ConstXYs1d XYs1d
) {
   detail::setByMetadatum<CPP,CPPXYs1d>
      (CLASSNAME, CLASSNAME+"XYs1dSetByOuterDomainValue",
       self, extract::XYs1d, meta::outerDomainValue, outerDomainValue, XYs1d);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v1.9/containers/Regions1d/src/custom.cpp"
