
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "proto/v1_9/transport/ReactionSuite.hpp"
#include "ReactionSuite.h"

using namespace njoy::GNDStk;
using namespace proto::v1_9;

using C = ReactionSuiteClass;
using CPP = multigroup::ReactionSuite;

static const std::string CLASSNAME = "ReactionSuite";

namespace extract {
   static auto evaluation = [](auto &obj) { return &obj.evaluation; };
   static auto format = [](auto &obj) { return &obj.format; };
   static auto projectile = [](auto &obj) { return &obj.projectile; };
   static auto projectileFrame = [](auto &obj) { return &obj.projectileFrame; };
   static auto target = [](auto &obj) { return &obj.target; };
   static auto interaction = [](auto &obj) { return &obj.interaction; };
   static auto reactions = [](auto &obj) { return &obj.reactions; };
}

using CPPReactions = transport::Reactions;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstReactionSuite
ReactionSuiteDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2ReactionSuite
ReactionSuiteDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstReactionSuite
ReactionSuiteCreateConst(
   const char *const evaluation,
   const char *const format,
   const char *const projectile,
   const enums::Frame projectileFrame,
   const char *const target,
   const enums::Interaction interaction,
   ConstHandle2ConstReactions reactions
) {
   ConstHandle2ReactionSuite handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      evaluation,
      format,
      projectile,
      projectileFrame,
      target,
      interaction,
      detail::tocpp<CPPReactions>(reactions)
   );
   return handle;
}

// Create, general
Handle2ReactionSuite
ReactionSuiteCreate(
   const char *const evaluation,
   const char *const format,
   const char *const projectile,
   const enums::Frame projectileFrame,
   const char *const target,
   const enums::Interaction interaction,
   ConstHandle2ConstReactions reactions
) {
   ConstHandle2ReactionSuite handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      evaluation,
      format,
      projectile,
      projectileFrame,
      target,
      interaction,
      detail::tocpp<CPPReactions>(reactions)
   );
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
ReactionSuiteAssign(ConstHandle2ReactionSuite self, ConstHandle2ConstReactionSuite from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
ReactionSuiteDelete(ConstHandle2ConstReactionSuite self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
ReactionSuiteRead(ConstHandle2ReactionSuite self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
ReactionSuiteWrite(ConstHandle2ConstReactionSuite self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
ReactionSuitePrint(ConstHandle2ConstReactionSuite self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
ReactionSuitePrintXML(ConstHandle2ConstReactionSuite self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
ReactionSuitePrintJSON(ConstHandle2ConstReactionSuite self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: evaluation
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteEvaluationHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluationHas", self, extract::evaluation);
}

// Get
// Returns by value
const char *
ReactionSuiteEvaluationGet(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluationGet", self, extract::evaluation);
}

// Set
void
ReactionSuiteEvaluationSet(ConstHandle2ReactionSuite self, const char *const evaluation)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"EvaluationSet", self, extract::evaluation, evaluation);
}


// -----------------------------------------------------------------------------
// Metadatum: format
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteFormatHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"FormatHas", self, extract::format);
}

// Get
// Returns by value
const char *
ReactionSuiteFormatGet(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"FormatGet", self, extract::format);
}

// Set
void
ReactionSuiteFormatSet(ConstHandle2ReactionSuite self, const char *const format)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"FormatSet", self, extract::format, format);
}


// -----------------------------------------------------------------------------
// Metadatum: projectile
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteProjectileHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileHas", self, extract::projectile);
}

// Get
// Returns by value
const char *
ReactionSuiteProjectileGet(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileGet", self, extract::projectile);
}

// Set
void
ReactionSuiteProjectileSet(ConstHandle2ReactionSuite self, const char *const projectile)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileSet", self, extract::projectile, projectile);
}


// -----------------------------------------------------------------------------
// Metadatum: projectileFrame
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteProjectileFrameHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileFrameHas", self, extract::projectileFrame);
}

// Get
// Returns by value
enums::Frame
ReactionSuiteProjectileFrameGet(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileFrameGet", self, extract::projectileFrame);
}

// Set
void
ReactionSuiteProjectileFrameSet(ConstHandle2ReactionSuite self, const enums::Frame projectileFrame)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileFrameSet", self, extract::projectileFrame, projectileFrame);
}


// -----------------------------------------------------------------------------
// Metadatum: target
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteTargetHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"TargetHas", self, extract::target);
}

// Get
// Returns by value
const char *
ReactionSuiteTargetGet(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"TargetGet", self, extract::target);
}

// Set
void
ReactionSuiteTargetSet(ConstHandle2ReactionSuite self, const char *const target)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"TargetSet", self, extract::target, target);
}


// -----------------------------------------------------------------------------
// Metadatum: interaction
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteInteractionHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"InteractionHas", self, extract::interaction);
}

// Get
// Returns by value
enums::Interaction
ReactionSuiteInteractionGet(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"InteractionGet", self, extract::interaction);
}

// Set
void
ReactionSuiteInteractionSet(ConstHandle2ReactionSuite self, const enums::Interaction interaction)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"InteractionSet", self, extract::interaction, interaction);
}


// -----------------------------------------------------------------------------
// Child: reactions
// -----------------------------------------------------------------------------

// Has
int
ReactionSuiteReactionsHas(ConstHandle2ConstReactionSuite self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ReactionsHas", self, extract::reactions);
}

// Get, const
Handle2ConstReactions
ReactionSuiteReactionsGetConst(ConstHandle2ConstReactionSuite self)
{
   return detail::getField<CPP,Handle2ConstReactions>
      (CLASSNAME, CLASSNAME+"ReactionsGetConst", self, extract::reactions);
}

// Get, non-const
Handle2Reactions
ReactionSuiteReactionsGet(ConstHandle2ReactionSuite self)
{
   return detail::getField<CPP,Handle2Reactions>
      (CLASSNAME, CLASSNAME+"ReactionsGet", self, extract::reactions);
}

// Set
void
ReactionSuiteReactionsSet(ConstHandle2ReactionSuite self, ConstHandle2ConstReactions reactions)
{
   detail::setField<CPP,CPPReactions>
      (CLASSNAME, CLASSNAME+"ReactionsSet", self, extract::reactions, reactions);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v1.9/transport/ReactionSuite/src/custom.cpp"
