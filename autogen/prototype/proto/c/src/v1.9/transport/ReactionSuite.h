
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// ReactionSuite is the basic handle type in this file. Example:
//    // Create a default ReactionSuite object:
//    ReactionSuite handle = ReactionSuiteDefault();
// Functions involving ReactionSuite are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_PROTO_V1_9_TRANSPORT_REACTIONSUITE
#define C_INTERFACE_PROTO_V1_9_TRANSPORT_REACTIONSUITE

#include "GNDStk.h"
#include "v1.9/transport/Reactions.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct ReactionSuiteClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ ReactionSuite
// +++ General handle, suitable for most users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct ReactionSuiteClass *ReactionSuite;

// --- Const-aware handles.
typedef const struct ReactionSuiteClass *const ConstHandle2ConstReactionSuite;
typedef       struct ReactionSuiteClass *const ConstHandle2ReactionSuite;
typedef const struct ReactionSuiteClass *      Handle2ConstReactionSuite;
typedef       struct ReactionSuiteClass *      Handle2ReactionSuite;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstReactionSuite
ReactionSuiteDefaultConst();

// +++ Create, default
extern_c Handle2ReactionSuite
ReactionSuiteDefault();

// --- Create, general, const
extern_c Handle2ConstReactionSuite
ReactionSuiteCreateConst(
   const char *const evaluation,
   const char *const format,
   const char *const projectile,
   const enums::Frame projectileFrame,
   const char *const target,
   const enums::Interaction interaction,
   ConstHandle2ConstReactions reactions
);

// +++ Create, general
extern_c Handle2ReactionSuite
ReactionSuiteCreate(
   const char *const evaluation,
   const char *const format,
   const char *const projectile,
   const enums::Frame projectileFrame,
   const char *const target,
   const enums::Interaction interaction,
   ConstHandle2ConstReactions reactions
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
ReactionSuiteAssign(ConstHandle2ReactionSuite This, ConstHandle2ConstReactionSuite from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
ReactionSuiteDelete(ConstHandle2ConstReactionSuite This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
ReactionSuiteRead(ConstHandle2ReactionSuite This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
ReactionSuiteWrite(ConstHandle2ConstReactionSuite This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
ReactionSuitePrint(ConstHandle2ConstReactionSuite This);

// +++ Print to standard output, as XML
extern_c int
ReactionSuitePrintXML(ConstHandle2ConstReactionSuite This);

// +++ Print to standard output, as JSON
extern_c int
ReactionSuitePrintJSON(ConstHandle2ConstReactionSuite This);


// -----------------------------------------------------------------------------
// Metadatum: evaluation
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteEvaluationHas(ConstHandle2ConstReactionSuite This);

// +++ Get
// +++ Returns by value
extern_c const char *
ReactionSuiteEvaluationGet(ConstHandle2ConstReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteEvaluationSet(ConstHandle2ReactionSuite This, const char *const evaluation);


// -----------------------------------------------------------------------------
// Metadatum: format
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteFormatHas(ConstHandle2ConstReactionSuite This);

// +++ Get
// +++ Returns by value
extern_c const char *
ReactionSuiteFormatGet(ConstHandle2ConstReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteFormatSet(ConstHandle2ReactionSuite This, const char *const format);


// -----------------------------------------------------------------------------
// Metadatum: projectile
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteProjectileHas(ConstHandle2ConstReactionSuite This);

// +++ Get
// +++ Returns by value
extern_c const char *
ReactionSuiteProjectileGet(ConstHandle2ConstReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteProjectileSet(ConstHandle2ReactionSuite This, const char *const projectile);


// -----------------------------------------------------------------------------
// Metadatum: projectileFrame
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteProjectileFrameHas(ConstHandle2ConstReactionSuite This);

// +++ Get
// +++ Returns by value
extern_c enums::Frame
ReactionSuiteProjectileFrameGet(ConstHandle2ConstReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteProjectileFrameSet(ConstHandle2ReactionSuite This, const enums::Frame projectileFrame);


// -----------------------------------------------------------------------------
// Metadatum: target
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteTargetHas(ConstHandle2ConstReactionSuite This);

// +++ Get
// +++ Returns by value
extern_c const char *
ReactionSuiteTargetGet(ConstHandle2ConstReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteTargetSet(ConstHandle2ReactionSuite This, const char *const target);


// -----------------------------------------------------------------------------
// Metadatum: interaction
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteInteractionHas(ConstHandle2ConstReactionSuite This);

// +++ Get
// +++ Returns by value
extern_c enums::Interaction
ReactionSuiteInteractionGet(ConstHandle2ConstReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteInteractionSet(ConstHandle2ReactionSuite This, const enums::Interaction interaction);


// -----------------------------------------------------------------------------
// Child: reactions
// -----------------------------------------------------------------------------

// +++ Has
extern_c int
ReactionSuiteReactionsHas(ConstHandle2ConstReactionSuite This);

// --- Get, const
extern_c Handle2ConstReactions
ReactionSuiteReactionsGetConst(ConstHandle2ConstReactionSuite This);

// +++ Get, non-const
extern_c Handle2Reactions
ReactionSuiteReactionsGet(ConstHandle2ReactionSuite This);

// +++ Set
extern_c void
ReactionSuiteReactionsSet(ConstHandle2ReactionSuite This, ConstHandle2ConstReactions reactions);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
