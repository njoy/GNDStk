
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module containersRegions1d
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function Regions1dDefaultConst() &
      bind(C, name='Regions1dDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Regions1dDefaultConst
end function Regions1dDefaultConst

!! Create, default
function Regions1dDefault() &
      bind(C, name='Regions1dDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: Regions1dDefault
end function Regions1dDefault

!! Create, general, const
function Regions1dCreateConst( &
   label, &
   outerDomainValue, &
   axes, &
   XYs1d, XYs1dSize, &
   labelSize &
) &
      bind(C, name='Regions1dCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: outerDomainValue
   type(c_ptr), value :: axes
   integer(c_size_t), value :: XYs1dSize
   type(c_ptr) :: XYs1d(XYs1dSize)
   type(c_ptr) :: Regions1dCreateConst
end function Regions1dCreateConst

!! Create, general
function Regions1dCreate( &
   label, &
   outerDomainValue, &
   axes, &
   XYs1d, XYs1dSize, &
   labelSize &
) &
      bind(C, name='Regions1dCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
   real(c_double), value, intent(in) :: outerDomainValue
   type(c_ptr), value :: axes
   integer(c_size_t), value :: XYs1dSize
   type(c_ptr) :: XYs1d(XYs1dSize)
   type(c_ptr) :: Regions1dCreate
end function Regions1dCreate

!! Assign
subroutine Regions1dAssign(handleLHS, handleRHS) &
      bind(C, name='Regions1dAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine Regions1dAssign

!! Delete
subroutine Regions1dDelete(handle) &
      bind(C, name='Regions1dDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Regions1dDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function Regions1dRead(handle, filename, filenameSize) &
      bind(C, name='Regions1dRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Regions1dRead
end function Regions1dRead

!! Write to file
function Regions1dWrite(handle, filename, filenameSize) &
      bind(C, name='Regions1dWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: Regions1dWrite
end function Regions1dWrite

!! Print to standard output, in our prettyprinting format
function Regions1dPrint(handle) &
      bind(C, name='Regions1dPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dPrint
end function Regions1dPrint

!! Print to standard output, as XML
function Regions1dPrintXML(handle) &
      bind(C, name='Regions1dPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dPrintXML
end function Regions1dPrintXML

!! Print to standard output, as JSON
function Regions1dPrintJSON(handle) &
      bind(C, name='Regions1dPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dPrintJSON
end function Regions1dPrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: label
!! -----------------------------------------------------------------------------

!! Has
function Regions1dLabelHas(handle) &
      bind(C, name='Regions1dLabelHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dLabelHas
end function Regions1dLabelHas

!! Get
function Regions1dLabelGet(handle) &
      bind(C, name='Regions1dLabelGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dLabelGet
end function Regions1dLabelGet

!! Set
subroutine Regions1dLabelSet(handle, label, labelSize) &
      bind(C, name='Regions1dLabelSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: labelSize
   character(c_char), intent(in) :: label(labelSize)
end subroutine Regions1dLabelSet


!! -----------------------------------------------------------------------------
!! Metadatum: outerDomainValue
!! -----------------------------------------------------------------------------

!! Has
function Regions1dOuterDomainValueHas(handle) &
      bind(C, name='Regions1dOuterDomainValueHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dOuterDomainValueHas
end function Regions1dOuterDomainValueHas

!! Get
function Regions1dOuterDomainValueGet(handle) &
      bind(C, name='Regions1dOuterDomainValueGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double) :: Regions1dOuterDomainValueGet
end function Regions1dOuterDomainValueGet

!! Set
subroutine Regions1dOuterDomainValueSet(handle, outerDomainValue, outerDomainValueSize) &
      bind(C, name='Regions1dOuterDomainValueSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: outerDomainValueSize
   character(c_char), intent(in) :: outerDomainValue(outerDomainValueSize)
end subroutine Regions1dOuterDomainValueSet


!! -----------------------------------------------------------------------------
!! Child: axes
!! -----------------------------------------------------------------------------

!! Has
function Regions1dAxesHas(handle) &
      bind(C, name='Regions1dAxesHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dAxesHas
end function Regions1dAxesHas

!! Get, const
function Regions1dAxesGetConst(handle) &
      bind(C, name='Regions1dAxesGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dAxesGetConst
end function Regions1dAxesGetConst

!! Get
function Regions1dAxesGet(handle) &
      bind(C, name='Regions1dAxesGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: Regions1dAxesGet
end function Regions1dAxesGet

!! Set
subroutine Regions1dAxesSet(handle, fieldHandle) &
      bind(C, name='Regions1dAxesSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine Regions1dAxesSet


!! -----------------------------------------------------------------------------
!! Child: XYs1d
!! -----------------------------------------------------------------------------

!! Has
function Regions1dXYs1dHas(handle) &
      bind(C, name='Regions1dXYs1dHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: Regions1dXYs1dHas
end function Regions1dXYs1dHas

!! Clear
subroutine Regions1dXYs1dClear(handle) &
      bind(C, name='Regions1dXYs1dClear')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine Regions1dXYs1dClear

!! Size
function Regions1dXYs1dSize(handle) &
      bind(C, name='Regions1dXYs1dSize')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t) :: Regions1dXYs1dSize
end function Regions1dXYs1dSize

!! Add
subroutine Regions1dXYs1dAdd(handle, fieldHandle) &
      bind(C, name='Regions1dXYs1dAdd')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dXYs1dAdd

!! Get, by index \in [0,size), const
function Regions1dXYs1dGetConst(handle, index) &
      bind(C, name='Regions1dXYs1dGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: Regions1dXYs1dGetConst
end function Regions1dXYs1dGetConst

!! Get, by index \in [0,size)
function Regions1dXYs1dGet(handle, index) &
      bind(C, name='Regions1dXYs1dGet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr) :: Regions1dXYs1dGet
end function Regions1dXYs1dGet

!! Set, by index \in [0,size)
subroutine Regions1dXYs1dSet(handle, index, fieldHandle) &
      bind(C, name='Regions1dXYs1dSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: index
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dXYs1dSet

!! ------------------------
!! Re: metadatum index
!! ------------------------

!! Has, by index
function Regions1dXYs1dHasByIndex(handle, meta) &
      bind(C, name='Regions1dXYs1dHasByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   integer(c_int) :: Regions1dXYs1dHasByIndex
end function Regions1dXYs1dHasByIndex

!! Get, by index, const
function Regions1dXYs1dGetByIndexConst(handle, meta) &
      bind(C, name='Regions1dXYs1dGetByIndexConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: Regions1dXYs1dGetByIndexConst
end function Regions1dXYs1dGetByIndexConst

!! Get, by index
function Regions1dXYs1dGetByIndex(handle, meta) &
      bind(C, name='Regions1dXYs1dGetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr) :: Regions1dXYs1dGetByIndex
end function Regions1dXYs1dGetByIndex

!! Set, by index
subroutine Regions1dXYs1dSetByIndex(handle, meta, fieldHandle) &
      bind(C, name='Regions1dXYs1dSetByIndex')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dXYs1dSetByIndex

!! ------------------------
!! Re: metadatum interpolation
!! ------------------------

!! Has, by interpolation
function Regions1dXYs1dHasByInterpolation(handle, meta) &
      bind(C, name='Regions1dXYs1dHasByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType, value, intent(in) :: meta
   integer(c_int) :: Regions1dXYs1dHasByInterpolation
end function Regions1dXYs1dHasByInterpolation

!! Get, by interpolation, const
function Regions1dXYs1dGetByInterpolationConst(handle, meta) &
      bind(C, name='Regions1dXYs1dGetByInterpolationConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType, value, intent(in) :: meta
   type(c_ptr) :: Regions1dXYs1dGetByInterpolationConst
end function Regions1dXYs1dGetByInterpolationConst

!! Get, by interpolation
function Regions1dXYs1dGetByInterpolation(handle, meta) &
      bind(C, name='Regions1dXYs1dGetByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   unknownType, value, intent(in) :: meta
   type(c_ptr) :: Regions1dXYs1dGetByInterpolation
end function Regions1dXYs1dGetByInterpolation

!! Set, by interpolation
subroutine Regions1dXYs1dSetByInterpolation(handle, meta, fieldHandle) &
      bind(C, name='Regions1dXYs1dSetByInterpolation')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType, value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dXYs1dSetByInterpolation

!! ------------------------
!! Re: metadatum label
!! ------------------------

!! Has, by label
function Regions1dXYs1dHasByLabel(handle, meta, metaSize) &
      bind(C, name='Regions1dXYs1dHasByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   integer(c_int) :: Regions1dXYs1dHasByLabel
end function Regions1dXYs1dHasByLabel

!! Get, by label, const
function Regions1dXYs1dGetByLabelConst(handle, meta, metaSize) &
      bind(C, name='Regions1dXYs1dGetByLabelConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: Regions1dXYs1dGetByLabelConst
end function Regions1dXYs1dGetByLabelConst

!! Get, by label
function Regions1dXYs1dGetByLabel(handle, meta, metaSize) &
      bind(C, name='Regions1dXYs1dGetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr) :: Regions1dXYs1dGetByLabel
end function Regions1dXYs1dGetByLabel

!! Set, by label
subroutine Regions1dXYs1dSetByLabel(handle, meta, metaSize, fieldHandle) &
      bind(C, name='Regions1dXYs1dSetByLabel')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), intent(in), value :: metaSize
   character(c_char), intent(in) :: meta(metaSize)
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dXYs1dSetByLabel

!! ------------------------
!! Re: metadatum outerDomainValue
!! ------------------------

!! Has, by outerDomainValue
function Regions1dXYs1dHasByOuterDomainValue(handle, meta) &
      bind(C, name='Regions1dXYs1dHasByOuterDomainValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   integer(c_int) :: Regions1dXYs1dHasByOuterDomainValue
end function Regions1dXYs1dHasByOuterDomainValue

!! Get, by outerDomainValue, const
function Regions1dXYs1dGetByOuterDomainValueConst(handle, meta) &
      bind(C, name='Regions1dXYs1dGetByOuterDomainValueConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: Regions1dXYs1dGetByOuterDomainValueConst
end function Regions1dXYs1dGetByOuterDomainValueConst

!! Get, by outerDomainValue
function Regions1dXYs1dGetByOuterDomainValue(handle, meta) &
      bind(C, name='Regions1dXYs1dGetByOuterDomainValue')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr) :: Regions1dXYs1dGetByOuterDomainValue
end function Regions1dXYs1dGetByOuterDomainValue

!! Set, by outerDomainValue
subroutine Regions1dXYs1dSetByOuterDomainValue(handle, meta, fieldHandle) &
      bind(C, name='Regions1dXYs1dSetByOuterDomainValue')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   real(c_double), value, intent(in) :: meta
   type(c_ptr), intent(in), value :: fieldHandle
end subroutine Regions1dXYs1dSetByOuterDomainValue


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module containersRegions1d
