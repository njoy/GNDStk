
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module transportCrossSection
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function CrossSectionDefaultConst() &
      bind(C, name='CrossSectionDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionDefaultConst
end function CrossSectionDefaultConst

!! Create, default
function CrossSectionDefault() &
      bind(C, name='CrossSectionDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionDefault
end function CrossSectionDefault

!! Create, general, const
function CrossSectionCreateConst( &
) &
      bind(C, name='CrossSectionCreateConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionCreateConst
end function CrossSectionCreateConst

!! Create, general
function CrossSectionCreate( &
) &
      bind(C, name='CrossSectionCreate')
   use iso_c_binding
   implicit none
   type(c_ptr) :: CrossSectionCreate
end function CrossSectionCreate

!! Assign
subroutine CrossSectionAssign(handleLHS, handleRHS) &
      bind(C, name='CrossSectionAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine CrossSectionAssign

!! Delete
subroutine CrossSectionDelete(handle) &
      bind(C, name='CrossSectionDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine CrossSectionDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function CrossSectionRead(handle, filename, filenameSize) &
      bind(C, name='CrossSectionRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionRead
end function CrossSectionRead

!! Write to file
function CrossSectionWrite(handle, filename, filenameSize) &
      bind(C, name='CrossSectionWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: CrossSectionWrite
end function CrossSectionWrite

!! Print to standard output, in our prettyprinting format
function CrossSectionPrint(handle) &
      bind(C, name='CrossSectionPrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionPrint
end function CrossSectionPrint

!! Print to standard output, as XML
function CrossSectionPrintXML(handle) &
      bind(C, name='CrossSectionPrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionPrintXML
end function CrossSectionPrintXML

!! Print to standard output, as JSON
function CrossSectionPrintJSON(handle) &
      bind(C, name='CrossSectionPrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: CrossSectionPrintJSON
end function CrossSectionPrintJSON


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module transportCrossSection
