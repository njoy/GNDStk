
!! THIS FILE WAS AUTOGENERATED!
!! DO NOT MODIFY!

module transportReactionSuite
use iso_c_binding
interface


!! -----------------------------------------------------------------------------
!! Basics
!! Create, Assign, Delete
!! -----------------------------------------------------------------------------

!! Create, default, const
function ReactionSuiteDefaultConst() &
      bind(C, name='ReactionSuiteDefaultConst')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ReactionSuiteDefaultConst
end function ReactionSuiteDefaultConst

!! Create, default
function ReactionSuiteDefault() &
      bind(C, name='ReactionSuiteDefault')
   use iso_c_binding
   implicit none
   type(c_ptr) :: ReactionSuiteDefault
end function ReactionSuiteDefault

!! Create, general, const
function ReactionSuiteCreateConst( &
   evaluation, &
   format, &
   projectile, &
   projectileFrame, &
   target, &
   interaction, &
   reactions, &
   evaluationSize, &
   formatSize, &
   projectileSize, &
   targetSize &
) &
      bind(C, name='ReactionSuiteCreateConst')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
   unknownType, value, intent(in) :: projectileFrame
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
   unknownType, value, intent(in) :: interaction
   type(c_ptr), value :: reactions
   type(c_ptr) :: ReactionSuiteCreateConst
end function ReactionSuiteCreateConst

!! Create, general
function ReactionSuiteCreate( &
   evaluation, &
   format, &
   projectile, &
   projectileFrame, &
   target, &
   interaction, &
   reactions, &
   evaluationSize, &
   formatSize, &
   projectileSize, &
   targetSize &
) &
      bind(C, name='ReactionSuiteCreate')
   use iso_c_binding
   implicit none
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
   unknownType, value, intent(in) :: projectileFrame
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
   unknownType, value, intent(in) :: interaction
   type(c_ptr), value :: reactions
   type(c_ptr) :: ReactionSuiteCreate
end function ReactionSuiteCreate

!! Assign
subroutine ReactionSuiteAssign(handleLHS, handleRHS) &
      bind(C, name='ReactionSuiteAssign')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handleLHS, handleRHS
end subroutine ReactionSuiteAssign

!! Delete
subroutine ReactionSuiteDelete(handle) &
      bind(C, name='ReactionSuiteDelete')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
end subroutine ReactionSuiteDelete


!! -----------------------------------------------------------------------------
!! I/O
!! Read, Write, Print
!! Each returns 0 if failure, 1 if success.
!! -----------------------------------------------------------------------------

!! Read from file
function ReactionSuiteRead(handle, filename, filenameSize) &
      bind(C, name='ReactionSuiteRead')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ReactionSuiteRead
end function ReactionSuiteRead

!! Write to file
function ReactionSuiteWrite(handle, filename, filenameSize) &
      bind(C, name='ReactionSuiteWrite')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_size_t), value :: filenameSize
   character(c_char), intent(in) :: filename(filenameSize)
   integer(c_int) :: ReactionSuiteWrite
end function ReactionSuiteWrite

!! Print to standard output, in our prettyprinting format
function ReactionSuitePrint(handle) &
      bind(C, name='ReactionSuitePrint')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuitePrint
end function ReactionSuitePrint

!! Print to standard output, as XML
function ReactionSuitePrintXML(handle) &
      bind(C, name='ReactionSuitePrintXML')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuitePrintXML
end function ReactionSuitePrintXML

!! Print to standard output, as JSON
function ReactionSuitePrintJSON(handle) &
      bind(C, name='ReactionSuitePrintJSON')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuitePrintJSON
end function ReactionSuitePrintJSON


!! -----------------------------------------------------------------------------
!! Metadatum: evaluation
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteEvaluationHas(handle) &
      bind(C, name='ReactionSuiteEvaluationHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteEvaluationHas
end function ReactionSuiteEvaluationHas

!! Get
function ReactionSuiteEvaluationGet(handle) &
      bind(C, name='ReactionSuiteEvaluationGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ReactionSuiteEvaluationGet
end function ReactionSuiteEvaluationGet

!! Set
subroutine ReactionSuiteEvaluationSet(handle, evaluation, evaluationSize) &
      bind(C, name='ReactionSuiteEvaluationSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: evaluationSize
   character(c_char), intent(in) :: evaluation(evaluationSize)
end subroutine ReactionSuiteEvaluationSet


!! -----------------------------------------------------------------------------
!! Metadatum: format
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteFormatHas(handle) &
      bind(C, name='ReactionSuiteFormatHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteFormatHas
end function ReactionSuiteFormatHas

!! Get
function ReactionSuiteFormatGet(handle) &
      bind(C, name='ReactionSuiteFormatGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ReactionSuiteFormatGet
end function ReactionSuiteFormatGet

!! Set
subroutine ReactionSuiteFormatSet(handle, format, formatSize) &
      bind(C, name='ReactionSuiteFormatSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: formatSize
   character(c_char), intent(in) :: format(formatSize)
end subroutine ReactionSuiteFormatSet


!! -----------------------------------------------------------------------------
!! Metadatum: projectile
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteProjectileHas(handle) &
      bind(C, name='ReactionSuiteProjectileHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteProjectileHas
end function ReactionSuiteProjectileHas

!! Get
function ReactionSuiteProjectileGet(handle) &
      bind(C, name='ReactionSuiteProjectileGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ReactionSuiteProjectileGet
end function ReactionSuiteProjectileGet

!! Set
subroutine ReactionSuiteProjectileSet(handle, projectile, projectileSize) &
      bind(C, name='ReactionSuiteProjectileSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: projectileSize
   character(c_char), intent(in) :: projectile(projectileSize)
end subroutine ReactionSuiteProjectileSet


!! -----------------------------------------------------------------------------
!! Metadatum: projectileFrame
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteProjectileFrameHas(handle) &
      bind(C, name='ReactionSuiteProjectileFrameHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteProjectileFrameHas
end function ReactionSuiteProjectileFrameHas

!! Get
function ReactionSuiteProjectileFrameGet(handle) &
      bind(C, name='ReactionSuiteProjectileFrameGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType :: ReactionSuiteProjectileFrameGet
end function ReactionSuiteProjectileFrameGet

!! Set
subroutine ReactionSuiteProjectileFrameSet(handle, projectileFrame, projectileFrameSize) &
      bind(C, name='ReactionSuiteProjectileFrameSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: projectileFrameSize
   character(c_char), intent(in) :: projectileFrame(projectileFrameSize)
end subroutine ReactionSuiteProjectileFrameSet


!! -----------------------------------------------------------------------------
!! Metadatum: target
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteTargetHas(handle) &
      bind(C, name='ReactionSuiteTargetHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteTargetHas
end function ReactionSuiteTargetHas

!! Get
function ReactionSuiteTargetGet(handle) &
      bind(C, name='ReactionSuiteTargetGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ReactionSuiteTargetGet
end function ReactionSuiteTargetGet

!! Set
subroutine ReactionSuiteTargetSet(handle, target, targetSize) &
      bind(C, name='ReactionSuiteTargetSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: targetSize
   character(c_char), intent(in) :: target(targetSize)
end subroutine ReactionSuiteTargetSet


!! -----------------------------------------------------------------------------
!! Metadatum: interaction
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteInteractionHas(handle) &
      bind(C, name='ReactionSuiteInteractionHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteInteractionHas
end function ReactionSuiteInteractionHas

!! Get
function ReactionSuiteInteractionGet(handle) &
      bind(C, name='ReactionSuiteInteractionGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   unknownType :: ReactionSuiteInteractionGet
end function ReactionSuiteInteractionGet

!! Set
subroutine ReactionSuiteInteractionSet(handle, interaction, interactionSize) &
      bind(C, name='ReactionSuiteInteractionSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   integer(c_size_t), intent(in), value :: interactionSize
   character(c_char), intent(in) :: interaction(interactionSize)
end subroutine ReactionSuiteInteractionSet


!! -----------------------------------------------------------------------------
!! Child: reactions
!! -----------------------------------------------------------------------------

!! Has
function ReactionSuiteReactionsHas(handle) &
      bind(C, name='ReactionSuiteReactionsHas')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   integer(c_int) :: ReactionSuiteReactionsHas
end function ReactionSuiteReactionsHas

!! Get, const
function ReactionSuiteReactionsGetConst(handle) &
      bind(C, name='ReactionSuiteReactionsGetConst')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ReactionSuiteReactionsGetConst
end function ReactionSuiteReactionsGetConst

!! Get
function ReactionSuiteReactionsGet(handle) &
      bind(C, name='ReactionSuiteReactionsGet')
   use iso_c_binding
   implicit none
   type(c_ptr), intent(in), value :: handle
   type(c_ptr) :: ReactionSuiteReactionsGet
end function ReactionSuiteReactionsGet

!! Set
subroutine ReactionSuiteReactionsSet(handle, fieldHandle) &
      bind(C, name='ReactionSuiteReactionsSet')
   use iso_c_binding
   implicit none
   type(c_ptr), value :: handle
   type(c_ptr), value :: fieldHandle
end subroutine ReactionSuiteReactionsSet


!! -----------------------------------------------------------------------------
!! -----------------------------------------------------------------------------

end interface
end module transportReactionSuite
