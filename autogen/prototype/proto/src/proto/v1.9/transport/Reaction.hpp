
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef PROTO_V1_9_TRANSPORT_REACTION
#define PROTO_V1_9_TRANSPORT_REACTION

#include "proto/v1.9/transport/CrossSection.hpp"

namespace proto {
namespace v1_9 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class Reaction
// -----------------------------------------------------------------------------

class Reaction :
   public Component<transport::Reaction>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "Reaction"; }
   static auto NODENAME() { return "reaction"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         int{}
            / Meta<>("ENDF_MT") |
         std::optional<std::string>{}
            / Meta<>("fissionGenre") |
         std::string{}
            / Meta<>("label") |

         // children
         --Child<transport::CrossSection>
            ("crossSection")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "ENDF_MT",
         "fissionGenre",
         "label",
         "crossSection"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "endf_mt",
         "fission_genre",
         "label",
         "cross_section"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<int>
      ENDF_MT{this};
   Field<std::optional<std::string>>
      fissionGenre{this};
   Field<std::string>
      label{this};

   // children
   Field<transport::CrossSection>
      crossSection{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->ENDF_MT, \
      this->fissionGenre, \
      this->label, \
      this->crossSection \
   )

   // default
   Reaction() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Reaction(
      const wrapper<int>
         &ENDF_MT,
      const wrapper<std::optional<std::string>>
         &fissionGenre = {},
      const wrapper<std::string>
         &label = {},
      const wrapper<transport::CrossSection>
         &crossSection = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      ENDF_MT(this,ENDF_MT),
      fissionGenre(this,fissionGenre),
      label(this,label),
      crossSection(this,crossSection)
   {
      Component::finish();
   }

   // from node
   explicit Reaction(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Reaction(const Reaction &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      ENDF_MT(this,other.ENDF_MT),
      fissionGenre(this,other.fissionGenre),
      label(this,other.label),
      crossSection(this,other.crossSection)
   {
      Component::finish(other);
   }

   // move
   Reaction(Reaction &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      ENDF_MT(this,std::move(other.ENDF_MT)),
      fissionGenre(this,std::move(other.fissionGenre)),
      label(this,std::move(other.label)),
      crossSection(this,std::move(other.crossSection))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Reaction &operator=(const Reaction &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         ENDF_MT = other.ENDF_MT;
         fissionGenre = other.fissionGenre;
         label = other.label;
         crossSection = other.crossSection;
      }
      return *this;
   }

   // move
   Reaction &operator=(Reaction &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         ENDF_MT = std::move(other.ENDF_MT);
         fissionGenre = std::move(other.fissionGenre);
         label = std::move(other.label);
         crossSection = std::move(other.crossSection);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "proto/v1.9/transport/Reaction/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Reaction

} // namespace transport
} // namespace v1_9
} // namespace proto

#endif
