
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef PROTO_V1_9_TRANSPORT_CROSSSECTION
#define PROTO_V1_9_TRANSPORT_CROSSSECTION

#include "proto/v1.9/containers/XYs1d.hpp"
#include "proto/v1.9/containers/Regions1d.hpp"

namespace proto {
namespace v1_9 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class CrossSection
// -----------------------------------------------------------------------------

class CrossSection : public Component<transport::CrossSection> {
   friend class Component;

   using XYs1d_regions1d_t = std::variant<
      containers::XYs1d,
      containers::Regions1d
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "CrossSection"; }
   static auto FIELD() { return "crossSection"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // children
         XYs1d_regions1d_t{}
            / ++(Child<>("XYs1d") || Child<>("regions1d"))
      ;
   }

public:
   using Component::construct;

   // children - variant
   Field<std::vector<XYs1d_regions1d_t>> XYs1d_regions1d{this};
   FieldPart<decltype(XYs1d_regions1d),containers::XYs1d> XYs1d{XYs1d_regions1d};
   FieldPart<decltype(XYs1d_regions1d),containers::Regions1d> regions1d{XYs1d_regions1d};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->XYs1d_regions1d)

   // default
   CrossSection() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit CrossSection(
      const wrapper<std::vector<XYs1d_regions1d_t>> &XYs1d_regions1d
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      XYs1d_regions1d(this,XYs1d_regions1d)
   {
      Component::finish();
   }

   // from node
   explicit CrossSection(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   CrossSection(const CrossSection &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      XYs1d_regions1d(this,other.XYs1d_regions1d)
   {
      Component::finish(other);
   }

   // move
   CrossSection(CrossSection &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      XYs1d_regions1d(this,std::move(other.XYs1d_regions1d))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   CrossSection &operator=(const CrossSection &) = default;
   CrossSection &operator=(CrossSection &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "proto/v1.9/transport/CrossSection/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class CrossSection

} // namespace transport
} // namespace v1_9
} // namespace proto

#endif
