
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef PROTO_V1_9_TRANSPORT_REACTIONSUITE
#define PROTO_V1_9_TRANSPORT_REACTIONSUITE

#include "proto/v1.9/transport/Reactions.hpp"

namespace proto {
namespace v1_9 {
namespace transport {

// -----------------------------------------------------------------------------
// transport::
// class ReactionSuite
// -----------------------------------------------------------------------------

class ReactionSuite :
   public Component<transport::ReactionSuite>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "transport"; }
   static auto CLASS() { return "ReactionSuite"; }
   static auto NODENAME() { return "reactionSuite"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("evaluation") |
         std::string{}
            / Meta<>("format") |
         std::string{}
            / Meta<>("projectile") |
         enums::Frame{}
            / Meta<>("projectileFrame") |
         std::string{}
            / Meta<>("target") |
         std::optional<enums::Interaction>{}
            / Meta<>("interaction") |

         // children
         --Child<std::optional<transport::Reactions>>
            ("reactions")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "evaluation",
         "format",
         "projectile",
         "projectileFrame",
         "target",
         "interaction",
         "reactions"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "evaluation",
         "format",
         "projectile",
         "projectile_frame",
         "target",
         "interaction",
         "reactions"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      evaluation{this};
   Field<std::string>
      format{this};
   Field<std::string>
      projectile{this};
   Field<enums::Frame>
      projectileFrame{this};
   Field<std::string>
      target{this};
   Field<std::optional<enums::Interaction>>
      interaction{this};

   // children
   Field<std::optional<transport::Reactions>>
      reactions{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->evaluation, \
      this->format, \
      this->projectile, \
      this->projectileFrame, \
      this->target, \
      this->interaction, \
      this->reactions \
   )

   // default
   ReactionSuite() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit ReactionSuite(
      const wrapper<std::string>
         &evaluation,
      const wrapper<std::string>
         &format = {},
      const wrapper<std::string>
         &projectile = {},
      const wrapper<enums::Frame>
         &projectileFrame = {},
      const wrapper<std::string>
         &target = {},
      const wrapper<std::optional<enums::Interaction>>
         &interaction = {},
      const wrapper<std::optional<transport::Reactions>>
         &reactions = {}
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      evaluation(this,evaluation),
      format(this,format),
      projectile(this,projectile),
      projectileFrame(this,projectileFrame),
      target(this,target),
      interaction(this,interaction),
      reactions(this,reactions)
   {
      Component::finish();
   }

   // from node
   explicit ReactionSuite(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   ReactionSuite(const ReactionSuite &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      evaluation(this,other.evaluation),
      format(this,other.format),
      projectile(this,other.projectile),
      projectileFrame(this,other.projectileFrame),
      target(this,other.target),
      interaction(this,other.interaction),
      reactions(this,other.reactions)
   {
      Component::finish(other);
   }

   // move
   ReactionSuite(ReactionSuite &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      evaluation(this,std::move(other.evaluation)),
      format(this,std::move(other.format)),
      projectile(this,std::move(other.projectile)),
      projectileFrame(this,std::move(other.projectileFrame)),
      target(this,std::move(other.target)),
      interaction(this,std::move(other.interaction)),
      reactions(this,std::move(other.reactions))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   ReactionSuite &operator=(const ReactionSuite &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         evaluation = other.evaluation;
         format = other.format;
         projectile = other.projectile;
         projectileFrame = other.projectileFrame;
         target = other.target;
         interaction = other.interaction;
         reactions = other.reactions;
      }
      return *this;
   }

   // move
   ReactionSuite &operator=(ReactionSuite &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         evaluation = std::move(other.evaluation);
         format = std::move(other.format);
         projectile = std::move(other.projectile);
         projectileFrame = std::move(other.projectileFrame);
         target = std::move(other.target);
         interaction = std::move(other.interaction);
         reactions = std::move(other.reactions);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "proto/v1.9/transport/ReactionSuite/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class ReactionSuite

} // namespace transport
} // namespace v1_9
} // namespace proto

#endif
