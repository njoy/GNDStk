
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef PROTO_V1_9_CONTAINERS_AXES
#define PROTO_V1_9_CONTAINERS_AXES

#include "proto/v1.9/containers/Axis.hpp"
#include "proto/v1.9/containers/Grid.hpp"

namespace proto {
namespace v1_9 {
namespace containers {

// -----------------------------------------------------------------------------
// containers::
// class Axes
// -----------------------------------------------------------------------------

class Axes :
   public Component<containers::Axes>
{
   friend class Component;

   using axis_grid_t = std::variant<
      containers::Axis,
      containers::Grid
   >;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "containers"; }
   static auto CLASS() { return "Axes"; }
   static auto NODENAME() { return "axes"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::optional<std::string>{}
            / Meta<>("href") |

         // children
         axis_grid_t{}
            / ++(Child<>("axis") || Child<>("grid"))
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "href",
         "axis_grid"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "href",
         "axis_grid"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::optional<std::string>>
      href{this};

   // children - variant
   Field<std::vector<axis_grid_t>>
      axis_grid{this};
   FieldPart<decltype(axis_grid),containers::Axis> axis{axis_grid};
   FieldPart<decltype(axis_grid),containers::Grid> grid{axis_grid};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->href, \
      this->axis_grid \
   )

   // default
   Axes() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Axes(
      const wrapper<std::optional<std::string>>
         &href,
      const wrapper<std::vector<axis_grid_t>>
         &axis_grid = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      href(this,href),
      axis_grid(this,axis_grid)
   {
      Component::finish();
   }

   // from node
   explicit Axes(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Axes(const Axes &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      href(this,other.href),
      axis_grid(this,other.axis_grid)
   {
      Component::finish(other);
   }

   // move
   Axes(Axes &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      href(this,std::move(other.href)),
      axis_grid(this,std::move(other.axis_grid))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Axes &operator=(const Axes &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         href = other.href;
         axis_grid = other.axis_grid;
      }
      return *this;
   }

   // move
   Axes &operator=(Axes &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         href = std::move(other.href);
         axis_grid = std::move(other.axis_grid);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "proto/v1.9/containers/Axes/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Axes

} // namespace containers
} // namespace v1_9
} // namespace proto

#endif
