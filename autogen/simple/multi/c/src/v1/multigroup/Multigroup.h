
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// Interface for C
// This header file is designed to work with both C and C++
// Function definitions are in this file's .cpp source

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// Instructions for Users
//
// Constructs you're MORE likely to care about are preceded with:
//    // +++ comment
// Constructs you're LESS likely to care about are preceded with:
//    // --- comment
// Anything not marked as above can be ignored by most users.
//
// Multigroup is the basic handle type in this file. Example:
//    // Create a default Multigroup object:
//    Multigroup handle = MultigroupDefault();
// Functions involving Multigroup are declared throughout this file.
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Preliminaries
// -----------------------------------------------------------------------------

#ifndef C_INTERFACE_MULTI_V1_MULTIGROUP_MULTIGROUP
#define C_INTERFACE_MULTI_V1_MULTIGROUP_MULTIGROUP

#include "GNDStk.h"
#include "v1/multigroup/Library.h"

#ifdef __cplusplus
   #define extern_c extern "C"
#else
   #define extern_c
#endif

// Proxy C struct for the handled C++ class
struct MultigroupClass { };


// -----------------------------------------------------------------------------
// Handle types
// -----------------------------------------------------------------------------

// +++ Multigroup
// +++ General handle, suitable for many users. If you're not concerned about
// +++ strict "const correctness" in your C code, you can probably use this in
// +++ place of any function parameter of a const-aware handle type.
typedef struct MultigroupClass *Multigroup;

// --- Const-aware handles, re: constness of handle vs. handled object.
typedef const struct MultigroupClass *const ConstHandle2ConstMultigroup;
typedef       struct MultigroupClass *const ConstHandle2Multigroup;
typedef const struct MultigroupClass *      Handle2ConstMultigroup;
typedef       struct MultigroupClass *      Handle2Multigroup;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// --- Create, default, const
extern_c Handle2ConstMultigroup
MultigroupDefaultConst();

// +++ Create, default
extern_c Handle2Multigroup
MultigroupDefault();

// --- Create, general, const
extern_c Handle2ConstMultigroup
MultigroupCreateConst(
   const char *const projectile,
   ConstHandle2ConstLibrary *const library, const size_t librarySize
);

// +++ Create, general
extern_c Handle2Multigroup
MultigroupCreate(
   const char *const projectile,
   ConstHandle2ConstLibrary *const library, const size_t librarySize
);

// +++ Assign
// +++ Use this to assign one handled object to another. Don't assign handles,
// +++ as with to = from. That has a meaning that you probably don't intend.
extern_c void
MultigroupAssign(ConstHandle2Multigroup This, ConstHandle2ConstMultigroup from);

// +++ Delete
// +++ We'll attempt to remove no-longer-used objects automatically, but you
// +++ may improve performance if you delete them when you're done with them.
extern_c void
MultigroupDelete(ConstHandle2ConstMultigroup This);


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// +++ Read from file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll examine the file's contents to determine its type automatically.
extern_c int
MultigroupRead(ConstHandle2Multigroup This, const char *const filename);

// +++ Write to file
// +++ File can be XML, JSON, or HDF5.
// +++ We'll use filename's extension to determine the type you want written.
extern_c int
MultigroupWrite(ConstHandle2ConstMultigroup This, const char *const filename);

// +++ Print to standard output, in our prettyprinting format
extern_c int
MultigroupPrint(ConstHandle2ConstMultigroup This);

// +++ Print to standard output, as XML
extern_c int
MultigroupPrintXML(ConstHandle2ConstMultigroup This);

// +++ Print to standard output, as JSON
extern_c int
MultigroupPrintJSON(ConstHandle2ConstMultigroup This);


// -----------------------------------------------------------------------------
// Re: projectile
// -----------------------------------------------------------------------------

// +++ Get
// +++ Returns by value
extern_c const char *
MultigroupProjectileGet(ConstHandle2ConstMultigroup This);

// +++ Set
extern_c void
MultigroupProjectileSet(ConstHandle2Multigroup This, const char *const projectile);


// -----------------------------------------------------------------------------
// Re: library
// -----------------------------------------------------------------------------

// +++ Clear
extern_c void
MultigroupLibraryClear(ConstHandle2Multigroup This);

// +++ Size
extern_c size_t
MultigroupLibrarySize(ConstHandle2ConstMultigroup This);

// +++ Add
extern_c void
MultigroupLibraryAdd(ConstHandle2Multigroup This, ConstHandle2ConstLibrary library);

// --- Get, by index \in [0,size), const
extern_c Handle2ConstLibrary
MultigroupLibraryGetConst(ConstHandle2ConstMultigroup This, const size_t index_);

// +++ Get, by index \in [0,size), non-const
extern_c Handle2Library
MultigroupLibraryGet(ConstHandle2Multigroup This, const size_t index_);

// +++ Set, by index \in [0,size)
extern_c void
MultigroupLibrarySet(
   ConstHandle2Multigroup This,
   const size_t index_,
   ConstHandle2ConstLibrary library
);

// +++ Has, by name
extern_c int
MultigroupLibraryHasByName(
   ConstHandle2ConstMultigroup This,
   const char *const name
);

// --- Get, by name, const
extern_c Handle2ConstLibrary
MultigroupLibraryGetByNameConst(
   ConstHandle2ConstMultigroup This,
   const char *const name
);

// +++ Get, by name, non-const
extern_c Handle2Library
MultigroupLibraryGetByName(
   ConstHandle2Multigroup This,
   const char *const name
);

// +++ Set, by name
extern_c void
MultigroupLibrarySetByName(
   ConstHandle2Multigroup This,
   const char *const name,
   ConstHandle2ConstLibrary library
);


// -----------------------------------------------------------------------------
// Done
// -----------------------------------------------------------------------------

#undef extern_c
#endif
