
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#include "multi/v1/multigroup/Multigroup.hpp"
#include "Multigroup.h"

using namespace njoy::GNDStk;
using namespace multi::v1;

using C = MultigroupClass;
using CPP = multigroup::Multigroup;

static const std::string CLASSNAME = "Multigroup";

namespace extract {
   static auto projectile = [](auto &obj) { return &obj.projectile; };
   static auto library = [](auto &obj) { return &obj.library; };
}

using CPPLibrary = multigroup::Library;


// -----------------------------------------------------------------------------
// Basics
// Create, Assign, Delete
// -----------------------------------------------------------------------------

// Create, default, const
Handle2ConstMultigroup
MultigroupDefaultConst()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"DefaultConst");
}

// Create, default
Handle2Multigroup
MultigroupDefault()
{
   return detail::createHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Default");
}

// Create, general, const
Handle2ConstMultigroup
MultigroupCreateConst(
   const char *const projectile,
   ConstHandle2Library *const library, const size_t librarySize
) {
   ConstHandle2Multigroup handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"CreateConst",
      projectile,
      std::vector<CPPLibrary>{}
   );
   for (size_t LibraryN = 0; LibraryN < librarySize; ++LibraryN)
      MultigroupLibraryAdd(handle, library[LibraryN]);
   return handle;
}

// Create, general
Handle2Multigroup
MultigroupCreate(
   const char *const projectile,
   ConstHandle2Library *const library, const size_t librarySize
) {
   ConstHandle2Multigroup handle = detail::createHandle<CPP,C>(
      CLASSNAME, CLASSNAME+"Create",
      projectile,
      std::vector<CPPLibrary>{}
   );
   for (size_t LibraryN = 0; LibraryN < librarySize; ++LibraryN)
      MultigroupLibraryAdd(handle, library[LibraryN]);
   return handle;
}

// Assign
// Use this to assign one handled object to another. Don't assign handles,
// as with to = from. That has a meaning that you probably don't intend.
void
MultigroupAssign(ConstHandle2Multigroup self, ConstHandle2ConstMultigroup from)
{
   detail::assignHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Assign", self, from);
}

// Delete
// We'll attempt to remove no-longer-used objects automatically, but you
// may improve performance if you delete them when you're done with them.
void
MultigroupDelete(ConstHandle2ConstMultigroup self)
{
   detail::deleteHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Delete", self);
}


// -----------------------------------------------------------------------------
// I/O
// Read, Write, Print
// Each returns 0 if failure, 1 if success.
// -----------------------------------------------------------------------------

// Read from file
// File can be XML, JSON, or HDF5.
// We'll examine the file's contents to determine its type automatically.
int
MultigroupRead(ConstHandle2Multigroup self, const char *const filename)
{
   return detail::readHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Read", self, filename);
}

// Write to file
// File can be XML, JSON, or HDF5.
// We'll use filename's extension to determine the type you want written.
int
MultigroupWrite(ConstHandle2ConstMultigroup self, const char *const filename)
{
   return detail::writeHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Write", self, filename);
}

// Print to standard output, in our prettyprinting format
int
MultigroupPrint(ConstHandle2ConstMultigroup self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"Print", self);
}

// Print to standard output, as XML
int
MultigroupPrintXML(ConstHandle2ConstMultigroup self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintXML", self, "XML");
}

// Print to standard output, as JSON
int
MultigroupPrintJSON(ConstHandle2ConstMultigroup self)
{
   return detail::printHandle<CPP,C>
      (CLASSNAME, CLASSNAME+"PrintJSON", self, "JSON");
}


// -----------------------------------------------------------------------------
// Metadatum: projectile
// -----------------------------------------------------------------------------

// Has
int
MultigroupProjectileHas(ConstHandle2ConstMultigroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileHas", self, extract::projectile);
}

// Get
// Returns by value
const char *
MultigroupProjectileGet(ConstHandle2ConstMultigroup self)
{
   return detail::getField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileGet", self, extract::projectile);
}

// Set
void
MultigroupProjectileSet(ConstHandle2Multigroup self, const char *const projectile)
{
   detail::setField<CPP>
      (CLASSNAME, CLASSNAME+"ProjectileSet", self, extract::projectile, projectile);
}


// -----------------------------------------------------------------------------
// Child: library
// -----------------------------------------------------------------------------

// Has
int
MultigroupLibraryHas(ConstHandle2ConstMultigroup self)
{
   return detail::hasField<CPP>
      (CLASSNAME, CLASSNAME+"LibraryHas", self, extract::library);
}

// Clear
void
MultigroupLibraryClear(ConstHandle2Multigroup self)
{
   detail::clearContainer<CPP>
      (CLASSNAME, CLASSNAME+"LibraryClear", self, extract::library);
}

// Size
size_t
MultigroupLibrarySize(ConstHandle2ConstMultigroup self)
{
   return detail::sizeOfContainer<CPP>
      (CLASSNAME, CLASSNAME+"LibrarySize", self, extract::library);
}

// Add
void
MultigroupLibraryAdd(ConstHandle2Multigroup self, ConstHandle2ConstLibrary library)
{
   detail::addToContainer<CPP,CPPLibrary>
      (CLASSNAME, CLASSNAME+"LibraryAdd", self, extract::library, library);
}

// Get, by index \in [0,size), const
Handle2ConstLibrary
MultigroupLibraryGetConst(ConstHandle2ConstMultigroup self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2ConstLibrary>
      (CLASSNAME, CLASSNAME+"LibraryGetConst", self, extract::library, index_);
}

// Get, by index \in [0,size), non-const
Handle2Library
MultigroupLibraryGet(ConstHandle2Multigroup self, const size_t index_)
{
   return detail::getByIndex<CPP,Handle2Library>
      (CLASSNAME, CLASSNAME+"LibraryGet", self, extract::library, index_);
}

// Set, by index \in [0,size)
void
MultigroupLibrarySet(
   ConstHandle2Multigroup self,
   const size_t index_,
   ConstHandle2ConstLibrary library
) {
   detail::setByIndex<CPP,CPPLibrary>
      (CLASSNAME, CLASSNAME+"LibrarySet", self, extract::library, index_, library);
}

// Has, by name
int
MultigroupLibraryHasByName(
   ConstHandle2ConstMultigroup self,
   const char *const name
) {
   return detail::hasByMetadatum<CPP>
      (CLASSNAME, CLASSNAME+"LibraryHasByName",
       self, extract::library, meta::name, name);
}

// Get, by name, const
Handle2ConstLibrary
MultigroupLibraryGetByNameConst(
   ConstHandle2ConstMultigroup self,
   const char *const name
) {
   return detail::getByMetadatum<CPP,Handle2ConstLibrary>
      (CLASSNAME, CLASSNAME+"LibraryGetByNameConst",
       self, extract::library, meta::name, name);
}

// Get, by name, non-const
Handle2Library
MultigroupLibraryGetByName(
   ConstHandle2Multigroup self,
   const char *const name
) {
   return detail::getByMetadatum<CPP,Handle2Library>
      (CLASSNAME, CLASSNAME+"LibraryGetByName",
       self, extract::library, meta::name, name);
}

// Set, by name
void
MultigroupLibrarySetByName(
   ConstHandle2Multigroup self,
   const char *const name,
   ConstHandle2ConstLibrary library
) {
   detail::setByMetadatum<CPP,CPPLibrary>
      (CLASSNAME, CLASSNAME+"LibrarySetByName",
       self, extract::library, meta::name, name, library);
}


// -----------------------------------------------------------------------------
// Custom functionality
// -----------------------------------------------------------------------------

#include "v1/multigroup/Multigroup/src/custom.cpp"
