
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef MULTI_V1_MULTIGROUP_LIBRARY
#define MULTI_V1_MULTIGROUP_LIBRARY

#include "multi/v1/multigroup/Element.hpp"

namespace multi {
namespace v1 {
namespace multigroup {

// -----------------------------------------------------------------------------
// multigroup::
// class Library
// -----------------------------------------------------------------------------

class Library : public Component<multigroup::Library> {
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, a field/node of this type
   static auto NAMESPACE() { return "multigroup"; }
   static auto CLASS() { return "Library"; }
   static auto FIELD() { return "library"; }

   // Core Interface multi-query to extract metadata and child nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment)/commentConverter{} |

         // metadata
         std::string{}
            / Meta<>("name") |

         // children
         ++Child<multigroup::Element>("element")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> name{this};

   // children
   Field<std::vector<multigroup::Element>> element{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->name, \
      this->element)

   // default
   Library() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields
   explicit Library(
      const wrapper<std::string> &name,
      const wrapper<std::vector<multigroup::Element>> &element = {}
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      name(this,name),
      element(this,element)
   {
      Component::finish();
   }

   // from node
   explicit Library(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Library(const Library &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      name(this,other.name),
      element(this,other.element)
   {
      Component::finish(other);
   }

   // move
   Library(Library &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      name(this,std::move(other.name)),
      element(this,std::move(other.element))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Library &operator=(const Library &) = default;
   Library &operator=(Library &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "multi/v1/multigroup/Library/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Library

} // namespace multigroup
} // namespace v1
} // namespace multi

#endif
