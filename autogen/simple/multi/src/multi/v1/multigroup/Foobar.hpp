
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef MULTI_V1_MULTIGROUP_FOOBAR
#define MULTI_V1_MULTIGROUP_FOOBAR

#include "multi/v1/key.hpp"

namespace multi {
namespace v1 {
namespace multigroup {

// -----------------------------------------------------------------------------
// multigroup::
// class Foobar
// -----------------------------------------------------------------------------

class Foobar :
   public Component<multigroup::Foobar>,
   public DataNode<std::vector<double>,false>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace, this class, and a field/node of this type
   static auto NAMESPACE() { return "multigroup"; }
   static auto CLASS() { return "Foobar"; }
   static auto FIELD() { return "foobar"; }

   // Core Interface multi-query to transfer information to/from Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("value")
      ;
   }

public:
   using Component::construct;

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string> value{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define GNDSTK_COMPONENT(blockdata) Component(blockdata, \
      this->comment, \
      this->value)

   // default
   Foobar() :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Foobar(
      const wrapper<std::string> &value
   ) :
      GNDSTK_COMPONENT(BlockData{}),
      value(this,value)
   {
      Component::finish();
   }

   // from node
   explicit Foobar(const Node &node) :
      GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector<double>
   Foobar(const std::vector<double> &vector) :
      GNDSTK_COMPONENT(BlockData{}),
      DataNode(vector)
   {
      Component::finish(vector);
   }

   // copy
   Foobar(const Foobar &other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      value(this,other.value)
   {
      Component::finish(other);
   }

   // move
   Foobar(Foobar &&other) :
      GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      value(this,std::move(other.value))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   Foobar &operator=(const Foobar &) = default;
   Foobar &operator=(Foobar &&) = default;

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "multi/v1/multigroup/Foobar/src/custom.hpp"
   #undef GNDSTK_COMPONENT
}; // class Foobar

} // namespace multigroup
} // namespace v1
} // namespace multi

#endif
