
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef MULTI_V1_MULTIGROUP_FOOBAR
#define MULTI_V1_MULTIGROUP_FOOBAR

#include "multi/v1/key.hpp"

namespace multi {
namespace v1 {
namespace multigroup {

// -----------------------------------------------------------------------------
// multigroup::
// class Foobar
// -----------------------------------------------------------------------------

class Foobar :
   public Component<multigroup::Foobar>,
   public DataNode<std::vector<double>,false>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "multigroup"; }
   static auto CLASS() { return "Foobar"; }
   static auto NODENAME() { return "foobar"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         std::string{}
            / Meta<>("value") |

         // data
         --Child<DataNode>(special::self) / DataConverter{}
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "value",
         "doubles"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "value",
         "doubles"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;
   using DataNode::operator=;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<std::string>
      value{this};

   // data
   std::vector<double> &doubles = *this;

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->value, \
      static_cast<DataNode &>(*this) \
   )

   // default
   Foobar() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Foobar(
      const wrapper<std::string>
         &value
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      value(this,value)
   {
      Component::finish();
   }

   // from node
   explicit Foobar(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // from vector<double>
   explicit Foobar(const std::vector<double> &vector) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      DataNode(vector)
   {
      Component::finish(vector);
   }

   // copy
   Foobar(const Foobar &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      DataNode(other),
      comment(this,other.comment),
      value(this,other.value)
   {
      Component::finish(other);
   }

   // move
   Foobar(Foobar &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      DataNode(std::move(other)),
      comment(this,std::move(other.comment)),
      value(this,std::move(other.value))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Foobar &operator=(const Foobar &other)
   {
      if (this != &other) {
         Component::operator=(other);
         DataNode::operator=(other);
         comment = other.comment;
         value = other.value;
      }
      return *this;
   }

   // move
   Foobar &operator=(Foobar &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         DataNode::operator=(std::move(other));
         comment = std::move(other.comment);
         value = std::move(other.value);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "multi/v1/multigroup/Foobar/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class Foobar

} // namespace multigroup
} // namespace v1
} // namespace multi

#endif
