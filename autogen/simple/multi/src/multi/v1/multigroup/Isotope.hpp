
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef MULTI_V1_MULTIGROUP_ISOTOPE
#define MULTI_V1_MULTIGROUP_ISOTOPE

#include "multi/v1/key.hpp"

namespace multi {
namespace v1 {
namespace multigroup {

// -----------------------------------------------------------------------------
// multigroup::
// class Isotope
// -----------------------------------------------------------------------------

class Isotope :
   public Component<multigroup::Isotope>
{
   friend class Component;

   // ------------------------
   // For Component
   // ------------------------

   // Names: this namespace and class, and original nodes (as in XML <...>)
   static auto NAMESPACE() { return "multigroup"; }
   static auto CLASS() { return "Isotope"; }
   static auto NODENAME() { return "isotope"; }

   // Core Interface multi-query to transfer information to/from core Nodes
   static auto KEYS()
   {
      return
         // comment
         ++Child<std::string>(special::comment) / CommentConverter{} |

         // metadata
         int{}
            / Meta<>("mass_number")
      ;
   }

   // Data member names. Usually - but not necessarily - the same as the node
   // names appearing in KEYS(). These are used by Component's prettyprinter.
   static const auto &FIELDNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "mass_number"
      };
      return names;
   }

   // Data member names, as they'll be presented in the Python bindings.
   static const auto &PYTHONNAMES()
   {
      static const std::vector<std::string> names = {
         "comment",
         "mass_number"
      };
      return names;
   }

   // ------------------------
   // Public interface
   // ------------------------

public:

   using component_t = Component;
   using Component::construct;

   // ------------------------
   // Data members
   // ------------------------

   // comment
   Field<std::vector<std::string>> comment{this};

   // metadata
   Field<int>
      mass_number{this};

   // ------------------------
   // Constructors
   // ------------------------

   #define NJOY_GNDSTK_COMPONENT(blockdata) \
   Component( \
      blockdata, \
      this->comment, \
      this->mass_number \
   )

   // default
   Isotope() :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish();
   }

   // from fields, comment excluded
   explicit Isotope(
      const wrapper<int>
         &mass_number
   ) :
      NJOY_GNDSTK_COMPONENT(BlockData{}),
      mass_number(this,mass_number)
   {
      Component::finish();
   }

   // from node
   explicit Isotope(const Node &node) :
      NJOY_GNDSTK_COMPONENT(BlockData{})
   {
      Component::finish(node);
   }

   // copy
   Isotope(const Isotope &other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,other.comment),
      mass_number(this,other.mass_number)
   {
      Component::finish(other);
   }

   // move
   Isotope(Isotope &&other) :
      NJOY_GNDSTK_COMPONENT(other.baseBlockData()),
      comment(this,std::move(other.comment)),
      mass_number(this,std::move(other.mass_number))
   {
      Component::finish(other);
   }

   // ------------------------
   // Assignment operators
   // ------------------------

   // copy
   Isotope &operator=(const Isotope &other)
   {
      if (this != &other) {
         Component::operator=(other);
         comment = other.comment;
         mass_number = other.mass_number;
      }
      return *this;
   }

   // move
   Isotope &operator=(Isotope &&other)
   {
      if (this != &other) {
         Component::operator=(std::move(other));
         comment = std::move(other.comment);
         mass_number = std::move(other.mass_number);
      }
      return *this;
   }

   // ------------------------
   // Custom functionality
   // ------------------------

   #include "multi/v1/multigroup/Isotope/src/custom.hpp"
   #undef NJOY_GNDSTK_COMPONENT
}; // class Isotope

} // namespace multigroup
} // namespace v1
} // namespace multi

#endif
