
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

#ifndef MULTI_V1_KEY
#define MULTI_V1_KEY

// GNDStk Core Interface
#include "GNDStk.hpp"

namespace multi {
namespace v1 {

using namespace njoy;
using namespace GNDStk;


// -----------------------------------------------------------------------------
// meta::
// -----------------------------------------------------------------------------

namespace meta {

#define GNDSTK_MAKE_LOOKUP(nameField,nameGNDS) \
   inline const auto nameField = makeLookup( \
      #nameGNDS, \
      [](const auto &obj) -> decltype(obj.nameField()) \
      { return obj.nameField(); } \
   )
// nameField vs. nameGNDS: for, e.g., Double vs. double in GNDS

GNDSTK_MAKE_LOOKUP(atomic_number,atomic_number);
GNDSTK_MAKE_LOOKUP(mass_number,mass_number);
GNDSTK_MAKE_LOOKUP(name,name);
GNDSTK_MAKE_LOOKUP(projectile,projectile);
GNDSTK_MAKE_LOOKUP(symbol,symbol);
GNDSTK_MAKE_LOOKUP(value,value);

#undef GNDSTK_MAKE_LOOKUP

} // namespace meta


// -----------------------------------------------------------------------------
// multigroup::child::
// -----------------------------------------------------------------------------

namespace multigroup {
namespace child {

inline const Child<> element("element");
inline const Child<> foobar("foobar");
inline const Child<> isotope("isotope");
inline const Child<> library("library");
inline const Child<> multigroup("multigroup");

} // namespace child
using namespace child;
} // namespace multigroup


// -----------------------------------------------------------------------------
// For convenience: using directives
// -----------------------------------------------------------------------------

namespace key {
   using namespace meta;
   using namespace multigroup::child;
} // namespace key

using namespace key;
using namespace multigroup;


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

} // namespace v1
} // namespace multi

#endif
