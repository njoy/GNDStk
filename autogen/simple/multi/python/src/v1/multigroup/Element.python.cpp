
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "multi/v1/multigroup/Element.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v1 {
namespace python_multigroup {

// Element wrapper
void wrapElement(python::module &module)
{
   using namespace multi;
   using namespace multi::v1;

   // type aliases
   using Component = multigroup::Element;

   // create the component
   python::class_<Component> component(
      module,
      "Element",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::optional<std::string> &,
            const int &,
            const std::vector<multigroup::Isotope> &,
            const std::optional<multigroup::Foobar> &
         >(),
         python::arg("symbol") = std::nullopt,
         python::arg("atomic_number"),
         python::arg("isotope"),
         python::arg("foobar") = std::nullopt,
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "symbol",
         [](const Component &self) { return self.symbol(); },
         Component::documentation("symbol").data()
      )
      .def_property_readonly(
         "atomic_number",
         [](const Component &self) { return self.atomic_number(); },
         Component::documentation("atomic_number").data()
      )
      .def_property_readonly(
         "isotope",
         [](const Component &self) { return self.isotope(); },
         Component::documentation("isotope").data()
      )
      .def_property_readonly(
         "foobar",
         [](const Component &self) { return self.foobar(); },
         Component::documentation("foobar").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_multigroup
} // namespace python_v1
