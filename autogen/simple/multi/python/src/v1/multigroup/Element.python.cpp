
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "multi/v1/multigroup/Element.hpp"
#include "definitions.hpp"

namespace python_v1 {
namespace python_multigroup {

// wrapper for multigroup::Element
void wrapElement(pybind11::module &module)
{
   using namespace multi;
   using namespace multi::v1;

   // type aliases
   using cppCLASS = multigroup::Element;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "Element",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::optional<std::string> &,
         const int &,
         const std::vector<multigroup::Isotope> &,
         const std::optional<multigroup::Foobar> &
      >(),
      pybind11::arg("symbol") = std::nullopt,
      pybind11::arg("atomic_number"),
      pybind11::arg("isotope"),
      pybind11::arg("foobar") = std::nullopt,
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set symbol
   object.def_property(
      "symbol",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.symbol();
      },
      [](cppCLASS &self, const std::optional<std::string> &value)
      {
         self.symbol() = value;
      },
      cppCLASS::component_t::documentation("symbol").data()
   );

   // get/set atomic_number
   object.def_property(
      "atomic_number",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.atomic_number();
      },
      [](cppCLASS &self, const int &value)
      {
         self.atomic_number() = value;
      },
      cppCLASS::component_t::documentation("atomic_number").data()
   );

   // get/set isotope
   object.def_property(
      "isotope",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.isotope();
      },
      [](cppCLASS &self, const std::vector<multigroup::Isotope> &value)
      {
         self.isotope() = value;
      },
      cppCLASS::component_t::documentation("isotope").data()
   );

   // get/set foobar
   object.def_property(
      "foobar",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.foobar();
      },
      [](cppCLASS &self, const std::optional<multigroup::Foobar> &value)
      {
         self.foobar() = value;
      },
      cppCLASS::component_t::documentation("foobar").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_multigroup
} // namespace python_v1
