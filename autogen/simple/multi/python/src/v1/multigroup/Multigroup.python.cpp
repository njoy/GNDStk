
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "multi/v1/multigroup/Multigroup.hpp"
#include "definitions.hpp"

// namespace aliases
namespace python = pybind11;

namespace python_v1 {
namespace python_multigroup {

// Multigroup wrapper
void wrapMultigroup(python::module &module)
{
   using namespace multi;
   using namespace multi::v1;

   // type aliases
   using Component = multigroup::Multigroup;

   // create the component
   python::class_<Component> component(
      module,
      "Multigroup",
      Component::documentation().data()
   );

   // wrap the component
   component
      .def(
         python::init<
            const std::string &,
            const std::vector<multigroup::Library> &
         >(),
         python::arg("projectile"),
         python::arg("library"),
         Component::documentation("constructor").data()
      )
      .def_property_readonly(
         "projectile",
         [](const Component &self) { return self.projectile(); },
         Component::documentation("projectile").data()
      )
      .def_property_readonly(
         "library",
         [](const Component &self) { return self.library(); },
         Component::documentation("library").data()
      )
   ;

   // add standard component definitions
   addStandardComponentDefinitions< Component >( component );
}

} // namespace python_multigroup
} // namespace python_v1
