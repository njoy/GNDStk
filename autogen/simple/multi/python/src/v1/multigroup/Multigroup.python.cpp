
// THIS FILE WAS AUTOGENERATED!
// DO NOT MODIFY!

// system includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// local includes
#include "multi/v1/multigroup/Multigroup.hpp"
#include "definitions.hpp"

namespace python_v1 {
namespace python_multigroup {

// wrapper for multigroup::Multigroup
void wrapMultigroup(pybind11::module &module)
{
   using namespace multi;
   using namespace multi::v1;

   // type aliases
   using cppCLASS = multigroup::Multigroup;

   // create the Python object
   pybind11::class_<cppCLASS> object(
      module, "Multigroup",
      cppCLASS::component_t::documentation().data()
   );

   // constructor: from fields
   object.def(
      pybind11::init<
         const std::string &,
         const std::vector<multigroup::Library> &
      >(),
      pybind11::arg("projectile"),
      pybind11::arg("library"),
      cppCLASS::component_t::documentation("constructor").data()
   );

   // get/set projectile
   object.def_property(
      "projectile",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.projectile();
      },
      [](cppCLASS &self, const std::string &value)
      {
         self.projectile() = value;
      },
      cppCLASS::component_t::documentation("projectile").data()
   );

   // get/set library
   object.def_property(
      "library",
      [](const cppCLASS &self) -> decltype(auto)
      {
         return self.library();
      },
      [](cppCLASS &self, const std::vector<multigroup::Library> &value)
      {
         self.library() = value;
      },
      cppCLASS::component_t::documentation("library").data()
   );

   // add standard definitions
   addStandardComponentDefinitions<cppCLASS>(object);
}

} // namespace python_multigroup
} // namespace python_v1
